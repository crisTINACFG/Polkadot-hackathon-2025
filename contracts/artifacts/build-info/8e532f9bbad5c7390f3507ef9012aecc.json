{
	"id": "8e532f9bbad5c7390f3507ef9012aecc",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"CardTrading.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IInventoryManager {\r\n    function transferCards(address from, address to, uint cardId, uint amount) external;\r\n    function hasCard(address user, uint cardId, uint amount) external view returns (bool);\r\n    function setTradingContract(address _contract) external;\r\n}\r\n\r\ncontract CardTrading {\r\n    struct Listing {\r\n        address seller;\r\n        uint8 offerCardId;\r\n        uint8 requestCardId;\r\n        bool active;\r\n    }\r\n\r\n    Listing[] public listings;\r\n    IInventoryManager public inventory;\r\n    address public owner;\r\n\r\n    constructor(address inventoryAddress) {\r\n        inventory = IInventoryManager(inventoryAddress);\r\n        owner = msg.sender;\r\n        // Try to set this contract as the trading contract in InventoryManager\r\n        try inventory.setTradingContract(address(this)) {\r\n            // Successfully set this contract as the trading contract\r\n        } catch {\r\n            // The trading contract might already be set, that's okay\r\n        }\r\n    }\r\n\r\n    function createListing(uint8 offerCardId, uint8 requestCardId) external {\r\n        require(offerCardId < 17 && requestCardId < 17, \"Invalid ID\");\r\n        require(inventory.hasCard(msg.sender, offerCardId, 1), \"No card\");\r\n\r\n        listings.push(Listing({\r\n            seller: msg.sender,\r\n            offerCardId: offerCardId,\r\n            requestCardId: requestCardId,\r\n            active: true\r\n        }));\r\n    }\r\n\r\n    function acceptListing(uint listingId) external {\r\n        require(listingId < listings.length, \"Invalid ID\");\r\n        Listing storage listing = listings[listingId];\r\n        require(listing.active, \"Inactive\");\r\n        require(msg.sender != listing.seller, \"Own listing\");\r\n        require(inventory.hasCard(msg.sender, listing.requestCardId, 1), \"No card\");\r\n\r\n        // Swap cards\r\n        inventory.transferCards(msg.sender, listing.seller, listing.requestCardId, 1);\r\n        inventory.transferCards(listing.seller, msg.sender, listing.offerCardId, 1);\r\n\r\n        listing.active = false;\r\n    }\r\n\r\n    function cancelListing(uint listingId) external {\r\n        require(listingId < listings.length, \"Invalid ID\");\r\n        Listing storage listing = listings[listingId];\r\n        require(listing.active, \"Inactive\");\r\n        require(msg.sender == listing.seller, \"Not seller\");\r\n        \r\n        listing.active = false;\r\n    }\r\n\r\n    function getAllListings() external view returns (Listing[] memory) {\r\n        return listings;\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"CardTrading.sol": {
				"CardTrading": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "inventoryAddress",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "listingId",
									"type": "uint256"
								}
							],
							"name": "acceptListing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "listingId",
									"type": "uint256"
								}
							],
							"name": "cancelListing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "offerCardId",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "requestCardId",
									"type": "uint8"
								}
							],
							"name": "createListing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllListings",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "seller",
											"type": "address"
										},
										{
											"internalType": "uint8",
											"name": "offerCardId",
											"type": "uint8"
										},
										{
											"internalType": "uint8",
											"name": "requestCardId",
											"type": "uint8"
										},
										{
											"internalType": "bool",
											"name": "active",
											"type": "bool"
										}
									],
									"internalType": "struct CardTrading.Listing[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "inventory",
							"outputs": [
								{
									"internalType": "contract IInventoryManager",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "listings",
							"outputs": [
								{
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "offerCardId",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "requestCardId",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inventoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"acceptListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"offerCardId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requestCardId\",\"type\":\"uint8\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllListings\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"offerCardId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requestCardId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct CardTrading.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"contract IInventoryManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"offerCardId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requestCardId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CardTrading.sol\":\"CardTrading\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"CardTrading.sol\":{\"keccak256\":\"0x2ef60e15560393780414f21c56a51e990ca08fcdf57e055ae8baa009457aa9d4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6fe5716dc983950ecb5c2deae1dd2d39b0296f901e389615d328ba6cd4492f84\",\"dweb:/ipfs/QmebnfdvWaghu5JAihnjfHdfRGKiQQZbAid5h6VD621SYQ\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 42,
								"contract": "CardTrading.sol:CardTrading",
								"label": "listings",
								"offset": 0,
								"slot": "0",
								"type": "t_array(t_struct(Listing)38_storage)dyn_storage"
							},
							{
								"astId": 45,
								"contract": "CardTrading.sol:CardTrading",
								"label": "inventory",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IInventoryManager)29"
							},
							{
								"astId": 47,
								"contract": "CardTrading.sol:CardTrading",
								"label": "owner",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_struct(Listing)38_storage)dyn_storage": {
								"base": "t_struct(Listing)38_storage",
								"encoding": "dynamic_array",
								"label": "struct CardTrading.Listing[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IInventoryManager)29": {
								"encoding": "inplace",
								"label": "contract IInventoryManager",
								"numberOfBytes": "20"
							},
							"t_struct(Listing)38_storage": {
								"encoding": "inplace",
								"label": "struct CardTrading.Listing",
								"members": [
									{
										"astId": 31,
										"contract": "CardTrading.sol:CardTrading",
										"label": "seller",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 33,
										"contract": "CardTrading.sol:CardTrading",
										"label": "offerCardId",
										"offset": 20,
										"slot": "0",
										"type": "t_uint8"
									},
									{
										"astId": 35,
										"contract": "CardTrading.sol:CardTrading",
										"label": "requestCardId",
										"offset": 21,
										"slot": "0",
										"type": "t_uint8"
									},
									{
										"astId": 37,
										"contract": "CardTrading.sol:CardTrading",
										"label": "active",
										"offset": 22,
										"slot": "0",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 13328\n// Code size = 41746 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 4 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @30\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffff80\n   341: u64 [sp + 0x78] = ra\n   344: u64 [sp + 0x70] = s0\n   347: u64 [sp + 0x68] = s1\n   350: s0 = sp + 0x80\n   354: sp = sp & 0xffffffffffffffe0\n   357: a0 = 0x40\n   360: a1 = 0x20\n   363: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   368: u8 [a0 + 31] = 0x80\n   373: u8 [a0 + 30] = 0\n   376: u8 [a0 + 29] = 0\n   379: u8 [a0 + 28] = 0\n   382: u8 [a0 + 27] = 0\n   385: u8 [a0 + 26] = 0\n   388: u8 [a0 + 25] = 0\n   391: u8 [a0 + 24] = 0\n   394: u8 [a0 + 23] = 0\n   397: u8 [a0 + 22] = 0\n   400: u8 [a0 + 21] = 0\n   403: u8 [a0 + 20] = 0\n   406: u8 [a0 + 19] = 0\n   409: u8 [a0 + 18] = 0\n   412: u8 [a0 + 17] = 0\n   415: u8 [a0 + 16] = 0\n   418: u8 [a0 + 15] = 0\n   421: u8 [a0 + 14] = 0\n   424: u8 [a0 + 13] = 0\n   427: u8 [a0 + 12] = 0\n   430: u8 [a0 + 11] = 0\n   433: u8 [a0 + 10] = 0\n   436: u8 [a0 + 9] = 0\n   439: u8 [a0 + 8] = 0\n   442: u8 [a0 + 7] = 0\n   445: u8 [a0 + 6] = 0\n   448: u8 [a0 + 5] = 0\n   451: u8 [a0 + 4] = 0\n   454: u8 [a0 + 3] = 0\n   457: u8 [a0 + 2] = 0\n   460: u8 [a0 + 1] = 0\n   463: u8 [a0 + 0] = 0\n   465: u64 [sp + 88] = 0\n   468: u64 [sp + 64] = 0\n   471: u64 [sp + 72] = 0\n   474: u64 [sp + 80] = 0\n   477: i32 a0 = sp + 0x40\n   480: ecalli 15 // 'value_transferred'\n   482: fallthrough\n      : @16 (gas: 8)\n   483: a0 = u64 [sp + 0x50]\n   486: a1 = u64 [sp + 0x58]\n   489: a2 = u64 [sp + 0x48]\n   492: a3 = u64 [sp + 0x40]\n   495: a1 = a1 | a2\n   498: a0 = a0 | a3\n   501: a0 = a0 | a1\n   504: jump @22 if a0 != 0\n      : @17 (gas: 20)\n   508: a0 = sp + 0x20\n   511: ra = 0xa\n   514: sp = sp + 0xffffffffffffff90\n   517: u64 [sp + 0x68] = ra\n   520: u64 [sp + 0x60] = s0\n   523: u64 [sp + 0x58] = s1\n   526: s0 = sp + 0x70\n   529: sp = sp & 0xfffffffffffffff0\n   532: s1 = i32 [0x20004]\n   537: u64 [sp + 0x8] = a0\n   540: a0 = s1 << 0x20\n   543: a0 = a0 >> 0x20\n   546: u64 [sp + 40] = 0\n   549: u64 [sp + 32] = 0\n   552: u64 [sp + 0x10] = a0\n   555: a0 = sp + 0x30\n   558: a1 = sp + 0x10\n   561: u64 [sp + 24] = 0\n   564: ra = 0x38\n   567: jump @52\n      : @18 [@dyn 5] (gas: 157)\n   570: a1 = u64 [sp + 0x20]\n   573: a0 = u64 [sp + 0x28]\n   576: a2 = u64 [sp + 0x30]\n   579: a3 = u64 [sp + 0x38]\n   582: u64 [sp + 0x18] = a3\n   585: u64 [sp + 0x10] = a2\n   588: u64 [sp + 0x8] = a0\n   591: a0 = sp\n   593: u64 [sp] = a1\n   595: ra = 0xc\n   598: sp = sp + 0xfffffffffffffe40\n   602: u64 [sp + 0x1b8] = ra\n   606: u64 [sp + 0x1b0] = s0\n   610: u64 [sp + 0x1a8] = s1\n   614: s0 = sp + 0x1c0\n   618: sp = sp & 0xffffffffffffffe0\n   621: a1 = u64 [a0]\n   623: u64 [sp + 0x78] = a1\n   626: a1 = u64 [a0 + 0x8]\n   629: u64 [sp + 0x70] = a1\n   632: s1 = u32 [a0 + 0x10]\n   635: u64 [sp + 376] = 0\n   639: u64 [sp + 368] = 0\n   643: u64 [sp + 360] = 0\n   647: u64 [sp + 352] = 0x1\n   652: u64 [sp + 408] = 0\n   656: u64 [sp + 400] = 0\n   660: u64 [sp + 392] = 0\n   664: u64 [sp + 384] = 0\n   668: u32 [sp + 416] = 0x20\n   673: i32 a1 = sp + 0x160\n   677: i32 a3 = sp + 0x180\n   681: i32 a4 = sp + 0x1a0\n   685: a2 = 0xffffffffffffffff\n   688: a0 = 0\n   690: ecalli 7 // 'get_storage'\n   692: a0 = u32 [sp + 0x194]\n   696: a0 = a0 << 0x20\n   699: a1 = u64 [sp + 0x198]\n   703: a0 = a0 | s1\n   706: u64 [sp + 376] = 0\n   710: u64 [sp + 368] = 0\n   714: u64 [sp + 360] = 0\n   718: u64 [sp + 352] = 0x1\n   723: u64 [sp + 0x198] = a1\n   727: u64 [sp + 0x190] = a0\n   731: a0 = u64 [sp + 0x70]\n   734: u64 [sp + 0x188] = a0\n   738: a0 = u64 [sp + 0x78]\n   741: u64 [sp + 0x180] = a0\n   745: i32 a1 = sp + 0x160\n   749: i32 a3 = sp + 0x180\n   753: a2 = 0xffffffffffffffff\n   756: a4 = 0x20\n   759: a0 = 0\n   761: ecalli 14 // 'set_storage'\n   763: i32 a0 = sp + 0x80\n   767: ecalli 5 // 'caller'\n   769: a0 = u64 [sp + 0x88]\n   773: a1 = i32 [sp + 0x90]\n   777: a2 = u64 [sp + 0x80]\n   781: a0 = reverse a0\n   783: a3 = a0 << 0x20\n   786: a1 = reverse a1\n   788: a1 = a1 >> 0x20\n   791: a1 = a1 | a3\n   794: u64 [sp + 0x78] = a1\n   797: a0 = a0 >> 0x20\n   800: s1 = reverse a2\n   802: a1 = s1 << 0x20\n   805: a0 = a0 | a1\n   808: u64 [sp + 0x70] = a0\n   811: s1 = s1 >> 0x20\n   814: u64 [sp + 376] = 0\n   818: u64 [sp + 368] = 0\n   822: u64 [sp + 360] = 0\n   826: u64 [sp + 352] = 0x2\n   831: u64 [sp + 408] = 0\n   835: u64 [sp + 400] = 0\n   839: u64 [sp + 392] = 0\n   843: u64 [sp + 384] = 0\n   847: u32 [sp + 416] = 0x20\n   852: i32 a1 = sp + 0x160\n   856: i32 a3 = sp + 0x180\n   860: i32 a4 = sp + 0x1a0\n   864: a2 = 0xffffffffffffffff\n   867: a0 = 0\n   869: ecalli 7 // 'get_storage'\n   871: a0 = u32 [sp + 0x194]\n   875: a0 = a0 << 0x20\n   878: a1 = u64 [sp + 0x198]\n   882: a0 = a0 | s1\n   885: u64 [sp + 376] = 0\n   889: u64 [sp + 368] = 0\n   893: u64 [sp + 360] = 0\n   897: u64 [sp + 352] = 0x2\n   902: u64 [sp + 0x198] = a1\n   906: u64 [sp + 0x190] = a0\n   910: a0 = u64 [sp + 0x70]\n   913: u64 [sp + 0x188] = a0\n   917: a0 = u64 [sp + 0x78]\n   920: u64 [sp + 0x180] = a0\n   924: i32 a1 = sp + 0x160\n   928: i32 a3 = sp + 0x180\n   932: a2 = 0xffffffffffffffff\n   935: a4 = 0x20\n   938: a0 = 0\n   940: ecalli 14 // 'set_storage'\n   942: u64 [sp + 376] = 0\n   946: u64 [sp + 368] = 0\n   950: u64 [sp + 360] = 0\n   954: u64 [sp + 352] = 0x1\n   959: u64 [sp + 408] = 0\n   963: u64 [sp + 400] = 0\n   967: u64 [sp + 392] = 0\n   971: u64 [sp + 384] = 0\n   975: u32 [sp + 416] = 0x20\n   980: i32 a1 = sp + 0x160\n   984: i32 a3 = sp + 0x180\n   988: i32 a4 = sp + 0x1a0\n   992: a2 = 0xffffffffffffffff\n   995: a0 = 0\n   997: ecalli 7 // 'get_storage'\n   999: a0 = u64 [sp + 0x180]\n  1003: u64 [sp + 0x78] = a0\n  1006: a0 = u64 [sp + 0x190]\n  1010: u64 [sp + 0x70] = a0\n  1013: s1 = u64 [sp + 0x188]\n  1017: i32 a0 = sp + 0xa0\n  1021: ecalli 0 // 'address'\n  1022: a0 = i32 [sp + 0xb0]\n  1026: u64 [sp + 0x48] = a0\n  1029: a0 = u64 [sp + 0xa0]\n  1033: u64 [sp + 0x40] = a0\n  1036: a0 = u64 [sp + 0xa8]\n  1040: u64 [sp + 0x38] = a0\n  1043: a0 = reverse s1\n  1045: a1 = a0 << 0x20\n  1048: a2 = u64 [sp + 0x70]\n  1051: a2 = reverse a2\n  1053: a2 = a2 >> 0x20\n  1056: a3 = a2 | a1\n  1059: a0 = a0 >> 0x20\n  1062: a1 = u64 [sp + 0x78]\n  1065: a1 = reverse a1\n  1067: a2 = a1 << 0x20\n  1070: a0 = a0 | a2\n  1073: a1 = a1 >> 0x20\n  1076: u64 [sp + 0x50] = a0\n  1079: u64 [sp + 0xc8] = a0\n  1083: u64 [sp + 0x60] = a3\n  1086: u64 [sp + 0xc0] = a3\n  1090: u64 [sp + 0x58] = a1\n  1093: u32 [sp + 0xd0] = a1\n  1097: i32 a0 = sp + 0xc0\n  1101: ecalli 6 // 'code_size'\n  1103: jump @75\n      : @19 [@dyn 6] (gas: 3)\n  1106: a0 = 0x40\n  1109: a1 = 0x20\n  1112: ra = 14, jump @0\n      : @20 [@dyn 7] (gas: 100)\n  1117: a1 = u8 [a0 + 0x11]\n  1120: a2 = u8 [a0 + 0x10]\n  1123: a3 = u8 [a0 + 0x12]\n  1126: a4 = u8 [a0 + 0x13]\n  1129: a1 = a1 << 0x8\n  1132: a1 = a1 | a2\n  1135: a3 = a3 << 0x10\n  1138: a4 = a4 << 0x18\n  1141: a3 = a3 | a4\n  1144: a1 = a1 | a3\n  1147: a2 = u8 [a0 + 0x15]\n  1150: a3 = u8 [a0 + 0x14]\n  1153: a4 = u8 [a0 + 0x16]\n  1156: a5 = u8 [a0 + 0x17]\n  1159: a2 = a2 << 0x8\n  1162: a2 = a2 | a3\n  1165: a4 = a4 << 0x10\n  1168: a5 = a5 << 0x18\n  1171: a4 = a4 | a5\n  1174: a2 = a2 | a4\n  1177: a2 = a2 << 0x20\n  1180: t0 = a2 | a1\n  1183: a2 = u8 [a0 + 0x1]\n  1186: a3 = u8 [a0]\n  1188: a4 = u8 [a0 + 0x2]\n  1191: a5 = u8 [a0 + 0x3]\n  1194: a2 = a2 << 0x8\n  1197: a2 = a2 | a3\n  1200: a4 = a4 << 0x10\n  1203: a5 = a5 << 0x18\n  1206: a4 = a4 | a5\n  1209: a2 = a2 | a4\n  1212: a3 = u8 [a0 + 0x5]\n  1215: a4 = u8 [a0 + 0x4]\n  1218: a5 = u8 [a0 + 0x6]\n  1221: s1 = u8 [a0 + 0x7]\n  1224: a3 = a3 << 0x8\n  1227: a3 = a3 | a4\n  1230: a5 = a5 << 0x10\n  1233: s1 = s1 << 0x18\n  1236: a5 = a5 | s1\n  1239: a3 = a3 | a5\n  1242: a3 = a3 << 0x20\n  1245: a2 = a2 | a3\n  1248: a3 = u8 [a0 + 0x19]\n  1251: a4 = u8 [a0 + 0x18]\n  1254: a5 = u8 [a0 + 0x1a]\n  1257: s1 = u8 [a0 + 0x1b]\n  1260: a3 = a3 << 0x8\n  1263: a3 = a3 | a4\n  1266: a5 = a5 << 0x10\n  1269: s1 = s1 << 0x18\n  1272: a5 = a5 | s1\n  1275: a3 = a3 | a5\n  1278: a4 = u8 [a0 + 0x1d]\n  1281: a5 = u8 [a0 + 0x1c]\n  1284: s1 = u8 [a0 + 0x1e]\n  1287: a1 = u8 [a0 + 0x1f]\n  1290: a4 = a4 << 0x8\n  1293: a4 = a4 | a5\n  1296: s1 = s1 << 0x10\n  1299: a1 = a1 << 0x18\n  1302: a1 = a1 | s1\n  1305: a1 = a1 | a4\n  1308: a1 = a1 << 0x20\n  1311: a3 = a3 | a1\n  1314: a1 = u8 [a0 + 0x9]\n  1317: a4 = u8 [a0 + 0x8]\n  1320: a5 = u8 [a0 + 0xa]\n  1323: s1 = u8 [a0 + 0xb]\n  1326: a1 = a1 << 0x8\n  1329: a1 = a1 | a4\n  1332: a5 = a5 << 0x10\n  1335: s1 = s1 << 0x18\n  1338: a5 = a5 | s1\n  1341: a1 = a1 | a5\n  1344: a4 = u8 [a0 + 0xd]\n  1347: a5 = u8 [a0 + 0xc]\n  1350: s1 = u8 [a0 + 0xe]\n  1353: a0 = u8 [a0 + 0xf]\n  1356: a4 = a4 << 0x8\n  1359: a4 = a4 | a5\n  1362: s1 = s1 << 0x10\n  1365: a0 = a0 << 0x18\n  1368: a0 = a0 | s1\n  1371: a0 = a0 | a4\n  1374: a0 = a0 << 0x20\n  1377: a0 = a0 | a1\n  1380: a0 = reverse a0\n  1382: s1 = reverse a3\n  1384: a1 = reverse a2\n  1386: a2 = reverse t0\n  1388: a1 = a1 | a2\n  1391: a2 = s1 | a0\n  1394: a2 = a2 | a1\n  1397: a2 = a2 >> 0x20\n  1400: a0 = a0 | a1\n  1403: a0 = a0 << 0x20\n  1406: a0 = a0 | a2\n  1409: jump @24 if a0 == 0\n      : @21 (gas: 1)\n  1412: trap\n      : @22 (gas: 3)\n  1413: a0 = 0\n  1415: a1 = 0\n  1417: ra = 16, jump @0\n      : @23 [@dyn 8] (gas: 5)\n  1422: i32 a1 = a0 + 0\n  1424: a0 = 0x1\n  1427: a2 = 0\n  1429: ecalli 12 // 'seal_return'\n  1431: fallthrough\n      : @24 (gas: 4)\n  1432: i32 s1 = s1 + 0\n  1434: a0 = s1\n  1436: a1 = 0\n  1438: ra = 18, jump @0\n      : @25 [@dyn 9] (gas: 5)\n  1443: i32 a0 = a0 + 0\n  1445: a1 = 0\n  1447: a2 = 0\n  1449: ecalli 2 // 'call_data_copy'\n  1451: fallthrough\n      : @26 (gas: 2)\n  1452: a1 = i32 [0x20008]\n  1457: jump @28 if a1 == 0\n      : @27 (gas: 4)\n  1460: a0 = 0x30010\n  1465: i32 a0 = a0 + 0\n  1467: ecalli 13 // 'set_immutable_data'\n  1469: fallthrough\n      : @28 (gas: 3)\n  1470: a0 = s1\n  1472: a1 = 0\n  1474: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 6)\n  1479: i32 a1 = a0 + 0\n  1481: a0 = 0\n  1483: a2 = 0\n  1485: ra = 0x16\n  1488: ecalli 12 // 'seal_return'\n  1490: fallthrough\n      : @30 [@dyn 11] (gas: 8)\n  1491: sp = sp + 0xffffffffffffffc0\n  1494: u64 [sp + 0x38] = ra\n  1497: u64 [sp + 0x30] = s0\n  1500: s0 = sp + 0x40\n  1503: sp = sp & 0xffffffffffffffe0\n  1506: a0 = 0x40\n  1509: a1 = 0x20\n  1512: ra = 24, jump @0\n      : @31 [@dyn 12] (gas: 34)\n  1517: u8 [a0 + 31] = 0x80\n  1522: u8 [a0 + 30] = 0\n  1525: u8 [a0 + 29] = 0\n  1528: u8 [a0 + 28] = 0\n  1531: u8 [a0 + 27] = 0\n  1534: u8 [a0 + 26] = 0\n  1537: u8 [a0 + 25] = 0\n  1540: u8 [a0 + 24] = 0\n  1543: u8 [a0 + 23] = 0\n  1546: u8 [a0 + 22] = 0\n  1549: u8 [a0 + 21] = 0\n  1552: u8 [a0 + 20] = 0\n  1555: u8 [a0 + 19] = 0\n  1558: u8 [a0 + 18] = 0\n  1561: u8 [a0 + 17] = 0\n  1564: u8 [a0 + 16] = 0\n  1567: u8 [a0 + 15] = 0\n  1570: u8 [a0 + 14] = 0\n  1573: u8 [a0 + 13] = 0\n  1576: u8 [a0 + 12] = 0\n  1579: u8 [a0 + 11] = 0\n  1582: u8 [a0 + 10] = 0\n  1585: u8 [a0 + 9] = 0\n  1588: u8 [a0 + 8] = 0\n  1591: u8 [a0 + 7] = 0\n  1594: u8 [a0 + 3] = 0\n  1597: u8 [a0 + 2] = 0\n  1600: u8 [a0 + 1] = 0\n  1603: u8 [a0 + 0] = 0\n  1605: a1 = i32 [0x20004]\n  1610: u8 [a0 + 6] = 0\n  1613: u8 [a0 + 5] = 0\n  1616: u8 [a0 + 4] = 0\n  1619: jump @45 if a1 <u 4\n      : @32 (gas: 4)\n  1624: i32 a0 = sp + 0\n  1626: a1 = 0\n  1628: ecalli 3 // 'call_data_load'\n  1630: fallthrough\n      : @33 (gas: 2)\n  1631: a0 = i32 [sp + 0x1c]\n  1634: jump @38 if a0 <=s 3732202874\n      : @34 (gas: 2)\n  1641: a1 = 0x15d53000\n  1647: jump @42 if a0 >s 366291547\n      : @35 (gas: 1)\n  1654: jump @47 if a0 == 3732202875\n      : @36 (gas: 1)\n  1662: jump @45 if a0 != 363263439\n      : @37 (gas: 13)\n  1670: ra = 0x1a\n  1673: sp = sp + 0xffffffffffffff00\n  1677: u64 [sp + 0xf8] = ra\n  1681: u64 [sp + 0xf0] = s0\n  1685: s0 = sp + 0x100\n  1689: sp = sp & 0xffffffffffffffe0\n  1692: u64 [sp + 216] = 0\n  1696: u64 [sp + 208] = 0\n  1700: u64 [sp + 200] = 0\n  1704: u64 [sp + 192] = 0\n  1708: i32 a0 = sp + 0xc0\n  1712: ecalli 15 // 'value_transferred'\n  1714: jump @105\n      : @38 [@dyn 13] (gas: 1)\n  1717: jump @46 if a0 == 2376452955\n      : @39 (gas: 1)\n  1724: jump @49 if a0 == 2926824684\n      : @40 (gas: 1)\n  1732: jump @45 if a0 != 2968316798\n      : @41 (gas: 1)\n  1739: ra = 28, jump @206\n      : @42 [@dyn 14] (gas: 2)\n  1744: i32 a1 = a1 + 0xfffffffffffffa5c\n  1748: jump @48 if a0 == a1\n      : @43 (gas: 1)\n  1752: jump @45 if a0 != 811231144\n      : @44 (gas: 13)\n  1759: ra = 0x1e\n  1762: sp = sp + 0xffffffffffffff80\n  1765: u64 [sp + 0x78] = ra\n  1768: u64 [sp + 0x70] = s0\n  1771: s0 = sp + 0x80\n  1775: sp = sp & 0xffffffffffffffe0\n  1778: u64 [sp + 56] = 0\n  1781: u64 [sp + 48] = 0\n  1784: u64 [sp + 40] = 0\n  1787: u64 [sp + 32] = 0\n  1790: i32 a0 = sp + 0x20\n  1793: ecalli 15 // 'value_transferred'\n  1795: jump @131\n      : @45 [@dyn 15] (gas: 7)\n  1798: ra = 0x20\n  1801: sp = sp + 0xfffffffffffffff8\n  1804: u64 [sp] = ra\n  1806: a0 = 0\n  1808: a1 = 0\n  1810: ra = 0x42\n  1813: jump @0\n      : @46 [@dyn 16] (gas: 14)\n  1816: ra = 0x22\n  1819: sp = sp + 0xffffffffffffff60\n  1823: u64 [sp + 0x98] = ra\n  1827: u64 [sp + 0x90] = s0\n  1831: u64 [sp + 0x88] = s1\n  1835: s0 = sp + 0xa0\n  1839: sp = sp & 0xffffffffffffffe0\n  1842: u64 [sp + 56] = 0\n  1845: u64 [sp + 48] = 0\n  1848: u64 [sp + 40] = 0\n  1851: u64 [sp + 32] = 0\n  1854: i32 a0 = sp + 0x20\n  1857: ecalli 15 // 'value_transferred'\n  1859: jump @142\n      : @47 [@dyn 17] (gas: 14)\n  1862: ra = 0x24\n  1865: sp = sp + 0xfffffffffffffe80\n  1869: u64 [sp + 0x178] = ra\n  1873: u64 [sp + 0x170] = s0\n  1877: u64 [sp + 0x168] = s1\n  1881: s0 = sp + 0x180\n  1885: sp = sp & 0xffffffffffffffe0\n  1888: u64 [sp + 312] = 0\n  1892: u64 [sp + 304] = 0\n  1896: u64 [sp + 296] = 0\n  1900: u64 [sp + 288] = 0\n  1904: i32 a0 = sp + 0x120\n  1908: ecalli 15 // 'value_transferred'\n  1910: jump @247\n      : @48 [@dyn 18] (gas: 14)\n  1913: ra = 0x26\n  1916: sp = sp + 0xffffffffffffff60\n  1920: u64 [sp + 0x98] = ra\n  1924: u64 [sp + 0x90] = s0\n  1928: u64 [sp + 0x88] = s1\n  1932: s0 = sp + 0xa0\n  1936: sp = sp & 0xffffffffffffffe0\n  1939: u64 [sp + 56] = 0\n  1942: u64 [sp + 48] = 0\n  1945: u64 [sp + 40] = 0\n  1948: u64 [sp + 32] = 0\n  1951: i32 a0 = sp + 0x20\n  1954: ecalli 15 // 'value_transferred'\n  1956: jump @120\n      : @49 [@dyn 19] (gas: 14)\n  1959: ra = 0x28\n  1962: sp = sp + 0xfffffffffffffee0\n  1966: u64 [sp + 0x118] = ra\n  1970: u64 [sp + 0x110] = s0\n  1974: u64 [sp + 0x108] = s1\n  1978: s0 = sp + 0x120\n  1982: sp = sp & 0xffffffffffffffe0\n  1985: u64 [sp + 248] = 0\n  1989: u64 [sp + 240] = 0\n  1993: u64 [sp + 232] = 0\n  1997: u64 [sp + 224] = 0\n  2001: i32 a0 = sp + 0xe0\n  2005: ecalli 15 // 'value_transferred'\n  2007: jump @194\n      : @50 [@dyn 20] (gas: 7)\n  2010: sp = sp + 0xfffffffffffffff0\n  2013: u64 [sp + 0x8] = ra\n  2016: u64 [sp] = s0\n  2018: s0 = a0\n  2020: a0 = 0x40\n  2023: a1 = 0x20\n  2026: ra = 42, jump @0\n      : @51 [@dyn 21] (gas: 100)\n  2031: a1 = u8 [a0 + 0x1]\n  2034: a2 = u8 [a0]\n  2036: a3 = u8 [a0 + 0x2]\n  2039: a4 = u8 [a0 + 0x3]\n  2042: a1 = a1 << 0x8\n  2045: a1 = a1 | a2\n  2048: a3 = a3 << 0x10\n  2051: a4 = a4 << 0x18\n  2054: a3 = a3 | a4\n  2057: a1 = a1 | a3\n  2060: a2 = u8 [a0 + 0x5]\n  2063: a3 = u8 [a0 + 0x4]\n  2066: a4 = u8 [a0 + 0x6]\n  2069: a5 = u8 [a0 + 0x7]\n  2072: a2 = a2 << 0x8\n  2075: a2 = a2 | a3\n  2078: a4 = a4 << 0x10\n  2081: a5 = a5 << 0x18\n  2084: a4 = a4 | a5\n  2087: a2 = a2 | a4\n  2090: a2 = a2 << 0x20\n  2093: t0 = a2 | a1\n  2096: a2 = u8 [a0 + 0x9]\n  2099: a3 = u8 [a0 + 0x8]\n  2102: a4 = u8 [a0 + 0xa]\n  2105: a5 = u8 [a0 + 0xb]\n  2108: a2 = a2 << 0x8\n  2111: a2 = a2 | a3\n  2114: a4 = a4 << 0x10\n  2117: a5 = a5 << 0x18\n  2120: a4 = a4 | a5\n  2123: a2 = a2 | a4\n  2126: a3 = u8 [a0 + 0xd]\n  2129: a4 = u8 [a0 + 0xc]\n  2132: a5 = u8 [a0 + 0xe]\n  2135: a1 = u8 [a0 + 0xf]\n  2138: a3 = a3 << 0x8\n  2141: a3 = a3 | a4\n  2144: a5 = a5 << 0x10\n  2147: a1 = a1 << 0x18\n  2150: a1 = a1 | a5\n  2153: a1 = a1 | a3\n  2156: a1 = a1 << 0x20\n  2159: t1 = a1 | a2\n  2162: a1 = u8 [a0 + 0x11]\n  2165: a3 = u8 [a0 + 0x10]\n  2168: a4 = u8 [a0 + 0x12]\n  2171: a5 = u8 [a0 + 0x13]\n  2174: a1 = a1 << 0x8\n  2177: a1 = a1 | a3\n  2180: a4 = a4 << 0x10\n  2183: a5 = a5 << 0x18\n  2186: a4 = a4 | a5\n  2189: a1 = a1 | a4\n  2192: a3 = u8 [a0 + 0x15]\n  2195: a4 = u8 [a0 + 0x14]\n  2198: a5 = u8 [a0 + 0x16]\n  2201: a2 = u8 [a0 + 0x17]\n  2204: a3 = a3 << 0x8\n  2207: a3 = a3 | a4\n  2210: a5 = a5 << 0x10\n  2213: a2 = a2 << 0x18\n  2216: a2 = a2 | a5\n  2219: a2 = a2 | a3\n  2222: a2 = a2 << 0x20\n  2225: a3 = a2 | a1\n  2228: a1 = u8 [a0 + 0x19]\n  2231: a2 = u8 [a0 + 0x18]\n  2234: a4 = u8 [a0 + 0x1a]\n  2237: a5 = u8 [a0 + 0x1b]\n  2240: a1 = a1 << 0x8\n  2243: a1 = a1 | a2\n  2246: a4 = a4 << 0x10\n  2249: a5 = a5 << 0x18\n  2252: a4 = a4 | a5\n  2255: a1 = a1 | a4\n  2258: a2 = u8 [a0 + 0x1d]\n  2261: a4 = u8 [a0 + 0x1c]\n  2264: a5 = u8 [a0 + 0x1e]\n  2267: a0 = u8 [a0 + 0x1f]\n  2270: a2 = a2 << 0x8\n  2273: a2 = a2 | a4\n  2276: a5 = a5 << 0x10\n  2279: a0 = a0 << 0x18\n  2282: a0 = a0 | a5\n  2285: a0 = a0 | a2\n  2288: a0 = a0 << 0x20\n  2291: a0 = a0 | a1\n  2294: a0 = reverse a0\n  2296: a1 = reverse a3\n  2298: a2 = reverse t1\n  2300: a3 = reverse t0\n  2302: u64 [s0 + 0x18] = a3\n  2305: u64 [s0 + 0x10] = a2\n  2308: u64 [s0 + 0x8] = a1\n  2311: u64 [s0] = a0\n  2313: ra = u64 [sp + 0x8]\n  2316: s0 = u64 [sp]\n  2318: sp = sp + 0x10\n  2321: ret\n      : @52 (gas: 18)\n  2323: sp = sp + 0xffffffffffffff60\n  2327: u64 [sp + 0x98] = ra\n  2331: u64 [sp + 0x90] = s0\n  2335: u64 [sp + 0x88] = s1\n  2339: s0 = sp + 0xa0\n  2343: sp = sp & 0xfffffffffffffff0\n  2346: a2 = u64 [a1 + 0x18]\n  2349: u64 [sp + 0x30] = a2\n  2352: a2 = u64 [a1 + 0x10]\n  2355: u64 [sp + 0x28] = a2\n  2358: a2 = u64 [a1 + 0x8]\n  2361: u64 [sp + 0x20] = a2\n  2364: a1 = u64 [a1]\n  2366: u64 [sp + 0x18] = a1\n  2369: u64 [sp + 0x38] = a0\n  2372: a0 = 0x40\n  2375: a1 = 0x20\n  2378: ra = 44, jump @0\n      : @53 [@dyn 22] (gas: 130)\n  2383: a1 = u8 [a0 + 0x19]\n  2386: a2 = u8 [a0 + 0x18]\n  2389: a3 = u8 [a0 + 0x1a]\n  2392: a4 = u8 [a0 + 0x1b]\n  2395: a1 = a1 << 0x8\n  2398: a1 = a1 | a2\n  2401: a3 = a3 << 0x10\n  2404: a4 = a4 << 0x18\n  2407: a3 = a3 | a4\n  2410: a1 = a1 | a3\n  2413: a2 = u8 [a0 + 0x1d]\n  2416: a3 = u8 [a0 + 0x1c]\n  2419: a4 = u8 [a0 + 0x1e]\n  2422: a5 = u8 [a0 + 0x1f]\n  2425: a2 = a2 << 0x8\n  2428: a2 = a2 | a3\n  2431: a4 = a4 << 0x10\n  2434: a5 = a5 << 0x18\n  2437: a4 = a4 | a5\n  2440: a2 = a2 | a4\n  2443: a2 = a2 << 0x20\n  2446: t0 = a2 | a1\n  2449: a2 = u8 [a0 + 0x11]\n  2452: a3 = u8 [a0 + 0x10]\n  2455: a4 = u8 [a0 + 0x12]\n  2458: a5 = u8 [a0 + 0x13]\n  2461: a2 = a2 << 0x8\n  2464: a2 = a2 | a3\n  2467: a4 = a4 << 0x10\n  2470: a5 = a5 << 0x18\n  2473: a4 = a4 | a5\n  2476: a2 = a2 | a4\n  2479: a3 = u8 [a0 + 0x15]\n  2482: a4 = u8 [a0 + 0x14]\n  2485: a5 = u8 [a0 + 0x16]\n  2488: s1 = u8 [a0 + 0x17]\n  2491: a3 = a3 << 0x8\n  2494: a3 = a3 | a4\n  2497: a5 = a5 << 0x10\n  2500: s1 = s1 << 0x18\n  2503: a5 = a5 | s1\n  2506: a3 = a3 | a5\n  2509: a3 = a3 << 0x20\n  2512: a2 = a2 | a3\n  2515: a3 = u8 [a0 + 0x9]\n  2518: a4 = u8 [a0 + 0x8]\n  2521: a5 = u8 [a0 + 0xa]\n  2524: s1 = u8 [a0 + 0xb]\n  2527: a3 = a3 << 0x8\n  2530: a3 = a3 | a4\n  2533: a5 = a5 << 0x10\n  2536: s1 = s1 << 0x18\n  2539: a5 = a5 | s1\n  2542: a3 = a3 | a5\n  2545: a4 = u8 [a0 + 0xd]\n  2548: a5 = u8 [a0 + 0xc]\n  2551: s1 = u8 [a0 + 0xe]\n  2554: a1 = u8 [a0 + 0xf]\n  2557: a4 = a4 << 0x8\n  2560: a4 = a4 | a5\n  2563: s1 = s1 << 0x10\n  2566: a1 = a1 << 0x18\n  2569: a1 = a1 | s1\n  2572: a1 = a1 | a4\n  2575: a1 = a1 << 0x20\n  2578: a3 = a3 | a1\n  2581: a1 = u8 [a0 + 0x1]\n  2584: a4 = u8 [a0]\n  2586: a5 = u8 [a0 + 0x2]\n  2589: s1 = u8 [a0 + 0x3]\n  2592: a1 = a1 << 0x8\n  2595: a1 = a1 | a4\n  2598: a5 = a5 << 0x10\n  2601: s1 = s1 << 0x18\n  2604: a5 = a5 | s1\n  2607: a1 = a1 | a5\n  2610: a4 = u8 [a0 + 0x5]\n  2613: a5 = u8 [a0 + 0x4]\n  2616: s1 = u8 [a0 + 0x6]\n  2619: a0 = u8 [a0 + 0x7]\n  2622: a4 = a4 << 0x8\n  2625: a4 = a4 | a5\n  2628: s1 = s1 << 0x10\n  2631: a0 = a0 << 0x18\n  2634: a0 = a0 | s1\n  2637: a0 = a0 | a4\n  2640: a0 = a0 << 0x20\n  2643: a0 = a0 | a1\n  2646: t1 = reverse a0\n  2648: t2 = reverse a3\n  2650: s1 = reverse a2\n  2652: a5 = reverse t0\n  2654: a1 = u64 [sp + 0x18]\n  2657: a0 = a1 + 0x1f\n  2660: a1 = a0 <u a1\n  2663: a3 = u64 [sp + 0x20]\n  2666: a2 = a3 + a1\n  2669: a3 = a2 <u a3\n  2672: a3 = a1 if a1 == 0\n  2675: a1 = u64 [sp + 0x28]\n  2678: a3 = a3 + a1\n  2681: a1 = a3 <u a1\n  2684: a4 = u64 [sp + 0x30]\n  2687: a1 = a1 + a4\n  2690: a0 = a0 & 0xffffffffffffffe0\n  2693: a0 = a0 + a5\n  2696: u64 [sp + 0x28] = a5\n  2699: u64 [sp + 0x10] = a0\n  2702: a4 = a0 <u a5\n  2705: a2 = a2 + s1\n  2708: a5 = a2 + a4\n  2711: a2 = a5 ^ s1\n  2714: u64 [sp + 0x30] = s1\n  2717: a0 = a5 <u s1\n  2720: a0 = a4 if a2 == 0\n  2723: a3 = a3 + t2\n  2726: a4 = a3 + a0\n  2729: s1 = a4 <u a3\n  2732: a2 = a3 <u t2\n  2735: a1 = a1 + t1\n  2738: a1 = a1 + a2\n  2741: s1 = s1 + a1\n  2744: a1 = a4 >u 0\n  2746: a2 = s1 >u 0\n  2748: a2 = a1 if s1 == 0\n  2751: a1 = a4 | s1\n  2754: u64 [sp + 0x8] = a5\n  2757: a3 = a5 >u 0\n  2759: a3 = a2 if a1 != 0\n  2762: jump @57 if a3 != 0\n      : @54 (gas: 8)\n  2766: a1 = a4 <u t2\n  2769: a2 = s1 ^ t1\n  2772: a3 = s1 <u t1\n  2775: a3 = a1 if a2 == 0\n  2778: a1 = a4 ^ t2\n  2781: a1 = a1 | a2\n  2784: a0 = a3 if a1 != 0\n  2787: jump @57 if a0 != 0\n      : @55 (gas: 6)\n  2791: a0 = 0x40\n  2794: a1 = 0x20\n  2797: u64 [sp + 0x20] = t2\n  2800: u64 [sp + 0x18] = t1\n  2803: u64 [sp] = a4\n  2805: ra = 46, jump @0\n      : @56 [@dyn 23] (gas: 82)\n  2810: a1 = reverse s1\n  2812: a2 = u64 [sp]\n  2814: a2 = reverse a2\n  2816: a3 = u64 [sp + 0x8]\n  2819: a3 = reverse a3\n  2821: a4 = u64 [sp + 0x10]\n  2824: a4 = reverse a4\n  2826: u8 [a0 + 0x18] = a4\n  2829: a5 = a4 >> 0x38\n  2832: u8 [a0 + 0x1f] = a5\n  2835: a5 = a4 >> 0x30\n  2838: u8 [a0 + 0x1e] = a5\n  2841: a5 = a4 >> 0x28\n  2844: u8 [a0 + 0x1d] = a5\n  2847: a5 = a4 >> 0x20\n  2850: u8 [a0 + 0x1c] = a5\n  2853: a5 = a4 >> 0x18\n  2856: u8 [a0 + 0x1b] = a5\n  2859: a5 = a4 >> 0x10\n  2862: u8 [a0 + 0x1a] = a5\n  2865: a4 = a4 >> 0x8\n  2868: u8 [a0 + 0x19] = a4\n  2871: u8 [a0 + 0x10] = a3\n  2874: a4 = a3 >> 0x38\n  2877: u8 [a0 + 0x17] = a4\n  2880: a4 = a3 >> 0x30\n  2883: u8 [a0 + 0x16] = a4\n  2886: a4 = a3 >> 0x28\n  2889: u8 [a0 + 0x15] = a4\n  2892: a4 = a3 >> 0x20\n  2895: u8 [a0 + 0x14] = a4\n  2898: a4 = a3 >> 0x18\n  2901: u8 [a0 + 0x13] = a4\n  2904: a4 = a3 >> 0x10\n  2907: u8 [a0 + 0x12] = a4\n  2910: a3 = a3 >> 0x8\n  2913: u8 [a0 + 0x11] = a3\n  2916: u8 [a0 + 0x8] = a2\n  2919: a3 = a2 >> 0x38\n  2922: u8 [a0 + 0xf] = a3\n  2925: a3 = a2 >> 0x30\n  2928: u8 [a0 + 0xe] = a3\n  2931: a3 = a2 >> 0x28\n  2934: u8 [a0 + 0xd] = a3\n  2937: a3 = a2 >> 0x20\n  2940: u8 [a0 + 0xc] = a3\n  2943: a3 = a2 >> 0x18\n  2946: u8 [a0 + 0xb] = a3\n  2949: a3 = a2 >> 0x10\n  2952: u8 [a0 + 0xa] = a3\n  2955: a2 = a2 >> 0x8\n  2958: u8 [a0 + 0x9] = a2\n  2961: u8 [a0] = a1\n  2963: a2 = a1 >> 0x38\n  2966: u8 [a0 + 0x7] = a2\n  2969: a2 = a1 >> 0x30\n  2972: u8 [a0 + 0x6] = a2\n  2975: a2 = a1 >> 0x28\n  2978: u8 [a0 + 0x5] = a2\n  2981: a2 = a1 >> 0x20\n  2984: u8 [a0 + 0x4] = a2\n  2987: a2 = a1 >> 0x18\n  2990: u8 [a0 + 0x3] = a2\n  2993: a2 = a1 >> 0x10\n  2996: u8 [a0 + 0x2] = a2\n  2999: a1 = a1 >> 0x8\n  3002: u8 [a0 + 0x1] = a1\n  3005: a0 = u64 [sp + 0x38]\n  3008: a1 = u64 [sp + 0x28]\n  3011: u64 [a0] = a1\n  3013: a1 = u64 [sp + 0x18]\n  3016: u64 [a0 + 0x18] = a1\n  3019: a1 = u64 [sp + 0x30]\n  3022: u64 [a0 + 0x8] = a1\n  3025: a1 = u64 [sp + 0x20]\n  3028: u64 [a0 + 0x10] = a1\n  3031: sp = s0 + 0xffffffffffffff60\n  3035: ra = u64 [sp + 0x98]\n  3039: s0 = u64 [sp + 0x90]\n  3043: s1 = u64 [sp + 0x88]\n  3047: sp = sp + 0xa0\n  3051: ret\n      : @57 (gas: 8)\n  3053: u64 [sp + 112] = 0\n  3056: u64 [sp + 104] = 0\n  3059: u64 [sp + 96] = 0\n  3062: a0 = 0x4e487b7100000000\n  3072: a1 = sp + 0x60\n  3075: u64 [sp + 0x78] = a0\n  3078: a0 = 0\n  3080: ra = 48, jump @8\n      : @58 [@dyn 24] (gas: 7)\n  3085: u64 [sp + 88] = 0\n  3088: u64 [sp + 80] = 0\n  3091: u64 [sp + 64] = 0x41\n  3095: a0 = 0x4\n  3098: a1 = sp + 0x40\n  3101: u64 [sp + 72] = 0\n  3104: ra = 50, jump @8\n      : @59 [@dyn 25] (gas: 3)\n  3109: a1 = 0x24\n  3112: a0 = 0\n  3114: ra = 52, jump @0\n      : @60 [@dyn 26] (gas: 6)\n  3119: i32 a1 = a0 + 0\n  3121: a0 = 0x1\n  3124: a2 = 0x24\n  3127: ra = 0x36\n  3130: ecalli 12 // 'seal_return'\n  3132: fallthrough\n      : @61 [@dyn 27] (gas: 8)\n  3133: a2 = u32 [a1 + 0x10]\n  3136: a3 = u64 [a1 + 0x8]\n  3139: a1 = u64 [a1]\n  3141: u64 [a0 + 24] = 0\n  3144: u64 [a0 + 0x10] = a2\n  3147: u64 [a0 + 0x8] = a3\n  3150: u64 [a0] = a1\n  3152: ret\n      : @62 [@dyn 28] (gas: 12)\n  3154: a1 = u64 [sp + 0x48]\n  3157: a2 = u64 [sp + 0x40]\n  3160: a3 = u64 [sp + 0x38]\n  3163: a0 = u64 [sp + 0x30]\n  3166: a1 = a1 | a3\n  3169: a3 = a0 | a2\n  3172: a3 = a3 | a1\n  3175: a3 = a3 >> 0x20\n  3178: a1 = a1 | a2\n  3181: a1 = a1 << 0x20\n  3184: a1 = a1 | a3\n  3187: jump @69 if a1 != 0\n      : @63 (gas: 4)\n  3191: i32 a0 = a0 + 0\n  3193: u64 [sp] = a0\n  3195: a1 = s1\n  3197: ra = 58, jump @0\n      : @64 [@dyn 29] (gas: 5)\n  3202: i32 a0 = a0 + 0\n  3204: a1 = s1\n  3206: a2 = 0\n  3208: ecalli 2 // 'call_data_copy'\n  3210: fallthrough\n      : @65 (gas: 1)\n  3211: jump @70 if s1 <=u 31\n      : @66 (gas: 3)\n  3216: a1 = 0x20\n  3219: a0 = u64 [sp]\n  3221: ra = 60, jump @0\n      : @67 [@dyn 30] (gas: 54)\n  3226: a1 = u8 [a0 + 0x9]\n  3229: a2 = u8 [a0 + 0x8]\n  3232: a3 = u8 [a0 + 0xa]\n  3235: a4 = u8 [a0 + 0xb]\n  3238: a1 = a1 << 0x8\n  3241: a1 = a1 | a2\n  3244: a3 = a3 << 0x10\n  3247: a4 = a4 << 0x18\n  3250: a3 = a3 | a4\n  3253: a1 = a1 | a3\n  3256: a2 = u8 [a0 + 0xd]\n  3259: a3 = u8 [a0 + 0xc]\n  3262: a4 = u8 [a0 + 0xe]\n  3265: a5 = u8 [a0 + 0xf]\n  3268: a2 = a2 << 0x8\n  3271: a2 = a2 | a3\n  3274: a4 = a4 << 0x10\n  3277: a5 = a5 << 0x18\n  3280: a4 = a4 | a5\n  3283: a2 = a2 | a4\n  3286: a2 = a2 << 0x20\n  3289: a2 = a2 | a1\n  3292: a1 = u8 [a0 + 0x1]\n  3295: a3 = u8 [a0]\n  3297: a4 = u8 [a0 + 0x2]\n  3300: a5 = u8 [a0 + 0x3]\n  3303: a1 = a1 << 0x8\n  3306: a1 = a1 | a3\n  3309: a4 = a4 << 0x10\n  3312: a5 = a5 << 0x18\n  3315: a4 = a4 | a5\n  3318: a1 = a1 | a4\n  3321: a3 = u8 [a0 + 0x5]\n  3324: a4 = u8 [a0 + 0x4]\n  3327: a5 = u8 [a0 + 0x6]\n  3330: s1 = u8 [a0 + 0x7]\n  3333: a3 = a3 << 0x8\n  3336: a3 = a3 | a4\n  3339: a5 = a5 << 0x10\n  3342: s1 = s1 << 0x18\n  3345: a5 = a5 | s1\n  3348: a3 = a3 | a5\n  3351: a3 = a3 << 0x20\n  3354: a1 = a1 | a3\n  3357: t0 = reverse a1\n  3359: a2 = reverse a2\n  3361: a3 = 0x100000000\n  3371: a3 = a3 ^ a2\n  3374: a3 = a3 | t0\n  3377: a4 = a2 >> 0x20\n  3380: a4 = a4 <u 0x1\n  3383: a4 = 0 if t0 != 0\n  3385: a4 = 0 if a3 == 0\n  3387: jump @70 if a4 == 0\n      : @68 (gas: 57)\n  3391: a3 = u8 [a0 + 0x19]\n  3394: a4 = u8 [a0 + 0x18]\n  3397: a5 = u8 [a0 + 0x1a]\n  3400: s1 = u8 [a0 + 0x1b]\n  3403: a3 = a3 << 0x8\n  3406: a3 = a3 | a4\n  3409: a5 = a5 << 0x10\n  3412: s1 = s1 << 0x18\n  3415: a5 = a5 | s1\n  3418: a3 = a3 | a5\n  3421: a4 = u8 [a0 + 0x1d]\n  3424: a5 = u8 [a0 + 0x1c]\n  3427: s1 = u8 [a0 + 0x1e]\n  3430: a1 = u8 [a0 + 0x1f]\n  3433: a4 = a4 << 0x8\n  3436: a4 = a4 | a5\n  3439: s1 = s1 << 0x10\n  3442: a1 = a1 << 0x18\n  3445: a1 = a1 | s1\n  3448: a1 = a1 | a4\n  3451: a1 = a1 << 0x20\n  3454: a3 = a3 | a1\n  3457: a1 = u8 [a0 + 0x11]\n  3460: a4 = u8 [a0 + 0x10]\n  3463: a5 = u8 [a0 + 0x12]\n  3466: s1 = u8 [a0 + 0x13]\n  3469: a1 = a1 << 0x8\n  3472: a1 = a1 | a4\n  3475: a5 = a5 << 0x10\n  3478: s1 = s1 << 0x18\n  3481: a5 = a5 | s1\n  3484: a1 = a1 | a5\n  3487: a4 = u8 [a0 + 0x15]\n  3490: a5 = u8 [a0 + 0x14]\n  3493: s1 = u8 [a0 + 0x16]\n  3496: a0 = u8 [a0 + 0x17]\n  3499: a4 = a4 << 0x8\n  3502: a4 = a4 | a5\n  3505: s1 = s1 << 0x10\n  3508: a0 = a0 << 0x18\n  3511: a0 = a0 | s1\n  3514: a0 = a0 | a4\n  3517: a0 = a0 << 0x20\n  3520: a0 = a0 | a1\n  3523: a0 = reverse a0\n  3525: a1 = reverse a3\n  3527: a3 = u64 [sp + 0x8]\n  3530: u64 [a3] = a1\n  3532: u64 [a3 + 0x8] = a0\n  3535: u64 [a3 + 0x10] = a2\n  3538: u64 [a3 + 0x18] = t0\n  3541: sp = s0 + 0xffffffffffffff90\n  3544: ra = u64 [sp + 0x68]\n  3547: s0 = u64 [sp + 0x60]\n  3550: s1 = u64 [sp + 0x58]\n  3553: sp = sp + 0x70\n  3556: ret\n      : @69 (gas: 1)\n  3558: trap\n      : @70 (gas: 3)\n  3559: a0 = 0\n  3561: a1 = 0\n  3563: ra = 62, jump @0\n      : @71 [@dyn 31] (gas: 6)\n  3568: i32 a1 = a0 + 0\n  3570: a0 = 0x1\n  3573: a2 = 0\n  3575: ra = 0x40\n  3578: ecalli 12 // 'seal_return'\n  3580: fallthrough\n      : @72 [@dyn 32] (gas: 9)\n  3581: a2 = u64 [a1 + 0x18]\n  3584: a3 = u64 [a1 + 0x10]\n  3587: a4 = u64 [a1 + 0x8]\n  3590: a1 = u64 [a1]\n  3592: u64 [a0 + 0x18] = a2\n  3595: u64 [a0 + 0x10] = a3\n  3598: u64 [a0 + 0x8] = a4\n  3601: u64 [a0] = a1\n  3603: ret\n      : @73 [@dyn 33] (gas: 6)\n  3605: i32 a1 = a0 + 0\n  3607: a0 = 0x1\n  3610: a2 = 0\n  3612: ra = 0x44\n  3615: ecalli 12 // 'seal_return'\n  3617: fallthrough\n      : @74 [@dyn 34] (gas: 7)\n  3618: a1 = u64 [a1]\n  3620: a1 = a1 << 0x20\n  3623: u64 [a0 + 0x18] = a1\n  3626: u64 [a0 + 16] = 0\n  3629: u64 [a0 + 8] = 0\n  3632: u64 [a0 + 0] = 0\n  3634: ret\n      : @75 (gas: 1)\n  3636: jump @89 if a0 == 0\n      : @76 (gas: 3)\n  3640: a0 = 0x40\n  3643: a1 = 0x20\n  3646: ra = 70, jump @0\n      : @77 [@dyn 35] (gas: 106)\n  3651: a1 = u8 [a0 + 0x11]\n  3654: a2 = u8 [a0 + 0x10]\n  3657: a3 = u8 [a0 + 0x12]\n  3660: a4 = u8 [a0 + 0x13]\n  3663: a1 = a1 << 0x8\n  3666: a1 = a1 | a2\n  3669: a3 = a3 << 0x10\n  3672: a4 = a4 << 0x18\n  3675: a3 = a3 | a4\n  3678: a1 = a1 | a3\n  3681: a2 = u8 [a0 + 0x15]\n  3684: a3 = u8 [a0 + 0x14]\n  3687: a4 = u8 [a0 + 0x16]\n  3690: a5 = u8 [a0 + 0x17]\n  3693: a2 = a2 << 0x8\n  3696: a2 = a2 | a3\n  3699: a4 = a4 << 0x10\n  3702: a5 = a5 << 0x18\n  3705: a4 = a4 | a5\n  3708: a2 = a2 | a4\n  3711: a2 = a2 << 0x20\n  3714: t1 = a2 | a1\n  3717: a1 = u8 [a0 + 0x1]\n  3720: a2 = u8 [a0]\n  3722: a3 = u8 [a0 + 0x2]\n  3725: a4 = u8 [a0 + 0x3]\n  3728: a1 = a1 << 0x8\n  3731: a1 = a1 | a2\n  3734: a3 = a3 << 0x10\n  3737: a4 = a4 << 0x18\n  3740: a3 = a3 | a4\n  3743: a1 = a1 | a3\n  3746: a2 = u8 [a0 + 0x5]\n  3749: a3 = u8 [a0 + 0x4]\n  3752: a4 = u8 [a0 + 0x6]\n  3755: a5 = u8 [a0 + 0x7]\n  3758: a2 = a2 << 0x8\n  3761: a2 = a2 | a3\n  3764: a4 = a4 << 0x10\n  3767: a5 = a5 << 0x18\n  3770: a4 = a4 | a5\n  3773: a2 = a2 | a4\n  3776: a2 = a2 << 0x20\n  3779: t0 = a2 | a1\n  3782: a1 = u8 [a0 + 0x19]\n  3785: a2 = u8 [a0 + 0x18]\n  3788: a3 = u8 [a0 + 0x1a]\n  3791: a4 = u8 [a0 + 0x1b]\n  3794: a1 = a1 << 0x8\n  3797: a1 = a1 | a2\n  3800: a3 = a3 << 0x10\n  3803: a4 = a4 << 0x18\n  3806: a3 = a3 | a4\n  3809: a1 = a1 | a3\n  3812: a2 = u8 [a0 + 0x1d]\n  3815: a3 = u8 [a0 + 0x1c]\n  3818: a4 = u8 [a0 + 0x1e]\n  3821: a5 = u8 [a0 + 0x1f]\n  3824: a2 = a2 << 0x8\n  3827: a2 = a2 | a3\n  3830: a4 = a4 << 0x10\n  3833: a5 = a5 << 0x18\n  3836: a4 = a4 | a5\n  3839: a2 = a2 | a4\n  3842: a2 = a2 << 0x20\n  3845: a5 = a2 | a1\n  3848: a1 = u8 [a0 + 0x9]\n  3851: a2 = u8 [a0 + 0x8]\n  3854: a3 = u8 [a0 + 0xa]\n  3857: a4 = u8 [a0 + 0xb]\n  3860: a1 = a1 << 0x8\n  3863: a1 = a1 | a2\n  3866: a3 = a3 << 0x10\n  3869: a4 = a4 << 0x18\n  3872: a3 = a3 | a4\n  3875: a1 = a1 | a3\n  3878: a2 = u8 [a0 + 0xd]\n  3881: a3 = u8 [a0 + 0xc]\n  3884: a4 = u8 [a0 + 0xe]\n  3887: a0 = u8 [a0 + 0xf]\n  3890: a2 = a2 << 0x8\n  3893: a2 = a2 | a3\n  3896: a4 = a4 << 0x10\n  3899: a0 = a0 << 0x18\n  3902: a0 = a0 | a4\n  3905: a0 = a0 | a2\n  3908: a0 = a0 << 0x20\n  3911: a0 = a0 | a1\n  3914: u64 [sp + 0x10] = a0\n  3917: s1 = reverse a0\n  3919: u64 [sp + 0x18] = a5\n  3922: a2 = reverse a5\n  3924: u64 [sp + 0x28] = t0\n  3927: a1 = reverse t0\n  3929: u64 [sp + 0x20] = t1\n  3932: a0 = reverse t1\n  3934: u64 [sp + 0x70] = a0\n  3937: u64 [sp + 0x68] = a1\n  3940: a0 = a0 | a1\n  3943: a1 = a2 | s1\n  3946: a1 = a1 | a0\n  3949: a1 = a1 >> 0x20\n  3952: a0 = a0 | s1\n  3955: a0 = a0 << 0x20\n  3958: a0 = a0 | a1\n  3961: jump @88 if a0 != 0\n      : @78 (gas: 5)\n  3965: i32 a0 = a2 + 0\n  3967: a1 = 0x20\n  3970: u64 [sp + 0x78] = a0\n  3973: u64 [sp + 0x30] = a2\n  3976: ra = 72, jump @0\n      : @79 [@dyn 36] (gas: 41)\n  3981: u8 [a0 + 31] = 0\n  3984: u8 [a0 + 30] = 0\n  3987: u8 [a0 + 29] = 0\n  3990: u8 [a0 + 28] = 0\n  3993: u8 [a0 + 27] = 0\n  3996: u8 [a0 + 26] = 0\n  3999: u8 [a0 + 25] = 0\n  4002: u8 [a0 + 24] = 0\n  4005: u8 [a0 + 23] = 0\n  4008: u8 [a0 + 22] = 0\n  4011: u8 [a0 + 21] = 0\n  4014: u8 [a0 + 20] = 0\n  4017: u8 [a0 + 19] = 0\n  4020: u8 [a0 + 18] = 0\n  4023: u8 [a0 + 17] = 0\n  4026: u8 [a0 + 16] = 0\n  4029: u8 [a0 + 15] = 0\n  4032: u8 [a0 + 14] = 0\n  4035: u8 [a0 + 13] = 0\n  4038: u8 [a0 + 12] = 0\n  4041: u8 [a0 + 11] = 0\n  4044: u8 [a0 + 10] = 0\n  4047: u8 [a0 + 9] = 0\n  4050: u8 [a0 + 8] = 0\n  4053: u8 [a0 + 7] = 0\n  4056: u8 [a0 + 6] = 0\n  4059: u8 [a0 + 5] = 0\n  4062: u8 [a0 + 4] = 0\n  4065: u8 [a0 + 3] = 0xc7\n  4070: u8 [a0 + 2] = 0xf2\n  4075: u8 [a0 + 1] = 0xe6\n  4080: a1 = u64 [sp + 0x68]\n  4083: a1 = a1 | s1\n  4086: a2 = 0xfffffffc\n  4096: a3 = u64 [sp + 0x30]\n  4099: a2 = a3 <u a2\n  4102: a4 = u64 [sp + 0x70]\n  4105: a2 = 0 if a4 != 0\n  4107: a2 = 0 if a1 != 0\n  4109: u8 [a0 + 0] = 0x5b\n  4112: jump @88 if a2 == 0\n      : @80 (gas: 19)\n  4116: a0 = u64 [sp + 0x38]\n  4119: a0 = reverse a0\n  4121: a1 = a0 >> 0x20\n  4124: a2 = u64 [sp + 0x40]\n  4127: a2 = reverse a2\n  4129: a3 = a2 << 0x20\n  4132: a1 = a1 | a3\n  4135: u64 [sp + 0x70] = a1\n  4138: a0 = a0 << 0x20\n  4141: a1 = u64 [sp + 0x48]\n  4144: a1 = reverse a1\n  4146: a1 = a1 >> 0x20\n  4149: a0 = a0 | a1\n  4152: u64 [sp + 0x68] = a0\n  4155: s1 = a2 >> 0x20\n  4158: a0 = u64 [sp + 0x78]\n  4161: i32 a0 = a0 + 0x4\n  4164: a1 = 0x20\n  4167: ra = 74, jump @0\n      : @81 [@dyn 37] (gas: 70)\n  4172: a1 = reverse s1\n  4174: a2 = u64 [sp + 0x70]\n  4177: a2 = reverse a2\n  4179: a3 = u64 [sp + 0x68]\n  4182: a3 = reverse a3\n  4184: a4 = a3 >> 0x38\n  4187: u8 [a0 + 0x1f] = a4\n  4190: a4 = a3 >> 0x30\n  4193: u8 [a0 + 0x1e] = a4\n  4196: a4 = a3 >> 0x28\n  4199: u8 [a0 + 0x1d] = a4\n  4202: a4 = a3 >> 0x20\n  4205: u8 [a0 + 0x1c] = a4\n  4208: a4 = a3 >> 0x18\n  4211: u8 [a0 + 0x1b] = a4\n  4214: a4 = a3 >> 0x10\n  4217: u8 [a0 + 0x1a] = a4\n  4220: a4 = a3 >> 0x8\n  4223: u8 [a0 + 0x19] = a4\n  4226: u8 [a0 + 0x18] = a3\n  4229: u8 [a0 + 0x10] = a2\n  4232: u8 [a0 + 11] = 0\n  4235: u8 [a0 + 10] = 0\n  4238: u8 [a0 + 9] = 0\n  4241: u8 [a0 + 7] = 0\n  4244: u8 [a0 + 6] = 0\n  4247: u8 [a0 + 5] = 0\n  4250: u8 [a0 + 4] = 0\n  4253: u8 [a0 + 3] = 0\n  4256: u8 [a0 + 2] = 0\n  4259: u8 [a0 + 1] = 0\n  4262: u8 [a0 + 0] = 0\n  4264: a3 = a2 >> 0x38\n  4267: u8 [a0 + 0x17] = a3\n  4270: a3 = a2 >> 0x30\n  4273: u8 [a0 + 0x16] = a3\n  4276: a3 = a2 >> 0x28\n  4279: u8 [a0 + 0x15] = a3\n  4282: a3 = a2 >> 0x20\n  4285: u8 [a0 + 0x14] = a3\n  4288: a3 = a2 >> 0x18\n  4291: u8 [a0 + 0x13] = a3\n  4294: a3 = a2 >> 0x10\n  4297: u8 [a0 + 0x12] = a3\n  4300: a2 = a2 >> 0x8\n  4303: u8 [a0 + 0x11] = a2\n  4306: u8 [a0 + 0x8] = a1\n  4309: a2 = a1 >> 0x38\n  4312: u8 [a0 + 0xf] = a2\n  4315: a2 = a1 >> 0x30\n  4318: u8 [a0 + 0xe] = a2\n  4321: a2 = a1 >> 0x28\n  4324: u8 [a0 + 0xd] = a2\n  4327: a1 = a1 >> 0x20\n  4330: u8 [a0 + 0xc] = a1\n  4333: ecalli 9 // 'ref_time_left'\n  4335: a0 = u64 [sp + 0x50]\n  4338: u64 [sp + 0xe8] = a0\n  4342: a0 = u64 [sp + 0x60]\n  4345: u64 [sp + 0xe0] = a0\n  4349: a0 = u64 [sp + 0x58]\n  4352: u32 [sp + 0xf0] = a0\n  4356: u64 [sp + 280] = 0\n  4360: u64 [sp + 272] = 0\n  4364: u64 [sp + 264] = 0\n  4368: u64 [sp + 256] = 0\n  4372: a1 = 0x24\n  4375: s1 = u64 [sp + 0x78]\n  4378: a0 = s1\n  4380: ra = 76, jump @0\n      : @82 [@dyn 38] (gas: 4)\n  4385: u64 [sp + 0x70] = a0\n  4388: a0 = s1\n  4390: a1 = 0\n  4392: ra = 78, jump @0\n      : @83 [@dyn 39] (gas: 31)\n  4397: u32 [sp + 288] = 0\n  4401: u64 [sp + 344] = 0xffffffffffffffff\n  4406: u64 [sp + 336] = 0xffffffffffffffff\n  4411: u64 [sp + 328] = 0xffffffffffffffff\n  4416: u64 [sp + 320] = 0xffffffffffffffff\n  4421: a1 = sp + 0xe0\n  4425: a1 = a1 << 0x20\n  4428: a1 = a1 >> 0x20\n  4431: s1 = 0x800000000\n  4441: s1 = s1 | a1\n  4444: a1 = sp + 0x100\n  4448: a1 = a1 << 0x20\n  4451: a1 = a1 >> 0x20\n  4454: a2 = sp + 0x140\n  4458: a2 = a2 << 0x20\n  4461: a3 = a2 | a1\n  4464: a1 = u64 [sp + 0x70]\n  4467: a1 = a1 << 0x20\n  4470: a1 = a1 >> 0x20\n  4473: a2 = 0x2400000000\n  4483: a4 = a1 | a2\n  4486: a0 = a0 << 0x20\n  4489: a0 = a0 >> 0x20\n  4492: a1 = sp + 0x120\n  4496: a1 = a1 << 0x20\n  4499: a5 = a1 | a0\n  4502: a1 = 0xffffffffffffffff\n  4505: a2 = 0xffffffffffffffff\n  4508: a0 = s1\n  4510: ecalli 1 // 'call'\n  4512: fallthrough\n      : @84 (gas: 1)\n  4513: jump @87 if a0 != 0\n      : @85 (gas: 4)\n  4517: ecalli 11 // 'return_data_size'\n  4519: a0 = 0x40\n  4522: a1 = 0x20\n  4525: ra = 80, jump @0\n      : @86 [@dyn 40] (gas: 65)\n  4530: a3 = u64 [sp + 0x18]\n  4533: u8 [a0 + 0x18] = a3\n  4536: a2 = u64 [sp + 0x20]\n  4539: a1 = a2 >> 0x38\n  4542: u8 [a0 + 0x17] = a1\n  4545: a1 = a2 >> 0x30\n  4548: u8 [a0 + 0x16] = a1\n  4551: a1 = a2 >> 0x28\n  4554: u8 [a0 + 0x15] = a1\n  4557: a1 = a2 >> 0x20\n  4560: u8 [a0 + 0x14] = a1\n  4563: a1 = a2 >> 0x18\n  4566: u8 [a0 + 0x13] = a1\n  4569: a1 = a2 >> 0x10\n  4572: u8 [a0 + 0x12] = a1\n  4575: a1 = a2 >> 0x8\n  4578: u8 [a0 + 0x11] = a1\n  4581: u8 [a0 + 0x10] = a2\n  4584: a2 = u64 [sp + 0x10]\n  4587: a1 = a2 >> 0x38\n  4590: u8 [a0 + 0xf] = a1\n  4593: a1 = a2 >> 0x30\n  4596: u8 [a0 + 0xe] = a1\n  4599: a1 = a2 >> 0x28\n  4602: u8 [a0 + 0xd] = a1\n  4605: a1 = a2 >> 0x20\n  4608: u8 [a0 + 0xc] = a1\n  4611: a1 = a2 >> 0x18\n  4614: u8 [a0 + 0xb] = a1\n  4617: a1 = a2 >> 0x10\n  4620: u8 [a0 + 0xa] = a1\n  4623: a1 = a2 >> 0x8\n  4626: u8 [a0 + 0x9] = a1\n  4629: u8 [a0 + 0x8] = a2\n  4632: a2 = u64 [sp + 0x28]\n  4635: a1 = a2 >> 0x38\n  4638: u8 [a0 + 0x7] = a1\n  4641: a1 = a2 >> 0x30\n  4644: u8 [a0 + 0x6] = a1\n  4647: a1 = a2 >> 0x28\n  4650: u8 [a0 + 0x5] = a1\n  4653: a1 = a2 >> 0x20\n  4656: u8 [a0 + 0x4] = a1\n  4659: a1 = a2 >> 0x18\n  4662: u8 [a0 + 0x3] = a1\n  4665: a1 = a2 >> 0x10\n  4668: u8 [a0 + 0x2] = a1\n  4671: a1 = a2 >> 0x8\n  4674: u8 [a0 + 0x1] = a1\n  4677: u8 [a0] = a2\n  4679: a1 = a3 >> 0x38\n  4682: u8 [a0 + 0x1f] = a1\n  4685: a1 = a3 >> 0x30\n  4688: u8 [a0 + 0x1e] = a1\n  4691: a1 = a3 >> 0x28\n  4694: u8 [a0 + 0x1d] = a1\n  4697: a1 = a3 >> 0x20\n  4700: u8 [a0 + 0x1c] = a1\n  4703: a1 = a3 >> 0x18\n  4706: u8 [a0 + 0x1b] = a1\n  4709: a1 = a3 >> 0x10\n  4712: u8 [a0 + 0x1a] = a1\n  4715: a1 = a3 >> 0x8\n  4718: u8 [a0 + 0x19] = a1\n  4721: fallthrough\n      : @87 (gas: 6)\n  4722: sp = s0 + 0xfffffffffffffe40\n  4726: ra = u64 [sp + 0x1b8]\n  4730: s0 = u64 [sp + 0x1b0]\n  4734: s1 = u64 [sp + 0x1a8]\n  4738: sp = sp + 0x1c0\n  4742: ret\n      : @88 (gas: 1)\n  4744: trap\n      : @89 (gas: 2)\n  4745: a1 = 0\n  4747: ra = 82, jump @0\n      : @90 [@dyn 41] (gas: 6)\n  4752: i32 a1 = a0 + 0\n  4754: a0 = 0x1\n  4757: a2 = 0\n  4759: ra = 0x54\n  4762: ecalli 12 // 'seal_return'\n  4764: fallthrough\n      : @91 [@dyn 42] (gas: 6)\n  4765: a1 = u32 [a1 + 0x1c]\n  4768: u64 [a0 + 24] = 0\n  4771: u64 [a0 + 16] = 0\n  4774: u64 [a0 + 8] = 0\n  4777: u64 [a0] = a1\n  4779: ret\n      : @92 (gas: 47)\n  4781: sp = sp + 0xffffffffffffff60\n  4785: u64 [sp + 0x98] = ra\n  4789: u64 [sp + 0x90] = s0\n  4793: u64 [sp + 0x88] = s1\n  4797: s0 = sp + 0xa0\n  4801: sp = sp & 0xffffffffffffffe0\n  4804: ra = u64 [a1 + 0x10]\n  4807: a5 = u64 [a1 + 0x8]\n  4810: a3 = u64 [a2 + 0x8]\n  4813: t1 = u64 [a1]\n  4815: a4 = u64 [a2]\n  4817: u64 [sp + 0x48] = a4\n  4820: t2 = u64 [a2 + 0x10]\n  4823: t0 = a3 ^ a5\n  4826: s1 = a3 <u a5\n  4829: a4 = a4 <u t1\n  4832: u64 [sp + 0x40] = a4\n  4835: s1 = a4 if t0 == 0\n  4838: t0 = u64 [a1 + 0x18]\n  4841: a1 = u64 [a2 + 0x18]\n  4844: u64 [sp + 0x38] = a1\n  4847: a2 = t2 - ra\n  4850: a1 = a2 - s1\n  4853: u64 [sp + 0x50] = a1\n  4856: a1 = a2 <u s1\n  4859: a4 = t2 <u ra\n  4862: u64 [sp + 0x58] = t0\n  4865: a2 = u64 [sp + 0x38]\n  4868: a2 = a2 - t0\n  4871: a2 = a2 - a4\n  4874: a2 = a2 - a1\n  4877: a1 = a3 - a5\n  4880: a3 = u64 [sp + 0x40]\n  4883: a1 = a1 - a3\n  4886: a3 = u64 [sp + 0x48]\n  4889: a3 = a3 - t1\n  4892: a4 = a1 >u 0\n  4894: a3 = a3 <u 0x40\n  4897: a3 = a3 ^ 0x1\n  4900: a3 = a4 if a1 != 0\n  4903: s1 = a2 >s 0\n  4905: a1 = u64 [sp + 0x50]\n  4908: a4 = a1 >u 0\n  4910: a4 = s1 if a2 != 0\n  4913: a1 = a1 | a2\n  4916: a3 = a4 if a1 != 0\n  4919: jump @101 if a3 == 0\n      : @93 (gas: 12)\n  4923: s1 = a0\n  4925: a0 = t1 | ra\n  4928: u64 [sp + 0x50] = a5\n  4931: a1 = u64 [sp + 0x58]\n  4934: a1 = a1 | a5\n  4937: a0 = a0 | a1\n  4940: a0 = a0 >> 0x20\n  4943: u64 [sp + 0x48] = ra\n  4946: a1 = a1 | ra\n  4949: a1 = a1 << 0x20\n  4952: a0 = a0 | a1\n  4955: jump @100 if a0 != 0\n      : @94 (gas: 6)\n  4959: u64 [sp + 0x40] = t1\n  4962: i32 a1 = t1 + 0\n  4964: i32 a0 = sp + 0x60\n  4967: u64 [sp + 0x18] = a1\n  4970: ecalli 3 // 'call_data_load'\n  4972: fallthrough\n      : @95 (gas: 9)\n  4973: a2 = u64 [sp + 0x78]\n  4976: a3 = u64 [sp + 0x70]\n  4979: a4 = u64 [sp + 0x60]\n  4982: a5 = u64 [sp + 0x68]\n  4985: a0 = a3 | a2\n  4988: a1 = a4 <u 0x100\n  4992: a1 = 0 if a5 != 0\n  4994: a1 = 0 if a0 != 0\n  4996: jump @102 if a1 == 0\n      : @96 (gas: 14)\n  5000: u64 [sp + 0x20] = a5\n  5003: u64 [sp + 0x28] = a4\n  5006: u64 [sp + 0x30] = a3\n  5009: u64 [sp + 0x38] = a2\n  5012: a0 = u64 [sp + 0x48]\n  5015: a1 = u64 [sp + 0x58]\n  5018: a0 = a0 | a1\n  5021: a1 = 0xffffffe0\n  5031: a2 = u64 [sp + 0x40]\n  5034: a1 = a2 <u a1\n  5037: a2 = u64 [sp + 0x50]\n  5040: a1 = 0 if a2 != 0\n  5042: a1 = 0 if a0 != 0\n  5044: jump @100 if a1 == 0\n      : @97 (gas: 5)\n  5047: a0 = u64 [sp + 0x18]\n  5050: i32 a1 = a0 + 0x20\n  5053: i32 a0 = sp + 0x60\n  5056: ecalli 3 // 'call_data_load'\n  5058: fallthrough\n      : @98 (gas: 9)\n  5059: a0 = u64 [sp + 0x78]\n  5062: a1 = u64 [sp + 0x70]\n  5065: a2 = u64 [sp + 0x60]\n  5068: a3 = u64 [sp + 0x68]\n  5071: a4 = a1 | a0\n  5074: a5 = a2 <u 0x100\n  5078: a5 = 0 if a3 != 0\n  5080: a5 = 0 if a4 != 0\n  5082: jump @101 if a5 == 0\n      : @99 (gas: 18)\n  5085: u64 [s1 + 0x28] = a3\n  5088: u64 [s1 + 0x20] = a2\n  5091: a2 = u64 [sp + 0x20]\n  5094: u64 [s1 + 0x8] = a2\n  5097: a2 = u64 [sp + 0x28]\n  5100: u64 [s1] = a2\n  5102: u64 [s1 + 0x30] = a1\n  5105: a1 = u64 [sp + 0x30]\n  5108: u64 [s1 + 0x10] = a1\n  5111: u64 [s1 + 0x38] = a0\n  5114: a0 = u64 [sp + 0x38]\n  5117: u64 [s1 + 0x18] = a0\n  5120: sp = s0 + 0xffffffffffffff60\n  5124: ra = u64 [sp + 0x98]\n  5128: s0 = u64 [sp + 0x90]\n  5132: s1 = u64 [sp + 0x88]\n  5136: sp = sp + 0xa0\n  5140: ret\n      : @100 (gas: 1)\n  5142: trap\n      : @101 (gas: 4)\n  5143: a0 = 0\n  5145: a1 = 0\n  5147: ra = 0x56\n  5150: jump @0\n      : @102 (gas: 2)\n  5153: a0 = 0\n  5155: ra = 86, jump @0\n      : @103 [@dyn 43] (gas: 6)\n  5160: i32 a1 = a0 + 0\n  5162: a0 = 0x1\n  5165: a2 = 0\n  5167: ra = 0x58\n  5170: ecalli 12 // 'seal_return'\n  5172: fallthrough\n      : @104 [@dyn 44] (gas: 9)\n  5173: a2 = u64 [a1 + 0x18]\n  5176: a3 = u64 [a1 + 0x10]\n  5179: a4 = u64 [a1 + 0x8]\n  5182: a1 = u64 [a1]\n  5184: u64 [a0 + 0x18] = a2\n  5187: u64 [a0 + 0x10] = a3\n  5190: u64 [a0 + 0x8] = a4\n  5193: u64 [a0] = a1\n  5195: ret\n      : @105 (gas: 8)\n  5197: a0 = u64 [sp + 0xd0]\n  5201: a1 = u64 [sp + 0xd8]\n  5205: a2 = u64 [sp + 0xc8]\n  5209: a3 = u64 [sp + 0xc0]\n  5213: a1 = a1 | a2\n  5216: a0 = a0 | a3\n  5219: a0 = a0 | a1\n  5222: jump @111 if a0 != 0\n      : @106 (gas: 13)\n  5226: a0 = u32 [0x20004]\n  5231: u64 [sp + 88] = 0\n  5234: u64 [sp + 80] = 0\n  5237: u64 [sp + 72] = 0\n  5240: u64 [sp + 0x40] = a0\n  5243: u64 [sp + 120] = 0\n  5246: u64 [sp + 112] = 0\n  5249: u64 [sp + 96] = 0x4\n  5253: a0 = sp + 0x80\n  5257: a1 = sp + 0x60\n  5260: a2 = sp + 0x40\n  5263: u64 [sp + 104] = 0\n  5266: ra = 90, jump @92\n      : @107 [@dyn 45] (gas: 19)\n  5271: t0 = u64 [sp + 0x80]\n  5275: t1 = u64 [sp + 0x88]\n  5279: a1 = u64 [sp + 0x90]\n  5283: a3 = u64 [sp + 0x98]\n  5287: a4 = u64 [sp + 0xa0]\n  5291: a5 = u64 [sp + 0xa8]\n  5295: a2 = u64 [sp + 0xb0]\n  5299: a0 = u64 [sp + 0xb8]\n  5303: u64 [sp + 0x18] = a0\n  5306: u64 [sp + 0x10] = a2\n  5309: u64 [sp + 0x8] = a5\n  5312: u64 [sp] = a4\n  5314: u64 [sp + 0x38] = a3\n  5317: u64 [sp + 0x30] = a1\n  5320: u64 [sp + 0x28] = t1\n  5323: a0 = sp + 0x20\n  5326: a1 = sp\n  5328: u64 [sp + 0x20] = t0\n  5331: ra = 92, jump @321\n      : @108 [@dyn 46] (gas: 3)\n  5336: a0 = 0x40\n  5339: a1 = 0x20\n  5342: ra = 94, jump @0\n      : @109 [@dyn 47] (gas: 100)\n  5347: a1 = u8 [a0 + 0x11]\n  5350: a2 = u8 [a0 + 0x10]\n  5353: a3 = u8 [a0 + 0x12]\n  5356: a4 = u8 [a0 + 0x13]\n  5359: a1 = a1 << 0x8\n  5362: a1 = a1 | a2\n  5365: a3 = a3 << 0x10\n  5368: a4 = a4 << 0x18\n  5371: a3 = a3 | a4\n  5374: a1 = a1 | a3\n  5377: a2 = u8 [a0 + 0x15]\n  5380: a3 = u8 [a0 + 0x14]\n  5383: a4 = u8 [a0 + 0x16]\n  5386: a5 = u8 [a0 + 0x17]\n  5389: a2 = a2 << 0x8\n  5392: a2 = a2 | a3\n  5395: a4 = a4 << 0x10\n  5398: a5 = a5 << 0x18\n  5401: a4 = a4 | a5\n  5404: a2 = a2 | a4\n  5407: a2 = a2 << 0x20\n  5410: t0 = a2 | a1\n  5413: a2 = u8 [a0 + 0x1]\n  5416: a3 = u8 [a0]\n  5418: a4 = u8 [a0 + 0x2]\n  5421: a5 = u8 [a0 + 0x3]\n  5424: a2 = a2 << 0x8\n  5427: a2 = a2 | a3\n  5430: a4 = a4 << 0x10\n  5433: a5 = a5 << 0x18\n  5436: a4 = a4 | a5\n  5439: a2 = a2 | a4\n  5442: a3 = u8 [a0 + 0x5]\n  5445: a4 = u8 [a0 + 0x4]\n  5448: a5 = u8 [a0 + 0x6]\n  5451: a1 = u8 [a0 + 0x7]\n  5454: a3 = a3 << 0x8\n  5457: a3 = a3 | a4\n  5460: a5 = a5 << 0x10\n  5463: a1 = a1 << 0x18\n  5466: a1 = a1 | a5\n  5469: a1 = a1 | a3\n  5472: a1 = a1 << 0x20\n  5475: t1 = a1 | a2\n  5478: a1 = u8 [a0 + 0x19]\n  5481: a3 = u8 [a0 + 0x18]\n  5484: a4 = u8 [a0 + 0x1a]\n  5487: a5 = u8 [a0 + 0x1b]\n  5490: a1 = a1 << 0x8\n  5493: a1 = a1 | a3\n  5496: a4 = a4 << 0x10\n  5499: a5 = a5 << 0x18\n  5502: a4 = a4 | a5\n  5505: a1 = a1 | a4\n  5508: a3 = u8 [a0 + 0x1d]\n  5511: a4 = u8 [a0 + 0x1c]\n  5514: a5 = u8 [a0 + 0x1e]\n  5517: a2 = u8 [a0 + 0x1f]\n  5520: a3 = a3 << 0x8\n  5523: a3 = a3 | a4\n  5526: a5 = a5 << 0x10\n  5529: a2 = a2 << 0x18\n  5532: a2 = a2 | a5\n  5535: a2 = a2 | a3\n  5538: a2 = a2 << 0x20\n  5541: a3 = a2 | a1\n  5544: a1 = u8 [a0 + 0x9]\n  5547: a2 = u8 [a0 + 0x8]\n  5550: a4 = u8 [a0 + 0xa]\n  5553: a5 = u8 [a0 + 0xb]\n  5556: a1 = a1 << 0x8\n  5559: a1 = a1 | a2\n  5562: a4 = a4 << 0x10\n  5565: a5 = a5 << 0x18\n  5568: a4 = a4 | a5\n  5571: a1 = a1 | a4\n  5574: a2 = u8 [a0 + 0xd]\n  5577: a4 = u8 [a0 + 0xc]\n  5580: a5 = u8 [a0 + 0xe]\n  5583: a0 = u8 [a0 + 0xf]\n  5586: a2 = a2 << 0x8\n  5589: a2 = a2 | a4\n  5592: a5 = a5 << 0x10\n  5595: a0 = a0 << 0x18\n  5598: a0 = a0 | a5\n  5601: a0 = a0 | a2\n  5604: a0 = a0 << 0x20\n  5607: a0 = a0 | a1\n  5610: a1 = reverse a0\n  5612: a0 = reverse a3\n  5614: a2 = reverse t1\n  5616: a3 = reverse t0\n  5618: a2 = a2 | a3\n  5621: a3 = a0 | a1\n  5624: a3 = a3 | a2\n  5627: a3 = a3 >> 0x20\n  5630: a1 = a1 | a2\n  5633: a1 = a1 << 0x20\n  5636: a1 = a1 | a3\n  5639: jump @113 if a1 == 0\n      : @110 (gas: 1)\n  5642: trap\n      : @111 (gas: 3)\n  5643: a0 = 0\n  5645: a1 = 0\n  5647: ra = 96, jump @0\n      : @112 [@dyn 48] (gas: 7)\n  5652: i32 a1 = a0 + 0\n  5654: a0 = 0x1\n  5657: a2 = 0\n  5659: ecalli 12 // 'seal_return'\n  5661: i32 a0 = a0 + 0\n  5663: ra = 0x62\n  5666: jump @0\n      : @113 (gas: 2)\n  5669: i32 a0 = a0 + 0\n  5671: ra = 98, jump @0\n      : @114 [@dyn 49] (gas: 6)\n  5676: i32 a1 = a0 + 0\n  5678: a0 = 0\n  5680: a2 = 0\n  5682: ra = 0x64\n  5685: ecalli 12 // 'seal_return'\n  5687: fallthrough\n      : @115 [@dyn 50] (gas: 19)\n  5688: t0 = u64 [a0 + 0x18]\n  5691: t1 = u64 [a1 + 0x18]\n  5694: a4 = u64 [a0 + 0x10]\n  5697: a5 = u64 [a0 + 0x8]\n  5700: a2 = u64 [a1 + 0x8]\n  5703: t2 = u64 [a0]\n  5705: a3 = u64 [a1]\n  5707: a1 = u64 [a1 + 0x10]\n  5710: a0 = a2 ^ a5\n  5713: a2 = a2 <u a5\n  5716: a3 = a3 <u t2\n  5719: a3 = a2 if a0 != 0\n  5722: a0 = a1 - a4\n  5725: a0 = a0 <u a3\n  5728: a1 = a1 <u a4\n  5731: a2 = t1 - t0\n  5734: a2 = a2 - a1\n  5737: a2 = a2 - a0\n  5740: jump @117 if a2 <s 0\n      : @116 (gas: 1)\n  5743: ret\n      : @117 (gas: 5)\n  5745: sp = sp + 0xfffffffffffffff8\n  5748: u64 [sp] = ra\n  5750: a0 = 0\n  5752: a1 = 0\n  5754: ra = 102, jump @0\n      : @118 [@dyn 51] (gas: 6)\n  5759: i32 a1 = a0 + 0\n  5761: a0 = 0x1\n  5764: a2 = 0\n  5766: ra = 0x68\n  5769: ecalli 12 // 'seal_return'\n  5771: fallthrough\n      : @119 [@dyn 52] (gas: 236)\n  5772: sp = sp + 0xffffffffffffffa0\n  5775: u64 [sp + 0x58] = ra\n  5778: u64 [sp + 0x50] = s0\n  5781: u64 [sp + 0x48] = s1\n  5784: u64 [sp] = a0\n  5786: t0 = u64 [a1]\n  5788: t1 = u64 [a2]\n  5790: a0 = u64 [a2 + 0x8]\n  5793: a3 = u64 [a2 + 0x10]\n  5796: a4 = u64 [a1 + 0x18]\n  5799: s0 = u64 [a1 + 0x10]\n  5802: a2 = u64 [a2 + 0x18]\n  5805: a1 = u64 [a1 + 0x8]\n  5808: t2 = a4 >u 0\n  5810: s1 = s0 >u 0\n  5812: s1 = t2 if a4 != 0\n  5815: ra = a1 >u 0\n  5817: a5 = t0 <u 0x100\n  5821: t2 = a5 ^ 0x1\n  5824: t2 = ra if a1 != 0\n  5827: a4 = a4 | s0\n  5830: t2 = s1 if a4 != 0\n  5833: u8 [sp + 71] = 0\n  5836: u8 [sp + 70] = 0\n  5839: u8 [sp + 69] = 0\n  5842: u8 [sp + 68] = 0\n  5845: u8 [sp + 67] = 0\n  5848: u8 [sp + 66] = 0\n  5851: u8 [sp + 65] = 0\n  5854: u8 [sp + 64] = 0\n  5857: u8 [sp + 63] = 0\n  5860: u8 [sp + 62] = 0\n  5863: u8 [sp + 61] = 0\n  5866: u8 [sp + 60] = 0\n  5869: u8 [sp + 59] = 0\n  5872: u8 [sp + 58] = 0\n  5875: u8 [sp + 57] = 0\n  5878: u8 [sp + 56] = 0\n  5881: u8 [sp + 55] = 0\n  5884: u8 [sp + 54] = 0\n  5887: u8 [sp + 53] = 0\n  5890: u8 [sp + 52] = 0\n  5893: u8 [sp + 51] = 0\n  5896: u8 [sp + 50] = 0\n  5899: u8 [sp + 49] = 0\n  5902: u8 [sp + 48] = 0\n  5905: u8 [sp + 47] = 0\n  5908: u8 [sp + 46] = 0\n  5911: u8 [sp + 45] = 0\n  5914: u8 [sp + 44] = 0\n  5917: u8 [sp + 43] = 0\n  5920: u8 [sp + 42] = 0\n  5923: u8 [sp + 41] = 0\n  5926: u8 [sp + 40] = 0\n  5929: u8 [sp + 0x20] = a2\n  5932: u8 [sp + 0x18] = a3\n  5935: u8 [sp + 0x10] = a0\n  5938: u8 [sp + 0x8] = t1\n  5941: a1 = a2 >> 0x38\n  5944: u8 [sp + 0x27] = a1\n  5947: a1 = a2 >> 0x30\n  5950: u8 [sp + 0x26] = a1\n  5953: a1 = a2 >> 0x28\n  5956: u8 [sp + 0x25] = a1\n  5959: a1 = a2 >> 0x20\n  5962: u8 [sp + 0x24] = a1\n  5965: a1 = a2 >> 0x18\n  5968: u8 [sp + 0x23] = a1\n  5971: a1 = a2 >> 0x10\n  5974: u8 [sp + 0x22] = a1\n  5977: a2 = a2 >> 0x8\n  5980: u8 [sp + 0x21] = a2\n  5983: a1 = a3 >> 0x38\n  5986: u8 [sp + 0x1f] = a1\n  5989: a1 = a3 >> 0x30\n  5992: u8 [sp + 0x1e] = a1\n  5995: a1 = a3 >> 0x28\n  5998: u8 [sp + 0x1d] = a1\n  6001: a1 = a3 >> 0x20\n  6004: u8 [sp + 0x1c] = a1\n  6007: a1 = a3 >> 0x18\n  6010: u8 [sp + 0x1b] = a1\n  6013: a1 = a3 >> 0x10\n  6016: u8 [sp + 0x1a] = a1\n  6019: a3 = a3 >> 0x8\n  6022: u8 [sp + 0x19] = a3\n  6025: a1 = a0 >> 0x38\n  6028: u8 [sp + 0x17] = a1\n  6031: a1 = a0 >> 0x30\n  6034: u8 [sp + 0x16] = a1\n  6037: a1 = a0 >> 0x28\n  6040: u8 [sp + 0x15] = a1\n  6043: a1 = a0 >> 0x20\n  6046: u8 [sp + 0x14] = a1\n  6049: a1 = a0 >> 0x18\n  6052: u8 [sp + 0x13] = a1\n  6055: a1 = a0 >> 0x10\n  6058: u8 [sp + 0x12] = a1\n  6061: a0 = a0 >> 0x8\n  6064: u8 [sp + 0x11] = a0\n  6067: a0 = t1 >> 0x38\n  6070: u8 [sp + 0xf] = a0\n  6073: a0 = t1 >> 0x30\n  6076: u8 [sp + 0xe] = a0\n  6079: a0 = t1 >> 0x28\n  6082: u8 [sp + 0xd] = a0\n  6085: a0 = t1 >> 0x20\n  6088: u8 [sp + 0xc] = a0\n  6091: a0 = t1 >> 0x18\n  6094: u8 [sp + 0xb] = a0\n  6097: a0 = t1 >> 0x10\n  6100: u8 [sp + 0xa] = a0\n  6103: a0 = t1 >> 0x8\n  6106: u8 [sp + 0x9] = a0\n  6109: a0 = t0 << 0x38\n  6112: a0 = a0 >> 0x3b\n  6115: a2 = sp + 0x8\n  6118: a2 = a2 + a0\n  6121: a0 = u8 [a2 + 0x11]\n  6124: a1 = u8 [a2 + 0x10]\n  6127: a3 = u8 [a2 + 0x12]\n  6130: a4 = u8 [a2 + 0x13]\n  6133: a0 = a0 << 0x8\n  6136: a0 = a0 | a1\n  6139: a3 = a3 << 0x10\n  6142: a4 = a4 << 0x18\n  6145: a3 = a3 | a4\n  6148: a0 = a0 | a3\n  6151: a1 = u8 [a2 + 0x15]\n  6154: a3 = u8 [a2 + 0x14]\n  6157: a4 = u8 [a2 + 0x16]\n  6160: a5 = u8 [a2 + 0x17]\n  6163: a1 = a1 << 0x8\n  6166: a1 = a1 | a3\n  6169: a4 = a4 << 0x10\n  6172: a5 = a5 << 0x18\n  6175: a4 = a4 | a5\n  6178: a1 = a1 | a4\n  6181: a1 = a1 << 0x20\n  6184: ra = a1 | a0\n  6187: a3 = t0 & 0x7\n  6190: a1 = ra >> a3\n  6193: a0 = u8 [a2 + 0x19]\n  6196: a4 = u8 [a2 + 0x18]\n  6199: s1 = u8 [a2 + 0x1a]\n  6202: s0 = u8 [a2 + 0x1b]\n  6205: a0 = a0 << 0x8\n  6208: a0 = a0 | a4\n  6211: s1 = s1 << 0x10\n  6214: s0 = s0 << 0x18\n  6217: s0 = s0 | s1\n  6220: a0 = a0 | s0\n  6223: a4 = u8 [a2 + 0x1d]\n  6226: s1 = u8 [a2 + 0x1c]\n  6229: s0 = u8 [a2 + 0x1e]\n  6232: a5 = u8 [a2 + 0x1f]\n  6235: a4 = a4 << 0x8\n  6238: a4 = a4 | s1\n  6241: s0 = s0 << 0x10\n  6244: a5 = a5 << 0x18\n  6247: a5 = a5 | s0\n  6250: a4 = a4 | a5\n  6253: a4 = a4 << 0x20\n  6256: t0 = a4 | a0\n  6259: a0 = t0 << 0x1\n  6262: t1 = a3 ^ 0x3f\n  6265: a4 = a0 << t1\n  6268: a4 = a4 | a1\n  6271: a0 = u8 [a2 + 0x9]\n  6274: a1 = u8 [a2 + 0x8]\n  6277: a5 = u8 [a2 + 0xa]\n  6280: s0 = u8 [a2 + 0xb]\n  6283: a0 = a0 << 0x8\n  6286: a0 = a0 | a1\n  6289: a5 = a5 << 0x10\n  6292: s0 = s0 << 0x18\n  6295: a5 = a5 | s0\n  6298: a0 = a0 | a5\n  6301: a1 = u8 [a2 + 0xd]\n  6304: a5 = u8 [a2 + 0xc]\n  6307: s0 = u8 [a2 + 0xe]\n  6310: s1 = u8 [a2 + 0xf]\n  6313: a1 = a1 << 0x8\n  6316: a1 = a1 | a5\n  6319: s0 = s0 << 0x10\n  6322: s1 = s1 << 0x18\n  6325: s0 = s0 | s1\n  6328: a1 = a1 | s0\n  6331: a1 = a1 << 0x20\n  6334: a1 = a1 | a0\n  6337: a0 = a1 >> a3\n  6340: ra = ra << 0x1\n  6343: a5 = a3 ^ 0xffffffffffffffff\n  6346: a5 = ra << a5\n  6349: ra = a0 | a5\n  6352: a0 = u8 [a2 + 0x1]\n  6355: s0 = u8 [a2]\n  6357: s1 = u8 [a2 + 0x2]\n  6360: a5 = u8 [a2 + 0x3]\n  6363: a0 = a0 << 0x8\n  6366: a0 = a0 | s0\n  6369: s1 = s1 << 0x10\n  6372: a5 = a5 << 0x18\n  6375: a5 = a5 | s1\n  6378: a0 = a0 | a5\n  6381: a5 = u8 [a2 + 0x5]\n  6384: s0 = u8 [a2 + 0x4]\n  6387: s1 = u8 [a2 + 0x6]\n  6390: a2 = u8 [a2 + 0x7]\n  6393: a5 = a5 << 0x8\n  6396: a5 = a5 | s0\n  6399: s1 = s1 << 0x10\n  6402: a2 = a2 << 0x18\n  6405: a2 = a2 | s1\n  6408: a2 = a2 | a5\n  6411: a2 = a2 << 0x20\n  6414: a0 = a0 | a2\n  6417: a0 = a0 >> a3\n  6420: a1 = a1 << 0x1\n  6423: a1 = a1 << t1\n  6426: a0 = a0 | a1\n  6429: a1 = t0 >> a3\n  6432: a0 = 0 if t2 != 0\n  6434: ra = 0 if t2 != 0\n  6436: a4 = 0 if t2 != 0\n  6438: a1 = 0 if t2 != 0\n  6440: a2 = u64 [sp]\n  6442: u64 [a2 + 0x18] = a1\n  6445: u64 [a2 + 0x10] = a4\n  6448: u64 [a2 + 0x8] = ra\n  6451: u64 [a2] = a0\n  6453: ra = u64 [sp + 0x58]\n  6456: s0 = u64 [sp + 0x50]\n  6459: s1 = u64 [sp + 0x48]\n  6462: sp = sp + 0x60\n  6465: ret\n      : @120 (gas: 8)\n  6467: a0 = u64 [sp + 0x30]\n  6470: a1 = u64 [sp + 0x38]\n  6473: a2 = u64 [sp + 0x28]\n  6476: a3 = u64 [sp + 0x20]\n  6479: a1 = a1 | a2\n  6482: a0 = a0 | a3\n  6485: a0 = a0 | a1\n  6488: jump @125 if a0 != 0\n      : @121 (gas: 2)\n  6492: a0 = i32 [0x20004]\n  6497: jump @125 if a0 <=u 3\n      : @122 (gas: 24)\n  6502: u64 [sp + 88] = 0\n  6505: u64 [sp + 80] = 0\n  6508: u64 [sp + 72] = 0\n  6511: u64 [sp + 64] = 0x1\n  6515: u64 [sp + 120] = 0\n  6518: u64 [sp + 112] = 0\n  6521: u64 [sp + 104] = 0\n  6524: u64 [sp + 96] = 0\n  6527: u32 [sp + 128] = 0x20\n  6532: i32 a1 = sp + 0x40\n  6535: i32 a3 = sp + 0x60\n  6538: i32 a4 = sp + 0x80\n  6542: a2 = 0xffffffffffffffff\n  6545: a0 = 0\n  6547: ecalli 7 // 'get_storage'\n  6549: a0 = u64 [sp + 0x70]\n  6552: u64 [sp + 0x8] = a0\n  6555: a0 = u64 [sp + 0x68]\n  6558: u64 [sp + 0x10] = a0\n  6561: a0 = u64 [sp + 0x60]\n  6564: u64 [sp + 0x18] = a0\n  6567: a0 = 0x40\n  6570: a1 = 0x20\n  6573: ra = 106, jump @0\n      : @123 [@dyn 53] (gas: 100)\n  6578: a1 = u8 [a0 + 0x11]\n  6581: a2 = u8 [a0 + 0x10]\n  6584: a3 = u8 [a0 + 0x12]\n  6587: a4 = u8 [a0 + 0x13]\n  6590: a1 = a1 << 0x8\n  6593: a1 = a1 | a2\n  6596: a3 = a3 << 0x10\n  6599: a4 = a4 << 0x18\n  6602: a3 = a3 | a4\n  6605: a1 = a1 | a3\n  6608: a2 = u8 [a0 + 0x15]\n  6611: a3 = u8 [a0 + 0x14]\n  6614: a4 = u8 [a0 + 0x16]\n  6617: a5 = u8 [a0 + 0x17]\n  6620: a2 = a2 << 0x8\n  6623: a2 = a2 | a3\n  6626: a4 = a4 << 0x10\n  6629: a5 = a5 << 0x18\n  6632: a4 = a4 | a5\n  6635: a2 = a2 | a4\n  6638: a2 = a2 << 0x20\n  6641: t0 = a2 | a1\n  6644: a2 = u8 [a0 + 0x1]\n  6647: a3 = u8 [a0]\n  6649: a4 = u8 [a0 + 0x2]\n  6652: a5 = u8 [a0 + 0x3]\n  6655: a2 = a2 << 0x8\n  6658: a2 = a2 | a3\n  6661: a4 = a4 << 0x10\n  6664: a5 = a5 << 0x18\n  6667: a4 = a4 | a5\n  6670: a2 = a2 | a4\n  6673: a3 = u8 [a0 + 0x5]\n  6676: a4 = u8 [a0 + 0x4]\n  6679: a5 = u8 [a0 + 0x6]\n  6682: s1 = u8 [a0 + 0x7]\n  6685: a3 = a3 << 0x8\n  6688: a3 = a3 | a4\n  6691: a5 = a5 << 0x10\n  6694: s1 = s1 << 0x18\n  6697: a5 = a5 | s1\n  6700: a3 = a3 | a5\n  6703: a3 = a3 << 0x20\n  6706: a2 = a2 | a3\n  6709: a3 = u8 [a0 + 0x19]\n  6712: a4 = u8 [a0 + 0x18]\n  6715: a5 = u8 [a0 + 0x1a]\n  6718: s1 = u8 [a0 + 0x1b]\n  6721: a3 = a3 << 0x8\n  6724: a3 = a3 | a4\n  6727: a5 = a5 << 0x10\n  6730: s1 = s1 << 0x18\n  6733: a5 = a5 | s1\n  6736: a3 = a3 | a5\n  6739: a4 = u8 [a0 + 0x1d]\n  6742: a5 = u8 [a0 + 0x1c]\n  6745: s1 = u8 [a0 + 0x1e]\n  6748: a1 = u8 [a0 + 0x1f]\n  6751: a4 = a4 << 0x8\n  6754: a4 = a4 | a5\n  6757: s1 = s1 << 0x10\n  6760: a1 = a1 << 0x18\n  6763: a1 = a1 | s1\n  6766: a1 = a1 | a4\n  6769: a1 = a1 << 0x20\n  6772: a3 = a3 | a1\n  6775: a1 = u8 [a0 + 0x9]\n  6778: a4 = u8 [a0 + 0x8]\n  6781: a5 = u8 [a0 + 0xa]\n  6784: s1 = u8 [a0 + 0xb]\n  6787: a1 = a1 << 0x8\n  6790: a1 = a1 | a4\n  6793: a5 = a5 << 0x10\n  6796: s1 = s1 << 0x18\n  6799: a5 = a5 | s1\n  6802: a1 = a1 | a5\n  6805: a4 = u8 [a0 + 0xd]\n  6808: a5 = u8 [a0 + 0xc]\n  6811: s1 = u8 [a0 + 0xe]\n  6814: a0 = u8 [a0 + 0xf]\n  6817: a4 = a4 << 0x8\n  6820: a4 = a4 | a5\n  6823: s1 = s1 << 0x10\n  6826: a0 = a0 << 0x18\n  6829: a0 = a0 | s1\n  6832: a0 = a0 | a4\n  6835: a0 = a0 << 0x20\n  6838: a0 = a0 | a1\n  6841: a1 = reverse a0\n  6843: a0 = reverse a3\n  6845: a2 = reverse a2\n  6847: a3 = reverse t0\n  6849: a2 = a2 | a3\n  6852: a3 = a0 | a1\n  6855: a3 = a3 | a2\n  6858: a3 = a3 >> 0x20\n  6861: a1 = a1 | a2\n  6864: a1 = a1 << 0x20\n  6867: a1 = a1 | a3\n  6870: jump @127 if a1 == 0\n      : @124 (gas: 1)\n  6873: trap\n      : @125 (gas: 3)\n  6874: a0 = 0\n  6876: a1 = 0\n  6878: ra = 108, jump @0\n      : @126 [@dyn 54] (gas: 5)\n  6883: i32 a1 = a0 + 0\n  6885: a0 = 0x1\n  6888: a2 = 0\n  6890: ecalli 12 // 'seal_return'\n  6892: fallthrough\n      : @127 (gas: 7)\n  6893: a1 = u64 [sp + 0x8]\n  6896: a1 = a1 << 0x20\n  6899: s1 = a1 >> 0x20\n  6902: i32 a0 = a0 + 0\n  6904: u64 [sp + 0x8] = a0\n  6907: a1 = 0x20\n  6910: ra = 110, jump @0\n      : @128 [@dyn 55] (gas: 58)\n  6915: a1 = reverse s1\n  6917: a2 = u64 [sp + 0x10]\n  6920: a2 = reverse a2\n  6922: a3 = u64 [sp + 0x18]\n  6925: a3 = reverse a3\n  6927: a4 = a3 >> 0x38\n  6930: u8 [a0 + 0x1f] = a4\n  6933: a4 = a3 >> 0x30\n  6936: u8 [a0 + 0x1e] = a4\n  6939: a4 = a3 >> 0x28\n  6942: u8 [a0 + 0x1d] = a4\n  6945: a4 = a3 >> 0x20\n  6948: u8 [a0 + 0x1c] = a4\n  6951: a4 = a3 >> 0x18\n  6954: u8 [a0 + 0x1b] = a4\n  6957: a4 = a3 >> 0x10\n  6960: u8 [a0 + 0x1a] = a4\n  6963: a4 = a3 >> 0x8\n  6966: u8 [a0 + 0x19] = a4\n  6969: u8 [a0 + 0x18] = a3\n  6972: u8 [a0 + 0x10] = a2\n  6975: u8 [a0 + 11] = 0\n  6978: u8 [a0 + 10] = 0\n  6981: u8 [a0 + 9] = 0\n  6984: u8 [a0 + 7] = 0\n  6987: u8 [a0 + 6] = 0\n  6990: u8 [a0 + 5] = 0\n  6993: u8 [a0 + 4] = 0\n  6996: u8 [a0 + 3] = 0\n  6999: u8 [a0 + 2] = 0\n  7002: u8 [a0 + 1] = 0\n  7005: u8 [a0 + 0] = 0\n  7007: a3 = a2 >> 0x38\n  7010: u8 [a0 + 0x17] = a3\n  7013: a3 = a2 >> 0x30\n  7016: u8 [a0 + 0x16] = a3\n  7019: a3 = a2 >> 0x28\n  7022: u8 [a0 + 0x15] = a3\n  7025: a3 = a2 >> 0x20\n  7028: u8 [a0 + 0x14] = a3\n  7031: a3 = a2 >> 0x18\n  7034: u8 [a0 + 0x13] = a3\n  7037: a3 = a2 >> 0x10\n  7040: u8 [a0 + 0x12] = a3\n  7043: a2 = a2 >> 0x8\n  7046: u8 [a0 + 0x11] = a2\n  7049: u8 [a0 + 0x8] = a1\n  7052: a2 = a1 >> 0x38\n  7055: u8 [a0 + 0xf] = a2\n  7058: a2 = a1 >> 0x30\n  7061: u8 [a0 + 0xe] = a2\n  7064: a2 = a1 >> 0x28\n  7067: u8 [a0 + 0xd] = a2\n  7070: a1 = a1 >> 0x20\n  7073: u8 [a0 + 0xc] = a1\n  7076: a1 = 0x20\n  7079: a0 = u64 [sp + 0x8]\n  7082: ra = 112, jump @0\n      : @129 [@dyn 56] (gas: 6)\n  7087: i32 a1 = a0 + 0\n  7089: a2 = 0x20\n  7092: a0 = 0\n  7094: ra = 0x72\n  7097: ecalli 12 // 'seal_return'\n  7099: fallthrough\n      : @130 [@dyn 57] (gas: 9)\n  7100: a2 = u64 [a1 + 0x18]\n  7103: a3 = u64 [a1 + 0x10]\n  7106: a4 = u64 [a1 + 0x8]\n  7109: a1 = u64 [a1]\n  7111: u64 [a0 + 0x18] = a2\n  7114: u64 [a0 + 0x10] = a3\n  7117: u64 [a0 + 0x8] = a4\n  7120: u64 [a0] = a1\n  7122: ret\n      : @131 (gas: 8)\n  7124: a0 = u64 [sp + 0x30]\n  7127: a1 = u64 [sp + 0x38]\n  7130: a2 = u64 [sp + 0x28]\n  7133: a3 = u64 [sp + 0x20]\n  7136: a1 = a1 | a2\n  7139: a0 = a0 | a3\n  7142: a0 = a0 | a1\n  7145: jump @137 if a0 != 0\n      : @132 (gas: 2)\n  7149: a0 = i32 [0x20004]\n  7154: jump @137 if a0 <=u 35\n      : @133 (gas: 42)\n  7159: i32 a0 = sp + 0x40\n  7162: a1 = 0x4\n  7165: ecalli 3 // 'call_data_load'\n  7167: a1 = u64 [sp + 0x40]\n  7170: a0 = u64 [sp + 0x48]\n  7173: a2 = u64 [sp + 0x50]\n  7176: a3 = u64 [sp + 0x58]\n  7179: u64 [sp + 0x18] = a3\n  7182: u64 [sp + 0x10] = a2\n  7185: u64 [sp + 0x8] = a0\n  7188: a0 = sp\n  7190: u64 [sp] = a1\n  7192: ra = 0x74\n  7195: sp = sp + 0xfffffffffffffde0\n  7199: u64 [sp + 0x218] = ra\n  7203: u64 [sp + 0x210] = s0\n  7207: u64 [sp + 0x208] = s1\n  7211: s0 = sp + 0x220\n  7215: sp = sp & 0xffffffffffffffe0\n  7218: a1 = u64 [a0]\n  7220: u64 [sp + 0x30] = a1\n  7223: a1 = u64 [a0 + 0x8]\n  7226: u64 [sp + 0x28] = a1\n  7229: a1 = u64 [a0 + 0x10]\n  7232: u64 [sp + 0x38] = a1\n  7235: s1 = u64 [a0 + 0x18]\n  7238: u64 [sp + 472] = 0\n  7242: u64 [sp + 464] = 0\n  7246: u64 [sp + 456] = 0\n  7250: u64 [sp + 448] = 0\n  7254: u64 [sp + 504] = 0\n  7258: u64 [sp + 496] = 0\n  7262: u64 [sp + 488] = 0\n  7266: u64 [sp + 480] = 0\n  7270: u32 [sp + 416] = 0x20\n  7275: i32 a1 = sp + 0x1c0\n  7279: i32 a3 = sp + 0x1e0\n  7283: i32 a4 = sp + 0x1a0\n  7287: a2 = 0xffffffffffffffff\n  7290: a0 = 0\n  7292: ecalli 7 // 'get_storage'\n  7294: jump @394\n      : @134 [@dyn 58] (gas: 3)\n  7297: a0 = 0x40\n  7300: a1 = 0x20\n  7303: ra = 118, jump @0\n      : @135 [@dyn 59] (gas: 100)\n  7308: a1 = u8 [a0 + 0x11]\n  7311: a2 = u8 [a0 + 0x10]\n  7314: a3 = u8 [a0 + 0x12]\n  7317: a4 = u8 [a0 + 0x13]\n  7320: a1 = a1 << 0x8\n  7323: a1 = a1 | a2\n  7326: a3 = a3 << 0x10\n  7329: a4 = a4 << 0x18\n  7332: a3 = a3 | a4\n  7335: a1 = a1 | a3\n  7338: a2 = u8 [a0 + 0x15]\n  7341: a3 = u8 [a0 + 0x14]\n  7344: a4 = u8 [a0 + 0x16]\n  7347: a5 = u8 [a0 + 0x17]\n  7350: a2 = a2 << 0x8\n  7353: a2 = a2 | a3\n  7356: a4 = a4 << 0x10\n  7359: a5 = a5 << 0x18\n  7362: a4 = a4 | a5\n  7365: a2 = a2 | a4\n  7368: a2 = a2 << 0x20\n  7371: t0 = a2 | a1\n  7374: a2 = u8 [a0 + 0x1]\n  7377: a3 = u8 [a0]\n  7379: a4 = u8 [a0 + 0x2]\n  7382: a5 = u8 [a0 + 0x3]\n  7385: a2 = a2 << 0x8\n  7388: a2 = a2 | a3\n  7391: a4 = a4 << 0x10\n  7394: a5 = a5 << 0x18\n  7397: a4 = a4 | a5\n  7400: a2 = a2 | a4\n  7403: a3 = u8 [a0 + 0x5]\n  7406: a4 = u8 [a0 + 0x4]\n  7409: a5 = u8 [a0 + 0x6]\n  7412: a1 = u8 [a0 + 0x7]\n  7415: a3 = a3 << 0x8\n  7418: a3 = a3 | a4\n  7421: a5 = a5 << 0x10\n  7424: a1 = a1 << 0x18\n  7427: a1 = a1 | a5\n  7430: a1 = a1 | a3\n  7433: a1 = a1 << 0x20\n  7436: t1 = a1 | a2\n  7439: a1 = u8 [a0 + 0x19]\n  7442: a3 = u8 [a0 + 0x18]\n  7445: a4 = u8 [a0 + 0x1a]\n  7448: a5 = u8 [a0 + 0x1b]\n  7451: a1 = a1 << 0x8\n  7454: a1 = a1 | a3\n  7457: a4 = a4 << 0x10\n  7460: a5 = a5 << 0x18\n  7463: a4 = a4 | a5\n  7466: a1 = a1 | a4\n  7469: a3 = u8 [a0 + 0x1d]\n  7472: a4 = u8 [a0 + 0x1c]\n  7475: a5 = u8 [a0 + 0x1e]\n  7478: a2 = u8 [a0 + 0x1f]\n  7481: a3 = a3 << 0x8\n  7484: a3 = a3 | a4\n  7487: a5 = a5 << 0x10\n  7490: a2 = a2 << 0x18\n  7493: a2 = a2 | a5\n  7496: a2 = a2 | a3\n  7499: a2 = a2 << 0x20\n  7502: a3 = a2 | a1\n  7505: a1 = u8 [a0 + 0x9]\n  7508: a2 = u8 [a0 + 0x8]\n  7511: a4 = u8 [a0 + 0xa]\n  7514: a5 = u8 [a0 + 0xb]\n  7517: a1 = a1 << 0x8\n  7520: a1 = a1 | a2\n  7523: a4 = a4 << 0x10\n  7526: a5 = a5 << 0x18\n  7529: a4 = a4 | a5\n  7532: a1 = a1 | a4\n  7535: a2 = u8 [a0 + 0xd]\n  7538: a4 = u8 [a0 + 0xc]\n  7541: a5 = u8 [a0 + 0xe]\n  7544: a0 = u8 [a0 + 0xf]\n  7547: a2 = a2 << 0x8\n  7550: a2 = a2 | a4\n  7553: a5 = a5 << 0x10\n  7556: a0 = a0 << 0x18\n  7559: a0 = a0 | a5\n  7562: a0 = a0 | a2\n  7565: a0 = a0 << 0x20\n  7568: a0 = a0 | a1\n  7571: a1 = reverse a0\n  7573: a0 = reverse a3\n  7575: a2 = reverse t1\n  7577: a3 = reverse t0\n  7579: a2 = a2 | a3\n  7582: a3 = a0 | a1\n  7585: a3 = a3 | a2\n  7588: a3 = a3 >> 0x20\n  7591: a1 = a1 | a2\n  7594: a1 = a1 << 0x20\n  7597: a1 = a1 | a3\n  7600: jump @139 if a1 == 0\n      : @136 (gas: 1)\n  7603: trap\n      : @137 (gas: 3)\n  7604: a0 = 0\n  7606: a1 = 0\n  7608: ra = 120, jump @0\n      : @138 [@dyn 60] (gas: 7)\n  7613: i32 a1 = a0 + 0\n  7615: a0 = 0x1\n  7618: a2 = 0\n  7620: ecalli 12 // 'seal_return'\n  7622: i32 a0 = a0 + 0\n  7624: ra = 0x7a\n  7627: jump @0\n      : @139 (gas: 2)\n  7630: i32 a0 = a0 + 0\n  7632: ra = 122, jump @0\n      : @140 [@dyn 61] (gas: 6)\n  7637: i32 a1 = a0 + 0\n  7639: a0 = 0\n  7641: a2 = 0\n  7643: ra = 0x7c\n  7646: ecalli 12 // 'seal_return'\n  7648: fallthrough\n      : @141 [@dyn 62] (gas: 194)\n  7649: sp = sp + 0xffffffffffffffa0\n  7652: u64 [sp + 0x58] = ra\n  7655: u64 [sp + 0x50] = s0\n  7658: u64 [sp + 0x48] = s1\n  7661: u64 [sp] = a0\n  7663: t1 = u64 [a1]\n  7665: ra = u64 [a1 + 0x8]\n  7668: a4 = u64 [a1 + 0x10]\n  7671: a1 = u64 [a1 + 0x18]\n  7674: t0 = u64 [a2]\n  7676: a3 = u64 [a2 + 0x8]\n  7679: t2 = u64 [a2 + 0x18]\n  7682: a2 = u64 [a2 + 0x10]\n  7685: s0 = t0 >> 0x3d\n  7688: s1 = a3 << 0x3\n  7691: s0 = s0 | s1\n  7694: a3 = a3 >> 0x3d\n  7697: s1 = a2 << 0x3\n  7700: a3 = a3 | s1\n  7703: a2 = a2 >> 0x3d\n  7706: t2 = t2 << 0x3\n  7709: s1 = t2 | a2\n  7712: t2 = t0 << 0x3\n  7715: a2 = s1 >u 0\n  7717: a5 = a3 >u 0\n  7719: a5 = a2 if s1 != 0\n  7722: a0 = s0 >u 0\n  7724: a2 = t2 <u 0x100\n  7728: t2 = a2 ^ 0x1\n  7731: t2 = a0 if s0 != 0\n  7734: a3 = a3 | s1\n  7737: t2 = a5 if a3 != 0\n  7740: u8 [sp + 71] = 0\n  7743: u8 [sp + 70] = 0\n  7746: u8 [sp + 69] = 0\n  7749: u8 [sp + 68] = 0\n  7752: u8 [sp + 67] = 0\n  7755: u8 [sp + 66] = 0\n  7758: u8 [sp + 65] = 0\n  7761: u8 [sp + 64] = 0\n  7764: u8 [sp + 63] = 0\n  7767: u8 [sp + 62] = 0\n  7770: u8 [sp + 61] = 0\n  7773: u8 [sp + 60] = 0\n  7776: u8 [sp + 59] = 0\n  7779: u8 [sp + 58] = 0\n  7782: u8 [sp + 57] = 0\n  7785: u8 [sp + 56] = 0\n  7788: u8 [sp + 55] = 0\n  7791: u8 [sp + 54] = 0\n  7794: u8 [sp + 53] = 0\n  7797: u8 [sp + 52] = 0\n  7800: u8 [sp + 51] = 0\n  7803: u8 [sp + 50] = 0\n  7806: u8 [sp + 49] = 0\n  7809: u8 [sp + 48] = 0\n  7812: u8 [sp + 47] = 0\n  7815: u8 [sp + 46] = 0\n  7818: u8 [sp + 45] = 0\n  7821: u8 [sp + 44] = 0\n  7824: u8 [sp + 43] = 0\n  7827: u8 [sp + 42] = 0\n  7830: u8 [sp + 41] = 0\n  7833: u8 [sp + 40] = 0\n  7836: u8 [sp + 0x20] = a1\n  7839: u8 [sp + 0x18] = a4\n  7842: u8 [sp + 0x10] = ra\n  7845: u8 [sp + 0x8] = t1\n  7848: a0 = a1 >> 0x38\n  7851: u8 [sp + 0x27] = a0\n  7854: a0 = a1 >> 0x30\n  7857: u8 [sp + 0x26] = a0\n  7860: a0 = a1 >> 0x28\n  7863: u8 [sp + 0x25] = a0\n  7866: a0 = a1 >> 0x20\n  7869: u8 [sp + 0x24] = a0\n  7872: a0 = a1 >> 0x18\n  7875: u8 [sp + 0x23] = a0\n  7878: a0 = a1 >> 0x10\n  7881: u8 [sp + 0x22] = a0\n  7884: a1 = a1 >> 0x8\n  7887: u8 [sp + 0x21] = a1\n  7890: a0 = a4 >> 0x38\n  7893: u8 [sp + 0x1f] = a0\n  7896: a0 = a4 >> 0x30\n  7899: u8 [sp + 0x1e] = a0\n  7902: a0 = a4 >> 0x28\n  7905: u8 [sp + 0x1d] = a0\n  7908: a0 = a4 >> 0x20\n  7911: u8 [sp + 0x1c] = a0\n  7914: a0 = a4 >> 0x18\n  7917: u8 [sp + 0x1b] = a0\n  7920: a0 = a4 >> 0x10\n  7923: u8 [sp + 0x1a] = a0\n  7926: a4 = a4 >> 0x8\n  7929: u8 [sp + 0x19] = a4\n  7932: a0 = ra >> 0x38\n  7935: u8 [sp + 0x17] = a0\n  7938: a0 = ra >> 0x30\n  7941: u8 [sp + 0x16] = a0\n  7944: a0 = ra >> 0x28\n  7947: u8 [sp + 0x15] = a0\n  7950: a0 = ra >> 0x20\n  7953: u8 [sp + 0x14] = a0\n  7956: a0 = ra >> 0x18\n  7959: u8 [sp + 0x13] = a0\n  7962: a0 = ra >> 0x10\n  7965: u8 [sp + 0x12] = a0\n  7968: a0 = ra >> 0x8\n  7971: u8 [sp + 0x11] = a0\n  7974: a0 = t1 >> 0x38\n  7977: u8 [sp + 0xf] = a0\n  7980: a0 = t1 >> 0x30\n  7983: u8 [sp + 0xe] = a0\n  7986: a0 = t1 >> 0x28\n  7989: u8 [sp + 0xd] = a0\n  7992: a0 = t1 >> 0x20\n  7995: u8 [sp + 0xc] = a0\n  7998: a0 = t1 >> 0x18\n  8001: u8 [sp + 0xb] = a0\n  8004: a0 = t1 >> 0x10\n  8007: u8 [sp + 0xa] = a0\n  8010: a0 = t1 >> 0x8\n  8013: u8 [sp + 0x9] = a0\n  8016: a1 = t0 & 0x1f\n  8019: a0 = sp + 0x8\n  8022: a1 = a1 + a0\n  8025: a0 = u8 [a1 + 0x9]\n  8028: a2 = u8 [a1 + 0x8]\n  8031: a3 = u8 [a1 + 0xa]\n  8034: a4 = u8 [a1 + 0xb]\n  8037: a0 = a0 << 0x8\n  8040: a0 = a0 | a2\n  8043: a3 = a3 << 0x10\n  8046: a4 = a4 << 0x18\n  8049: a3 = a3 | a4\n  8052: a0 = a0 | a3\n  8055: a2 = u8 [a1 + 0xd]\n  8058: a3 = u8 [a1 + 0xc]\n  8061: a4 = u8 [a1 + 0xe]\n  8064: a5 = u8 [a1 + 0xf]\n  8067: a2 = a2 << 0x8\n  8070: a2 = a2 | a3\n  8073: a4 = a4 << 0x10\n  8076: a5 = a5 << 0x18\n  8079: a4 = a4 | a5\n  8082: a2 = a2 | a4\n  8085: a2 = a2 << 0x20\n  8088: a3 = a2 | a0\n  8091: a0 = u8 [a1 + 0x1]\n  8094: a2 = u8 [a1]\n  8096: a4 = u8 [a1 + 0x2]\n  8099: a5 = u8 [a1 + 0x3]\n  8102: a0 = a0 << 0x8\n  8105: a0 = a0 | a2\n  8108: a4 = a4 << 0x10\n  8111: a5 = a5 << 0x18\n  8114: a4 = a4 | a5\n  8117: a0 = a0 | a4\n  8120: a2 = u8 [a1 + 0x5]\n  8123: a4 = u8 [a1 + 0x4]\n  8126: a5 = u8 [a1 + 0x6]\n  8129: s1 = u8 [a1 + 0x7]\n  8132: a2 = a2 << 0x8\n  8135: a2 = a2 | a4\n  8138: a5 = a5 << 0x10\n  8141: s1 = s1 << 0x18\n  8144: a5 = a5 | s1\n  8147: a2 = a2 | a5\n  8150: a2 = a2 << 0x20\n  8153: a0 = a0 | a2\n  8156: a2 = u8 [a1 + 0x11]\n  8159: a4 = u8 [a1 + 0x10]\n  8162: a5 = u8 [a1 + 0x12]\n  8165: a1 = u8 [a1 + 0x13]\n  8168: a2 = a2 << 0x8\n  8171: a2 = a2 | a4\n  8174: a5 = a5 << 0x10\n  8177: a1 = a1 << 0x18\n  8180: a1 = a1 | a5\n  8183: a1 = a1 | a2\n  8186: a0 = 0 if t2 != 0\n  8188: a3 = 0 if t2 != 0\n  8190: a1 = 0 if t2 != 0\n  8192: a2 = u64 [sp]\n  8194: u64 [a2 + 24] = 0\n  8197: u64 [a2 + 0x10] = a1\n  8200: u64 [a2 + 0x8] = a3\n  8203: u64 [a2] = a0\n  8205: ra = u64 [sp + 0x58]\n  8208: s0 = u64 [sp + 0x50]\n  8211: s1 = u64 [sp + 0x48]\n  8214: sp = sp + 0x60\n  8217: ret\n      : @142 (gas: 8)\n  8219: a0 = u64 [sp + 0x30]\n  8222: a1 = u64 [sp + 0x38]\n  8225: a2 = u64 [sp + 0x28]\n  8228: a3 = u64 [sp + 0x20]\n  8231: a1 = a1 | a2\n  8234: a0 = a0 | a3\n  8237: a0 = a0 | a1\n  8240: jump @147 if a0 != 0\n      : @143 (gas: 2)\n  8244: a0 = i32 [0x20004]\n  8249: jump @147 if a0 <=u 3\n      : @144 (gas: 24)\n  8254: u64 [sp + 88] = 0\n  8257: u64 [sp + 80] = 0\n  8260: u64 [sp + 72] = 0\n  8263: u64 [sp + 64] = 0x2\n  8267: u64 [sp + 120] = 0\n  8270: u64 [sp + 112] = 0\n  8273: u64 [sp + 104] = 0\n  8276: u64 [sp + 96] = 0\n  8279: u32 [sp + 128] = 0x20\n  8284: i32 a1 = sp + 0x40\n  8287: i32 a3 = sp + 0x60\n  8290: i32 a4 = sp + 0x80\n  8294: a2 = 0xffffffffffffffff\n  8297: a0 = 0\n  8299: ecalli 7 // 'get_storage'\n  8301: a0 = u64 [sp + 0x70]\n  8304: u64 [sp + 0x8] = a0\n  8307: a0 = u64 [sp + 0x68]\n  8310: u64 [sp + 0x10] = a0\n  8313: a0 = u64 [sp + 0x60]\n  8316: u64 [sp + 0x18] = a0\n  8319: a0 = 0x40\n  8322: a1 = 0x20\n  8325: ra = 126, jump @0\n      : @145 [@dyn 63] (gas: 100)\n  8330: a1 = u8 [a0 + 0x11]\n  8333: a2 = u8 [a0 + 0x10]\n  8336: a3 = u8 [a0 + 0x12]\n  8339: a4 = u8 [a0 + 0x13]\n  8342: a1 = a1 << 0x8\n  8345: a1 = a1 | a2\n  8348: a3 = a3 << 0x10\n  8351: a4 = a4 << 0x18\n  8354: a3 = a3 | a4\n  8357: a1 = a1 | a3\n  8360: a2 = u8 [a0 + 0x15]\n  8363: a3 = u8 [a0 + 0x14]\n  8366: a4 = u8 [a0 + 0x16]\n  8369: a5 = u8 [a0 + 0x17]\n  8372: a2 = a2 << 0x8\n  8375: a2 = a2 | a3\n  8378: a4 = a4 << 0x10\n  8381: a5 = a5 << 0x18\n  8384: a4 = a4 | a5\n  8387: a2 = a2 | a4\n  8390: a2 = a2 << 0x20\n  8393: t0 = a2 | a1\n  8396: a2 = u8 [a0 + 0x1]\n  8399: a3 = u8 [a0]\n  8401: a4 = u8 [a0 + 0x2]\n  8404: a5 = u8 [a0 + 0x3]\n  8407: a2 = a2 << 0x8\n  8410: a2 = a2 | a3\n  8413: a4 = a4 << 0x10\n  8416: a5 = a5 << 0x18\n  8419: a4 = a4 | a5\n  8422: a2 = a2 | a4\n  8425: a3 = u8 [a0 + 0x5]\n  8428: a4 = u8 [a0 + 0x4]\n  8431: a5 = u8 [a0 + 0x6]\n  8434: s1 = u8 [a0 + 0x7]\n  8437: a3 = a3 << 0x8\n  8440: a3 = a3 | a4\n  8443: a5 = a5 << 0x10\n  8446: s1 = s1 << 0x18\n  8449: a5 = a5 | s1\n  8452: a3 = a3 | a5\n  8455: a3 = a3 << 0x20\n  8458: a2 = a2 | a3\n  8461: a3 = u8 [a0 + 0x19]\n  8464: a4 = u8 [a0 + 0x18]\n  8467: a5 = u8 [a0 + 0x1a]\n  8470: s1 = u8 [a0 + 0x1b]\n  8473: a3 = a3 << 0x8\n  8476: a3 = a3 | a4\n  8479: a5 = a5 << 0x10\n  8482: s1 = s1 << 0x18\n  8485: a5 = a5 | s1\n  8488: a3 = a3 | a5\n  8491: a4 = u8 [a0 + 0x1d]\n  8494: a5 = u8 [a0 + 0x1c]\n  8497: s1 = u8 [a0 + 0x1e]\n  8500: a1 = u8 [a0 + 0x1f]\n  8503: a4 = a4 << 0x8\n  8506: a4 = a4 | a5\n  8509: s1 = s1 << 0x10\n  8512: a1 = a1 << 0x18\n  8515: a1 = a1 | s1\n  8518: a1 = a1 | a4\n  8521: a1 = a1 << 0x20\n  8524: a3 = a3 | a1\n  8527: a1 = u8 [a0 + 0x9]\n  8530: a4 = u8 [a0 + 0x8]\n  8533: a5 = u8 [a0 + 0xa]\n  8536: s1 = u8 [a0 + 0xb]\n  8539: a1 = a1 << 0x8\n  8542: a1 = a1 | a4\n  8545: a5 = a5 << 0x10\n  8548: s1 = s1 << 0x18\n  8551: a5 = a5 | s1\n  8554: a1 = a1 | a5\n  8557: a4 = u8 [a0 + 0xd]\n  8560: a5 = u8 [a0 + 0xc]\n  8563: s1 = u8 [a0 + 0xe]\n  8566: a0 = u8 [a0 + 0xf]\n  8569: a4 = a4 << 0x8\n  8572: a4 = a4 | a5\n  8575: s1 = s1 << 0x10\n  8578: a0 = a0 << 0x18\n  8581: a0 = a0 | s1\n  8584: a0 = a0 | a4\n  8587: a0 = a0 << 0x20\n  8590: a0 = a0 | a1\n  8593: a1 = reverse a0\n  8595: a0 = reverse a3\n  8597: a2 = reverse a2\n  8599: a3 = reverse t0\n  8601: a2 = a2 | a3\n  8604: a3 = a0 | a1\n  8607: a3 = a3 | a2\n  8610: a3 = a3 >> 0x20\n  8613: a1 = a1 | a2\n  8616: a1 = a1 << 0x20\n  8619: a1 = a1 | a3\n  8622: jump @149 if a1 == 0\n      : @146 (gas: 1)\n  8625: trap\n      : @147 (gas: 3)\n  8626: a0 = 0\n  8628: a1 = 0\n  8630: ra = 128, jump @0\n      : @148 [@dyn 64] (gas: 5)\n  8636: i32 a1 = a0 + 0\n  8638: a0 = 0x1\n  8641: a2 = 0\n  8643: ecalli 12 // 'seal_return'\n  8645: fallthrough\n      : @149 (gas: 7)\n  8646: a1 = u64 [sp + 0x8]\n  8649: a1 = a1 << 0x20\n  8652: s1 = a1 >> 0x20\n  8655: i32 a0 = a0 + 0\n  8657: u64 [sp + 0x8] = a0\n  8660: a1 = 0x20\n  8663: ra = 130, jump @0\n      : @150 [@dyn 65] (gas: 58)\n  8669: a1 = reverse s1\n  8671: a2 = u64 [sp + 0x10]\n  8674: a2 = reverse a2\n  8676: a3 = u64 [sp + 0x18]\n  8679: a3 = reverse a3\n  8681: a4 = a3 >> 0x38\n  8684: u8 [a0 + 0x1f] = a4\n  8687: a4 = a3 >> 0x30\n  8690: u8 [a0 + 0x1e] = a4\n  8693: a4 = a3 >> 0x28\n  8696: u8 [a0 + 0x1d] = a4\n  8699: a4 = a3 >> 0x20\n  8702: u8 [a0 + 0x1c] = a4\n  8705: a4 = a3 >> 0x18\n  8708: u8 [a0 + 0x1b] = a4\n  8711: a4 = a3 >> 0x10\n  8714: u8 [a0 + 0x1a] = a4\n  8717: a4 = a3 >> 0x8\n  8720: u8 [a0 + 0x19] = a4\n  8723: u8 [a0 + 0x18] = a3\n  8726: u8 [a0 + 0x10] = a2\n  8729: u8 [a0 + 11] = 0\n  8732: u8 [a0 + 10] = 0\n  8735: u8 [a0 + 9] = 0\n  8738: u8 [a0 + 7] = 0\n  8741: u8 [a0 + 6] = 0\n  8744: u8 [a0 + 5] = 0\n  8747: u8 [a0 + 4] = 0\n  8750: u8 [a0 + 3] = 0\n  8753: u8 [a0 + 2] = 0\n  8756: u8 [a0 + 1] = 0\n  8759: u8 [a0 + 0] = 0\n  8761: a3 = a2 >> 0x38\n  8764: u8 [a0 + 0x17] = a3\n  8767: a3 = a2 >> 0x30\n  8770: u8 [a0 + 0x16] = a3\n  8773: a3 = a2 >> 0x28\n  8776: u8 [a0 + 0x15] = a3\n  8779: a3 = a2 >> 0x20\n  8782: u8 [a0 + 0x14] = a3\n  8785: a3 = a2 >> 0x18\n  8788: u8 [a0 + 0x13] = a3\n  8791: a3 = a2 >> 0x10\n  8794: u8 [a0 + 0x12] = a3\n  8797: a2 = a2 >> 0x8\n  8800: u8 [a0 + 0x11] = a2\n  8803: u8 [a0 + 0x8] = a1\n  8806: a2 = a1 >> 0x38\n  8809: u8 [a0 + 0xf] = a2\n  8812: a2 = a1 >> 0x30\n  8815: u8 [a0 + 0xe] = a2\n  8818: a2 = a1 >> 0x28\n  8821: u8 [a0 + 0xd] = a2\n  8824: a1 = a1 >> 0x20\n  8827: u8 [a0 + 0xc] = a1\n  8830: a1 = 0x20\n  8833: a0 = u64 [sp + 0x8]\n  8836: ra = 132, jump @0\n      : @151 [@dyn 66] (gas: 6)\n  8842: i32 a1 = a0 + 0\n  8844: a2 = 0x20\n  8847: a0 = 0\n  8849: ra = 0x86\n  8853: ecalli 12 // 'seal_return'\n  8855: fallthrough\n      : @152 [@dyn 67] (gas: 12)\n  8856: a2 = u64 [a1 + 0x10]\n  8859: a3 = u64 [a1 + 0x18]\n  8862: a4 = u64 [a1 + 0x8]\n  8865: a1 = u64 [a1]\n  8867: a3 = a3 | a4\n  8870: a4 = a1 | a2\n  8873: a4 = a4 | a3\n  8876: a4 = a4 >> 0x20\n  8879: a2 = a2 | a3\n  8882: a2 = a2 << 0x20\n  8885: a2 = a2 | a4\n  8888: jump @155 if a2 != 0\n      : @153 (gas: 7)\n  8892: sp = sp + 0xfffffffffffffff0\n  8895: u64 [sp + 0x8] = ra\n  8898: u64 [sp] = s0\n  8900: s0 = a0\n  8902: i32 a0 = a1 + 0\n  8904: a1 = 0x20\n  8907: ra = 136, jump @0\n      : @154 [@dyn 68] (gas: 100)\n  8913: a1 = u8 [a0 + 0x1]\n  8916: a2 = u8 [a0]\n  8918: a3 = u8 [a0 + 0x2]\n  8921: a4 = u8 [a0 + 0x3]\n  8924: a1 = a1 << 0x8\n  8927: a1 = a1 | a2\n  8930: a3 = a3 << 0x10\n  8933: a4 = a4 << 0x18\n  8936: a3 = a3 | a4\n  8939: a1 = a1 | a3\n  8942: a2 = u8 [a0 + 0x5]\n  8945: a3 = u8 [a0 + 0x4]\n  8948: a4 = u8 [a0 + 0x6]\n  8951: a5 = u8 [a0 + 0x7]\n  8954: a2 = a2 << 0x8\n  8957: a2 = a2 | a3\n  8960: a4 = a4 << 0x10\n  8963: a5 = a5 << 0x18\n  8966: a4 = a4 | a5\n  8969: a2 = a2 | a4\n  8972: a2 = a2 << 0x20\n  8975: t0 = a2 | a1\n  8978: a2 = u8 [a0 + 0x9]\n  8981: a3 = u8 [a0 + 0x8]\n  8984: a4 = u8 [a0 + 0xa]\n  8987: a5 = u8 [a0 + 0xb]\n  8990: a2 = a2 << 0x8\n  8993: a2 = a2 | a3\n  8996: a4 = a4 << 0x10\n  8999: a5 = a5 << 0x18\n  9002: a4 = a4 | a5\n  9005: a2 = a2 | a4\n  9008: a3 = u8 [a0 + 0xd]\n  9011: a4 = u8 [a0 + 0xc]\n  9014: a5 = u8 [a0 + 0xe]\n  9017: a1 = u8 [a0 + 0xf]\n  9020: a3 = a3 << 0x8\n  9023: a3 = a3 | a4\n  9026: a5 = a5 << 0x10\n  9029: a1 = a1 << 0x18\n  9032: a1 = a1 | a5\n  9035: a1 = a1 | a3\n  9038: a1 = a1 << 0x20\n  9041: t1 = a1 | a2\n  9044: a1 = u8 [a0 + 0x11]\n  9047: a3 = u8 [a0 + 0x10]\n  9050: a4 = u8 [a0 + 0x12]\n  9053: a5 = u8 [a0 + 0x13]\n  9056: a1 = a1 << 0x8\n  9059: a1 = a1 | a3\n  9062: a4 = a4 << 0x10\n  9065: a5 = a5 << 0x18\n  9068: a4 = a4 | a5\n  9071: a1 = a1 | a4\n  9074: a3 = u8 [a0 + 0x15]\n  9077: a4 = u8 [a0 + 0x14]\n  9080: a5 = u8 [a0 + 0x16]\n  9083: a2 = u8 [a0 + 0x17]\n  9086: a3 = a3 << 0x8\n  9089: a3 = a3 | a4\n  9092: a5 = a5 << 0x10\n  9095: a2 = a2 << 0x18\n  9098: a2 = a2 | a5\n  9101: a2 = a2 | a3\n  9104: a2 = a2 << 0x20\n  9107: a3 = a2 | a1\n  9110: a1 = u8 [a0 + 0x19]\n  9113: a2 = u8 [a0 + 0x18]\n  9116: a4 = u8 [a0 + 0x1a]\n  9119: a5 = u8 [a0 + 0x1b]\n  9122: a1 = a1 << 0x8\n  9125: a1 = a1 | a2\n  9128: a4 = a4 << 0x10\n  9131: a5 = a5 << 0x18\n  9134: a4 = a4 | a5\n  9137: a1 = a1 | a4\n  9140: a2 = u8 [a0 + 0x1d]\n  9143: a4 = u8 [a0 + 0x1c]\n  9146: a5 = u8 [a0 + 0x1e]\n  9149: a0 = u8 [a0 + 0x1f]\n  9152: a2 = a2 << 0x8\n  9155: a2 = a2 | a4\n  9158: a5 = a5 << 0x10\n  9161: a0 = a0 << 0x18\n  9164: a0 = a0 | a5\n  9167: a0 = a0 | a2\n  9170: a0 = a0 << 0x20\n  9173: a0 = a0 | a1\n  9176: a0 = reverse a0\n  9178: a1 = reverse a3\n  9180: a2 = reverse t1\n  9182: a3 = reverse t0\n  9184: u64 [s0 + 0x18] = a3\n  9187: u64 [s0 + 0x10] = a2\n  9190: u64 [s0 + 0x8] = a1\n  9193: u64 [s0] = a0\n  9195: ra = u64 [sp + 0x8]\n  9198: s0 = u64 [sp]\n  9200: sp = sp + 0x10\n  9203: ret\n      : @155 (gas: 1)\n  9205: trap\n      : @156 (gas: 20)\n  9206: sp = sp + 0xffffffffffffffb0\n  9209: u64 [sp + 0x48] = ra\n  9212: u64 [sp + 0x40] = s0\n  9215: u64 [sp + 0x38] = s1\n  9218: a4 = u64 [a1 + 0x10]\n  9221: a3 = u64 [a1 + 0x18]\n  9224: a5 = u64 [a1 + 0x8]\n  9227: s0 = u64 [a1]\n  9229: u64 [sp + 0x28] = a3\n  9232: u64 [sp + 0x20] = a5\n  9235: a1 = a5 | a3\n  9238: a3 = s0 | a4\n  9241: a3 = a3 | a1\n  9244: a3 = a3 >> 0x20\n  9247: u64 [sp + 0x30] = a4\n  9250: a1 = a1 | a4\n  9253: a1 = a1 << 0x20\n  9256: a1 = a1 | a3\n  9259: u64 [sp + 0x18] = a0\n  9262: jump @159 if a1 != 0\n      : @157 (gas: 10)\n  9266: a0 = u64 [a2 + 0x18]\n  9269: u64 [sp] = a0\n  9271: s1 = u64 [a2 + 0x10]\n  9274: a0 = u64 [a2 + 0x8]\n  9277: u64 [sp + 0x8] = a0\n  9280: a0 = u64 [a2]\n  9282: u64 [sp + 0x10] = a0\n  9285: i32 a0 = s0 + 0\n  9287: a1 = 0x20\n  9290: ra = 138, jump @0\n      : @158 [@dyn 69] (gas: 88)\n  9296: a1 = u64 [sp]\n  9298: a1 = reverse a1\n  9300: a2 = reverse s1\n  9302: a3 = u64 [sp + 0x8]\n  9305: a3 = reverse a3\n  9307: a4 = u64 [sp + 0x10]\n  9310: a4 = reverse a4\n  9312: a5 = a4 >> 0x38\n  9315: u8 [a0 + 0x1f] = a5\n  9318: a5 = a4 >> 0x30\n  9321: u8 [a0 + 0x1e] = a5\n  9324: a5 = a4 >> 0x28\n  9327: u8 [a0 + 0x1d] = a5\n  9330: a5 = a4 >> 0x20\n  9333: u8 [a0 + 0x1c] = a5\n  9336: a5 = a4 >> 0x18\n  9339: u8 [a0 + 0x1b] = a5\n  9342: a5 = a4 >> 0x10\n  9345: u8 [a0 + 0x1a] = a5\n  9348: a5 = a4 >> 0x8\n  9351: u8 [a0 + 0x19] = a5\n  9354: u8 [a0 + 0x18] = a4\n  9357: u8 [a0 + 0x10] = a3\n  9360: a4 = a3 >> 0x38\n  9363: u8 [a0 + 0x17] = a4\n  9366: a4 = a3 >> 0x30\n  9369: u8 [a0 + 0x16] = a4\n  9372: a4 = a3 >> 0x28\n  9375: u8 [a0 + 0x15] = a4\n  9378: a4 = a3 >> 0x20\n  9381: u8 [a0 + 0x14] = a4\n  9384: a4 = a3 >> 0x18\n  9387: u8 [a0 + 0x13] = a4\n  9390: a4 = a3 >> 0x10\n  9393: u8 [a0 + 0x12] = a4\n  9396: a3 = a3 >> 0x8\n  9399: u8 [a0 + 0x11] = a3\n  9402: u8 [a0 + 0x8] = a2\n  9405: a3 = a2 >> 0x38\n  9408: u8 [a0 + 0xf] = a3\n  9411: a3 = a2 >> 0x30\n  9414: u8 [a0 + 0xe] = a3\n  9417: a3 = a2 >> 0x28\n  9420: u8 [a0 + 0xd] = a3\n  9423: a3 = a2 >> 0x20\n  9426: u8 [a0 + 0xc] = a3\n  9429: a3 = a2 >> 0x18\n  9432: u8 [a0 + 0xb] = a3\n  9435: a3 = a2 >> 0x10\n  9438: u8 [a0 + 0xa] = a3\n  9441: a2 = a2 >> 0x8\n  9444: u8 [a0 + 0x9] = a2\n  9447: u8 [a0] = a1\n  9449: a2 = a1 >> 0x38\n  9452: u8 [a0 + 0x7] = a2\n  9455: a2 = a1 >> 0x30\n  9458: u8 [a0 + 0x6] = a2\n  9461: a2 = a1 >> 0x28\n  9464: u8 [a0 + 0x5] = a2\n  9467: a2 = a1 >> 0x20\n  9470: u8 [a0 + 0x4] = a2\n  9473: a2 = a1 >> 0x18\n  9476: u8 [a0 + 0x3] = a2\n  9479: a2 = a1 >> 0x10\n  9482: u8 [a0 + 0x2] = a2\n  9485: a1 = a1 >> 0x8\n  9488: u8 [a0 + 0x1] = a1\n  9491: a0 = s0 + 0x20\n  9494: a1 = a0 <u s0\n  9497: a3 = u64 [sp + 0x20]\n  9500: a2 = a3 + a1\n  9503: a3 = a2 <u a3\n  9506: a3 = a1 if a1 == 0\n  9509: a1 = u64 [sp + 0x30]\n  9512: a3 = a3 + a1\n  9515: a1 = a3 <u a1\n  9518: a4 = u64 [sp + 0x28]\n  9521: a1 = a1 + a4\n  9524: a4 = u64 [sp + 0x18]\n  9527: u64 [a4] = a0\n  9529: u64 [a4 + 0x8] = a2\n  9532: u64 [a4 + 0x10] = a3\n  9535: u64 [a4 + 0x18] = a1\n  9538: ra = u64 [sp + 0x48]\n  9541: s0 = u64 [sp + 0x40]\n  9544: s1 = u64 [sp + 0x38]\n  9547: sp = sp + 0x50\n  9550: ret\n      : @159 (gas: 1)\n  9552: trap\n      : @160 (gas: 19)\n  9553: sp = sp + 0xffffffffffffff08\n  9557: u64 [sp + 0xf0] = ra\n  9561: u64 [sp + 0xe8] = s0\n  9565: u64 [sp + 0xe0] = s1\n  9569: a4 = u64 [a0 + 0x10]\n  9572: a5 = u64 [a0 + 0x18]\n  9575: a2 = u64 [a0 + 0x8]\n  9578: a3 = u64 [a0]\n  9580: u64 [sp + 0xd0] = a2\n  9584: u64 [sp + 0x98] = a5\n  9588: a0 = a2 | a5\n  9591: a2 = a3 | a4\n  9594: a2 = a2 | a0\n  9597: a2 = a2 >> 0x20\n  9600: u64 [sp + 0xa8] = a4\n  9604: a0 = a0 | a4\n  9607: a0 = a0 << 0x20\n  9610: a0 = a0 | a2\n  9613: jump @177 if a0 != 0\n      : @161 (gas: 11)\n  9617: a0 = u64 [a1 + 0x18]\n  9620: u64 [sp + 0xb0] = a0\n  9624: s1 = u64 [a1 + 0x10]\n  9627: s0 = u64 [a1 + 0x8]\n  9630: a0 = u64 [a1]\n  9632: u64 [sp + 0xd8] = a0\n  9636: i32 a0 = a3 + 0\n  9638: a1 = 0x20\n  9641: u64 [sp + 0xb8] = a0\n  9645: u64 [sp + 0xc8] = a3\n  9649: ra = 140, jump @0\n      : @162 [@dyn 70] (gas: 12)\n  9655: a3 = u64 [sp + 0xd8]\n  9659: a1 = a3 | s1\n  9662: u64 [sp + 0xc0] = s0\n  9666: a2 = u64 [sp + 0xb0]\n  9670: a2 = a2 | s0\n  9673: a1 = a1 | a2\n  9676: a1 = a1 >> 0x20\n  9679: u64 [sp + 0x90] = s1\n  9683: a2 = a2 | s1\n  9686: a2 = a2 << 0x20\n  9689: a1 = a1 | a2\n  9692: jump @177 if a1 != 0\n      : @163 (gas: 42)\n  9696: a1 = u8 [a0 + 0xc]\n  9699: u64 [sp + 0x88] = a1\n  9703: a1 = u8 [a0 + 0xd]\n  9706: u64 [sp + 0x80] = a1\n  9710: a1 = u8 [a0 + 0xe]\n  9713: u64 [sp + 0x78] = a1\n  9716: a1 = u8 [a0 + 0xf]\n  9719: u64 [sp + 0x70] = a1\n  9722: a1 = u8 [a0 + 0x10]\n  9725: u64 [sp + 0x68] = a1\n  9728: a1 = u8 [a0 + 0x11]\n  9731: u64 [sp + 0x60] = a1\n  9734: a1 = u8 [a0 + 0x12]\n  9737: u64 [sp + 0x58] = a1\n  9740: a1 = u8 [a0 + 0x13]\n  9743: u64 [sp + 0x50] = a1\n  9746: a1 = u8 [a0 + 0x14]\n  9749: u64 [sp + 0x48] = a1\n  9752: a1 = u8 [a0 + 0x15]\n  9755: u64 [sp + 0x40] = a1\n  9758: a1 = u8 [a0 + 0x16]\n  9761: u64 [sp + 0x38] = a1\n  9764: a1 = u8 [a0 + 0x17]\n  9767: u64 [sp + 0x30] = a1\n  9770: a1 = u8 [a0 + 0x18]\n  9773: u64 [sp + 0x28] = a1\n  9776: a1 = u8 [a0 + 0x19]\n  9779: u64 [sp + 0x20] = a1\n  9782: a1 = u8 [a0 + 0x1a]\n  9785: u64 [sp + 0x18] = a1\n  9788: a1 = u8 [a0 + 0x1b]\n  9791: u64 [sp + 0x10] = a1\n  9794: a1 = u8 [a0 + 0x1c]\n  9797: u64 [sp + 0x8] = a1\n  9800: a1 = u8 [a0 + 0x1d]\n  9803: u64 [sp] = a1\n  9805: s0 = u8 [a0 + 0x1e]\n  9808: s1 = u8 [a0 + 0x1f]\n  9811: i32 a0 = a3 + 0\n  9813: a1 = 0x20\n  9816: u64 [sp + 0xa0] = a0\n  9820: ra = 142, jump @0\n      : @164 [@dyn 71] (gas: 61)\n  9826: u8 [a0 + 0x1f] = s1\n  9829: u8 [a0 + 0x1e] = s0\n  9832: a1 = u64 [sp]\n  9834: u8 [a0 + 0x1d] = a1\n  9837: a1 = u64 [sp + 0x8]\n  9840: u8 [a0 + 0x1c] = a1\n  9843: a1 = u64 [sp + 0x10]\n  9846: u8 [a0 + 0x1b] = a1\n  9849: a1 = u64 [sp + 0x18]\n  9852: u8 [a0 + 0x1a] = a1\n  9855: a1 = u64 [sp + 0x20]\n  9858: u8 [a0 + 0x19] = a1\n  9861: a1 = u64 [sp + 0x28]\n  9864: u8 [a0 + 0x18] = a1\n  9867: a1 = u64 [sp + 0x30]\n  9870: u8 [a0 + 0x17] = a1\n  9873: a1 = u64 [sp + 0x38]\n  9876: u8 [a0 + 0x16] = a1\n  9879: a1 = u64 [sp + 0x40]\n  9882: u8 [a0 + 0x15] = a1\n  9885: a1 = u64 [sp + 0x48]\n  9888: u8 [a0 + 0x14] = a1\n  9891: a1 = u64 [sp + 0x50]\n  9894: u8 [a0 + 0x13] = a1\n  9897: a1 = u64 [sp + 0x58]\n  9900: u8 [a0 + 0x12] = a1\n  9903: a1 = u64 [sp + 0x60]\n  9906: u8 [a0 + 0x11] = a1\n  9909: a1 = u64 [sp + 0x68]\n  9912: u8 [a0 + 0x10] = a1\n  9915: a1 = u64 [sp + 0x70]\n  9918: u8 [a0 + 0xf] = a1\n  9921: a1 = u64 [sp + 0x78]\n  9924: u8 [a0 + 0xe] = a1\n  9927: a1 = u64 [sp + 0x80]\n  9931: u8 [a0 + 0xd] = a1\n  9934: a1 = u64 [sp + 0x88]\n  9938: u8 [a0 + 0xc] = a1\n  9941: u8 [a0 + 11] = 0\n  9944: u8 [a0 + 10] = 0\n  9947: u8 [a0 + 9] = 0\n  9950: u8 [a0 + 8] = 0\n  9953: u8 [a0 + 7] = 0\n  9956: u8 [a0 + 6] = 0\n  9959: u8 [a0 + 5] = 0\n  9962: u8 [a0 + 4] = 0\n  9965: u8 [a0 + 3] = 0\n  9968: u8 [a0 + 2] = 0\n  9971: u8 [a0 + 1] = 0\n  9974: a1 = u64 [sp + 0xa8]\n  9978: a3 = u64 [sp + 0x98]\n  9982: a3 = a3 | a1\n  9985: s0 = 0xffffffe0\n  9995: a1 = u64 [sp + 0xc8]\n  9999: a1 = a1 <u s0\n 10002: a2 = u64 [sp + 0xd0]\n 10006: a1 = 0 if a2 != 0\n 10008: u64 [sp + 0xa8] = a3\n 10012: a1 = 0 if a3 != 0\n 10014: u8 [a0 + 0] = 0\n 10016: jump @177 if a1 == 0\n      : @165 (gas: 4)\n 10020: a0 = u64 [sp + 0xb8]\n 10024: i32 a0 = a0 + 0x20\n 10027: a1 = 0x20\n 10030: ra = 144, jump @0\n      : @166 [@dyn 72] (gas: 10)\n 10036: a1 = u64 [sp + 0xb0]\n 10040: a3 = u64 [sp + 0x90]\n 10044: a3 = a3 | a1\n 10047: a1 = u64 [sp + 0xd8]\n 10051: a1 = a1 <u s0\n 10054: a2 = u64 [sp + 0xc0]\n 10058: a1 = 0 if a2 != 0\n 10060: u64 [sp + 0xb0] = a3\n 10064: a1 = 0 if a3 != 0\n 10066: jump @177 if a1 == 0\n      : @167 (gas: 5)\n 10070: s0 = u8 [a0 + 0x1f]\n 10073: s1 = u64 [sp + 0xa0]\n 10077: i32 a0 = s1 + 0x20\n 10080: a1 = 0x20\n 10083: ra = 146, jump @0\n      : @168 [@dyn 73] (gas: 40)\n 10089: u8 [a0 + 0x1f] = s0\n 10092: u8 [a0 + 30] = 0\n 10095: u8 [a0 + 29] = 0\n 10098: u8 [a0 + 28] = 0\n 10101: u8 [a0 + 27] = 0\n 10104: u8 [a0 + 26] = 0\n 10107: u8 [a0 + 25] = 0\n 10110: u8 [a0 + 24] = 0\n 10113: u8 [a0 + 23] = 0\n 10116: u8 [a0 + 22] = 0\n 10119: u8 [a0 + 21] = 0\n 10122: u8 [a0 + 20] = 0\n 10125: u8 [a0 + 19] = 0\n 10128: u8 [a0 + 18] = 0\n 10131: u8 [a0 + 17] = 0\n 10134: u8 [a0 + 16] = 0\n 10137: u8 [a0 + 15] = 0\n 10140: u8 [a0 + 14] = 0\n 10143: u8 [a0 + 13] = 0\n 10146: u8 [a0 + 12] = 0\n 10149: u8 [a0 + 11] = 0\n 10152: u8 [a0 + 10] = 0\n 10155: u8 [a0 + 9] = 0\n 10158: u8 [a0 + 8] = 0\n 10161: u8 [a0 + 7] = 0\n 10164: u8 [a0 + 6] = 0\n 10167: u8 [a0 + 5] = 0\n 10170: u8 [a0 + 4] = 0\n 10173: u8 [a0 + 3] = 0\n 10176: u8 [a0 + 2] = 0\n 10179: u8 [a0 + 1] = 0\n 10182: s0 = 0xffffffc0\n 10192: a1 = u64 [sp + 0xc8]\n 10196: a1 = a1 <u s0\n 10199: a2 = u64 [sp + 0xd0]\n 10203: a1 = 0 if a2 != 0\n 10205: a2 = u64 [sp + 0xa8]\n 10209: a1 = 0 if a2 != 0\n 10211: u8 [a0 + 0] = 0\n 10213: jump @177 if a1 == 0\n      : @169 (gas: 4)\n 10217: a0 = u64 [sp + 0xb8]\n 10221: i32 a0 = a0 + 0x40\n 10224: a1 = 0x20\n 10227: ra = 148, jump @0\n      : @170 [@dyn 74] (gas: 7)\n 10233: a1 = u64 [sp + 0xd8]\n 10237: a1 = a1 <u s0\n 10240: a2 = u64 [sp + 0xc0]\n 10244: a1 = 0 if a2 != 0\n 10246: a2 = u64 [sp + 0xb0]\n 10250: a1 = 0 if a2 != 0\n 10252: jump @177 if a1 == 0\n      : @171 (gas: 27)\n 10256: a1 = u8 [a0 + 0x19]\n 10259: a2 = u8 [a0 + 0x18]\n 10262: a3 = u8 [a0 + 0x1a]\n 10265: a4 = u8 [a0 + 0x1b]\n 10268: a1 = a1 << 0x8\n 10271: a1 = a1 | a2\n 10274: a3 = a3 << 0x10\n 10277: a4 = a4 << 0x18\n 10280: a2 = u8 [a0 + 0x1d]\n 10283: a5 = u8 [a0 + 0x1c]\n 10286: a3 = a3 | a4\n 10289: a1 = a1 | a3\n 10292: a2 = a2 << 0x8\n 10295: a2 = a2 | a5\n 10298: a3 = u8 [a0 + 0x1e]\n 10301: a0 = u8 [a0 + 0x1f]\n 10304: a4 = 0xff00000000000000\n 10314: a3 = a3 << 0x10\n 10317: a0 = a0 << 0x18\n 10320: a0 = a0 | a3\n 10323: a0 = a0 | a2\n 10326: a0 = a0 << 0x20\n 10329: a0 = a0 | a1\n 10332: s0 = a0 & a4\n 10335: i32 a0 = s1 + 0x40\n 10338: a1 = 0x20\n 10341: ra = 150, jump @0\n      : @172 [@dyn 75] (gas: 47)\n 10347: u8 [a0 + 23] = 0\n 10350: u8 [a0 + 22] = 0\n 10353: u8 [a0 + 21] = 0\n 10356: u8 [a0 + 20] = 0\n 10359: u8 [a0 + 19] = 0\n 10362: u8 [a0 + 18] = 0\n 10365: u8 [a0 + 17] = 0\n 10368: u8 [a0 + 16] = 0\n 10371: u8 [a0 + 15] = 0\n 10374: u8 [a0 + 14] = 0\n 10377: u8 [a0 + 13] = 0\n 10380: u8 [a0 + 12] = 0\n 10383: u8 [a0 + 11] = 0\n 10386: u8 [a0 + 10] = 0\n 10389: u8 [a0 + 9] = 0\n 10392: u8 [a0 + 8] = 0\n 10395: u8 [a0 + 7] = 0\n 10398: u8 [a0 + 6] = 0\n 10401: u8 [a0 + 5] = 0\n 10404: u8 [a0 + 4] = 0\n 10407: u8 [a0 + 3] = 0\n 10410: u8 [a0 + 2] = 0\n 10413: u8 [a0 + 1] = 0\n 10416: u8 [a0 + 0] = 0\n 10418: u8 [a0 + 0x18] = s0\n 10421: a1 = s0 >> 0x38\n 10424: u8 [a0 + 0x1f] = a1\n 10427: a1 = s0 >> 0x30\n 10430: u8 [a0 + 0x1e] = a1\n 10433: a1 = s0 >> 0x28\n 10436: u8 [a0 + 0x1d] = a1\n 10439: a1 = s0 >> 0x20\n 10442: u8 [a0 + 0x1c] = a1\n 10445: a1 = s0 >> 0x18\n 10448: u8 [a0 + 0x1b] = a1\n 10451: a1 = s0 >> 0x10\n 10454: u8 [a0 + 0x1a] = a1\n 10457: a1 = s0 >> 0x8\n 10460: s0 = 0xffffffa0\n 10470: a2 = u64 [sp + 0xc8]\n 10474: a2 = a2 <u s0\n 10477: a3 = u64 [sp + 0xd0]\n 10481: a2 = 0 if a3 != 0\n 10483: a3 = u64 [sp + 0xa8]\n 10487: a2 = 0 if a3 != 0\n 10489: u8 [a0 + 0x19] = a1\n 10492: jump @177 if a2 == 0\n      : @173 (gas: 4)\n 10496: a0 = u64 [sp + 0xb8]\n 10500: i32 a0 = a0 + 0x60\n 10503: a1 = 0x20\n 10506: ra = 152, jump @0\n      : @174 [@dyn 76] (gas: 7)\n 10512: a1 = u64 [sp + 0xd8]\n 10516: a1 = a1 <u s0\n 10519: a2 = u64 [sp + 0xc0]\n 10523: a1 = 0 if a2 != 0\n 10525: a2 = u64 [sp + 0xb0]\n 10529: a1 = 0 if a2 != 0\n 10531: jump @177 if a1 == 0\n      : @175 (gas: 94)\n 10535: a1 = u8 [a0 + 0x1d]\n 10538: a2 = u8 [a0 + 0x1c]\n 10541: a3 = u8 [a0 + 0x1e]\n 10544: a4 = u8 [a0 + 0x1f]\n 10547: a1 = a1 << 0x8\n 10550: a1 = a1 | a2\n 10553: a3 = a3 << 0x10\n 10556: a4 = a4 << 0x18\n 10559: a3 = a3 | a4\n 10562: a1 = a1 | a3\n 10565: a2 = u8 [a0 + 0xd]\n 10568: a3 = u8 [a0 + 0xc]\n 10571: a4 = u8 [a0 + 0xe]\n 10574: a5 = u8 [a0 + 0xf]\n 10577: a2 = a2 << 0x8\n 10580: a2 = a2 | a3\n 10583: a4 = a4 << 0x10\n 10586: a5 = a5 << 0x18\n 10589: a4 = a4 | a5\n 10592: a2 = a2 | a4\n 10595: a1 = a1 | a2\n 10598: a1 = a1 << 0x20\n 10601: a2 = u8 [a0 + 0x9]\n 10604: a3 = u8 [a0 + 0x8]\n 10607: a4 = u8 [a0 + 0xa]\n 10610: a5 = u8 [a0 + 0xb]\n 10613: a2 = a2 << 0x8\n 10616: a2 = a2 | a3\n 10619: a4 = a4 << 0x10\n 10622: a5 = a5 << 0x18\n 10625: a4 = a4 | a5\n 10628: a2 = a2 | a4\n 10631: a3 = u8 [a0 + 0x19]\n 10634: a4 = u8 [a0 + 0x18]\n 10637: a5 = u8 [a0 + 0x1a]\n 10640: s1 = u8 [a0 + 0x1b]\n 10643: a3 = a3 << 0x8\n 10646: a3 = a3 | a4\n 10649: a5 = a5 << 0x10\n 10652: s1 = s1 << 0x18\n 10655: a5 = a5 | s1\n 10658: a3 = a3 | a5\n 10661: a2 = a2 | a3\n 10664: a1 = a1 | a2\n 10667: a2 = u8 [a0 + 0x15]\n 10670: a3 = u8 [a0 + 0x14]\n 10673: a4 = u8 [a0 + 0x16]\n 10676: a5 = u8 [a0 + 0x17]\n 10679: a2 = a2 << 0x8\n 10682: a2 = a2 | a3\n 10685: a4 = a4 << 0x10\n 10688: a5 = a5 << 0x18\n 10691: a4 = a4 | a5\n 10694: a2 = a2 | a4\n 10697: a3 = u8 [a0 + 0x5]\n 10700: a4 = u8 [a0 + 0x4]\n 10703: a5 = u8 [a0 + 0x6]\n 10706: s1 = u8 [a0 + 0x7]\n 10709: a3 = a3 << 0x8\n 10712: a3 = a3 | a4\n 10715: a5 = a5 << 0x10\n 10718: s1 = s1 << 0x18\n 10721: a5 = a5 | s1\n 10724: a3 = a3 | a5\n 10727: a2 = a2 | a3\n 10730: a3 = u8 [a0 + 0x1]\n 10733: a4 = u8 [a0]\n 10735: a5 = u8 [a0 + 0x2]\n 10738: s1 = u8 [a0 + 0x3]\n 10741: a3 = a3 << 0x8\n 10744: a3 = a3 | a4\n 10747: a5 = a5 << 0x10\n 10750: s1 = s1 << 0x18\n 10753: a4 = u8 [a0 + 0x11]\n 10756: a5 = a5 | s1\n 10759: a3 = a3 | a5\n 10762: a5 = u8 [a0 + 0x10]\n 10765: a4 = a4 << 0x8\n 10768: s1 = u8 [a0 + 0x12]\n 10771: a0 = u8 [a0 + 0x13]\n 10774: a4 = a4 | a5\n 10777: a2 = a2 << 0x20\n 10780: s1 = s1 << 0x10\n 10783: a0 = a0 << 0x18\n 10786: a0 = a0 | s1\n 10789: a0 = a0 | a4\n 10792: a0 = a0 | a3\n 10795: a0 = a0 | a2\n 10798: a0 = a0 | a1\n 10801: s0 = a0 >u 0\n 10803: a0 = u64 [sp + 0xa0]\n 10807: i32 a0 = a0 + 0x60\n 10810: a1 = 0x20\n 10813: ra = 154, jump @0\n      : @176 [@dyn 77] (gas: 37)\n 10819: u8 [a0 + 30] = 0\n 10822: u8 [a0 + 29] = 0\n 10825: u8 [a0 + 28] = 0\n 10828: u8 [a0 + 27] = 0\n 10831: u8 [a0 + 26] = 0\n 10834: u8 [a0 + 25] = 0\n 10837: u8 [a0 + 24] = 0\n 10840: u8 [a0 + 23] = 0\n 10843: u8 [a0 + 22] = 0\n 10846: u8 [a0 + 21] = 0\n 10849: u8 [a0 + 20] = 0\n 10852: u8 [a0 + 19] = 0\n 10855: u8 [a0 + 18] = 0\n 10858: u8 [a0 + 17] = 0\n 10861: u8 [a0 + 16] = 0\n 10864: u8 [a0 + 15] = 0\n 10867: u8 [a0 + 14] = 0\n 10870: u8 [a0 + 13] = 0\n 10873: u8 [a0 + 12] = 0\n 10876: u8 [a0 + 11] = 0\n 10879: u8 [a0 + 10] = 0\n 10882: u8 [a0 + 9] = 0\n 10885: u8 [a0 + 8] = 0\n 10888: u8 [a0 + 7] = 0\n 10891: u8 [a0 + 6] = 0\n 10894: u8 [a0 + 5] = 0\n 10897: u8 [a0 + 4] = 0\n 10900: u8 [a0 + 3] = 0\n 10903: u8 [a0 + 2] = 0\n 10906: u8 [a0 + 1] = 0\n 10909: u8 [a0 + 0] = 0\n 10911: u8 [a0 + 0x1f] = s0\n 10914: ra = u64 [sp + 0xf0]\n 10918: s0 = u64 [sp + 0xe8]\n 10922: s1 = u64 [sp + 0xe0]\n 10926: sp = sp + 0xf8\n 10930: ret\n      : @177 (gas: 1)\n 10932: trap\n      : @178 (gas: 22)\n 10933: sp = sp + 0xffffffffffffff20\n 10937: u64 [sp + 0xd8] = ra\n 10941: u64 [sp + 0xd0] = s0\n 10945: u64 [sp + 0xc8] = s1\n 10949: s0 = sp + 0xe0\n 10953: sp = sp & 0xfffffffffffffff0\n 10956: a3 = u64 [a1 + 0x18]\n 10959: a4 = u64 [a1 + 0x10]\n 10962: a5 = u64 [a1 + 0x8]\n 10965: s1 = u64 [a1]\n 10967: u64 [sp + 0x78] = a3\n 10970: u64 [sp + 0x68] = a5\n 10973: a1 = a5 | a3\n 10976: a3 = s1 | a4\n 10979: a3 = a3 | a1\n 10982: a3 = a3 >> 0x20\n 10985: u64 [sp + 0x70] = a4\n 10988: a1 = a1 | a4\n 10991: a1 = a1 << 0x20\n 10994: a1 = a1 | a3\n 10997: u64 [sp + 0x10] = a0\n 11000: jump @193 if a1 != 0\n      : @179 (gas: 13)\n 11004: a0 = u64 [a2 + 0x18]\n 11007: u64 [sp + 0x60] = a0\n 11010: a0 = u64 [a2 + 0x10]\n 11013: u64 [sp + 0x48] = a0\n 11016: a0 = u64 [a2 + 0x8]\n 11019: u64 [sp + 0x40] = a0\n 11022: a0 = u64 [a2]\n 11024: u64 [sp + 0x50] = a0\n 11027: u64 [sp + 0x58] = s1\n 11030: i32 a0 = s1 + 0\n 11032: a1 = 0x20\n 11035: s1 = 0x20\n 11038: ra = 156, jump @0\n      : @180 [@dyn 78] (gas: 44)\n 11044: a3 = u64 [sp + 0x50]\n 11047: u8 [a0 + 0x1f] = s1\n 11050: a4 = u64 [sp + 0x48]\n 11053: a1 = a3 | a4\n 11056: a2 = u64 [sp + 0x60]\n 11059: a5 = u64 [sp + 0x40]\n 11062: a2 = a2 | a5\n 11065: a1 = a1 | a2\n 11068: a1 = a1 >> 0x20\n 11071: a2 = a2 | a4\n 11074: a2 = a2 << 0x20\n 11077: a1 = a1 | a2\n 11080: u8 [a0 + 30] = 0\n 11083: u8 [a0 + 29] = 0\n 11086: u8 [a0 + 28] = 0\n 11089: u8 [a0 + 27] = 0\n 11092: u8 [a0 + 26] = 0\n 11095: u8 [a0 + 25] = 0\n 11098: u8 [a0 + 24] = 0\n 11101: u8 [a0 + 23] = 0\n 11104: u8 [a0 + 22] = 0\n 11107: u8 [a0 + 21] = 0\n 11110: u8 [a0 + 20] = 0\n 11113: u8 [a0 + 19] = 0\n 11116: u8 [a0 + 18] = 0\n 11119: u8 [a0 + 17] = 0\n 11122: u8 [a0 + 16] = 0\n 11125: u8 [a0 + 15] = 0\n 11128: u8 [a0 + 14] = 0\n 11131: u8 [a0 + 13] = 0\n 11134: u8 [a0 + 12] = 0\n 11137: u8 [a0 + 11] = 0\n 11140: u8 [a0 + 10] = 0\n 11143: u8 [a0 + 9] = 0\n 11146: u8 [a0 + 8] = 0\n 11149: u8 [a0 + 7] = 0\n 11152: u8 [a0 + 6] = 0\n 11155: u8 [a0 + 5] = 0\n 11158: u8 [a0 + 4] = 0\n 11161: u8 [a0 + 3] = 0\n 11164: u8 [a0 + 2] = 0\n 11167: u8 [a0 + 1] = 0\n 11170: u8 [a0 + 0] = 0\n 11172: jump @193 if a1 != 0\n      : @181 (gas: 18)\n 11176: a0 = u64 [sp + 0x58]\n 11179: a1 = a0 + 0x20\n 11182: u64 [sp + 0x30] = a1\n 11185: a0 = a1 <u a0\n 11188: a1 = u64 [sp + 0x68]\n 11191: a2 = a1 + a0\n 11194: u64 [sp + 0x38] = a2\n 11197: a1 = a2 <u a1\n 11200: a1 = a0 if a0 == 0\n 11203: a0 = u64 [sp + 0x70]\n 11206: s1 = a0 + a1\n 11209: a0 = s1 <u a0\n 11212: a1 = u64 [sp + 0x78]\n 11215: a0 = a0 + a1\n 11218: u64 [sp + 0x28] = a0\n 11221: i32 a0 = a3 + 0\n 11223: a1 = 0x20\n 11226: ra = 158, jump @0\n      : @182 [@dyn 79] (gas: 11)\n 11232: t0 = u64 [sp + 0x30]\n 11235: a1 = t0 | s1\n 11238: a2 = u64 [sp + 0x38]\n 11241: a3 = u64 [sp + 0x28]\n 11244: a2 = a2 | a3\n 11247: a1 = a1 | a2\n 11250: a1 = a1 >> 0x20\n 11253: a2 = a2 | s1\n 11256: a2 = a2 << 0x20\n 11259: a1 = a1 | a2\n 11262: jump @193 if a1 != 0\n      : @183 (gas: 94)\n 11266: a1 = u8 [a0 + 0x19]\n 11269: a2 = u8 [a0 + 0x18]\n 11272: a3 = u8 [a0 + 0x1a]\n 11275: a4 = u8 [a0 + 0x1b]\n 11278: a1 = a1 << 0x8\n 11281: a1 = a1 | a2\n 11284: a3 = a3 << 0x10\n 11287: a4 = a4 << 0x18\n 11290: a3 = a3 | a4\n 11293: a1 = a1 | a3\n 11296: a2 = u8 [a0 + 0x1d]\n 11299: a3 = u8 [a0 + 0x1c]\n 11302: a4 = u8 [a0 + 0x1e]\n 11305: a5 = u8 [a0 + 0x1f]\n 11308: a2 = a2 << 0x8\n 11311: a2 = a2 | a3\n 11314: a4 = a4 << 0x10\n 11317: a5 = a5 << 0x18\n 11320: a4 = a4 | a5\n 11323: a2 = a2 | a4\n 11326: a2 = a2 << 0x20\n 11329: a1 = a1 | a2\n 11332: u64 [sp + 0x38] = a1\n 11335: a1 = u8 [a0 + 0x11]\n 11338: a2 = u8 [a0 + 0x10]\n 11341: a3 = u8 [a0 + 0x12]\n 11344: a4 = u8 [a0 + 0x13]\n 11347: a1 = a1 << 0x8\n 11350: a1 = a1 | a2\n 11353: a3 = a3 << 0x10\n 11356: a4 = a4 << 0x18\n 11359: a3 = a3 | a4\n 11362: a1 = a1 | a3\n 11365: a2 = u8 [a0 + 0x15]\n 11368: a3 = u8 [a0 + 0x14]\n 11371: a4 = u8 [a0 + 0x16]\n 11374: a5 = u8 [a0 + 0x17]\n 11377: a2 = a2 << 0x8\n 11380: a2 = a2 | a3\n 11383: a4 = a4 << 0x10\n 11386: a5 = a5 << 0x18\n 11389: a4 = a4 | a5\n 11392: a2 = a2 | a4\n 11395: a2 = a2 << 0x20\n 11398: a1 = a1 | a2\n 11401: u64 [sp + 0x28] = a1\n 11404: a1 = u8 [a0 + 0x9]\n 11407: a2 = u8 [a0 + 0x8]\n 11410: a3 = u8 [a0 + 0xa]\n 11413: a4 = u8 [a0 + 0xb]\n 11416: a1 = a1 << 0x8\n 11419: a1 = a1 | a2\n 11422: a3 = a3 << 0x10\n 11425: a4 = a4 << 0x18\n 11428: a3 = a3 | a4\n 11431: a1 = a1 | a3\n 11434: a2 = u8 [a0 + 0xd]\n 11437: a3 = u8 [a0 + 0xc]\n 11440: a4 = u8 [a0 + 0xe]\n 11443: a5 = u8 [a0 + 0xf]\n 11446: a2 = a2 << 0x8\n 11449: a2 = a2 | a3\n 11452: a4 = a4 << 0x10\n 11455: a5 = a5 << 0x18\n 11458: a4 = a4 | a5\n 11461: a2 = a2 | a4\n 11464: a2 = a2 << 0x20\n 11467: a1 = a1 | a2\n 11470: u64 [sp + 0x20] = a1\n 11473: a1 = u8 [a0 + 0x1]\n 11476: a2 = u8 [a0]\n 11478: a3 = u8 [a0 + 0x2]\n 11481: a4 = u8 [a0 + 0x3]\n 11484: a1 = a1 << 0x8\n 11487: a1 = a1 | a2\n 11490: a3 = a3 << 0x10\n 11493: a4 = a4 << 0x18\n 11496: a3 = a3 | a4\n 11499: a1 = a1 | a3\n 11502: a2 = u8 [a0 + 0x5]\n 11505: a3 = u8 [a0 + 0x4]\n 11508: a4 = u8 [a0 + 0x6]\n 11511: a0 = u8 [a0 + 0x7]\n 11514: a2 = a2 << 0x8\n 11517: a2 = a2 | a3\n 11520: a4 = a4 << 0x10\n 11523: a0 = a0 << 0x18\n 11526: a0 = a0 | a4\n 11529: a0 = a0 | a2\n 11532: a0 = a0 << 0x20\n 11535: s1 = a0 | a1\n 11538: i32 a0 = t0 + 0\n 11540: a1 = 0x20\n 11543: ra = 160, jump @0\n      : @184 [@dyn 80] (gas: 81)\n 11549: a3 = s1\n 11551: s1 = u64 [sp + 0x20]\n 11554: a4 = u64 [sp + 0x28]\n 11557: t2 = u64 [sp + 0x38]\n 11560: u8 [a0 + 0x10] = a4\n 11563: a1 = s1 >> 0x38\n 11566: u8 [a0 + 0xf] = a1\n 11569: a1 = s1 >> 0x30\n 11572: u8 [a0 + 0xe] = a1\n 11575: a1 = s1 >> 0x28\n 11578: u8 [a0 + 0xd] = a1\n 11581: a1 = s1 >> 0x20\n 11584: u8 [a0 + 0xc] = a1\n 11587: a1 = s1 >> 0x18\n 11590: u8 [a0 + 0xb] = a1\n 11593: a1 = s1 >> 0x10\n 11596: u8 [a0 + 0xa] = a1\n 11599: a1 = s1 >> 0x8\n 11602: u8 [a0 + 0x9] = a1\n 11605: u8 [a0 + 0x8] = s1\n 11608: a1 = a3 >> 0x38\n 11611: u8 [a0 + 0x7] = a1\n 11614: a1 = a3 >> 0x30\n 11617: u8 [a0 + 0x6] = a1\n 11620: a1 = a3 >> 0x28\n 11623: u8 [a0 + 0x5] = a1\n 11626: a1 = a3 >> 0x20\n 11629: u8 [a0 + 0x4] = a1\n 11632: a1 = a3 >> 0x18\n 11635: u8 [a0 + 0x3] = a1\n 11638: a1 = a3 >> 0x10\n 11641: u8 [a0 + 0x2] = a1\n 11644: a1 = a3 >> 0x8\n 11647: u8 [a0 + 0x1] = a1\n 11650: u8 [a0] = a3\n 11652: u8 [a0 + 0x18] = t2\n 11655: a1 = a4 >> 0x38\n 11658: u8 [a0 + 0x17] = a1\n 11661: a1 = a4 >> 0x30\n 11664: u8 [a0 + 0x16] = a1\n 11667: a1 = a4 >> 0x28\n 11670: u8 [a0 + 0x15] = a1\n 11673: a1 = a4 >> 0x20\n 11676: u8 [a0 + 0x14] = a1\n 11679: a1 = a4 >> 0x18\n 11682: u8 [a0 + 0x13] = a1\n 11685: a1 = a4 >> 0x10\n 11688: u8 [a0 + 0x12] = a1\n 11691: a1 = a4 >> 0x8\n 11694: u8 [a0 + 0x11] = a1\n 11697: a1 = t2 >> 0x38\n 11700: u8 [a0 + 0x1f] = a1\n 11703: a1 = t2 >> 0x30\n 11706: u8 [a0 + 0x1e] = a1\n 11709: a1 = t2 >> 0x28\n 11712: u8 [a0 + 0x1d] = a1\n 11715: a1 = t2 >> 0x20\n 11718: u8 [a0 + 0x1c] = a1\n 11721: a1 = t2 >> 0x18\n 11724: u8 [a0 + 0x1b] = a1\n 11727: a1 = t2 >> 0x10\n 11730: u8 [a0 + 0x1a] = a1\n 11733: a1 = t2 >> 0x8\n 11736: u8 [a0 + 0x19] = a1\n 11739: a0 = u64 [sp + 0x58]\n 11742: t0 = a0 + 0x40\n 11745: a0 = t0 <u a0\n 11748: a1 = u64 [sp + 0x68]\n 11751: t1 = a1 + a0\n 11754: a1 = t1 <u a1\n 11757: a1 = a0 if a0 == 0\n 11760: a0 = a3 | a4\n 11763: a2 = s1 | t2\n 11766: a0 = a0 | a2\n 11769: a5 = u64 [sp + 0x70]\n 11772: a2 = a5 + a1\n 11775: a1 = a2 <u a5\n 11778: a5 = u64 [sp + 0x78]\n 11781: a1 = a1 + a5\n 11784: u64 [sp + 0x78] = a1\n 11787: jump @191 if a0 == 0\n      : @185 (gas: 162)\n 11791: u64 [sp + 0x68] = a2\n 11794: u64 [sp + 0x70] = t1\n 11797: u64 [sp + 0x58] = t0\n 11800: a5 = reverse a3\n 11802: a3 = reverse s1\n 11804: u64 [sp + 0x20] = a3\n 11807: a2 = reverse a4\n 11809: a0 = reverse t2\n 11811: t0 = 0x1\n 11814: a1 = a0\n 11816: a1 = t0 if a2 == 0\n 11819: a4 = maxu(a0, t0)\n 11822: a4 = a1 if a2 != 0\n 11825: a1 = a3 >u 0\n 11827: s1 = a5\n 11829: a5 = a5 >u 0\n 11831: a5 = a1 if s1 == 0\n 11834: u64 [sp + 0x30] = s1\n 11837: a0 = t0 if a5 == 0\n 11840: s1 = s1 | a3\n 11843: a0 = a4 if s1 == 0\n 11846: a1 = a2\n 11848: a1 = 0 if a5 == 0\n 11850: a1 = a2 if s1 == 0\n 11853: t2 = a1\n 11855: a1 = 0xffffffe0\n 11865: a3 = u64 [sp + 0x50]\n 11868: t0 = a1 <u a3\n 11871: a5 = a3\n 11873: a4 = u64 [sp + 0x40]\n 11876: a3 = a4 >u 0\n 11878: a3 = t0 if a4 == 0\n 11881: a2 = a4\n 11883: s1 = u64 [sp + 0x48]\n 11886: a4 = -s1\n 11888: ra = a4 - a3\n 11891: t1 = ra >u 0\n 11893: a3 = a4 <u a3\n 11896: a4 = s1 >u 0\n 11898: s1 = u64 [sp + 0x60]\n 11901: a4 = a4 + s1\n 11904: s1 = -a4\n 11906: s1 = s1 - a3\n 11909: a4 = s1 >u 0\n 11911: a4 = t1 if s1 == 0\n 11914: a5 = a1 - a5\n 11917: a3 = -a2\n 11919: a2 = a3 - t0\n 11922: u64 [sp + 0x38] = a1\n 11925: t1 = a1 <u a5\n 11928: a3 = a2 >u 0\n 11930: a3 = t1 if a2 == 0\n 11933: a1 = ra | s1\n 11936: a3 = a4 if a1 != 0\n 11939: a5 = 0 if a3 != 0\n 11941: a4 = a5 + 0x1f\n 11944: a1 = a4 <u a5\n 11947: a2 = 0 if a3 != 0\n 11949: a5 = a2 + a1\n 11952: t1 = a5 <u a2\n 11955: t1 = a1 if a1 == 0\n 11958: ra = 0 if a3 != 0\n 11960: a1 = ra + t1\n 11963: u64 [sp] = a1\n 11965: a1 = a1 << 0x3b\n 11968: a2 = a5 >> 0x5\n 11971: a2 = a2 | a1\n 11974: a5 = a5 << 0x3b\n 11977: a4 = a4 >> 0x5\n 11980: a5 = a5 | a4\n 11983: u64 [sp + 0x28] = a5\n 11986: a1 = a0 <u 0x1\n 11989: t0 = t2\n 11991: t2 = t2 - a1\n 11994: t1 = a0 + 0xffffffffffffffff\n 11997: a1 = a2\n 11999: u64 [sp + 0x18] = a2\n 12002: a2 = t2 ^ a2\n 12005: a1 = t2 <u a1\n 12008: a4 = t1 <u a5\n 12011: a4 = a1 if a2 != 0\n 12014: u64 [sp + 0x8] = a4\n 12017: a4 = u64 [sp + 0x20]\n 12020: a1 = a4\n 12022: a2 = u64 [sp + 0x30]\n 12025: a1 = 0 if a2 == 0\n 12027: a1 = a4 if a2 == 0\n 12030: a0 = a0 | t0\n 12033: a0 = a0 <u 0x1\n 12036: a4 = a1 <u a0\n 12039: t0 = a2 - a4\n 12042: a5 = a1 - a0\n 12045: s1 = 0 if a3 != 0\n 12047: a3 = u64 [sp]\n 12049: a0 = a3 <u ra\n 12052: ra = u64 [sp + 0x60]\n 12055: a0 = a0 + s1\n 12058: a3 = a3 >> 0x5\n 12061: a4 = a0 << 0x3b\n 12064: a3 = a3 | a4\n 12067: a2 = a0 >> 0x5\n 12070: a1 = a5 <u a3\n 12073: s1 = t0 ^ a2\n 12076: a4 = t0 <u a2\n 12079: a0 = t0\n 12081: a4 = a1 if s1 == 0\n 12084: a1 = a5 ^ a3\n 12087: a1 = a1 | s1\n 12090: t0 = u64 [sp + 0x40]\n 12093: s1 = u64 [sp + 0x8]\n 12096: a4 = s1 if a1 == 0\n 12099: a0 = a2 if a4 == 0\n 12102: u64 [sp + 0x30] = a0\n 12105: a5 = a3 if a4 == 0\n 12108: a0 = u64 [sp + 0x18]\n 12111: t2 = a0 if a4 == 0\n 12114: a0 = u64 [sp + 0x28]\n 12117: t1 = a0 if a4 == 0\n 12120: a0 = t1 >> 0x3b\n 12123: a1 = t2 << 0x5\n 12126: a0 = a0 | a1\n 12129: t1 = t1 << 0x5\n 12132: a0 = a0 + t0\n 12135: s1 = u64 [sp + 0x50]\n 12138: t1 = t1 + s1\n 12141: u64 [sp + 0x28] = t1\n 12144: a1 = t1 <u s1\n 12147: t1 = a0 + a1\n 12150: a3 = t1 ^ t0\n 12153: a4 = t1 <u t0\n 12156: a4 = a1 if a3 == 0\n 12159: a1 = t2 >> 0x3b\n 12162: a3 = a5 << 0x5\n 12165: a1 = a1 | a3\n 12168: a2 = a5 >> 0x3b\n 12171: t2 = u64 [sp + 0x30]\n 12174: t2 = t2 << 0x5\n 12177: a2 = t2 | a2\n 12180: a2 = a2 + ra\n 12183: a0 = u64 [sp + 0x48]\n 12186: a1 = a1 + a0\n 12189: a3 = a1 <u a0\n 12192: a2 = a2 + a3\n 12195: a4 = a4 + a1\n 12198: a1 = a4 <u a1\n 12201: a1 = a1 + a2\n 12204: a3 = u64 [sp + 0x28]\n 12207: a2 = a3 + 0x20\n 12210: u64 [sp + 0x30] = a2\n 12213: a2 = a2 <u a3\n 12216: a5 = a0\n 12218: a3 = s1\n 12220: a0 = t1 + a2\n 12223: u64 [sp + 0x28] = a0\n 12226: a0 = a0 <u t1\n 12229: a0 = a2 if a2 == 0\n 12232: a0 = a0 + a4\n 12235: u64 [sp + 0x20] = a0\n 12238: a0 = a0 <u a4\n 12241: a0 = a0 + a1\n 12244: u64 [sp + 0x18] = a0\n 12247: fallthrough\n      : @186 (gas: 6)\n 12248: a0 = a5 | ra\n 12251: a1 = u64 [sp + 0x38]\n 12254: a1 = a3 <u a1\n 12257: a1 = 0 if t0 != 0\n 12259: a1 = 0 if a0 != 0\n 12261: jump @193 if a1 == 0\n      : @187 (gas: 15)\n 12265: a0 = a3 + 0x20\n 12268: u64 [sp + 0x48] = a0\n 12271: a0 = a0 <u a3\n 12274: a1 = t0 + a0\n 12277: u64 [sp + 0x50] = a1\n 12280: s1 = a1 <u t0\n 12283: s1 = a0 if a0 == 0\n 12286: s1 = s1 + a5\n 12289: u64 [sp + 0x40] = s1\n 12292: a0 = s1 <u a5\n 12295: ra = ra + a0\n 12298: u64 [sp + 0x60] = ra\n 12301: i32 a0 = a3 + 0x20\n 12304: a1 = 0x20\n 12307: ra = 162, jump @0\n      : @188 [@dyn 81] (gas: 107)\n 12313: a1 = u8 [a0 + 0x1]\n 12316: a2 = u8 [a0]\n 12318: a3 = u8 [a0 + 0x2]\n 12321: a4 = u8 [a0 + 0x3]\n 12324: a1 = a1 << 0x8\n 12327: a1 = a1 | a2\n 12330: a3 = a3 << 0x10\n 12333: a4 = a4 << 0x18\n 12336: a3 = a3 | a4\n 12339: a1 = a1 | a3\n 12342: a2 = u8 [a0 + 0x5]\n 12345: a3 = u8 [a0 + 0x4]\n 12348: a4 = u8 [a0 + 0x6]\n 12351: a5 = u8 [a0 + 0x7]\n 12354: a2 = a2 << 0x8\n 12357: a2 = a2 | a3\n 12360: a4 = a4 << 0x10\n 12363: a5 = a5 << 0x18\n 12366: a4 = a4 | a5\n 12369: a2 = a2 | a4\n 12372: a2 = a2 << 0x20\n 12375: t0 = a2 | a1\n 12378: a2 = u8 [a0 + 0x9]\n 12381: a3 = u8 [a0 + 0x8]\n 12384: a4 = u8 [a0 + 0xa]\n 12387: a5 = u8 [a0 + 0xb]\n 12390: a2 = a2 << 0x8\n 12393: a2 = a2 | a3\n 12396: a4 = a4 << 0x10\n 12399: a5 = a5 << 0x18\n 12402: a4 = a4 | a5\n 12405: a2 = a2 | a4\n 12408: a3 = u8 [a0 + 0xd]\n 12411: a4 = u8 [a0 + 0xc]\n 12414: a5 = u8 [a0 + 0xe]\n 12417: a1 = u8 [a0 + 0xf]\n 12420: a3 = a3 << 0x8\n 12423: a3 = a3 | a4\n 12426: a5 = a5 << 0x10\n 12429: a1 = a1 << 0x18\n 12432: a1 = a1 | a5\n 12435: a1 = a1 | a3\n 12438: a1 = a1 << 0x20\n 12441: a2 = a2 | a1\n 12444: a1 = u8 [a0 + 0x11]\n 12447: a3 = u8 [a0 + 0x10]\n 12450: a4 = u8 [a0 + 0x12]\n 12453: a5 = u8 [a0 + 0x13]\n 12456: a1 = a1 << 0x8\n 12459: a1 = a1 | a3\n 12462: a4 = a4 << 0x10\n 12465: a5 = a5 << 0x18\n 12468: a4 = a4 | a5\n 12471: a1 = a1 | a4\n 12474: a3 = u8 [a0 + 0x15]\n 12477: a4 = u8 [a0 + 0x14]\n 12480: a5 = u8 [a0 + 0x16]\n 12483: s1 = u8 [a0 + 0x17]\n 12486: a3 = a3 << 0x8\n 12489: a3 = a3 | a4\n 12492: a5 = a5 << 0x10\n 12495: s1 = s1 << 0x18\n 12498: a5 = a5 | s1\n 12501: a3 = a3 | a5\n 12504: a3 = a3 << 0x20\n 12507: a3 = a3 | a1\n 12510: a1 = u8 [a0 + 0x19]\n 12513: a4 = u8 [a0 + 0x18]\n 12516: a5 = u8 [a0 + 0x1a]\n 12519: s1 = u8 [a0 + 0x1b]\n 12522: a1 = a1 << 0x8\n 12525: a1 = a1 | a4\n 12528: a5 = a5 << 0x10\n 12531: s1 = s1 << 0x18\n 12534: a5 = a5 | s1\n 12537: a1 = a1 | a5\n 12540: a4 = u8 [a0 + 0x1d]\n 12543: a5 = u8 [a0 + 0x1c]\n 12546: s1 = u8 [a0 + 0x1e]\n 12549: a0 = u8 [a0 + 0x1f]\n 12552: a4 = a4 << 0x8\n 12555: a4 = a4 | a5\n 12558: s1 = s1 << 0x10\n 12561: a0 = a0 << 0x18\n 12564: a0 = a0 | s1\n 12567: a0 = a0 | a4\n 12570: a0 = a0 << 0x20\n 12573: a0 = a0 | a1\n 12576: a4 = reverse a0\n 12578: a0 = reverse a3\n 12580: a1 = reverse a2\n 12582: a2 = reverse t0\n 12584: a3 = u64 [sp + 0x78]\n 12587: u64 [sp + 0x98] = a3\n 12591: a3 = u64 [sp + 0x68]\n 12594: u64 [sp + 0x90] = a3\n 12598: a3 = u64 [sp + 0x70]\n 12601: u64 [sp + 0x88] = a3\n 12605: s1 = u64 [sp + 0x58]\n 12608: u64 [sp + 0x80] = s1\n 12612: u64 [sp + 0xb8] = a2\n 12616: u64 [sp + 0xb0] = a1\n 12620: u64 [sp + 0xa8] = a0\n 12624: a0 = sp + 0xa0\n 12628: a1 = sp + 0x80\n 12632: u64 [sp + 0xa0] = a4\n 12636: ra = 164, jump @160\n      : @189 [@dyn 82] (gas: 33)\n 12642: ra = u64 [sp + 0x60]\n 12645: t2 = s1 + 0x80\n 12649: a2 = t2 <u s1\n 12652: a0 = u64 [sp + 0x70]\n 12655: a1 = a0 + a2\n 12658: a3 = a1 <u a0\n 12661: a3 = a2 if a2 == 0\n 12664: a0 = u64 [sp + 0x68]\n 12667: a2 = a0 + a3\n 12670: t0 = a2 <u a0\n 12673: a4 = u64 [sp + 0x20]\n 12676: a0 = u64 [sp + 0x40]\n 12679: a4 = a4 ^ a0\n 12682: a5 = u64 [sp + 0x30]\n 12685: a3 = u64 [sp + 0x48]\n 12688: a5 = a5 ^ a3\n 12691: t1 = a5 | a4\n 12694: a5 = u64 [sp + 0x18]\n 12697: a5 = ra ^ a5\n 12700: s1 = u64 [sp + 0x28]\n 12703: a4 = u64 [sp + 0x50]\n 12706: s1 = s1 ^ a4\n 12709: a5 = a5 | s1\n 12712: s1 = t1 | a5\n 12715: a5 = u64 [sp + 0x78]\n 12718: a5 = a5 + t0\n 12721: u64 [sp + 0x78] = a5\n 12724: t0 = a4\n 12726: a5 = a0\n 12728: u64 [sp + 0x58] = t2\n 12731: u64 [sp + 0x70] = a1\n 12734: u64 [sp + 0x68] = a2\n 12737: jump @186 if s1 != 0\n      : @190 (gas: 1)\n 12741: jump @192\n      : @191 (gas: 3)\n 12743: t2 = t0\n 12745: a1 = t1\n 12747: fallthrough\n      : @192 (gas: 12)\n 12748: a3 = u64 [sp + 0x10]\n 12751: u64 [a3] = t2\n 12753: u64 [a3 + 0x8] = a1\n 12756: u64 [a3 + 0x10] = a2\n 12759: a0 = u64 [sp + 0x78]\n 12762: u64 [a3 + 0x18] = a0\n 12765: sp = s0 + 0xffffffffffffff20\n 12769: ra = u64 [sp + 0xd8]\n 12773: s0 = u64 [sp + 0xd0]\n 12777: s1 = u64 [sp + 0xc8]\n 12781: sp = sp + 0xe0\n 12785: ret\n      : @193 (gas: 1)\n 12787: trap\n      : @194 (gas: 8)\n 12788: a0 = u64 [sp + 0xf0]\n 12792: a1 = u64 [sp + 0xf8]\n 12796: a2 = u64 [sp + 0xe8]\n 12800: a3 = u64 [sp + 0xe0]\n 12804: a1 = a1 | a2\n 12807: a0 = a0 | a3\n 12810: a0 = a0 | a1\n 12813: jump @202 if a0 != 0\n      : @195 (gas: 2)\n 12817: a0 = i32 [0x20004]\n 12822: jump @202 if a0 <=u 3\n      : @196 (gas: 52)\n 12827: u64 [sp + 184] = 0\n 12831: u64 [sp + 176] = 0\n 12835: u64 [sp + 168] = 0\n 12839: a0 = sp + 0xc0\n 12843: a1 = sp + 0xa0\n 12847: u64 [sp + 160] = 0\n 12851: ra = 0xa6\n 12855: sp = sp + 0xfffffffffffffe40\n 12859: u64 [sp + 0x1b8] = ra\n 12863: u64 [sp + 0x1b0] = s0\n 12867: u64 [sp + 0x1a8] = s1\n 12871: s0 = sp + 0x1c0\n 12875: sp = sp & 0xffffffffffffffe0\n 12878: u64 [sp + 0x18] = a0\n 12881: a3 = u64 [a1 + 0x18]\n 12884: u64 [sp + 0x88] = a3\n 12888: a2 = u64 [a1 + 0x10]\n 12891: u64 [sp + 0x90] = a2\n 12895: a0 = u64 [a1 + 0x8]\n 12898: u64 [sp + 0x98] = a0\n 12902: s1 = u64 [a1]\n 12904: u64 [sp + 0x158] = a3\n 12908: u64 [sp + 0x150] = a2\n 12912: u64 [sp + 0x148] = a0\n 12916: u64 [sp + 0x140] = s1\n 12920: u64 [sp + 408] = 0\n 12924: u64 [sp + 400] = 0\n 12928: u64 [sp + 392] = 0\n 12932: u64 [sp + 384] = 0\n 12936: u32 [sp + 352] = 0x20\n 12941: i32 a1 = sp + 0x140\n 12945: i32 a3 = sp + 0x180\n 12949: i32 a4 = sp + 0x160\n 12953: a2 = 0xffffffffffffffff\n 12956: a0 = 0\n 12958: ecalli 7 // 'get_storage'\n 12960: a0 = u64 [sp + 0x198]\n 12964: u64 [sp + 0xb8] = a0\n 12968: a3 = u64 [sp + 0x190]\n 12972: u64 [sp + 0xa0] = a3\n 12976: a1 = u64 [sp + 0x188]\n 12980: u64 [sp + 0xb0] = a1\n 12984: a2 = u64 [sp + 0x180]\n 12988: u64 [sp + 0xa8] = a2\n 12992: u64 [sp + 0x118] = a0\n 12996: u64 [sp + 0x110] = a3\n 13000: u64 [sp + 0x108] = a1\n 13004: a0 = sp + 0x120\n 13008: a1 = sp + 0x100\n 13012: u64 [sp + 0x100] = a2\n 13016: ra = 0x190\n 13020: jump @421\n      : @197 [@dyn 83] (gas: 11)\n 13023: a0 = u64 [sp + 0xc0]\n 13027: u64 [sp + 0x38] = a0\n 13030: a0 = u64 [sp + 0xc8]\n 13034: u64 [sp + 0x30] = a0\n 13037: a0 = u64 [sp + 0xd0]\n 13041: u64 [sp + 0x28] = a0\n 13044: a0 = u64 [sp + 0xd8]\n 13048: u64 [sp + 0x20] = a0\n 13051: a0 = 0x40\n 13054: a1 = 0x20\n 13057: ra = 168, jump @0\n      : @198 [@dyn 84] (gas: 111)\n 13063: a1 = u8 [a0 + 0x1]\n 13066: a2 = u8 [a0]\n 13068: a3 = u8 [a0 + 0x2]\n 13071: a4 = u8 [a0 + 0x3]\n 13074: a1 = a1 << 0x8\n 13077: a1 = a1 | a2\n 13080: a3 = a3 << 0x10\n 13083: a4 = a4 << 0x18\n 13086: a3 = a3 | a4\n 13089: a1 = a1 | a3\n 13092: a2 = u8 [a0 + 0x5]\n 13095: a3 = u8 [a0 + 0x4]\n 13098: a4 = u8 [a0 + 0x6]\n 13101: a5 = u8 [a0 + 0x7]\n 13104: a2 = a2 << 0x8\n 13107: a2 = a2 | a3\n 13110: a4 = a4 << 0x10\n 13113: a5 = a5 << 0x18\n 13116: a4 = a4 | a5\n 13119: a2 = a2 | a4\n 13122: a2 = a2 << 0x20\n 13125: t0 = a2 | a1\n 13128: a2 = u8 [a0 + 0x9]\n 13131: a3 = u8 [a0 + 0x8]\n 13134: a4 = u8 [a0 + 0xa]\n 13137: a5 = u8 [a0 + 0xb]\n 13140: a2 = a2 << 0x8\n 13143: a2 = a2 | a3\n 13146: a4 = a4 << 0x10\n 13149: a5 = a5 << 0x18\n 13152: a4 = a4 | a5\n 13155: a2 = a2 | a4\n 13158: a3 = u8 [a0 + 0xd]\n 13161: a4 = u8 [a0 + 0xc]\n 13164: a5 = u8 [a0 + 0xe]\n 13167: s1 = u8 [a0 + 0xf]\n 13170: a3 = a3 << 0x8\n 13173: a3 = a3 | a4\n 13176: a5 = a5 << 0x10\n 13179: s1 = s1 << 0x18\n 13182: a5 = a5 | s1\n 13185: a3 = a3 | a5\n 13188: a3 = a3 << 0x20\n 13191: a2 = a2 | a3\n 13194: a3 = u8 [a0 + 0x11]\n 13197: a4 = u8 [a0 + 0x10]\n 13200: a5 = u8 [a0 + 0x12]\n 13203: s1 = u8 [a0 + 0x13]\n 13206: a3 = a3 << 0x8\n 13209: a3 = a3 | a4\n 13212: a5 = a5 << 0x10\n 13215: s1 = s1 << 0x18\n 13218: a5 = a5 | s1\n 13221: a3 = a3 | a5\n 13224: a4 = u8 [a0 + 0x15]\n 13227: a5 = u8 [a0 + 0x14]\n 13230: s1 = u8 [a0 + 0x16]\n 13233: a1 = u8 [a0 + 0x17]\n 13236: a4 = a4 << 0x8\n 13239: a4 = a4 | a5\n 13242: s1 = s1 << 0x10\n 13245: a1 = a1 << 0x18\n 13248: a1 = a1 | s1\n 13251: a1 = a1 | a4\n 13254: a1 = a1 << 0x20\n 13257: a3 = a3 | a1\n 13260: a1 = u8 [a0 + 0x19]\n 13263: a4 = u8 [a0 + 0x18]\n 13266: a5 = u8 [a0 + 0x1a]\n 13269: s1 = u8 [a0 + 0x1b]\n 13272: a1 = a1 << 0x8\n 13275: a1 = a1 | a4\n 13278: a5 = a5 << 0x10\n 13281: s1 = s1 << 0x18\n 13284: a5 = a5 | s1\n 13287: a1 = a1 | a5\n 13290: a4 = u8 [a0 + 0x1d]\n 13293: a5 = u8 [a0 + 0x1c]\n 13296: s1 = u8 [a0 + 0x1e]\n 13299: a0 = u8 [a0 + 0x1f]\n 13302: a4 = a4 << 0x8\n 13305: a4 = a4 | a5\n 13308: s1 = s1 << 0x10\n 13311: a0 = a0 << 0x18\n 13314: a0 = a0 | s1\n 13317: a0 = a0 | a4\n 13320: a0 = a0 << 0x20\n 13323: a0 = a0 | a1\n 13326: a4 = reverse a0\n 13328: u64 [sp + 0x8] = a4\n 13331: a3 = reverse a3\n 13333: u64 [sp + 0x10] = a3\n 13336: a1 = reverse a2\n 13338: u64 [sp + 0x18] = a1\n 13341: s1 = reverse t0\n 13343: a0 = u64 [sp + 0x20]\n 13346: u64 [sp + 0x58] = a0\n 13349: a0 = u64 [sp + 0x28]\n 13352: u64 [sp + 0x50] = a0\n 13355: a0 = u64 [sp + 0x30]\n 13358: u64 [sp + 0x48] = a0\n 13361: a0 = u64 [sp + 0x38]\n 13364: u64 [sp + 0x40] = a0\n 13367: u64 [sp + 0x78] = s1\n 13370: u64 [sp + 0x70] = a1\n 13373: u64 [sp + 0x68] = a3\n 13376: a0 = sp + 0x80\n 13380: a1 = sp + 0x60\n 13383: a2 = sp + 0x40\n 13386: u64 [sp + 0x60] = a4\n 13389: ra = 170, jump @178\n      : @199 [@dyn 85] (gas: 12)\n 13395: a4 = u64 [sp + 0x10]\n 13398: a2 = u64 [sp + 0x8]\n 13401: u64 [sp + 0x38] = s1\n 13404: a0 = a4 | s1\n 13407: s1 = u64 [sp + 0x18]\n 13410: a1 = a2 | s1\n 13413: a1 = a1 | a0\n 13416: a1 = a1 >> 0x20\n 13419: a0 = a0 | s1\n 13422: a0 = a0 << 0x20\n 13425: a0 = a0 | a1\n 13428: jump @201 if a0 != 0\n      : @200 (gas: 29)\n 13431: a0 = u64 [sp + 0x88]\n 13435: a1 = u64 [sp + 0x98]\n 13439: u64 [sp + 0x30] = a1\n 13442: t1 = u64 [sp + 0x80]\n 13446: a1 = u64 [sp + 0x90]\n 13450: t2 = a0 ^ a4\n 13453: a5 = a0 <u a4\n 13456: ra = t1 <u a2\n 13459: a5 = ra if t2 == 0\n 13462: a3 = a1 - s1\n 13465: t2 = a3 - a5\n 13468: t0 = a3 <u a5\n 13471: a3 = a1 <u s1\n 13474: a1 = u64 [sp + 0x38]\n 13477: a5 = u64 [sp + 0x30]\n 13480: a5 = a5 - a1\n 13483: a5 = a5 - a3\n 13486: a5 = a5 - t0\n 13489: a0 = a0 - a4\n 13492: a0 = a0 - ra\n 13495: s1 = t1 - a2\n 13498: a0 = a0 | a5\n 13501: a1 = s1 | t2\n 13504: a1 = a1 | a0\n 13507: a0 = a0 | t2\n 13510: a1 = a1 >> 0x20\n 13513: a0 = a0 << 0x20\n 13516: a0 = a0 | a1\n 13519: jump @204 if a0 == 0\n      : @201 (gas: 1)\n 13522: trap\n      : @202 (gas: 3)\n 13523: a0 = 0\n 13525: a1 = 0\n 13527: ra = 172, jump @0\n      : @203 [@dyn 86] (gas: 5)\n 13533: i32 a1 = a0 + 0\n 13535: a0 = 0x1\n 13538: a2 = 0\n 13540: ecalli 12 // 'seal_return'\n 13542: fallthrough\n      : @204 (gas: 4)\n 13543: i32 a0 = a2 + 0\n 13545: i32 s1 = s1 + 0\n 13547: a1 = s1\n 13549: ra = 174, jump @0\n      : @205 [@dyn 87] (gas: 6)\n 13555: i32 a1 = a0 + 0\n 13557: a0 = 0\n 13559: a2 = s1\n 13561: ra = 0xb0\n 13565: ecalli 12 // 'seal_return'\n 13567: fallthrough\n      : @206 [@dyn 88] (gas: 12)\n 13568: sp = sp + 0xffffffffffffff80\n 13571: u64 [sp + 0x78] = ra\n 13574: u64 [sp + 0x70] = s0\n 13577: s0 = sp + 0x80\n 13581: sp = sp & 0xffffffffffffffe0\n 13584: u64 [sp + 56] = 0\n 13587: u64 [sp + 48] = 0\n 13590: u64 [sp + 40] = 0\n 13593: u64 [sp + 32] = 0\n 13596: i32 a0 = sp + 0x20\n 13599: ecalli 15 // 'value_transferred'\n 13601: fallthrough\n      : @207 (gas: 8)\n 13602: a0 = u64 [sp + 0x30]\n 13605: a1 = u64 [sp + 0x38]\n 13608: a2 = u64 [sp + 0x28]\n 13611: a3 = u64 [sp + 0x20]\n 13614: a1 = a1 | a2\n 13617: a0 = a0 | a3\n 13620: a0 = a0 | a1\n 13623: jump @213 if a0 != 0\n      : @208 (gas: 2)\n 13627: a0 = i32 [0x20004]\n 13632: jump @213 if a0 <=u 35\n      : @209 (gas: 42)\n 13637: i32 a0 = sp + 0x40\n 13640: a1 = 0x4\n 13643: ecalli 3 // 'call_data_load'\n 13645: a1 = u64 [sp + 0x40]\n 13648: a0 = u64 [sp + 0x48]\n 13651: a2 = u64 [sp + 0x50]\n 13654: a3 = u64 [sp + 0x58]\n 13657: u64 [sp + 0x18] = a3\n 13660: u64 [sp + 0x10] = a2\n 13663: u64 [sp + 0x8] = a0\n 13666: a0 = sp\n 13668: u64 [sp] = a1\n 13670: ra = 0xb2\n 13674: sp = sp + 0xfffffffffffffaa0\n 13678: u64 [sp + 0x558] = ra\n 13682: u64 [sp + 0x550] = s0\n 13686: u64 [sp + 0x548] = s1\n 13690: s0 = sp + 0x560\n 13694: sp = sp & 0xffffffffffffffe0\n 13697: a1 = u64 [a0]\n 13699: u64 [sp + 0xd0] = a1\n 13703: a1 = u64 [a0 + 0x8]\n 13706: u64 [sp + 0xc8] = a1\n 13710: a1 = u64 [a0 + 0x10]\n 13713: u64 [sp + 0xd8] = a1\n 13717: s1 = u64 [a0 + 0x18]\n 13720: u64 [sp + 1304] = 0\n 13724: u64 [sp + 1296] = 0\n 13728: u64 [sp + 1288] = 0\n 13732: u64 [sp + 1280] = 0\n 13736: u64 [sp + 1336] = 0\n 13740: u64 [sp + 1328] = 0\n 13744: u64 [sp + 1320] = 0\n 13748: u64 [sp + 1312] = 0\n 13752: u32 [sp + 1248] = 0x20\n 13757: i32 a1 = sp + 0x500\n 13761: i32 a3 = sp + 0x520\n 13765: i32 a4 = sp + 0x4e0\n 13769: a2 = 0xffffffffffffffff\n 13772: a0 = 0\n 13774: ecalli 7 // 'get_storage'\n 13776: jump @466\n      : @210 [@dyn 89] (gas: 3)\n 13779: a0 = 0x40\n 13782: a1 = 0x20\n 13785: ra = 180, jump @0\n      : @211 [@dyn 90] (gas: 100)\n 13791: a1 = u8 [a0 + 0x11]\n 13794: a2 = u8 [a0 + 0x10]\n 13797: a3 = u8 [a0 + 0x12]\n 13800: a4 = u8 [a0 + 0x13]\n 13803: a1 = a1 << 0x8\n 13806: a1 = a1 | a2\n 13809: a3 = a3 << 0x10\n 13812: a4 = a4 << 0x18\n 13815: a3 = a3 | a4\n 13818: a1 = a1 | a3\n 13821: a2 = u8 [a0 + 0x15]\n 13824: a3 = u8 [a0 + 0x14]\n 13827: a4 = u8 [a0 + 0x16]\n 13830: a5 = u8 [a0 + 0x17]\n 13833: a2 = a2 << 0x8\n 13836: a2 = a2 | a3\n 13839: a4 = a4 << 0x10\n 13842: a5 = a5 << 0x18\n 13845: a4 = a4 | a5\n 13848: a2 = a2 | a4\n 13851: a2 = a2 << 0x20\n 13854: t0 = a2 | a1\n 13857: a2 = u8 [a0 + 0x1]\n 13860: a3 = u8 [a0]\n 13862: a4 = u8 [a0 + 0x2]\n 13865: a5 = u8 [a0 + 0x3]\n 13868: a2 = a2 << 0x8\n 13871: a2 = a2 | a3\n 13874: a4 = a4 << 0x10\n 13877: a5 = a5 << 0x18\n 13880: a4 = a4 | a5\n 13883: a2 = a2 | a4\n 13886: a3 = u8 [a0 + 0x5]\n 13889: a4 = u8 [a0 + 0x4]\n 13892: a5 = u8 [a0 + 0x6]\n 13895: a1 = u8 [a0 + 0x7]\n 13898: a3 = a3 << 0x8\n 13901: a3 = a3 | a4\n 13904: a5 = a5 << 0x10\n 13907: a1 = a1 << 0x18\n 13910: a1 = a1 | a5\n 13913: a1 = a1 | a3\n 13916: a1 = a1 << 0x20\n 13919: t1 = a1 | a2\n 13922: a1 = u8 [a0 + 0x19]\n 13925: a3 = u8 [a0 + 0x18]\n 13928: a4 = u8 [a0 + 0x1a]\n 13931: a5 = u8 [a0 + 0x1b]\n 13934: a1 = a1 << 0x8\n 13937: a1 = a1 | a3\n 13940: a4 = a4 << 0x10\n 13943: a5 = a5 << 0x18\n 13946: a4 = a4 | a5\n 13949: a1 = a1 | a4\n 13952: a3 = u8 [a0 + 0x1d]\n 13955: a4 = u8 [a0 + 0x1c]\n 13958: a5 = u8 [a0 + 0x1e]\n 13961: a2 = u8 [a0 + 0x1f]\n 13964: a3 = a3 << 0x8\n 13967: a3 = a3 | a4\n 13970: a5 = a5 << 0x10\n 13973: a2 = a2 << 0x18\n 13976: a2 = a2 | a5\n 13979: a2 = a2 | a3\n 13982: a2 = a2 << 0x20\n 13985: a3 = a2 | a1\n 13988: a1 = u8 [a0 + 0x9]\n 13991: a2 = u8 [a0 + 0x8]\n 13994: a4 = u8 [a0 + 0xa]\n 13997: a5 = u8 [a0 + 0xb]\n 14000: a1 = a1 << 0x8\n 14003: a1 = a1 | a2\n 14006: a4 = a4 << 0x10\n 14009: a5 = a5 << 0x18\n 14012: a4 = a4 | a5\n 14015: a1 = a1 | a4\n 14018: a2 = u8 [a0 + 0xd]\n 14021: a4 = u8 [a0 + 0xc]\n 14024: a5 = u8 [a0 + 0xe]\n 14027: a0 = u8 [a0 + 0xf]\n 14030: a2 = a2 << 0x8\n 14033: a2 = a2 | a4\n 14036: a5 = a5 << 0x10\n 14039: a0 = a0 << 0x18\n 14042: a0 = a0 | a5\n 14045: a0 = a0 | a2\n 14048: a0 = a0 << 0x20\n 14051: a0 = a0 | a1\n 14054: a1 = reverse a0\n 14056: a0 = reverse a3\n 14058: a2 = reverse t1\n 14060: a3 = reverse t0\n 14062: a2 = a2 | a3\n 14065: a3 = a0 | a1\n 14068: a3 = a3 | a2\n 14071: a3 = a3 >> 0x20\n 14074: a1 = a1 | a2\n 14077: a1 = a1 << 0x20\n 14080: a1 = a1 | a3\n 14083: jump @215 if a1 == 0\n      : @212 (gas: 1)\n 14086: trap\n      : @213 (gas: 3)\n 14087: a0 = 0\n 14089: a1 = 0\n 14091: ra = 182, jump @0\n      : @214 [@dyn 91] (gas: 7)\n 14097: i32 a1 = a0 + 0\n 14099: a0 = 0x1\n 14102: a2 = 0\n 14104: ecalli 12 // 'seal_return'\n 14106: i32 a0 = a0 + 0\n 14108: ra = 0xb8\n 14112: jump @0\n      : @215 (gas: 2)\n 14115: i32 a0 = a0 + 0\n 14117: ra = 184, jump @0\n      : @216 [@dyn 92] (gas: 6)\n 14123: i32 a1 = a0 + 0\n 14125: a0 = 0\n 14127: a2 = 0\n 14129: ra = 0xba\n 14133: ecalli 12 // 'seal_return'\n 14135: fallthrough\n      : @217 [@dyn 93] (gas: 13)\n 14136: sp = sp + 0xffffffffffffffb0\n 14139: u64 [sp + 0x48] = ra\n 14142: u64 [sp + 0x40] = s0\n 14145: s0 = sp + 0x50\n 14148: sp = sp & 0xfffffffffffffff0\n 14151: u64 [sp + 48] = 0\n 14154: u64 [sp + 40] = 0\n 14157: u64 [sp + 32] = 0\n 14160: a0 = 0x4e487b7100000000\n 14170: a1 = sp + 0x20\n 14173: u64 [sp + 0x38] = a0\n 14176: a0 = 0\n 14178: ra = 188, jump @8\n      : @218 [@dyn 94] (gas: 7)\n 14184: u64 [sp + 24] = 0\n 14187: u64 [sp + 16] = 0\n 14190: u64 [sp + 0] = 0x32\n 14193: a0 = 0x4\n 14196: a1 = sp\n 14198: u64 [sp + 8] = 0\n 14201: ra = 190, jump @8\n      : @219 [@dyn 95] (gas: 3)\n 14207: a1 = 0x24\n 14210: a0 = 0\n 14212: ra = 192, jump @0\n      : @220 [@dyn 96] (gas: 6)\n 14218: i32 a1 = a0 + 0\n 14220: a0 = 0x1\n 14223: a2 = 0x24\n 14226: ra = 0xc2\n 14230: ecalli 12 // 'seal_return'\n 14232: fallthrough\n      : @221 [@dyn 97] (gas: 40)\n 14233: sp = sp + 0xffffffffffffffa0\n 14236: u64 [sp + 0x58] = ra\n 14239: u64 [sp + 0x50] = s0\n 14242: u64 [sp + 0x48] = s1\n 14245: s0 = sp + 0x60\n 14248: sp = sp & 0xffffffffffffffe0\n 14251: s1 = a0\n 14253: a0 = u64 [a1 + 0x18]\n 14256: a2 = u64 [a1 + 0x10]\n 14259: a3 = u64 [a1 + 0x8]\n 14262: a1 = u64 [a1]\n 14264: u64 [sp + 0x18] = a0\n 14267: u64 [sp + 0x10] = a2\n 14270: u64 [sp + 0x8] = a3\n 14273: u64 [sp] = a1\n 14275: u64 [sp + 56] = 0\n 14278: u64 [sp + 48] = 0\n 14281: u64 [sp + 40] = 0\n 14284: u64 [sp + 32] = 0\n 14287: u32 [sp + 64] = 0x20\n 14291: i32 a1 = sp + 0\n 14293: i32 a3 = sp + 0x20\n 14296: i32 a4 = sp + 0x40\n 14299: a2 = 0xffffffffffffffff\n 14302: a0 = 0\n 14304: ecalli 7 // 'get_storage'\n 14306: a0 = u64 [sp + 0x38]\n 14309: a1 = u64 [sp + 0x30]\n 14312: a2 = u64 [sp + 0x28]\n 14315: a3 = u64 [sp + 0x20]\n 14318: u64 [s1 + 0x18] = a0\n 14321: u64 [s1 + 0x10] = a1\n 14324: u64 [s1 + 0x8] = a2\n 14327: u64 [s1] = a3\n 14329: sp = s0 + 0xffffffffffffffa0\n 14332: ra = u64 [sp + 0x58]\n 14335: s0 = u64 [sp + 0x50]\n 14338: s1 = u64 [sp + 0x48]\n 14341: sp = sp + 0x60\n 14344: ret\n      : @222 (gas: 38)\n 14346: sp = sp + 0xfffffffffffffee0\n 14350: u64 [sp + 0x118] = ra\n 14354: u64 [sp + 0x110] = s0\n 14358: u64 [sp + 0x108] = s1\n 14362: s0 = sp + 0x120\n 14366: sp = sp & 0xffffffffffffffe0\n 14369: u64 [sp + 0x40] = a0\n 14372: a0 = u64 [a2]\n 14374: u64 [sp + 0x48] = a0\n 14377: a0 = u64 [a2 + 0x8]\n 14380: u64 [sp + 0x50] = a0\n 14383: a0 = u64 [a2 + 0x10]\n 14386: u64 [sp + 0x58] = a0\n 14389: s1 = u64 [a2 + 0x18]\n 14392: a4 = u64 [a1 + 0x18]\n 14395: a3 = u64 [a1 + 0x10]\n 14398: a2 = u64 [a1 + 0x8]\n 14401: a0 = u64 [a1]\n 14403: u64 [sp + 0x18] = a4\n 14406: u64 [sp + 0xb8] = a4\n 14410: u64 [sp + 0x20] = a3\n 14413: u64 [sp + 0xb0] = a3\n 14417: u64 [sp + 0x28] = a2\n 14420: u64 [sp + 0xa8] = a2\n 14424: u64 [sp + 0x30] = a0\n 14427: u64 [sp + 0xa0] = a0\n 14431: u64 [sp + 248] = 0\n 14435: u64 [sp + 240] = 0\n 14439: u64 [sp + 232] = 0\n 14443: u64 [sp + 224] = 0\n 14447: u32 [sp + 192] = 0x20\n 14452: i32 a1 = sp + 0xa0\n 14456: i32 a3 = sp + 0xe0\n 14460: i32 a4 = sp + 0xc0\n 14464: a2 = 0xffffffffffffffff\n 14467: a0 = 0\n 14469: ecalli 7 // 'get_storage'\n 14471: fallthrough\n      : @223 (gas: 20)\n 14472: a0 = u64 [sp + 0xf8]\n 14476: t0 = u64 [sp + 0xe0]\n 14480: a2 = u64 [sp + 0xf0]\n 14484: a3 = u64 [sp + 0xe8]\n 14488: a4 = a0 ^ s1\n 14491: u64 [sp + 0x38] = s1\n 14494: a1 = s1 <u a0\n 14497: a0 = u64 [sp + 0x58]\n 14500: a5 = a0 <u a2\n 14503: a5 = a1 if a4 != 0\n 14506: a1 = u64 [sp + 0x50]\n 14509: t1 = a3 ^ a1\n 14512: a3 = a1 <u a3\n 14515: a1 = u64 [sp + 0x48]\n 14518: a1 = a1 <u t0\n 14521: a1 = a3 if t1 != 0\n 14524: a0 = a0 ^ a2\n 14527: a0 = a0 | a4\n 14530: a1 = a5 if a0 != 0\n 14533: jump @227 if a1 == 0\n      : @224 (gas: 3)\n 14537: a1 = 0x20\n 14540: a0 = 0\n 14542: ra = 196, jump @0\n      : @225 [@dyn 98] (gas: 71)\n 14548: a1 = u64 [sp + 0x18]\n 14551: a1 = reverse a1\n 14553: a2 = u64 [sp + 0x20]\n 14556: a2 = reverse a2\n 14558: a3 = u64 [sp + 0x28]\n 14561: a3 = reverse a3\n 14563: a4 = u64 [sp + 0x30]\n 14566: a4 = reverse a4\n 14568: a5 = a4 >> 0x38\n 14571: u8 [a0 + 0x1f] = a5\n 14574: a5 = a4 >> 0x30\n 14577: u8 [a0 + 0x1e] = a5\n 14580: a5 = a4 >> 0x28\n 14583: u8 [a0 + 0x1d] = a5\n 14586: a5 = a4 >> 0x20\n 14589: u8 [a0 + 0x1c] = a5\n 14592: a5 = a4 >> 0x18\n 14595: u8 [a0 + 0x1b] = a5\n 14598: a5 = a4 >> 0x10\n 14601: u8 [a0 + 0x1a] = a5\n 14604: a5 = a4 >> 0x8\n 14607: u8 [a0 + 0x19] = a5\n 14610: u8 [a0 + 0x18] = a4\n 14613: u8 [a0 + 0x10] = a3\n 14616: a4 = a3 >> 0x38\n 14619: u8 [a0 + 0x17] = a4\n 14622: a4 = a3 >> 0x30\n 14625: u8 [a0 + 0x16] = a4\n 14628: a4 = a3 >> 0x28\n 14631: u8 [a0 + 0x15] = a4\n 14634: a4 = a3 >> 0x20\n 14637: u8 [a0 + 0x14] = a4\n 14640: a4 = a3 >> 0x18\n 14643: u8 [a0 + 0x13] = a4\n 14646: a4 = a3 >> 0x10\n 14649: u8 [a0 + 0x12] = a4\n 14652: a3 = a3 >> 0x8\n 14655: u8 [a0 + 0x11] = a3\n 14658: u8 [a0 + 0x8] = a2\n 14661: a3 = a2 >> 0x38\n 14664: u8 [a0 + 0xf] = a3\n 14667: a3 = a2 >> 0x30\n 14670: u8 [a0 + 0xe] = a3\n 14673: a3 = a2 >> 0x28\n 14676: u8 [a0 + 0xd] = a3\n 14679: a3 = a2 >> 0x20\n 14682: u8 [a0 + 0xc] = a3\n 14685: a3 = a2 >> 0x18\n 14688: u8 [a0 + 0xb] = a3\n 14691: a3 = a2 >> 0x10\n 14694: u8 [a0 + 0xa] = a3\n 14697: a2 = a2 >> 0x8\n 14700: u8 [a0 + 0x9] = a2\n 14703: u8 [a0] = a1\n 14705: a2 = a1 >> 0x38\n 14708: u8 [a0 + 0x7] = a2\n 14711: a2 = a1 >> 0x30\n 14714: u8 [a0 + 0x6] = a2\n 14717: a2 = a1 >> 0x28\n 14720: u8 [a0 + 0x5] = a2\n 14723: a2 = a1 >> 0x20\n 14726: u8 [a0 + 0x4] = a2\n 14729: a2 = a1 >> 0x18\n 14732: u8 [a0 + 0x3] = a2\n 14735: a2 = a1 >> 0x10\n 14738: u8 [a0 + 0x2] = a2\n 14741: a1 = a1 >> 0x8\n 14744: u8 [a0 + 0x1] = a1\n 14747: a1 = 0x20\n 14750: a0 = 0\n 14752: ra = 198, jump @0\n      : @226 [@dyn 99] (gas: 45)\n 14758: i32 a0 = a0 + 0\n 14760: i32 a2 = sp + 0xe0\n 14764: a1 = 0x20\n 14767: ecalli 8 // 'hash_keccak_256'\n 14769: a0 = u64 [sp + 0xe0]\n 14773: a1 = u64 [sp + 0xe8]\n 14777: a2 = u64 [sp + 0xf8]\n 14781: a3 = u64 [sp + 0xf0]\n 14785: t0 = reverse a0\n 14787: a1 = reverse a1\n 14789: a2 = reverse a2\n 14791: a3 = reverse a3\n 14793: a4 = u64 [sp + 0x50]\n 14796: a4 = a4 + a3\n 14799: a5 = u64 [sp + 0x48]\n 14802: a5 = a5 + a2\n 14805: a2 = a5 <u a2\n 14808: a4 = a4 + a2\n 14811: s1 = a4 ^ a3\n 14814: a3 = a4 <u a3\n 14817: a3 = a2 if s1 == 0\n 14820: a2 = u64 [sp + 0x58]\n 14823: a2 = a2 + a1\n 14826: a3 = a3 + a2\n 14829: s1 = a3 <u a2\n 14832: a0 = u64 [sp + 0x38]\n 14835: a0 = a0 + t0\n 14838: a1 = a2 <u a1\n 14841: a0 = a0 + a1\n 14844: a0 = a0 + s1\n 14847: a1 = u64 [sp + 0x40]\n 14850: u64 [a1 + 56] = 0\n 14853: u64 [a1 + 48] = 0\n 14856: u64 [a1 + 40] = 0\n 14859: u64 [a1 + 32] = 0\n 14862: u64 [a1] = a5\n 14864: u64 [a1 + 0x8] = a4\n 14867: u64 [a1 + 0x10] = a3\n 14870: u64 [a1 + 0x18] = a0\n 14873: sp = s0 + 0xfffffffffffffee0\n 14877: ra = u64 [sp + 0x118]\n 14881: s0 = u64 [sp + 0x110]\n 14885: s1 = u64 [sp + 0x108]\n 14889: sp = sp + 0x120\n 14893: ret\n      : @227 (gas: 8)\n 14895: u64 [sp + 144] = 0\n 14899: u64 [sp + 136] = 0\n 14903: u64 [sp + 128] = 0\n 14907: a0 = 0x4e487b7100000000\n 14917: a1 = sp + 0x80\n 14921: u64 [sp + 0x98] = a0\n 14925: a0 = 0\n 14927: ra = 200, jump @8\n      : @228 [@dyn 100] (gas: 7)\n 14933: u64 [sp + 120] = 0\n 14936: u64 [sp + 112] = 0\n 14939: u64 [sp + 96] = 0x32\n 14943: a0 = 0x4\n 14946: a1 = sp + 0x60\n 14949: u64 [sp + 104] = 0\n 14952: ra = 202, jump @8\n      : @229 [@dyn 101] (gas: 3)\n 14958: a1 = 0x24\n 14961: a0 = 0\n 14963: ra = 204, jump @0\n      : @230 [@dyn 102] (gas: 6)\n 14969: i32 a1 = a0 + 0\n 14971: a0 = 0x1\n 14974: a2 = 0x24\n 14977: ra = 0xce\n 14981: ecalli 12 // 'seal_return'\n 14983: fallthrough\n      : @231 [@dyn 103] (gas: 9)\n 14984: a2 = u64 [a1 + 0x18]\n 14987: a3 = u64 [a1 + 0x10]\n 14990: a4 = u64 [a1 + 0x8]\n 14993: a1 = u64 [a1]\n 14995: u64 [a0 + 0x18] = a2\n 14998: u64 [a0 + 0x10] = a3\n 15001: u64 [a0 + 0x8] = a4\n 15004: u64 [a0] = a1\n 15006: ret\n      : @232 (gas: 20)\n 15008: t2 = s1\n 15010: t1 = u64 [sp + 0x50]\n 15013: t0 = u64 [sp + 0x48]\n 15016: a0 = u64 [sp + 0x118]\n 15020: a1 = u64 [sp + 0x100]\n 15024: s1 = u64 [sp + 0x110]\n 15028: a3 = u64 [sp + 0x108]\n 15032: a4 = a0 ^ t0\n 15035: a0 = t0 <u a0\n 15038: a2 = u64 [sp + 0x58]\n 15041: a5 = a2 <u s1\n 15044: a5 = a0 if a4 != 0\n 15047: a0 = a3 ^ t1\n 15050: a3 = t1 <u a3\n 15053: a1 = t2 <u a1\n 15056: a1 = a3 if a0 != 0\n 15059: a0 = s1 ^ a2\n 15062: a0 = a0 | a4\n 15065: a1 = a5 if a0 != 0\n 15068: jump @235 if a1 == 0\n      : @233 (gas: 12)\n 15072: u64 [sp + 0x60] = t2\n 15075: u64 [sp + 152] = 0\n 15079: u64 [sp + 144] = 0\n 15083: u64 [sp + 136] = 0\n 15087: u64 [sp + 128] = 0\n 15091: u64 [sp + 0x68] = t1\n 15094: u64 [sp + 0x70] = a2\n 15097: a0 = sp + 0xa0\n 15101: a1 = sp + 0x80\n 15105: a2 = sp + 0x60\n 15108: u64 [sp + 0x78] = t0\n 15111: ra = 208, jump @222\n      : @234 [@dyn 104] (gas: 117)\n 15117: a3 = u64 [sp + 0xb8]\n 15121: u64 [sp + 0x40] = a3\n 15124: a2 = u64 [sp + 0xb0]\n 15128: u64 [sp + 0x48] = a2\n 15131: a1 = u64 [sp + 0xa8]\n 15135: u64 [sp + 0x50] = a1\n 15138: a0 = u64 [sp + 0xa0]\n 15142: u64 [sp + 0x58] = a0\n 15145: u64 [sp + 0xf8] = a3\n 15149: u64 [sp + 0xf0] = a2\n 15153: u64 [sp + 0xe8] = a1\n 15157: u64 [sp + 0xe0] = a0\n 15161: u64 [sp + 280] = 0\n 15165: u64 [sp + 272] = 0\n 15169: u64 [sp + 264] = 0\n 15173: u64 [sp + 256] = 0\n 15177: u32 [sp + 288] = 0x20\n 15182: i32 a1 = sp + 0xe0\n 15186: i32 a3 = sp + 0x100\n 15190: i32 a4 = sp + 0x120\n 15194: a2 = 0xffffffffffffffff\n 15197: a0 = 0\n 15199: ecalli 7 // 'get_storage'\n 15201: a0 = u64 [sp + 0x100]\n 15205: u64 [sp + 0x38] = a0\n 15208: a0 = u64 [sp + 0x108]\n 15212: u64 [sp + 0x30] = a0\n 15215: a0 = u32 [sp + 0x110]\n 15219: u64 [sp + 0x28] = a0\n 15222: a0 = u64 [sp + 0x40]\n 15225: u64 [sp + 0xf8] = a0\n 15229: a0 = u64 [sp + 0x48]\n 15232: u64 [sp + 0xf0] = a0\n 15236: a0 = u64 [sp + 0x50]\n 15239: u64 [sp + 0xe8] = a0\n 15243: a0 = u64 [sp + 0x58]\n 15246: u64 [sp + 0xe0] = a0\n 15250: u64 [sp + 280] = 0\n 15254: u64 [sp + 272] = 0\n 15258: u64 [sp + 264] = 0\n 15262: u64 [sp + 256] = 0\n 15266: u32 [sp + 288] = 0x20\n 15271: i32 a1 = sp + 0xe0\n 15275: i32 a3 = sp + 0x100\n 15279: i32 a4 = sp + 0x120\n 15283: a2 = 0xffffffffffffffff\n 15286: a0 = 0\n 15288: ecalli 7 // 'get_storage'\n 15290: a0 = u8 [sp + 0x114]\n 15294: u64 [sp + 0x20] = a0\n 15297: a0 = u64 [sp + 0x40]\n 15300: u64 [sp + 0xf8] = a0\n 15304: a0 = u64 [sp + 0x48]\n 15307: u64 [sp + 0xf0] = a0\n 15311: a0 = u64 [sp + 0x50]\n 15314: u64 [sp + 0xe8] = a0\n 15318: a0 = u64 [sp + 0x58]\n 15321: u64 [sp + 0xe0] = a0\n 15325: u64 [sp + 280] = 0\n 15329: u64 [sp + 272] = 0\n 15333: u64 [sp + 264] = 0\n 15337: u64 [sp + 256] = 0\n 15341: u32 [sp + 288] = 0x20\n 15346: i32 a1 = sp + 0xe0\n 15350: i32 a3 = sp + 0x100\n 15354: i32 a4 = sp + 0x120\n 15358: a2 = 0xffffffffffffffff\n 15361: a0 = 0\n 15363: ecalli 7 // 'get_storage'\n 15365: s1 = u8 [sp + 0x115]\n 15369: a0 = u64 [sp + 0x40]\n 15372: u64 [sp + 0xf8] = a0\n 15376: a0 = u64 [sp + 0x48]\n 15379: u64 [sp + 0xf0] = a0\n 15383: a0 = u64 [sp + 0x50]\n 15386: u64 [sp + 0xe8] = a0\n 15390: a0 = u64 [sp + 0x58]\n 15393: u64 [sp + 0xe0] = a0\n 15397: u64 [sp + 280] = 0\n 15401: u64 [sp + 272] = 0\n 15405: u64 [sp + 264] = 0\n 15409: u64 [sp + 256] = 0\n 15413: u32 [sp + 288] = 0x20\n 15418: i32 a1 = sp + 0xe0\n 15422: i32 a3 = sp + 0x100\n 15426: i32 a4 = sp + 0x120\n 15430: a2 = 0xffffffffffffffff\n 15433: a0 = 0\n 15435: ecalli 7 // 'get_storage'\n 15437: a0 = u8 [sp + 0x116]\n 15441: a1 = u64 [sp + 0x18]\n 15444: u64 [a1 + 120] = 0\n 15447: u64 [a1 + 112] = 0\n 15450: u64 [a1 + 104] = 0\n 15453: u64 [a1 + 0x60] = a0\n 15456: u64 [a1 + 88] = 0\n 15459: u64 [a1 + 80] = 0\n 15462: u64 [a1 + 72] = 0\n 15465: u64 [a1 + 0x40] = s1\n 15468: u64 [a1 + 56] = 0\n 15471: u64 [a1 + 48] = 0\n 15474: u64 [a1 + 40] = 0\n 15477: a0 = u64 [sp + 0x20]\n 15480: u64 [a1 + 0x20] = a0\n 15483: u64 [a1 + 24] = 0\n 15486: a0 = u64 [sp + 0x28]\n 15489: u64 [a1 + 0x10] = a0\n 15492: a0 = u64 [sp + 0x30]\n 15495: u64 [a1 + 0x8] = a0\n 15498: a0 = u64 [sp + 0x38]\n 15501: u64 [a1] = a0\n 15503: sp = s0 + 0xfffffffffffffec0\n 15507: ra = u64 [sp + 0x138]\n 15511: s0 = u64 [sp + 0x130]\n 15515: s1 = u64 [sp + 0x128]\n 15519: sp = sp + 0x140\n 15523: ret\n      : @235 (gas: 2)\n 15525: a0 = 0\n 15527: ra = 210, jump @0\n      : @236 [@dyn 105] (gas: 6)\n 15533: i32 a1 = a0 + 0\n 15535: a0 = 0x1\n 15538: a2 = 0\n 15540: ra = 0xd4\n 15544: ecalli 12 // 'seal_return'\n 15546: fallthrough\n      : @237 [@dyn 106] (gas: 21)\n 15547: sp = sp + 0xffffffffffffff80\n 15550: u64 [sp + 0x78] = ra\n 15553: u64 [sp + 0x70] = s0\n 15556: u64 [sp + 0x68] = s1\n 15559: s0 = u64 [a1 + 0x10]\n 15562: t0 = u64 [a1 + 0x18]\n 15565: s1 = u64 [a1 + 0x8]\n 15568: a1 = u64 [a1]\n 15570: u64 [sp + 0x58] = s1\n 15573: u64 [sp + 0x40] = t0\n 15576: t0 = s1 | t0\n 15579: u64 [sp + 0x60] = a1\n 15582: s1 = a1 | s0\n 15585: s1 = s1 | t0\n 15588: s1 = s1 >> 0x20\n 15591: u64 [sp + 0x48] = s0\n 15594: a1 = t0 | s0\n 15597: a1 = a1 << 0x20\n 15600: a1 = a1 | s1\n 15603: u64 [sp + 0x28] = a0\n 15606: jump @246 if a1 != 0\n      : @238 (gas: 22)\n 15610: a0 = u64 [a5 + 0x18]\n 15613: u64 [sp + 0x18] = a0\n 15616: a0 = u64 [a5 + 0x10]\n 15619: u64 [sp + 0x8] = a0\n 15622: a0 = u64 [a5 + 0x8]\n 15625: u64 [sp + 0x10] = a0\n 15628: a0 = u64 [a5]\n 15630: u64 [sp] = a0\n 15632: a0 = u64 [a4]\n 15634: u64 [sp + 0x20] = a0\n 15637: a0 = u64 [a2 + 0x10]\n 15640: a1 = u64 [a3]\n 15642: u64 [sp + 0x30] = a1\n 15645: s1 = u64 [a2 + 0x8]\n 15648: a1 = u64 [a2]\n 15650: u64 [sp + 0x38] = a1\n 15653: a0 = a0 << 0x20\n 15656: s0 = a0 >> 0x20\n 15659: a0 = i32 [sp + 0x60]\n 15662: a1 = 0x20\n 15665: u64 [sp + 0x50] = a0\n 15668: ra = 214, jump @0\n      : @239 [@dyn 107] (gas: 65)\n 15674: a1 = reverse s0\n 15676: a2 = reverse s1\n 15678: a3 = u64 [sp + 0x38]\n 15681: a3 = reverse a3\n 15683: a4 = a3 >> 0x38\n 15686: u8 [a0 + 0x1f] = a4\n 15689: a4 = a3 >> 0x30\n 15692: u8 [a0 + 0x1e] = a4\n 15695: a4 = a3 >> 0x28\n 15698: u8 [a0 + 0x1d] = a4\n 15701: a4 = a3 >> 0x20\n 15704: u8 [a0 + 0x1c] = a4\n 15707: a4 = a3 >> 0x18\n 15710: u8 [a0 + 0x1b] = a4\n 15713: a4 = a3 >> 0x10\n 15716: u8 [a0 + 0x1a] = a4\n 15719: a4 = a3 >> 0x8\n 15722: u8 [a0 + 0x19] = a4\n 15725: u8 [a0 + 0x18] = a3\n 15728: u8 [a0 + 0x10] = a2\n 15731: u8 [a0 + 11] = 0\n 15734: u8 [a0 + 10] = 0\n 15737: u8 [a0 + 9] = 0\n 15740: u8 [a0 + 7] = 0\n 15743: u8 [a0 + 6] = 0\n 15746: u8 [a0 + 5] = 0\n 15749: u8 [a0 + 4] = 0\n 15752: u8 [a0 + 3] = 0\n 15755: u8 [a0 + 2] = 0\n 15758: u8 [a0 + 1] = 0\n 15761: u8 [a0 + 0] = 0\n 15763: a3 = a2 >> 0x38\n 15766: u8 [a0 + 0x17] = a3\n 15769: a3 = a2 >> 0x30\n 15772: u8 [a0 + 0x16] = a3\n 15775: a3 = a2 >> 0x28\n 15778: u8 [a0 + 0x15] = a3\n 15781: a3 = a2 >> 0x20\n 15784: u8 [a0 + 0x14] = a3\n 15787: a3 = a2 >> 0x18\n 15790: u8 [a0 + 0x13] = a3\n 15793: a3 = a2 >> 0x10\n 15796: u8 [a0 + 0x12] = a3\n 15799: a2 = a2 >> 0x8\n 15802: u8 [a0 + 0x11] = a2\n 15805: u8 [a0 + 0x8] = a1\n 15808: a2 = a1 >> 0x38\n 15811: u8 [a0 + 0xf] = a2\n 15814: a2 = a1 >> 0x30\n 15817: u8 [a0 + 0xe] = a2\n 15820: a2 = a1 >> 0x28\n 15823: u8 [a0 + 0xd] = a2\n 15826: a1 = a1 >> 0x20\n 15829: a2 = u64 [sp + 0x48]\n 15832: a4 = u64 [sp + 0x40]\n 15835: a4 = a4 | a2\n 15838: s1 = 0x100000000\n 15848: a2 = 0xffffffe0\n 15858: a3 = u64 [sp + 0x60]\n 15861: a2 = a3 <u a2\n 15864: a3 = u64 [sp + 0x58]\n 15867: a2 = 0 if a3 != 0\n 15869: a2 = 0 if a4 != 0\n 15871: u8 [a0 + 0xc] = a1\n 15874: jump @246 if a2 == 0\n      : @240 (gas: 5)\n 15878: s0 = a4\n 15880: a0 = u64 [sp + 0x50]\n 15883: i32 a0 = a0 + 0x20\n 15886: a1 = 0x20\n 15889: ra = 216, jump @0\n      : @241 [@dyn 108] (gas: 40)\n 15895: a1 = u64 [sp + 0x30]\n 15898: u8 [a0 + 0x1f] = a1\n 15901: u8 [a0 + 30] = 0\n 15904: u8 [a0 + 29] = 0\n 15907: u8 [a0 + 28] = 0\n 15910: u8 [a0 + 27] = 0\n 15913: u8 [a0 + 26] = 0\n 15916: u8 [a0 + 25] = 0\n 15919: u8 [a0 + 24] = 0\n 15922: u8 [a0 + 23] = 0\n 15925: u8 [a0 + 22] = 0\n 15928: u8 [a0 + 21] = 0\n 15931: u8 [a0 + 20] = 0\n 15934: u8 [a0 + 19] = 0\n 15937: u8 [a0 + 18] = 0\n 15940: u8 [a0 + 17] = 0\n 15943: u8 [a0 + 16] = 0\n 15946: u8 [a0 + 15] = 0\n 15949: u8 [a0 + 14] = 0\n 15952: u8 [a0 + 13] = 0\n 15955: u8 [a0 + 12] = 0\n 15958: u8 [a0 + 11] = 0\n 15961: u8 [a0 + 10] = 0\n 15964: u8 [a0 + 9] = 0\n 15967: u8 [a0 + 8] = 0\n 15970: u8 [a0 + 7] = 0\n 15973: u8 [a0 + 6] = 0\n 15976: u8 [a0 + 5] = 0\n 15979: u8 [a0 + 4] = 0\n 15982: u8 [a0 + 3] = 0\n 15985: u8 [a0 + 2] = 0\n 15988: u8 [a0 + 1] = 0\n 15991: a1 = s1 + 0xffffffffffffffc0\n 15994: a2 = u64 [sp + 0x60]\n 15997: a1 = a2 <u a1\n 16000: a2 = u64 [sp + 0x58]\n 16003: a1 = 0 if a2 != 0\n 16005: a1 = 0 if s0 != 0\n 16007: u8 [a0 + 0] = 0\n 16009: jump @246 if a1 == 0\n      : @242 (gas: 4)\n 16013: a0 = u64 [sp + 0x50]\n 16016: i32 a0 = a0 + 0x40\n 16019: a1 = 0x20\n 16022: ra = 218, jump @0\n      : @243 [@dyn 109] (gas: 40)\n 16028: a1 = u64 [sp + 0x20]\n 16031: u8 [a0 + 0x1f] = a1\n 16034: u8 [a0 + 30] = 0\n 16037: u8 [a0 + 29] = 0\n 16040: u8 [a0 + 28] = 0\n 16043: u8 [a0 + 27] = 0\n 16046: u8 [a0 + 26] = 0\n 16049: u8 [a0 + 25] = 0\n 16052: u8 [a0 + 24] = 0\n 16055: u8 [a0 + 23] = 0\n 16058: u8 [a0 + 22] = 0\n 16061: u8 [a0 + 21] = 0\n 16064: u8 [a0 + 20] = 0\n 16067: u8 [a0 + 19] = 0\n 16070: u8 [a0 + 18] = 0\n 16073: u8 [a0 + 17] = 0\n 16076: u8 [a0 + 16] = 0\n 16079: u8 [a0 + 15] = 0\n 16082: u8 [a0 + 14] = 0\n 16085: u8 [a0 + 13] = 0\n 16088: u8 [a0 + 12] = 0\n 16091: u8 [a0 + 11] = 0\n 16094: u8 [a0 + 10] = 0\n 16097: u8 [a0 + 9] = 0\n 16100: u8 [a0 + 8] = 0\n 16103: u8 [a0 + 7] = 0\n 16106: u8 [a0 + 6] = 0\n 16109: u8 [a0 + 5] = 0\n 16112: u8 [a0 + 4] = 0\n 16115: u8 [a0 + 3] = 0\n 16118: u8 [a0 + 2] = 0\n 16121: u8 [a0 + 1] = 0\n 16124: a1 = 0xffffffa0\n 16134: a2 = u64 [sp + 0x60]\n 16137: a1 = a2 <u a1\n 16140: a2 = u64 [sp + 0x58]\n 16143: a1 = 0 if a2 != 0\n 16145: a1 = 0 if s0 != 0\n 16147: u8 [a0 + 0] = 0\n 16149: jump @246 if a1 == 0\n      : @244 (gas: 27)\n 16153: a0 = u64 [sp + 0x60]\n 16156: s1 = a0 + 0x80\n 16160: a0 = s1 <u a0\n 16163: a1 = u64 [sp + 0x58]\n 16166: a2 = a1 + a0\n 16169: u64 [sp + 0x60] = a2\n 16172: s0 = a2 <u a1\n 16175: s0 = a0 if a0 == 0\n 16178: a0 = u64 [sp + 0x48]\n 16181: s0 = s0 + a0\n 16184: a0 = s0 <u a0\n 16187: a1 = u64 [sp + 0x40]\n 16190: a0 = a0 + a1\n 16193: u64 [sp + 0x58] = a0\n 16196: a0 = u64 [sp + 0x8]\n 16199: a1 = u64 [sp]\n 16201: a0 = a0 | a1\n 16204: a1 = u64 [sp + 0x18]\n 16207: a2 = u64 [sp + 0x10]\n 16210: a1 = a1 | a2\n 16213: a0 = a0 | a1\n 16216: a0 = a0 >u 0\n 16218: u64 [sp + 0x48] = a0\n 16221: a0 = u64 [sp + 0x50]\n 16224: i32 a0 = a0 + 0x60\n 16227: a1 = 0x20\n 16230: ra = 220, jump @0\n      : @245 [@dyn 110] (gas: 45)\n 16236: u8 [a0 + 30] = 0\n 16239: u8 [a0 + 29] = 0\n 16242: u8 [a0 + 28] = 0\n 16245: u8 [a0 + 27] = 0\n 16248: u8 [a0 + 26] = 0\n 16251: u8 [a0 + 25] = 0\n 16254: u8 [a0 + 24] = 0\n 16257: u8 [a0 + 23] = 0\n 16260: u8 [a0 + 22] = 0\n 16263: u8 [a0 + 21] = 0\n 16266: u8 [a0 + 20] = 0\n 16269: u8 [a0 + 19] = 0\n 16272: u8 [a0 + 18] = 0\n 16275: u8 [a0 + 17] = 0\n 16278: u8 [a0 + 16] = 0\n 16281: u8 [a0 + 15] = 0\n 16284: u8 [a0 + 14] = 0\n 16287: u8 [a0 + 13] = 0\n 16290: u8 [a0 + 12] = 0\n 16293: u8 [a0 + 11] = 0\n 16296: u8 [a0 + 10] = 0\n 16299: u8 [a0 + 9] = 0\n 16302: u8 [a0 + 8] = 0\n 16305: u8 [a0 + 7] = 0\n 16308: u8 [a0 + 6] = 0\n 16311: u8 [a0 + 5] = 0\n 16314: u8 [a0 + 4] = 0\n 16317: u8 [a0 + 3] = 0\n 16320: u8 [a0 + 2] = 0\n 16323: u8 [a0 + 1] = 0\n 16326: u8 [a0 + 0] = 0\n 16328: a1 = u64 [sp + 0x48]\n 16331: u8 [a0 + 0x1f] = a1\n 16334: a0 = u64 [sp + 0x28]\n 16337: u64 [a0] = s1\n 16339: a1 = u64 [sp + 0x58]\n 16342: u64 [a0 + 0x18] = a1\n 16345: a1 = u64 [sp + 0x60]\n 16348: u64 [a0 + 0x8] = a1\n 16351: u64 [a0 + 0x10] = s0\n 16354: ra = u64 [sp + 0x78]\n 16357: s0 = u64 [sp + 0x70]\n 16360: s1 = u64 [sp + 0x68]\n 16363: sp = sp + 0x80\n 16367: ret\n      : @246 (gas: 1)\n 16369: trap\n      : @247 (gas: 8)\n 16370: a0 = u64 [sp + 0x130]\n 16374: a1 = u64 [sp + 0x138]\n 16378: a2 = u64 [sp + 0x128]\n 16382: a3 = u64 [sp + 0x120]\n 16386: a1 = a1 | a2\n 16389: a0 = a0 | a3\n 16392: a0 = a0 | a1\n 16395: jump @259 if a0 != 0\n      : @248 (gas: 2)\n 16399: a0 = i32 [0x20004]\n 16404: jump @259 if a0 <=u 35\n      : @249 (gas: 44)\n 16409: i32 a0 = sp + 0x140\n 16413: a1 = 0x4\n 16416: ecalli 3 // 'call_data_load'\n 16418: a2 = u64 [sp + 0x140]\n 16422: a0 = u64 [sp + 0x148]\n 16426: a1 = u64 [sp + 0x150]\n 16430: a3 = u64 [sp + 0x158]\n 16434: u64 [sp + 0x98] = a3\n 16438: u64 [sp + 0x90] = a1\n 16442: u64 [sp + 0x88] = a0\n 16446: a0 = sp + 0xa0\n 16450: a1 = sp + 0x80\n 16454: u64 [sp + 0x80] = a2\n 16458: ra = 0xde\n 16462: sp = sp + 0xfffffffffffffec0\n 16466: u64 [sp + 0x138] = ra\n 16470: u64 [sp + 0x130] = s0\n 16474: u64 [sp + 0x128] = s1\n 16478: s0 = sp + 0x140\n 16482: sp = sp & 0xffffffffffffffe0\n 16485: u64 [sp + 0x18] = a0\n 16488: s1 = u64 [a1]\n 16490: a0 = u64 [a1 + 0x8]\n 16493: u64 [sp + 0x50] = a0\n 16496: a0 = u64 [a1 + 0x10]\n 16499: u64 [sp + 0x58] = a0\n 16502: a0 = u64 [a1 + 0x18]\n 16505: u64 [sp + 0x48] = a0\n 16508: u64 [sp + 248] = 0\n 16512: u64 [sp + 240] = 0\n 16516: u64 [sp + 232] = 0\n 16520: u64 [sp + 224] = 0\n 16524: u64 [sp + 280] = 0\n 16528: u64 [sp + 272] = 0\n 16532: u64 [sp + 264] = 0\n 16536: u64 [sp + 256] = 0\n 16540: u32 [sp + 288] = 0x20\n 16545: i32 a1 = sp + 0xe0\n 16549: i32 a3 = sp + 0x100\n 16553: i32 a4 = sp + 0x120\n 16557: a2 = 0xffffffffffffffff\n 16560: a0 = 0\n 16562: ecalli 7 // 'get_storage'\n 16564: jump @232\n      : @250 [@dyn 111] (gas: 21)\n 16567: a0 = u64 [sp + 0x118]\n 16571: u64 [sp + 0x48] = a0\n 16574: a0 = u64 [sp + 0x110]\n 16578: u64 [sp + 0x38] = a0\n 16581: a0 = u64 [sp + 0x108]\n 16585: u64 [sp + 0x40] = a0\n 16588: a0 = u64 [sp + 0x100]\n 16592: u64 [sp + 0x30] = a0\n 16595: a0 = u64 [sp + 0xe0]\n 16599: u64 [sp + 0x50] = a0\n 16602: a0 = u64 [sp + 0xc0]\n 16606: u64 [sp + 0x58] = a0\n 16609: a0 = u64 [sp + 0xb0]\n 16613: u64 [sp + 0x68] = a0\n 16616: a0 = u64 [sp + 0xa8]\n 16620: u64 [sp + 0x70] = a0\n 16623: a0 = u64 [sp + 0xa0]\n 16627: u64 [sp + 0x78] = a0\n 16630: a0 = 0x40\n 16633: a1 = 0x20\n 16636: ra = 224, jump @0\n      : @251 [@dyn 112] (gas: 100)\n 16642: a1 = u8 [a0 + 0x11]\n 16645: a2 = u8 [a0 + 0x10]\n 16648: a3 = u8 [a0 + 0x12]\n 16651: a4 = u8 [a0 + 0x13]\n 16654: a1 = a1 << 0x8\n 16657: a1 = a1 | a2\n 16660: a3 = a3 << 0x10\n 16663: a4 = a4 << 0x18\n 16666: a3 = a3 | a4\n 16669: a1 = a1 | a3\n 16672: a2 = u8 [a0 + 0x15]\n 16675: a3 = u8 [a0 + 0x14]\n 16678: a4 = u8 [a0 + 0x16]\n 16681: a5 = u8 [a0 + 0x17]\n 16684: a2 = a2 << 0x8\n 16687: a2 = a2 | a3\n 16690: a4 = a4 << 0x10\n 16693: a5 = a5 << 0x18\n 16696: a4 = a4 | a5\n 16699: a2 = a2 | a4\n 16702: a2 = a2 << 0x20\n 16705: t0 = a2 | a1\n 16708: a2 = u8 [a0 + 0x1]\n 16711: a3 = u8 [a0]\n 16713: a4 = u8 [a0 + 0x2]\n 16716: a5 = u8 [a0 + 0x3]\n 16719: a2 = a2 << 0x8\n 16722: a2 = a2 | a3\n 16725: a4 = a4 << 0x10\n 16728: a5 = a5 << 0x18\n 16731: a4 = a4 | a5\n 16734: a2 = a2 | a4\n 16737: a3 = u8 [a0 + 0x5]\n 16740: a4 = u8 [a0 + 0x4]\n 16743: a5 = u8 [a0 + 0x6]\n 16746: s1 = u8 [a0 + 0x7]\n 16749: a3 = a3 << 0x8\n 16752: a3 = a3 | a4\n 16755: a5 = a5 << 0x10\n 16758: s1 = s1 << 0x18\n 16761: a5 = a5 | s1\n 16764: a3 = a3 | a5\n 16767: a3 = a3 << 0x20\n 16770: a2 = a2 | a3\n 16773: a3 = u8 [a0 + 0x19]\n 16776: a4 = u8 [a0 + 0x18]\n 16779: a5 = u8 [a0 + 0x1a]\n 16782: s1 = u8 [a0 + 0x1b]\n 16785: a3 = a3 << 0x8\n 16788: a3 = a3 | a4\n 16791: a5 = a5 << 0x10\n 16794: s1 = s1 << 0x18\n 16797: a5 = a5 | s1\n 16800: a3 = a3 | a5\n 16803: a4 = u8 [a0 + 0x1d]\n 16806: a5 = u8 [a0 + 0x1c]\n 16809: s1 = u8 [a0 + 0x1e]\n 16812: a1 = u8 [a0 + 0x1f]\n 16815: a4 = a4 << 0x8\n 16818: a4 = a4 | a5\n 16821: s1 = s1 << 0x10\n 16824: a1 = a1 << 0x18\n 16827: a1 = a1 | s1\n 16830: a1 = a1 | a4\n 16833: a1 = a1 << 0x20\n 16836: a3 = a3 | a1\n 16839: a1 = u8 [a0 + 0x9]\n 16842: a4 = u8 [a0 + 0x8]\n 16845: a5 = u8 [a0 + 0xa]\n 16848: s1 = u8 [a0 + 0xb]\n 16851: a1 = a1 << 0x8\n 16854: a1 = a1 | a4\n 16857: a5 = a5 << 0x10\n 16860: s1 = s1 << 0x18\n 16863: a5 = a5 | s1\n 16866: a1 = a1 | a5\n 16869: a4 = u8 [a0 + 0xd]\n 16872: a5 = u8 [a0 + 0xc]\n 16875: s1 = u8 [a0 + 0xe]\n 16878: a0 = u8 [a0 + 0xf]\n 16881: a4 = a4 << 0x8\n 16884: a4 = a4 | a5\n 16887: s1 = s1 << 0x10\n 16890: a0 = a0 << 0x18\n 16893: a0 = a0 | s1\n 16896: a0 = a0 | a4\n 16899: a0 = a0 << 0x20\n 16902: a0 = a0 | a1\n 16905: s1 = reverse a0\n 16907: a3 = reverse a3\n 16909: a4 = reverse a2\n 16911: a2 = reverse t0\n 16913: a0 = a2 | a4\n 16916: a1 = a3 | s1\n 16919: a1 = a1 | a0\n 16922: a1 = a1 >> 0x20\n 16925: a0 = a0 | s1\n 16928: a0 = a0 << 0x20\n 16931: a0 = a0 | a1\n 16934: jump @258 if a0 != 0\n      : @252 (gas: 11)\n 16938: a0 = u64 [sp + 0x68]\n 16941: a0 = a0 << 0x20\n 16944: a0 = a0 >> 0x20\n 16947: u64 [sp + 0x20] = a0\n 16950: i32 a0 = a3 + 0\n 16952: a1 = 0x20\n 16955: u64 [sp + 0x18] = a0\n 16958: u64 [sp + 0x68] = a3\n 16961: u64 [sp + 0x60] = a2\n 16964: u64 [sp + 0x28] = a4\n 16967: ra = 226, jump @0\n      : @253 [@dyn 113] (gas: 66)\n 16973: a1 = u64 [sp + 0x20]\n 16976: a1 = reverse a1\n 16978: a2 = u64 [sp + 0x70]\n 16981: a2 = reverse a2\n 16983: a3 = u64 [sp + 0x78]\n 16986: a3 = reverse a3\n 16988: a4 = a3 >> 0x38\n 16991: u8 [a0 + 0x1f] = a4\n 16994: a4 = a3 >> 0x30\n 16997: u8 [a0 + 0x1e] = a4\n 17000: a4 = a3 >> 0x28\n 17003: u8 [a0 + 0x1d] = a4\n 17006: a4 = a3 >> 0x20\n 17009: u8 [a0 + 0x1c] = a4\n 17012: a4 = a3 >> 0x18\n 17015: u8 [a0 + 0x1b] = a4\n 17018: a4 = a3 >> 0x10\n 17021: u8 [a0 + 0x1a] = a4\n 17024: a4 = a3 >> 0x8\n 17027: u8 [a0 + 0x19] = a4\n 17030: u8 [a0 + 0x18] = a3\n 17033: u8 [a0 + 0x10] = a2\n 17036: u8 [a0 + 11] = 0\n 17039: u8 [a0 + 10] = 0\n 17042: u8 [a0 + 9] = 0\n 17045: u8 [a0 + 7] = 0\n 17048: u8 [a0 + 6] = 0\n 17051: u8 [a0 + 5] = 0\n 17054: u8 [a0 + 4] = 0\n 17057: u8 [a0 + 3] = 0\n 17060: u8 [a0 + 2] = 0\n 17063: u8 [a0 + 1] = 0\n 17066: u8 [a0 + 0] = 0\n 17068: a3 = a2 >> 0x38\n 17071: u8 [a0 + 0x17] = a3\n 17074: a3 = a2 >> 0x30\n 17077: u8 [a0 + 0x16] = a3\n 17080: a3 = a2 >> 0x28\n 17083: u8 [a0 + 0x15] = a3\n 17086: a3 = a2 >> 0x20\n 17089: u8 [a0 + 0x14] = a3\n 17092: a3 = a2 >> 0x18\n 17095: u8 [a0 + 0x13] = a3\n 17098: a3 = a2 >> 0x10\n 17101: u8 [a0 + 0x12] = a3\n 17104: a2 = a2 >> 0x8\n 17107: u8 [a0 + 0x11] = a2\n 17110: u8 [a0 + 0x8] = a1\n 17113: a2 = a1 >> 0x38\n 17116: u8 [a0 + 0xf] = a2\n 17119: a2 = a1 >> 0x30\n 17122: u8 [a0 + 0xe] = a2\n 17125: a2 = a1 >> 0x28\n 17128: u8 [a0 + 0xd] = a2\n 17131: a1 = a1 >> 0x20\n 17134: a4 = u64 [sp + 0x28]\n 17137: a4 = a4 | s1\n 17140: s1 = 0x100000000\n 17150: a2 = 0xffffffe0\n 17160: a3 = u64 [sp + 0x68]\n 17163: a2 = a3 <u a2\n 17166: a3 = u64 [sp + 0x60]\n 17169: a2 = 0 if a3 != 0\n 17171: a2 = 0 if a4 != 0\n 17173: u8 [a0 + 0xc] = a1\n 17176: jump @258 if a2 == 0\n      : @254 (gas: 6)\n 17180: a0 = u64 [sp + 0x18]\n 17183: i32 a0 = a0 + 0x20\n 17186: a1 = 0x20\n 17189: u64 [sp + 0x78] = s1\n 17192: s1 = a4\n 17194: ra = 228, jump @0\n      : @255 [@dyn 114] (gas: 41)\n 17200: a3 = u64 [sp + 0x60]\n 17203: a2 = u64 [sp + 0x68]\n 17206: a1 = u64 [sp + 0x58]\n 17209: u8 [a0 + 0x1f] = a1\n 17212: u8 [a0 + 30] = 0\n 17215: u8 [a0 + 29] = 0\n 17218: u8 [a0 + 28] = 0\n 17221: u8 [a0 + 27] = 0\n 17224: u8 [a0 + 26] = 0\n 17227: u8 [a0 + 25] = 0\n 17230: u8 [a0 + 24] = 0\n 17233: u8 [a0 + 23] = 0\n 17236: u8 [a0 + 22] = 0\n 17239: u8 [a0 + 21] = 0\n 17242: u8 [a0 + 20] = 0\n 17245: u8 [a0 + 19] = 0\n 17248: u8 [a0 + 18] = 0\n 17251: u8 [a0 + 17] = 0\n 17254: u8 [a0 + 16] = 0\n 17257: u8 [a0 + 15] = 0\n 17260: u8 [a0 + 14] = 0\n 17263: u8 [a0 + 13] = 0\n 17266: u8 [a0 + 12] = 0\n 17269: u8 [a0 + 11] = 0\n 17272: u8 [a0 + 10] = 0\n 17275: u8 [a0 + 9] = 0\n 17278: u8 [a0 + 8] = 0\n 17281: u8 [a0 + 7] = 0\n 17284: u8 [a0 + 6] = 0\n 17287: u8 [a0 + 5] = 0\n 17290: u8 [a0 + 4] = 0\n 17293: u8 [a0 + 3] = 0\n 17296: u8 [a0 + 2] = 0\n 17299: u8 [a0 + 1] = 0\n 17302: a1 = u64 [sp + 0x78]\n 17305: a1 = a1 + 0xffffffffffffffc0\n 17308: a1 = a2 <u a1\n 17311: a1 = 0 if a3 != 0\n 17313: a1 = 0 if s1 != 0\n 17315: u8 [a0 + 0] = 0\n 17317: jump @258 if a1 == 0\n      : @256 (gas: 7)\n 17321: a4 = s1\n 17323: a0 = u64 [sp + 0x18]\n 17326: i32 a0 = a0 + 0x40\n 17329: a1 = 0x20\n 17332: s1 = a2\n 17334: u64 [sp + 0x78] = a4\n 17337: ra = 230, jump @0\n      : @257 [@dyn 115] (gas: 40)\n 17343: a1 = u64 [sp + 0x50]\n 17346: u8 [a0 + 0x1f] = a1\n 17349: u8 [a0 + 30] = 0\n 17352: u8 [a0 + 29] = 0\n 17355: u8 [a0 + 28] = 0\n 17358: u8 [a0 + 27] = 0\n 17361: u8 [a0 + 26] = 0\n 17364: u8 [a0 + 25] = 0\n 17367: u8 [a0 + 24] = 0\n 17370: u8 [a0 + 23] = 0\n 17373: u8 [a0 + 22] = 0\n 17376: u8 [a0 + 21] = 0\n 17379: u8 [a0 + 20] = 0\n 17382: u8 [a0 + 19] = 0\n 17385: u8 [a0 + 18] = 0\n 17388: u8 [a0 + 17] = 0\n 17391: u8 [a0 + 16] = 0\n 17394: u8 [a0 + 15] = 0\n 17397: u8 [a0 + 14] = 0\n 17400: u8 [a0 + 13] = 0\n 17403: u8 [a0 + 12] = 0\n 17406: u8 [a0 + 11] = 0\n 17409: u8 [a0 + 10] = 0\n 17412: u8 [a0 + 9] = 0\n 17415: u8 [a0 + 8] = 0\n 17418: u8 [a0 + 7] = 0\n 17421: u8 [a0 + 6] = 0\n 17424: u8 [a0 + 5] = 0\n 17427: u8 [a0 + 4] = 0\n 17430: u8 [a0 + 3] = 0\n 17433: u8 [a0 + 2] = 0\n 17436: u8 [a0 + 1] = 0\n 17439: a1 = 0xffffffa0\n 17449: a1 = s1 <u a1\n 17452: a2 = u64 [sp + 0x60]\n 17455: a1 = 0 if a2 != 0\n 17457: a2 = u64 [sp + 0x78]\n 17460: a1 = 0 if a2 != 0\n 17462: u8 [a0 + 0] = 0\n 17464: jump @261 if a1 != 0\n      : @258 (gas: 1)\n 17467: trap\n      : @259 (gas: 3)\n 17468: a0 = 0\n 17470: a1 = 0\n 17472: ra = 232, jump @0\n      : @260 [@dyn 116] (gas: 5)\n 17478: i32 a1 = a0 + 0\n 17480: a0 = 0x1\n 17483: a2 = 0\n 17485: ecalli 12 // 'seal_return'\n 17487: fallthrough\n      : @261 (gas: 13)\n 17488: a0 = u64 [sp + 0x38]\n 17491: a1 = u64 [sp + 0x30]\n 17494: a0 = a0 | a1\n 17497: a1 = u64 [sp + 0x48]\n 17500: a2 = u64 [sp + 0x40]\n 17503: a1 = a1 | a2\n 17506: a0 = a0 | a1\n 17509: a0 = a0 >u 0\n 17511: u64 [sp + 0x78] = a0\n 17514: s1 = u64 [sp + 0x18]\n 17517: i32 a0 = s1 + 0x60\n 17520: a1 = 0x20\n 17523: ra = 234, jump @0\n      : @262 [@dyn 117] (gas: 36)\n 17529: u8 [a0 + 30] = 0\n 17532: u8 [a0 + 29] = 0\n 17535: u8 [a0 + 28] = 0\n 17538: u8 [a0 + 27] = 0\n 17541: u8 [a0 + 26] = 0\n 17544: u8 [a0 + 25] = 0\n 17547: u8 [a0 + 24] = 0\n 17550: u8 [a0 + 23] = 0\n 17553: u8 [a0 + 22] = 0\n 17556: u8 [a0 + 21] = 0\n 17559: u8 [a0 + 20] = 0\n 17562: u8 [a0 + 19] = 0\n 17565: u8 [a0 + 18] = 0\n 17568: u8 [a0 + 17] = 0\n 17571: u8 [a0 + 16] = 0\n 17574: u8 [a0 + 15] = 0\n 17577: u8 [a0 + 14] = 0\n 17580: u8 [a0 + 13] = 0\n 17583: u8 [a0 + 12] = 0\n 17586: u8 [a0 + 11] = 0\n 17589: u8 [a0 + 10] = 0\n 17592: u8 [a0 + 9] = 0\n 17595: u8 [a0 + 8] = 0\n 17598: u8 [a0 + 7] = 0\n 17601: u8 [a0 + 6] = 0\n 17604: u8 [a0 + 5] = 0\n 17607: u8 [a0 + 4] = 0\n 17610: u8 [a0 + 3] = 0\n 17613: u8 [a0 + 2] = 0\n 17616: u8 [a0 + 1] = 0\n 17619: u8 [a0 + 0] = 0\n 17621: a1 = u64 [sp + 0x78]\n 17624: u8 [a0 + 0x1f] = a1\n 17627: a1 = 0x80\n 17631: a0 = s1\n 17633: ra = 236, jump @0\n      : @263 [@dyn 118] (gas: 6)\n 17639: i32 a1 = a0 + 0\n 17641: a2 = 0x80\n 17645: a0 = 0\n 17647: ra = 0xee\n 17651: ecalli 12 // 'seal_return'\n 17653: fallthrough\n      : @264 [@dyn 119] (gas: 9)\n 17654: a2 = u64 [a1 + 0x18]\n 17657: a3 = u64 [a1 + 0x10]\n 17660: a4 = u64 [a1 + 0x8]\n 17663: a1 = u64 [a1]\n 17665: u64 [a0 + 0x18] = a2\n 17668: u64 [a0 + 0x10] = a3\n 17671: u64 [a0 + 0x8] = a4\n 17674: u64 [a0] = a1\n 17676: ret\n      : @265 (gas: 17)\n 17678: sp = sp + 0xffffffffffffffa0\n 17681: u64 [sp + 0x58] = ra\n 17684: u64 [sp + 0x50] = s0\n 17687: u64 [sp + 0x48] = s1\n 17690: a3 = u64 [a1 + 0x18]\n 17693: a4 = u64 [a1 + 0x10]\n 17696: a5 = u64 [a1 + 0x8]\n 17699: s1 = u64 [a1]\n 17701: a1 = a5 | a3\n 17704: a2 = s1 | a4\n 17707: a2 = a2 | a1\n 17710: a2 = a2 >> 0x20\n 17713: a1 = a1 | a4\n 17716: a1 = a1 << 0x20\n 17719: a1 = a1 | a2\n 17722: u64 [sp + 0x28] = a0\n 17725: jump @272 if a1 != 0\n      : @266 (gas: 19)\n 17729: a0 = s1 + 0x20\n 17732: u64 [sp + 0x30] = a0\n 17735: a0 = a0 <u s1\n 17738: a1 = a5 + a0\n 17741: u64 [sp + 0x40] = a1\n 17744: u64 [sp + 0x8] = a5\n 17747: s0 = a1 <u a5\n 17750: s0 = a0 if a0 == 0\n 17753: s0 = s0 + a4\n 17756: u64 [sp + 0x10] = a4\n 17759: a0 = s0 <u a4\n 17762: u64 [sp + 0x18] = a3\n 17765: a0 = a0 + a3\n 17768: u64 [sp + 0x38] = a0\n 17771: u64 [sp] = s1\n 17773: i32 a0 = s1 + 0\n 17775: a1 = 0x20\n 17778: s1 = 0x20\n 17781: ra = 240, jump @0\n      : @267 [@dyn 120] (gas: 45)\n 17787: u8 [a0 + 0x1f] = s1\n 17790: a1 = u64 [sp + 0x30]\n 17793: s1 = a1\n 17795: a1 = a1 | s0\n 17798: a2 = u64 [sp + 0x40]\n 17801: a4 = u64 [sp + 0x38]\n 17804: a2 = a2 | a4\n 17807: a1 = a1 | a2\n 17810: a1 = a1 >> 0x20\n 17813: u64 [sp + 0x20] = s0\n 17816: a2 = a2 | s0\n 17819: a2 = a2 << 0x20\n 17822: a1 = a1 | a2\n 17825: u8 [a0 + 30] = 0\n 17828: u8 [a0 + 29] = 0\n 17831: u8 [a0 + 28] = 0\n 17834: u8 [a0 + 27] = 0\n 17837: u8 [a0 + 26] = 0\n 17840: u8 [a0 + 25] = 0\n 17843: u8 [a0 + 24] = 0\n 17846: u8 [a0 + 23] = 0\n 17849: u8 [a0 + 22] = 0\n 17852: u8 [a0 + 21] = 0\n 17855: u8 [a0 + 20] = 0\n 17858: u8 [a0 + 19] = 0\n 17861: u8 [a0 + 18] = 0\n 17864: u8 [a0 + 17] = 0\n 17867: u8 [a0 + 16] = 0\n 17870: u8 [a0 + 15] = 0\n 17873: u8 [a0 + 14] = 0\n 17876: u8 [a0 + 13] = 0\n 17879: u8 [a0 + 12] = 0\n 17882: u8 [a0 + 11] = 0\n 17885: u8 [a0 + 10] = 0\n 17888: u8 [a0 + 9] = 0\n 17891: u8 [a0 + 8] = 0\n 17894: u8 [a0 + 7] = 0\n 17897: u8 [a0 + 6] = 0\n 17900: u8 [a0 + 5] = 0\n 17903: u8 [a0 + 4] = 0\n 17906: u8 [a0 + 3] = 0\n 17909: u8 [a0 + 2] = 0\n 17912: u8 [a0 + 1] = 0\n 17915: u8 [a0 + 0] = 0\n 17917: jump @272 if a1 != 0\n      : @268 (gas: 4)\n 17921: i32 s0 = s1 + 0\n 17923: a1 = 0x20\n 17926: a0 = s0\n 17928: ra = 242, jump @0\n      : @269 [@dyn 121] (gas: 41)\n 17934: u8 [a0 + 31] = 0xa\n 17938: u8 [a0 + 30] = 0\n 17941: u8 [a0 + 29] = 0\n 17944: u8 [a0 + 28] = 0\n 17947: u8 [a0 + 27] = 0\n 17950: u8 [a0 + 26] = 0\n 17953: u8 [a0 + 25] = 0\n 17956: u8 [a0 + 24] = 0\n 17959: u8 [a0 + 23] = 0\n 17962: u8 [a0 + 22] = 0\n 17965: u8 [a0 + 21] = 0\n 17968: u8 [a0 + 20] = 0\n 17971: u8 [a0 + 19] = 0\n 17974: u8 [a0 + 18] = 0\n 17977: u8 [a0 + 17] = 0\n 17980: u8 [a0 + 16] = 0\n 17983: u8 [a0 + 15] = 0\n 17986: u8 [a0 + 14] = 0\n 17989: u8 [a0 + 13] = 0\n 17992: u8 [a0 + 12] = 0\n 17995: u8 [a0 + 11] = 0\n 17998: u8 [a0 + 10] = 0\n 18001: u8 [a0 + 9] = 0\n 18004: u8 [a0 + 8] = 0\n 18007: u8 [a0 + 7] = 0\n 18010: u8 [a0 + 6] = 0\n 18013: u8 [a0 + 5] = 0\n 18016: u8 [a0 + 4] = 0\n 18019: u8 [a0 + 3] = 0\n 18022: u8 [a0 + 2] = 0\n 18025: u8 [a0 + 1] = 0\n 18028: a1 = u64 [sp + 0x20]\n 18031: a2 = u64 [sp + 0x38]\n 18034: a1 = a1 | a2\n 18037: a2 = 0xffffffe0\n 18047: a2 = s1 <u a2\n 18050: a3 = u64 [sp + 0x40]\n 18053: a2 = 0 if a3 != 0\n 18055: a2 = 0 if a1 != 0\n 18057: u8 [a0 + 0] = 0\n 18059: jump @272 if a2 == 0\n      : @270 (gas: 3)\n 18063: i32 a0 = s0 + 0x20\n 18066: a1 = 0x20\n 18069: ra = 244, jump @0\n      : @271 [@dyn 122] (gas: 54)\n 18075: u8 [a0 + 31] = 0\n 18078: u8 [a0 + 30] = 0\n 18081: u8 [a0 + 29] = 0\n 18084: u8 [a0 + 28] = 0\n 18087: u8 [a0 + 27] = 0\n 18090: u8 [a0 + 26] = 0\n 18093: u8 [a0 + 25] = 0\n 18096: u8 [a0 + 24] = 0\n 18099: u8 [a0 + 23] = 0\n 18102: u8 [a0 + 22] = 0\n 18105: u8 [a0 + 21] = 0\n 18108: u8 [a0 + 20] = 0\n 18111: u8 [a0 + 19] = 0\n 18114: u8 [a0 + 18] = 0\n 18117: u8 [a0 + 17] = 0\n 18120: u8 [a0 + 16] = 0\n 18123: u8 [a0 + 15] = 0\n 18126: u8 [a0 + 14] = 0\n 18129: u8 [a0 + 13] = 0\n 18132: u8 [a0 + 12] = 0\n 18135: u8 [a0 + 11] = 0\n 18138: u8 [a0 + 10] = 0\n 18141: u8 [a0 + 9] = 0x44\n 18145: u8 [a0 + 8] = 0x49\n 18149: u8 [a0 + 7] = 0x20\n 18153: u8 [a0 + 6] = 0x64\n 18157: u8 [a0 + 5] = 0x69\n 18161: u8 [a0 + 4] = 0x6c\n 18165: u8 [a0 + 3] = 0x61\n 18169: u8 [a0 + 2] = 0x76\n 18173: u8 [a0 + 1] = 0x6e\n 18177: u8 [a0 + 0] = 0x49\n 18180: a1 = u64 [sp]\n 18182: a0 = a1 + 0x60\n 18185: a1 = a0 <u a1\n 18188: a3 = u64 [sp + 0x8]\n 18191: a2 = a3 + a1\n 18194: a3 = a2 <u a3\n 18197: a3 = a1 if a1 == 0\n 18200: a1 = u64 [sp + 0x10]\n 18203: a3 = a3 + a1\n 18206: a1 = a3 <u a1\n 18209: a4 = u64 [sp + 0x18]\n 18212: a1 = a1 + a4\n 18215: a4 = u64 [sp + 0x28]\n 18218: u64 [a4] = a0\n 18220: u64 [a4 + 0x8] = a2\n 18223: u64 [a4 + 0x10] = a3\n 18226: u64 [a4 + 0x18] = a1\n 18229: ra = u64 [sp + 0x58]\n 18232: s0 = u64 [sp + 0x50]\n 18235: s1 = u64 [sp + 0x48]\n 18238: sp = sp + 0x60\n 18241: ret\n      : @272 (gas: 1)\n 18243: trap\n      : @273 (gas: 9)\n 18244: sp = sp + 0xffffffffffffffc0\n 18247: u64 [sp + 0x38] = ra\n 18250: u64 [sp + 0x30] = s0\n 18253: u64 [sp + 0x28] = s1\n 18256: s0 = sp + 0x40\n 18259: sp = sp & 0xffffffffffffffe0\n 18262: a0 = 0x40\n 18265: a1 = 0x20\n 18268: ra = 246, jump @0\n      : @274 [@dyn 123] (gas: 97)\n 18274: a1 = u8 [a0 + 0x11]\n 18277: a2 = u8 [a0 + 0x10]\n 18280: a3 = u8 [a0 + 0x12]\n 18283: a4 = u8 [a0 + 0x13]\n 18286: a1 = a1 << 0x8\n 18289: a1 = a1 | a2\n 18292: a3 = a3 << 0x10\n 18295: a4 = a4 << 0x18\n 18298: a3 = a3 | a4\n 18301: a1 = a1 | a3\n 18304: a2 = u8 [a0 + 0x15]\n 18307: a3 = u8 [a0 + 0x14]\n 18310: a4 = u8 [a0 + 0x16]\n 18313: a5 = u8 [a0 + 0x17]\n 18316: a2 = a2 << 0x8\n 18319: a2 = a2 | a3\n 18322: a4 = a4 << 0x10\n 18325: a5 = a5 << 0x18\n 18328: a4 = a4 | a5\n 18331: a2 = a2 | a4\n 18334: a2 = a2 << 0x20\n 18337: t0 = a2 | a1\n 18340: a2 = u8 [a0 + 0x1]\n 18343: a3 = u8 [a0]\n 18345: a4 = u8 [a0 + 0x2]\n 18348: a5 = u8 [a0 + 0x3]\n 18351: a2 = a2 << 0x8\n 18354: a2 = a2 | a3\n 18357: a4 = a4 << 0x10\n 18360: a5 = a5 << 0x18\n 18363: a4 = a4 | a5\n 18366: a2 = a2 | a4\n 18369: a3 = u8 [a0 + 0x5]\n 18372: a4 = u8 [a0 + 0x4]\n 18375: a5 = u8 [a0 + 0x6]\n 18378: s1 = u8 [a0 + 0x7]\n 18381: a3 = a3 << 0x8\n 18384: a3 = a3 | a4\n 18387: a5 = a5 << 0x10\n 18390: s1 = s1 << 0x18\n 18393: a5 = a5 | s1\n 18396: a3 = a3 | a5\n 18399: a3 = a3 << 0x20\n 18402: a2 = a2 | a3\n 18405: a3 = u8 [a0 + 0x19]\n 18408: a4 = u8 [a0 + 0x18]\n 18411: a5 = u8 [a0 + 0x1a]\n 18414: s1 = u8 [a0 + 0x1b]\n 18417: a3 = a3 << 0x8\n 18420: a3 = a3 | a4\n 18423: a5 = a5 << 0x10\n 18426: s1 = s1 << 0x18\n 18429: a5 = a5 | s1\n 18432: a3 = a3 | a5\n 18435: a4 = u8 [a0 + 0x1d]\n 18438: a5 = u8 [a0 + 0x1c]\n 18441: s1 = u8 [a0 + 0x1e]\n 18444: a1 = u8 [a0 + 0x1f]\n 18447: a4 = a4 << 0x8\n 18450: a4 = a4 | a5\n 18453: s1 = s1 << 0x10\n 18456: a1 = a1 << 0x18\n 18459: a1 = a1 | s1\n 18462: a1 = a1 | a4\n 18465: a1 = a1 << 0x20\n 18468: a3 = a3 | a1\n 18471: a1 = u8 [a0 + 0x9]\n 18474: a4 = u8 [a0 + 0x8]\n 18477: a5 = u8 [a0 + 0xa]\n 18480: s1 = u8 [a0 + 0xb]\n 18483: a1 = a1 << 0x8\n 18486: a1 = a1 | a4\n 18489: a5 = a5 << 0x10\n 18492: s1 = s1 << 0x18\n 18495: a5 = a5 | s1\n 18498: a1 = a1 | a5\n 18501: a4 = u8 [a0 + 0xd]\n 18504: a5 = u8 [a0 + 0xc]\n 18507: s1 = u8 [a0 + 0xe]\n 18510: a0 = u8 [a0 + 0xf]\n 18513: a4 = a4 << 0x8\n 18516: a4 = a4 | a5\n 18519: s1 = s1 << 0x10\n 18522: a0 = a0 << 0x18\n 18525: a0 = a0 | s1\n 18528: a0 = a0 | a4\n 18531: a0 = a0 << 0x20\n 18534: a0 = a0 | a1\n 18537: s1 = reverse a0\n 18539: a0 = reverse a3\n 18541: u64 [sp + 0x8] = a0\n 18544: a0 = reverse a2\n 18546: u64 [sp + 0x18] = a0\n 18549: a0 = reverse t0\n 18551: u64 [sp + 0x10] = a0\n 18554: ecalli 11 // 'return_data_size'\n 18556: fallthrough\n      : @275 (gas: 11)\n 18557: a3 = u64 [sp + 0x8]\n 18560: a1 = u64 [sp + 0x18]\n 18563: a2 = u64 [sp + 0x10]\n 18566: a1 = a1 | a2\n 18569: a2 = a3 | s1\n 18572: a2 = a2 | a1\n 18575: a2 = a2 >> 0x20\n 18578: a1 = a1 | s1\n 18581: a1 = a1 << 0x20\n 18584: a1 = a1 | a2\n 18587: jump @282 if a1 != 0\n      : @276 (gas: 3)\n 18590: s1 = a0\n 18592: a0 = a0 >> 0x20\n 18595: jump @282 if a0 != 0\n      : @277 (gas: 5)\n 18598: i32 a0 = a3 + 0\n 18600: i32 a1 = s1 + 0\n 18602: u64 [sp + 0x18] = a1\n 18605: u64 [sp + 0x10] = a0\n 18608: ra = 248, jump @0\n      : @278 [@dyn 124] (gas: 6)\n 18614: u32 [sp + 0x20] = s1\n 18617: i32 a0 = a0 + 0\n 18619: i32 a1 = sp + 0x20\n 18622: a2 = 0\n 18624: ecalli 10 // 'return_data_copy'\n 18626: fallthrough\n      : @279 (gas: 3)\n 18627: a0 = i32 [sp + 0x20]\n 18630: a1 = u64 [sp + 0x18]\n 18633: jump @282 if a0 <u a1\n      : @280 (gas: 2)\n 18636: ecalli 11 // 'return_data_size'\n 18638: fallthrough\n      : @281 (gas: 2)\n 18639: a1 = a0 >> 0x20\n 18642: jump @283 if a1 == 0\n      : @282 (gas: 1)\n 18645: trap\n      : @283 (gas: 4)\n 18646: i32 s1 = a0 + 0\n 18648: a0 = u64 [sp + 0x10]\n 18651: a1 = s1\n 18653: ra = 250, jump @0\n      : @284 [@dyn 125] (gas: 6)\n 18659: i32 a1 = a0 + 0\n 18661: a0 = 0x1\n 18664: a2 = s1\n 18666: ra = 0xfc\n 18670: ecalli 12 // 'seal_return'\n 18672: fallthrough\n      : @285 [@dyn 126] (gas: 12)\n 18673: a1 = u64 [a0 + 0x10]\n 18676: a2 = u64 [a0 + 0x18]\n 18679: a3 = u64 [a0 + 0x8]\n 18682: a0 = u64 [a0]\n 18684: a2 = a2 | a3\n 18687: a3 = a0 | a1\n 18690: a3 = a3 | a2\n 18693: a3 = a3 >> 0x20\n 18696: a1 = a1 | a2\n 18699: a1 = a1 << 0x20\n 18702: a1 = a1 | a3\n 18705: jump @288 if a1 != 0\n      : @286 (gas: 7)\n 18709: sp = sp + 0xfffffffffffffff0\n 18712: u64 [sp + 0x8] = ra\n 18715: u64 [sp] = s0\n 18717: i32 a0 = a0 + 0\n 18719: a1 = 0x20\n 18722: s0 = 0x20\n 18725: ra = 254, jump @0\n      : @287 [@dyn 127] (gas: 37)\n 18731: u8 [a0 + 31] = 0\n 18734: u8 [a0 + 30] = 0\n 18737: u8 [a0 + 29] = 0\n 18740: u8 [a0 + 28] = 0\n 18743: u8 [a0 + 27] = 0\n 18746: u8 [a0 + 26] = 0\n 18749: u8 [a0 + 25] = 0\n 18752: u8 [a0 + 24] = 0\n 18755: u8 [a0 + 23] = 0\n 18758: u8 [a0 + 22] = 0\n 18761: u8 [a0 + 21] = 0\n 18764: u8 [a0 + 20] = 0\n 18767: u8 [a0 + 19] = 0\n 18770: u8 [a0 + 18] = 0\n 18773: u8 [a0 + 17] = 0\n 18776: u8 [a0 + 16] = 0\n 18779: u8 [a0 + 15] = 0\n 18782: u8 [a0 + 14] = 0\n 18785: u8 [a0 + 13] = 0\n 18788: u8 [a0 + 12] = 0\n 18791: u8 [a0 + 11] = 0\n 18794: u8 [a0 + 10] = 0\n 18797: u8 [a0 + 9] = 0\n 18800: u8 [a0 + 8] = 0\n 18803: u8 [a0 + 7] = 0\n 18806: u8 [a0 + 6] = 0x64\n 18810: u8 [a0 + 5] = 0x72\n 18814: u8 [a0 + 4] = 0x61\n 18818: u8 [a0 + 3] = 0x63\n 18822: u8 [a0 + 0x2] = s0\n 18825: u8 [a0 + 1] = 0x6f\n 18829: a1 = 0x4e\n 18832: u8 [a0] = a1\n 18834: ra = u64 [sp + 0x8]\n 18837: s0 = u64 [sp]\n 18839: sp = sp + 0x10\n 18842: ret\n      : @288 (gas: 1)\n 18844: trap\n      : @289 (gas: 17)\n 18845: sp = sp + 0xffffffffffffffa0\n 18848: u64 [sp + 0x58] = ra\n 18851: u64 [sp + 0x50] = s0\n 18854: u64 [sp + 0x48] = s1\n 18857: a3 = u64 [a1 + 0x18]\n 18860: a4 = u64 [a1 + 0x10]\n 18863: a5 = u64 [a1 + 0x8]\n 18866: s1 = u64 [a1]\n 18868: a1 = a5 | a3\n 18871: a2 = s1 | a4\n 18874: a2 = a2 | a1\n 18877: a2 = a2 >> 0x20\n 18880: a1 = a1 | a4\n 18883: a1 = a1 << 0x20\n 18886: a1 = a1 | a2\n 18889: u64 [sp + 0x28] = a0\n 18892: jump @296 if a1 != 0\n      : @290 (gas: 19)\n 18896: a0 = s1 + 0x20\n 18899: u64 [sp + 0x30] = a0\n 18902: a0 = a0 <u s1\n 18905: a1 = a5 + a0\n 18908: u64 [sp + 0x40] = a1\n 18911: u64 [sp + 0x8] = a5\n 18914: s0 = a1 <u a5\n 18917: s0 = a0 if a0 == 0\n 18920: s0 = s0 + a4\n 18923: u64 [sp + 0x10] = a4\n 18926: a0 = s0 <u a4\n 18929: u64 [sp + 0x18] = a3\n 18932: a0 = a0 + a3\n 18935: u64 [sp + 0x38] = a0\n 18938: u64 [sp] = s1\n 18940: i32 a0 = s1 + 0\n 18942: a1 = 0x20\n 18945: s1 = 0x20\n 18948: ra = 256, jump @0\n      : @291 [@dyn 128] (gas: 45)\n 18954: u8 [a0 + 0x1f] = s1\n 18957: a1 = u64 [sp + 0x30]\n 18960: s1 = a1\n 18962: a1 = a1 | s0\n 18965: a2 = u64 [sp + 0x40]\n 18968: a4 = u64 [sp + 0x38]\n 18971: a2 = a2 | a4\n 18974: a1 = a1 | a2\n 18977: a1 = a1 >> 0x20\n 18980: u64 [sp + 0x20] = s0\n 18983: a2 = a2 | s0\n 18986: a2 = a2 << 0x20\n 18989: a1 = a1 | a2\n 18992: u8 [a0 + 30] = 0\n 18995: u8 [a0 + 29] = 0\n 18998: u8 [a0 + 28] = 0\n 19001: u8 [a0 + 27] = 0\n 19004: u8 [a0 + 26] = 0\n 19007: u8 [a0 + 25] = 0\n 19010: u8 [a0 + 24] = 0\n 19013: u8 [a0 + 23] = 0\n 19016: u8 [a0 + 22] = 0\n 19019: u8 [a0 + 21] = 0\n 19022: u8 [a0 + 20] = 0\n 19025: u8 [a0 + 19] = 0\n 19028: u8 [a0 + 18] = 0\n 19031: u8 [a0 + 17] = 0\n 19034: u8 [a0 + 16] = 0\n 19037: u8 [a0 + 15] = 0\n 19040: u8 [a0 + 14] = 0\n 19043: u8 [a0 + 13] = 0\n 19046: u8 [a0 + 12] = 0\n 19049: u8 [a0 + 11] = 0\n 19052: u8 [a0 + 10] = 0\n 19055: u8 [a0 + 9] = 0\n 19058: u8 [a0 + 8] = 0\n 19061: u8 [a0 + 7] = 0\n 19064: u8 [a0 + 6] = 0\n 19067: u8 [a0 + 5] = 0\n 19070: u8 [a0 + 4] = 0\n 19073: u8 [a0 + 3] = 0\n 19076: u8 [a0 + 2] = 0\n 19079: u8 [a0 + 1] = 0\n 19082: u8 [a0 + 0] = 0\n 19084: jump @296 if a1 != 0\n      : @292 (gas: 4)\n 19088: i32 s0 = s1 + 0\n 19090: a1 = 0x20\n 19093: a0 = s0\n 19095: ra = 258, jump @0\n      : @293 [@dyn 129] (gas: 41)\n 19101: u8 [a0 + 31] = 0x7\n 19105: u8 [a0 + 30] = 0\n 19108: u8 [a0 + 29] = 0\n 19111: u8 [a0 + 28] = 0\n 19114: u8 [a0 + 27] = 0\n 19117: u8 [a0 + 26] = 0\n 19120: u8 [a0 + 25] = 0\n 19123: u8 [a0 + 24] = 0\n 19126: u8 [a0 + 23] = 0\n 19129: u8 [a0 + 22] = 0\n 19132: u8 [a0 + 21] = 0\n 19135: u8 [a0 + 20] = 0\n 19138: u8 [a0 + 19] = 0\n 19141: u8 [a0 + 18] = 0\n 19144: u8 [a0 + 17] = 0\n 19147: u8 [a0 + 16] = 0\n 19150: u8 [a0 + 15] = 0\n 19153: u8 [a0 + 14] = 0\n 19156: u8 [a0 + 13] = 0\n 19159: u8 [a0 + 12] = 0\n 19162: u8 [a0 + 11] = 0\n 19165: u8 [a0 + 10] = 0\n 19168: u8 [a0 + 9] = 0\n 19171: u8 [a0 + 8] = 0\n 19174: u8 [a0 + 7] = 0\n 19177: u8 [a0 + 6] = 0\n 19180: u8 [a0 + 5] = 0\n 19183: u8 [a0 + 4] = 0\n 19186: u8 [a0 + 3] = 0\n 19189: u8 [a0 + 2] = 0\n 19192: u8 [a0 + 1] = 0\n 19195: a1 = u64 [sp + 0x20]\n 19198: a2 = u64 [sp + 0x38]\n 19201: a1 = a1 | a2\n 19204: a2 = 0xffffffe0\n 19214: a2 = s1 <u a2\n 19217: a3 = u64 [sp + 0x40]\n 19220: a2 = 0 if a3 != 0\n 19222: a2 = 0 if a1 != 0\n 19224: u8 [a0 + 0] = 0\n 19226: jump @296 if a2 == 0\n      : @294 (gas: 3)\n 19230: i32 a0 = s0 + 0x20\n 19233: a1 = 0x20\n 19236: ra = 260, jump @0\n      : @295 [@dyn 130] (gas: 54)\n 19242: u8 [a0 + 31] = 0\n 19245: u8 [a0 + 30] = 0\n 19248: u8 [a0 + 29] = 0\n 19251: u8 [a0 + 28] = 0\n 19254: u8 [a0 + 27] = 0\n 19257: u8 [a0 + 26] = 0\n 19260: u8 [a0 + 25] = 0\n 19263: u8 [a0 + 24] = 0\n 19266: u8 [a0 + 23] = 0\n 19269: u8 [a0 + 22] = 0\n 19272: u8 [a0 + 21] = 0\n 19275: u8 [a0 + 20] = 0\n 19278: u8 [a0 + 19] = 0\n 19281: u8 [a0 + 18] = 0\n 19284: u8 [a0 + 17] = 0\n 19287: u8 [a0 + 16] = 0\n 19290: u8 [a0 + 15] = 0\n 19293: u8 [a0 + 14] = 0\n 19296: u8 [a0 + 13] = 0\n 19299: u8 [a0 + 12] = 0\n 19302: u8 [a0 + 11] = 0\n 19305: u8 [a0 + 10] = 0\n 19308: u8 [a0 + 9] = 0\n 19311: u8 [a0 + 8] = 0\n 19314: u8 [a0 + 7] = 0\n 19317: u8 [a0 + 6] = 0x64\n 19321: u8 [a0 + 5] = 0x72\n 19325: u8 [a0 + 4] = 0x61\n 19329: u8 [a0 + 3] = 0x63\n 19333: u8 [a0 + 2] = 0x20\n 19337: u8 [a0 + 1] = 0x6f\n 19341: u8 [a0 + 0] = 0x4e\n 19344: a1 = u64 [sp]\n 19346: a0 = a1 + 0x60\n 19349: a1 = a0 <u a1\n 19352: a3 = u64 [sp + 0x8]\n 19355: a2 = a3 + a1\n 19358: a3 = a2 <u a3\n 19361: a3 = a1 if a1 == 0\n 19364: a1 = u64 [sp + 0x10]\n 19367: a3 = a3 + a1\n 19370: a1 = a3 <u a1\n 19373: a4 = u64 [sp + 0x18]\n 19376: a1 = a1 + a4\n 19379: a4 = u64 [sp + 0x28]\n 19382: u64 [a4] = a0\n 19384: u64 [a4 + 0x8] = a2\n 19387: u64 [a4 + 0x10] = a3\n 19390: u64 [a4 + 0x18] = a1\n 19393: ra = u64 [sp + 0x58]\n 19396: s0 = u64 [sp + 0x50]\n 19399: s1 = u64 [sp + 0x48]\n 19402: sp = sp + 0x60\n 19405: ret\n      : @296 (gas: 1)\n 19407: trap\n      : @297 (gas: 22)\n 19408: sp = sp + 0xffffffffffffff20\n 19412: u64 [sp + 0xd8] = ra\n 19416: u64 [sp + 0xd0] = s0\n 19420: u64 [sp + 0xc8] = s1\n 19424: s0 = sp + 0xe0\n 19428: sp = sp & 0xffffffffffffffe0\n 19431: a4 = u64 [a1 + 0x10]\n 19434: a5 = u64 [a1 + 0x18]\n 19437: a2 = u64 [a1 + 0x8]\n 19440: a3 = u64 [a1]\n 19442: u64 [sp + 0x30] = a2\n 19445: u64 [sp + 0x18] = a5\n 19448: a1 = a2 | a5\n 19451: u64 [sp + 0x38] = a3\n 19454: a2 = a3 | a4\n 19457: a2 = a2 | a1\n 19460: a2 = a2 >> 0x20\n 19463: u64 [sp + 0x20] = a4\n 19466: a1 = a1 | a4\n 19469: a1 = a1 << 0x20\n 19472: a1 = a1 | a2\n 19475: jump @309 if a1 != 0\n      : @298 (gas: 12)\n 19479: a1 = u64 [a0 + 0x18]\n 19482: u64 [sp + 0x48] = a1\n 19485: a1 = u64 [a0 + 0x10]\n 19488: u64 [sp + 0x50] = a1\n 19491: a1 = u64 [a0 + 0x8]\n 19494: u64 [sp + 0x58] = a1\n 19497: a0 = u64 [a0]\n 19499: u64 [sp + 0x40] = a0\n 19502: a0 = i32 [sp + 0x38]\n 19505: a1 = 0x20\n 19508: u64 [sp + 0x28] = a0\n 19511: ra = 262, jump @0\n      : @299 [@dyn 131] (gas: 105)\n 19517: a1 = u8 [a0 + 0x11]\n 19520: a2 = u8 [a0 + 0x10]\n 19523: a3 = u8 [a0 + 0x12]\n 19526: a4 = u8 [a0 + 0x13]\n 19529: a1 = a1 << 0x8\n 19532: a1 = a1 | a2\n 19535: a3 = a3 << 0x10\n 19538: a4 = a4 << 0x18\n 19541: a3 = a3 | a4\n 19544: a1 = a1 | a3\n 19547: a2 = u8 [a0 + 0x15]\n 19550: a3 = u8 [a0 + 0x14]\n 19553: a4 = u8 [a0 + 0x16]\n 19556: a5 = u8 [a0 + 0x17]\n 19559: a2 = a2 << 0x8\n 19562: a2 = a2 | a3\n 19565: a4 = a4 << 0x10\n 19568: a5 = a5 << 0x18\n 19571: a4 = a4 | a5\n 19574: a2 = a2 | a4\n 19577: a2 = a2 << 0x20\n 19580: a1 = a1 | a2\n 19583: a2 = u8 [a0 + 0x19]\n 19586: a3 = u8 [a0 + 0x18]\n 19589: a4 = u8 [a0 + 0x1a]\n 19592: a5 = u8 [a0 + 0x1b]\n 19595: a2 = a2 << 0x8\n 19598: a2 = a2 | a3\n 19601: a4 = a4 << 0x10\n 19604: a5 = a5 << 0x18\n 19607: a4 = a4 | a5\n 19610: a2 = a2 | a4\n 19613: a3 = u8 [a0 + 0x1d]\n 19616: a4 = u8 [a0 + 0x1c]\n 19619: a5 = u8 [a0 + 0x1e]\n 19622: s1 = u8 [a0 + 0x1f]\n 19625: a3 = a3 << 0x8\n 19628: a3 = a3 | a4\n 19631: a5 = a5 << 0x10\n 19634: s1 = s1 << 0x18\n 19637: a5 = a5 | s1\n 19640: a3 = a3 | a5\n 19643: a3 = a3 << 0x20\n 19646: a2 = a2 | a3\n 19649: a3 = u8 [a0 + 0xd]\n 19652: a4 = u8 [a0 + 0xc]\n 19655: a5 = u8 [a0 + 0xe]\n 19658: a0 = u8 [a0 + 0xf]\n 19661: a3 = a3 << 0x8\n 19664: a3 = a3 | a4\n 19667: a5 = a5 << 0x10\n 19670: a0 = a0 << 0x18\n 19673: a0 = a0 | a5\n 19676: a0 = a0 | a3\n 19679: a2 = reverse a2\n 19681: u64 [sp + 0x10] = a2\n 19684: a1 = reverse a1\n 19686: u64 [sp + 0x8] = a1\n 19689: s1 = reverse a0\n 19691: s1 = s1 >> 0x20\n 19694: u64 [sp] = s1\n 19696: a0 = u64 [sp + 0x48]\n 19699: u64 [sp + 0x98] = a0\n 19703: a0 = u64 [sp + 0x50]\n 19706: u64 [sp + 0x90] = a0\n 19710: a0 = u64 [sp + 0x58]\n 19713: u64 [sp + 0x88] = a0\n 19717: s1 = u64 [sp + 0x40]\n 19720: u64 [sp + 0x80] = s1\n 19724: u64 [sp + 184] = 0\n 19728: u64 [sp + 176] = 0\n 19732: u64 [sp + 168] = 0\n 19736: u64 [sp + 160] = 0\n 19740: u32 [sp + 96] = 0x20\n 19744: i32 a1 = sp + 0x80\n 19748: i32 a3 = sp + 0xa0\n 19752: i32 a4 = sp + 0x60\n 19755: a2 = 0xffffffffffffffff\n 19758: a0 = 0\n 19760: ecalli 7 // 'get_storage'\n 19762: a0 = u32 [sp + 0xb4]\n 19766: a0 = a0 << 0x20\n 19769: a1 = u64 [sp + 0xb8]\n 19773: a2 = u64 [sp]\n 19775: a0 = a0 | a2\n 19778: a2 = u64 [sp + 0x48]\n 19781: u64 [sp + 0x98] = a2\n 19785: a2 = u64 [sp + 0x50]\n 19788: u64 [sp + 0x90] = a2\n 19792: a2 = u64 [sp + 0x58]\n 19795: u64 [sp + 0x88] = a2\n 19799: u64 [sp + 0x80] = s1\n 19803: u64 [sp + 0xb8] = a1\n 19807: u64 [sp + 0xb0] = a0\n 19811: a0 = u64 [sp + 0x8]\n 19814: u64 [sp + 0xa8] = a0\n 19818: a0 = u64 [sp + 0x10]\n 19821: u64 [sp + 0xa0] = a0\n 19825: i32 a1 = sp + 0x80\n 19829: i32 a3 = sp + 0xa0\n 19833: a2 = 0xffffffffffffffff\n 19836: a4 = 0x20\n 19839: a0 = 0\n 19841: ecalli 14 // 'set_storage'\n 19843: fallthrough\n      : @300 (gas: 13)\n 19844: a0 = u64 [sp + 0x20]\n 19847: a2 = u64 [sp + 0x18]\n 19850: a2 = a2 | a0\n 19853: a0 = 0x100000000\n 19863: u64 [sp + 0x18] = a0\n 19866: a0 = 0xffffffe0\n 19876: a1 = u64 [sp + 0x38]\n 19879: a0 = a1 <u a0\n 19882: a1 = u64 [sp + 0x30]\n 19885: a0 = 0 if a1 != 0\n 19887: u64 [sp + 0x20] = a2\n 19890: a0 = 0 if a2 != 0\n 19892: jump @309 if a0 == 0\n      : @301 (gas: 4)\n 19896: a0 = u64 [sp + 0x28]\n 19899: i32 a0 = a0 + 0x20\n 19902: a1 = 0x20\n 19905: ra = 264, jump @0\n      : @302 [@dyn 132] (gas: 47)\n 19911: s1 = u8 [a0 + 0x1f]\n 19914: a0 = u64 [sp + 0x48]\n 19917: u64 [sp + 0x98] = a0\n 19921: a0 = u64 [sp + 0x50]\n 19924: u64 [sp + 0x90] = a0\n 19928: a0 = u64 [sp + 0x58]\n 19931: u64 [sp + 0x88] = a0\n 19935: a0 = u64 [sp + 0x40]\n 19938: u64 [sp + 0x80] = a0\n 19942: u64 [sp + 184] = 0\n 19946: u64 [sp + 176] = 0\n 19950: u64 [sp + 168] = 0\n 19954: u64 [sp + 160] = 0\n 19958: u32 [sp + 96] = 0x20\n 19962: i32 a1 = sp + 0x80\n 19966: i32 a3 = sp + 0xa0\n 19970: i32 a4 = sp + 0x60\n 19973: a2 = 0xffffffffffffffff\n 19976: a0 = 0\n 19978: ecalli 7 // 'get_storage'\n 19980: a0 = u64 [sp + 0xa0]\n 19984: a1 = u64 [sp + 0xa8]\n 19988: a2 = u64 [sp + 0xb8]\n 19992: a3 = u64 [sp + 0xb0]\n 19996: s1 = s1 << 0x20\n 19999: a4 = 0xffffff00ffffffff\n 20009: a3 = a3 & a4\n 20012: a3 = a3 | s1\n 20015: a4 = u64 [sp + 0x48]\n 20018: u64 [sp + 0x98] = a4\n 20022: a4 = u64 [sp + 0x50]\n 20025: u64 [sp + 0x90] = a4\n 20029: a4 = u64 [sp + 0x58]\n 20032: u64 [sp + 0x88] = a4\n 20036: a4 = u64 [sp + 0x40]\n 20039: u64 [sp + 0x80] = a4\n 20043: u64 [sp + 0xb8] = a2\n 20047: u64 [sp + 0xb0] = a3\n 20051: u64 [sp + 0xa8] = a1\n 20055: u64 [sp + 0xa0] = a0\n 20059: i32 a1 = sp + 0x80\n 20063: i32 a3 = sp + 0xa0\n 20067: a2 = 0xffffffffffffffff\n 20070: a4 = 0x20\n 20073: a0 = 0\n 20075: ecalli 14 // 'set_storage'\n 20077: fallthrough\n      : @303 (gas: 9)\n 20078: a0 = u64 [sp + 0x18]\n 20081: a0 = a0 + 0xffffffffffffffc0\n 20084: a1 = u64 [sp + 0x38]\n 20087: a0 = a1 <u a0\n 20090: a1 = u64 [sp + 0x30]\n 20093: a0 = 0 if a1 != 0\n 20095: a1 = u64 [sp + 0x20]\n 20098: a0 = 0 if a1 != 0\n 20100: jump @309 if a0 == 0\n      : @304 (gas: 4)\n 20104: a0 = u64 [sp + 0x28]\n 20107: i32 a0 = a0 + 0x40\n 20110: a1 = 0x20\n 20113: ra = 266, jump @0\n      : @305 [@dyn 133] (gas: 47)\n 20119: s1 = u8 [a0 + 0x1f]\n 20122: a0 = u64 [sp + 0x48]\n 20125: u64 [sp + 0x98] = a0\n 20129: a0 = u64 [sp + 0x50]\n 20132: u64 [sp + 0x90] = a0\n 20136: a0 = u64 [sp + 0x58]\n 20139: u64 [sp + 0x88] = a0\n 20143: a0 = u64 [sp + 0x40]\n 20146: u64 [sp + 0x80] = a0\n 20150: u64 [sp + 184] = 0\n 20154: u64 [sp + 176] = 0\n 20158: u64 [sp + 168] = 0\n 20162: u64 [sp + 160] = 0\n 20166: u32 [sp + 96] = 0x20\n 20170: i32 a1 = sp + 0x80\n 20174: i32 a3 = sp + 0xa0\n 20178: i32 a4 = sp + 0x60\n 20181: a2 = 0xffffffffffffffff\n 20184: a0 = 0\n 20186: ecalli 7 // 'get_storage'\n 20188: a0 = u64 [sp + 0xa0]\n 20192: a1 = u64 [sp + 0xa8]\n 20196: a2 = u64 [sp + 0xb0]\n 20200: a3 = u64 [sp + 0xb8]\n 20204: s1 = s1 << 0x28\n 20207: a4 = 0xffff00ffffffffff\n 20217: a2 = a2 & a4\n 20220: a2 = a2 | s1\n 20223: a4 = u64 [sp + 0x48]\n 20226: u64 [sp + 0x98] = a4\n 20230: a4 = u64 [sp + 0x50]\n 20233: u64 [sp + 0x90] = a4\n 20237: a4 = u64 [sp + 0x58]\n 20240: u64 [sp + 0x88] = a4\n 20244: a4 = u64 [sp + 0x40]\n 20247: u64 [sp + 0x80] = a4\n 20251: u64 [sp + 0xb8] = a3\n 20255: u64 [sp + 0xb0] = a2\n 20259: u64 [sp + 0xa8] = a1\n 20263: u64 [sp + 0xa0] = a0\n 20267: i32 a1 = sp + 0x80\n 20271: i32 a3 = sp + 0xa0\n 20275: a2 = 0xffffffffffffffff\n 20278: a4 = 0x20\n 20281: a0 = 0\n 20283: ecalli 14 // 'set_storage'\n 20285: fallthrough\n      : @306 (gas: 8)\n 20286: a0 = 0xffffffa0\n 20296: a1 = u64 [sp + 0x38]\n 20299: a0 = a1 <u a0\n 20302: a1 = u64 [sp + 0x30]\n 20305: a0 = 0 if a1 != 0\n 20307: a1 = u64 [sp + 0x20]\n 20310: a0 = 0 if a1 != 0\n 20312: jump @309 if a0 == 0\n      : @307 (gas: 4)\n 20316: a0 = u64 [sp + 0x28]\n 20319: i32 a0 = a0 + 0x60\n 20322: a1 = 0x20\n 20325: ra = 268, jump @0\n      : @308 [@dyn 134] (gas: 141)\n 20331: a1 = u8 [a0 + 0x1d]\n 20334: a2 = u8 [a0 + 0x1c]\n 20337: a3 = u8 [a0 + 0x1e]\n 20340: a4 = u8 [a0 + 0x1f]\n 20343: a1 = a1 << 0x8\n 20346: a1 = a1 | a2\n 20349: a3 = a3 << 0x10\n 20352: a4 = a4 << 0x18\n 20355: a3 = a3 | a4\n 20358: a1 = a1 | a3\n 20361: a2 = u8 [a0 + 0xd]\n 20364: a3 = u8 [a0 + 0xc]\n 20367: a4 = u8 [a0 + 0xe]\n 20370: a5 = u8 [a0 + 0xf]\n 20373: a2 = a2 << 0x8\n 20376: a2 = a2 | a3\n 20379: a4 = a4 << 0x10\n 20382: a5 = a5 << 0x18\n 20385: a4 = a4 | a5\n 20388: a2 = a2 | a4\n 20391: a1 = a1 | a2\n 20394: a1 = a1 << 0x20\n 20397: a2 = u8 [a0 + 0x9]\n 20400: a3 = u8 [a0 + 0x8]\n 20403: a4 = u8 [a0 + 0xa]\n 20406: a5 = u8 [a0 + 0xb]\n 20409: a2 = a2 << 0x8\n 20412: a2 = a2 | a3\n 20415: a4 = a4 << 0x10\n 20418: a5 = a5 << 0x18\n 20421: a4 = a4 | a5\n 20424: a2 = a2 | a4\n 20427: a3 = u8 [a0 + 0x19]\n 20430: a4 = u8 [a0 + 0x18]\n 20433: a5 = u8 [a0 + 0x1a]\n 20436: s1 = u8 [a0 + 0x1b]\n 20439: a3 = a3 << 0x8\n 20442: a3 = a3 | a4\n 20445: a5 = a5 << 0x10\n 20448: s1 = s1 << 0x18\n 20451: a5 = a5 | s1\n 20454: a3 = a3 | a5\n 20457: a2 = a2 | a3\n 20460: a1 = a1 | a2\n 20463: a2 = u8 [a0 + 0x15]\n 20466: a3 = u8 [a0 + 0x14]\n 20469: a4 = u8 [a0 + 0x16]\n 20472: a5 = u8 [a0 + 0x17]\n 20475: a2 = a2 << 0x8\n 20478: a2 = a2 | a3\n 20481: a4 = a4 << 0x10\n 20484: a5 = a5 << 0x18\n 20487: a4 = a4 | a5\n 20490: a2 = a2 | a4\n 20493: a3 = u8 [a0 + 0x5]\n 20496: a4 = u8 [a0 + 0x4]\n 20499: a5 = u8 [a0 + 0x6]\n 20502: s1 = u8 [a0 + 0x7]\n 20505: a3 = a3 << 0x8\n 20508: a3 = a3 | a4\n 20511: a5 = a5 << 0x10\n 20514: s1 = s1 << 0x18\n 20517: a5 = a5 | s1\n 20520: a3 = a3 | a5\n 20523: a2 = a2 | a3\n 20526: a3 = u8 [a0 + 0x1]\n 20529: a4 = u8 [a0]\n 20531: a5 = u8 [a0 + 0x2]\n 20534: s1 = u8 [a0 + 0x3]\n 20537: a3 = a3 << 0x8\n 20540: a3 = a3 | a4\n 20543: a5 = a5 << 0x10\n 20546: s1 = s1 << 0x18\n 20549: a4 = u8 [a0 + 0x11]\n 20552: a5 = a5 | s1\n 20555: a3 = a3 | a5\n 20558: a5 = u8 [a0 + 0x10]\n 20561: a4 = a4 << 0x8\n 20564: s1 = u8 [a0 + 0x12]\n 20567: a0 = u8 [a0 + 0x13]\n 20570: a4 = a4 | a5\n 20573: a2 = a2 << 0x20\n 20576: s1 = s1 << 0x10\n 20579: a0 = a0 << 0x18\n 20582: a0 = a0 | s1\n 20585: a0 = a0 | a4\n 20588: a0 = a0 | a3\n 20591: a0 = a0 | a2\n 20594: a0 = a0 | a1\n 20597: s1 = a0 >u 0\n 20599: a0 = u64 [sp + 0x48]\n 20602: u64 [sp + 0x98] = a0\n 20606: a0 = u64 [sp + 0x50]\n 20609: u64 [sp + 0x90] = a0\n 20613: a0 = u64 [sp + 0x58]\n 20616: u64 [sp + 0x88] = a0\n 20620: a0 = u64 [sp + 0x40]\n 20623: u64 [sp + 0x80] = a0\n 20627: u64 [sp + 184] = 0\n 20631: u64 [sp + 176] = 0\n 20635: u64 [sp + 168] = 0\n 20639: u64 [sp + 160] = 0\n 20643: u32 [sp + 96] = 0x20\n 20647: i32 a1 = sp + 0x80\n 20651: i32 a3 = sp + 0xa0\n 20655: i32 a4 = sp + 0x60\n 20658: a2 = 0xffffffffffffffff\n 20661: a0 = 0\n 20663: ecalli 7 // 'get_storage'\n 20665: a0 = u64 [sp + 0xa0]\n 20669: a1 = u64 [sp + 0xa8]\n 20673: a2 = u64 [sp + 0xb8]\n 20677: a3 = u64 [sp + 0xb0]\n 20681: s1 = s1 << 0x30\n 20684: a4 = 0xff00ffffffffffff\n 20694: a3 = a3 & a4\n 20697: a3 = a3 | s1\n 20700: a4 = u64 [sp + 0x48]\n 20703: u64 [sp + 0x98] = a4\n 20707: a4 = u64 [sp + 0x50]\n 20710: u64 [sp + 0x90] = a4\n 20714: a4 = u64 [sp + 0x58]\n 20717: u64 [sp + 0x88] = a4\n 20721: a4 = u64 [sp + 0x40]\n 20724: u64 [sp + 0x80] = a4\n 20728: u64 [sp + 0xb8] = a2\n 20732: u64 [sp + 0xb0] = a3\n 20736: u64 [sp + 0xa8] = a1\n 20740: u64 [sp + 0xa0] = a0\n 20744: i32 a1 = sp + 0x80\n 20748: i32 a3 = sp + 0xa0\n 20752: a2 = 0xffffffffffffffff\n 20755: a4 = 0x20\n 20758: a0 = 0\n 20760: ecalli 14 // 'set_storage'\n 20762: sp = s0 + 0xffffffffffffff20\n 20766: ra = u64 [sp + 0xd8]\n 20770: s0 = u64 [sp + 0xd0]\n 20774: s1 = u64 [sp + 0xc8]\n 20778: sp = sp + 0xe0\n 20782: ret\n      : @309 (gas: 1)\n 20784: trap\n      : @310 (gas: 7)\n 20785: a3 = u64 [sp + 0x1f8]\n 20789: s1 = u64 [sp + 0x1f0]\n 20793: a2 = u64 [sp + 0x1e8]\n 20797: a0 = s1 | a3\n 20800: a1 = a2 <u 0x1\n 20803: a1 = 0 if a0 != 0\n 20805: jump @315 if a1 == 0\n      : @311 (gas: 49)\n 20809: a0 = u64 [sp + 0x1e0]\n 20813: u64 [sp + 0x18] = a0\n 20816: a0 = a0 + 0x1\n 20819: a1 = a0 <u 0x1\n 20822: a1 = a1 + a2\n 20825: u64 [sp + 0x1e0] = a0\n 20829: a0 = a0 | a1\n 20832: u64 [sp + 0x1e8] = a1\n 20836: a0 = a0 <u 0x1\n 20839: a0 = a0 + s1\n 20842: u64 [sp + 0x1f0] = a0\n 20846: a0 = a0 <u s1\n 20849: a0 = a0 + a3\n 20852: u64 [sp + 0x1f8] = a0\n 20856: a0 = u64 [sp + 0x50]\n 20859: u64 [sp + 0x1c8] = a0\n 20863: a0 = u64 [sp + 0x58]\n 20866: u64 [sp + 0x1c0] = a0\n 20870: a0 = u64 [sp + 0x48]\n 20873: u64 [sp + 0x1d0] = a0\n 20877: a0 = u64 [sp + 0x40]\n 20880: u64 [sp + 0x1d8] = a0\n 20884: i32 a1 = sp + 0x1c0\n 20888: u64 [sp + 0x10] = a3\n 20891: i32 a3 = sp + 0x1e0\n 20895: u64 [sp + 0x8] = a2\n 20898: a2 = 0xffffffffffffffff\n 20901: a4 = 0x20\n 20904: a0 = 0\n 20906: ecalli 14 // 'set_storage'\n 20908: a0 = u64 [sp + 0x10]\n 20911: u64 [sp + 0x138] = a0\n 20915: u64 [sp + 0x130] = s1\n 20919: a0 = u64 [sp + 0x8]\n 20922: u64 [sp + 0x128] = a0\n 20926: a0 = u64 [sp + 0x18]\n 20929: u64 [sp + 0x120] = a0\n 20933: a0 = u64 [sp + 0x40]\n 20936: u64 [sp + 0x158] = a0\n 20940: a0 = u64 [sp + 0x48]\n 20943: u64 [sp + 0x150] = a0\n 20947: a0 = u64 [sp + 0x50]\n 20950: u64 [sp + 0x148] = a0\n 20954: a0 = sp + 0x160\n 20958: a1 = sp + 0x140\n 20962: a2 = sp + 0x120\n 20966: a3 = u64 [sp + 0x58]\n 20969: u64 [sp + 0x140] = a3\n 20973: ra = 270, jump @222\n      : @312 [@dyn 135] (gas: 8)\n 20979: a0 = u64 [sp + 0x198]\n 20983: a1 = u64 [sp + 0x190]\n 20987: a2 = u64 [sp + 0x188]\n 20991: a3 = u64 [sp + 0x180]\n 20995: a0 = a0 | a2\n 20998: a1 = a1 | a3\n 21001: a0 = a0 | a1\n 21004: jump @317 if a0 != 0\n      : @313 (gas: 19)\n 21008: a2 = u64 [sp + 0x178]\n 21012: a0 = u64 [sp + 0x170]\n 21016: a1 = u64 [sp + 0x168]\n 21020: a3 = u64 [sp + 0x160]\n 21024: a4 = u64 [sp + 0x20]\n 21027: u64 [sp + 0xa0] = a4\n 21031: u64 [sp + 0xc0] = a3\n 21035: a3 = u64 [sp + 0x28]\n 21038: u64 [sp + 0xa8] = a3\n 21042: u64 [sp + 0xc8] = a1\n 21046: a1 = u64 [sp + 0x30]\n 21049: u64 [sp + 0xb0] = a1\n 21053: u64 [sp + 0xd0] = a0\n 21057: a0 = u64 [sp + 0x38]\n 21060: u64 [sp + 0xb8] = a0\n 21064: a0 = sp + 0xc0\n 21068: a1 = sp + 0xa0\n 21072: u64 [sp + 0xd8] = a2\n 21076: ra = 272, jump @297\n      : @314 [@dyn 136] (gas: 6)\n 21082: sp = s0 + 0xfffffffffffffde0\n 21086: ra = u64 [sp + 0x218]\n 21090: s0 = u64 [sp + 0x210]\n 21094: s1 = u64 [sp + 0x208]\n 21098: sp = sp + 0x220\n 21102: ret\n      : @315 (gas: 8)\n 21104: u64 [sp + 144] = 0\n 21108: u64 [sp + 136] = 0\n 21112: u64 [sp + 128] = 0\n 21116: a0 = 0x4e487b7100000000\n 21126: a1 = sp + 0x80\n 21130: u64 [sp + 0x98] = a0\n 21134: a0 = 0\n 21136: ra = 274, jump @8\n      : @316 [@dyn 137] (gas: 8)\n 21142: u64 [sp + 120] = 0\n 21145: u64 [sp + 112] = 0\n 21148: u64 [sp + 96] = 0x41\n 21152: a0 = 0x4\n 21155: a1 = sp + 0x60\n 21158: u64 [sp + 104] = 0\n 21161: ra = 0x116\n 21165: jump @8\n      : @317 (gas: 8)\n 21168: u64 [sp + 272] = 0\n 21172: u64 [sp + 264] = 0\n 21176: u64 [sp + 256] = 0\n 21180: a0 = 0x4e487b7100000000\n 21190: a1 = sp + 0x100\n 21194: u64 [sp + 0x118] = a0\n 21198: a0 = 0\n 21200: ra = 276, jump @8\n      : @318 [@dyn 138] (gas: 7)\n 21206: u64 [sp + 248] = 0\n 21210: u64 [sp + 240] = 0\n 21214: u64 [sp + 232] = 0\n 21218: a0 = 0x4\n 21221: a1 = sp + 0xe0\n 21225: u64 [sp + 224] = 0\n 21229: ra = 278, jump @8\n      : @319 [@dyn 139] (gas: 3)\n 21235: a1 = 0x24\n 21238: a0 = 0\n 21240: ra = 280, jump @0\n      : @320 [@dyn 140] (gas: 6)\n 21246: i32 a1 = a0 + 0\n 21248: a0 = 0x1\n 21251: a2 = 0x24\n 21254: ra = 0x11a\n 21258: ecalli 12 // 'seal_return'\n 21260: fallthrough\n      : @321 [@dyn 141] (gas: 10)\n 21261: sp = sp + 0xfffffffffffffd20\n 21265: u64 [sp + 0x2d8] = ra\n 21269: u64 [sp + 0x2d0] = s0\n 21273: u64 [sp + 0x2c8] = s1\n 21277: s0 = sp + 0x2e0\n 21281: sp = sp & 0xffffffffffffffe0\n 21284: a0 = u64 [a0]\n 21286: u64 [sp + 0x50] = a0\n 21289: a0 = a0 & 0xff\n 21293: jump @356 if a0 >u 16\n      : @322 (gas: 4)\n 21298: a0 = u64 [a1]\n 21300: u64 [sp + 0x10] = a0\n 21303: a0 = a0 & 0xff\n 21307: jump @356 if a0 >=u 17\n      : @323 (gas: 32)\n 21312: u64 [sp + 664] = 0\n 21316: u64 [sp + 656] = 0\n 21320: u64 [sp + 648] = 0\n 21324: u64 [sp + 640] = 0x1\n 21329: u64 [sp + 696] = 0\n 21333: u64 [sp + 688] = 0\n 21337: u64 [sp + 680] = 0\n 21341: u64 [sp + 672] = 0\n 21345: u32 [sp + 704] = 0x20\n 21350: i32 a1 = sp + 0x280\n 21354: i32 a3 = sp + 0x2a0\n 21358: i32 a4 = sp + 0x2c0\n 21362: a2 = 0xffffffffffffffff\n 21365: a0 = 0\n 21367: ecalli 7 // 'get_storage'\n 21369: a0 = u64 [sp + 0x2b0]\n 21373: u64 [sp + 0x28] = a0\n 21376: a0 = u64 [sp + 0x2a8]\n 21380: u64 [sp + 0x20] = a0\n 21383: a0 = u64 [sp + 0x2a0]\n 21387: u64 [sp + 0x30] = a0\n 21390: i32 a0 = sp + 0x1c0\n 21394: ecalli 5 // 'caller'\n 21396: a0 = i32 [sp + 0x1d0]\n 21400: u64 [sp + 0x48] = a0\n 21403: a0 = u64 [sp + 0x1c0]\n 21407: u64 [sp + 0x40] = a0\n 21410: a0 = u64 [sp + 0x1c8]\n 21414: u64 [sp + 0x38] = a0\n 21417: a0 = 0x40\n 21420: a1 = 0x20\n 21423: ra = 284, jump @0\n      : @324 [@dyn 142] (gas: 102)\n 21429: a1 = u8 [a0 + 0x11]\n 21432: a2 = u8 [a0 + 0x10]\n 21435: a3 = u8 [a0 + 0x12]\n 21438: a4 = u8 [a0 + 0x13]\n 21441: a1 = a1 << 0x8\n 21444: a1 = a1 | a2\n 21447: a3 = a3 << 0x10\n 21450: a4 = a4 << 0x18\n 21453: a3 = a3 | a4\n 21456: a1 = a1 | a3\n 21459: a2 = u8 [a0 + 0x15]\n 21462: a3 = u8 [a0 + 0x14]\n 21465: a4 = u8 [a0 + 0x16]\n 21468: a5 = u8 [a0 + 0x17]\n 21471: a2 = a2 << 0x8\n 21474: a2 = a2 | a3\n 21477: a4 = a4 << 0x10\n 21480: a5 = a5 << 0x18\n 21483: a4 = a4 | a5\n 21486: a2 = a2 | a4\n 21489: a2 = a2 << 0x20\n 21492: t0 = a2 | a1\n 21495: a2 = u8 [a0 + 0x1]\n 21498: a3 = u8 [a0]\n 21500: a4 = u8 [a0 + 0x2]\n 21503: a5 = u8 [a0 + 0x3]\n 21506: a2 = a2 << 0x8\n 21509: a2 = a2 | a3\n 21512: a4 = a4 << 0x10\n 21515: a5 = a5 << 0x18\n 21518: a4 = a4 | a5\n 21521: a2 = a2 | a4\n 21524: a3 = u8 [a0 + 0x5]\n 21527: a4 = u8 [a0 + 0x4]\n 21530: a5 = u8 [a0 + 0x6]\n 21533: s1 = u8 [a0 + 0x7]\n 21536: a3 = a3 << 0x8\n 21539: a3 = a3 | a4\n 21542: a5 = a5 << 0x10\n 21545: s1 = s1 << 0x18\n 21548: a5 = a5 | s1\n 21551: a3 = a3 | a5\n 21554: a3 = a3 << 0x20\n 21557: a2 = a2 | a3\n 21560: a3 = u8 [a0 + 0x19]\n 21563: a4 = u8 [a0 + 0x18]\n 21566: a5 = u8 [a0 + 0x1a]\n 21569: s1 = u8 [a0 + 0x1b]\n 21572: a3 = a3 << 0x8\n 21575: a3 = a3 | a4\n 21578: a5 = a5 << 0x10\n 21581: s1 = s1 << 0x18\n 21584: a5 = a5 | s1\n 21587: a3 = a3 | a5\n 21590: a4 = u8 [a0 + 0x1d]\n 21593: a5 = u8 [a0 + 0x1c]\n 21596: s1 = u8 [a0 + 0x1e]\n 21599: a1 = u8 [a0 + 0x1f]\n 21602: a4 = a4 << 0x8\n 21605: a4 = a4 | a5\n 21608: s1 = s1 << 0x10\n 21611: a1 = a1 << 0x18\n 21614: a1 = a1 | s1\n 21617: a1 = a1 | a4\n 21620: a1 = a1 << 0x20\n 21623: a3 = a3 | a1\n 21626: a1 = u8 [a0 + 0x9]\n 21629: a4 = u8 [a0 + 0x8]\n 21632: a5 = u8 [a0 + 0xa]\n 21635: s1 = u8 [a0 + 0xb]\n 21638: a1 = a1 << 0x8\n 21641: a1 = a1 | a4\n 21644: a5 = a5 << 0x10\n 21647: s1 = s1 << 0x18\n 21650: a5 = a5 | s1\n 21653: a1 = a1 | a5\n 21656: a4 = u8 [a0 + 0xd]\n 21659: a5 = u8 [a0 + 0xc]\n 21662: s1 = u8 [a0 + 0xe]\n 21665: a0 = u8 [a0 + 0xf]\n 21668: a4 = a4 << 0x8\n 21671: a4 = a4 | a5\n 21674: s1 = s1 << 0x10\n 21677: a0 = a0 << 0x18\n 21680: a0 = a0 | s1\n 21683: a0 = a0 | a4\n 21686: a0 = a0 << 0x20\n 21689: a0 = a0 | a1\n 21692: s1 = reverse a0\n 21694: a3 = reverse a3\n 21696: a1 = reverse a2\n 21698: a0 = reverse t0\n 21700: u64 [sp + 0x78] = a0\n 21703: u64 [sp + 0x60] = a1\n 21706: a0 = a0 | a1\n 21709: a1 = a3 | s1\n 21712: a1 = a1 | a0\n 21715: a1 = a1 >> 0x20\n 21718: a0 = a0 | s1\n 21721: a0 = a0 << 0x20\n 21724: a0 = a0 | a1\n 21727: jump @368 if a0 != 0\n      : @325 (gas: 5)\n 21731: i32 a0 = a3 + 0\n 21733: a1 = 0x20\n 21736: u64 [sp + 0x68] = a0\n 21739: u64 [sp + 0x70] = a3\n 21742: ra = 286, jump @0\n      : @326 [@dyn 143] (gas: 43)\n 21748: u8 [a0 + 31] = 0\n 21751: u8 [a0 + 30] = 0\n 21754: u8 [a0 + 29] = 0\n 21757: u8 [a0 + 28] = 0\n 21760: u8 [a0 + 27] = 0\n 21763: u8 [a0 + 26] = 0\n 21766: u8 [a0 + 25] = 0\n 21769: u8 [a0 + 24] = 0\n 21772: u8 [a0 + 23] = 0\n 21775: u8 [a0 + 22] = 0\n 21778: u8 [a0 + 21] = 0\n 21781: u8 [a0 + 20] = 0\n 21784: u8 [a0 + 19] = 0\n 21787: u8 [a0 + 18] = 0\n 21790: u8 [a0 + 17] = 0\n 21793: u8 [a0 + 16] = 0\n 21796: u8 [a0 + 15] = 0\n 21799: u8 [a0 + 14] = 0\n 21802: u8 [a0 + 13] = 0\n 21805: u8 [a0 + 12] = 0\n 21808: u8 [a0 + 11] = 0\n 21811: u8 [a0 + 10] = 0\n 21814: u8 [a0 + 9] = 0\n 21817: u8 [a0 + 8] = 0\n 21820: u8 [a0 + 7] = 0\n 21823: u8 [a0 + 6] = 0\n 21826: u8 [a0 + 5] = 0\n 21829: u8 [a0 + 3] = 0xe6\n 21834: u8 [a0 + 2] = 0x8c\n 21839: u8 [a0 + 1] = 0xca\n 21844: u8 [a0 + 0] = 0x4d\n 21847: u64 [sp + 0x18] = s1\n 21850: a3 = u64 [sp + 0x60]\n 21853: a3 = a3 | s1\n 21856: a1 = 0xfffffffc\n 21866: a2 = u64 [sp + 0x70]\n 21869: a1 = a2 <u a1\n 21872: a2 = u64 [sp + 0x78]\n 21875: a1 = 0 if a2 != 0\n 21877: u64 [sp + 0x58] = a3\n 21880: a1 = 0 if a3 != 0\n 21882: u8 [a0 + 4] = 0\n 21885: jump @368 if a1 == 0\n      : @327 (gas: 19)\n 21889: a0 = u64 [sp + 0x38]\n 21892: a0 = reverse a0\n 21894: a1 = a0 >> 0x20\n 21897: a2 = u64 [sp + 0x40]\n 21900: a2 = reverse a2\n 21902: a3 = a2 << 0x20\n 21905: a1 = a1 | a3\n 21908: u64 [sp + 0x40] = a1\n 21911: a0 = a0 << 0x20\n 21914: a1 = u64 [sp + 0x48]\n 21917: a1 = reverse a1\n 21919: a1 = a1 >> 0x20\n 21922: a0 = a0 | a1\n 21925: u64 [sp + 0x48] = a0\n 21928: s1 = a2 >> 0x20\n 21931: a0 = u64 [sp + 0x68]\n 21934: i32 a0 = a0 + 0x4\n 21937: a1 = 0x20\n 21940: ra = 288, jump @0\n      : @328 [@dyn 144] (gas: 64)\n 21946: a1 = reverse s1\n 21948: a2 = u64 [sp + 0x40]\n 21951: a2 = reverse a2\n 21953: a3 = u64 [sp + 0x48]\n 21956: a3 = reverse a3\n 21958: a4 = a3 >> 0x38\n 21961: u8 [a0 + 0x1f] = a4\n 21964: a4 = a3 >> 0x30\n 21967: u8 [a0 + 0x1e] = a4\n 21970: a4 = a3 >> 0x28\n 21973: u8 [a0 + 0x1d] = a4\n 21976: a4 = a3 >> 0x20\n 21979: u8 [a0 + 0x1c] = a4\n 21982: a4 = a3 >> 0x18\n 21985: u8 [a0 + 0x1b] = a4\n 21988: a4 = a3 >> 0x10\n 21991: u8 [a0 + 0x1a] = a4\n 21994: a4 = a3 >> 0x8\n 21997: u8 [a0 + 0x19] = a4\n 22000: u8 [a0 + 0x18] = a3\n 22003: u8 [a0 + 0x10] = a2\n 22006: u8 [a0 + 11] = 0\n 22009: u8 [a0 + 10] = 0\n 22012: u8 [a0 + 9] = 0\n 22015: u8 [a0 + 7] = 0\n 22018: u8 [a0 + 6] = 0\n 22021: u8 [a0 + 5] = 0\n 22024: u8 [a0 + 4] = 0\n 22027: u8 [a0 + 3] = 0\n 22030: u8 [a0 + 2] = 0\n 22033: u8 [a0 + 1] = 0\n 22036: u8 [a0 + 0] = 0\n 22038: a3 = a2 >> 0x38\n 22041: u8 [a0 + 0x17] = a3\n 22044: a3 = a2 >> 0x30\n 22047: u8 [a0 + 0x16] = a3\n 22050: a3 = a2 >> 0x28\n 22053: u8 [a0 + 0x15] = a3\n 22056: a3 = a2 >> 0x20\n 22059: u8 [a0 + 0x14] = a3\n 22062: a3 = a2 >> 0x18\n 22065: u8 [a0 + 0x13] = a3\n 22068: a3 = a2 >> 0x10\n 22071: u8 [a0 + 0x12] = a3\n 22074: a2 = a2 >> 0x8\n 22077: u8 [a0 + 0x11] = a2\n 22080: u8 [a0 + 0x8] = a1\n 22083: a2 = a1 >> 0x38\n 22086: u8 [a0 + 0xf] = a2\n 22089: a2 = a1 >> 0x30\n 22092: u8 [a0 + 0xe] = a2\n 22095: a2 = a1 >> 0x28\n 22098: u8 [a0 + 0xd] = a2\n 22101: a1 = a1 >> 0x20\n 22104: s1 = 0x100000000\n 22114: a2 = 0xffffffdc\n 22124: a3 = u64 [sp + 0x70]\n 22127: a2 = a3 <u a2\n 22130: a3 = u64 [sp + 0x78]\n 22133: a2 = 0 if a3 != 0\n 22135: a3 = u64 [sp + 0x58]\n 22138: a2 = 0 if a3 != 0\n 22140: u8 [a0 + 0xc] = a1\n 22143: jump @368 if a2 == 0\n      : @329 (gas: 4)\n 22147: a0 = u64 [sp + 0x68]\n 22150: i32 a0 = a0 + 0x24\n 22153: a1 = 0x20\n 22156: ra = 290, jump @0\n      : @330 [@dyn 145] (gas: 43)\n 22162: a2 = u64 [sp + 0x50]\n 22165: a1 = a2 << 0x38\n 22168: u8 [a0 + 0x1f] = a2\n 22171: u8 [a0 + 30] = 0\n 22174: u8 [a0 + 29] = 0\n 22177: u8 [a0 + 28] = 0\n 22180: u8 [a0 + 27] = 0\n 22183: u8 [a0 + 26] = 0\n 22186: u8 [a0 + 25] = 0\n 22189: u64 [sp + 0x48] = a1\n 22192: u8 [a0 + 0x18] = a1\n 22195: u8 [a0 + 23] = 0\n 22198: u8 [a0 + 22] = 0\n 22201: u8 [a0 + 21] = 0\n 22204: u8 [a0 + 20] = 0\n 22207: u8 [a0 + 19] = 0\n 22210: u8 [a0 + 18] = 0\n 22213: u8 [a0 + 17] = 0\n 22216: u8 [a0 + 16] = 0\n 22219: u8 [a0 + 15] = 0\n 22222: u8 [a0 + 14] = 0\n 22225: u8 [a0 + 13] = 0\n 22228: u8 [a0 + 12] = 0\n 22231: u8 [a0 + 11] = 0\n 22234: u8 [a0 + 10] = 0\n 22237: u8 [a0 + 9] = 0\n 22240: u8 [a0 + 8] = 0\n 22243: u8 [a0 + 7] = 0\n 22246: u8 [a0 + 6] = 0\n 22249: u8 [a0 + 5] = 0\n 22252: u8 [a0 + 4] = 0\n 22255: u8 [a0 + 3] = 0\n 22258: u8 [a0 + 2] = 0\n 22261: u8 [a0 + 1] = 0\n 22264: a1 = s1 + 0xffffffffffffffbc\n 22267: a2 = u64 [sp + 0x70]\n 22270: a1 = a2 <u a1\n 22273: a2 = u64 [sp + 0x78]\n 22276: a1 = 0 if a2 != 0\n 22278: a2 = u64 [sp + 0x58]\n 22281: a1 = 0 if a2 != 0\n 22283: u8 [a0 + 0] = 0\n 22285: jump @368 if a1 == 0\n      : @331 (gas: 4)\n 22289: s1 = u64 [sp + 0x68]\n 22292: i32 a0 = s1 + 0x44\n 22295: a1 = 0x20\n 22298: ra = 292, jump @0\n      : @332 [@dyn 146] (gas: 56)\n 22304: u8 [a0 + 31] = 0x1\n 22308: u8 [a0 + 30] = 0\n 22311: u8 [a0 + 29] = 0\n 22314: u8 [a0 + 28] = 0\n 22317: u8 [a0 + 27] = 0\n 22320: u8 [a0 + 26] = 0\n 22323: u8 [a0 + 25] = 0\n 22326: u8 [a0 + 24] = 0\n 22329: u8 [a0 + 23] = 0\n 22332: u8 [a0 + 22] = 0\n 22335: u8 [a0 + 21] = 0\n 22338: u8 [a0 + 20] = 0\n 22341: u8 [a0 + 19] = 0\n 22344: u8 [a0 + 18] = 0\n 22347: u8 [a0 + 17] = 0\n 22350: u8 [a0 + 16] = 0\n 22353: u8 [a0 + 15] = 0\n 22356: u8 [a0 + 14] = 0\n 22359: u8 [a0 + 13] = 0\n 22362: u8 [a0 + 12] = 0\n 22365: u8 [a0 + 11] = 0\n 22368: u8 [a0 + 10] = 0\n 22371: u8 [a0 + 9] = 0\n 22374: u8 [a0 + 8] = 0\n 22377: u8 [a0 + 7] = 0\n 22380: u8 [a0 + 6] = 0\n 22383: u8 [a0 + 5] = 0\n 22386: u8 [a0 + 4] = 0\n 22389: u8 [a0 + 3] = 0\n 22392: u8 [a0 + 2] = 0\n 22395: u8 [a0 + 1] = 0\n 22398: u8 [a0 + 0] = 0\n 22400: ecalli 9 // 'ref_time_left'\n 22402: a0 = u64 [sp + 0x20]\n 22405: a0 = reverse a0\n 22407: a1 = a0 << 0x20\n 22410: a2 = u64 [sp + 0x28]\n 22413: a2 = reverse a2\n 22415: a2 = a2 >> 0x20\n 22418: a1 = a1 | a2\n 22421: a2 = u64 [sp + 0x30]\n 22424: a2 = reverse a2\n 22426: a3 = a2 << 0x20\n 22429: a0 = a0 >> 0x20\n 22432: a0 = a0 | a3\n 22435: a2 = a2 >> 0x20\n 22438: u64 [sp + 0x1e8] = a0\n 22442: u64 [sp + 0x1e0] = a1\n 22446: u32 [sp + 0x1f0] = a2\n 22450: u64 [sp + 536] = 0\n 22454: u64 [sp + 528] = 0\n 22458: u64 [sp + 520] = 0\n 22462: u64 [sp + 512] = 0\n 22466: a1 = 0x64\n 22469: a0 = s1\n 22471: ra = 294, jump @0\n      : @333 [@dyn 147] (gas: 4)\n 22477: u64 [sp + 0x58] = a0\n 22480: a1 = 0x20\n 22483: a0 = s1\n 22485: ra = 296, jump @0\n      : @334 [@dyn 148] (gas: 31)\n 22491: u32 [sp + 544] = 0x20\n 22496: u64 [sp + 600] = 0\n 22500: u64 [sp + 592] = 0\n 22504: u64 [sp + 584] = 0\n 22508: u64 [sp + 576] = 0\n 22512: a1 = sp + 0x1e0\n 22516: a1 = a1 << 0x20\n 22519: a1 = a1 >> 0x20\n 22522: a2 = 0x1800000000\n 22532: s1 = a1 | a2\n 22535: a1 = sp + 0x200\n 22539: a1 = a1 << 0x20\n 22542: a1 = a1 >> 0x20\n 22545: a2 = sp + 0x240\n 22549: a2 = a2 << 0x20\n 22552: a3 = a2 | a1\n 22555: a1 = u64 [sp + 0x58]\n 22558: a1 = a1 << 0x20\n 22561: a1 = a1 >> 0x20\n 22564: a2 = 0x6400000000\n 22574: a4 = a1 | a2\n 22577: a0 = a0 << 0x20\n 22580: a0 = a0 >> 0x20\n 22583: a1 = sp + 0x220\n 22587: a1 = a1 << 0x20\n 22590: a5 = a1 | a0\n 22593: a1 = 0xffffffffffffffff\n 22596: a2 = 0xffffffffffffffff\n 22599: a0 = s1\n 22601: ecalli 1 // 'call'\n 22603: fallthrough\n      : @335 (gas: 1)\n 22604: jump @361 if a0 != 0\n      : @336 (gas: 2)\n 22608: ecalli 11 // 'return_data_size'\n 22610: fallthrough\n      : @337 (gas: 2)\n 22611: a1 = 0x20\n 22614: jump @339 if a0 >=u a1\n      : @338 (gas: 3)\n 22617: ecalli 11 // 'return_data_size'\n 22619: a1 = a0\n 22621: fallthrough\n      : @339 (gas: 28)\n 22622: a4 = 0\n 22624: a3 = u64 [sp + 0x60]\n 22627: a2 = u64 [sp + 0x70]\n 22630: s1 = u64 [sp + 0x78]\n 22633: a0 = a1 + 0x1f\n 22636: u64 [sp + 0x70] = a1\n 22639: a1 = a0 <u a1\n 22642: u64 [sp + 120] = 0\n 22645: a1 = a1 & 0x1\n 22648: a0 = a0 & 0xffffffffffffffe0\n 22651: a2 = a2 + a0\n 22654: u64 [sp + 0x60] = a2\n 22657: a0 = a2 <u a0\n 22660: s1 = s1 + a1\n 22663: s1 = s1 + a0\n 22666: a2 = s1 ^ a1\n 22669: a1 = s1 <u a1\n 22672: a1 = a0 if a2 == 0\n 22675: a0 = u64 [sp + 0x18]\n 22678: a1 = a1 + a0\n 22681: a0 = a1 <u a0\n 22684: a0 = a0 + a3\n 22687: u64 [sp + 0x58] = a1\n 22690: u64 [sp + 0x50] = a0\n 22693: a0 = a0 | a1\n 22696: a1 = s1 <u 0x1\n 22699: a1 = 0 if a0 != 0\n 22701: jump @371 if a1 == 0\n      : @340 (gas: 3)\n 22705: a0 = 0x40\n 22708: a1 = 0x20\n 22711: ra = 298, jump @0\n      : @341 [@dyn 149] (gas: 79)\n 22717: a1 = u64 [sp + 0x50]\n 22720: a1 = reverse a1\n 22722: a2 = u64 [sp + 0x58]\n 22725: a2 = reverse a2\n 22727: a3 = reverse s1\n 22729: a4 = u64 [sp + 0x60]\n 22732: a4 = reverse a4\n 22734: u8 [a0 + 0x18] = a4\n 22737: a5 = a4 >> 0x38\n 22740: u8 [a0 + 0x1f] = a5\n 22743: a5 = a4 >> 0x30\n 22746: u8 [a0 + 0x1e] = a5\n 22749: a5 = a4 >> 0x28\n 22752: u8 [a0 + 0x1d] = a5\n 22755: a5 = a4 >> 0x20\n 22758: u8 [a0 + 0x1c] = a5\n 22761: a5 = a4 >> 0x18\n 22764: u8 [a0 + 0x1b] = a5\n 22767: a5 = a4 >> 0x10\n 22770: u8 [a0 + 0x1a] = a5\n 22773: a4 = a4 >> 0x8\n 22776: u8 [a0 + 0x19] = a4\n 22779: u8 [a0 + 0x10] = a3\n 22782: a4 = a3 >> 0x38\n 22785: u8 [a0 + 0x17] = a4\n 22788: a4 = a3 >> 0x30\n 22791: u8 [a0 + 0x16] = a4\n 22794: a4 = a3 >> 0x28\n 22797: u8 [a0 + 0x15] = a4\n 22800: a4 = a3 >> 0x20\n 22803: u8 [a0 + 0x14] = a4\n 22806: a4 = a3 >> 0x18\n 22809: u8 [a0 + 0x13] = a4\n 22812: a4 = a3 >> 0x10\n 22815: u8 [a0 + 0x12] = a4\n 22818: a3 = a3 >> 0x8\n 22821: u8 [a0 + 0x11] = a3\n 22824: u8 [a0 + 0x8] = a2\n 22827: a3 = a2 >> 0x38\n 22830: u8 [a0 + 0xf] = a3\n 22833: a3 = a2 >> 0x30\n 22836: u8 [a0 + 0xe] = a3\n 22839: a3 = a2 >> 0x28\n 22842: u8 [a0 + 0xd] = a3\n 22845: a3 = a2 >> 0x20\n 22848: u8 [a0 + 0xc] = a3\n 22851: a3 = a2 >> 0x18\n 22854: u8 [a0 + 0xb] = a3\n 22857: a3 = a2 >> 0x10\n 22860: u8 [a0 + 0xa] = a3\n 22863: a2 = a2 >> 0x8\n 22866: u8 [a0 + 0x9] = a2\n 22869: u8 [a0] = a1\n 22871: a2 = a1 >> 0x38\n 22874: u8 [a0 + 0x7] = a2\n 22877: a2 = a1 >> 0x30\n 22880: u8 [a0 + 0x6] = a2\n 22883: a2 = a1 >> 0x28\n 22886: u8 [a0 + 0x5] = a2\n 22889: a2 = a1 >> 0x20\n 22892: u8 [a0 + 0x4] = a2\n 22895: a2 = a1 >> 0x18\n 22898: u8 [a0 + 0x3] = a2\n 22901: a2 = a1 >> 0x10\n 22904: u8 [a0 + 0x2] = a2\n 22907: a1 = a1 >> 0x8\n 22910: a5 = u64 [sp + 0x78]\n 22913: a2 = a5 >u 0\n 22915: a3 = u64 [sp + 0x70]\n 22918: a3 = a3 <u 0x20\n 22921: a3 = a3 ^ 0x1\n 22924: a3 = a2 if a5 != 0\n 22927: a2 = a5 >u 0\n 22929: a4 = a5 >u 0\n 22931: a4 = a2 if a5 == 0\n 22934: a2 = a5 | a5\n 22937: a4 = a3 if a2 == 0\n 22940: u8 [a0 + 0x1] = a1\n 22943: jump @369 if a4 == 0\n      : @342 (gas: 3)\n 22947: a1 = 0x20\n 22950: a0 = u64 [sp + 0x68]\n 22953: ra = 300, jump @0\n      : @343 [@dyn 150] (gas: 96)\n 22959: a1 = u8 [a0 + 0x9]\n 22962: a2 = u8 [a0 + 0x8]\n 22965: a3 = u8 [a0 + 0xa]\n 22968: a4 = u8 [a0 + 0xb]\n 22971: a1 = a1 << 0x8\n 22974: a1 = a1 | a2\n 22977: a3 = a3 << 0x10\n 22980: a4 = a4 << 0x18\n 22983: a3 = a3 | a4\n 22986: a1 = a1 | a3\n 22989: a2 = u8 [a0 + 0xd]\n 22992: a3 = u8 [a0 + 0xc]\n 22995: a4 = u8 [a0 + 0xe]\n 22998: a5 = u8 [a0 + 0xf]\n 23001: a2 = a2 << 0x8\n 23004: a2 = a2 | a3\n 23007: a4 = a4 << 0x10\n 23010: a5 = a5 << 0x18\n 23013: a4 = a4 | a5\n 23016: a2 = a2 | a4\n 23019: a2 = a2 << 0x20\n 23022: t0 = a2 | a1\n 23025: a2 = u8 [a0 + 0x1]\n 23028: a3 = u8 [a0]\n 23030: a4 = u8 [a0 + 0x2]\n 23033: a5 = u8 [a0 + 0x3]\n 23036: a2 = a2 << 0x8\n 23039: a2 = a2 | a3\n 23042: a4 = a4 << 0x10\n 23045: a5 = a5 << 0x18\n 23048: a4 = a4 | a5\n 23051: a2 = a2 | a4\n 23054: a3 = u8 [a0 + 0x5]\n 23057: a4 = u8 [a0 + 0x4]\n 23060: a5 = u8 [a0 + 0x6]\n 23063: s1 = u8 [a0 + 0x7]\n 23066: a3 = a3 << 0x8\n 23069: a3 = a3 | a4\n 23072: a5 = a5 << 0x10\n 23075: s1 = s1 << 0x18\n 23078: a5 = a5 | s1\n 23081: a3 = a3 | a5\n 23084: a3 = a3 << 0x20\n 23087: a2 = a2 | a3\n 23090: a3 = u8 [a0 + 0x19]\n 23093: a4 = u8 [a0 + 0x18]\n 23096: a5 = u8 [a0 + 0x1a]\n 23099: s1 = u8 [a0 + 0x1b]\n 23102: a3 = a3 << 0x8\n 23105: a3 = a3 | a4\n 23108: a5 = a5 << 0x10\n 23111: s1 = s1 << 0x18\n 23114: a5 = a5 | s1\n 23117: a3 = a3 | a5\n 23120: a4 = u8 [a0 + 0x1d]\n 23123: a5 = u8 [a0 + 0x1c]\n 23126: s1 = u8 [a0 + 0x1e]\n 23129: a1 = u8 [a0 + 0x1f]\n 23132: a4 = a4 << 0x8\n 23135: a4 = a4 | a5\n 23138: s1 = s1 << 0x10\n 23141: a1 = a1 << 0x18\n 23144: a1 = a1 | s1\n 23147: a1 = a1 | a4\n 23150: a1 = a1 << 0x20\n 23153: a3 = a3 | a1\n 23156: a1 = u8 [a0 + 0x11]\n 23159: a4 = u8 [a0 + 0x10]\n 23162: a5 = u8 [a0 + 0x12]\n 23165: s1 = u8 [a0 + 0x13]\n 23168: a1 = a1 << 0x8\n 23171: a1 = a1 | a4\n 23174: a5 = a5 << 0x10\n 23177: s1 = s1 << 0x18\n 23180: a5 = a5 | s1\n 23183: a1 = a1 | a5\n 23186: a4 = u8 [a0 + 0x15]\n 23189: a5 = u8 [a0 + 0x14]\n 23192: s1 = u8 [a0 + 0x16]\n 23195: a0 = u8 [a0 + 0x17]\n 23198: a4 = a4 << 0x8\n 23201: a4 = a4 | a5\n 23204: s1 = s1 << 0x10\n 23207: a0 = a0 << 0x18\n 23210: a0 = a0 | s1\n 23213: a0 = a0 | a4\n 23216: a0 = a0 << 0x20\n 23219: a0 = a0 | a1\n 23222: a1 = reverse a0\n 23224: a4 = reverse a3\n 23226: a4 = a4 <u 0x2\n 23229: a4 = 0 if a1 != 0\n 23231: a1 = t0 | a2\n 23234: a1 = reverse a1\n 23236: a4 = 0 if a1 != 0\n 23238: jump @369 if a4 == 0\n      : @344 (gas: 4)\n 23242: a0 = a0 | a2\n 23245: a1 = t0 | a3\n 23248: a0 = a0 | a1\n 23251: jump @362 if a0 == 0\n      : @345 (gas: 14)\n 23255: i32 a0 = sp + 0x260\n 23259: ecalli 5 // 'caller'\n 23261: a0 = u32 [sp + 0x270]\n 23265: u64 [sp + 0x68] = a0\n 23268: a0 = u64 [sp + 0x268]\n 23272: u64 [sp + 0x50] = a0\n 23275: s1 = u64 [sp + 0x260]\n 23279: u64 [sp + 408] = 0\n 23283: u64 [sp + 400] = 0\n 23287: u64 [sp + 384] = 0x80\n 23293: a0 = sp + 0x1a0\n 23297: a1 = sp + 0x180\n 23301: u64 [sp + 392] = 0\n 23305: ra = 302, jump @52\n      : @346 [@dyn 151] (gas: 16)\n 23311: a2 = u64 [sp + 0x1b8]\n 23315: a3 = u64 [sp + 0x1b0]\n 23319: a0 = u64 [sp + 0x1a8]\n 23323: a1 = u64 [sp + 0x1a0]\n 23327: u64 [sp + 0x70] = a0\n 23330: u64 [sp + 0x58] = a2\n 23333: a0 = a0 | a2\n 23336: u64 [sp + 0x78] = a1\n 23339: a1 = a1 | a3\n 23342: a1 = a1 | a0\n 23345: a1 = a1 >> 0x20\n 23348: u64 [sp + 0x60] = a3\n 23351: a0 = a0 | a3\n 23354: a0 = a0 << 0x20\n 23357: a0 = a0 | a1\n 23360: jump @368 if a0 != 0\n      : @347 (gas: 17)\n 23364: a0 = reverse s1\n 23366: a0 = a0 << 0x20\n 23369: a1 = u64 [sp + 0x50]\n 23372: a1 = reverse a1\n 23374: a2 = a1 >> 0x20\n 23377: a0 = a0 | a2\n 23380: u64 [sp + 0x50] = a0\n 23383: a1 = a1 << 0x20\n 23386: a0 = u64 [sp + 0x68]\n 23389: a0 = reverse a0\n 23391: a0 = a0 >> 0x20\n 23394: a0 = a0 | a1\n 23397: u64 [sp + 0x40] = a0\n 23400: a0 = i32 [sp + 0x78]\n 23403: a1 = 0x20\n 23406: u64 [sp + 0x68] = a0\n 23409: ra = 304, jump @0\n      : @348 [@dyn 152] (gas: 65)\n 23415: a1 = u64 [sp + 0x40]\n 23418: a1 = reverse a1\n 23420: a2 = u64 [sp + 0x50]\n 23423: a2 = reverse a2\n 23425: a3 = s1 >> 0x18\n 23428: u8 [a0 + 0xf] = a3\n 23431: a3 = s1 >> 0x10\n 23434: u8 [a0 + 0xe] = a3\n 23437: a3 = s1 >> 0x8\n 23440: u8 [a0 + 0xd] = a3\n 23443: u8 [a0 + 0xc] = s1\n 23446: u8 [a0 + 11] = 0\n 23449: u8 [a0 + 10] = 0\n 23452: u8 [a0 + 9] = 0\n 23455: u8 [a0 + 8] = 0\n 23458: u8 [a0 + 7] = 0\n 23461: u8 [a0 + 6] = 0\n 23464: u8 [a0 + 5] = 0\n 23467: u8 [a0 + 4] = 0\n 23470: u8 [a0 + 3] = 0\n 23473: u8 [a0 + 2] = 0\n 23476: u8 [a0 + 1] = 0\n 23479: u8 [a0 + 0] = 0\n 23481: u8 [a0 + 0x10] = a2\n 23484: u8 [a0 + 0x18] = a1\n 23487: a3 = a2 >> 0x38\n 23490: u8 [a0 + 0x17] = a3\n 23493: a3 = a2 >> 0x30\n 23496: u8 [a0 + 0x16] = a3\n 23499: a3 = a2 >> 0x28\n 23502: u8 [a0 + 0x15] = a3\n 23505: a3 = a2 >> 0x20\n 23508: u8 [a0 + 0x14] = a3\n 23511: a3 = a2 >> 0x18\n 23514: u8 [a0 + 0x13] = a3\n 23517: a3 = a2 >> 0x10\n 23520: u8 [a0 + 0x12] = a3\n 23523: a2 = a2 >> 0x8\n 23526: u8 [a0 + 0x11] = a2\n 23529: a2 = a1 >> 0x38\n 23532: u8 [a0 + 0x1f] = a2\n 23535: a2 = a1 >> 0x30\n 23538: u8 [a0 + 0x1e] = a2\n 23541: a2 = a1 >> 0x28\n 23544: u8 [a0 + 0x1d] = a2\n 23547: a2 = a1 >> 0x20\n 23550: u8 [a0 + 0x1c] = a2\n 23553: a2 = a1 >> 0x18\n 23556: u8 [a0 + 0x1b] = a2\n 23559: a2 = a1 >> 0x10\n 23562: u8 [a0 + 0x1a] = a2\n 23565: a1 = a1 >> 0x8\n 23568: a2 = u64 [sp + 0x58]\n 23571: a4 = u64 [sp + 0x60]\n 23574: a4 = a4 | a2\n 23577: s1 = 0x100000000\n 23587: a2 = 0xffffffe0\n 23597: a3 = u64 [sp + 0x78]\n 23600: a2 = a3 <u a2\n 23603: a3 = u64 [sp + 0x70]\n 23606: a2 = 0 if a3 != 0\n 23608: u64 [sp + 0x50] = a4\n 23611: a2 = 0 if a4 != 0\n 23613: u8 [a0 + 0x19] = a1\n 23616: jump @368 if a2 == 0\n      : @349 (gas: 4)\n 23620: a0 = u64 [sp + 0x68]\n 23623: i32 a0 = a0 + 0x20\n 23626: a1 = 0x20\n 23629: ra = 306, jump @0\n      : @350 [@dyn 153] (gas: 48)\n 23635: u8 [a0 + 23] = 0\n 23638: u8 [a0 + 22] = 0\n 23641: u8 [a0 + 21] = 0\n 23644: u8 [a0 + 20] = 0\n 23647: u8 [a0 + 19] = 0\n 23650: u8 [a0 + 18] = 0\n 23653: u8 [a0 + 17] = 0\n 23656: u8 [a0 + 16] = 0\n 23659: u8 [a0 + 15] = 0\n 23662: u8 [a0 + 14] = 0\n 23665: u8 [a0 + 13] = 0\n 23668: u8 [a0 + 12] = 0\n 23671: u8 [a0 + 11] = 0\n 23674: u8 [a0 + 10] = 0\n 23677: u8 [a0 + 9] = 0\n 23680: u8 [a0 + 8] = 0\n 23683: u8 [a0 + 7] = 0\n 23686: u8 [a0 + 6] = 0\n 23689: u8 [a0 + 5] = 0\n 23692: u8 [a0 + 4] = 0\n 23695: u8 [a0 + 3] = 0\n 23698: u8 [a0 + 2] = 0\n 23701: u8 [a0 + 1] = 0\n 23704: u8 [a0 + 0] = 0\n 23706: a2 = u64 [sp + 0x48]\n 23709: u8 [a0 + 0x18] = a2\n 23712: a1 = a2 >> 0x38\n 23715: u8 [a0 + 0x1f] = a1\n 23718: a1 = a2 >> 0x30\n 23721: u8 [a0 + 0x1e] = a1\n 23724: a1 = a2 >> 0x28\n 23727: u8 [a0 + 0x1d] = a1\n 23730: a1 = a2 >> 0x20\n 23733: u8 [a0 + 0x1c] = a1\n 23736: a1 = a2 >> 0x18\n 23739: u8 [a0 + 0x1b] = a1\n 23742: a1 = a2 >> 0x10\n 23745: u8 [a0 + 0x1a] = a1\n 23748: a1 = a2 >> 0x8\n 23751: a2 = s1 + 0xffffffffffffffc0\n 23754: a3 = u64 [sp + 0x78]\n 23757: a2 = a3 <u a2\n 23760: a3 = u64 [sp + 0x70]\n 23763: a2 = 0 if a3 != 0\n 23765: a3 = u64 [sp + 0x50]\n 23768: a2 = 0 if a3 != 0\n 23770: u8 [a0 + 0x19] = a1\n 23773: jump @368 if a2 == 0\n      : @351 (gas: 4)\n 23777: a0 = u64 [sp + 0x68]\n 23780: i32 a0 = a0 + 0x40\n 23783: a1 = 0x20\n 23786: ra = 308, jump @0\n      : @352 [@dyn 154] (gas: 42)\n 23792: a1 = u64 [sp + 0x10]\n 23795: u8 [a0 + 0x1f] = a1\n 23798: s1 = 0x1\n 23801: a1 = 0xffffffa0\n 23811: a2 = u64 [sp + 0x78]\n 23814: a1 = a2 <u a1\n 23817: a2 = u64 [sp + 0x70]\n 23820: a1 = 0 if a2 != 0\n 23822: a2 = u64 [sp + 0x50]\n 23825: a1 = 0 if a2 != 0\n 23827: u8 [a0 + 30] = 0\n 23830: u8 [a0 + 29] = 0\n 23833: u8 [a0 + 28] = 0\n 23836: u8 [a0 + 27] = 0\n 23839: u8 [a0 + 26] = 0\n 23842: u8 [a0 + 25] = 0\n 23845: u8 [a0 + 24] = 0\n 23848: u8 [a0 + 23] = 0\n 23851: u8 [a0 + 22] = 0\n 23854: u8 [a0 + 21] = 0\n 23857: u8 [a0 + 20] = 0\n 23860: u8 [a0 + 19] = 0\n 23863: u8 [a0 + 18] = 0\n 23866: u8 [a0 + 17] = 0\n 23869: u8 [a0 + 16] = 0\n 23872: u8 [a0 + 15] = 0\n 23875: u8 [a0 + 14] = 0\n 23878: u8 [a0 + 13] = 0\n 23881: u8 [a0 + 12] = 0\n 23884: u8 [a0 + 11] = 0\n 23887: u8 [a0 + 10] = 0\n 23890: u8 [a0 + 9] = 0\n 23893: u8 [a0 + 8] = 0\n 23896: u8 [a0 + 7] = 0\n 23899: u8 [a0 + 6] = 0\n 23902: u8 [a0 + 5] = 0\n 23905: u8 [a0 + 4] = 0\n 23908: u8 [a0 + 3] = 0\n 23911: u8 [a0 + 2] = 0\n 23914: u8 [a0 + 1] = 0\n 23917: u8 [a0 + 0] = 0\n 23919: jump @368 if a1 == 0\n      : @353 (gas: 4)\n 23923: a0 = u64 [sp + 0x68]\n 23926: i32 a0 = a0 + 0x60\n 23929: a1 = 0x20\n 23932: ra = 310, jump @0\n      : @354 [@dyn 155] (gas: 85)\n 23938: u8 [a0 + 0x1f] = s1\n 23941: u8 [a0 + 30] = 0\n 23944: u8 [a0 + 29] = 0\n 23947: u8 [a0 + 28] = 0\n 23950: u8 [a0 + 27] = 0\n 23953: u8 [a0 + 26] = 0\n 23956: u8 [a0 + 25] = 0\n 23959: u8 [a0 + 24] = 0\n 23962: u8 [a0 + 23] = 0\n 23965: u8 [a0 + 22] = 0\n 23968: u8 [a0 + 21] = 0\n 23971: u8 [a0 + 20] = 0\n 23974: u8 [a0 + 19] = 0\n 23977: u8 [a0 + 18] = 0\n 23980: u8 [a0 + 17] = 0\n 23983: u8 [a0 + 16] = 0\n 23986: u8 [a0 + 15] = 0\n 23989: u8 [a0 + 14] = 0\n 23992: u8 [a0 + 13] = 0\n 23995: u8 [a0 + 12] = 0\n 23998: u8 [a0 + 11] = 0\n 24001: u8 [a0 + 10] = 0\n 24004: u8 [a0 + 9] = 0\n 24007: u8 [a0 + 8] = 0\n 24010: u8 [a0 + 7] = 0\n 24013: u8 [a0 + 6] = 0\n 24016: u8 [a0 + 5] = 0\n 24019: u8 [a0 + 4] = 0\n 24022: u8 [a0 + 3] = 0\n 24025: u8 [a0 + 2] = 0\n 24028: u8 [a0 + 1] = 0\n 24031: u8 [a0 + 0] = 0\n 24033: a0 = u64 [sp + 0x58]\n 24036: u64 [sp + 0x158] = a0\n 24040: a0 = u64 [sp + 0x60]\n 24043: u64 [sp + 0x150] = a0\n 24047: a0 = u64 [sp + 0x70]\n 24050: u64 [sp + 0x148] = a0\n 24054: a0 = u64 [sp + 0x78]\n 24057: u64 [sp + 0x140] = a0\n 24061: u64 [sp + 376] = 0\n 24065: u64 [sp + 368] = 0\n 24069: u64 [sp + 360] = 0\n 24073: a0 = sp + 0x160\n 24077: a1 = sp + 0x140\n 24081: u64 [sp + 352] = 0\n 24085: ra = 0x138\n 24089: sp = sp + 0xfffffffffffffde0\n 24093: u64 [sp + 0x218] = ra\n 24097: u64 [sp + 0x210] = s0\n 24101: u64 [sp + 0x208] = s1\n 24105: s0 = sp + 0x220\n 24109: sp = sp & 0xffffffffffffffe0\n 24112: a2 = u64 [a1 + 0x18]\n 24115: u64 [sp + 0x38] = a2\n 24118: a2 = u64 [a1 + 0x10]\n 24121: u64 [sp + 0x30] = a2\n 24124: a2 = u64 [a1 + 0x8]\n 24127: u64 [sp + 0x28] = a2\n 24130: a1 = u64 [a1]\n 24132: u64 [sp + 0x20] = a1\n 24135: a3 = u64 [a0 + 0x18]\n 24138: a2 = u64 [a0 + 0x10]\n 24141: a1 = u64 [a0 + 0x8]\n 24144: a0 = u64 [a0]\n 24146: u64 [sp + 0x40] = a3\n 24149: u64 [sp + 0x1d8] = a3\n 24153: u64 [sp + 0x48] = a2\n 24156: u64 [sp + 0x1d0] = a2\n 24160: u64 [sp + 0x50] = a1\n 24163: u64 [sp + 0x1c8] = a1\n 24167: u64 [sp + 0x58] = a0\n 24170: u64 [sp + 0x1c0] = a0\n 24174: u64 [sp + 504] = 0\n 24178: u64 [sp + 496] = 0\n 24182: u64 [sp + 488] = 0\n 24186: u64 [sp + 480] = 0\n 24190: u32 [sp + 416] = 0x20\n 24195: i32 a1 = sp + 0x1c0\n 24199: i32 a3 = sp + 0x1e0\n 24203: i32 a4 = sp + 0x1a0\n 24207: a2 = 0xffffffffffffffff\n 24210: a0 = 0\n 24212: ecalli 7 // 'get_storage'\n 24214: jump @310\n      : @355 [@dyn 156] (gas: 6)\n 24217: sp = s0 + 0xfffffffffffffd20\n 24221: ra = u64 [sp + 0x2d8]\n 24225: s0 = u64 [sp + 0x2d0]\n 24229: s1 = u64 [sp + 0x2c8]\n 24233: sp = sp + 0x2e0\n 24237: ret\n      : @356 (gas: 3)\n 24239: a0 = 0x40\n 24242: a1 = 0x20\n 24245: ra = 314, jump @0\n      : @357 [@dyn 157] (gas: 103)\n 24251: a1 = u8 [a0 + 0x11]\n 24254: a2 = u8 [a0 + 0x10]\n 24257: a3 = u8 [a0 + 0x12]\n 24260: a4 = u8 [a0 + 0x13]\n 24263: a1 = a1 << 0x8\n 24266: a1 = a1 | a2\n 24269: a3 = a3 << 0x10\n 24272: a4 = a4 << 0x18\n 24275: a3 = a3 | a4\n 24278: a1 = a1 | a3\n 24281: a2 = u8 [a0 + 0x15]\n 24284: a3 = u8 [a0 + 0x14]\n 24287: a4 = u8 [a0 + 0x16]\n 24290: a5 = u8 [a0 + 0x17]\n 24293: a2 = a2 << 0x8\n 24296: a2 = a2 | a3\n 24299: a4 = a4 << 0x10\n 24302: a5 = a5 << 0x18\n 24305: a4 = a4 | a5\n 24308: a2 = a2 | a4\n 24311: a2 = a2 << 0x20\n 24314: t0 = a2 | a1\n 24317: a2 = u8 [a0 + 0x1]\n 24320: a3 = u8 [a0]\n 24322: a4 = u8 [a0 + 0x2]\n 24325: a5 = u8 [a0 + 0x3]\n 24328: a2 = a2 << 0x8\n 24331: a2 = a2 | a3\n 24334: a4 = a4 << 0x10\n 24337: a5 = a5 << 0x18\n 24340: a4 = a4 | a5\n 24343: a2 = a2 | a4\n 24346: a3 = u8 [a0 + 0x5]\n 24349: a4 = u8 [a0 + 0x4]\n 24352: a5 = u8 [a0 + 0x6]\n 24355: s1 = u8 [a0 + 0x7]\n 24358: a3 = a3 << 0x8\n 24361: a3 = a3 | a4\n 24364: a5 = a5 << 0x10\n 24367: s1 = s1 << 0x18\n 24370: a5 = a5 | s1\n 24373: a3 = a3 | a5\n 24376: a3 = a3 << 0x20\n 24379: a2 = a2 | a3\n 24382: a3 = u8 [a0 + 0x19]\n 24385: a4 = u8 [a0 + 0x18]\n 24388: a5 = u8 [a0 + 0x1a]\n 24391: s1 = u8 [a0 + 0x1b]\n 24394: a3 = a3 << 0x8\n 24397: a3 = a3 | a4\n 24400: a5 = a5 << 0x10\n 24403: s1 = s1 << 0x18\n 24406: a5 = a5 | s1\n 24409: a3 = a3 | a5\n 24412: a4 = u8 [a0 + 0x1d]\n 24415: a5 = u8 [a0 + 0x1c]\n 24418: s1 = u8 [a0 + 0x1e]\n 24421: a1 = u8 [a0 + 0x1f]\n 24424: a4 = a4 << 0x8\n 24427: a4 = a4 | a5\n 24430: s1 = s1 << 0x10\n 24433: a1 = a1 << 0x18\n 24436: a1 = a1 | s1\n 24439: a1 = a1 | a4\n 24442: a1 = a1 << 0x20\n 24445: a3 = a3 | a1\n 24448: a1 = u8 [a0 + 0x9]\n 24451: a4 = u8 [a0 + 0x8]\n 24454: a5 = u8 [a0 + 0xa]\n 24457: s1 = u8 [a0 + 0xb]\n 24460: a1 = a1 << 0x8\n 24463: a1 = a1 | a4\n 24466: a5 = a5 << 0x10\n 24469: s1 = s1 << 0x18\n 24472: a5 = a5 | s1\n 24475: a1 = a1 | a5\n 24478: a4 = u8 [a0 + 0xd]\n 24481: a5 = u8 [a0 + 0xc]\n 24484: s1 = u8 [a0 + 0xe]\n 24487: a0 = u8 [a0 + 0xf]\n 24490: a4 = a4 << 0x8\n 24493: a4 = a4 | a5\n 24496: s1 = s1 << 0x10\n 24499: a0 = a0 << 0x18\n 24502: a0 = a0 | s1\n 24505: a0 = a0 | a4\n 24508: a0 = a0 << 0x20\n 24511: a0 = a0 | a1\n 24514: s1 = reverse a0\n 24516: a1 = reverse a3\n 24518: a2 = reverse a2\n 24520: a0 = reverse t0\n 24522: u64 [sp + 0x78] = a0\n 24525: u64 [sp + 0x70] = a2\n 24528: a0 = a0 | a2\n 24531: a2 = a1\n 24533: a1 = a1 | s1\n 24536: a1 = a1 | a0\n 24539: a1 = a1 >> 0x20\n 24542: a0 = a0 | s1\n 24545: a0 = a0 << 0x20\n 24548: a0 = a0 | a1\n 24551: jump @368 if a0 != 0\n      : @358 (gas: 5)\n 24555: u64 [sp + 0x68] = a2\n 24558: i32 a0 = a2 + 0\n 24560: a1 = 0x20\n 24563: u64 [sp + 0x60] = a0\n 24566: ra = 316, jump @0\n      : @359 [@dyn 158] (gas: 50)\n 24572: u8 [a0 + 31] = 0\n 24575: u8 [a0 + 30] = 0\n 24578: u8 [a0 + 29] = 0\n 24581: u8 [a0 + 28] = 0\n 24584: u8 [a0 + 27] = 0\n 24587: u8 [a0 + 26] = 0\n 24590: u8 [a0 + 25] = 0\n 24593: u8 [a0 + 24] = 0\n 24596: u8 [a0 + 23] = 0\n 24599: u8 [a0 + 22] = 0\n 24602: u8 [a0 + 21] = 0\n 24605: u8 [a0 + 20] = 0\n 24608: u8 [a0 + 19] = 0\n 24611: u8 [a0 + 18] = 0\n 24614: u8 [a0 + 17] = 0\n 24617: u8 [a0 + 16] = 0\n 24620: u8 [a0 + 15] = 0\n 24623: u8 [a0 + 14] = 0\n 24626: u8 [a0 + 13] = 0\n 24629: u8 [a0 + 12] = 0\n 24632: u8 [a0 + 11] = 0\n 24635: u8 [a0 + 10] = 0\n 24638: u8 [a0 + 9] = 0\n 24641: u8 [a0 + 8] = 0\n 24644: u8 [a0 + 7] = 0\n 24647: u8 [a0 + 6] = 0\n 24650: u8 [a0 + 5] = 0\n 24653: u8 [a0 + 4] = 0\n 24656: u8 [a0 + 3] = 0xa0\n 24661: u8 [a0 + 2] = 0x79\n 24665: u8 [a0 + 1] = 0xc3\n 24670: u8 [a0 + 0] = 0x8\n 24673: a1 = u64 [sp + 0x68]\n 24676: a0 = a1 + 0x4\n 24679: a1 = a0 <u a1\n 24682: a3 = u64 [sp + 0x78]\n 24685: a2 = a3 + a1\n 24688: a3 = a2 <u a3\n 24691: a3 = a1 if a1 == 0\n 24694: a3 = a3 + s1\n 24697: a1 = a3 <u s1\n 24700: a4 = u64 [sp + 0x70]\n 24703: a4 = a4 + a1\n 24706: u64 [sp + 0x88] = a2\n 24710: u64 [sp + 0x80] = a0\n 24714: u64 [sp + 0x90] = a3\n 24718: a0 = sp + 0xa0\n 24722: a1 = sp + 0x80\n 24726: u64 [sp + 0x98] = a4\n 24730: ra = 318, jump @265\n      : @360 [@dyn 159] (gas: 5)\n 24736: a0 = u64 [sp + 0xa8]\n 24740: t0 = u64 [sp + 0xb8]\n 24744: t1 = u64 [sp + 0xa0]\n 24748: a3 = u64 [sp + 0xb0]\n 24752: jump @367\n      : @361 (gas: 1)\n 24755: ra = 320, jump @273\n      : @362 [@dyn 160] (gas: 3)\n 24761: a0 = 0x40\n 24764: a1 = 0x20\n 24767: ra = 322, jump @0\n      : @363 [@dyn 161] (gas: 103)\n 24773: a1 = u8 [a0 + 0x11]\n 24776: a2 = u8 [a0 + 0x10]\n 24779: a3 = u8 [a0 + 0x12]\n 24782: a4 = u8 [a0 + 0x13]\n 24785: a1 = a1 << 0x8\n 24788: a1 = a1 | a2\n 24791: a3 = a3 << 0x10\n 24794: a4 = a4 << 0x18\n 24797: a3 = a3 | a4\n 24800: a1 = a1 | a3\n 24803: a2 = u8 [a0 + 0x15]\n 24806: a3 = u8 [a0 + 0x14]\n 24809: a4 = u8 [a0 + 0x16]\n 24812: a5 = u8 [a0 + 0x17]\n 24815: a2 = a2 << 0x8\n 24818: a2 = a2 | a3\n 24821: a4 = a4 << 0x10\n 24824: a5 = a5 << 0x18\n 24827: a4 = a4 | a5\n 24830: a2 = a2 | a4\n 24833: a2 = a2 << 0x20\n 24836: t0 = a2 | a1\n 24839: a2 = u8 [a0 + 0x1]\n 24842: a3 = u8 [a0]\n 24844: a4 = u8 [a0 + 0x2]\n 24847: a5 = u8 [a0 + 0x3]\n 24850: a2 = a2 << 0x8\n 24853: a2 = a2 | a3\n 24856: a4 = a4 << 0x10\n 24859: a5 = a5 << 0x18\n 24862: a4 = a4 | a5\n 24865: a2 = a2 | a4\n 24868: a3 = u8 [a0 + 0x5]\n 24871: a4 = u8 [a0 + 0x4]\n 24874: a5 = u8 [a0 + 0x6]\n 24877: s1 = u8 [a0 + 0x7]\n 24880: a3 = a3 << 0x8\n 24883: a3 = a3 | a4\n 24886: a5 = a5 << 0x10\n 24889: s1 = s1 << 0x18\n 24892: a5 = a5 | s1\n 24895: a3 = a3 | a5\n 24898: a3 = a3 << 0x20\n 24901: a2 = a2 | a3\n 24904: a3 = u8 [a0 + 0x19]\n 24907: a4 = u8 [a0 + 0x18]\n 24910: a5 = u8 [a0 + 0x1a]\n 24913: s1 = u8 [a0 + 0x1b]\n 24916: a3 = a3 << 0x8\n 24919: a3 = a3 | a4\n 24922: a5 = a5 << 0x10\n 24925: s1 = s1 << 0x18\n 24928: a5 = a5 | s1\n 24931: a3 = a3 | a5\n 24934: a4 = u8 [a0 + 0x1d]\n 24937: a5 = u8 [a0 + 0x1c]\n 24940: s1 = u8 [a0 + 0x1e]\n 24943: a1 = u8 [a0 + 0x1f]\n 24946: a4 = a4 << 0x8\n 24949: a4 = a4 | a5\n 24952: s1 = s1 << 0x10\n 24955: a1 = a1 << 0x18\n 24958: a1 = a1 | s1\n 24961: a1 = a1 | a4\n 24964: a1 = a1 << 0x20\n 24967: a3 = a3 | a1\n 24970: a1 = u8 [a0 + 0x9]\n 24973: a4 = u8 [a0 + 0x8]\n 24976: a5 = u8 [a0 + 0xa]\n 24979: s1 = u8 [a0 + 0xb]\n 24982: a1 = a1 << 0x8\n 24985: a1 = a1 | a4\n 24988: a5 = a5 << 0x10\n 24991: s1 = s1 << 0x18\n 24994: a5 = a5 | s1\n 24997: a1 = a1 | a5\n 25000: a4 = u8 [a0 + 0xd]\n 25003: a5 = u8 [a0 + 0xc]\n 25006: s1 = u8 [a0 + 0xe]\n 25009: a0 = u8 [a0 + 0xf]\n 25012: a4 = a4 << 0x8\n 25015: a4 = a4 | a5\n 25018: s1 = s1 << 0x10\n 25021: a0 = a0 << 0x18\n 25024: a0 = a0 | s1\n 25027: a0 = a0 | a4\n 25030: a0 = a0 << 0x20\n 25033: a0 = a0 | a1\n 25036: s1 = reverse a0\n 25038: a1 = reverse a3\n 25040: a2 = reverse a2\n 25042: a0 = reverse t0\n 25044: u64 [sp + 0x78] = a0\n 25047: u64 [sp + 0x70] = a2\n 25050: a0 = a0 | a2\n 25053: a2 = a1\n 25055: a1 = a1 | s1\n 25058: a1 = a1 | a0\n 25061: a1 = a1 >> 0x20\n 25064: a0 = a0 | s1\n 25067: a0 = a0 << 0x20\n 25070: a0 = a0 | a1\n 25073: jump @368 if a0 != 0\n      : @364 (gas: 5)\n 25077: u64 [sp + 0x68] = a2\n 25080: i32 a0 = a2 + 0\n 25082: a1 = 0x20\n 25085: u64 [sp + 0x60] = a0\n 25088: ra = 324, jump @0\n      : @365 [@dyn 162] (gas: 50)\n 25094: u8 [a0 + 31] = 0\n 25097: u8 [a0 + 30] = 0\n 25100: u8 [a0 + 29] = 0\n 25103: u8 [a0 + 28] = 0\n 25106: u8 [a0 + 27] = 0\n 25109: u8 [a0 + 26] = 0\n 25112: u8 [a0 + 25] = 0\n 25115: u8 [a0 + 24] = 0\n 25118: u8 [a0 + 23] = 0\n 25121: u8 [a0 + 22] = 0\n 25124: u8 [a0 + 21] = 0\n 25127: u8 [a0 + 20] = 0\n 25130: u8 [a0 + 19] = 0\n 25133: u8 [a0 + 18] = 0\n 25136: u8 [a0 + 17] = 0\n 25139: u8 [a0 + 16] = 0\n 25142: u8 [a0 + 15] = 0\n 25145: u8 [a0 + 14] = 0\n 25148: u8 [a0 + 13] = 0\n 25151: u8 [a0 + 12] = 0\n 25154: u8 [a0 + 11] = 0\n 25157: u8 [a0 + 10] = 0\n 25160: u8 [a0 + 9] = 0\n 25163: u8 [a0 + 8] = 0\n 25166: u8 [a0 + 7] = 0\n 25169: u8 [a0 + 6] = 0\n 25172: u8 [a0 + 5] = 0\n 25175: u8 [a0 + 4] = 0\n 25178: u8 [a0 + 3] = 0xa0\n 25183: u8 [a0 + 2] = 0x79\n 25187: u8 [a0 + 1] = 0xc3\n 25192: u8 [a0 + 0] = 0x8\n 25195: a1 = u64 [sp + 0x68]\n 25198: a0 = a1 + 0x4\n 25201: a1 = a0 <u a1\n 25204: a3 = u64 [sp + 0x78]\n 25207: a2 = a3 + a1\n 25210: a3 = a2 <u a3\n 25213: a3 = a1 if a1 == 0\n 25216: a3 = a3 + s1\n 25219: a1 = a3 <u s1\n 25222: a4 = u64 [sp + 0x70]\n 25225: a4 = a4 + a1\n 25228: u64 [sp + 0x108] = a2\n 25232: u64 [sp + 0x100] = a0\n 25236: u64 [sp + 0x110] = a3\n 25240: a0 = sp + 0x120\n 25244: a1 = sp + 0x100\n 25248: u64 [sp + 0x118] = a4\n 25252: ra = 326, jump @289\n      : @366 [@dyn 163] (gas: 5)\n 25258: a0 = u64 [sp + 0x128]\n 25262: t0 = u64 [sp + 0x138]\n 25266: t1 = u64 [sp + 0x120]\n 25270: a3 = u64 [sp + 0x130]\n 25274: fallthrough\n      : @367 (gas: 26)\n 25275: a1 = u64 [sp + 0x78]\n 25278: a4 = a0 ^ a1\n 25281: a5 = a0 <u a1\n 25284: t2 = a1\n 25286: a2 = u64 [sp + 0x68]\n 25289: a1 = t1 <u a2\n 25292: a5 = a1 if a4 == 0\n 25295: a4 = a3 - s1\n 25298: a3 = a3 <u s1\n 25301: s1 = u64 [sp + 0x70]\n 25304: s1 = t0 - s1\n 25307: s1 = s1 - a3\n 25310: a3 = a4 <u a5\n 25313: s1 = s1 - a3\n 25316: a4 = a4 - a5\n 25319: a0 = a0 - t2\n 25322: a1 = a0 - a1\n 25325: a0 = t1 - a2\n 25328: a1 = a1 | s1\n 25331: a2 = a0 | a4\n 25334: a2 = a2 | a1\n 25337: a1 = a1 | a4\n 25340: a2 = a2 >> 0x20\n 25343: a1 = a1 << 0x20\n 25346: a1 = a1 | a2\n 25349: jump @375 if a1 == 0\n      : @368 (gas: 1)\n 25352: trap\n      : @369 (gas: 3)\n 25353: a0 = 0\n 25355: a1 = 0\n 25357: ra = 328, jump @0\n      : @370 [@dyn 164] (gas: 5)\n 25363: i32 a1 = a0 + 0\n 25365: a0 = 0x1\n 25368: a2 = 0\n 25370: ecalli 12 // 'seal_return'\n 25372: fallthrough\n      : @371 (gas: 8)\n 25373: u64 [sp + 240] = 0\n 25377: u64 [sp + 232] = 0\n 25381: u64 [sp + 224] = 0\n 25385: a0 = 0x4e487b7100000000\n 25395: a1 = sp + 0xe0\n 25399: u64 [sp + 0xf8] = a0\n 25403: a0 = 0\n 25405: ra = 330, jump @8\n      : @372 [@dyn 165] (gas: 7)\n 25411: u64 [sp + 216] = 0\n 25415: u64 [sp + 208] = 0\n 25419: u64 [sp + 192] = 0x41\n 25424: a0 = 0x4\n 25427: a1 = sp + 0xc0\n 25431: u64 [sp + 200] = 0\n 25435: ra = 332, jump @8\n      : @373 [@dyn 166] (gas: 3)\n 25441: a1 = 0x24\n 25444: a0 = 0\n 25446: ra = 334, jump @0\n      : @374 [@dyn 167] (gas: 5)\n 25452: i32 a1 = a0 + 0\n 25454: a0 = 0x1\n 25457: a2 = 0x24\n 25460: ecalli 12 // 'seal_return'\n 25462: fallthrough\n      : @375 (gas: 4)\n 25463: i32 s1 = a0 + 0\n 25465: a0 = u64 [sp + 0x60]\n 25468: a1 = s1\n 25470: ra = 336, jump @0\n      : @376 [@dyn 168] (gas: 6)\n 25476: i32 a1 = a0 + 0\n 25478: a0 = 0x1\n 25481: a2 = s1\n 25483: ra = 0x152\n 25487: ecalli 12 // 'seal_return'\n 25489: fallthrough\n      : @377 [@dyn 169] (gas: 9)\n 25490: a2 = u64 [a1 + 0x18]\n 25493: a3 = u64 [a1 + 0x10]\n 25496: a4 = u64 [a1 + 0x8]\n 25499: a1 = u64 [a1]\n 25501: u64 [a0 + 0x18] = a2\n 25504: u64 [a0 + 0x10] = a3\n 25507: u64 [a0 + 0x8] = a4\n 25510: u64 [a0] = a1\n 25512: ret\n      : @378 (gas: 17)\n 25514: sp = sp + 0xffffffffffffffa0\n 25517: u64 [sp + 0x58] = ra\n 25520: u64 [sp + 0x50] = s0\n 25523: u64 [sp + 0x48] = s1\n 25526: a3 = u64 [a1 + 0x18]\n 25529: a4 = u64 [a1 + 0x10]\n 25532: a5 = u64 [a1 + 0x8]\n 25535: s1 = u64 [a1]\n 25537: a1 = a5 | a3\n 25540: a2 = s1 | a4\n 25543: a2 = a2 | a1\n 25546: a2 = a2 >> 0x20\n 25549: a1 = a1 | a4\n 25552: a1 = a1 << 0x20\n 25555: a1 = a1 | a2\n 25558: u64 [sp + 0x28] = a0\n 25561: jump @385 if a1 != 0\n      : @379 (gas: 19)\n 25565: a0 = s1 + 0x20\n 25568: u64 [sp + 0x30] = a0\n 25571: a0 = a0 <u s1\n 25574: a1 = a5 + a0\n 25577: u64 [sp + 0x40] = a1\n 25580: u64 [sp + 0x8] = a5\n 25583: s0 = a1 <u a5\n 25586: s0 = a0 if a0 == 0\n 25589: s0 = s0 + a4\n 25592: u64 [sp + 0x10] = a4\n 25595: a0 = s0 <u a4\n 25598: u64 [sp + 0x18] = a3\n 25601: a0 = a0 + a3\n 25604: u64 [sp + 0x38] = a0\n 25607: u64 [sp] = s1\n 25609: i32 a0 = s1 + 0\n 25611: a1 = 0x20\n 25614: s1 = 0x20\n 25617: ra = 340, jump @0\n      : @380 [@dyn 170] (gas: 45)\n 25623: u8 [a0 + 0x1f] = s1\n 25626: a1 = u64 [sp + 0x30]\n 25629: s1 = a1\n 25631: a1 = a1 | s0\n 25634: a2 = u64 [sp + 0x40]\n 25637: a4 = u64 [sp + 0x38]\n 25640: a2 = a2 | a4\n 25643: a1 = a1 | a2\n 25646: a1 = a1 >> 0x20\n 25649: u64 [sp + 0x20] = s0\n 25652: a2 = a2 | s0\n 25655: a2 = a2 << 0x20\n 25658: a1 = a1 | a2\n 25661: u8 [a0 + 30] = 0\n 25664: u8 [a0 + 29] = 0\n 25667: u8 [a0 + 28] = 0\n 25670: u8 [a0 + 27] = 0\n 25673: u8 [a0 + 26] = 0\n 25676: u8 [a0 + 25] = 0\n 25679: u8 [a0 + 24] = 0\n 25682: u8 [a0 + 23] = 0\n 25685: u8 [a0 + 22] = 0\n 25688: u8 [a0 + 21] = 0\n 25691: u8 [a0 + 20] = 0\n 25694: u8 [a0 + 19] = 0\n 25697: u8 [a0 + 18] = 0\n 25700: u8 [a0 + 17] = 0\n 25703: u8 [a0 + 16] = 0\n 25706: u8 [a0 + 15] = 0\n 25709: u8 [a0 + 14] = 0\n 25712: u8 [a0 + 13] = 0\n 25715: u8 [a0 + 12] = 0\n 25718: u8 [a0 + 11] = 0\n 25721: u8 [a0 + 10] = 0\n 25724: u8 [a0 + 9] = 0\n 25727: u8 [a0 + 8] = 0\n 25730: u8 [a0 + 7] = 0\n 25733: u8 [a0 + 6] = 0\n 25736: u8 [a0 + 5] = 0\n 25739: u8 [a0 + 4] = 0\n 25742: u8 [a0 + 3] = 0\n 25745: u8 [a0 + 2] = 0\n 25748: u8 [a0 + 1] = 0\n 25751: u8 [a0 + 0] = 0\n 25753: jump @385 if a1 != 0\n      : @381 (gas: 4)\n 25757: i32 s0 = s1 + 0\n 25759: a1 = 0x20\n 25762: a0 = s0\n 25764: ra = 342, jump @0\n      : @382 [@dyn 171] (gas: 41)\n 25770: u8 [a0 + 31] = 0x8\n 25774: u8 [a0 + 30] = 0\n 25777: u8 [a0 + 29] = 0\n 25780: u8 [a0 + 28] = 0\n 25783: u8 [a0 + 27] = 0\n 25786: u8 [a0 + 26] = 0\n 25789: u8 [a0 + 25] = 0\n 25792: u8 [a0 + 24] = 0\n 25795: u8 [a0 + 23] = 0\n 25798: u8 [a0 + 22] = 0\n 25801: u8 [a0 + 21] = 0\n 25804: u8 [a0 + 20] = 0\n 25807: u8 [a0 + 19] = 0\n 25810: u8 [a0 + 18] = 0\n 25813: u8 [a0 + 17] = 0\n 25816: u8 [a0 + 16] = 0\n 25819: u8 [a0 + 15] = 0\n 25822: u8 [a0 + 14] = 0\n 25825: u8 [a0 + 13] = 0\n 25828: u8 [a0 + 12] = 0\n 25831: u8 [a0 + 11] = 0\n 25834: u8 [a0 + 10] = 0\n 25837: u8 [a0 + 9] = 0\n 25840: u8 [a0 + 8] = 0\n 25843: u8 [a0 + 7] = 0\n 25846: u8 [a0 + 6] = 0\n 25849: u8 [a0 + 5] = 0\n 25852: u8 [a0 + 4] = 0\n 25855: u8 [a0 + 3] = 0\n 25858: u8 [a0 + 2] = 0\n 25861: u8 [a0 + 1] = 0\n 25864: a1 = u64 [sp + 0x20]\n 25867: a2 = u64 [sp + 0x38]\n 25870: a1 = a1 | a2\n 25873: a2 = 0xffffffe0\n 25883: a2 = s1 <u a2\n 25886: a3 = u64 [sp + 0x40]\n 25889: a2 = 0 if a3 != 0\n 25891: a2 = 0 if a1 != 0\n 25893: u8 [a0 + 0] = 0\n 25895: jump @385 if a2 == 0\n      : @383 (gas: 3)\n 25899: i32 a0 = s0 + 0x20\n 25902: a1 = 0x20\n 25905: ra = 344, jump @0\n      : @384 [@dyn 172] (gas: 54)\n 25911: u8 [a0 + 31] = 0\n 25914: u8 [a0 + 30] = 0\n 25917: u8 [a0 + 29] = 0\n 25920: u8 [a0 + 28] = 0\n 25923: u8 [a0 + 27] = 0\n 25926: u8 [a0 + 26] = 0\n 25929: u8 [a0 + 25] = 0\n 25932: u8 [a0 + 24] = 0\n 25935: u8 [a0 + 23] = 0\n 25938: u8 [a0 + 22] = 0\n 25941: u8 [a0 + 21] = 0\n 25944: u8 [a0 + 20] = 0\n 25947: u8 [a0 + 19] = 0\n 25950: u8 [a0 + 18] = 0\n 25953: u8 [a0 + 17] = 0\n 25956: u8 [a0 + 16] = 0\n 25959: u8 [a0 + 15] = 0\n 25962: u8 [a0 + 14] = 0\n 25965: u8 [a0 + 13] = 0\n 25968: u8 [a0 + 12] = 0\n 25971: u8 [a0 + 11] = 0\n 25974: u8 [a0 + 10] = 0\n 25977: u8 [a0 + 9] = 0\n 25980: u8 [a0 + 8] = 0\n 25983: u8 [a0 + 7] = 0x65\n 25987: u8 [a0 + 6] = 0x76\n 25991: u8 [a0 + 5] = 0x69\n 25995: u8 [a0 + 4] = 0x74\n 25999: u8 [a0 + 3] = 0x63\n 26003: u8 [a0 + 2] = 0x61\n 26007: u8 [a0 + 1] = 0x6e\n 26011: u8 [a0 + 0] = 0x49\n 26014: a1 = u64 [sp]\n 26016: a0 = a1 + 0x60\n 26019: a1 = a0 <u a1\n 26022: a3 = u64 [sp + 0x8]\n 26025: a2 = a3 + a1\n 26028: a3 = a2 <u a3\n 26031: a3 = a1 if a1 == 0\n 26034: a1 = u64 [sp + 0x10]\n 26037: a3 = a3 + a1\n 26040: a1 = a3 <u a1\n 26043: a4 = u64 [sp + 0x18]\n 26046: a1 = a1 + a4\n 26049: a4 = u64 [sp + 0x28]\n 26052: u64 [a4] = a0\n 26054: u64 [a4 + 0x8] = a2\n 26057: u64 [a4 + 0x10] = a3\n 26060: u64 [a4 + 0x18] = a1\n 26063: ra = u64 [sp + 0x58]\n 26066: s0 = u64 [sp + 0x50]\n 26069: s1 = u64 [sp + 0x48]\n 26072: sp = sp + 0x60\n 26075: ret\n      : @385 (gas: 1)\n 26077: trap\n      : @386 (gas: 17)\n 26078: sp = sp + 0xffffffffffffffa0\n 26081: u64 [sp + 0x58] = ra\n 26084: u64 [sp + 0x50] = s0\n 26087: u64 [sp + 0x48] = s1\n 26090: a3 = u64 [a1 + 0x18]\n 26093: a4 = u64 [a1 + 0x10]\n 26096: a5 = u64 [a1 + 0x8]\n 26099: s1 = u64 [a1]\n 26101: a1 = a5 | a3\n 26104: a2 = s1 | a4\n 26107: a2 = a2 | a1\n 26110: a2 = a2 >> 0x20\n 26113: a1 = a1 | a4\n 26116: a1 = a1 << 0x20\n 26119: a1 = a1 | a2\n 26122: u64 [sp + 0x28] = a0\n 26125: jump @393 if a1 != 0\n      : @387 (gas: 19)\n 26129: a0 = s1 + 0x20\n 26132: u64 [sp + 0x30] = a0\n 26135: a0 = a0 <u s1\n 26138: a1 = a5 + a0\n 26141: u64 [sp + 0x40] = a1\n 26144: u64 [sp + 0x8] = a5\n 26147: s0 = a1 <u a5\n 26150: s0 = a0 if a0 == 0\n 26153: s0 = s0 + a4\n 26156: u64 [sp + 0x10] = a4\n 26159: a0 = s0 <u a4\n 26162: u64 [sp + 0x18] = a3\n 26165: a0 = a0 + a3\n 26168: u64 [sp + 0x38] = a0\n 26171: u64 [sp] = s1\n 26173: i32 a0 = s1 + 0\n 26175: a1 = 0x20\n 26178: s1 = 0x20\n 26181: ra = 346, jump @0\n      : @388 [@dyn 173] (gas: 45)\n 26187: u8 [a0 + 0x1f] = s1\n 26190: a1 = u64 [sp + 0x30]\n 26193: s1 = a1\n 26195: a1 = a1 | s0\n 26198: a2 = u64 [sp + 0x40]\n 26201: a4 = u64 [sp + 0x38]\n 26204: a2 = a2 | a4\n 26207: a1 = a1 | a2\n 26210: a1 = a1 >> 0x20\n 26213: u64 [sp + 0x20] = s0\n 26216: a2 = a2 | s0\n 26219: a2 = a2 << 0x20\n 26222: a1 = a1 | a2\n 26225: u8 [a0 + 30] = 0\n 26228: u8 [a0 + 29] = 0\n 26231: u8 [a0 + 28] = 0\n 26234: u8 [a0 + 27] = 0\n 26237: u8 [a0 + 26] = 0\n 26240: u8 [a0 + 25] = 0\n 26243: u8 [a0 + 24] = 0\n 26246: u8 [a0 + 23] = 0\n 26249: u8 [a0 + 22] = 0\n 26252: u8 [a0 + 21] = 0\n 26255: u8 [a0 + 20] = 0\n 26258: u8 [a0 + 19] = 0\n 26261: u8 [a0 + 18] = 0\n 26264: u8 [a0 + 17] = 0\n 26267: u8 [a0 + 16] = 0\n 26270: u8 [a0 + 15] = 0\n 26273: u8 [a0 + 14] = 0\n 26276: u8 [a0 + 13] = 0\n 26279: u8 [a0 + 12] = 0\n 26282: u8 [a0 + 11] = 0\n 26285: u8 [a0 + 10] = 0\n 26288: u8 [a0 + 9] = 0\n 26291: u8 [a0 + 8] = 0\n 26294: u8 [a0 + 7] = 0\n 26297: u8 [a0 + 6] = 0\n 26300: u8 [a0 + 5] = 0\n 26303: u8 [a0 + 4] = 0\n 26306: u8 [a0 + 3] = 0\n 26309: u8 [a0 + 2] = 0\n 26312: u8 [a0 + 1] = 0\n 26315: u8 [a0 + 0] = 0\n 26317: jump @393 if a1 != 0\n      : @389 (gas: 4)\n 26321: i32 s0 = s1 + 0\n 26323: a1 = 0x20\n 26326: a0 = s0\n 26328: ra = 348, jump @0\n      : @390 [@dyn 174] (gas: 41)\n 26334: u8 [a0 + 31] = 0xa\n 26338: u8 [a0 + 30] = 0\n 26341: u8 [a0 + 29] = 0\n 26344: u8 [a0 + 28] = 0\n 26347: u8 [a0 + 27] = 0\n 26350: u8 [a0 + 26] = 0\n 26353: u8 [a0 + 25] = 0\n 26356: u8 [a0 + 24] = 0\n 26359: u8 [a0 + 23] = 0\n 26362: u8 [a0 + 22] = 0\n 26365: u8 [a0 + 21] = 0\n 26368: u8 [a0 + 20] = 0\n 26371: u8 [a0 + 19] = 0\n 26374: u8 [a0 + 18] = 0\n 26377: u8 [a0 + 17] = 0\n 26380: u8 [a0 + 16] = 0\n 26383: u8 [a0 + 15] = 0\n 26386: u8 [a0 + 14] = 0\n 26389: u8 [a0 + 13] = 0\n 26392: u8 [a0 + 12] = 0\n 26395: u8 [a0 + 11] = 0\n 26398: u8 [a0 + 10] = 0\n 26401: u8 [a0 + 9] = 0\n 26404: u8 [a0 + 8] = 0\n 26407: u8 [a0 + 7] = 0\n 26410: u8 [a0 + 6] = 0\n 26413: u8 [a0 + 5] = 0\n 26416: u8 [a0 + 4] = 0\n 26419: u8 [a0 + 3] = 0\n 26422: u8 [a0 + 2] = 0\n 26425: u8 [a0 + 1] = 0\n 26428: a1 = u64 [sp + 0x20]\n 26431: a2 = u64 [sp + 0x38]\n 26434: a1 = a1 | a2\n 26437: a2 = 0xffffffe0\n 26447: a2 = s1 <u a2\n 26450: a3 = u64 [sp + 0x40]\n 26453: a2 = 0 if a3 != 0\n 26455: a2 = 0 if a1 != 0\n 26457: u8 [a0 + 0] = 0\n 26459: jump @393 if a2 == 0\n      : @391 (gas: 3)\n 26463: i32 a0 = s0 + 0x20\n 26466: a1 = 0x20\n 26469: ra = 350, jump @0\n      : @392 [@dyn 175] (gas: 54)\n 26475: u8 [a0 + 31] = 0\n 26478: u8 [a0 + 30] = 0\n 26481: u8 [a0 + 29] = 0\n 26484: u8 [a0 + 28] = 0\n 26487: u8 [a0 + 27] = 0\n 26490: u8 [a0 + 26] = 0\n 26493: u8 [a0 + 25] = 0\n 26496: u8 [a0 + 24] = 0\n 26499: u8 [a0 + 23] = 0\n 26502: u8 [a0 + 22] = 0\n 26505: u8 [a0 + 21] = 0\n 26508: u8 [a0 + 20] = 0\n 26511: u8 [a0 + 19] = 0\n 26514: u8 [a0 + 18] = 0\n 26517: u8 [a0 + 17] = 0\n 26520: u8 [a0 + 16] = 0\n 26523: u8 [a0 + 15] = 0\n 26526: u8 [a0 + 14] = 0\n 26529: u8 [a0 + 13] = 0\n 26532: u8 [a0 + 12] = 0\n 26535: u8 [a0 + 11] = 0\n 26538: u8 [a0 + 10] = 0\n 26541: u8 [a0 + 9] = 0x72\n 26545: u8 [a0 + 8] = 0x65\n 26549: u8 [a0 + 7] = 0x6c\n 26553: u8 [a0 + 6] = 0x6c\n 26557: u8 [a0 + 5] = 0x65\n 26561: u8 [a0 + 4] = 0x73\n 26565: u8 [a0 + 3] = 0x20\n 26569: u8 [a0 + 2] = 0x74\n 26573: u8 [a0 + 1] = 0x6f\n 26577: u8 [a0 + 0] = 0x4e\n 26580: a1 = u64 [sp]\n 26582: a0 = a1 + 0x60\n 26585: a1 = a0 <u a1\n 26588: a3 = u64 [sp + 0x8]\n 26591: a2 = a3 + a1\n 26594: a3 = a2 <u a3\n 26597: a3 = a1 if a1 == 0\n 26600: a1 = u64 [sp + 0x10]\n 26603: a3 = a3 + a1\n 26606: a1 = a3 <u a1\n 26609: a4 = u64 [sp + 0x18]\n 26612: a1 = a1 + a4\n 26615: a4 = u64 [sp + 0x28]\n 26618: u64 [a4] = a0\n 26620: u64 [a4 + 0x8] = a2\n 26623: u64 [a4 + 0x10] = a3\n 26626: u64 [a4 + 0x18] = a1\n 26629: ra = u64 [sp + 0x58]\n 26632: s0 = u64 [sp + 0x50]\n 26635: s1 = u64 [sp + 0x48]\n 26638: sp = sp + 0x60\n 26641: ret\n      : @393 (gas: 1)\n 26643: trap\n      : @394 (gas: 19)\n 26644: t1 = u64 [sp + 0x30]\n 26647: t0 = u64 [sp + 0x28]\n 26650: a0 = u64 [sp + 0x1f8]\n 26654: a1 = u64 [sp + 0x1e0]\n 26658: t2 = u64 [sp + 0x1f0]\n 26662: a3 = u64 [sp + 0x1e8]\n 26666: a4 = a0 ^ s1\n 26669: a0 = s1 <u a0\n 26672: a2 = u64 [sp + 0x38]\n 26675: a5 = a2 <u t2\n 26678: a5 = a0 if a4 != 0\n 26681: a0 = a3 ^ t0\n 26684: a3 = t0 <u a3\n 26687: a1 = t1 <u a1\n 26690: a1 = a3 if a0 != 0\n 26693: a0 = t2 ^ a2\n 26696: a0 = a0 | a4\n 26699: a1 = a5 if a0 != 0\n 26702: jump @401 if a1 == 0\n      : @395 (gas: 12)\n 26706: u64 [sp + 0xc0] = t1\n 26710: u64 [sp + 248] = 0\n 26714: u64 [sp + 240] = 0\n 26718: u64 [sp + 232] = 0\n 26722: u64 [sp + 224] = 0\n 26726: u64 [sp + 0xc8] = t0\n 26730: u64 [sp + 0xd0] = a2\n 26734: a0 = sp + 0x100\n 26738: a1 = sp + 0xe0\n 26742: a2 = sp + 0xc0\n 26746: u64 [sp + 0xd8] = s1\n 26750: ra = 352, jump @222\n      : @396 [@dyn 176] (gas: 24)\n 26756: a3 = u64 [sp + 0x118]\n 26760: a2 = u64 [sp + 0x110]\n 26764: a1 = u64 [sp + 0x108]\n 26768: a0 = u64 [sp + 0x100]\n 26772: u64 [sp + 0x20] = a3\n 26775: u64 [sp + 0x1d8] = a3\n 26779: u64 [sp + 0x28] = a2\n 26782: u64 [sp + 0x1d0] = a2\n 26786: u64 [sp + 0x30] = a1\n 26789: u64 [sp + 0x1c8] = a1\n 26793: u64 [sp + 0x38] = a0\n 26796: u64 [sp + 0x1c0] = a0\n 26800: u64 [sp + 504] = 0\n 26804: u64 [sp + 496] = 0\n 26808: u64 [sp + 488] = 0\n 26812: u64 [sp + 480] = 0\n 26816: u32 [sp + 416] = 0x20\n 26821: i32 a1 = sp + 0x1c0\n 26825: i32 a3 = sp + 0x1e0\n 26829: i32 a4 = sp + 0x1a0\n 26833: a2 = 0xffffffffffffffff\n 26836: a0 = 0\n 26838: ecalli 7 // 'get_storage'\n 26840: fallthrough\n      : @397 (gas: 2)\n 26841: a0 = u8 [sp + 0x1f6]\n 26845: jump @406 if a0 == 0\n      : @398 (gas: 37)\n 26849: i32 a0 = sp + 0x180\n 26853: ecalli 5 // 'caller'\n 26855: a0 = u64 [sp + 0x188]\n 26859: a1 = u64 [sp + 0x180]\n 26863: a2 = i32 [sp + 0x190]\n 26867: a0 = reverse a0\n 26869: a3 = a0 >> 0x20\n 26872: s1 = reverse a1\n 26874: a1 = s1 << 0x20\n 26877: a1 = a1 | a3\n 26880: u64 [sp + 0x18] = a1\n 26883: a0 = a0 << 0x20\n 26886: a1 = reverse a2\n 26888: a1 = a1 >> 0x20\n 26891: a0 = a0 | a1\n 26894: u64 [sp + 0x10] = a0\n 26897: s1 = s1 >> 0x20\n 26900: a0 = u64 [sp + 0x20]\n 26903: u64 [sp + 0x1d8] = a0\n 26907: a0 = u64 [sp + 0x28]\n 26910: u64 [sp + 0x1d0] = a0\n 26914: a0 = u64 [sp + 0x30]\n 26917: u64 [sp + 0x1c8] = a0\n 26921: a0 = u64 [sp + 0x38]\n 26924: u64 [sp + 0x1c0] = a0\n 26928: u64 [sp + 504] = 0\n 26932: u64 [sp + 496] = 0\n 26936: u64 [sp + 488] = 0\n 26940: u64 [sp + 480] = 0\n 26944: u32 [sp + 416] = 0x20\n 26949: i32 a1 = sp + 0x1c0\n 26953: i32 a3 = sp + 0x1e0\n 26957: i32 a4 = sp + 0x1a0\n 26961: a2 = 0xffffffffffffffff\n 26964: a0 = 0\n 26966: ecalli 7 // 'get_storage'\n 26968: fallthrough\n      : @399 (gas: 11)\n 26969: a0 = u32 [sp + 0x1f0]\n 26973: a1 = u64 [sp + 0x1e0]\n 26977: a2 = u64 [sp + 0x1e8]\n 26981: a0 = a0 ^ s1\n 26984: a3 = u64 [sp + 0x10]\n 26987: a1 = a1 ^ a3\n 26990: a0 = a0 | a1\n 26993: a1 = u64 [sp + 0x18]\n 26996: a1 = a1 ^ a2\n 26999: a0 = a0 | a1\n 27002: jump @411 if a0 != 0\n      : @400 (gas: 48)\n 27006: a0 = u64 [sp + 0x28]\n 27009: u64 [sp + 0x1d0] = a0\n 27013: a0 = u64 [sp + 0x30]\n 27016: u64 [sp + 0x1c8] = a0\n 27020: a0 = u64 [sp + 0x38]\n 27023: u64 [sp + 0x1c0] = a0\n 27027: s1 = u64 [sp + 0x20]\n 27030: u64 [sp + 0x1d8] = s1\n 27034: u64 [sp + 504] = 0\n 27038: u64 [sp + 496] = 0\n 27042: u64 [sp + 488] = 0\n 27046: u64 [sp + 480] = 0\n 27050: u32 [sp + 416] = 0x20\n 27055: i32 a1 = sp + 0x1c0\n 27059: i32 a3 = sp + 0x1e0\n 27063: i32 a4 = sp + 0x1a0\n 27067: a2 = 0xffffffffffffffff\n 27070: a0 = 0\n 27072: ecalli 7 // 'get_storage'\n 27074: a0 = u64 [sp + 0x1e0]\n 27078: a1 = u64 [sp + 0x1e8]\n 27082: a2 = u64 [sp + 0x1f0]\n 27086: a3 = u64 [sp + 0x1f8]\n 27090: a4 = 0xff00ffffffffffff\n 27100: a2 = a2 & a4\n 27103: u64 [sp + 0x1d8] = s1\n 27107: a4 = u64 [sp + 0x28]\n 27110: u64 [sp + 0x1d0] = a4\n 27114: a4 = u64 [sp + 0x30]\n 27117: u64 [sp + 0x1c8] = a4\n 27121: a4 = u64 [sp + 0x38]\n 27124: u64 [sp + 0x1c0] = a4\n 27128: u64 [sp + 0x1f8] = a3\n 27132: u64 [sp + 0x1f0] = a2\n 27136: u64 [sp + 0x1e8] = a1\n 27140: u64 [sp + 0x1e0] = a0\n 27144: i32 a1 = sp + 0x1c0\n 27148: i32 a3 = sp + 0x1e0\n 27152: a2 = 0xffffffffffffffff\n 27155: a4 = 0x20\n 27158: a0 = 0\n 27160: ecalli 14 // 'set_storage'\n 27162: sp = s0 + 0xfffffffffffffde0\n 27166: ra = u64 [sp + 0x218]\n 27170: s0 = u64 [sp + 0x210]\n 27174: s1 = u64 [sp + 0x208]\n 27178: sp = sp + 0x220\n 27182: ret\n      : @401 (gas: 3)\n 27184: a0 = 0x40\n 27187: a1 = 0x20\n 27190: ra = 354, jump @0\n      : @402 [@dyn 177] (gas: 103)\n 27196: a1 = u8 [a0 + 0x11]\n 27199: a2 = u8 [a0 + 0x10]\n 27202: a3 = u8 [a0 + 0x12]\n 27205: a4 = u8 [a0 + 0x13]\n 27208: a1 = a1 << 0x8\n 27211: a1 = a1 | a2\n 27214: a3 = a3 << 0x10\n 27217: a4 = a4 << 0x18\n 27220: a3 = a3 | a4\n 27223: a1 = a1 | a3\n 27226: a2 = u8 [a0 + 0x15]\n 27229: a3 = u8 [a0 + 0x14]\n 27232: a4 = u8 [a0 + 0x16]\n 27235: a5 = u8 [a0 + 0x17]\n 27238: a2 = a2 << 0x8\n 27241: a2 = a2 | a3\n 27244: a4 = a4 << 0x10\n 27247: a5 = a5 << 0x18\n 27250: a4 = a4 | a5\n 27253: a2 = a2 | a4\n 27256: a2 = a2 << 0x20\n 27259: t0 = a2 | a1\n 27262: a2 = u8 [a0 + 0x1]\n 27265: a3 = u8 [a0]\n 27267: a4 = u8 [a0 + 0x2]\n 27270: a5 = u8 [a0 + 0x3]\n 27273: a2 = a2 << 0x8\n 27276: a2 = a2 | a3\n 27279: a4 = a4 << 0x10\n 27282: a5 = a5 << 0x18\n 27285: a4 = a4 | a5\n 27288: a2 = a2 | a4\n 27291: a3 = u8 [a0 + 0x5]\n 27294: a4 = u8 [a0 + 0x4]\n 27297: a5 = u8 [a0 + 0x6]\n 27300: s1 = u8 [a0 + 0x7]\n 27303: a3 = a3 << 0x8\n 27306: a3 = a3 | a4\n 27309: a5 = a5 << 0x10\n 27312: s1 = s1 << 0x18\n 27315: a5 = a5 | s1\n 27318: a3 = a3 | a5\n 27321: a3 = a3 << 0x20\n 27324: a2 = a2 | a3\n 27327: a3 = u8 [a0 + 0x19]\n 27330: a4 = u8 [a0 + 0x18]\n 27333: a5 = u8 [a0 + 0x1a]\n 27336: s1 = u8 [a0 + 0x1b]\n 27339: a3 = a3 << 0x8\n 27342: a3 = a3 | a4\n 27345: a5 = a5 << 0x10\n 27348: s1 = s1 << 0x18\n 27351: a5 = a5 | s1\n 27354: a3 = a3 | a5\n 27357: a4 = u8 [a0 + 0x1d]\n 27360: a5 = u8 [a0 + 0x1c]\n 27363: s1 = u8 [a0 + 0x1e]\n 27366: a1 = u8 [a0 + 0x1f]\n 27369: a4 = a4 << 0x8\n 27372: a4 = a4 | a5\n 27375: s1 = s1 << 0x10\n 27378: a1 = a1 << 0x18\n 27381: a1 = a1 | s1\n 27384: a1 = a1 | a4\n 27387: a1 = a1 << 0x20\n 27390: a3 = a3 | a1\n 27393: a1 = u8 [a0 + 0x9]\n 27396: a4 = u8 [a0 + 0x8]\n 27399: a5 = u8 [a0 + 0xa]\n 27402: s1 = u8 [a0 + 0xb]\n 27405: a1 = a1 << 0x8\n 27408: a1 = a1 | a4\n 27411: a5 = a5 << 0x10\n 27414: s1 = s1 << 0x18\n 27417: a5 = a5 | s1\n 27420: a1 = a1 | a5\n 27423: a4 = u8 [a0 + 0xd]\n 27426: a5 = u8 [a0 + 0xc]\n 27429: s1 = u8 [a0 + 0xe]\n 27432: a0 = u8 [a0 + 0xf]\n 27435: a4 = a4 << 0x8\n 27438: a4 = a4 | a5\n 27441: s1 = s1 << 0x10\n 27444: a0 = a0 << 0x18\n 27447: a0 = a0 | s1\n 27450: a0 = a0 | a4\n 27453: a0 = a0 << 0x20\n 27456: a0 = a0 | a1\n 27459: s1 = reverse a0\n 27461: a1 = reverse a3\n 27463: a2 = reverse a2\n 27465: a0 = reverse t0\n 27467: u64 [sp + 0x38] = a0\n 27470: u64 [sp + 0x30] = a2\n 27473: a0 = a0 | a2\n 27476: a2 = a1\n 27478: a1 = a1 | s1\n 27481: a1 = a1 | a0\n 27484: a1 = a1 >> 0x20\n 27487: a0 = a0 | s1\n 27490: a0 = a0 << 0x20\n 27493: a0 = a0 | a1\n 27496: jump @417 if a0 != 0\n      : @403 (gas: 5)\n 27500: u64 [sp + 0x28] = a2\n 27503: i32 a0 = a2 + 0\n 27505: a1 = 0x20\n 27508: u64 [sp + 0x20] = a0\n 27511: ra = 356, jump @0\n      : @404 [@dyn 178] (gas: 50)\n 27517: u8 [a0 + 31] = 0\n 27520: u8 [a0 + 30] = 0\n 27523: u8 [a0 + 29] = 0\n 27526: u8 [a0 + 28] = 0\n 27529: u8 [a0 + 27] = 0\n 27532: u8 [a0 + 26] = 0\n 27535: u8 [a0 + 25] = 0\n 27538: u8 [a0 + 24] = 0\n 27541: u8 [a0 + 23] = 0\n 27544: u8 [a0 + 22] = 0\n 27547: u8 [a0 + 21] = 0\n 27550: u8 [a0 + 20] = 0\n 27553: u8 [a0 + 19] = 0\n 27556: u8 [a0 + 18] = 0\n 27559: u8 [a0 + 17] = 0\n 27562: u8 [a0 + 16] = 0\n 27565: u8 [a0 + 15] = 0\n 27568: u8 [a0 + 14] = 0\n 27571: u8 [a0 + 13] = 0\n 27574: u8 [a0 + 12] = 0\n 27577: u8 [a0 + 11] = 0\n 27580: u8 [a0 + 10] = 0\n 27583: u8 [a0 + 9] = 0\n 27586: u8 [a0 + 8] = 0\n 27589: u8 [a0 + 7] = 0\n 27592: u8 [a0 + 6] = 0\n 27595: u8 [a0 + 5] = 0\n 27598: u8 [a0 + 4] = 0\n 27601: u8 [a0 + 3] = 0xa0\n 27606: u8 [a0 + 2] = 0x79\n 27610: u8 [a0 + 1] = 0xc3\n 27615: u8 [a0 + 0] = 0x8\n 27618: a1 = u64 [sp + 0x28]\n 27621: a0 = a1 + 0x4\n 27624: a1 = a0 <u a1\n 27627: a3 = u64 [sp + 0x38]\n 27630: a2 = a3 + a1\n 27633: a3 = a2 <u a3\n 27636: a3 = a1 if a1 == 0\n 27639: a3 = a3 + s1\n 27642: a1 = a3 <u s1\n 27645: a4 = u64 [sp + 0x30]\n 27648: a4 = a4 + a1\n 27651: u64 [sp + 0x148] = a2\n 27655: u64 [sp + 0x140] = a0\n 27659: u64 [sp + 0x150] = a3\n 27663: a0 = sp + 0x160\n 27667: a1 = sp + 0x140\n 27671: u64 [sp + 0x158] = a4\n 27675: ra = 358, jump @265\n      : @405 [@dyn 179] (gas: 5)\n 27681: a0 = u64 [sp + 0x168]\n 27685: t0 = u64 [sp + 0x178]\n 27689: t1 = u64 [sp + 0x160]\n 27693: a3 = u64 [sp + 0x170]\n 27697: jump @416\n      : @406 (gas: 3)\n 27700: a0 = 0x40\n 27703: a1 = 0x20\n 27706: ra = 360, jump @0\n      : @407 [@dyn 180] (gas: 103)\n 27712: a1 = u8 [a0 + 0x11]\n 27715: a2 = u8 [a0 + 0x10]\n 27718: a3 = u8 [a0 + 0x12]\n 27721: a4 = u8 [a0 + 0x13]\n 27724: a1 = a1 << 0x8\n 27727: a1 = a1 | a2\n 27730: a3 = a3 << 0x10\n 27733: a4 = a4 << 0x18\n 27736: a3 = a3 | a4\n 27739: a1 = a1 | a3\n 27742: a2 = u8 [a0 + 0x15]\n 27745: a3 = u8 [a0 + 0x14]\n 27748: a4 = u8 [a0 + 0x16]\n 27751: a5 = u8 [a0 + 0x17]\n 27754: a2 = a2 << 0x8\n 27757: a2 = a2 | a3\n 27760: a4 = a4 << 0x10\n 27763: a5 = a5 << 0x18\n 27766: a4 = a4 | a5\n 27769: a2 = a2 | a4\n 27772: a2 = a2 << 0x20\n 27775: t0 = a2 | a1\n 27778: a2 = u8 [a0 + 0x1]\n 27781: a3 = u8 [a0]\n 27783: a4 = u8 [a0 + 0x2]\n 27786: a5 = u8 [a0 + 0x3]\n 27789: a2 = a2 << 0x8\n 27792: a2 = a2 | a3\n 27795: a4 = a4 << 0x10\n 27798: a5 = a5 << 0x18\n 27801: a4 = a4 | a5\n 27804: a2 = a2 | a4\n 27807: a3 = u8 [a0 + 0x5]\n 27810: a4 = u8 [a0 + 0x4]\n 27813: a5 = u8 [a0 + 0x6]\n 27816: s1 = u8 [a0 + 0x7]\n 27819: a3 = a3 << 0x8\n 27822: a3 = a3 | a4\n 27825: a5 = a5 << 0x10\n 27828: s1 = s1 << 0x18\n 27831: a5 = a5 | s1\n 27834: a3 = a3 | a5\n 27837: a3 = a3 << 0x20\n 27840: a2 = a2 | a3\n 27843: a3 = u8 [a0 + 0x19]\n 27846: a4 = u8 [a0 + 0x18]\n 27849: a5 = u8 [a0 + 0x1a]\n 27852: s1 = u8 [a0 + 0x1b]\n 27855: a3 = a3 << 0x8\n 27858: a3 = a3 | a4\n 27861: a5 = a5 << 0x10\n 27864: s1 = s1 << 0x18\n 27867: a5 = a5 | s1\n 27870: a3 = a3 | a5\n 27873: a4 = u8 [a0 + 0x1d]\n 27876: a5 = u8 [a0 + 0x1c]\n 27879: s1 = u8 [a0 + 0x1e]\n 27882: a1 = u8 [a0 + 0x1f]\n 27885: a4 = a4 << 0x8\n 27888: a4 = a4 | a5\n 27891: s1 = s1 << 0x10\n 27894: a1 = a1 << 0x18\n 27897: a1 = a1 | s1\n 27900: a1 = a1 | a4\n 27903: a1 = a1 << 0x20\n 27906: a3 = a3 | a1\n 27909: a1 = u8 [a0 + 0x9]\n 27912: a4 = u8 [a0 + 0x8]\n 27915: a5 = u8 [a0 + 0xa]\n 27918: s1 = u8 [a0 + 0xb]\n 27921: a1 = a1 << 0x8\n 27924: a1 = a1 | a4\n 27927: a5 = a5 << 0x10\n 27930: s1 = s1 << 0x18\n 27933: a5 = a5 | s1\n 27936: a1 = a1 | a5\n 27939: a4 = u8 [a0 + 0xd]\n 27942: a5 = u8 [a0 + 0xc]\n 27945: s1 = u8 [a0 + 0xe]\n 27948: a0 = u8 [a0 + 0xf]\n 27951: a4 = a4 << 0x8\n 27954: a4 = a4 | a5\n 27957: s1 = s1 << 0x10\n 27960: a0 = a0 << 0x18\n 27963: a0 = a0 | s1\n 27966: a0 = a0 | a4\n 27969: a0 = a0 << 0x20\n 27972: a0 = a0 | a1\n 27975: s1 = reverse a0\n 27977: a1 = reverse a3\n 27979: a2 = reverse a2\n 27981: a0 = reverse t0\n 27983: u64 [sp + 0x38] = a0\n 27986: u64 [sp + 0x30] = a2\n 27989: a0 = a0 | a2\n 27992: a2 = a1\n 27994: a1 = a1 | s1\n 27997: a1 = a1 | a0\n 28000: a1 = a1 >> 0x20\n 28003: a0 = a0 | s1\n 28006: a0 = a0 << 0x20\n 28009: a0 = a0 | a1\n 28012: jump @417 if a0 != 0\n      : @408 (gas: 5)\n 28016: u64 [sp + 0x28] = a2\n 28019: i32 a0 = a2 + 0\n 28021: a1 = 0x20\n 28024: u64 [sp + 0x20] = a0\n 28027: ra = 362, jump @0\n      : @409 [@dyn 181] (gas: 50)\n 28033: u8 [a0 + 31] = 0\n 28036: u8 [a0 + 30] = 0\n 28039: u8 [a0 + 29] = 0\n 28042: u8 [a0 + 28] = 0\n 28045: u8 [a0 + 27] = 0\n 28048: u8 [a0 + 26] = 0\n 28051: u8 [a0 + 25] = 0\n 28054: u8 [a0 + 24] = 0\n 28057: u8 [a0 + 23] = 0\n 28060: u8 [a0 + 22] = 0\n 28063: u8 [a0 + 21] = 0\n 28066: u8 [a0 + 20] = 0\n 28069: u8 [a0 + 19] = 0\n 28072: u8 [a0 + 18] = 0\n 28075: u8 [a0 + 17] = 0\n 28078: u8 [a0 + 16] = 0\n 28081: u8 [a0 + 15] = 0\n 28084: u8 [a0 + 14] = 0\n 28087: u8 [a0 + 13] = 0\n 28090: u8 [a0 + 12] = 0\n 28093: u8 [a0 + 11] = 0\n 28096: u8 [a0 + 10] = 0\n 28099: u8 [a0 + 9] = 0\n 28102: u8 [a0 + 8] = 0\n 28105: u8 [a0 + 7] = 0\n 28108: u8 [a0 + 6] = 0\n 28111: u8 [a0 + 5] = 0\n 28114: u8 [a0 + 4] = 0\n 28117: u8 [a0 + 3] = 0xa0\n 28122: u8 [a0 + 2] = 0x79\n 28126: u8 [a0 + 1] = 0xc3\n 28131: u8 [a0 + 0] = 0x8\n 28134: a1 = u64 [sp + 0x28]\n 28137: a0 = a1 + 0x4\n 28140: a1 = a0 <u a1\n 28143: a3 = u64 [sp + 0x38]\n 28146: a2 = a3 + a1\n 28149: a3 = a2 <u a3\n 28152: a3 = a1 if a1 == 0\n 28155: a3 = a3 + s1\n 28158: a1 = a3 <u s1\n 28161: a4 = u64 [sp + 0x30]\n 28164: a4 = a4 + a1\n 28167: u64 [sp + 0x48] = a2\n 28170: u64 [sp + 0x40] = a0\n 28173: u64 [sp + 0x50] = a3\n 28176: a0 = sp + 0x60\n 28179: a1 = sp + 0x40\n 28182: u64 [sp + 0x58] = a4\n 28185: ra = 364, jump @378\n      : @410 [@dyn 182] (gas: 5)\n 28191: a0 = u64 [sp + 0x68]\n 28194: t0 = u64 [sp + 0x78]\n 28197: t1 = u64 [sp + 0x60]\n 28200: a3 = u64 [sp + 0x70]\n 28203: jump @416\n      : @411 (gas: 3)\n 28206: a0 = 0x40\n 28209: a1 = 0x20\n 28212: ra = 366, jump @0\n      : @412 [@dyn 183] (gas: 103)\n 28218: a1 = u8 [a0 + 0x11]\n 28221: a2 = u8 [a0 + 0x10]\n 28224: a3 = u8 [a0 + 0x12]\n 28227: a4 = u8 [a0 + 0x13]\n 28230: a1 = a1 << 0x8\n 28233: a1 = a1 | a2\n 28236: a3 = a3 << 0x10\n 28239: a4 = a4 << 0x18\n 28242: a3 = a3 | a4\n 28245: a1 = a1 | a3\n 28248: a2 = u8 [a0 + 0x15]\n 28251: a3 = u8 [a0 + 0x14]\n 28254: a4 = u8 [a0 + 0x16]\n 28257: a5 = u8 [a0 + 0x17]\n 28260: a2 = a2 << 0x8\n 28263: a2 = a2 | a3\n 28266: a4 = a4 << 0x10\n 28269: a5 = a5 << 0x18\n 28272: a4 = a4 | a5\n 28275: a2 = a2 | a4\n 28278: a2 = a2 << 0x20\n 28281: t0 = a2 | a1\n 28284: a2 = u8 [a0 + 0x1]\n 28287: a3 = u8 [a0]\n 28289: a4 = u8 [a0 + 0x2]\n 28292: a5 = u8 [a0 + 0x3]\n 28295: a2 = a2 << 0x8\n 28298: a2 = a2 | a3\n 28301: a4 = a4 << 0x10\n 28304: a5 = a5 << 0x18\n 28307: a4 = a4 | a5\n 28310: a2 = a2 | a4\n 28313: a3 = u8 [a0 + 0x5]\n 28316: a4 = u8 [a0 + 0x4]\n 28319: a5 = u8 [a0 + 0x6]\n 28322: s1 = u8 [a0 + 0x7]\n 28325: a3 = a3 << 0x8\n 28328: a3 = a3 | a4\n 28331: a5 = a5 << 0x10\n 28334: s1 = s1 << 0x18\n 28337: a5 = a5 | s1\n 28340: a3 = a3 | a5\n 28343: a3 = a3 << 0x20\n 28346: a2 = a2 | a3\n 28349: a3 = u8 [a0 + 0x19]\n 28352: a4 = u8 [a0 + 0x18]\n 28355: a5 = u8 [a0 + 0x1a]\n 28358: s1 = u8 [a0 + 0x1b]\n 28361: a3 = a3 << 0x8\n 28364: a3 = a3 | a4\n 28367: a5 = a5 << 0x10\n 28370: s1 = s1 << 0x18\n 28373: a5 = a5 | s1\n 28376: a3 = a3 | a5\n 28379: a4 = u8 [a0 + 0x1d]\n 28382: a5 = u8 [a0 + 0x1c]\n 28385: s1 = u8 [a0 + 0x1e]\n 28388: a1 = u8 [a0 + 0x1f]\n 28391: a4 = a4 << 0x8\n 28394: a4 = a4 | a5\n 28397: s1 = s1 << 0x10\n 28400: a1 = a1 << 0x18\n 28403: a1 = a1 | s1\n 28406: a1 = a1 | a4\n 28409: a1 = a1 << 0x20\n 28412: a3 = a3 | a1\n 28415: a1 = u8 [a0 + 0x9]\n 28418: a4 = u8 [a0 + 0x8]\n 28421: a5 = u8 [a0 + 0xa]\n 28424: s1 = u8 [a0 + 0xb]\n 28427: a1 = a1 << 0x8\n 28430: a1 = a1 | a4\n 28433: a5 = a5 << 0x10\n 28436: s1 = s1 << 0x18\n 28439: a5 = a5 | s1\n 28442: a1 = a1 | a5\n 28445: a4 = u8 [a0 + 0xd]\n 28448: a5 = u8 [a0 + 0xc]\n 28451: s1 = u8 [a0 + 0xe]\n 28454: a0 = u8 [a0 + 0xf]\n 28457: a4 = a4 << 0x8\n 28460: a4 = a4 | a5\n 28463: s1 = s1 << 0x10\n 28466: a0 = a0 << 0x18\n 28469: a0 = a0 | s1\n 28472: a0 = a0 | a4\n 28475: a0 = a0 << 0x20\n 28478: a0 = a0 | a1\n 28481: s1 = reverse a0\n 28483: a1 = reverse a3\n 28485: a2 = reverse a2\n 28487: a0 = reverse t0\n 28489: u64 [sp + 0x38] = a0\n 28492: u64 [sp + 0x30] = a2\n 28495: a0 = a0 | a2\n 28498: a2 = a1\n 28500: a1 = a1 | s1\n 28503: a1 = a1 | a0\n 28506: a1 = a1 >> 0x20\n 28509: a0 = a0 | s1\n 28512: a0 = a0 << 0x20\n 28515: a0 = a0 | a1\n 28518: jump @417 if a0 != 0\n      : @413 (gas: 5)\n 28522: u64 [sp + 0x28] = a2\n 28525: i32 a0 = a2 + 0\n 28527: a1 = 0x20\n 28530: u64 [sp + 0x20] = a0\n 28533: ra = 368, jump @0\n      : @414 [@dyn 184] (gas: 50)\n 28539: u8 [a0 + 31] = 0\n 28542: u8 [a0 + 30] = 0\n 28545: u8 [a0 + 29] = 0\n 28548: u8 [a0 + 28] = 0\n 28551: u8 [a0 + 27] = 0\n 28554: u8 [a0 + 26] = 0\n 28557: u8 [a0 + 25] = 0\n 28560: u8 [a0 + 24] = 0\n 28563: u8 [a0 + 23] = 0\n 28566: u8 [a0 + 22] = 0\n 28569: u8 [a0 + 21] = 0\n 28572: u8 [a0 + 20] = 0\n 28575: u8 [a0 + 19] = 0\n 28578: u8 [a0 + 18] = 0\n 28581: u8 [a0 + 17] = 0\n 28584: u8 [a0 + 16] = 0\n 28587: u8 [a0 + 15] = 0\n 28590: u8 [a0 + 14] = 0\n 28593: u8 [a0 + 13] = 0\n 28596: u8 [a0 + 12] = 0\n 28599: u8 [a0 + 11] = 0\n 28602: u8 [a0 + 10] = 0\n 28605: u8 [a0 + 9] = 0\n 28608: u8 [a0 + 8] = 0\n 28611: u8 [a0 + 7] = 0\n 28614: u8 [a0 + 6] = 0\n 28617: u8 [a0 + 5] = 0\n 28620: u8 [a0 + 4] = 0\n 28623: u8 [a0 + 3] = 0xa0\n 28628: u8 [a0 + 2] = 0x79\n 28632: u8 [a0 + 1] = 0xc3\n 28637: u8 [a0 + 0] = 0x8\n 28640: a1 = u64 [sp + 0x28]\n 28643: a0 = a1 + 0x4\n 28646: a1 = a0 <u a1\n 28649: a3 = u64 [sp + 0x38]\n 28652: a2 = a3 + a1\n 28655: a3 = a2 <u a3\n 28658: a3 = a1 if a1 == 0\n 28661: a3 = a3 + s1\n 28664: a1 = a3 <u s1\n 28667: a4 = u64 [sp + 0x30]\n 28670: a4 = a4 + a1\n 28673: u64 [sp + 0x88] = a2\n 28677: u64 [sp + 0x80] = a0\n 28681: u64 [sp + 0x90] = a3\n 28685: a0 = sp + 0xa0\n 28689: a1 = sp + 0x80\n 28693: u64 [sp + 0x98] = a4\n 28697: ra = 370, jump @386\n      : @415 [@dyn 185] (gas: 5)\n 28703: a0 = u64 [sp + 0xa8]\n 28707: t0 = u64 [sp + 0xb8]\n 28711: t1 = u64 [sp + 0xa0]\n 28715: a3 = u64 [sp + 0xb0]\n 28719: fallthrough\n      : @416 (gas: 26)\n 28720: a1 = u64 [sp + 0x38]\n 28723: a4 = a0 ^ a1\n 28726: a5 = a0 <u a1\n 28729: t2 = a1\n 28731: a2 = u64 [sp + 0x28]\n 28734: a1 = t1 <u a2\n 28737: a5 = a1 if a4 == 0\n 28740: a4 = a3 - s1\n 28743: a3 = a3 <u s1\n 28746: s1 = u64 [sp + 0x30]\n 28749: s1 = t0 - s1\n 28752: s1 = s1 - a3\n 28755: a3 = a4 <u a5\n 28758: s1 = s1 - a3\n 28761: a4 = a4 - a5\n 28764: a0 = a0 - t2\n 28767: a1 = a0 - a1\n 28770: a0 = t1 - a2\n 28773: a1 = a1 | s1\n 28776: a2 = a0 | a4\n 28779: a2 = a2 | a1\n 28782: a1 = a1 | a4\n 28785: a2 = a2 >> 0x20\n 28788: a1 = a1 << 0x20\n 28791: a1 = a1 | a2\n 28794: jump @418 if a1 == 0\n      : @417 (gas: 1)\n 28797: trap\n      : @418 (gas: 4)\n 28798: i32 s1 = a0 + 0\n 28800: a0 = u64 [sp + 0x20]\n 28803: a1 = s1\n 28805: ra = 372, jump @0\n      : @419 [@dyn 186] (gas: 6)\n 28811: i32 a1 = a0 + 0\n 28813: a0 = 0x1\n 28816: a2 = s1\n 28818: ra = 0x176\n 28822: ecalli 12 // 'seal_return'\n 28824: fallthrough\n      : @420 [@dyn 187] (gas: 6)\n 28825: u64 [a0 + 24] = 0\n 28828: u64 [a0 + 16] = 0\n 28831: u64 [a0 + 8] = 0\n 28834: a1 = 0x60\n 28837: u64 [a0] = a1\n 28839: ret\n      : @421 (gas: 14)\n 28841: sp = sp + 0xffffffffffffff10\n 28845: u64 [sp + 0xe8] = ra\n 28849: u64 [sp + 0xe0] = s0\n 28853: u64 [sp + 0xd8] = s1\n 28857: s0 = sp + 0xf0\n 28861: sp = sp & 0xfffffffffffffff0\n 28864: a2 = u64 [a1 + 0x18]\n 28867: a4 = u64 [a1 + 0x10]\n 28870: a5 = u64 [a1 + 0x8]\n 28873: s1 = a4 | a2\n 28876: a3 = a5 <u 0x1\n 28879: a3 = 0 if s1 != 0\n 28881: u64 [sp + 0x48] = a0\n 28884: jump @427 if a3 == 0\n      : @422 (gas: 30)\n 28888: s1 = u64 [a1]\n 28890: a0 = a4 >> 0x3b\n 28893: u64 [sp + 0x20] = a2\n 28896: a1 = a2 << 0x5\n 28899: a0 = a0 | a1\n 28902: a1 = a5 >> 0x3b\n 28905: u64 [sp + 0x28] = a4\n 28908: a2 = a4 << 0x5\n 28911: a1 = a1 | a2\n 28914: a2 = s1 >> 0x3b\n 28917: u64 [sp + 0x10] = a5\n 28920: a3 = a5 << 0x5\n 28923: a2 = a2 | a3\n 28926: u64 [sp + 0x18] = s1\n 28929: a3 = s1 << 0x5\n 28932: a4 = a3 + 0x20\n 28935: a3 = a4 <u a3\n 28938: a5 = a2 + a3\n 28941: a2 = a5 <u a2\n 28944: a2 = a3 if a3 == 0\n 28947: a2 = a2 + a1\n 28950: a1 = a2 <u a1\n 28953: a3 = a0 + a1\n 28956: u64 [sp + 0x90] = a4\n 28960: u64 [sp + 0x98] = a5\n 28964: u64 [sp + 0xa0] = a2\n 28968: a0 = sp + 0xb0\n 28972: a1 = sp + 0x90\n 28976: u64 [sp + 0xa8] = a3\n 28980: ra = 376, jump @52\n      : @423 [@dyn 188] (gas: 15)\n 28986: a0 = u64 [sp + 0xc8]\n 28990: a2 = u64 [sp + 0xc0]\n 28994: a1 = u64 [sp + 0xb8]\n 28998: a3 = u64 [sp + 0xb0]\n 29002: u64 [sp + 0x38] = a0\n 29005: u64 [sp + 0x30] = a1\n 29008: a0 = a0 | a1\n 29011: a1 = a3 | a2\n 29014: a1 = a1 | a0\n 29017: a1 = a1 >> 0x20\n 29020: u64 [sp + 0x40] = a2\n 29023: a0 = a0 | a2\n 29026: a0 = a0 << 0x20\n 29029: a0 = a0 | a1\n 29032: jump @426 if a0 != 0\n      : @424 (gas: 4)\n 29036: i32 a0 = a3 + 0\n 29038: a1 = 0x20\n 29041: u64 [sp + 0x8] = a3\n 29044: ra = 378, jump @0\n      : @425 [@dyn 189] (gas: 83)\n 29050: a1 = u64 [sp + 0x20]\n 29053: a1 = reverse a1\n 29055: a2 = u64 [sp + 0x28]\n 29058: a2 = reverse a2\n 29060: a3 = u64 [sp + 0x10]\n 29063: a3 = reverse a3\n 29065: a4 = u64 [sp + 0x18]\n 29068: a4 = reverse a4\n 29070: a5 = a4 >> 0x38\n 29073: u8 [a0 + 0x1f] = a5\n 29076: a5 = a4 >> 0x30\n 29079: u8 [a0 + 0x1e] = a5\n 29082: a5 = a4 >> 0x28\n 29085: u8 [a0 + 0x1d] = a5\n 29088: a5 = a4 >> 0x20\n 29091: u8 [a0 + 0x1c] = a5\n 29094: a5 = a4 >> 0x18\n 29097: u8 [a0 + 0x1b] = a5\n 29100: a5 = a4 >> 0x10\n 29103: u8 [a0 + 0x1a] = a5\n 29106: a5 = a4 >> 0x8\n 29109: u8 [a0 + 0x19] = a5\n 29112: u8 [a0 + 0x18] = a4\n 29115: u8 [a0 + 0x10] = a3\n 29118: a4 = a3 >> 0x38\n 29121: u8 [a0 + 0x17] = a4\n 29124: a4 = a3 >> 0x30\n 29127: u8 [a0 + 0x16] = a4\n 29130: a4 = a3 >> 0x28\n 29133: u8 [a0 + 0x15] = a4\n 29136: a4 = a3 >> 0x20\n 29139: u8 [a0 + 0x14] = a4\n 29142: a4 = a3 >> 0x18\n 29145: u8 [a0 + 0x13] = a4\n 29148: a4 = a3 >> 0x10\n 29151: u8 [a0 + 0x12] = a4\n 29154: a3 = a3 >> 0x8\n 29157: u8 [a0 + 0x11] = a3\n 29160: u8 [a0 + 0x8] = a2\n 29163: a3 = a2 >> 0x38\n 29166: u8 [a0 + 0xf] = a3\n 29169: a3 = a2 >> 0x30\n 29172: u8 [a0 + 0xe] = a3\n 29175: a3 = a2 >> 0x28\n 29178: u8 [a0 + 0xd] = a3\n 29181: a3 = a2 >> 0x20\n 29184: u8 [a0 + 0xc] = a3\n 29187: a3 = a2 >> 0x18\n 29190: u8 [a0 + 0xb] = a3\n 29193: a3 = a2 >> 0x10\n 29196: u8 [a0 + 0xa] = a3\n 29199: a2 = a2 >> 0x8\n 29202: u8 [a0 + 0x9] = a2\n 29205: u8 [a0] = a1\n 29207: a2 = a1 >> 0x38\n 29210: u8 [a0 + 0x7] = a2\n 29213: a2 = a1 >> 0x30\n 29216: u8 [a0 + 0x6] = a2\n 29219: a2 = a1 >> 0x28\n 29222: u8 [a0 + 0x5] = a2\n 29225: a2 = a1 >> 0x20\n 29228: u8 [a0 + 0x4] = a2\n 29231: a2 = a1 >> 0x18\n 29234: u8 [a0 + 0x3] = a2\n 29237: a2 = a1 >> 0x10\n 29240: u8 [a0 + 0x2] = a2\n 29243: a1 = a1 >> 0x8\n 29246: u8 [a0 + 0x1] = a1\n 29249: a0 = u64 [sp + 0x48]\n 29252: a1 = u64 [sp + 0x8]\n 29255: u64 [a0] = a1\n 29257: a1 = u64 [sp + 0x38]\n 29260: u64 [a0 + 0x18] = a1\n 29263: a1 = u64 [sp + 0x30]\n 29266: u64 [a0 + 0x8] = a1\n 29269: a1 = u64 [sp + 0x40]\n 29272: u64 [a0 + 0x10] = a1\n 29275: sp = s0 + 0xffffffffffffff10\n 29279: ra = u64 [sp + 0xe8]\n 29283: s0 = u64 [sp + 0xe0]\n 29287: s1 = u64 [sp + 0xd8]\n 29291: sp = sp + 0xf0\n 29295: ret\n      : @426 (gas: 1)\n 29297: trap\n      : @427 (gas: 8)\n 29298: u64 [sp + 128] = 0\n 29302: u64 [sp + 120] = 0\n 29305: u64 [sp + 112] = 0\n 29308: a0 = 0x4e487b7100000000\n 29318: a1 = sp + 0x70\n 29321: u64 [sp + 0x88] = a0\n 29325: a0 = 0\n 29327: ra = 380, jump @8\n      : @428 [@dyn 190] (gas: 7)\n 29333: u64 [sp + 104] = 0\n 29336: u64 [sp + 96] = 0\n 29339: u64 [sp + 80] = 0x41\n 29343: a0 = 0x4\n 29346: a1 = sp + 0x50\n 29349: u64 [sp + 88] = 0\n 29352: ra = 382, jump @8\n      : @429 [@dyn 191] (gas: 3)\n 29358: a1 = 0x24\n 29361: a0 = 0\n 29363: ra = 384, jump @0\n      : @430 [@dyn 192] (gas: 6)\n 29369: i32 a1 = a0 + 0\n 29371: a0 = 0x1\n 29374: a2 = 0x24\n 29377: ra = 0x182\n 29381: ecalli 12 // 'seal_return'\n 29383: fallthrough\n      : @431 [@dyn 193] (gas: 14)\n 29384: sp = sp + 0xffffffffffffffa0\n 29387: u64 [sp + 0x58] = ra\n 29390: u64 [sp + 0x50] = s0\n 29393: u64 [sp + 0x48] = s1\n 29396: s0 = sp + 0x60\n 29399: sp = sp & 0xfffffffffffffff0\n 29402: s1 = a0\n 29404: u64 [sp + 24] = 0\n 29407: u64 [sp + 16] = 0\n 29410: u64 [sp + 0] = 0x80\n 29414: a0 = sp + 0x20\n 29417: a1 = sp\n 29419: u64 [sp + 8] = 0\n 29422: ra = 388, jump @52\n      : @432 [@dyn 194] (gas: 14)\n 29428: a0 = u64 [sp + 0x30]\n 29431: a1 = u64 [sp + 0x38]\n 29434: a2 = u64 [sp + 0x20]\n 29437: a3 = u64 [sp + 0x28]\n 29440: u64 [s1 + 0x10] = a0\n 29443: u64 [s1 + 0x18] = a1\n 29446: u64 [s1] = a2\n 29448: u64 [s1 + 0x8] = a3\n 29451: sp = s0 + 0xffffffffffffffa0\n 29454: ra = u64 [sp + 0x58]\n 29457: s0 = u64 [sp + 0x50]\n 29460: s1 = u64 [sp + 0x48]\n 29463: sp = sp + 0x60\n 29466: ret\n      : @433 [@dyn 195] (gas: 27)\n 29468: a0 = u64 [sp + 0xb8]\n 29472: u64 [sp + 0x48] = a0\n 29475: s1 = u64 [sp + 0xb0]\n 29479: a0 = u64 [sp + 0xa8]\n 29483: u64 [sp + 0x70] = a0\n 29486: a0 = u64 [sp + 0xa0]\n 29490: u64 [sp + 0x78] = a0\n 29493: a0 = u64 [sp + 0x50]\n 29496: u64 [sp + 0xd8] = a0\n 29500: a0 = u64 [sp + 0x58]\n 29503: u64 [sp + 0xd0] = a0\n 29507: a0 = u64 [sp + 0x60]\n 29510: u64 [sp + 0xc8] = a0\n 29514: a0 = u64 [sp + 0x68]\n 29517: u64 [sp + 0xc0] = a0\n 29521: u64 [sp + 248] = 0\n 29525: u64 [sp + 240] = 0\n 29529: u64 [sp + 232] = 0\n 29533: u64 [sp + 224] = 0\n 29537: u32 [sp + 256] = 0x20\n 29542: i32 a1 = sp + 0xc0\n 29546: i32 a3 = sp + 0xe0\n 29550: i32 a4 = sp + 0x100\n 29554: a2 = 0xffffffffffffffff\n 29557: a0 = 0\n 29559: ecalli 7 // 'get_storage'\n 29561: fallthrough\n      : @434 (gas: 12)\n 29562: a0 = u64 [sp + 0x48]\n 29565: a1 = u64 [sp + 0x70]\n 29568: a0 = a0 | a1\n 29571: a1 = u64 [sp + 0x78]\n 29574: a1 = a1 | s1\n 29577: a1 = a1 | a0\n 29580: a1 = a1 >> 0x20\n 29583: u64 [sp + 0x38] = s1\n 29586: a0 = a0 | s1\n 29589: a0 = a0 << 0x20\n 29592: a0 = a0 | a1\n 29595: jump @446 if a0 != 0\n      : @435 (gas: 11)\n 29599: a0 = u64 [sp + 0xf0]\n 29603: a1 = u64 [sp + 0xe8]\n 29607: u64 [sp + 0x28] = a1\n 29610: a1 = u64 [sp + 0xe0]\n 29614: u64 [sp + 0x30] = a1\n 29617: a0 = a0 << 0x20\n 29620: s1 = a0 >> 0x20\n 29623: a0 = i32 [sp + 0x78]\n 29626: a1 = 0x20\n 29629: u64 [sp + 0x40] = a0\n 29632: ra = 392, jump @0\n      : @436 [@dyn 196] (gas: 75)\n 29638: a1 = reverse s1\n 29640: a2 = u64 [sp + 0x28]\n 29643: a2 = reverse a2\n 29645: a3 = u64 [sp + 0x30]\n 29648: a3 = reverse a3\n 29650: a4 = a3 >> 0x38\n 29653: u8 [a0 + 0x1f] = a4\n 29656: a4 = a3 >> 0x30\n 29659: u8 [a0 + 0x1e] = a4\n 29662: a4 = a3 >> 0x28\n 29665: u8 [a0 + 0x1d] = a4\n 29668: a4 = a3 >> 0x20\n 29671: u8 [a0 + 0x1c] = a4\n 29674: a4 = a3 >> 0x18\n 29677: u8 [a0 + 0x1b] = a4\n 29680: a4 = a3 >> 0x10\n 29683: u8 [a0 + 0x1a] = a4\n 29686: a4 = a3 >> 0x8\n 29689: u8 [a0 + 0x19] = a4\n 29692: u8 [a0 + 0x18] = a3\n 29695: u8 [a0 + 0x10] = a2\n 29698: u8 [a0 + 11] = 0\n 29701: u8 [a0 + 10] = 0\n 29704: u8 [a0 + 9] = 0\n 29707: u8 [a0 + 7] = 0\n 29710: u8 [a0 + 6] = 0\n 29713: u8 [a0 + 5] = 0\n 29716: u8 [a0 + 4] = 0\n 29719: u8 [a0 + 3] = 0\n 29722: u8 [a0 + 2] = 0\n 29725: u8 [a0 + 1] = 0\n 29728: u8 [a0 + 0] = 0\n 29730: a3 = a2 >> 0x38\n 29733: u8 [a0 + 0x17] = a3\n 29736: a3 = a2 >> 0x30\n 29739: u8 [a0 + 0x16] = a3\n 29742: a3 = a2 >> 0x28\n 29745: u8 [a0 + 0x15] = a3\n 29748: a3 = a2 >> 0x20\n 29751: u8 [a0 + 0x14] = a3\n 29754: a3 = a2 >> 0x18\n 29757: u8 [a0 + 0x13] = a3\n 29760: a3 = a2 >> 0x10\n 29763: u8 [a0 + 0x12] = a3\n 29766: a2 = a2 >> 0x8\n 29769: u8 [a0 + 0x11] = a2\n 29772: u8 [a0 + 0x8] = a1\n 29775: a2 = a1 >> 0x38\n 29778: u8 [a0 + 0xf] = a2\n 29781: a2 = a1 >> 0x30\n 29784: u8 [a0 + 0xe] = a2\n 29787: a2 = a1 >> 0x28\n 29790: u8 [a0 + 0xd] = a2\n 29793: a1 = a1 >> 0x20\n 29796: u8 [a0 + 0xc] = a1\n 29799: a0 = u64 [sp + 0x50]\n 29802: u64 [sp + 0xd8] = a0\n 29806: a0 = u64 [sp + 0x58]\n 29809: u64 [sp + 0xd0] = a0\n 29813: a0 = u64 [sp + 0x60]\n 29816: u64 [sp + 0xc8] = a0\n 29820: a0 = u64 [sp + 0x68]\n 29823: u64 [sp + 0xc0] = a0\n 29827: u64 [sp + 248] = 0\n 29831: u64 [sp + 240] = 0\n 29835: u64 [sp + 232] = 0\n 29839: u64 [sp + 224] = 0\n 29843: u32 [sp + 256] = 0x20\n 29848: i32 a1 = sp + 0xc0\n 29852: i32 a3 = sp + 0xe0\n 29856: i32 a4 = sp + 0x100\n 29860: a2 = 0xffffffffffffffff\n 29863: a0 = 0\n 29865: ecalli 7 // 'get_storage'\n 29867: fallthrough\n      : @437 (gas: 13)\n 29868: a0 = u64 [sp + 0x48]\n 29871: a2 = u64 [sp + 0x38]\n 29874: a2 = a2 | a0\n 29877: a0 = 0x100000000\n 29887: u64 [sp + 0x28] = a0\n 29890: a0 = 0xffffffe0\n 29900: a1 = u64 [sp + 0x78]\n 29903: a0 = a1 <u a0\n 29906: a1 = u64 [sp + 0x70]\n 29909: a0 = 0 if a1 != 0\n 29911: u64 [sp + 0x30] = a2\n 29914: a0 = 0 if a2 != 0\n 29916: jump @446 if a0 == 0\n      : @438 (gas: 7)\n 29920: a0 = u64 [sp + 0xf0]\n 29924: u64 [sp + 0x18] = a0\n 29927: s1 = 0xff00000000000000\n 29937: a0 = u64 [sp + 0x40]\n 29940: i32 a0 = a0 + 0x20\n 29943: a1 = 0x20\n 29946: ra = 394, jump @0\n      : @439 [@dyn 197] (gas: 56)\n 29952: u8 [a0 + 30] = 0\n 29955: u8 [a0 + 29] = 0\n 29958: u64 [sp + 0x10] = s1\n 29961: a1 = s1 >> 0x20\n 29964: u8 [a0 + 0x1c] = a1\n 29967: u8 [a0 + 27] = 0\n 29970: u8 [a0 + 26] = 0\n 29973: u8 [a0 + 25] = 0\n 29976: u8 [a0 + 24] = 0\n 29979: u8 [a0 + 23] = 0\n 29982: u8 [a0 + 22] = 0\n 29985: u8 [a0 + 21] = 0\n 29988: u8 [a0 + 20] = 0\n 29991: u8 [a0 + 19] = 0\n 29994: u8 [a0 + 18] = 0\n 29997: u8 [a0 + 17] = 0\n 30000: u8 [a0 + 16] = 0\n 30003: u8 [a0 + 15] = 0\n 30006: u8 [a0 + 14] = 0\n 30009: u8 [a0 + 13] = 0\n 30012: u8 [a0 + 12] = 0\n 30015: u8 [a0 + 11] = 0\n 30018: u8 [a0 + 10] = 0\n 30021: u8 [a0 + 9] = 0\n 30024: u8 [a0 + 8] = 0\n 30027: u8 [a0 + 7] = 0\n 30030: u8 [a0 + 6] = 0\n 30033: u8 [a0 + 5] = 0\n 30036: u8 [a0 + 4] = 0\n 30039: u8 [a0 + 3] = 0\n 30042: u8 [a0 + 2] = 0\n 30045: u8 [a0 + 1] = 0\n 30048: u8 [a0 + 0] = 0\n 30050: a1 = u64 [sp + 0x18]\n 30053: a1 = a1 >> 0x20\n 30056: u8 [a0 + 0x1f] = a1\n 30059: a0 = u64 [sp + 0x50]\n 30062: u64 [sp + 0xd8] = a0\n 30066: a0 = u64 [sp + 0x58]\n 30069: u64 [sp + 0xd0] = a0\n 30073: a0 = u64 [sp + 0x60]\n 30076: u64 [sp + 0xc8] = a0\n 30080: a0 = u64 [sp + 0x68]\n 30083: u64 [sp + 0xc0] = a0\n 30087: u64 [sp + 248] = 0\n 30091: u64 [sp + 240] = 0\n 30095: u64 [sp + 232] = 0\n 30099: u64 [sp + 224] = 0\n 30103: u32 [sp + 256] = 0x20\n 30108: i32 a1 = sp + 0xc0\n 30112: i32 a3 = sp + 0xe0\n 30116: i32 a4 = sp + 0x100\n 30120: a2 = 0xffffffffffffffff\n 30123: a0 = 0\n 30125: ecalli 7 // 'get_storage'\n 30127: fallthrough\n      : @440 (gas: 9)\n 30128: a0 = u64 [sp + 0x28]\n 30131: a0 = a0 + 0xffffffffffffffc0\n 30134: a1 = u64 [sp + 0x78]\n 30137: a0 = a1 <u a0\n 30140: a1 = u64 [sp + 0x70]\n 30143: a0 = 0 if a1 != 0\n 30145: a1 = u64 [sp + 0x30]\n 30148: a0 = 0 if a1 != 0\n 30150: jump @446 if a0 == 0\n      : @441 (gas: 7)\n 30154: a0 = u64 [sp + 0xf0]\n 30158: u64 [sp + 0x28] = a0\n 30161: s1 = u64 [sp + 0xe8]\n 30165: a0 = u64 [sp + 0x40]\n 30168: i32 a0 = a0 + 0x40\n 30171: a1 = 0x20\n 30174: ra = 396, jump @0\n      : @442 [@dyn 198] (gas: 65)\n 30180: s1 = s1 >> 0x30\n 30183: a1 = u64 [sp + 0x28]\n 30186: a1 = a1 << 0x10\n 30189: a1 = a1 | s1\n 30192: a2 = u64 [sp + 0x10]\n 30195: a1 = a1 & a2\n 30198: u8 [a0 + 23] = 0\n 30201: u8 [a0 + 22] = 0\n 30204: u8 [a0 + 21] = 0\n 30207: u8 [a0 + 20] = 0\n 30210: u8 [a0 + 19] = 0\n 30213: u8 [a0 + 18] = 0\n 30216: u8 [a0 + 17] = 0\n 30219: u8 [a0 + 16] = 0\n 30222: u8 [a0 + 15] = 0\n 30225: u8 [a0 + 14] = 0\n 30228: u8 [a0 + 13] = 0\n 30231: u8 [a0 + 12] = 0\n 30234: u8 [a0 + 11] = 0\n 30237: u8 [a0 + 10] = 0\n 30240: u8 [a0 + 9] = 0\n 30243: u8 [a0 + 8] = 0\n 30246: u8 [a0 + 7] = 0\n 30249: u8 [a0 + 6] = 0\n 30252: u8 [a0 + 5] = 0\n 30255: u8 [a0 + 4] = 0\n 30258: u8 [a0 + 3] = 0\n 30261: u8 [a0 + 2] = 0\n 30264: u8 [a0 + 1] = 0\n 30267: u8 [a0 + 0] = 0\n 30269: u8 [a0 + 0x18] = a1\n 30272: a2 = a1 >> 0x38\n 30275: u8 [a0 + 0x1f] = a2\n 30278: a2 = a1 >> 0x30\n 30281: u8 [a0 + 0x1e] = a2\n 30284: a2 = a1 >> 0x28\n 30287: u8 [a0 + 0x1d] = a2\n 30290: a2 = a1 >> 0x20\n 30293: u8 [a0 + 0x1c] = a2\n 30296: a2 = a1 >> 0x18\n 30299: u8 [a0 + 0x1b] = a2\n 30302: a2 = a1 >> 0x10\n 30305: u8 [a0 + 0x1a] = a2\n 30308: a1 = a1 >> 0x8\n 30311: u8 [a0 + 0x19] = a1\n 30314: a0 = u64 [sp + 0x50]\n 30317: u64 [sp + 0xd8] = a0\n 30321: a0 = u64 [sp + 0x58]\n 30324: u64 [sp + 0xd0] = a0\n 30328: a0 = u64 [sp + 0x60]\n 30331: u64 [sp + 0xc8] = a0\n 30335: a0 = u64 [sp + 0x68]\n 30338: u64 [sp + 0xc0] = a0\n 30342: u64 [sp + 248] = 0\n 30346: u64 [sp + 240] = 0\n 30350: u64 [sp + 232] = 0\n 30354: u64 [sp + 224] = 0\n 30358: u32 [sp + 256] = 0x20\n 30363: i32 a1 = sp + 0xc0\n 30367: i32 a3 = sp + 0xe0\n 30371: i32 a4 = sp + 0x100\n 30375: a2 = 0xffffffffffffffff\n 30378: a0 = 0\n 30380: ecalli 7 // 'get_storage'\n 30382: fallthrough\n      : @443 (gas: 8)\n 30383: a0 = 0xffffffa0\n 30393: a1 = u64 [sp + 0x78]\n 30396: a0 = a1 <u a0\n 30399: a1 = u64 [sp + 0x70]\n 30402: a0 = 0 if a1 != 0\n 30404: a1 = u64 [sp + 0x30]\n 30407: a0 = 0 if a1 != 0\n 30409: jump @446 if a0 == 0\n      : @444 (gas: 8)\n 30413: a0 = u64 [sp + 0xf0]\n 30417: a1 = 0xff000000000000\n 30427: a0 = a0 & a1\n 30430: s1 = a0 >u 0\n 30432: a0 = u64 [sp + 0x40]\n 30435: i32 a0 = a0 + 0x60\n 30438: a1 = 0x20\n 30441: ra = 398, jump @0\n      : @445 [@dyn 199] (gas: 47)\n 30447: u8 [a0 + 30] = 0\n 30450: u8 [a0 + 29] = 0\n 30453: u8 [a0 + 28] = 0\n 30456: u8 [a0 + 27] = 0\n 30459: u8 [a0 + 26] = 0\n 30462: u8 [a0 + 25] = 0\n 30465: u8 [a0 + 24] = 0\n 30468: u8 [a0 + 23] = 0\n 30471: u8 [a0 + 22] = 0\n 30474: u8 [a0 + 21] = 0\n 30477: u8 [a0 + 20] = 0\n 30480: u8 [a0 + 19] = 0\n 30483: u8 [a0 + 18] = 0\n 30486: u8 [a0 + 17] = 0\n 30489: u8 [a0 + 16] = 0\n 30492: u8 [a0 + 15] = 0\n 30495: u8 [a0 + 14] = 0\n 30498: u8 [a0 + 13] = 0\n 30501: u8 [a0 + 12] = 0\n 30504: u8 [a0 + 11] = 0\n 30507: u8 [a0 + 10] = 0\n 30510: u8 [a0 + 9] = 0\n 30513: u8 [a0 + 8] = 0\n 30516: u8 [a0 + 7] = 0\n 30519: u8 [a0 + 6] = 0\n 30522: u8 [a0 + 5] = 0\n 30525: u8 [a0 + 4] = 0\n 30528: u8 [a0 + 3] = 0\n 30531: u8 [a0 + 2] = 0\n 30534: u8 [a0 + 1] = 0\n 30537: u8 [a0 + 0] = 0\n 30539: u8 [a0 + 0x1f] = s1\n 30542: a0 = u64 [sp + 0x20]\n 30545: a1 = u64 [sp + 0x78]\n 30548: u64 [a0] = a1\n 30550: a1 = u64 [sp + 0x48]\n 30553: u64 [a0 + 0x18] = a1\n 30556: a1 = u64 [sp + 0x70]\n 30559: u64 [a0 + 0x8] = a1\n 30562: a1 = u64 [sp + 0x38]\n 30565: u64 [a0 + 0x10] = a1\n 30568: sp = s0 + 0xfffffffffffffee0\n 30572: ra = u64 [sp + 0x118]\n 30576: s0 = u64 [sp + 0x110]\n 30580: s1 = u64 [sp + 0x108]\n 30584: sp = sp + 0x120\n 30588: ret\n      : @446 (gas: 1)\n 30590: trap\n      : @447 [@dyn 200] (gas: 11)\n 30591: a0 = u64 [sp + 0x138]\n 30595: u64 [sp + 0x38] = a0\n 30598: a0 = u64 [sp + 0x130]\n 30602: u64 [sp + 0x30] = a0\n 30605: a0 = u64 [sp + 0x128]\n 30609: u64 [sp + 0x28] = a0\n 30612: a0 = u64 [sp + 0x120]\n 30616: u64 [sp + 0x20] = a0\n 30619: a1 = 0x20\n 30622: a0 = 0\n 30624: ra = 402, jump @0\n      : @448 [@dyn 201] (gas: 70)\n 30630: a1 = u64 [sp + 0x88]\n 30634: a1 = reverse a1\n 30636: a2 = u64 [sp + 0x90]\n 30640: a2 = reverse a2\n 30642: a3 = u64 [sp + 0x98]\n 30646: a3 = reverse a3\n 30648: a4 = reverse s1\n 30650: a5 = a4 >> 0x38\n 30653: u8 [a0 + 0x1f] = a5\n 30656: a5 = a4 >> 0x30\n 30659: u8 [a0 + 0x1e] = a5\n 30662: a5 = a4 >> 0x28\n 30665: u8 [a0 + 0x1d] = a5\n 30668: a5 = a4 >> 0x20\n 30671: u8 [a0 + 0x1c] = a5\n 30674: a5 = a4 >> 0x18\n 30677: u8 [a0 + 0x1b] = a5\n 30680: a5 = a4 >> 0x10\n 30683: u8 [a0 + 0x1a] = a5\n 30686: a5 = a4 >> 0x8\n 30689: u8 [a0 + 0x19] = a5\n 30692: u8 [a0 + 0x18] = a4\n 30695: a4 = a3 >> 0x38\n 30698: u8 [a0 + 0x17] = a4\n 30701: a4 = a3 >> 0x30\n 30704: u8 [a0 + 0x16] = a4\n 30707: a4 = a3 >> 0x28\n 30710: u8 [a0 + 0x15] = a4\n 30713: a4 = a3 >> 0x20\n 30716: u8 [a0 + 0x14] = a4\n 30719: a4 = a3 >> 0x18\n 30722: u8 [a0 + 0x13] = a4\n 30725: a4 = a3 >> 0x10\n 30728: u8 [a0 + 0x12] = a4\n 30731: a4 = a3 >> 0x8\n 30734: u8 [a0 + 0x11] = a4\n 30737: u8 [a0 + 0x10] = a3\n 30740: a3 = a2 >> 0x38\n 30743: u8 [a0 + 0xf] = a3\n 30746: a3 = a2 >> 0x30\n 30749: u8 [a0 + 0xe] = a3\n 30752: a3 = a2 >> 0x28\n 30755: u8 [a0 + 0xd] = a3\n 30758: a3 = a2 >> 0x20\n 30761: u8 [a0 + 0xc] = a3\n 30764: a3 = a2 >> 0x18\n 30767: u8 [a0 + 0xb] = a3\n 30770: a3 = a2 >> 0x10\n 30773: u8 [a0 + 0xa] = a3\n 30776: a3 = a2 >> 0x8\n 30779: u8 [a0 + 0x9] = a3\n 30782: u8 [a0 + 0x8] = a2\n 30785: a2 = a1 >> 0x38\n 30788: u8 [a0 + 0x7] = a2\n 30791: a2 = a1 >> 0x30\n 30794: u8 [a0 + 0x6] = a2\n 30797: a2 = a1 >> 0x28\n 30800: u8 [a0 + 0x5] = a2\n 30803: a2 = a1 >> 0x20\n 30806: u8 [a0 + 0x4] = a2\n 30809: a2 = a1 >> 0x18\n 30812: u8 [a0 + 0x3] = a2\n 30815: a2 = a1 >> 0x10\n 30818: u8 [a0 + 0x2] = a2\n 30821: a2 = a1 >> 0x8\n 30824: u8 [a0 + 0x1] = a2\n 30827: u8 [a0] = a1\n 30829: a1 = 0x20\n 30832: a0 = 0\n 30834: ra = 404, jump @0\n      : @449 [@dyn 202] (gas: 5)\n 30840: i32 a0 = a0 + 0\n 30842: i32 a2 = sp + 0x180\n 30846: a1 = 0x20\n 30849: ecalli 8 // 'hash_keccak_256'\n 30851: fallthrough\n      : @450 (gas: 8)\n 30852: a0 = u64 [sp + 0xb8]\n 30856: a2 = u64 [sp + 0xb0]\n 30860: a0 = a0 | a2\n 30863: a1 = u64 [sp + 0xa0]\n 30867: a2 = u64 [sp + 0xa8]\n 30871: a1 = a1 | a2\n 30874: a0 = a0 | a1\n 30877: jump @456 if a0 == 0\n      : @451 (gas: 143)\n 30881: a1 = u64 [sp + 0x20]\n 30884: a2 = a1 + 0x20\n 30887: a0 = a2 <u a1\n 30890: t0 = a1\n 30892: a1 = u64 [sp + 0x28]\n 30895: a5 = a1 + a0\n 30898: t2 = a5 <u a1\n 30901: s1 = a1\n 30903: t2 = a0 if a0 == 0\n 30906: ra = u64 [sp + 0x30]\n 30909: t2 = t2 + ra\n 30912: t1 = t2 <u ra\n 30915: a0 = u64 [sp + 0x38]\n 30918: t1 = t1 + a0\n 30921: a0 = t2 >u 0\n 30923: a1 = t1 >u 0\n 30925: a1 = a0 if t1 == 0\n 30928: a0 = 0x100000000\n 30938: u64 [sp + 0x90] = a2\n 30942: a4 = a2\n 30944: a4 = a0 if a1 == 0\n 30947: a3 = a2\n 30949: u64 [sp + 0x88] = a5\n 30953: a3 = a0 if a5 == 0\n 30956: a0 = maxu(a2, a0)\n 30959: a0 = a3 if a5 != 0\n 30962: a3 = t2 | t1\n 30965: a0 = a4 if a3 != 0\n 30968: a2 = a5\n 30970: a2 = 0 if a1 == 0\n 30972: a2 = a5 if a3 == 0\n 30975: a3 = s1 ^ 0xffffffffffffffff\n 30978: a1 = a3 + a2\n 30981: a2 = t0 ^ 0xffffffffffffffff\n 30984: a0 = a0 + a2\n 30987: a2 = a0 <u a2\n 30990: a1 = a1 + a2\n 30993: a4 = a1 ^ a3\n 30996: t0 = a1 <u a3\n 30999: t0 = a2 if a4 == 0\n 31002: u64 [sp + 0x80] = t2\n 31006: a3 = t2\n 31008: u64 [sp + 0x98] = t1\n 31012: a3 = 0 if t1 == 0\n 31014: a3 = t2 if t1 == 0\n 31017: ra = ra ^ 0xffffffffffffffff\n 31020: t1 = ra + a3\n 31023: t0 = t0 + t1\n 31026: a2 = t0 << 0x3b\n 31029: s1 = a1 >> 0x5\n 31032: a2 = a2 | s1\n 31035: u64 [sp + 0x70] = a2\n 31038: a1 = a1 << 0x3b\n 31041: a0 = a0 >> 0x5\n 31044: s1 = a0 | a1\n 31047: u64 [sp + 0x78] = s1\n 31050: a4 = u64 [sp + 0xa8]\n 31054: a0 = a4 <u 0x1\n 31057: a3 = u64 [sp + 0xb0]\n 31061: a5 = a3 - a0\n 31064: t2 = a4 + 0xffffffffffffffff\n 31067: a0 = a5 ^ a2\n 31070: a1 = a5 <u a2\n 31073: a2 = t2 <u s1\n 31076: a2 = a1 if a0 != 0\n 31079: a0 = a4 | a3\n 31082: a0 = a0 <u 0x1\n 31085: a4 = u64 [sp + 0xa0]\n 31089: a1 = a4 <u a0\n 31092: a3 = u64 [sp + 0xb8]\n 31096: a1 = a3 - a1\n 31099: a0 = a4 - a0\n 31102: a3 = t1 <u ra\n 31105: a4 = u64 [sp + 0x38]\n 31108: ra = a4 ^ 0xffffffffffffffff\n 31111: a4 = u64 [sp + 0x98]\n 31115: ra = ra + a4\n 31118: a3 = a3 + ra\n 31121: s1 = t0 <u t1\n 31124: s1 = s1 + a3\n 31127: t0 = t0 >> 0x5\n 31130: a3 = s1 << 0x3b\n 31133: ra = t0 | a3\n 31136: s1 = s1 >> 0x5\n 31139: t0 = a0 <u ra\n 31142: t1 = a1 ^ s1\n 31145: a3 = a1 <u s1\n 31148: a3 = t0 if t1 == 0\n 31151: a4 = a0 ^ ra\n 31154: a4 = a4 | t1\n 31157: a3 = a2 if a4 == 0\n 31160: a1 = s1 if a3 == 0\n 31163: a0 = ra if a3 == 0\n 31166: a2 = u64 [sp + 0x70]\n 31169: a5 = a2 if a3 == 0\n 31172: a2 = u64 [sp + 0x190]\n 31176: a4 = u64 [sp + 0x78]\n 31179: t2 = a4 if a3 == 0\n 31182: a3 = t2 >> 0x3b\n 31185: a4 = a5 << 0x5\n 31188: t0 = a4 | a3\n 31191: a5 = a5 >> 0x3b\n 31194: a4 = a0 << 0x5\n 31197: a3 = a4 | a5\n 31200: a5 = u64 [sp + 0x180]\n 31204: a0 = a0 >> 0x3b\n 31207: a1 = a1 << 0x5\n 31210: a0 = a0 | a1\n 31213: a1 = u64 [sp + 0x188]\n 31217: a4 = u64 [sp + 0x98]\n 31221: a0 = a0 + a4\n 31224: s1 = u64 [sp + 0x198]\n 31228: a5 = reverse a5\n 31230: ra = reverse a1\n 31232: t1 = reverse a2\n 31234: a4 = reverse s1\n 31236: t2 = t2 << 0x5\n 31239: a1 = u64 [sp + 0x80]\n 31243: s1 = a1 + a3\n 31246: a1 = s1 <u a1\n 31249: a0 = a0 + a1\n 31252: a2 = u64 [sp + 0x88]\n 31256: a3 = a2 + t0\n 31259: a1 = u64 [sp + 0x90]\n 31263: t2 = t2 + a1\n 31266: u64 [sp + 0x58] = t2\n 31269: a1 = t2 <u a1\n 31272: a3 = a3 + a1\n 31275: t0 = a3 ^ a2\n 31278: u64 [sp + 0x50] = a3\n 31281: a3 = a3 <u a2\n 31284: a3 = a1 if t0 == 0\n 31287: a3 = a3 + s1\n 31290: u64 [sp + 0x48] = a3\n 31293: a1 = a3 <u s1\n 31296: a0 = a0 + a1\n 31299: u64 [sp + 0x40] = a0\n 31302: t0 = u64 [sp + 0x20]\n 31305: s1 = u64 [sp + 0x28]\n 31308: t2 = u64 [sp + 0x30]\n 31311: a0 = u64 [sp + 0x38]\n 31314: u64 [sp + 0xb8] = a0\n 31318: fallthrough\n      : @452 (gas: 46)\n 31319: a3 = t0 + 0x20\n 31322: u64 [sp + 0xa0] = a3\n 31326: a2 = a3 <u t0\n 31329: a3 = s1 + a2\n 31332: u64 [sp + 0xb0] = a3\n 31336: s1 = a3 <u s1\n 31339: s1 = a2 if a2 == 0\n 31342: s1 = s1 + t2\n 31345: u64 [sp + 0xa8] = s1\n 31349: a0 = s1 <u t2\n 31352: s1 = u64 [sp + 0xb8]\n 31356: s1 = s1 + a0\n 31359: u64 [sp + 0x88] = a4\n 31363: u64 [sp + 0xc0] = a4\n 31367: u64 [sp + 0x90] = t1\n 31371: u64 [sp + 0xc8] = t1\n 31375: u64 [sp + 0x80] = ra\n 31379: u64 [sp + 0xd0] = ra\n 31383: a0 = sp + 0xe0\n 31387: a1 = sp + 0xc0\n 31391: u64 [sp + 0x98] = a5\n 31395: u64 [sp + 0xd8] = a5\n 31399: ra = 0x196\n 31403: sp = sp + 0xfffffffffffffee0\n 31407: u64 [sp + 0x118] = ra\n 31411: u64 [sp + 0x110] = s0\n 31415: u64 [sp + 0x108] = s1\n 31419: s0 = sp + 0x120\n 31423: sp = sp & 0xffffffffffffffe0\n 31426: a2 = u64 [a1]\n 31428: u64 [sp + 0x68] = a2\n 31431: a2 = u64 [a1 + 0x8]\n 31434: u64 [sp + 0x60] = a2\n 31437: a2 = u64 [a1 + 0x10]\n 31440: u64 [sp + 0x58] = a2\n 31443: a1 = u64 [a1 + 0x18]\n 31446: u64 [sp + 0x50] = a1\n 31449: u64 [sp + 0x20] = a0\n 31452: u64 [sp + 152] = 0\n 31456: u64 [sp + 144] = 0\n 31460: u64 [sp + 128] = 0x80\n 31466: a0 = sp + 0xa0\n 31470: a1 = sp + 0x80\n 31474: u64 [sp + 136] = 0\n 31478: ra = 0x186\n 31482: jump @52\n      : @453 [@dyn 203] (gas: 12)\n 31485: a2 = u64 [sp + 0xa0]\n 31489: a3 = u64 [sp + 0xa8]\n 31493: a0 = a2 | a3\n 31496: u64 [sp + 0xb8] = s1\n 31500: a1 = u64 [sp + 0xb0]\n 31504: a1 = a1 | s1\n 31507: a0 = a0 | a1\n 31510: a0 = a0 >> 0x20\n 31513: a1 = a1 | a3\n 31516: a1 = a1 << 0x20\n 31519: a0 = a0 | a1\n 31522: jump @457 if a0 != 0\n      : @454 (gas: 12)\n 31526: a0 = u64 [sp + 0xf8]\n 31530: u64 [sp + 0x78] = a0\n 31533: a0 = u64 [sp + 0xf0]\n 31537: u64 [sp + 0x70] = a0\n 31540: a0 = u64 [sp + 0xe8]\n 31544: u64 [sp + 0x68] = a0\n 31547: a0 = u64 [sp + 0xe0]\n 31551: u64 [sp + 0x60] = a0\n 31554: i32 a0 = a2 + 0\n 31556: a1 = 0x20\n 31559: s1 = a2\n 31561: ra = 408, jump @0\n      : @455 [@dyn 204] (gas: 97)\n 31567: t0 = s1\n 31569: a1 = u64 [sp + 0x60]\n 31572: a1 = reverse a1\n 31574: a2 = a1 >> 0x38\n 31577: u8 [a0 + 0x1f] = a2\n 31580: a2 = a1 >> 0x30\n 31583: u8 [a0 + 0x1e] = a2\n 31586: a2 = a1 >> 0x28\n 31589: u8 [a0 + 0x1d] = a2\n 31592: a2 = a1 >> 0x20\n 31595: u8 [a0 + 0x1c] = a2\n 31598: a2 = a1 >> 0x18\n 31601: u8 [a0 + 0x1b] = a2\n 31604: a2 = a1 >> 0x10\n 31607: u8 [a0 + 0x1a] = a2\n 31610: a2 = a1 >> 0x8\n 31613: u8 [a0 + 0x19] = a2\n 31616: a2 = u64 [sp + 0x68]\n 31619: a2 = reverse a2\n 31621: u8 [a0 + 0x18] = a1\n 31624: a1 = a2 >> 0x38\n 31627: u8 [a0 + 0x17] = a1\n 31630: a1 = a2 >> 0x30\n 31633: u8 [a0 + 0x16] = a1\n 31636: a1 = a2 >> 0x28\n 31639: u8 [a0 + 0x15] = a1\n 31642: a1 = a2 >> 0x20\n 31645: u8 [a0 + 0x14] = a1\n 31648: a1 = a2 >> 0x18\n 31651: u8 [a0 + 0x13] = a1\n 31654: a1 = a2 >> 0x10\n 31657: u8 [a0 + 0x12] = a1\n 31660: a1 = u64 [sp + 0x70]\n 31663: a1 = reverse a1\n 31665: u8 [a0 + 0x10] = a2\n 31668: a2 = a2 >> 0x8\n 31671: u8 [a0 + 0x11] = a2\n 31674: a2 = a1 >> 0x38\n 31677: u8 [a0 + 0xf] = a2\n 31680: a2 = a1 >> 0x30\n 31683: u8 [a0 + 0xe] = a2\n 31686: a2 = a1 >> 0x28\n 31689: u8 [a0 + 0xd] = a2\n 31692: a2 = a1 >> 0x20\n 31695: u8 [a0 + 0xc] = a2\n 31698: a2 = a1 >> 0x18\n 31701: u8 [a0 + 0xb] = a2\n 31704: a2 = a1 >> 0x10\n 31707: u8 [a0 + 0xa] = a2\n 31710: a2 = u64 [sp + 0x78]\n 31713: a2 = reverse a2\n 31715: u8 [a0 + 0x8] = a1\n 31718: a1 = a1 >> 0x8\n 31721: u8 [a0 + 0x9] = a1\n 31724: u8 [a0] = a2\n 31726: a1 = a2 >> 0x38\n 31729: u8 [a0 + 0x7] = a1\n 31732: a1 = a2 >> 0x30\n 31735: u8 [a0 + 0x6] = a1\n 31738: a1 = a2 >> 0x28\n 31741: u8 [a0 + 0x5] = a1\n 31744: a1 = a2 >> 0x20\n 31747: u8 [a0 + 0x4] = a1\n 31750: a1 = a2 >> 0x18\n 31753: u8 [a0 + 0x3] = a1\n 31756: a1 = a2 >> 0x10\n 31759: u8 [a0 + 0x2] = a1\n 31762: a2 = a2 >> 0x8\n 31765: u8 [a0 + 0x1] = a2\n 31768: a4 = u64 [sp + 0x88]\n 31772: a4 = a4 + 0x1\n 31775: a0 = a4 <u 0x1\n 31778: t1 = u64 [sp + 0x90]\n 31782: t1 = t1 + a0\n 31785: a0 = u64 [sp + 0x58]\n 31788: a0 = a0 ^ s1\n 31791: a1 = u64 [sp + 0x48]\n 31794: t2 = u64 [sp + 0xa8]\n 31798: a1 = t2 ^ a1\n 31801: a0 = a0 | a1\n 31804: a1 = u64 [sp + 0x50]\n 31807: s1 = u64 [sp + 0xb0]\n 31811: a1 = a1 ^ s1\n 31814: a2 = u64 [sp + 0x40]\n 31817: a3 = u64 [sp + 0xb8]\n 31821: a2 = a2 ^ a3\n 31824: a1 = a1 | a2\n 31827: a0 = a0 | a1\n 31830: a1 = a4 | t1\n 31833: a1 = a1 <u 0x1\n 31836: a2 = u64 [sp + 0x80]\n 31840: a1 = a1 + a2\n 31843: a2 = a1 <u a2\n 31846: a5 = u64 [sp + 0x98]\n 31850: a5 = a5 + a2\n 31853: ra = a1\n 31855: jump @452 if a0 != 0\n      : @456 (gas: 15)\n 31859: a0 = u64 [sp + 0x18]\n 31862: a1 = u64 [sp + 0x20]\n 31865: u64 [a0] = a1\n 31867: a1 = u64 [sp + 0x28]\n 31870: u64 [a0 + 0x8] = a1\n 31873: a1 = u64 [sp + 0x30]\n 31876: u64 [a0 + 0x10] = a1\n 31879: a1 = u64 [sp + 0x38]\n 31882: u64 [a0 + 0x18] = a1\n 31885: sp = s0 + 0xfffffffffffffe40\n 31889: ra = u64 [sp + 0x1b8]\n 31893: s0 = u64 [sp + 0x1b0]\n 31897: s1 = u64 [sp + 0x1a8]\n 31901: sp = sp + 0x1c0\n 31905: ret\n      : @457 (gas: 1)\n 31907: trap\n      : @458 (gas: 17)\n 31908: sp = sp + 0xffffffffffffffa0\n 31911: u64 [sp + 0x58] = ra\n 31914: u64 [sp + 0x50] = s0\n 31917: u64 [sp + 0x48] = s1\n 31920: a3 = u64 [a1 + 0x18]\n 31923: a4 = u64 [a1 + 0x10]\n 31926: a5 = u64 [a1 + 0x8]\n 31929: s1 = u64 [a1]\n 31931: a1 = a5 | a3\n 31934: a2 = s1 | a4\n 31937: a2 = a2 | a1\n 31940: a2 = a2 >> 0x20\n 31943: a1 = a1 | a4\n 31946: a1 = a1 << 0x20\n 31949: a1 = a1 | a2\n 31952: u64 [sp + 0x28] = a0\n 31955: jump @465 if a1 != 0\n      : @459 (gas: 19)\n 31959: a0 = s1 + 0x20\n 31962: u64 [sp + 0x30] = a0\n 31965: a0 = a0 <u s1\n 31968: a1 = a5 + a0\n 31971: u64 [sp + 0x40] = a1\n 31974: u64 [sp + 0x8] = a5\n 31977: s0 = a1 <u a5\n 31980: s0 = a0 if a0 == 0\n 31983: s0 = s0 + a4\n 31986: u64 [sp + 0x10] = a4\n 31989: a0 = s0 <u a4\n 31992: u64 [sp + 0x18] = a3\n 31995: a0 = a0 + a3\n 31998: u64 [sp + 0x38] = a0\n 32001: u64 [sp] = s1\n 32003: i32 a0 = s1 + 0\n 32005: a1 = 0x20\n 32008: s1 = 0x20\n 32011: ra = 410, jump @0\n      : @460 [@dyn 205] (gas: 45)\n 32017: u8 [a0 + 0x1f] = s1\n 32020: a1 = u64 [sp + 0x30]\n 32023: s1 = a1\n 32025: a1 = a1 | s0\n 32028: a2 = u64 [sp + 0x40]\n 32031: a4 = u64 [sp + 0x38]\n 32034: a2 = a2 | a4\n 32037: a1 = a1 | a2\n 32040: a1 = a1 >> 0x20\n 32043: u64 [sp + 0x20] = s0\n 32046: a2 = a2 | s0\n 32049: a2 = a2 << 0x20\n 32052: a1 = a1 | a2\n 32055: u8 [a0 + 30] = 0\n 32058: u8 [a0 + 29] = 0\n 32061: u8 [a0 + 28] = 0\n 32064: u8 [a0 + 27] = 0\n 32067: u8 [a0 + 26] = 0\n 32070: u8 [a0 + 25] = 0\n 32073: u8 [a0 + 24] = 0\n 32076: u8 [a0 + 23] = 0\n 32079: u8 [a0 + 22] = 0\n 32082: u8 [a0 + 21] = 0\n 32085: u8 [a0 + 20] = 0\n 32088: u8 [a0 + 19] = 0\n 32091: u8 [a0 + 18] = 0\n 32094: u8 [a0 + 17] = 0\n 32097: u8 [a0 + 16] = 0\n 32100: u8 [a0 + 15] = 0\n 32103: u8 [a0 + 14] = 0\n 32106: u8 [a0 + 13] = 0\n 32109: u8 [a0 + 12] = 0\n 32112: u8 [a0 + 11] = 0\n 32115: u8 [a0 + 10] = 0\n 32118: u8 [a0 + 9] = 0\n 32121: u8 [a0 + 8] = 0\n 32124: u8 [a0 + 7] = 0\n 32127: u8 [a0 + 6] = 0\n 32130: u8 [a0 + 5] = 0\n 32133: u8 [a0 + 4] = 0\n 32136: u8 [a0 + 3] = 0\n 32139: u8 [a0 + 2] = 0\n 32142: u8 [a0 + 1] = 0\n 32145: u8 [a0 + 0] = 0\n 32147: jump @465 if a1 != 0\n      : @461 (gas: 4)\n 32151: i32 s0 = s1 + 0\n 32153: a1 = 0x20\n 32156: a0 = s0\n 32158: ra = 412, jump @0\n      : @462 [@dyn 206] (gas: 41)\n 32164: u8 [a0 + 31] = 0xb\n 32168: u8 [a0 + 30] = 0\n 32171: u8 [a0 + 29] = 0\n 32174: u8 [a0 + 28] = 0\n 32177: u8 [a0 + 27] = 0\n 32180: u8 [a0 + 26] = 0\n 32183: u8 [a0 + 25] = 0\n 32186: u8 [a0 + 24] = 0\n 32189: u8 [a0 + 23] = 0\n 32192: u8 [a0 + 22] = 0\n 32195: u8 [a0 + 21] = 0\n 32198: u8 [a0 + 20] = 0\n 32201: u8 [a0 + 19] = 0\n 32204: u8 [a0 + 18] = 0\n 32207: u8 [a0 + 17] = 0\n 32210: u8 [a0 + 16] = 0\n 32213: u8 [a0 + 15] = 0\n 32216: u8 [a0 + 14] = 0\n 32219: u8 [a0 + 13] = 0\n 32222: u8 [a0 + 12] = 0\n 32225: u8 [a0 + 11] = 0\n 32228: u8 [a0 + 10] = 0\n 32231: u8 [a0 + 9] = 0\n 32234: u8 [a0 + 8] = 0\n 32237: u8 [a0 + 7] = 0\n 32240: u8 [a0 + 6] = 0\n 32243: u8 [a0 + 5] = 0\n 32246: u8 [a0 + 4] = 0\n 32249: u8 [a0 + 3] = 0\n 32252: u8 [a0 + 2] = 0\n 32255: u8 [a0 + 1] = 0\n 32258: a1 = u64 [sp + 0x20]\n 32261: a2 = u64 [sp + 0x38]\n 32264: a1 = a1 | a2\n 32267: a2 = 0xffffffe0\n 32277: a2 = s1 <u a2\n 32280: a3 = u64 [sp + 0x40]\n 32283: a2 = 0 if a3 != 0\n 32285: a2 = 0 if a1 != 0\n 32287: u8 [a0 + 0] = 0\n 32289: jump @465 if a2 == 0\n      : @463 (gas: 3)\n 32293: i32 a0 = s0 + 0x20\n 32296: a1 = 0x20\n 32299: ra = 414, jump @0\n      : @464 [@dyn 207] (gas: 54)\n 32305: u8 [a0 + 31] = 0\n 32308: u8 [a0 + 30] = 0\n 32311: u8 [a0 + 29] = 0\n 32314: u8 [a0 + 28] = 0\n 32317: u8 [a0 + 27] = 0\n 32320: u8 [a0 + 26] = 0\n 32323: u8 [a0 + 25] = 0\n 32326: u8 [a0 + 24] = 0\n 32329: u8 [a0 + 23] = 0\n 32332: u8 [a0 + 22] = 0\n 32335: u8 [a0 + 21] = 0\n 32338: u8 [a0 + 20] = 0\n 32341: u8 [a0 + 19] = 0\n 32344: u8 [a0 + 18] = 0\n 32347: u8 [a0 + 17] = 0\n 32350: u8 [a0 + 16] = 0\n 32353: u8 [a0 + 15] = 0\n 32356: u8 [a0 + 14] = 0\n 32359: u8 [a0 + 13] = 0\n 32362: u8 [a0 + 12] = 0\n 32365: u8 [a0 + 11] = 0\n 32368: u8 [a0 + 10] = 0x67\n 32372: u8 [a0 + 9] = 0x6e\n 32376: u8 [a0 + 8] = 0x69\n 32380: u8 [a0 + 7] = 0x74\n 32384: u8 [a0 + 6] = 0x73\n 32388: u8 [a0 + 5] = 0x69\n 32392: u8 [a0 + 4] = 0x6c\n 32396: u8 [a0 + 3] = 0x20\n 32400: u8 [a0 + 2] = 0x6e\n 32404: u8 [a0 + 1] = 0x77\n 32408: u8 [a0 + 0] = 0x4f\n 32411: a1 = u64 [sp]\n 32413: a0 = a1 + 0x60\n 32416: a1 = a0 <u a1\n 32419: a3 = u64 [sp + 0x8]\n 32422: a2 = a3 + a1\n 32425: a3 = a2 <u a3\n 32428: a3 = a1 if a1 == 0\n 32431: a1 = u64 [sp + 0x10]\n 32434: a3 = a3 + a1\n 32437: a1 = a3 <u a1\n 32440: a4 = u64 [sp + 0x18]\n 32443: a1 = a1 + a4\n 32446: a4 = u64 [sp + 0x28]\n 32449: u64 [a4] = a0\n 32451: u64 [a4 + 0x8] = a2\n 32454: u64 [a4 + 0x10] = a3\n 32457: u64 [a4 + 0x18] = a1\n 32460: ra = u64 [sp + 0x58]\n 32463: s0 = u64 [sp + 0x50]\n 32466: s1 = u64 [sp + 0x48]\n 32469: sp = sp + 0x60\n 32472: ret\n      : @465 (gas: 1)\n 32474: trap\n      : @466 (gas: 19)\n 32475: t1 = u64 [sp + 0xd0]\n 32479: t0 = u64 [sp + 0xc8]\n 32483: a0 = u64 [sp + 0x538]\n 32487: a1 = u64 [sp + 0x520]\n 32491: t2 = u64 [sp + 0x530]\n 32495: a3 = u64 [sp + 0x528]\n 32499: a4 = a0 ^ s1\n 32502: a0 = s1 <u a0\n 32505: a2 = u64 [sp + 0xd8]\n 32509: a5 = a2 <u t2\n 32512: a5 = a0 if a4 != 0\n 32515: a0 = a3 ^ t0\n 32518: a3 = t0 <u a3\n 32521: a1 = t1 <u a1\n 32524: a1 = a3 if a0 != 0\n 32527: a0 = t2 ^ a2\n 32530: a0 = a0 | a4\n 32533: a1 = a5 if a0 != 0\n 32536: jump @468 if a1 != 0\n      : @467 (gas: 1)\n 32539: jump @551\n      : @468 (gas: 12)\n 32542: u64 [sp + 0x1e0] = t1\n 32546: u64 [sp + 536] = 0\n 32550: u64 [sp + 528] = 0\n 32554: u64 [sp + 520] = 0\n 32558: u64 [sp + 512] = 0\n 32562: u64 [sp + 0x1e8] = t0\n 32566: u64 [sp + 0x1f0] = a2\n 32570: a0 = sp + 0x220\n 32574: a1 = sp + 0x200\n 32578: a2 = sp + 0x1e0\n 32582: u64 [sp + 0x1f8] = s1\n 32586: ra = 416, jump @222\n      : @469 [@dyn 208] (gas: 24)\n 32592: a3 = u64 [sp + 0x238]\n 32596: a2 = u64 [sp + 0x230]\n 32600: a1 = u64 [sp + 0x228]\n 32604: a0 = u64 [sp + 0x220]\n 32608: u64 [sp + 0xc8] = a3\n 32612: u64 [sp + 0x518] = a3\n 32616: u64 [sp + 0xd0] = a2\n 32620: u64 [sp + 0x510] = a2\n 32624: u64 [sp + 0xd8] = a1\n 32628: u64 [sp + 0x508] = a1\n 32632: u64 [sp + 0xc0] = a0\n 32636: u64 [sp + 0x500] = a0\n 32640: u64 [sp + 1336] = 0\n 32644: u64 [sp + 1328] = 0\n 32648: u64 [sp + 1320] = 0\n 32652: u64 [sp + 1312] = 0\n 32656: u32 [sp + 1248] = 0x20\n 32661: i32 a1 = sp + 0x500\n 32665: i32 a3 = sp + 0x520\n 32669: i32 a4 = sp + 0x4e0\n 32673: a2 = 0xffffffffffffffff\n 32676: a0 = 0\n 32678: ecalli 7 // 'get_storage'\n 32680: fallthrough\n      : @470 (gas: 2)\n 32681: a0 = u8 [sp + 0x536]\n 32685: jump @472 if a0 != 0\n      : @471 (gas: 1)\n 32688: jump @556\n      : @472 (gas: 37)\n 32691: i32 a0 = sp + 0x2a0\n 32695: ecalli 5 // 'caller'\n 32697: a0 = u64 [sp + 0x2a8]\n 32701: a1 = u64 [sp + 0x2a0]\n 32705: a2 = i32 [sp + 0x2b0]\n 32709: a0 = reverse a0\n 32711: a3 = a0 >> 0x20\n 32714: s1 = reverse a1\n 32716: a1 = s1 << 0x20\n 32719: a1 = a1 | a3\n 32722: u64 [sp + 0xb8] = a1\n 32726: a0 = a0 << 0x20\n 32729: a1 = reverse a2\n 32731: a1 = a1 >> 0x20\n 32734: a0 = a0 | a1\n 32737: u64 [sp + 0xb0] = a0\n 32741: s1 = s1 >> 0x20\n 32744: a0 = u64 [sp + 0xc8]\n 32748: u64 [sp + 0x518] = a0\n 32752: a0 = u64 [sp + 0xd0]\n 32756: u64 [sp + 0x510] = a0\n 32760: a0 = u64 [sp + 0xd8]\n 32764: u64 [sp + 0x508] = a0\n 32768: a0 = u64 [sp + 0xc0]\n 32772: u64 [sp + 0x500] = a0\n 32776: u64 [sp + 1336] = 0\n 32780: u64 [sp + 1328] = 0\n 32784: u64 [sp + 1320] = 0\n 32788: u64 [sp + 1312] = 0\n 32792: u32 [sp + 1248] = 0x20\n 32797: i32 a1 = sp + 0x500\n 32801: i32 a3 = sp + 0x520\n 32805: i32 a4 = sp + 0x4e0\n 32809: a2 = 0xffffffffffffffff\n 32812: a0 = 0\n 32814: ecalli 7 // 'get_storage'\n 32816: fallthrough\n      : @473 (gas: 11)\n 32817: a0 = u32 [sp + 0x530]\n 32821: a1 = u64 [sp + 0x520]\n 32825: a2 = u64 [sp + 0x528]\n 32829: a0 = a0 ^ s1\n 32832: a3 = u64 [sp + 0xb0]\n 32836: a1 = a1 ^ a3\n 32839: a0 = a0 | a1\n 32842: a1 = u64 [sp + 0xb8]\n 32846: a1 = a1 ^ a2\n 32849: a0 = a0 | a1\n 32852: jump @475 if a0 != 0\n      : @474 (gas: 1)\n 32855: jump @561\n      : @475 (gas: 54)\n 32858: u64 [sp + 1304] = 0\n 32862: u64 [sp + 1296] = 0\n 32866: u64 [sp + 1288] = 0\n 32870: u64 [sp + 1280] = 0x1\n 32875: u64 [sp + 1336] = 0\n 32879: u64 [sp + 1328] = 0\n 32883: u64 [sp + 1320] = 0\n 32887: u64 [sp + 1312] = 0\n 32891: s1 = 0x20\n 32894: u32 [sp + 0x4e0] = s1\n 32898: i32 a1 = sp + 0x500\n 32902: i32 a3 = sp + 0x520\n 32906: i32 a4 = sp + 0x4e0\n 32910: a2 = 0xffffffffffffffff\n 32913: a0 = 0\n 32915: ecalli 7 // 'get_storage'\n 32917: a0 = u64 [sp + 0x530]\n 32921: u64 [sp + 0x68] = a0\n 32924: a0 = u64 [sp + 0x528]\n 32928: u64 [sp + 0x60] = a0\n 32931: a0 = u64 [sp + 0x520]\n 32935: u64 [sp + 0x70] = a0\n 32938: i32 a0 = sp + 0x2c0\n 32942: ecalli 5 // 'caller'\n 32944: a0 = i32 [sp + 0x2d0]\n 32948: u64 [sp + 0x90] = a0\n 32952: a0 = u64 [sp + 0x2c0]\n 32956: u64 [sp + 0x88] = a0\n 32960: a0 = u64 [sp + 0x2c8]\n 32964: u64 [sp + 0x80] = a0\n 32968: a0 = u64 [sp + 0xc8]\n 32972: u64 [sp + 0x518] = a0\n 32976: a0 = u64 [sp + 0xd0]\n 32980: u64 [sp + 0x510] = a0\n 32984: a0 = u64 [sp + 0xd8]\n 32988: u64 [sp + 0x508] = a0\n 32992: a0 = u64 [sp + 0xc0]\n 32996: u64 [sp + 0x500] = a0\n 33000: u64 [sp + 1336] = 0\n 33004: u64 [sp + 1328] = 0\n 33008: u64 [sp + 1320] = 0\n 33012: u64 [sp + 1312] = 0\n 33016: u32 [sp + 0x4e0] = s1\n 33020: i32 a1 = sp + 0x500\n 33024: i32 a3 = sp + 0x520\n 33028: i32 a4 = sp + 0x4e0\n 33032: a2 = 0xffffffffffffffff\n 33035: a0 = 0\n 33037: ecalli 7 // 'get_storage'\n 33039: a0 = u64 [sp + 0x530]\n 33043: u64 [sp + 0x78] = a0\n 33046: a0 = 0x40\n 33049: a1 = 0x20\n 33052: ra = 418, jump @0\n      : @476 [@dyn 209] (gas: 102)\n 33059: a1 = u8 [a0 + 0x11]\n 33062: a2 = u8 [a0 + 0x10]\n 33065: a3 = u8 [a0 + 0x12]\n 33068: a4 = u8 [a0 + 0x13]\n 33071: a1 = a1 << 0x8\n 33074: a1 = a1 | a2\n 33077: a3 = a3 << 0x10\n 33080: a4 = a4 << 0x18\n 33083: a3 = a3 | a4\n 33086: a1 = a1 | a3\n 33089: a2 = u8 [a0 + 0x15]\n 33092: a3 = u8 [a0 + 0x14]\n 33095: a4 = u8 [a0 + 0x16]\n 33098: a5 = u8 [a0 + 0x17]\n 33101: a2 = a2 << 0x8\n 33104: a2 = a2 | a3\n 33107: a4 = a4 << 0x10\n 33110: a5 = a5 << 0x18\n 33113: a4 = a4 | a5\n 33116: a2 = a2 | a4\n 33119: a2 = a2 << 0x20\n 33122: t0 = a2 | a1\n 33125: a2 = u8 [a0 + 0x1]\n 33128: a3 = u8 [a0]\n 33130: a4 = u8 [a0 + 0x2]\n 33133: a5 = u8 [a0 + 0x3]\n 33136: a2 = a2 << 0x8\n 33139: a2 = a2 | a3\n 33142: a4 = a4 << 0x10\n 33145: a5 = a5 << 0x18\n 33148: a4 = a4 | a5\n 33151: a2 = a2 | a4\n 33154: a3 = u8 [a0 + 0x5]\n 33157: a4 = u8 [a0 + 0x4]\n 33160: a5 = u8 [a0 + 0x6]\n 33163: s1 = u8 [a0 + 0x7]\n 33166: a3 = a3 << 0x8\n 33169: a3 = a3 | a4\n 33172: a5 = a5 << 0x10\n 33175: s1 = s1 << 0x18\n 33178: a5 = a5 | s1\n 33181: a3 = a3 | a5\n 33184: a3 = a3 << 0x20\n 33187: a2 = a2 | a3\n 33190: a3 = u8 [a0 + 0x19]\n 33193: a4 = u8 [a0 + 0x18]\n 33196: a5 = u8 [a0 + 0x1a]\n 33199: s1 = u8 [a0 + 0x1b]\n 33202: a3 = a3 << 0x8\n 33205: a3 = a3 | a4\n 33208: a5 = a5 << 0x10\n 33211: s1 = s1 << 0x18\n 33214: a5 = a5 | s1\n 33217: a3 = a3 | a5\n 33220: a4 = u8 [a0 + 0x1d]\n 33223: a5 = u8 [a0 + 0x1c]\n 33226: s1 = u8 [a0 + 0x1e]\n 33229: a1 = u8 [a0 + 0x1f]\n 33232: a4 = a4 << 0x8\n 33235: a4 = a4 | a5\n 33238: s1 = s1 << 0x10\n 33241: a1 = a1 << 0x18\n 33244: a1 = a1 | s1\n 33247: a1 = a1 | a4\n 33250: a1 = a1 << 0x20\n 33253: a3 = a3 | a1\n 33256: a1 = u8 [a0 + 0x9]\n 33259: a4 = u8 [a0 + 0x8]\n 33262: a5 = u8 [a0 + 0xa]\n 33265: s1 = u8 [a0 + 0xb]\n 33268: a1 = a1 << 0x8\n 33271: a1 = a1 | a4\n 33274: a5 = a5 << 0x10\n 33277: s1 = s1 << 0x18\n 33280: a5 = a5 | s1\n 33283: a1 = a1 | a5\n 33286: a4 = u8 [a0 + 0xd]\n 33289: a5 = u8 [a0 + 0xc]\n 33292: s1 = u8 [a0 + 0xe]\n 33295: a0 = u8 [a0 + 0xf]\n 33298: a4 = a4 << 0x8\n 33301: a4 = a4 | a5\n 33304: s1 = s1 << 0x10\n 33307: a0 = a0 << 0x18\n 33310: a0 = a0 | s1\n 33313: a0 = a0 | a4\n 33316: a0 = a0 << 0x20\n 33319: a0 = a0 | a1\n 33322: s1 = reverse a0\n 33324: a3 = reverse a3\n 33326: a1 = reverse a2\n 33328: a0 = reverse t0\n 33330: u64 [sp + 0xb8] = a0\n 33334: u64 [sp + 0xa0] = a1\n 33338: a0 = a0 | a1\n 33341: a1 = a3 | s1\n 33344: a1 = a1 | a0\n 33347: a1 = a1 >> 0x20\n 33350: a0 = a0 | s1\n 33353: a0 = a0 << 0x20\n 33356: a0 = a0 | a1\n 33359: jump @478 if a0 == 0\n      : @477 (gas: 1)\n 33362: jump @572\n      : @478 (gas: 5)\n 33365: i32 a0 = a3 + 0\n 33367: a1 = 0x20\n 33370: u64 [sp + 0xa8] = a0\n 33374: u64 [sp + 0xb0] = a3\n 33378: ra = 420, jump @0\n      : @479 [@dyn 210] (gas: 43)\n 33385: u8 [a0 + 31] = 0\n 33388: u8 [a0 + 30] = 0\n 33391: u8 [a0 + 29] = 0\n 33394: u8 [a0 + 28] = 0\n 33397: u8 [a0 + 27] = 0\n 33400: u8 [a0 + 26] = 0\n 33403: u8 [a0 + 25] = 0\n 33406: u8 [a0 + 24] = 0\n 33409: u8 [a0 + 23] = 0\n 33412: u8 [a0 + 22] = 0\n 33415: u8 [a0 + 21] = 0\n 33418: u8 [a0 + 20] = 0\n 33421: u8 [a0 + 19] = 0\n 33424: u8 [a0 + 18] = 0\n 33427: u8 [a0 + 17] = 0\n 33430: u8 [a0 + 16] = 0\n 33433: u8 [a0 + 15] = 0\n 33436: u8 [a0 + 14] = 0\n 33439: u8 [a0 + 13] = 0\n 33442: u8 [a0 + 12] = 0\n 33445: u8 [a0 + 11] = 0\n 33448: u8 [a0 + 10] = 0\n 33451: u8 [a0 + 9] = 0\n 33454: u8 [a0 + 8] = 0\n 33457: u8 [a0 + 7] = 0\n 33460: u8 [a0 + 6] = 0\n 33463: u8 [a0 + 5] = 0\n 33466: u8 [a0 + 3] = 0xe6\n 33471: u8 [a0 + 2] = 0x8c\n 33476: u8 [a0 + 1] = 0xca\n 33481: u8 [a0 + 0] = 0x4d\n 33484: u64 [sp + 0x58] = s1\n 33487: a3 = u64 [sp + 0xa0]\n 33491: a3 = a3 | s1\n 33494: a1 = 0xfffffffc\n 33504: a2 = u64 [sp + 0xb0]\n 33508: a1 = a2 <u a1\n 33511: a2 = u64 [sp + 0xb8]\n 33515: a1 = 0 if a2 != 0\n 33517: u64 [sp + 0x98] = a3\n 33521: a1 = 0 if a3 != 0\n 33523: u8 [a0 + 4] = 0\n 33526: jump @481 if a1 != 0\n      : @480 (gas: 1)\n 33529: jump @572\n      : @481 (gas: 19)\n 33532: a0 = u64 [sp + 0x80]\n 33536: a0 = reverse a0\n 33538: a1 = a0 >> 0x20\n 33541: a2 = u64 [sp + 0x88]\n 33545: a2 = reverse a2\n 33547: a3 = a2 << 0x20\n 33550: a1 = a1 | a3\n 33553: u64 [sp + 0x88] = a1\n 33557: a0 = a0 << 0x20\n 33560: a1 = u64 [sp + 0x90]\n 33564: a1 = reverse a1\n 33566: a1 = a1 >> 0x20\n 33569: a0 = a0 | a1\n 33572: u64 [sp + 0x90] = a0\n 33576: s1 = a2 >> 0x20\n 33579: a0 = u64 [sp + 0xa8]\n 33583: i32 a0 = a0 + 0x4\n 33586: a1 = 0x20\n 33589: ra = 422, jump @0\n      : @482 [@dyn 211] (gas: 65)\n 33596: a1 = reverse s1\n 33598: a2 = u64 [sp + 0x88]\n 33602: a2 = reverse a2\n 33604: a3 = u64 [sp + 0x90]\n 33608: a3 = reverse a3\n 33610: a4 = a3 >> 0x38\n 33613: u8 [a0 + 0x1f] = a4\n 33616: a4 = a3 >> 0x30\n 33619: u8 [a0 + 0x1e] = a4\n 33622: a4 = a3 >> 0x28\n 33625: u8 [a0 + 0x1d] = a4\n 33628: a4 = a3 >> 0x20\n 33631: u8 [a0 + 0x1c] = a4\n 33634: a4 = a3 >> 0x18\n 33637: u8 [a0 + 0x1b] = a4\n 33640: a4 = a3 >> 0x10\n 33643: u8 [a0 + 0x1a] = a4\n 33646: a4 = a3 >> 0x8\n 33649: u8 [a0 + 0x19] = a4\n 33652: u8 [a0 + 0x18] = a3\n 33655: u8 [a0 + 0x10] = a2\n 33658: u8 [a0 + 11] = 0\n 33661: u8 [a0 + 10] = 0\n 33664: u8 [a0 + 9] = 0\n 33667: u8 [a0 + 7] = 0\n 33670: u8 [a0 + 6] = 0\n 33673: u8 [a0 + 5] = 0\n 33676: u8 [a0 + 4] = 0\n 33679: u8 [a0 + 3] = 0\n 33682: u8 [a0 + 2] = 0\n 33685: u8 [a0 + 1] = 0\n 33688: u8 [a0 + 0] = 0\n 33690: a3 = a2 >> 0x38\n 33693: u8 [a0 + 0x17] = a3\n 33696: a3 = a2 >> 0x30\n 33699: u8 [a0 + 0x16] = a3\n 33702: a3 = a2 >> 0x28\n 33705: u8 [a0 + 0x15] = a3\n 33708: a3 = a2 >> 0x20\n 33711: u8 [a0 + 0x14] = a3\n 33714: a3 = a2 >> 0x18\n 33717: u8 [a0 + 0x13] = a3\n 33720: a3 = a2 >> 0x10\n 33723: u8 [a0 + 0x12] = a3\n 33726: a2 = a2 >> 0x8\n 33729: u8 [a0 + 0x11] = a2\n 33732: u8 [a0 + 0x8] = a1\n 33735: a2 = a1 >> 0x38\n 33738: u8 [a0 + 0xf] = a2\n 33741: a2 = a1 >> 0x30\n 33744: u8 [a0 + 0xe] = a2\n 33747: a2 = a1 >> 0x28\n 33750: u8 [a0 + 0xd] = a2\n 33753: a1 = a1 >> 0x20\n 33756: s1 = 0x100000000\n 33766: u64 [sp + 0x88] = s1\n 33770: a2 = 0xffffffdc\n 33780: a3 = u64 [sp + 0xb0]\n 33784: a2 = a3 <u a2\n 33787: a3 = u64 [sp + 0xb8]\n 33791: a2 = 0 if a3 != 0\n 33793: a3 = u64 [sp + 0x98]\n 33797: a2 = 0 if a3 != 0\n 33799: u8 [a0 + 0xc] = a1\n 33802: jump @484 if a2 != 0\n      : @483 (gas: 1)\n 33805: jump @572\n      : @484 (gas: 5)\n 33808: s1 = 0xff00000000000000\n 33818: a0 = u64 [sp + 0xa8]\n 33822: i32 a0 = a0 + 0x24\n 33825: a1 = 0x20\n 33828: ra = 424, jump @0\n      : @485 [@dyn 212] (gas: 46)\n 33835: u8 [a0 + 30] = 0\n 33838: u8 [a0 + 29] = 0\n 33841: a1 = s1 >> 0x20\n 33844: u8 [a0 + 0x1c] = a1\n 33847: u8 [a0 + 27] = 0\n 33850: u64 [sp + 0x90] = s1\n 33854: a1 = s1 >> 0x10\n 33857: u8 [a0 + 0x1a] = a1\n 33860: u8 [a0 + 25] = 0\n 33863: u8 [a0 + 24] = 0\n 33866: u8 [a0 + 23] = 0\n 33869: u8 [a0 + 22] = 0\n 33872: u8 [a0 + 21] = 0\n 33875: u8 [a0 + 20] = 0\n 33878: u8 [a0 + 19] = 0\n 33881: u8 [a0 + 18] = 0\n 33884: u8 [a0 + 17] = 0\n 33887: u8 [a0 + 16] = 0\n 33890: u8 [a0 + 15] = 0\n 33893: u8 [a0 + 14] = 0\n 33896: u8 [a0 + 13] = 0\n 33899: u8 [a0 + 12] = 0\n 33902: u8 [a0 + 11] = 0\n 33905: u8 [a0 + 10] = 0\n 33908: u8 [a0 + 9] = 0\n 33911: u8 [a0 + 8] = 0\n 33914: u8 [a0 + 7] = 0\n 33917: u8 [a0 + 6] = 0\n 33920: u8 [a0 + 5] = 0\n 33923: u8 [a0 + 4] = 0\n 33926: u8 [a0 + 3] = 0\n 33929: u8 [a0 + 2] = 0\n 33932: u8 [a0 + 1] = 0\n 33935: u8 [a0 + 0] = 0\n 33937: a1 = u64 [sp + 0x78]\n 33940: a1 = a1 >> 0x28\n 33943: a2 = u64 [sp + 0x88]\n 33947: a2 = a2 + 0xffffffffffffffbc\n 33950: a3 = u64 [sp + 0xb0]\n 33954: a2 = a3 <u a2\n 33957: a3 = u64 [sp + 0xb8]\n 33961: a2 = 0 if a3 != 0\n 33963: a3 = u64 [sp + 0x98]\n 33967: a2 = 0 if a3 != 0\n 33969: u8 [a0 + 0x1f] = a1\n 33972: jump @487 if a2 != 0\n      : @486 (gas: 1)\n 33975: jump @572\n      : @487 (gas: 4)\n 33978: s1 = u64 [sp + 0xa8]\n 33982: i32 a0 = s1 + 0x44\n 33985: a1 = 0x20\n 33988: ra = 426, jump @0\n      : @488 [@dyn 213] (gas: 56)\n 33995: u8 [a0 + 31] = 0x1\n 33999: u8 [a0 + 30] = 0\n 34002: u8 [a0 + 29] = 0\n 34005: u8 [a0 + 28] = 0\n 34008: u8 [a0 + 27] = 0\n 34011: u8 [a0 + 26] = 0\n 34014: u8 [a0 + 25] = 0\n 34017: u8 [a0 + 24] = 0\n 34020: u8 [a0 + 23] = 0\n 34023: u8 [a0 + 22] = 0\n 34026: u8 [a0 + 21] = 0\n 34029: u8 [a0 + 20] = 0\n 34032: u8 [a0 + 19] = 0\n 34035: u8 [a0 + 18] = 0\n 34038: u8 [a0 + 17] = 0\n 34041: u8 [a0 + 16] = 0\n 34044: u8 [a0 + 15] = 0\n 34047: u8 [a0 + 14] = 0\n 34050: u8 [a0 + 13] = 0\n 34053: u8 [a0 + 12] = 0\n 34056: u8 [a0 + 11] = 0\n 34059: u8 [a0 + 10] = 0\n 34062: u8 [a0 + 9] = 0\n 34065: u8 [a0 + 8] = 0\n 34068: u8 [a0 + 7] = 0\n 34071: u8 [a0 + 6] = 0\n 34074: u8 [a0 + 5] = 0\n 34077: u8 [a0 + 4] = 0\n 34080: u8 [a0 + 3] = 0\n 34083: u8 [a0 + 2] = 0\n 34086: u8 [a0 + 1] = 0\n 34089: u8 [a0 + 0] = 0\n 34091: ecalli 9 // 'ref_time_left'\n 34093: a0 = u64 [sp + 0x60]\n 34096: a0 = reverse a0\n 34098: a1 = a0 << 0x20\n 34101: a2 = u64 [sp + 0x68]\n 34104: a2 = reverse a2\n 34106: a2 = a2 >> 0x20\n 34109: a1 = a1 | a2\n 34112: a2 = u64 [sp + 0x70]\n 34115: a2 = reverse a2\n 34117: a3 = a2 << 0x20\n 34120: a0 = a0 >> 0x20\n 34123: a0 = a0 | a3\n 34126: a2 = a2 >> 0x20\n 34129: u64 [sp + 0x2e8] = a0\n 34133: u64 [sp + 0x2e0] = a1\n 34137: u32 [sp + 0x2f0] = a2\n 34141: u64 [sp + 792] = 0\n 34145: u64 [sp + 784] = 0\n 34149: u64 [sp + 776] = 0\n 34153: u64 [sp + 768] = 0\n 34157: a1 = 0x64\n 34160: a0 = s1\n 34162: ra = 428, jump @0\n      : @489 [@dyn 214] (gas: 4)\n 34169: u64 [sp + 0x98] = a0\n 34173: a1 = 0x20\n 34176: a0 = s1\n 34178: ra = 430, jump @0\n      : @490 [@dyn 215] (gas: 31)\n 34185: u32 [sp + 800] = 0x20\n 34190: u64 [sp + 856] = 0\n 34194: u64 [sp + 848] = 0\n 34198: u64 [sp + 840] = 0\n 34202: u64 [sp + 832] = 0\n 34206: a1 = sp + 0x2e0\n 34210: a1 = a1 << 0x20\n 34213: a1 = a1 >> 0x20\n 34216: a2 = 0x1800000000\n 34226: s1 = a1 | a2\n 34229: a1 = sp + 0x300\n 34233: a1 = a1 << 0x20\n 34236: a1 = a1 >> 0x20\n 34239: a2 = sp + 0x340\n 34243: a2 = a2 << 0x20\n 34246: a3 = a2 | a1\n 34249: a1 = u64 [sp + 0x98]\n 34253: a1 = a1 << 0x20\n 34256: a1 = a1 >> 0x20\n 34259: a2 = 0x6400000000\n 34269: a4 = a1 | a2\n 34272: a0 = a0 << 0x20\n 34275: a0 = a0 >> 0x20\n 34278: a1 = sp + 0x320\n 34282: a1 = a1 << 0x20\n 34285: a5 = a1 | a0\n 34288: a1 = 0xffffffffffffffff\n 34291: a2 = 0xffffffffffffffff\n 34294: a0 = s1\n 34296: ecalli 1 // 'call'\n 34298: fallthrough\n      : @491 (gas: 1)\n 34299: jump @493 if a0 == 0\n      : @492 (gas: 1)\n 34302: jump @550\n      : @493 (gas: 2)\n 34305: ecalli 11 // 'return_data_size'\n 34307: fallthrough\n      : @494 (gas: 2)\n 34308: a1 = 0x20\n 34311: jump @496 if a0 >=u a1\n      : @495 (gas: 3)\n 34314: ecalli 11 // 'return_data_size'\n 34316: a1 = a0\n 34318: fallthrough\n      : @496 (gas: 28)\n 34319: a4 = 0\n 34321: a3 = u64 [sp + 0xa0]\n 34325: a2 = u64 [sp + 0xb0]\n 34329: s1 = u64 [sp + 0xb8]\n 34333: a0 = a1 + 0x1f\n 34336: u64 [sp + 0xb0] = a1\n 34340: a1 = a0 <u a1\n 34343: u64 [sp + 184] = 0\n 34347: a1 = a1 & 0x1\n 34350: a0 = a0 & 0xffffffffffffffe0\n 34353: a2 = a2 + a0\n 34356: u64 [sp + 0xa0] = a2\n 34360: a0 = a2 <u a0\n 34363: s1 = s1 + a1\n 34366: s1 = s1 + a0\n 34369: a2 = s1 ^ a1\n 34372: a1 = s1 <u a1\n 34375: a1 = a0 if a2 == 0\n 34378: a0 = u64 [sp + 0x58]\n 34381: a1 = a1 + a0\n 34384: a0 = a1 <u a0\n 34387: a0 = a0 + a3\n 34390: u64 [sp + 0x98] = a1\n 34394: u64 [sp + 0x88] = a0\n 34398: a0 = a0 | a1\n 34401: a1 = s1 <u 0x1\n 34404: a1 = 0 if a0 != 0\n 34406: jump @498 if a1 != 0\n      : @497 (gas: 1)\n 34409: jump @576\n      : @498 (gas: 3)\n 34412: a0 = 0x40\n 34415: a1 = 0x20\n 34418: ra = 432, jump @0\n      : @499 [@dyn 216] (gas: 79)\n 34425: a1 = u64 [sp + 0x88]\n 34429: a1 = reverse a1\n 34431: a2 = u64 [sp + 0x98]\n 34435: a2 = reverse a2\n 34437: a3 = reverse s1\n 34439: a4 = u64 [sp + 0xa0]\n 34443: a4 = reverse a4\n 34445: u8 [a0 + 0x18] = a4\n 34448: a5 = a4 >> 0x38\n 34451: u8 [a0 + 0x1f] = a5\n 34454: a5 = a4 >> 0x30\n 34457: u8 [a0 + 0x1e] = a5\n 34460: a5 = a4 >> 0x28\n 34463: u8 [a0 + 0x1d] = a5\n 34466: a5 = a4 >> 0x20\n 34469: u8 [a0 + 0x1c] = a5\n 34472: a5 = a4 >> 0x18\n 34475: u8 [a0 + 0x1b] = a5\n 34478: a5 = a4 >> 0x10\n 34481: u8 [a0 + 0x1a] = a5\n 34484: a4 = a4 >> 0x8\n 34487: u8 [a0 + 0x19] = a4\n 34490: u8 [a0 + 0x10] = a3\n 34493: a4 = a3 >> 0x38\n 34496: u8 [a0 + 0x17] = a4\n 34499: a4 = a3 >> 0x30\n 34502: u8 [a0 + 0x16] = a4\n 34505: a4 = a3 >> 0x28\n 34508: u8 [a0 + 0x15] = a4\n 34511: a4 = a3 >> 0x20\n 34514: u8 [a0 + 0x14] = a4\n 34517: a4 = a3 >> 0x18\n 34520: u8 [a0 + 0x13] = a4\n 34523: a4 = a3 >> 0x10\n 34526: u8 [a0 + 0x12] = a4\n 34529: a3 = a3 >> 0x8\n 34532: u8 [a0 + 0x11] = a3\n 34535: u8 [a0 + 0x8] = a2\n 34538: a3 = a2 >> 0x38\n 34541: u8 [a0 + 0xf] = a3\n 34544: a3 = a2 >> 0x30\n 34547: u8 [a0 + 0xe] = a3\n 34550: a3 = a2 >> 0x28\n 34553: u8 [a0 + 0xd] = a3\n 34556: a3 = a2 >> 0x20\n 34559: u8 [a0 + 0xc] = a3\n 34562: a3 = a2 >> 0x18\n 34565: u8 [a0 + 0xb] = a3\n 34568: a3 = a2 >> 0x10\n 34571: u8 [a0 + 0xa] = a3\n 34574: a2 = a2 >> 0x8\n 34577: u8 [a0 + 0x9] = a2\n 34580: u8 [a0] = a1\n 34582: a2 = a1 >> 0x38\n 34585: u8 [a0 + 0x7] = a2\n 34588: a2 = a1 >> 0x30\n 34591: u8 [a0 + 0x6] = a2\n 34594: a2 = a1 >> 0x28\n 34597: u8 [a0 + 0x5] = a2\n 34600: a2 = a1 >> 0x20\n 34603: u8 [a0 + 0x4] = a2\n 34606: a2 = a1 >> 0x18\n 34609: u8 [a0 + 0x3] = a2\n 34612: a2 = a1 >> 0x10\n 34615: u8 [a0 + 0x2] = a2\n 34618: a1 = a1 >> 0x8\n 34621: a5 = u64 [sp + 0xb8]\n 34625: a2 = a5 >u 0\n 34627: a3 = u64 [sp + 0xb0]\n 34631: a3 = a3 <u 0x20\n 34634: a3 = a3 ^ 0x1\n 34637: a3 = a2 if a5 != 0\n 34640: a2 = a5 >u 0\n 34642: a4 = a5 >u 0\n 34644: a4 = a2 if a5 == 0\n 34647: a2 = a5 | a5\n 34650: a4 = a3 if a2 == 0\n 34653: u8 [a0 + 0x1] = a1\n 34656: jump @501 if a4 != 0\n      : @500 (gas: 1)\n 34659: jump @573\n      : @501 (gas: 3)\n 34662: a1 = 0x20\n 34665: a0 = u64 [sp + 0xa8]\n 34669: ra = 434, jump @0\n      : @502 [@dyn 217] (gas: 96)\n 34676: a1 = u8 [a0 + 0x9]\n 34679: a2 = u8 [a0 + 0x8]\n 34682: a3 = u8 [a0 + 0xa]\n 34685: a4 = u8 [a0 + 0xb]\n 34688: a1 = a1 << 0x8\n 34691: a1 = a1 | a2\n 34694: a3 = a3 << 0x10\n 34697: a4 = a4 << 0x18\n 34700: a3 = a3 | a4\n 34703: a1 = a1 | a3\n 34706: a2 = u8 [a0 + 0xd]\n 34709: a3 = u8 [a0 + 0xc]\n 34712: a4 = u8 [a0 + 0xe]\n 34715: a5 = u8 [a0 + 0xf]\n 34718: a2 = a2 << 0x8\n 34721: a2 = a2 | a3\n 34724: a4 = a4 << 0x10\n 34727: a5 = a5 << 0x18\n 34730: a4 = a4 | a5\n 34733: a2 = a2 | a4\n 34736: a2 = a2 << 0x20\n 34739: t0 = a2 | a1\n 34742: a2 = u8 [a0 + 0x1]\n 34745: a3 = u8 [a0]\n 34747: a4 = u8 [a0 + 0x2]\n 34750: a5 = u8 [a0 + 0x3]\n 34753: a2 = a2 << 0x8\n 34756: a2 = a2 | a3\n 34759: a4 = a4 << 0x10\n 34762: a5 = a5 << 0x18\n 34765: a4 = a4 | a5\n 34768: a2 = a2 | a4\n 34771: a3 = u8 [a0 + 0x5]\n 34774: a4 = u8 [a0 + 0x4]\n 34777: a5 = u8 [a0 + 0x6]\n 34780: s1 = u8 [a0 + 0x7]\n 34783: a3 = a3 << 0x8\n 34786: a3 = a3 | a4\n 34789: a5 = a5 << 0x10\n 34792: s1 = s1 << 0x18\n 34795: a5 = a5 | s1\n 34798: a3 = a3 | a5\n 34801: a3 = a3 << 0x20\n 34804: a2 = a2 | a3\n 34807: a3 = u8 [a0 + 0x19]\n 34810: a4 = u8 [a0 + 0x18]\n 34813: a5 = u8 [a0 + 0x1a]\n 34816: s1 = u8 [a0 + 0x1b]\n 34819: a3 = a3 << 0x8\n 34822: a3 = a3 | a4\n 34825: a5 = a5 << 0x10\n 34828: s1 = s1 << 0x18\n 34831: a5 = a5 | s1\n 34834: a3 = a3 | a5\n 34837: a4 = u8 [a0 + 0x1d]\n 34840: a5 = u8 [a0 + 0x1c]\n 34843: s1 = u8 [a0 + 0x1e]\n 34846: a1 = u8 [a0 + 0x1f]\n 34849: a4 = a4 << 0x8\n 34852: a4 = a4 | a5\n 34855: s1 = s1 << 0x10\n 34858: a1 = a1 << 0x18\n 34861: a1 = a1 | s1\n 34864: a1 = a1 | a4\n 34867: a1 = a1 << 0x20\n 34870: a3 = a3 | a1\n 34873: a1 = u8 [a0 + 0x11]\n 34876: a4 = u8 [a0 + 0x10]\n 34879: a5 = u8 [a0 + 0x12]\n 34882: s1 = u8 [a0 + 0x13]\n 34885: a1 = a1 << 0x8\n 34888: a1 = a1 | a4\n 34891: a5 = a5 << 0x10\n 34894: s1 = s1 << 0x18\n 34897: a5 = a5 | s1\n 34900: a1 = a1 | a5\n 34903: a4 = u8 [a0 + 0x15]\n 34906: a5 = u8 [a0 + 0x14]\n 34909: s1 = u8 [a0 + 0x16]\n 34912: a0 = u8 [a0 + 0x17]\n 34915: a4 = a4 << 0x8\n 34918: a4 = a4 | a5\n 34921: s1 = s1 << 0x10\n 34924: a0 = a0 << 0x18\n 34927: a0 = a0 | s1\n 34930: a0 = a0 | a4\n 34933: a0 = a0 << 0x20\n 34936: a0 = a0 | a1\n 34939: a1 = reverse a0\n 34941: a4 = reverse a3\n 34943: a4 = a4 <u 0x2\n 34946: a4 = 0 if a1 != 0\n 34948: a1 = t0 | a2\n 34951: a1 = reverse a1\n 34953: a4 = 0 if a1 != 0\n 34955: jump @504 if a4 != 0\n      : @503 (gas: 1)\n 34958: jump @573\n      : @504 (gas: 5)\n 34961: a0 = a0 | a2\n 34964: a1 = t0 | a3\n 34967: a0 = a0 | a1\n 34970: s1 = u64 [sp + 0xd8]\n 34974: jump @506 if a0 != 0\n      : @505 (gas: 1)\n 34977: jump @566\n      : @506 (gas: 97)\n 34980: u64 [sp + 1304] = 0\n 34984: u64 [sp + 1296] = 0\n 34988: u64 [sp + 1288] = 0\n 34992: u64 [sp + 1280] = 0x1\n 34997: u64 [sp + 1336] = 0\n 35001: u64 [sp + 1328] = 0\n 35005: u64 [sp + 1320] = 0\n 35009: u64 [sp + 1312] = 0\n 35013: u32 [sp + 1248] = 0x20\n 35018: i32 a1 = sp + 0x500\n 35022: i32 a3 = sp + 0x520\n 35026: i32 a4 = sp + 0x4e0\n 35030: a2 = 0xffffffffffffffff\n 35033: a0 = 0\n 35035: ecalli 7 // 'get_storage'\n 35037: a0 = u64 [sp + 0x520]\n 35041: u64 [sp + 0xb8] = a0\n 35045: a0 = u64 [sp + 0x530]\n 35049: u64 [sp + 0xb0] = a0\n 35053: a0 = u64 [sp + 0x528]\n 35057: u64 [sp + 0xa8] = a0\n 35061: i32 a0 = sp + 0x360\n 35065: ecalli 5 // 'caller'\n 35067: a0 = i32 [sp + 0x370]\n 35071: u64 [sp + 0x98] = a0\n 35075: a0 = u64 [sp + 0x360]\n 35079: u64 [sp + 0x88] = a0\n 35083: a0 = u64 [sp + 0x368]\n 35087: u64 [sp + 0x80] = a0\n 35091: a0 = u64 [sp + 0xc8]\n 35095: u64 [sp + 0x518] = a0\n 35099: a0 = u64 [sp + 0xd0]\n 35103: u64 [sp + 0x510] = a0\n 35107: u64 [sp + 0x508] = s1\n 35111: s1 = u64 [sp + 0xc0]\n 35115: u64 [sp + 0x500] = s1\n 35119: u64 [sp + 1336] = 0\n 35123: u64 [sp + 1328] = 0\n 35127: u64 [sp + 1320] = 0\n 35131: u64 [sp + 1312] = 0\n 35135: u32 [sp + 1248] = 0x20\n 35140: i32 a1 = sp + 0x500\n 35144: i32 a3 = sp + 0x520\n 35148: i32 a4 = sp + 0x4e0\n 35152: a2 = 0xffffffffffffffff\n 35155: a0 = 0\n 35157: ecalli 7 // 'get_storage'\n 35159: a0 = u64 [sp + 0x528]\n 35163: u64 [sp + 0x70] = a0\n 35166: a0 = u64 [sp + 0x520]\n 35170: u64 [sp + 0x78] = a0\n 35173: a0 = u32 [sp + 0x530]\n 35177: u64 [sp + 0x68] = a0\n 35180: a0 = u64 [sp + 0xc8]\n 35184: u64 [sp + 0x518] = a0\n 35188: a0 = u64 [sp + 0xd0]\n 35192: u64 [sp + 0x510] = a0\n 35196: a0 = u64 [sp + 0xd8]\n 35200: u64 [sp + 0x508] = a0\n 35204: u64 [sp + 0x500] = s1\n 35208: u64 [sp + 1336] = 0\n 35212: u64 [sp + 1328] = 0\n 35216: u64 [sp + 1320] = 0\n 35220: u64 [sp + 1312] = 0\n 35224: u32 [sp + 1248] = 0x20\n 35229: i32 a1 = sp + 0x500\n 35233: i32 a3 = sp + 0x520\n 35237: i32 a4 = sp + 0x4e0\n 35241: a2 = 0xffffffffffffffff\n 35244: a0 = 0\n 35246: ecalli 7 // 'get_storage'\n 35248: a0 = u64 [sp + 0x530]\n 35252: u64 [sp + 0x58] = a0\n 35255: a0 = u64 [sp + 0x528]\n 35259: u64 [sp + 0x50] = a0\n 35262: a0 = u64 [sp + 0xa8]\n 35266: a0 = reverse a0\n 35268: a1 = a0 << 0x20\n 35271: a2 = u64 [sp + 0xb0]\n 35275: a2 = reverse a2\n 35277: a2 = a2 >> 0x20\n 35280: a3 = a2 | a1\n 35283: a0 = a0 >> 0x20\n 35286: a1 = u64 [sp + 0xb8]\n 35290: a1 = reverse a1\n 35292: a2 = a1 << 0x20\n 35295: a0 = a0 | a2\n 35298: a1 = a1 >> 0x20\n 35301: u64 [sp + 0x38] = a0\n 35304: u64 [sp + 0x388] = a0\n 35308: u64 [sp + 0x48] = a3\n 35311: u64 [sp + 0x380] = a3\n 35315: u64 [sp + 0x40] = a1\n 35318: u32 [sp + 0x390] = a1\n 35322: i32 a0 = sp + 0x380\n 35326: ecalli 6 // 'code_size'\n 35328: fallthrough\n      : @507 (gas: 1)\n 35329: jump @509 if a0 != 0\n      : @508 (gas: 1)\n 35332: jump @574\n      : @509 (gas: 3)\n 35335: a0 = 0x40\n 35338: a1 = 0x20\n 35341: ra = 436, jump @0\n      : @510 [@dyn 218] (gas: 107)\n 35348: a1 = u8 [a0 + 0x11]\n 35351: a2 = u8 [a0 + 0x10]\n 35354: a3 = u8 [a0 + 0x12]\n 35357: a4 = u8 [a0 + 0x13]\n 35360: a1 = a1 << 0x8\n 35363: a1 = a1 | a2\n 35366: a3 = a3 << 0x10\n 35369: a4 = a4 << 0x18\n 35372: a3 = a3 | a4\n 35375: a1 = a1 | a3\n 35378: a2 = u8 [a0 + 0x15]\n 35381: a3 = u8 [a0 + 0x14]\n 35384: a4 = u8 [a0 + 0x16]\n 35387: a5 = u8 [a0 + 0x17]\n 35390: a2 = a2 << 0x8\n 35393: a2 = a2 | a3\n 35396: a4 = a4 << 0x10\n 35399: a5 = a5 << 0x18\n 35402: a4 = a4 | a5\n 35405: a2 = a2 | a4\n 35408: a2 = a2 << 0x20\n 35411: t1 = a2 | a1\n 35414: a1 = u8 [a0 + 0x1]\n 35417: a2 = u8 [a0]\n 35419: a3 = u8 [a0 + 0x2]\n 35422: a4 = u8 [a0 + 0x3]\n 35425: a1 = a1 << 0x8\n 35428: a1 = a1 | a2\n 35431: a3 = a3 << 0x10\n 35434: a4 = a4 << 0x18\n 35437: a3 = a3 | a4\n 35440: a1 = a1 | a3\n 35443: a2 = u8 [a0 + 0x5]\n 35446: a3 = u8 [a0 + 0x4]\n 35449: a4 = u8 [a0 + 0x6]\n 35452: a5 = u8 [a0 + 0x7]\n 35455: a2 = a2 << 0x8\n 35458: a2 = a2 | a3\n 35461: a4 = a4 << 0x10\n 35464: a5 = a5 << 0x18\n 35467: a4 = a4 | a5\n 35470: a2 = a2 | a4\n 35473: a2 = a2 << 0x20\n 35476: t0 = a2 | a1\n 35479: a1 = u8 [a0 + 0x19]\n 35482: a2 = u8 [a0 + 0x18]\n 35485: a3 = u8 [a0 + 0x1a]\n 35488: a4 = u8 [a0 + 0x1b]\n 35491: a1 = a1 << 0x8\n 35494: a1 = a1 | a2\n 35497: a3 = a3 << 0x10\n 35500: a4 = a4 << 0x18\n 35503: a3 = a3 | a4\n 35506: a1 = a1 | a3\n 35509: a2 = u8 [a0 + 0x1d]\n 35512: a3 = u8 [a0 + 0x1c]\n 35515: a4 = u8 [a0 + 0x1e]\n 35518: a5 = u8 [a0 + 0x1f]\n 35521: a2 = a2 << 0x8\n 35524: a2 = a2 | a3\n 35527: a4 = a4 << 0x10\n 35530: a5 = a5 << 0x18\n 35533: a4 = a4 | a5\n 35536: a2 = a2 | a4\n 35539: a2 = a2 << 0x20\n 35542: a5 = a2 | a1\n 35545: a1 = u8 [a0 + 0x9]\n 35548: a2 = u8 [a0 + 0x8]\n 35551: a3 = u8 [a0 + 0xa]\n 35554: a4 = u8 [a0 + 0xb]\n 35557: a1 = a1 << 0x8\n 35560: a1 = a1 | a2\n 35563: a3 = a3 << 0x10\n 35566: a4 = a4 << 0x18\n 35569: a3 = a3 | a4\n 35572: a1 = a1 | a3\n 35575: a2 = u8 [a0 + 0xd]\n 35578: a3 = u8 [a0 + 0xc]\n 35581: a4 = u8 [a0 + 0xe]\n 35584: a0 = u8 [a0 + 0xf]\n 35587: a2 = a2 << 0x8\n 35590: a2 = a2 | a3\n 35593: a4 = a4 << 0x10\n 35596: a0 = a0 << 0x18\n 35599: a0 = a0 | a4\n 35602: a0 = a0 | a2\n 35605: a0 = a0 << 0x20\n 35608: a0 = a0 | a1\n 35611: u64 [sp + 0x18] = a0\n 35614: s1 = reverse a0\n 35616: u64 [sp + 0x20] = a5\n 35619: a1 = reverse a5\n 35621: u64 [sp + 0x30] = t0\n 35624: a2 = reverse t0\n 35626: u64 [sp + 0x28] = t1\n 35629: a0 = reverse t1\n 35631: u64 [sp + 0xb0] = a0\n 35635: u64 [sp + 0xa0] = a2\n 35639: a0 = a0 | a2\n 35642: u64 [sp + 0xb8] = a1\n 35646: a1 = a1 | s1\n 35649: a1 = a1 | a0\n 35652: a1 = a1 >> 0x20\n 35655: a0 = a0 | s1\n 35658: a0 = a0 << 0x20\n 35661: a0 = a0 | a1\n 35664: jump @512 if a0 == 0\n      : @511 (gas: 1)\n 35667: jump @572\n      : @512 (gas: 4)\n 35670: a0 = i32 [sp + 0xb8]\n 35674: a1 = 0x20\n 35677: u64 [sp + 0xa8] = a0\n 35681: ra = 438, jump @0\n      : @513 [@dyn 219] (gas: 44)\n 35688: u8 [a0 + 31] = 0\n 35691: u8 [a0 + 30] = 0\n 35694: u8 [a0 + 29] = 0\n 35697: u8 [a0 + 28] = 0\n 35700: u8 [a0 + 27] = 0\n 35703: u8 [a0 + 26] = 0\n 35706: u8 [a0 + 25] = 0\n 35709: u8 [a0 + 24] = 0\n 35712: u8 [a0 + 23] = 0\n 35715: u8 [a0 + 22] = 0\n 35718: u8 [a0 + 21] = 0\n 35721: u8 [a0 + 20] = 0\n 35724: u8 [a0 + 19] = 0\n 35727: u8 [a0 + 18] = 0\n 35730: u8 [a0 + 17] = 0\n 35733: u8 [a0 + 16] = 0\n 35736: u8 [a0 + 15] = 0\n 35739: u8 [a0 + 14] = 0\n 35742: u8 [a0 + 13] = 0\n 35745: u8 [a0 + 12] = 0\n 35748: u8 [a0 + 11] = 0\n 35751: u8 [a0 + 10] = 0\n 35754: u8 [a0 + 9] = 0\n 35757: u8 [a0 + 8] = 0\n 35760: u8 [a0 + 7] = 0\n 35763: u8 [a0 + 6] = 0\n 35766: u8 [a0 + 5] = 0\n 35769: u8 [a0 + 3] = 0x42\n 35773: u8 [a0 + 2] = 0x24\n 35777: u8 [a0 + 1] = 0x35\n 35781: u8 [a0 + 0] = 0x65\n 35784: a3 = u64 [sp + 0xa0]\n 35788: a3 = a3 | s1\n 35791: a1 = 0x100000000\n 35801: u64 [sp + 0x60] = a1\n 35804: a1 = 0xfffffffc\n 35814: a2 = u64 [sp + 0xb8]\n 35818: a1 = a2 <u a1\n 35821: a2 = u64 [sp + 0xb0]\n 35825: a1 = 0 if a2 != 0\n 35827: u64 [sp + 0xa0] = a3\n 35831: a1 = 0 if a3 != 0\n 35833: u8 [a0 + 4] = 0\n 35836: jump @515 if a1 != 0\n      : @514 (gas: 1)\n 35839: jump @572\n      : @515 (gas: 19)\n 35842: a0 = u64 [sp + 0x80]\n 35846: a0 = reverse a0\n 35848: a1 = a0 >> 0x20\n 35851: a2 = u64 [sp + 0x88]\n 35855: a2 = reverse a2\n 35857: a3 = a2 << 0x20\n 35860: a1 = a1 | a3\n 35863: u64 [sp + 0x88] = a1\n 35867: a0 = a0 << 0x20\n 35870: a1 = u64 [sp + 0x98]\n 35874: a1 = reverse a1\n 35876: a1 = a1 >> 0x20\n 35879: a0 = a0 | a1\n 35882: u64 [sp + 0x98] = a0\n 35886: s1 = a2 >> 0x20\n 35889: a0 = u64 [sp + 0xa8]\n 35893: i32 a0 = a0 + 0x4\n 35896: a1 = 0x20\n 35899: ra = 440, jump @0\n      : @516 [@dyn 220] (gas: 64)\n 35906: a1 = reverse s1\n 35908: a2 = u64 [sp + 0x88]\n 35912: a2 = reverse a2\n 35914: a3 = u64 [sp + 0x98]\n 35918: a3 = reverse a3\n 35920: a4 = a3 >> 0x38\n 35923: u8 [a0 + 0x1f] = a4\n 35926: a4 = a3 >> 0x30\n 35929: u8 [a0 + 0x1e] = a4\n 35932: a4 = a3 >> 0x28\n 35935: u8 [a0 + 0x1d] = a4\n 35938: a4 = a3 >> 0x20\n 35941: u8 [a0 + 0x1c] = a4\n 35944: a4 = a3 >> 0x18\n 35947: u8 [a0 + 0x1b] = a4\n 35950: a4 = a3 >> 0x10\n 35953: u8 [a0 + 0x1a] = a4\n 35956: a4 = a3 >> 0x8\n 35959: u8 [a0 + 0x19] = a4\n 35962: u8 [a0 + 0x18] = a3\n 35965: u8 [a0 + 0x10] = a2\n 35968: u8 [a0 + 11] = 0\n 35971: u8 [a0 + 10] = 0\n 35974: u8 [a0 + 9] = 0\n 35977: u8 [a0 + 7] = 0\n 35980: u8 [a0 + 6] = 0\n 35983: u8 [a0 + 5] = 0\n 35986: u8 [a0 + 4] = 0\n 35989: u8 [a0 + 3] = 0\n 35992: u8 [a0 + 2] = 0\n 35995: u8 [a0 + 1] = 0\n 35998: u8 [a0 + 0] = 0\n 36000: a3 = a2 >> 0x38\n 36003: u8 [a0 + 0x17] = a3\n 36006: a3 = a2 >> 0x30\n 36009: u8 [a0 + 0x16] = a3\n 36012: a3 = a2 >> 0x28\n 36015: u8 [a0 + 0x15] = a3\n 36018: a3 = a2 >> 0x20\n 36021: u8 [a0 + 0x14] = a3\n 36024: a3 = a2 >> 0x18\n 36027: u8 [a0 + 0x13] = a3\n 36030: a3 = a2 >> 0x10\n 36033: u8 [a0 + 0x12] = a3\n 36036: a2 = a2 >> 0x8\n 36039: u8 [a0 + 0x11] = a2\n 36042: u8 [a0 + 0x8] = a1\n 36045: a2 = a1 >> 0x38\n 36048: u8 [a0 + 0xf] = a2\n 36051: a2 = a1 >> 0x30\n 36054: u8 [a0 + 0xe] = a2\n 36057: a2 = a1 >> 0x28\n 36060: u8 [a0 + 0xd] = a2\n 36063: a1 = a1 >> 0x20\n 36066: a2 = u64 [sp + 0x60]\n 36069: a2 = a2 + 0xffffffffffffffdc\n 36072: a3 = u64 [sp + 0xb8]\n 36076: a2 = a3 <u a2\n 36079: a3 = u64 [sp + 0xb0]\n 36083: a2 = 0 if a3 != 0\n 36085: a3 = u64 [sp + 0xa0]\n 36089: a2 = 0 if a3 != 0\n 36091: u8 [a0 + 0xc] = a1\n 36094: jump @518 if a2 != 0\n      : @517 (gas: 1)\n 36097: jump @572\n      : @518 (gas: 4)\n 36100: a0 = u64 [sp + 0xa8]\n 36104: i32 a0 = a0 + 0x24\n 36107: a1 = 0x20\n 36110: ra = 442, jump @0\n      : @519 [@dyn 221] (gas: 65)\n 36117: a1 = u64 [sp + 0x68]\n 36120: a1 = reverse a1\n 36122: a2 = u64 [sp + 0x70]\n 36125: a2 = reverse a2\n 36127: a3 = u64 [sp + 0x78]\n 36130: a3 = reverse a3\n 36132: a4 = a3 >> 0x38\n 36135: u8 [a0 + 0x1f] = a4\n 36138: a4 = a3 >> 0x30\n 36141: u8 [a0 + 0x1e] = a4\n 36144: a4 = a3 >> 0x28\n 36147: u8 [a0 + 0x1d] = a4\n 36150: a4 = a3 >> 0x20\n 36153: u8 [a0 + 0x1c] = a4\n 36156: a4 = a3 >> 0x18\n 36159: u8 [a0 + 0x1b] = a4\n 36162: a4 = a3 >> 0x10\n 36165: u8 [a0 + 0x1a] = a4\n 36168: a4 = a3 >> 0x8\n 36171: u8 [a0 + 0x19] = a4\n 36174: u8 [a0 + 0x18] = a3\n 36177: u8 [a0 + 0x10] = a2\n 36180: u8 [a0 + 11] = 0\n 36183: u8 [a0 + 10] = 0\n 36186: u8 [a0 + 9] = 0\n 36189: u8 [a0 + 7] = 0\n 36192: u8 [a0 + 6] = 0\n 36195: u8 [a0 + 5] = 0\n 36198: u8 [a0 + 4] = 0\n 36201: u8 [a0 + 3] = 0\n 36204: u8 [a0 + 2] = 0\n 36207: u8 [a0 + 1] = 0\n 36210: u8 [a0 + 0] = 0\n 36212: a3 = a2 >> 0x38\n 36215: u8 [a0 + 0x17] = a3\n 36218: a3 = a2 >> 0x30\n 36221: u8 [a0 + 0x16] = a3\n 36224: a3 = a2 >> 0x28\n 36227: u8 [a0 + 0x15] = a3\n 36230: a3 = a2 >> 0x20\n 36233: u8 [a0 + 0x14] = a3\n 36236: a3 = a2 >> 0x18\n 36239: u8 [a0 + 0x13] = a3\n 36242: a3 = a2 >> 0x10\n 36245: u8 [a0 + 0x12] = a3\n 36248: a2 = a2 >> 0x8\n 36251: u8 [a0 + 0x11] = a2\n 36254: u8 [a0 + 0x8] = a1\n 36257: a2 = a1 >> 0x38\n 36260: u8 [a0 + 0xf] = a2\n 36263: a2 = a1 >> 0x30\n 36266: u8 [a0 + 0xe] = a2\n 36269: a2 = a1 >> 0x28\n 36272: u8 [a0 + 0xd] = a2\n 36275: a1 = a1 >> 0x20\n 36278: s1 = 0x100000000\n 36288: a2 = 0xffffffbc\n 36298: a3 = u64 [sp + 0xb8]\n 36302: a2 = a3 <u a2\n 36305: a3 = u64 [sp + 0xb0]\n 36309: a2 = 0 if a3 != 0\n 36311: a3 = u64 [sp + 0xa0]\n 36315: a2 = 0 if a3 != 0\n 36317: u8 [a0 + 0xc] = a1\n 36320: jump @521 if a2 != 0\n      : @520 (gas: 1)\n 36323: jump @572\n      : @521 (gas: 4)\n 36326: a0 = u64 [sp + 0xa8]\n 36330: i32 a0 = a0 + 0x44\n 36333: a1 = 0x20\n 36336: ra = 444, jump @0\n      : @522 [@dyn 222] (gas: 54)\n 36343: a1 = u64 [sp + 0x50]\n 36346: a1 = a1 >> 0x30\n 36349: a2 = u64 [sp + 0x58]\n 36352: a2 = a2 << 0x10\n 36355: a1 = a1 | a2\n 36358: a2 = u64 [sp + 0x90]\n 36362: a1 = a1 & a2\n 36365: u8 [a0 + 23] = 0\n 36368: u8 [a0 + 22] = 0\n 36371: u8 [a0 + 21] = 0\n 36374: u8 [a0 + 20] = 0\n 36377: u8 [a0 + 19] = 0\n 36380: u8 [a0 + 18] = 0\n 36383: u8 [a0 + 17] = 0\n 36386: u8 [a0 + 16] = 0\n 36389: u8 [a0 + 15] = 0\n 36392: u8 [a0 + 14] = 0\n 36395: u8 [a0 + 13] = 0\n 36398: u8 [a0 + 12] = 0\n 36401: u8 [a0 + 11] = 0\n 36404: u8 [a0 + 10] = 0\n 36407: u8 [a0 + 9] = 0\n 36410: u8 [a0 + 8] = 0\n 36413: u8 [a0 + 7] = 0\n 36416: u8 [a0 + 6] = 0\n 36419: u8 [a0 + 5] = 0\n 36422: u8 [a0 + 4] = 0\n 36425: u8 [a0 + 3] = 0\n 36428: u8 [a0 + 2] = 0\n 36431: u8 [a0 + 1] = 0\n 36434: u8 [a0 + 0] = 0\n 36436: u8 [a0 + 0x18] = a1\n 36439: a2 = a1 >> 0x38\n 36442: u8 [a0 + 0x1f] = a2\n 36445: a2 = a1 >> 0x30\n 36448: u8 [a0 + 0x1e] = a2\n 36451: a2 = a1 >> 0x28\n 36454: u8 [a0 + 0x1d] = a2\n 36457: a2 = a1 >> 0x20\n 36460: u8 [a0 + 0x1c] = a2\n 36463: a2 = a1 >> 0x18\n 36466: u8 [a0 + 0x1b] = a2\n 36469: a2 = a1 >> 0x10\n 36472: u8 [a0 + 0x1a] = a2\n 36475: a1 = a1 >> 0x8\n 36478: a2 = s1 + 0xffffffffffffff9c\n 36481: a3 = u64 [sp + 0xb8]\n 36485: a2 = a3 <u a2\n 36488: a3 = u64 [sp + 0xb0]\n 36492: a2 = 0 if a3 != 0\n 36494: a3 = u64 [sp + 0xa0]\n 36498: a2 = 0 if a3 != 0\n 36500: u8 [a0 + 0x19] = a1\n 36503: jump @524 if a2 != 0\n      : @523 (gas: 1)\n 36506: jump @572\n      : @524 (gas: 8)\n 36509: a0 = 0x8400000000\n 36519: u64 [sp + 0x98] = a0\n 36523: a0 = 0x800000000\n 36533: u64 [sp + 0x88] = a0\n 36537: s1 = u64 [sp + 0xa8]\n 36541: i32 a0 = s1 + 0x64\n 36544: a1 = 0x20\n 36547: ra = 446, jump @0\n      : @525 [@dyn 223] (gas: 46)\n 36554: u8 [a0 + 31] = 0x1\n 36558: u8 [a0 + 30] = 0\n 36561: u8 [a0 + 29] = 0\n 36564: u8 [a0 + 28] = 0\n 36567: u8 [a0 + 27] = 0\n 36570: u8 [a0 + 26] = 0\n 36573: u8 [a0 + 25] = 0\n 36576: u8 [a0 + 24] = 0\n 36579: u8 [a0 + 23] = 0\n 36582: u8 [a0 + 22] = 0\n 36585: u8 [a0 + 21] = 0\n 36588: u8 [a0 + 20] = 0\n 36591: u8 [a0 + 19] = 0\n 36594: u8 [a0 + 18] = 0\n 36597: u8 [a0 + 17] = 0\n 36600: u8 [a0 + 16] = 0\n 36603: u8 [a0 + 15] = 0\n 36606: u8 [a0 + 14] = 0\n 36609: u8 [a0 + 13] = 0\n 36612: u8 [a0 + 12] = 0\n 36615: u8 [a0 + 11] = 0\n 36618: u8 [a0 + 10] = 0\n 36621: u8 [a0 + 9] = 0\n 36624: u8 [a0 + 8] = 0\n 36627: u8 [a0 + 7] = 0\n 36630: u8 [a0 + 6] = 0\n 36633: u8 [a0 + 5] = 0\n 36636: u8 [a0 + 4] = 0\n 36639: u8 [a0 + 3] = 0\n 36642: u8 [a0 + 2] = 0\n 36645: u8 [a0 + 1] = 0\n 36648: u8 [a0 + 0] = 0\n 36650: ecalli 9 // 'ref_time_left'\n 36652: a0 = u64 [sp + 0x38]\n 36655: u64 [sp + 0x3a8] = a0\n 36659: a0 = u64 [sp + 0x48]\n 36662: u64 [sp + 0x3a0] = a0\n 36666: a0 = u64 [sp + 0x40]\n 36669: u32 [sp + 0x3b0] = a0\n 36673: u64 [sp + 984] = 0\n 36677: u64 [sp + 976] = 0\n 36681: u64 [sp + 968] = 0\n 36685: u64 [sp + 960] = 0\n 36689: a1 = 0x84\n 36693: a0 = s1\n 36695: ra = 448, jump @0\n      : @526 [@dyn 224] (gas: 4)\n 36702: u64 [sp + 0xb8] = a0\n 36706: a0 = s1\n 36708: a1 = 0\n 36710: ra = 450, jump @0\n      : @527 [@dyn 225] (gas: 31)\n 36717: u32 [sp + 992] = 0\n 36721: u64 [sp + 1048] = 0xffffffffffffffff\n 36726: u64 [sp + 1040] = 0xffffffffffffffff\n 36731: u64 [sp + 1032] = 0xffffffffffffffff\n 36736: u64 [sp + 1024] = 0xffffffffffffffff\n 36741: a1 = sp + 0x3a0\n 36745: a1 = a1 << 0x20\n 36748: a1 = a1 >> 0x20\n 36751: s1 = u64 [sp + 0x88]\n 36755: s1 = s1 | a1\n 36758: a1 = sp + 0x3c0\n 36762: a1 = a1 << 0x20\n 36765: a1 = a1 >> 0x20\n 36768: a2 = sp + 0x400\n 36772: a2 = a2 << 0x20\n 36775: a3 = a2 | a1\n 36778: a1 = u64 [sp + 0xb8]\n 36782: a1 = a1 << 0x20\n 36785: a1 = a1 >> 0x20\n 36788: a4 = u64 [sp + 0x98]\n 36792: a4 = a4 | a1\n 36795: a0 = a0 << 0x20\n 36798: a0 = a0 >> 0x20\n 36801: a1 = sp + 0x3e0\n 36805: a1 = a1 << 0x20\n 36808: a5 = a1 | a0\n 36811: a1 = 0xffffffffffffffff\n 36814: a2 = 0xffffffffffffffff\n 36817: a0 = s1\n 36819: ecalli 1 // 'call'\n 36821: fallthrough\n      : @528 (gas: 1)\n 36822: jump @550 if a0 != 0\n      : @529 (gas: 4)\n 36826: ecalli 11 // 'return_data_size'\n 36828: a0 = 0x40\n 36831: a1 = 0x20\n 36834: ra = 452, jump @0\n      : @530 [@dyn 226] (gas: 162)\n 36841: a3 = u64 [sp + 0x20]\n 36844: u8 [a0 + 0x18] = a3\n 36847: a2 = u64 [sp + 0x28]\n 36850: a1 = a2 >> 0x38\n 36853: u8 [a0 + 0x17] = a1\n 36856: a1 = a2 >> 0x30\n 36859: u8 [a0 + 0x16] = a1\n 36862: a1 = a2 >> 0x28\n 36865: u8 [a0 + 0x15] = a1\n 36868: a1 = a2 >> 0x20\n 36871: u8 [a0 + 0x14] = a1\n 36874: a1 = a2 >> 0x18\n 36877: u8 [a0 + 0x13] = a1\n 36880: a1 = a2 >> 0x10\n 36883: u8 [a0 + 0x12] = a1\n 36886: a1 = a2 >> 0x8\n 36889: u8 [a0 + 0x11] = a1\n 36892: u8 [a0 + 0x10] = a2\n 36895: a2 = u64 [sp + 0x18]\n 36898: a1 = a2 >> 0x38\n 36901: u8 [a0 + 0xf] = a1\n 36904: a1 = a2 >> 0x30\n 36907: u8 [a0 + 0xe] = a1\n 36910: a1 = a2 >> 0x28\n 36913: u8 [a0 + 0xd] = a1\n 36916: a1 = a2 >> 0x20\n 36919: u8 [a0 + 0xc] = a1\n 36922: a1 = a2 >> 0x18\n 36925: u8 [a0 + 0xb] = a1\n 36928: a1 = a2 >> 0x10\n 36931: u8 [a0 + 0xa] = a1\n 36934: a1 = a2 >> 0x8\n 36937: u8 [a0 + 0x9] = a1\n 36940: u8 [a0 + 0x8] = a2\n 36943: a2 = u64 [sp + 0x30]\n 36946: a1 = a2 >> 0x38\n 36949: u8 [a0 + 0x7] = a1\n 36952: a1 = a2 >> 0x30\n 36955: u8 [a0 + 0x6] = a1\n 36958: a1 = a2 >> 0x28\n 36961: u8 [a0 + 0x5] = a1\n 36964: a1 = a2 >> 0x20\n 36967: u8 [a0 + 0x4] = a1\n 36970: a1 = a2 >> 0x18\n 36973: u8 [a0 + 0x3] = a1\n 36976: a1 = a2 >> 0x10\n 36979: u8 [a0 + 0x2] = a1\n 36982: a1 = a2 >> 0x8\n 36985: u8 [a0 + 0x1] = a1\n 36988: u8 [a0] = a2\n 36990: a1 = a3 >> 0x38\n 36993: u8 [a0 + 0x1f] = a1\n 36996: a1 = a3 >> 0x30\n 36999: u8 [a0 + 0x1e] = a1\n 37002: a1 = a3 >> 0x28\n 37005: u8 [a0 + 0x1d] = a1\n 37008: a1 = a3 >> 0x20\n 37011: u8 [a0 + 0x1c] = a1\n 37014: a1 = a3 >> 0x18\n 37017: u8 [a0 + 0x1b] = a1\n 37020: a1 = a3 >> 0x10\n 37023: u8 [a0 + 0x1a] = a1\n 37026: a1 = a3 >> 0x8\n 37029: u8 [a0 + 0x19] = a1\n 37032: u64 [sp + 1304] = 0\n 37036: u64 [sp + 1296] = 0\n 37040: u64 [sp + 1288] = 0\n 37044: u64 [sp + 1280] = 0x1\n 37049: u64 [sp + 1336] = 0\n 37053: u64 [sp + 1328] = 0\n 37057: u64 [sp + 1320] = 0\n 37061: u64 [sp + 1312] = 0\n 37065: u32 [sp + 1248] = 0x20\n 37070: i32 a1 = sp + 0x500\n 37074: i32 a3 = sp + 0x520\n 37078: i32 a4 = sp + 0x4e0\n 37082: a2 = 0xffffffffffffffff\n 37085: a0 = 0\n 37087: ecalli 7 // 'get_storage'\n 37089: a0 = u64 [sp + 0x520]\n 37093: u64 [sp + 0xb8] = a0\n 37097: a0 = u64 [sp + 0x530]\n 37101: u64 [sp + 0xb0] = a0\n 37105: a0 = u64 [sp + 0x528]\n 37109: u64 [sp + 0xa8] = a0\n 37113: a0 = u64 [sp + 0xc8]\n 37117: u64 [sp + 0x518] = a0\n 37121: a0 = u64 [sp + 0xd0]\n 37125: u64 [sp + 0x510] = a0\n 37129: a0 = u64 [sp + 0xd8]\n 37133: u64 [sp + 0x508] = a0\n 37137: s1 = u64 [sp + 0xc0]\n 37141: u64 [sp + 0x500] = s1\n 37145: u64 [sp + 1336] = 0\n 37149: u64 [sp + 1328] = 0\n 37153: u64 [sp + 1320] = 0\n 37157: u64 [sp + 1312] = 0\n 37161: u32 [sp + 1248] = 0x20\n 37166: i32 a1 = sp + 0x500\n 37170: i32 a3 = sp + 0x520\n 37174: i32 a4 = sp + 0x4e0\n 37178: a2 = 0xffffffffffffffff\n 37181: a0 = 0\n 37183: ecalli 7 // 'get_storage'\n 37185: a0 = u64 [sp + 0x520]\n 37189: u64 [sp + 0x80] = a0\n 37193: a0 = u64 [sp + 0x528]\n 37197: u64 [sp + 0x78] = a0\n 37200: a0 = u64 [sp + 0x530]\n 37204: u64 [sp + 0x70] = a0\n 37207: i32 a0 = sp + 0x420\n 37211: ecalli 5 // 'caller'\n 37213: a0 = i32 [sp + 0x430]\n 37217: u64 [sp + 0x68] = a0\n 37220: a0 = u64 [sp + 0x420]\n 37224: u64 [sp + 0x60] = a0\n 37227: a0 = u64 [sp + 0x428]\n 37231: u64 [sp + 0x58] = a0\n 37234: a0 = u64 [sp + 0xc8]\n 37238: u64 [sp + 0x518] = a0\n 37242: a0 = u64 [sp + 0xd0]\n 37246: u64 [sp + 0x510] = a0\n 37250: a0 = u64 [sp + 0xd8]\n 37254: u64 [sp + 0x508] = a0\n 37258: u64 [sp + 0x500] = s1\n 37262: u64 [sp + 1336] = 0\n 37266: u64 [sp + 1328] = 0\n 37270: u64 [sp + 1320] = 0\n 37274: u64 [sp + 1312] = 0\n 37278: u32 [sp + 1248] = 0x20\n 37283: i32 a1 = sp + 0x500\n 37287: i32 a3 = sp + 0x520\n 37291: i32 a4 = sp + 0x4e0\n 37295: a2 = 0xffffffffffffffff\n 37298: a0 = 0\n 37300: ecalli 7 // 'get_storage'\n 37302: a0 = u64 [sp + 0x530]\n 37306: u64 [sp + 0x48] = a0\n 37309: a0 = u64 [sp + 0x528]\n 37313: u64 [sp + 0x40] = a0\n 37316: a0 = u64 [sp + 0xa8]\n 37320: a0 = reverse a0\n 37322: a1 = a0 << 0x20\n 37325: a2 = u64 [sp + 0xb0]\n 37329: a2 = reverse a2\n 37331: a2 = a2 >> 0x20\n 37334: a3 = a2 | a1\n 37337: a0 = a0 >> 0x20\n 37340: a1 = u64 [sp + 0xb8]\n 37344: a1 = reverse a1\n 37346: a2 = a1 << 0x20\n 37349: a0 = a0 | a2\n 37352: a1 = a1 >> 0x20\n 37355: u64 [sp + 0x28] = a0\n 37358: u64 [sp + 0x448] = a0\n 37362: u64 [sp + 0x38] = a3\n 37365: u64 [sp + 0x440] = a3\n 37369: u64 [sp + 0x30] = a1\n 37372: u32 [sp + 0x450] = a1\n 37376: i32 a0 = sp + 0x440\n 37380: ecalli 6 // 'code_size'\n 37382: fallthrough\n      : @531 (gas: 1)\n 37383: jump @533 if a0 != 0\n      : @532 (gas: 1)\n 37386: jump @574\n      : @533 (gas: 3)\n 37389: a0 = 0x40\n 37392: a1 = 0x20\n 37395: ra = 454, jump @0\n      : @534 [@dyn 227] (gas: 107)\n 37402: a1 = u8 [a0 + 0x11]\n 37405: a2 = u8 [a0 + 0x10]\n 37408: a3 = u8 [a0 + 0x12]\n 37411: a4 = u8 [a0 + 0x13]\n 37414: a1 = a1 << 0x8\n 37417: a1 = a1 | a2\n 37420: a3 = a3 << 0x10\n 37423: a4 = a4 << 0x18\n 37426: a3 = a3 | a4\n 37429: a1 = a1 | a3\n 37432: a2 = u8 [a0 + 0x15]\n 37435: a3 = u8 [a0 + 0x14]\n 37438: a4 = u8 [a0 + 0x16]\n 37441: a5 = u8 [a0 + 0x17]\n 37444: a2 = a2 << 0x8\n 37447: a2 = a2 | a3\n 37450: a4 = a4 << 0x10\n 37453: a5 = a5 << 0x18\n 37456: a4 = a4 | a5\n 37459: a2 = a2 | a4\n 37462: a2 = a2 << 0x20\n 37465: t1 = a2 | a1\n 37468: a1 = u8 [a0 + 0x1]\n 37471: a2 = u8 [a0]\n 37473: a3 = u8 [a0 + 0x2]\n 37476: a4 = u8 [a0 + 0x3]\n 37479: a1 = a1 << 0x8\n 37482: a1 = a1 | a2\n 37485: a3 = a3 << 0x10\n 37488: a4 = a4 << 0x18\n 37491: a3 = a3 | a4\n 37494: a1 = a1 | a3\n 37497: a2 = u8 [a0 + 0x5]\n 37500: a3 = u8 [a0 + 0x4]\n 37503: a4 = u8 [a0 + 0x6]\n 37506: a5 = u8 [a0 + 0x7]\n 37509: a2 = a2 << 0x8\n 37512: a2 = a2 | a3\n 37515: a4 = a4 << 0x10\n 37518: a5 = a5 << 0x18\n 37521: a4 = a4 | a5\n 37524: a2 = a2 | a4\n 37527: a2 = a2 << 0x20\n 37530: t0 = a2 | a1\n 37533: a1 = u8 [a0 + 0x19]\n 37536: a2 = u8 [a0 + 0x18]\n 37539: a3 = u8 [a0 + 0x1a]\n 37542: a4 = u8 [a0 + 0x1b]\n 37545: a1 = a1 << 0x8\n 37548: a1 = a1 | a2\n 37551: a3 = a3 << 0x10\n 37554: a4 = a4 << 0x18\n 37557: a3 = a3 | a4\n 37560: a1 = a1 | a3\n 37563: a2 = u8 [a0 + 0x1d]\n 37566: a3 = u8 [a0 + 0x1c]\n 37569: a4 = u8 [a0 + 0x1e]\n 37572: a5 = u8 [a0 + 0x1f]\n 37575: a2 = a2 << 0x8\n 37578: a2 = a2 | a3\n 37581: a4 = a4 << 0x10\n 37584: a5 = a5 << 0x18\n 37587: a4 = a4 | a5\n 37590: a2 = a2 | a4\n 37593: a2 = a2 << 0x20\n 37596: a5 = a2 | a1\n 37599: a1 = u8 [a0 + 0x9]\n 37602: a2 = u8 [a0 + 0x8]\n 37605: a3 = u8 [a0 + 0xa]\n 37608: a4 = u8 [a0 + 0xb]\n 37611: a1 = a1 << 0x8\n 37614: a1 = a1 | a2\n 37617: a3 = a3 << 0x10\n 37620: a4 = a4 << 0x18\n 37623: a3 = a3 | a4\n 37626: a1 = a1 | a3\n 37629: a2 = u8 [a0 + 0xd]\n 37632: a3 = u8 [a0 + 0xc]\n 37635: a4 = u8 [a0 + 0xe]\n 37638: a0 = u8 [a0 + 0xf]\n 37641: a2 = a2 << 0x8\n 37644: a2 = a2 | a3\n 37647: a4 = a4 << 0x10\n 37650: a0 = a0 << 0x18\n 37653: a0 = a0 | a4\n 37656: a0 = a0 | a2\n 37659: a0 = a0 << 0x20\n 37662: a0 = a0 | a1\n 37665: u64 [sp + 0x8] = a0\n 37668: s1 = reverse a0\n 37670: u64 [sp + 0x10] = a5\n 37673: a1 = reverse a5\n 37675: u64 [sp + 0x20] = t0\n 37678: a2 = reverse t0\n 37680: u64 [sp + 0x18] = t1\n 37683: a0 = reverse t1\n 37685: u64 [sp + 0xb0] = a0\n 37689: u64 [sp + 0xa0] = a2\n 37693: a0 = a0 | a2\n 37696: u64 [sp + 0xb8] = a1\n 37700: a1 = a1 | s1\n 37703: a1 = a1 | a0\n 37706: a1 = a1 >> 0x20\n 37709: a0 = a0 | s1\n 37712: a0 = a0 << 0x20\n 37715: a0 = a0 | a1\n 37718: jump @572 if a0 != 0\n      : @535 (gas: 4)\n 37722: a0 = i32 [sp + 0xb8]\n 37726: a1 = 0x20\n 37729: u64 [sp + 0xa8] = a0\n 37733: ra = 456, jump @0\n      : @536 [@dyn 228] (gas: 44)\n 37740: u8 [a0 + 31] = 0\n 37743: u8 [a0 + 30] = 0\n 37746: u8 [a0 + 29] = 0\n 37749: u8 [a0 + 28] = 0\n 37752: u8 [a0 + 27] = 0\n 37755: u8 [a0 + 26] = 0\n 37758: u8 [a0 + 25] = 0\n 37761: u8 [a0 + 24] = 0\n 37764: u8 [a0 + 23] = 0\n 37767: u8 [a0 + 22] = 0\n 37770: u8 [a0 + 21] = 0\n 37773: u8 [a0 + 20] = 0\n 37776: u8 [a0 + 19] = 0\n 37779: u8 [a0 + 18] = 0\n 37782: u8 [a0 + 17] = 0\n 37785: u8 [a0 + 16] = 0\n 37788: u8 [a0 + 15] = 0\n 37791: u8 [a0 + 14] = 0\n 37794: u8 [a0 + 13] = 0\n 37797: u8 [a0 + 12] = 0\n 37800: u8 [a0 + 11] = 0\n 37803: u8 [a0 + 10] = 0\n 37806: u8 [a0 + 9] = 0\n 37809: u8 [a0 + 8] = 0\n 37812: u8 [a0 + 7] = 0\n 37815: u8 [a0 + 6] = 0\n 37818: u8 [a0 + 5] = 0\n 37821: u8 [a0 + 3] = 0x42\n 37825: u8 [a0 + 2] = 0x24\n 37829: u8 [a0 + 1] = 0x35\n 37833: u8 [a0 + 0] = 0x65\n 37836: a3 = u64 [sp + 0xa0]\n 37840: a3 = a3 | s1\n 37843: a1 = 0x100000000\n 37853: u64 [sp + 0x50] = a1\n 37856: a1 = 0xfffffffc\n 37866: a2 = u64 [sp + 0xb8]\n 37870: a1 = a2 <u a1\n 37873: a2 = u64 [sp + 0xb0]\n 37877: a1 = 0 if a2 != 0\n 37879: u64 [sp + 0xa0] = a3\n 37883: a1 = 0 if a3 != 0\n 37885: u8 [a0 + 4] = 0\n 37888: jump @572 if a1 == 0\n      : @537 (gas: 13)\n 37892: a0 = 0xffffffff\n 37902: s1 = u64 [sp + 0x70]\n 37905: s1 = s1 & a0\n 37908: a0 = u64 [sp + 0x78]\n 37911: a0 = a0 & 0xffffffffffffffff\n 37914: u64 [sp + 0x78] = a0\n 37917: a0 = u64 [sp + 0x80]\n 37921: a0 = a0 & 0xffffffffffffffff\n 37924: u64 [sp + 0x80] = a0\n 37928: a0 = u64 [sp + 0xa8]\n 37932: i32 a0 = a0 + 0x4\n 37935: a1 = 0x20\n 37938: ra = 458, jump @0\n      : @538 [@dyn 229] (gas: 64)\n 37945: a1 = reverse s1\n 37947: a2 = u64 [sp + 0x78]\n 37950: a2 = reverse a2\n 37952: a3 = u64 [sp + 0x80]\n 37956: a3 = reverse a3\n 37958: a4 = a3 >> 0x38\n 37961: u8 [a0 + 0x1f] = a4\n 37964: a4 = a3 >> 0x30\n 37967: u8 [a0 + 0x1e] = a4\n 37970: a4 = a3 >> 0x28\n 37973: u8 [a0 + 0x1d] = a4\n 37976: a4 = a3 >> 0x20\n 37979: u8 [a0 + 0x1c] = a4\n 37982: a4 = a3 >> 0x18\n 37985: u8 [a0 + 0x1b] = a4\n 37988: a4 = a3 >> 0x10\n 37991: u8 [a0 + 0x1a] = a4\n 37994: a4 = a3 >> 0x8\n 37997: u8 [a0 + 0x19] = a4\n 38000: u8 [a0 + 0x18] = a3\n 38003: u8 [a0 + 0x10] = a2\n 38006: u8 [a0 + 11] = 0\n 38009: u8 [a0 + 10] = 0\n 38012: u8 [a0 + 9] = 0\n 38015: u8 [a0 + 7] = 0\n 38018: u8 [a0 + 6] = 0\n 38021: u8 [a0 + 5] = 0\n 38024: u8 [a0 + 4] = 0\n 38027: u8 [a0 + 3] = 0\n 38030: u8 [a0 + 2] = 0\n 38033: u8 [a0 + 1] = 0\n 38036: u8 [a0 + 0] = 0\n 38038: a3 = a2 >> 0x38\n 38041: u8 [a0 + 0x17] = a3\n 38044: a3 = a2 >> 0x30\n 38047: u8 [a0 + 0x16] = a3\n 38050: a3 = a2 >> 0x28\n 38053: u8 [a0 + 0x15] = a3\n 38056: a3 = a2 >> 0x20\n 38059: u8 [a0 + 0x14] = a3\n 38062: a3 = a2 >> 0x18\n 38065: u8 [a0 + 0x13] = a3\n 38068: a3 = a2 >> 0x10\n 38071: u8 [a0 + 0x12] = a3\n 38074: a2 = a2 >> 0x8\n 38077: u8 [a0 + 0x11] = a2\n 38080: u8 [a0 + 0x8] = a1\n 38083: a2 = a1 >> 0x38\n 38086: u8 [a0 + 0xf] = a2\n 38089: a2 = a1 >> 0x30\n 38092: u8 [a0 + 0xe] = a2\n 38095: a2 = a1 >> 0x28\n 38098: u8 [a0 + 0xd] = a2\n 38101: a1 = a1 >> 0x20\n 38104: a2 = u64 [sp + 0x50]\n 38107: a2 = a2 + 0xffffffffffffffdc\n 38110: a3 = u64 [sp + 0xb8]\n 38114: a2 = a3 <u a2\n 38117: a3 = u64 [sp + 0xb0]\n 38121: a2 = 0 if a3 != 0\n 38123: a3 = u64 [sp + 0xa0]\n 38127: a2 = 0 if a3 != 0\n 38129: u8 [a0 + 0xc] = a1\n 38132: jump @572 if a2 == 0\n      : @539 (gas: 19)\n 38136: a0 = u64 [sp + 0x58]\n 38139: a0 = reverse a0\n 38141: a1 = a0 >> 0x20\n 38144: a2 = u64 [sp + 0x60]\n 38147: a2 = reverse a2\n 38149: a3 = a2 << 0x20\n 38152: a1 = a1 | a3\n 38155: u64 [sp + 0x80] = a1\n 38159: a0 = a0 << 0x20\n 38162: a1 = u64 [sp + 0x68]\n 38165: a1 = reverse a1\n 38167: a1 = a1 >> 0x20\n 38170: a0 = a0 | a1\n 38173: u64 [sp + 0x78] = a0\n 38176: s1 = a2 >> 0x20\n 38179: a0 = u64 [sp + 0xa8]\n 38183: i32 a0 = a0 + 0x24\n 38186: a1 = 0x20\n 38189: ra = 460, jump @0\n      : @540 [@dyn 230] (gas: 64)\n 38196: a1 = reverse s1\n 38198: a2 = u64 [sp + 0x80]\n 38202: a2 = reverse a2\n 38204: a3 = u64 [sp + 0x78]\n 38207: a3 = reverse a3\n 38209: a4 = a3 >> 0x38\n 38212: u8 [a0 + 0x1f] = a4\n 38215: a4 = a3 >> 0x30\n 38218: u8 [a0 + 0x1e] = a4\n 38221: a4 = a3 >> 0x28\n 38224: u8 [a0 + 0x1d] = a4\n 38227: a4 = a3 >> 0x20\n 38230: u8 [a0 + 0x1c] = a4\n 38233: a4 = a3 >> 0x18\n 38236: u8 [a0 + 0x1b] = a4\n 38239: a4 = a3 >> 0x10\n 38242: u8 [a0 + 0x1a] = a4\n 38245: a4 = a3 >> 0x8\n 38248: u8 [a0 + 0x19] = a4\n 38251: u8 [a0 + 0x18] = a3\n 38254: u8 [a0 + 0x10] = a2\n 38257: u8 [a0 + 11] = 0\n 38260: u8 [a0 + 10] = 0\n 38263: u8 [a0 + 9] = 0\n 38266: u8 [a0 + 7] = 0\n 38269: u8 [a0 + 6] = 0\n 38272: u8 [a0 + 5] = 0\n 38275: u8 [a0 + 4] = 0\n 38278: u8 [a0 + 3] = 0\n 38281: u8 [a0 + 2] = 0\n 38284: u8 [a0 + 1] = 0\n 38287: u8 [a0 + 0] = 0\n 38289: a3 = a2 >> 0x38\n 38292: u8 [a0 + 0x17] = a3\n 38295: a3 = a2 >> 0x30\n 38298: u8 [a0 + 0x16] = a3\n 38301: a3 = a2 >> 0x28\n 38304: u8 [a0 + 0x15] = a3\n 38307: a3 = a2 >> 0x20\n 38310: u8 [a0 + 0x14] = a3\n 38313: a3 = a2 >> 0x18\n 38316: u8 [a0 + 0x13] = a3\n 38319: a3 = a2 >> 0x10\n 38322: u8 [a0 + 0x12] = a3\n 38325: a2 = a2 >> 0x8\n 38328: u8 [a0 + 0x11] = a2\n 38331: u8 [a0 + 0x8] = a1\n 38334: a2 = a1 >> 0x38\n 38337: u8 [a0 + 0xf] = a2\n 38340: a2 = a1 >> 0x30\n 38343: u8 [a0 + 0xe] = a2\n 38346: a2 = a1 >> 0x28\n 38349: u8 [a0 + 0xd] = a2\n 38352: a1 = a1 >> 0x20\n 38355: s1 = 0x100000000\n 38365: a2 = 0xffffffbc\n 38375: a3 = u64 [sp + 0xb8]\n 38379: a2 = a3 <u a2\n 38382: a3 = u64 [sp + 0xb0]\n 38386: a2 = 0 if a3 != 0\n 38388: a3 = u64 [sp + 0xa0]\n 38392: a2 = 0 if a3 != 0\n 38394: u8 [a0 + 0xc] = a1\n 38397: jump @572 if a2 == 0\n      : @541 (gas: 4)\n 38401: a0 = u64 [sp + 0xa8]\n 38405: i32 a0 = a0 + 0x44\n 38408: a1 = 0x20\n 38411: ra = 462, jump @0\n      : @542 [@dyn 231] (gas: 54)\n 38418: a1 = u64 [sp + 0x40]\n 38421: a1 = a1 >> 0x28\n 38424: a2 = u64 [sp + 0x48]\n 38427: a2 = a2 << 0x18\n 38430: a1 = a1 | a2\n 38433: a2 = u64 [sp + 0x90]\n 38437: a1 = a1 & a2\n 38440: u8 [a0 + 23] = 0\n 38443: u8 [a0 + 22] = 0\n 38446: u8 [a0 + 21] = 0\n 38449: u8 [a0 + 20] = 0\n 38452: u8 [a0 + 19] = 0\n 38455: u8 [a0 + 18] = 0\n 38458: u8 [a0 + 17] = 0\n 38461: u8 [a0 + 16] = 0\n 38464: u8 [a0 + 15] = 0\n 38467: u8 [a0 + 14] = 0\n 38470: u8 [a0 + 13] = 0\n 38473: u8 [a0 + 12] = 0\n 38476: u8 [a0 + 11] = 0\n 38479: u8 [a0 + 10] = 0\n 38482: u8 [a0 + 9] = 0\n 38485: u8 [a0 + 8] = 0\n 38488: u8 [a0 + 7] = 0\n 38491: u8 [a0 + 6] = 0\n 38494: u8 [a0 + 5] = 0\n 38497: u8 [a0 + 4] = 0\n 38500: u8 [a0 + 3] = 0\n 38503: u8 [a0 + 2] = 0\n 38506: u8 [a0 + 1] = 0\n 38509: u8 [a0 + 0] = 0\n 38511: u8 [a0 + 0x18] = a1\n 38514: a2 = a1 >> 0x38\n 38517: u8 [a0 + 0x1f] = a2\n 38520: a2 = a1 >> 0x30\n 38523: u8 [a0 + 0x1e] = a2\n 38526: a2 = a1 >> 0x28\n 38529: u8 [a0 + 0x1d] = a2\n 38532: a2 = a1 >> 0x20\n 38535: u8 [a0 + 0x1c] = a2\n 38538: a2 = a1 >> 0x18\n 38541: u8 [a0 + 0x1b] = a2\n 38544: a2 = a1 >> 0x10\n 38547: u8 [a0 + 0x1a] = a2\n 38550: a1 = a1 >> 0x8\n 38553: a2 = s1 + 0xffffffffffffff9c\n 38556: a3 = u64 [sp + 0xb8]\n 38560: a2 = a3 <u a2\n 38563: a3 = u64 [sp + 0xb0]\n 38567: a2 = 0 if a3 != 0\n 38569: a3 = u64 [sp + 0xa0]\n 38573: a2 = 0 if a3 != 0\n 38575: u8 [a0 + 0x19] = a1\n 38578: jump @572 if a2 == 0\n      : @543 (gas: 4)\n 38582: s1 = u64 [sp + 0xa8]\n 38586: i32 a0 = s1 + 0x64\n 38589: a1 = 0x20\n 38592: ra = 464, jump @0\n      : @544 [@dyn 232] (gas: 46)\n 38599: u8 [a0 + 31] = 0x1\n 38603: u8 [a0 + 30] = 0\n 38606: u8 [a0 + 29] = 0\n 38609: u8 [a0 + 28] = 0\n 38612: u8 [a0 + 27] = 0\n 38615: u8 [a0 + 26] = 0\n 38618: u8 [a0 + 25] = 0\n 38621: u8 [a0 + 24] = 0\n 38624: u8 [a0 + 23] = 0\n 38627: u8 [a0 + 22] = 0\n 38630: u8 [a0 + 21] = 0\n 38633: u8 [a0 + 20] = 0\n 38636: u8 [a0 + 19] = 0\n 38639: u8 [a0 + 18] = 0\n 38642: u8 [a0 + 17] = 0\n 38645: u8 [a0 + 16] = 0\n 38648: u8 [a0 + 15] = 0\n 38651: u8 [a0 + 14] = 0\n 38654: u8 [a0 + 13] = 0\n 38657: u8 [a0 + 12] = 0\n 38660: u8 [a0 + 11] = 0\n 38663: u8 [a0 + 10] = 0\n 38666: u8 [a0 + 9] = 0\n 38669: u8 [a0 + 8] = 0\n 38672: u8 [a0 + 7] = 0\n 38675: u8 [a0 + 6] = 0\n 38678: u8 [a0 + 5] = 0\n 38681: u8 [a0 + 4] = 0\n 38684: u8 [a0 + 3] = 0\n 38687: u8 [a0 + 2] = 0\n 38690: u8 [a0 + 1] = 0\n 38693: u8 [a0 + 0] = 0\n 38695: ecalli 9 // 'ref_time_left'\n 38697: a0 = u64 [sp + 0x28]\n 38700: u64 [sp + 0x468] = a0\n 38704: a0 = u64 [sp + 0x38]\n 38707: u64 [sp + 0x460] = a0\n 38711: a0 = u64 [sp + 0x30]\n 38714: u32 [sp + 0x470] = a0\n 38718: u64 [sp + 1176] = 0\n 38722: u64 [sp + 1168] = 0\n 38726: u64 [sp + 1160] = 0\n 38730: u64 [sp + 1152] = 0\n 38734: a1 = 0x84\n 38738: a0 = s1\n 38740: ra = 466, jump @0\n      : @545 [@dyn 233] (gas: 4)\n 38747: u64 [sp + 0xb8] = a0\n 38751: a0 = s1\n 38753: a1 = 0\n 38755: ra = 468, jump @0\n      : @546 [@dyn 234] (gas: 31)\n 38762: u32 [sp + 1184] = 0\n 38766: u64 [sp + 1240] = 0xffffffffffffffff\n 38771: u64 [sp + 1232] = 0xffffffffffffffff\n 38776: u64 [sp + 1224] = 0xffffffffffffffff\n 38781: u64 [sp + 1216] = 0xffffffffffffffff\n 38786: a1 = sp + 0x460\n 38790: a1 = a1 << 0x20\n 38793: a1 = a1 >> 0x20\n 38796: s1 = u64 [sp + 0x88]\n 38800: s1 = s1 | a1\n 38803: a1 = sp + 0x480\n 38807: a1 = a1 << 0x20\n 38810: a1 = a1 >> 0x20\n 38813: a2 = sp + 0x4c0\n 38817: a2 = a2 << 0x20\n 38820: a3 = a2 | a1\n 38823: a1 = u64 [sp + 0xb8]\n 38827: a1 = a1 << 0x20\n 38830: a1 = a1 >> 0x20\n 38833: a4 = u64 [sp + 0x98]\n 38837: a4 = a4 | a1\n 38840: a0 = a0 << 0x20\n 38843: a0 = a0 >> 0x20\n 38846: a1 = sp + 0x4a0\n 38850: a1 = a1 << 0x20\n 38853: a5 = a1 | a0\n 38856: a1 = 0xffffffffffffffff\n 38859: a2 = 0xffffffffffffffff\n 38862: a0 = s1\n 38864: ecalli 1 // 'call'\n 38866: fallthrough\n      : @547 (gas: 1)\n 38867: jump @550 if a0 != 0\n      : @548 (gas: 4)\n 38871: ecalli 11 // 'return_data_size'\n 38873: a0 = 0x40\n 38876: a1 = 0x20\n 38879: ra = 470, jump @0\n      : @549 [@dyn 235] (gas: 112)\n 38886: a3 = u64 [sp + 0x10]\n 38889: u8 [a0 + 0x18] = a3\n 38892: a2 = u64 [sp + 0x18]\n 38895: a1 = a2 >> 0x38\n 38898: u8 [a0 + 0x17] = a1\n 38901: a1 = a2 >> 0x30\n 38904: u8 [a0 + 0x16] = a1\n 38907: a1 = a2 >> 0x28\n 38910: u8 [a0 + 0x15] = a1\n 38913: a1 = a2 >> 0x20\n 38916: u8 [a0 + 0x14] = a1\n 38919: a1 = a2 >> 0x18\n 38922: u8 [a0 + 0x13] = a1\n 38925: a1 = a2 >> 0x10\n 38928: u8 [a0 + 0x12] = a1\n 38931: a1 = a2 >> 0x8\n 38934: u8 [a0 + 0x11] = a1\n 38937: u8 [a0 + 0x10] = a2\n 38940: a2 = u64 [sp + 0x8]\n 38943: a1 = a2 >> 0x38\n 38946: u8 [a0 + 0xf] = a1\n 38949: a1 = a2 >> 0x30\n 38952: u8 [a0 + 0xe] = a1\n 38955: a1 = a2 >> 0x28\n 38958: u8 [a0 + 0xd] = a1\n 38961: a1 = a2 >> 0x20\n 38964: u8 [a0 + 0xc] = a1\n 38967: a1 = a2 >> 0x18\n 38970: u8 [a0 + 0xb] = a1\n 38973: a1 = a2 >> 0x10\n 38976: u8 [a0 + 0xa] = a1\n 38979: a1 = a2 >> 0x8\n 38982: u8 [a0 + 0x9] = a1\n 38985: u8 [a0 + 0x8] = a2\n 38988: a2 = u64 [sp + 0x20]\n 38991: a1 = a2 >> 0x38\n 38994: u8 [a0 + 0x7] = a1\n 38997: a1 = a2 >> 0x30\n 39000: u8 [a0 + 0x6] = a1\n 39003: a1 = a2 >> 0x28\n 39006: u8 [a0 + 0x5] = a1\n 39009: a1 = a2 >> 0x20\n 39012: u8 [a0 + 0x4] = a1\n 39015: a1 = a2 >> 0x18\n 39018: u8 [a0 + 0x3] = a1\n 39021: a1 = a2 >> 0x10\n 39024: u8 [a0 + 0x2] = a1\n 39027: a1 = a2 >> 0x8\n 39030: u8 [a0 + 0x1] = a1\n 39033: u8 [a0] = a2\n 39035: a1 = a3 >> 0x38\n 39038: u8 [a0 + 0x1f] = a1\n 39041: a1 = a3 >> 0x30\n 39044: u8 [a0 + 0x1e] = a1\n 39047: a1 = a3 >> 0x28\n 39050: u8 [a0 + 0x1d] = a1\n 39053: a1 = a3 >> 0x20\n 39056: u8 [a0 + 0x1c] = a1\n 39059: a1 = a3 >> 0x18\n 39062: u8 [a0 + 0x1b] = a1\n 39065: a1 = a3 >> 0x10\n 39068: u8 [a0 + 0x1a] = a1\n 39071: a1 = a3 >> 0x8\n 39074: u8 [a0 + 0x19] = a1\n 39077: a0 = u64 [sp + 0xc8]\n 39081: u64 [sp + 0x518] = a0\n 39085: a0 = u64 [sp + 0xd0]\n 39089: u64 [sp + 0x510] = a0\n 39093: a0 = u64 [sp + 0xd8]\n 39097: u64 [sp + 0x508] = a0\n 39101: s1 = u64 [sp + 0xc0]\n 39105: u64 [sp + 0x500] = s1\n 39109: u64 [sp + 1336] = 0\n 39113: u64 [sp + 1328] = 0\n 39117: u64 [sp + 1320] = 0\n 39121: u64 [sp + 1312] = 0\n 39125: u32 [sp + 1248] = 0x20\n 39130: i32 a1 = sp + 0x500\n 39134: i32 a3 = sp + 0x520\n 39138: i32 a4 = sp + 0x4e0\n 39142: a2 = 0xffffffffffffffff\n 39145: a0 = 0\n 39147: ecalli 7 // 'get_storage'\n 39149: a0 = u64 [sp + 0x520]\n 39153: a1 = u64 [sp + 0x528]\n 39157: a2 = u64 [sp + 0x530]\n 39161: a3 = u64 [sp + 0x538]\n 39165: a4 = 0xff00ffffffffffff\n 39175: a2 = a2 & a4\n 39178: a4 = u64 [sp + 0xc8]\n 39182: u64 [sp + 0x518] = a4\n 39186: a4 = u64 [sp + 0xd0]\n 39190: u64 [sp + 0x510] = a4\n 39194: a4 = u64 [sp + 0xd8]\n 39198: u64 [sp + 0x508] = a4\n 39202: u64 [sp + 0x500] = s1\n 39206: u64 [sp + 0x538] = a3\n 39210: u64 [sp + 0x530] = a2\n 39214: u64 [sp + 0x528] = a1\n 39218: u64 [sp + 0x520] = a0\n 39222: i32 a1 = sp + 0x500\n 39226: i32 a3 = sp + 0x520\n 39230: a2 = 0xffffffffffffffff\n 39233: a4 = 0x20\n 39236: a0 = 0\n 39238: ecalli 14 // 'set_storage'\n 39240: sp = s0 + 0xfffffffffffffaa0\n 39244: ra = u64 [sp + 0x558]\n 39248: s0 = u64 [sp + 0x550]\n 39252: s1 = u64 [sp + 0x548]\n 39256: sp = sp + 0x560\n 39260: ret\n      : @550 (gas: 1)\n 39262: ra = 472, jump @273\n      : @551 [@dyn 236] (gas: 3)\n 39268: a0 = 0x40\n 39271: a1 = 0x20\n 39274: ra = 474, jump @0\n      : @552 [@dyn 237] (gas: 103)\n 39281: a1 = u8 [a0 + 0x11]\n 39284: a2 = u8 [a0 + 0x10]\n 39287: a3 = u8 [a0 + 0x12]\n 39290: a4 = u8 [a0 + 0x13]\n 39293: a1 = a1 << 0x8\n 39296: a1 = a1 | a2\n 39299: a3 = a3 << 0x10\n 39302: a4 = a4 << 0x18\n 39305: a3 = a3 | a4\n 39308: a1 = a1 | a3\n 39311: a2 = u8 [a0 + 0x15]\n 39314: a3 = u8 [a0 + 0x14]\n 39317: a4 = u8 [a0 + 0x16]\n 39320: a5 = u8 [a0 + 0x17]\n 39323: a2 = a2 << 0x8\n 39326: a2 = a2 | a3\n 39329: a4 = a4 << 0x10\n 39332: a5 = a5 << 0x18\n 39335: a4 = a4 | a5\n 39338: a2 = a2 | a4\n 39341: a2 = a2 << 0x20\n 39344: t0 = a2 | a1\n 39347: a2 = u8 [a0 + 0x1]\n 39350: a3 = u8 [a0]\n 39352: a4 = u8 [a0 + 0x2]\n 39355: a5 = u8 [a0 + 0x3]\n 39358: a2 = a2 << 0x8\n 39361: a2 = a2 | a3\n 39364: a4 = a4 << 0x10\n 39367: a5 = a5 << 0x18\n 39370: a4 = a4 | a5\n 39373: a2 = a2 | a4\n 39376: a3 = u8 [a0 + 0x5]\n 39379: a4 = u8 [a0 + 0x4]\n 39382: a5 = u8 [a0 + 0x6]\n 39385: s1 = u8 [a0 + 0x7]\n 39388: a3 = a3 << 0x8\n 39391: a3 = a3 | a4\n 39394: a5 = a5 << 0x10\n 39397: s1 = s1 << 0x18\n 39400: a5 = a5 | s1\n 39403: a3 = a3 | a5\n 39406: a3 = a3 << 0x20\n 39409: a2 = a2 | a3\n 39412: a3 = u8 [a0 + 0x19]\n 39415: a4 = u8 [a0 + 0x18]\n 39418: a5 = u8 [a0 + 0x1a]\n 39421: s1 = u8 [a0 + 0x1b]\n 39424: a3 = a3 << 0x8\n 39427: a3 = a3 | a4\n 39430: a5 = a5 << 0x10\n 39433: s1 = s1 << 0x18\n 39436: a5 = a5 | s1\n 39439: a3 = a3 | a5\n 39442: a4 = u8 [a0 + 0x1d]\n 39445: a5 = u8 [a0 + 0x1c]\n 39448: s1 = u8 [a0 + 0x1e]\n 39451: a1 = u8 [a0 + 0x1f]\n 39454: a4 = a4 << 0x8\n 39457: a4 = a4 | a5\n 39460: s1 = s1 << 0x10\n 39463: a1 = a1 << 0x18\n 39466: a1 = a1 | s1\n 39469: a1 = a1 | a4\n 39472: a1 = a1 << 0x20\n 39475: a3 = a3 | a1\n 39478: a1 = u8 [a0 + 0x9]\n 39481: a4 = u8 [a0 + 0x8]\n 39484: a5 = u8 [a0 + 0xa]\n 39487: s1 = u8 [a0 + 0xb]\n 39490: a1 = a1 << 0x8\n 39493: a1 = a1 | a4\n 39496: a5 = a5 << 0x10\n 39499: s1 = s1 << 0x18\n 39502: a5 = a5 | s1\n 39505: a1 = a1 | a5\n 39508: a4 = u8 [a0 + 0xd]\n 39511: a5 = u8 [a0 + 0xc]\n 39514: s1 = u8 [a0 + 0xe]\n 39517: a0 = u8 [a0 + 0xf]\n 39520: a4 = a4 << 0x8\n 39523: a4 = a4 | a5\n 39526: s1 = s1 << 0x10\n 39529: a0 = a0 << 0x18\n 39532: a0 = a0 | s1\n 39535: a0 = a0 | a4\n 39538: a0 = a0 << 0x20\n 39541: a0 = a0 | a1\n 39544: s1 = reverse a0\n 39546: a1 = reverse a3\n 39548: a2 = reverse a2\n 39550: a0 = reverse t0\n 39552: u64 [sp + 0xd8] = a0\n 39556: u64 [sp + 0xd0] = a2\n 39560: a0 = a0 | a2\n 39563: a2 = a1\n 39565: a1 = a1 | s1\n 39568: a1 = a1 | a0\n 39571: a1 = a1 >> 0x20\n 39574: a0 = a0 | s1\n 39577: a0 = a0 << 0x20\n 39580: a0 = a0 | a1\n 39583: jump @572 if a0 != 0\n      : @553 (gas: 5)\n 39587: u64 [sp + 0xc8] = a2\n 39591: i32 a0 = a2 + 0\n 39593: a1 = 0x20\n 39596: u64 [sp + 0xc0] = a0\n 39600: ra = 476, jump @0\n      : @554 [@dyn 238] (gas: 50)\n 39607: u8 [a0 + 31] = 0\n 39610: u8 [a0 + 30] = 0\n 39613: u8 [a0 + 29] = 0\n 39616: u8 [a0 + 28] = 0\n 39619: u8 [a0 + 27] = 0\n 39622: u8 [a0 + 26] = 0\n 39625: u8 [a0 + 25] = 0\n 39628: u8 [a0 + 24] = 0\n 39631: u8 [a0 + 23] = 0\n 39634: u8 [a0 + 22] = 0\n 39637: u8 [a0 + 21] = 0\n 39640: u8 [a0 + 20] = 0\n 39643: u8 [a0 + 19] = 0\n 39646: u8 [a0 + 18] = 0\n 39649: u8 [a0 + 17] = 0\n 39652: u8 [a0 + 16] = 0\n 39655: u8 [a0 + 15] = 0\n 39658: u8 [a0 + 14] = 0\n 39661: u8 [a0 + 13] = 0\n 39664: u8 [a0 + 12] = 0\n 39667: u8 [a0 + 11] = 0\n 39670: u8 [a0 + 10] = 0\n 39673: u8 [a0 + 9] = 0\n 39676: u8 [a0 + 8] = 0\n 39679: u8 [a0 + 7] = 0\n 39682: u8 [a0 + 6] = 0\n 39685: u8 [a0 + 5] = 0\n 39688: u8 [a0 + 4] = 0\n 39691: u8 [a0 + 3] = 0xa0\n 39696: u8 [a0 + 2] = 0x79\n 39700: u8 [a0 + 1] = 0xc3\n 39705: u8 [a0 + 0] = 0x8\n 39708: a1 = u64 [sp + 0xc8]\n 39712: a0 = a1 + 0x4\n 39715: a1 = a0 <u a1\n 39718: a3 = u64 [sp + 0xd8]\n 39722: a2 = a3 + a1\n 39725: a3 = a2 <u a3\n 39728: a3 = a1 if a1 == 0\n 39731: a3 = a3 + s1\n 39734: a1 = a3 <u s1\n 39737: a4 = u64 [sp + 0xd0]\n 39741: a4 = a4 + a1\n 39744: u64 [sp + 0x268] = a2\n 39748: u64 [sp + 0x260] = a0\n 39752: u64 [sp + 0x270] = a3\n 39756: a0 = sp + 0x280\n 39760: a1 = sp + 0x260\n 39764: u64 [sp + 0x278] = a4\n 39768: ra = 478, jump @265\n      : @555 [@dyn 239] (gas: 5)\n 39774: a0 = u64 [sp + 0x288]\n 39778: t0 = u64 [sp + 0x298]\n 39782: t1 = u64 [sp + 0x280]\n 39786: a3 = u64 [sp + 0x290]\n 39790: jump @571\n      : @556 (gas: 3)\n 39793: a0 = 0x40\n 39796: a1 = 0x20\n 39799: ra = 480, jump @0\n      : @557 [@dyn 240] (gas: 103)\n 39806: a1 = u8 [a0 + 0x11]\n 39809: a2 = u8 [a0 + 0x10]\n 39812: a3 = u8 [a0 + 0x12]\n 39815: a4 = u8 [a0 + 0x13]\n 39818: a1 = a1 << 0x8\n 39821: a1 = a1 | a2\n 39824: a3 = a3 << 0x10\n 39827: a4 = a4 << 0x18\n 39830: a3 = a3 | a4\n 39833: a1 = a1 | a3\n 39836: a2 = u8 [a0 + 0x15]\n 39839: a3 = u8 [a0 + 0x14]\n 39842: a4 = u8 [a0 + 0x16]\n 39845: a5 = u8 [a0 + 0x17]\n 39848: a2 = a2 << 0x8\n 39851: a2 = a2 | a3\n 39854: a4 = a4 << 0x10\n 39857: a5 = a5 << 0x18\n 39860: a4 = a4 | a5\n 39863: a2 = a2 | a4\n 39866: a2 = a2 << 0x20\n 39869: t0 = a2 | a1\n 39872: a2 = u8 [a0 + 0x1]\n 39875: a3 = u8 [a0]\n 39877: a4 = u8 [a0 + 0x2]\n 39880: a5 = u8 [a0 + 0x3]\n 39883: a2 = a2 << 0x8\n 39886: a2 = a2 | a3\n 39889: a4 = a4 << 0x10\n 39892: a5 = a5 << 0x18\n 39895: a4 = a4 | a5\n 39898: a2 = a2 | a4\n 39901: a3 = u8 [a0 + 0x5]\n 39904: a4 = u8 [a0 + 0x4]\n 39907: a5 = u8 [a0 + 0x6]\n 39910: s1 = u8 [a0 + 0x7]\n 39913: a3 = a3 << 0x8\n 39916: a3 = a3 | a4\n 39919: a5 = a5 << 0x10\n 39922: s1 = s1 << 0x18\n 39925: a5 = a5 | s1\n 39928: a3 = a3 | a5\n 39931: a3 = a3 << 0x20\n 39934: a2 = a2 | a3\n 39937: a3 = u8 [a0 + 0x19]\n 39940: a4 = u8 [a0 + 0x18]\n 39943: a5 = u8 [a0 + 0x1a]\n 39946: s1 = u8 [a0 + 0x1b]\n 39949: a3 = a3 << 0x8\n 39952: a3 = a3 | a4\n 39955: a5 = a5 << 0x10\n 39958: s1 = s1 << 0x18\n 39961: a5 = a5 | s1\n 39964: a3 = a3 | a5\n 39967: a4 = u8 [a0 + 0x1d]\n 39970: a5 = u8 [a0 + 0x1c]\n 39973: s1 = u8 [a0 + 0x1e]\n 39976: a1 = u8 [a0 + 0x1f]\n 39979: a4 = a4 << 0x8\n 39982: a4 = a4 | a5\n 39985: s1 = s1 << 0x10\n 39988: a1 = a1 << 0x18\n 39991: a1 = a1 | s1\n 39994: a1 = a1 | a4\n 39997: a1 = a1 << 0x20\n 40000: a3 = a3 | a1\n 40003: a1 = u8 [a0 + 0x9]\n 40006: a4 = u8 [a0 + 0x8]\n 40009: a5 = u8 [a0 + 0xa]\n 40012: s1 = u8 [a0 + 0xb]\n 40015: a1 = a1 << 0x8\n 40018: a1 = a1 | a4\n 40021: a5 = a5 << 0x10\n 40024: s1 = s1 << 0x18\n 40027: a5 = a5 | s1\n 40030: a1 = a1 | a5\n 40033: a4 = u8 [a0 + 0xd]\n 40036: a5 = u8 [a0 + 0xc]\n 40039: s1 = u8 [a0 + 0xe]\n 40042: a0 = u8 [a0 + 0xf]\n 40045: a4 = a4 << 0x8\n 40048: a4 = a4 | a5\n 40051: s1 = s1 << 0x10\n 40054: a0 = a0 << 0x18\n 40057: a0 = a0 | s1\n 40060: a0 = a0 | a4\n 40063: a0 = a0 << 0x20\n 40066: a0 = a0 | a1\n 40069: s1 = reverse a0\n 40071: a1 = reverse a3\n 40073: a2 = reverse a2\n 40075: a0 = reverse t0\n 40077: u64 [sp + 0xd8] = a0\n 40081: u64 [sp + 0xd0] = a2\n 40085: a0 = a0 | a2\n 40088: a2 = a1\n 40090: a1 = a1 | s1\n 40093: a1 = a1 | a0\n 40096: a1 = a1 >> 0x20\n 40099: a0 = a0 | s1\n 40102: a0 = a0 << 0x20\n 40105: a0 = a0 | a1\n 40108: jump @572 if a0 != 0\n      : @558 (gas: 5)\n 40112: u64 [sp + 0xc8] = a2\n 40116: i32 a0 = a2 + 0\n 40118: a1 = 0x20\n 40121: u64 [sp + 0xc0] = a0\n 40125: ra = 482, jump @0\n      : @559 [@dyn 241] (gas: 50)\n 40132: u8 [a0 + 31] = 0\n 40135: u8 [a0 + 30] = 0\n 40138: u8 [a0 + 29] = 0\n 40141: u8 [a0 + 28] = 0\n 40144: u8 [a0 + 27] = 0\n 40147: u8 [a0 + 26] = 0\n 40150: u8 [a0 + 25] = 0\n 40153: u8 [a0 + 24] = 0\n 40156: u8 [a0 + 23] = 0\n 40159: u8 [a0 + 22] = 0\n 40162: u8 [a0 + 21] = 0\n 40165: u8 [a0 + 20] = 0\n 40168: u8 [a0 + 19] = 0\n 40171: u8 [a0 + 18] = 0\n 40174: u8 [a0 + 17] = 0\n 40177: u8 [a0 + 16] = 0\n 40180: u8 [a0 + 15] = 0\n 40183: u8 [a0 + 14] = 0\n 40186: u8 [a0 + 13] = 0\n 40189: u8 [a0 + 12] = 0\n 40192: u8 [a0 + 11] = 0\n 40195: u8 [a0 + 10] = 0\n 40198: u8 [a0 + 9] = 0\n 40201: u8 [a0 + 8] = 0\n 40204: u8 [a0 + 7] = 0\n 40207: u8 [a0 + 6] = 0\n 40210: u8 [a0 + 5] = 0\n 40213: u8 [a0 + 4] = 0\n 40216: u8 [a0 + 3] = 0xa0\n 40221: u8 [a0 + 2] = 0x79\n 40225: u8 [a0 + 1] = 0xc3\n 40230: u8 [a0 + 0] = 0x8\n 40233: a1 = u64 [sp + 0xc8]\n 40237: a0 = a1 + 0x4\n 40240: a1 = a0 <u a1\n 40243: a3 = u64 [sp + 0xd8]\n 40247: a2 = a3 + a1\n 40250: a3 = a2 <u a3\n 40253: a3 = a1 if a1 == 0\n 40256: a3 = a3 + s1\n 40259: a1 = a3 <u s1\n 40262: a4 = u64 [sp + 0xd0]\n 40266: a4 = a4 + a1\n 40269: u64 [sp + 0xe8] = a2\n 40273: u64 [sp + 0xe0] = a0\n 40277: u64 [sp + 0xf0] = a3\n 40281: a0 = sp + 0x100\n 40285: a1 = sp + 0xe0\n 40289: u64 [sp + 0xf8] = a4\n 40293: ra = 484, jump @378\n      : @560 [@dyn 242] (gas: 5)\n 40299: a0 = u64 [sp + 0x108]\n 40303: t0 = u64 [sp + 0x118]\n 40307: t1 = u64 [sp + 0x100]\n 40311: a3 = u64 [sp + 0x110]\n 40315: jump @571\n      : @561 (gas: 3)\n 40318: a0 = 0x40\n 40321: a1 = 0x20\n 40324: ra = 486, jump @0\n      : @562 [@dyn 243] (gas: 103)\n 40331: a1 = u8 [a0 + 0x11]\n 40334: a2 = u8 [a0 + 0x10]\n 40337: a3 = u8 [a0 + 0x12]\n 40340: a4 = u8 [a0 + 0x13]\n 40343: a1 = a1 << 0x8\n 40346: a1 = a1 | a2\n 40349: a3 = a3 << 0x10\n 40352: a4 = a4 << 0x18\n 40355: a3 = a3 | a4\n 40358: a1 = a1 | a3\n 40361: a2 = u8 [a0 + 0x15]\n 40364: a3 = u8 [a0 + 0x14]\n 40367: a4 = u8 [a0 + 0x16]\n 40370: a5 = u8 [a0 + 0x17]\n 40373: a2 = a2 << 0x8\n 40376: a2 = a2 | a3\n 40379: a4 = a4 << 0x10\n 40382: a5 = a5 << 0x18\n 40385: a4 = a4 | a5\n 40388: a2 = a2 | a4\n 40391: a2 = a2 << 0x20\n 40394: t0 = a2 | a1\n 40397: a2 = u8 [a0 + 0x1]\n 40400: a3 = u8 [a0]\n 40402: a4 = u8 [a0 + 0x2]\n 40405: a5 = u8 [a0 + 0x3]\n 40408: a2 = a2 << 0x8\n 40411: a2 = a2 | a3\n 40414: a4 = a4 << 0x10\n 40417: a5 = a5 << 0x18\n 40420: a4 = a4 | a5\n 40423: a2 = a2 | a4\n 40426: a3 = u8 [a0 + 0x5]\n 40429: a4 = u8 [a0 + 0x4]\n 40432: a5 = u8 [a0 + 0x6]\n 40435: s1 = u8 [a0 + 0x7]\n 40438: a3 = a3 << 0x8\n 40441: a3 = a3 | a4\n 40444: a5 = a5 << 0x10\n 40447: s1 = s1 << 0x18\n 40450: a5 = a5 | s1\n 40453: a3 = a3 | a5\n 40456: a3 = a3 << 0x20\n 40459: a2 = a2 | a3\n 40462: a3 = u8 [a0 + 0x19]\n 40465: a4 = u8 [a0 + 0x18]\n 40468: a5 = u8 [a0 + 0x1a]\n 40471: s1 = u8 [a0 + 0x1b]\n 40474: a3 = a3 << 0x8\n 40477: a3 = a3 | a4\n 40480: a5 = a5 << 0x10\n 40483: s1 = s1 << 0x18\n 40486: a5 = a5 | s1\n 40489: a3 = a3 | a5\n 40492: a4 = u8 [a0 + 0x1d]\n 40495: a5 = u8 [a0 + 0x1c]\n 40498: s1 = u8 [a0 + 0x1e]\n 40501: a1 = u8 [a0 + 0x1f]\n 40504: a4 = a4 << 0x8\n 40507: a4 = a4 | a5\n 40510: s1 = s1 << 0x10\n 40513: a1 = a1 << 0x18\n 40516: a1 = a1 | s1\n 40519: a1 = a1 | a4\n 40522: a1 = a1 << 0x20\n 40525: a3 = a3 | a1\n 40528: a1 = u8 [a0 + 0x9]\n 40531: a4 = u8 [a0 + 0x8]\n 40534: a5 = u8 [a0 + 0xa]\n 40537: s1 = u8 [a0 + 0xb]\n 40540: a1 = a1 << 0x8\n 40543: a1 = a1 | a4\n 40546: a5 = a5 << 0x10\n 40549: s1 = s1 << 0x18\n 40552: a5 = a5 | s1\n 40555: a1 = a1 | a5\n 40558: a4 = u8 [a0 + 0xd]\n 40561: a5 = u8 [a0 + 0xc]\n 40564: s1 = u8 [a0 + 0xe]\n 40567: a0 = u8 [a0 + 0xf]\n 40570: a4 = a4 << 0x8\n 40573: a4 = a4 | a5\n 40576: s1 = s1 << 0x10\n 40579: a0 = a0 << 0x18\n 40582: a0 = a0 | s1\n 40585: a0 = a0 | a4\n 40588: a0 = a0 << 0x20\n 40591: a0 = a0 | a1\n 40594: s1 = reverse a0\n 40596: a1 = reverse a3\n 40598: a2 = reverse a2\n 40600: a0 = reverse t0\n 40602: u64 [sp + 0xd8] = a0\n 40606: u64 [sp + 0xd0] = a2\n 40610: a0 = a0 | a2\n 40613: a2 = a1\n 40615: a1 = a1 | s1\n 40618: a1 = a1 | a0\n 40621: a1 = a1 >> 0x20\n 40624: a0 = a0 | s1\n 40627: a0 = a0 << 0x20\n 40630: a0 = a0 | a1\n 40633: jump @572 if a0 != 0\n      : @563 (gas: 5)\n 40637: u64 [sp + 0xc8] = a2\n 40641: i32 a0 = a2 + 0\n 40643: a1 = 0x20\n 40646: u64 [sp + 0xc0] = a0\n 40650: ra = 488, jump @0\n      : @564 [@dyn 244] (gas: 50)\n 40657: u8 [a0 + 31] = 0\n 40660: u8 [a0 + 30] = 0\n 40663: u8 [a0 + 29] = 0\n 40666: u8 [a0 + 28] = 0\n 40669: u8 [a0 + 27] = 0\n 40672: u8 [a0 + 26] = 0\n 40675: u8 [a0 + 25] = 0\n 40678: u8 [a0 + 24] = 0\n 40681: u8 [a0 + 23] = 0\n 40684: u8 [a0 + 22] = 0\n 40687: u8 [a0 + 21] = 0\n 40690: u8 [a0 + 20] = 0\n 40693: u8 [a0 + 19] = 0\n 40696: u8 [a0 + 18] = 0\n 40699: u8 [a0 + 17] = 0\n 40702: u8 [a0 + 16] = 0\n 40705: u8 [a0 + 15] = 0\n 40708: u8 [a0 + 14] = 0\n 40711: u8 [a0 + 13] = 0\n 40714: u8 [a0 + 12] = 0\n 40717: u8 [a0 + 11] = 0\n 40720: u8 [a0 + 10] = 0\n 40723: u8 [a0 + 9] = 0\n 40726: u8 [a0 + 8] = 0\n 40729: u8 [a0 + 7] = 0\n 40732: u8 [a0 + 6] = 0\n 40735: u8 [a0 + 5] = 0\n 40738: u8 [a0 + 4] = 0\n 40741: u8 [a0 + 3] = 0xa0\n 40746: u8 [a0 + 2] = 0x79\n 40750: u8 [a0 + 1] = 0xc3\n 40755: u8 [a0 + 0] = 0x8\n 40758: a1 = u64 [sp + 0xc8]\n 40762: a0 = a1 + 0x4\n 40765: a1 = a0 <u a1\n 40768: a3 = u64 [sp + 0xd8]\n 40772: a2 = a3 + a1\n 40775: a3 = a2 <u a3\n 40778: a3 = a1 if a1 == 0\n 40781: a3 = a3 + s1\n 40784: a1 = a3 <u s1\n 40787: a4 = u64 [sp + 0xd0]\n 40791: a4 = a4 + a1\n 40794: u64 [sp + 0x128] = a2\n 40798: u64 [sp + 0x120] = a0\n 40802: u64 [sp + 0x130] = a3\n 40806: a0 = sp + 0x140\n 40810: a1 = sp + 0x120\n 40814: u64 [sp + 0x138] = a4\n 40818: ra = 490, jump @458\n      : @565 [@dyn 245] (gas: 5)\n 40824: a0 = u64 [sp + 0x148]\n 40828: t0 = u64 [sp + 0x158]\n 40832: t1 = u64 [sp + 0x140]\n 40836: a3 = u64 [sp + 0x150]\n 40840: jump @571\n      : @566 (gas: 3)\n 40843: a0 = 0x40\n 40846: a1 = 0x20\n 40849: ra = 492, jump @0\n      : @567 [@dyn 246] (gas: 103)\n 40856: a1 = u8 [a0 + 0x11]\n 40859: a2 = u8 [a0 + 0x10]\n 40862: a3 = u8 [a0 + 0x12]\n 40865: a4 = u8 [a0 + 0x13]\n 40868: a1 = a1 << 0x8\n 40871: a1 = a1 | a2\n 40874: a3 = a3 << 0x10\n 40877: a4 = a4 << 0x18\n 40880: a3 = a3 | a4\n 40883: a1 = a1 | a3\n 40886: a2 = u8 [a0 + 0x15]\n 40889: a3 = u8 [a0 + 0x14]\n 40892: a4 = u8 [a0 + 0x16]\n 40895: a5 = u8 [a0 + 0x17]\n 40898: a2 = a2 << 0x8\n 40901: a2 = a2 | a3\n 40904: a4 = a4 << 0x10\n 40907: a5 = a5 << 0x18\n 40910: a4 = a4 | a5\n 40913: a2 = a2 | a4\n 40916: a2 = a2 << 0x20\n 40919: t0 = a2 | a1\n 40922: a2 = u8 [a0 + 0x1]\n 40925: a3 = u8 [a0]\n 40927: a4 = u8 [a0 + 0x2]\n 40930: a5 = u8 [a0 + 0x3]\n 40933: a2 = a2 << 0x8\n 40936: a2 = a2 | a3\n 40939: a4 = a4 << 0x10\n 40942: a5 = a5 << 0x18\n 40945: a4 = a4 | a5\n 40948: a2 = a2 | a4\n 40951: a3 = u8 [a0 + 0x5]\n 40954: a4 = u8 [a0 + 0x4]\n 40957: a5 = u8 [a0 + 0x6]\n 40960: s1 = u8 [a0 + 0x7]\n 40963: a3 = a3 << 0x8\n 40966: a3 = a3 | a4\n 40969: a5 = a5 << 0x10\n 40972: s1 = s1 << 0x18\n 40975: a5 = a5 | s1\n 40978: a3 = a3 | a5\n 40981: a3 = a3 << 0x20\n 40984: a2 = a2 | a3\n 40987: a3 = u8 [a0 + 0x19]\n 40990: a4 = u8 [a0 + 0x18]\n 40993: a5 = u8 [a0 + 0x1a]\n 40996: s1 = u8 [a0 + 0x1b]\n 40999: a3 = a3 << 0x8\n 41002: a3 = a3 | a4\n 41005: a5 = a5 << 0x10\n 41008: s1 = s1 << 0x18\n 41011: a5 = a5 | s1\n 41014: a3 = a3 | a5\n 41017: a4 = u8 [a0 + 0x1d]\n 41020: a5 = u8 [a0 + 0x1c]\n 41023: s1 = u8 [a0 + 0x1e]\n 41026: a1 = u8 [a0 + 0x1f]\n 41029: a4 = a4 << 0x8\n 41032: a4 = a4 | a5\n 41035: s1 = s1 << 0x10\n 41038: a1 = a1 << 0x18\n 41041: a1 = a1 | s1\n 41044: a1 = a1 | a4\n 41047: a1 = a1 << 0x20\n 41050: a3 = a3 | a1\n 41053: a1 = u8 [a0 + 0x9]\n 41056: a4 = u8 [a0 + 0x8]\n 41059: a5 = u8 [a0 + 0xa]\n 41062: s1 = u8 [a0 + 0xb]\n 41065: a1 = a1 << 0x8\n 41068: a1 = a1 | a4\n 41071: a5 = a5 << 0x10\n 41074: s1 = s1 << 0x18\n 41077: a5 = a5 | s1\n 41080: a1 = a1 | a5\n 41083: a4 = u8 [a0 + 0xd]\n 41086: a5 = u8 [a0 + 0xc]\n 41089: s1 = u8 [a0 + 0xe]\n 41092: a0 = u8 [a0 + 0xf]\n 41095: a4 = a4 << 0x8\n 41098: a4 = a4 | a5\n 41101: s1 = s1 << 0x10\n 41104: a0 = a0 << 0x18\n 41107: a0 = a0 | s1\n 41110: a0 = a0 | a4\n 41113: a0 = a0 << 0x20\n 41116: a0 = a0 | a1\n 41119: s1 = reverse a0\n 41121: a1 = reverse a3\n 41123: a2 = reverse a2\n 41125: a0 = reverse t0\n 41127: u64 [sp + 0xd8] = a0\n 41131: u64 [sp + 0xd0] = a2\n 41135: a0 = a0 | a2\n 41138: a2 = a1\n 41140: a1 = a1 | s1\n 41143: a1 = a1 | a0\n 41146: a1 = a1 >> 0x20\n 41149: a0 = a0 | s1\n 41152: a0 = a0 << 0x20\n 41155: a0 = a0 | a1\n 41158: jump @572 if a0 != 0\n      : @568 (gas: 5)\n 41162: u64 [sp + 0xc8] = a2\n 41166: i32 a0 = a2 + 0\n 41168: a1 = 0x20\n 41171: u64 [sp + 0xc0] = a0\n 41175: ra = 494, jump @0\n      : @569 [@dyn 247] (gas: 50)\n 41182: u8 [a0 + 31] = 0\n 41185: u8 [a0 + 30] = 0\n 41188: u8 [a0 + 29] = 0\n 41191: u8 [a0 + 28] = 0\n 41194: u8 [a0 + 27] = 0\n 41197: u8 [a0 + 26] = 0\n 41200: u8 [a0 + 25] = 0\n 41203: u8 [a0 + 24] = 0\n 41206: u8 [a0 + 23] = 0\n 41209: u8 [a0 + 22] = 0\n 41212: u8 [a0 + 21] = 0\n 41215: u8 [a0 + 20] = 0\n 41218: u8 [a0 + 19] = 0\n 41221: u8 [a0 + 18] = 0\n 41224: u8 [a0 + 17] = 0\n 41227: u8 [a0 + 16] = 0\n 41230: u8 [a0 + 15] = 0\n 41233: u8 [a0 + 14] = 0\n 41236: u8 [a0 + 13] = 0\n 41239: u8 [a0 + 12] = 0\n 41242: u8 [a0 + 11] = 0\n 41245: u8 [a0 + 10] = 0\n 41248: u8 [a0 + 9] = 0\n 41251: u8 [a0 + 8] = 0\n 41254: u8 [a0 + 7] = 0\n 41257: u8 [a0 + 6] = 0\n 41260: u8 [a0 + 5] = 0\n 41263: u8 [a0 + 4] = 0\n 41266: u8 [a0 + 3] = 0xa0\n 41271: u8 [a0 + 2] = 0x79\n 41275: u8 [a0 + 1] = 0xc3\n 41280: u8 [a0 + 0] = 0x8\n 41283: a1 = u64 [sp + 0xc8]\n 41287: a0 = a1 + 0x4\n 41290: a1 = a0 <u a1\n 41293: a3 = u64 [sp + 0xd8]\n 41297: a2 = a3 + a1\n 41300: a3 = a2 <u a3\n 41303: a3 = a1 if a1 == 0\n 41306: a3 = a3 + s1\n 41309: a1 = a3 <u s1\n 41312: a4 = u64 [sp + 0xd0]\n 41316: a4 = a4 + a1\n 41319: u64 [sp + 0x1a8] = a2\n 41323: u64 [sp + 0x1a0] = a0\n 41327: u64 [sp + 0x1b0] = a3\n 41331: a0 = sp + 0x1c0\n 41335: a1 = sp + 0x1a0\n 41339: u64 [sp + 0x1b8] = a4\n 41343: ra = 496, jump @289\n      : @570 [@dyn 248] (gas: 5)\n 41349: a0 = u64 [sp + 0x1c8]\n 41353: t0 = u64 [sp + 0x1d8]\n 41357: t1 = u64 [sp + 0x1c0]\n 41361: a3 = u64 [sp + 0x1d0]\n 41365: fallthrough\n      : @571 (gas: 26)\n 41366: a1 = u64 [sp + 0xd8]\n 41370: a4 = a0 ^ a1\n 41373: a5 = a0 <u a1\n 41376: t2 = a1\n 41378: a2 = u64 [sp + 0xc8]\n 41382: a1 = t1 <u a2\n 41385: a5 = a1 if a4 == 0\n 41388: a4 = a3 - s1\n 41391: a3 = a3 <u s1\n 41394: s1 = u64 [sp + 0xd0]\n 41398: s1 = t0 - s1\n 41401: s1 = s1 - a3\n 41404: a3 = a4 <u a5\n 41407: s1 = s1 - a3\n 41410: a4 = a4 - a5\n 41413: a0 = a0 - t2\n 41416: a1 = a0 - a1\n 41419: a0 = t1 - a2\n 41422: a1 = a1 | s1\n 41425: a2 = a0 | a4\n 41428: a2 = a2 | a1\n 41431: a1 = a1 | a4\n 41434: a2 = a2 >> 0x20\n 41437: a1 = a1 << 0x20\n 41440: a1 = a1 | a2\n 41443: jump @580 if a1 == 0\n      : @572 (gas: 1)\n 41447: trap\n      : @573 (gas: 4)\n 41448: a0 = 0\n 41450: a1 = 0\n 41452: ra = 0x1f2\n 41456: jump @0\n      : @574 (gas: 2)\n 41460: a1 = 0\n 41462: ra = 498, jump @0\n      : @575 [@dyn 249] (gas: 5)\n 41469: i32 a1 = a0 + 0\n 41471: a0 = 0x1\n 41474: a2 = 0\n 41476: ecalli 12 // 'seal_return'\n 41478: fallthrough\n      : @576 (gas: 8)\n 41479: u64 [sp + 400] = 0\n 41483: u64 [sp + 392] = 0\n 41487: u64 [sp + 384] = 0\n 41491: a0 = 0x4e487b7100000000\n 41501: a1 = sp + 0x180\n 41505: u64 [sp + 0x198] = a0\n 41509: a0 = 0\n 41511: ra = 500, jump @8\n      : @577 [@dyn 250] (gas: 7)\n 41518: u64 [sp + 376] = 0\n 41522: u64 [sp + 368] = 0\n 41526: u64 [sp + 352] = 0x41\n 41531: a0 = 0x4\n 41534: a1 = sp + 0x160\n 41538: u64 [sp + 360] = 0\n 41542: ra = 502, jump @8\n      : @578 [@dyn 251] (gas: 3)\n 41549: a1 = 0x24\n 41552: a0 = 0\n 41554: ra = 504, jump @0\n      : @579 [@dyn 252] (gas: 5)\n 41561: i32 a1 = a0 + 0\n 41563: a0 = 0x1\n 41566: a2 = 0x24\n 41569: ecalli 12 // 'seal_return'\n 41571: fallthrough\n      : @580 (gas: 4)\n 41572: i32 s1 = a0 + 0\n 41574: a0 = u64 [sp + 0xc0]\n 41578: a1 = s1\n 41580: ra = 506, jump @0\n      : @581 [@dyn 253] (gas: 7)\n 41587: i32 a1 = a0 + 0\n 41589: a0 = 0x1\n 41592: a2 = s1\n 41594: ecalli 12 // 'seal_return'\n 41596: a0 = 0\n 41598: ra = 0x1fc\n 41602: jump @10\n      : @582 [export #0: 'call'] (gas: 2)\n 41606: a0 = 0\n 41608: ra = 508, jump @10\n      : @583 [@dyn 254] [export #1: 'deploy'] (gas: 2)\n 41615: a0 = 0x1\n 41618: ra = 510, jump @10\n      : @584 [@dyn 255] (gas: 27)\n 41625: sp = sp + 0xffffffffffffff80\n 41628: u64 [sp + 0x78] = ra\n 41631: u64 [sp + 0x70] = s0\n 41634: u64 [sp + 0x68] = s1\n 41637: s0 = sp + 0x80\n 41641: sp = sp & 0xfffffffffffffff0\n 41644: t0 = u64 [a1]\n 41646: t1 = u64 [a1 + 0x8]\n 41649: t2 = u64 [a1 + 0x10]\n 41652: a1 = u64 [a1 + 0x18]\n 41655: a3 = u64 [a2]\n 41657: a4 = u64 [a2 + 0x8]\n 41660: a5 = u64 [a2 + 0x10]\n 41663: a2 = u64 [a2 + 0x18]\n 41666: s1 = a0\n 41668: u64 [sp + 0x18] = a2\n 41671: u64 [sp + 0x10] = a5\n 41674: u64 [sp + 0x8] = a4\n 41677: u64 [sp] = a3\n 41679: u64 [sp + 0x38] = a1\n 41682: u64 [sp + 0x30] = t2\n 41685: u64 [sp + 0x28] = t1\n 41688: a0 = sp + 0x40\n 41691: a1 = sp + 0x20\n 41694: a2 = sp\n 41696: u64 [sp + 0x20] = t0\n 41699: ra = 512, jump @156\n      : @585 [@dyn 256] (gas: 14)\n 41705: a0 = u64 [sp + 0x50]\n 41708: a1 = u64 [sp + 0x58]\n 41711: a2 = u64 [sp + 0x40]\n 41714: a3 = u64 [sp + 0x48]\n 41717: u64 [s1 + 0x10] = a0\n 41720: u64 [s1 + 0x18] = a1\n 41723: u64 [s1] = a2\n 41725: u64 [s1 + 0x8] = a3\n 41728: sp = s0 + 0xffffffffffffff80\n 41731: ra = u64 [sp + 0x78]\n 41734: s0 = u64 [sp + 0x70]\n 41737: s1 = u64 [sp + 0x68]\n 41740: sp = sp + 0x80\n 41744: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"acceptListing(uint256)": "b0eceb7e",
							"cancelListing(uint256)": "305a67a8",
							"createListing(uint8,uint8)": "15a6f5cf",
							"getAllListings()": "ae73ccec",
							"inventory()": "15d52a5c",
							"listings(uint256)": "de74e57b",
							"owner()": "8da5cb5b"
						}
					},
					"irOptimized": "/// @use-src 0:\"CardTrading.sol\"\nobject \"CardTrading_249\" {\n    code {\n        {\n            /// @src 0:340:2531  \"contract CardTrading {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := copy_arguments_for_constructor_object_CardTrading()\n            constructor_CardTrading(_1)\n            let _2 := allocate_unbounded()\n            codecopy(_2, dataoffset(\"CardTrading_249_deployed\"), datasize(\"CardTrading_249_deployed\"))\n            return(_2, datasize(\"CardTrading_249_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function cleanup_address(value) -> cleaned\n        {\n            cleaned := cleanup_uint160(value)\n        }\n        function validator_revert_address(value)\n        {\n            if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n        }\n        function abi_decode_address_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_address(value)\n        }\n        function abi_decode_tuple_address_fromMemory(headStart, dataEnd) -> value0\n        {\n            if slt(sub(dataEnd, headStart), 32)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := 0\n            value0 := abi_decode_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_CardTrading() -> ret_param\n        {\n            let programSize := datasize(\"CardTrading_249\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param := abi_decode_tuple_address_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_contract_IInventoryManager(value)\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_contract_IInventoryManager_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_contract_IInventoryManager(value)\n        }\n        function prepare_store_contract_IInventoryManager(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_contract_IInventoryManager_to_contract_IInventoryManager(slot, value)\n        {\n            let convertedValue := convert_contract_IInventoryManager_to_contract_IInventoryManager(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_contract_IInventoryManager(convertedValue)))\n        }\n        function convert_uint160_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function prepare_store_address(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_address_to_address(slot, value)\n        {\n            let convertedValue := convert_address_to_address(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n        }\n        function shift_right_unsigned(value) -> newValue\n        { newValue := shr(0, value) }\n        function cleanup_from_storage_contract_IInventoryManager(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function extract_from_storage_value_offset_contract_IInventoryManager(slot_value) -> value\n        {\n            value := cleanup_from_storage_contract_IInventoryManager(shift_right_unsigned(slot_value))\n        }\n        function read_from_storage_split_offset_contract_IInventoryManager(slot) -> value\n        {\n            value := extract_from_storage_value_offset_contract_IInventoryManager(sload(slot))\n        }\n        function convert_contract_IInventoryManager_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function convert_contract_CardTrading_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n        { revert(0, 0) }\n        function shift_left_224(value) -> newValue\n        { newValue := shl(224, value) }\n        function abi_decode_fromMemory(headStart, dataEnd)\n        {\n            if slt(sub(dataEnd, headStart), 0)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n        }\n        function abi_encode_address(value, pos)\n        {\n            mstore(pos, cleanup_address(value))\n        }\n        function abi_encode_tuple_address(headStart, value0) -> tail\n        {\n            tail := add(headStart, 32)\n            abi_encode_address(value0, add(headStart, 0))\n        }\n        /// @ast-id 76 @src 0:606:1051  \"constructor(address inventoryAddress) {...\"\n        function constructor_CardTrading(var_inventoryAddress)\n        {\n            /// @src 0:685:701  \"inventoryAddress\"\n            let _1 := var_inventoryAddress\n            let expr := _1\n            /// @src 0:667:702  \"IInventoryManager(inventoryAddress)\"\n            let expr_address := convert_address_to_contract_IInventoryManager(expr)\n            /// @src 0:655:702  \"inventory = IInventoryManager(inventoryAddress)\"\n            update_storage_value_offset_contract_IInventoryManager_to_contract_IInventoryManager(0x01, expr_address)\n            /// @src 0:721:731  \"msg.sender\"\n            let expr_1 := caller()\n            /// @src 0:713:731  \"owner = msg.sender\"\n            update_storage_value_offset_address_to_address(0x02, expr_1)\n            /// @src 0:827:836  \"inventory\"\n            let _address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n            let expr_63_address := _address\n            /// @src 0:827:855  \"inventory.setTradingContract\"\n            let expr_64_address := convert_contract_IInventoryManager_to_address(expr_63_address)\n            let expr_functionSelector := 0x5be6f2c7\n            /// @src 0:864:868  \"this\"\n            let expr_67_address := address()\n            /// @src 0:856:869  \"address(this)\"\n            let expr_2 := convert_contract_CardTrading_to_address(expr_67_address)\n            /// @src 0:827:870  \"inventory.setTradingContract(address(this))\"\n            if iszero(extcodesize(expr_64_address))\n            {\n                revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            }\n            let _2 := allocate_unbounded()\n            mstore(_2, shift_left_224(expr_functionSelector))\n            let _3 := abi_encode_tuple_address(add(_2, 4), expr_2)\n            let trySuccessCondition := call(gas(), expr_64_address, 0, _2, sub(_3, _2), _2, 0)\n            if trySuccessCondition\n            {\n                let _4 := 0\n                if gt(_4, returndatasize()) { _4 := returndatasize() }\n                finalize_allocation(_2, _4)\n                abi_decode_fromMemory(_2, add(_2, _4))\n            }\n            /// @src 0:823:1044  \"try inventory.setTradingContract(address(this)) {...\"\n            switch iszero(trySuccessCondition)\n            case 0 { }\n            default {\n                let _5 := 1\n                if _5 { }\n            }\n        }\n    }\n    /// @use-src 0:\"CardTrading.sol\"\n    object \"CardTrading_249_deployed\" {\n        code {\n            {\n                /// @src 0:340:2531  \"contract CardTrading {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_224_unsigned(calldataload(0))\n                    switch selector\n                    case 0x15a6f5cf { external_fun_createListing() }\n                    case 0x15d52a5c { external_fun_inventory() }\n                    case 0x305a67a8 { external_fun_cancelListing() }\n                    case 0x8da5cb5b { external_fun_owner() }\n                    case 0xae73ccec { external_fun_getAllListings() }\n                    case 0xb0eceb7e { external_fun_acceptListing() }\n                    case 0xde74e57b { external_fun_listings() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_224_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_uint8(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function validator_revert_uint8(value)\n            {\n                if iszero(eq(value, cleanup_uint8(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint8(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint8(value)\n            }\n            function abi_decode_uint8t_uint8(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint8(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint8(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_createListing()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_uint8t_uint8(4, calldatasize())\n                fun_createListing(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_contract_IInventoryManager(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_contract_IInventoryManager(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_contract_IInventoryManager(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_contract_IInventoryManager(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_contract_IInventoryManager(sload(slot), offset)\n            }\n            /// @ast-id 45 @src 0:536:570  \"IInventoryManager public inventory\"\n            function getter_fun_inventory() -> ret_address\n            {\n                let slot := 1\n                let offset := 0\n                ret_address := read_from_storage_split_dynamic_contract_IInventoryManager(slot, offset)\n            }\n            /// @src 0:340:2531  \"contract CardTrading {...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_contract_IInventoryManager_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function abi_encode_contract_IInventoryManager_to_address(value, pos)\n            {\n                mstore(pos, convert_contract_IInventoryManager_to_address(value))\n            }\n            function abi_encode_contract_IInventoryManager(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_contract_IInventoryManager_to_address(value0, add(headStart, 0))\n            }\n            function external_fun_inventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_inventory()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_contract_IInventoryManager(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function external_fun_cancelListing()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_cancelListing(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 47 @src 0:577:597  \"address public owner\"\n            function getter_fun_owner() -> ret\n            {\n                let slot := 2\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:340:2531  \"contract CardTrading {...\"\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_owner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_owner()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_array_struct_Listing_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_struct_Listing_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_struct_Listing_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_address_to_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_uint8_to_uint8(value, pos)\n            {\n                mstore(pos, cleanup_uint8(value))\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_struct_Listing(value, pos)\n            {\n                let memberValue0 := mload(add(value, 0x00))\n                abi_encode_address_to_address(memberValue0, add(pos, 0x00))\n                let memberValue0_1 := mload(add(value, 0x20))\n                abi_encode_uint8_to_uint8(memberValue0_1, add(pos, 0x20))\n                let memberValue0_2 := mload(add(value, 0x40))\n                abi_encode_uint8_to_uint8(memberValue0_2, add(pos, 0x40))\n                let memberValue0_3 := mload(add(value, 0x60))\n                abi_encode_bool(memberValue0_3, add(pos, 0x60))\n            }\n            function abi_encodeUpdatedPos_struct_Listing(value0, pos) -> updatedPos\n            {\n                abi_encode_struct_Listing(value0, pos)\n                updatedPos := add(pos, 0x80)\n            }\n            function array_nextElement_array_struct_Listing_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_struct_Listing_dyn(value, pos) -> end\n            {\n                let length := array_length_array_struct_Listing_dyn(value)\n                pos := array_storeLengthForEncoding_array_struct_Listing_dyn(pos, length)\n                let baseRef := array_dataslot_array_struct_Listing_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_struct_Listing(elementValue0, pos)\n                    srcPtr := array_nextElement_array_struct_Listing_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encode_array_struct_Listing_memory_ptr_dyn_memory_ptr(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_struct_Listing_dyn(value0, tail)\n            }\n            function external_fun_getAllListings()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_getAllListings()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_struct_Listing_memory_ptr_dyn_memory_ptr(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_acceptListing()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_acceptListing(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_struct_Listing_storage_dyn(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_struct_Listing_storage_dyn(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_struct_Listing__dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Listing_storage_dyn(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Listing_storage_dyn(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(160, value) }\n            function cleanup_from_storage_uint8(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_uint8(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint8(shift_right_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_t_uint8(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint8(sload(slot))\n            }\n            function shift_right_168_unsigned(value) -> newValue\n            { newValue := shr(168, value) }\n            function extract_from_storage_value_offset_t_uint8(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint8(shift_right_168_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint8(slot) -> value\n            {\n                value := extract_from_storage_value_offset_t_uint8(sload(slot))\n            }\n            function shift_right_176_unsigned(value) -> newValue\n            { newValue := shr(176, value) }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_176_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            /// @ast-id 42 @src 0:504:529  \"Listing[] public listings\"\n            function getter_fun_listings(key) -> ret, ret_1, ret_2, ret_3\n            {\n                let slot := 0\n                let offset := 0\n                if iszero(lt(key, array_length_array_struct_Listing_storage_dyn(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_struct_Listing__dyn(slot, key)\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_t_uint8(add(slot, 0))\n                ret_2 := read_from_storage_split_offset_uint8(add(slot, 0))\n                ret_3 := read_from_storage_split_offset_bool(add(slot, 0))\n            }\n            /// @src 0:340:2531  \"contract CardTrading {...\"\n            function abi_encode_uint8_to_uint8_fromStack(value, pos)\n            {\n                mstore(pos, cleanup_uint8(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_address_uint8_uint8_bool(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint8_to_uint8_fromStack(value1, add(headStart, 32))\n                abi_encode_uint8_to_uint8_fromStack(value2, add(headStart, 64))\n                abi_encode_bool_to_bool(value3, add(headStart, 96))\n            }\n            function external_fun_listings()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3 := getter_fun_listings(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint8_uint8_bool(memPos, ret, ret_1, ret_2, ret_3)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint8(value) -> converted\n            {\n                converted := cleanup_uint8(identity(cleanup_t_rational_by(value)))\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid ID\")\n            }\n            function abi_encode_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 10)\n                store_literal_in_memory_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_87f3(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(tail)\n            }\n            function require_helper_stringliteral_87f3(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_87f3(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function extract_from_storage_value_offset_contract_IInventoryManager(slot_value) -> value\n            {\n                value := cleanup_from_storage_contract_IInventoryManager(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_contract_IInventoryManager(slot) -> value\n            {\n                value := extract_from_storage_value_offset_contract_IInventoryManager(sload(slot))\n            }\n            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            { revert(0, 0) }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function shift_left_224(value) -> newValue\n            { newValue := shl(224, value) }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_bool_fromMemory(offset, end) -> value\n            {\n                value := mload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_bool_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n            }\n            function convert_uint8_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint8(value)))\n            }\n            function abi_encode_uint8(value, pos)\n            {\n                mstore(pos, convert_uint8_to_uint256(value))\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function abi_encode_rational_by(value, pos)\n            {\n                mstore(pos, convert_rational_by_to_uint256(value))\n            }\n            function abi_encode_address_uint8_rational_by(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 96)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint8(value1, add(headStart, 32))\n                abi_encode_rational_by(value2, add(headStart, 64))\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function store_literal_in_memory_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05(memPtr)\n            {\n                mstore(add(memPtr, 0), \"No card\")\n            }\n            function abi_encode_stringliteral_ec62(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 7)\n                store_literal_in_memory_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_ec62(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_ec62(tail)\n            }\n            function require_helper_stringliteral_ec62(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_ec62(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_array_array_struct_Listing_storage_dyn_storage_to_array_struct_Listing__dyn_ptr(value) -> converted\n            { converted := value }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function allocate_memory_struct_struct_Listing_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function write_to_memory_uint8(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint8(value))\n            }\n            function write_to_memory_bool(memPtr, value)\n            {\n                mstore(memPtr, cleanup_bool(value))\n            }\n            function array_dataslot_array_struct_Listing_storage_dyn_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_struct_Listing_storage_dyn_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_struct_Listing__dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Listing_storage_dyn_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Listing_storage_dyn_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function panic_error_0x00()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x00)\n                revert(0, 0x24)\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function read_from_memoryt_uint8(ptr) -> returnValue\n            {\n                let value := cleanup_uint8(mload(ptr))\n                returnValue := value\n            }\n            function shift_left_160(value) -> newValue\n            { newValue := shl(160, value) }\n            function update_byte_slice_shift_20(value, toInsert) -> result\n            {\n                let mask := shl(160, 255)\n                toInsert := shift_left_160(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint8_to_uint8(value) -> converted\n            {\n                converted := cleanup_uint8(identity(cleanup_uint8(value)))\n            }\n            function prepare_store_uint8(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint8_to_uint8(slot, value)\n            {\n                let convertedValue := convert_uint8_to_uint8(value)\n                sstore(slot, update_byte_slice_shift_20(sload(slot), prepare_store_uint8(convertedValue)))\n            }\n            function shift_left_168(value) -> newValue\n            { newValue := shl(168, value) }\n            function update_byte_slice_shift_21(value, toInsert) -> result\n            {\n                let mask := shl(168, 255)\n                toInsert := shift_left_168(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_t_uint8_to_t_uint8(slot, value)\n            {\n                let convertedValue := convert_uint8_to_uint8(value)\n                sstore(slot, update_byte_slice_shift_21(sload(slot), prepare_store_uint8(convertedValue)))\n            }\n            function read_from_memoryt_bool(ptr) -> returnValue\n            {\n                let value := cleanup_bool(mload(ptr))\n                returnValue := value\n            }\n            function shift_left_176(value) -> newValue\n            { newValue := shl(176, value) }\n            function update_byte_slice_shift_22(value, toInsert) -> result\n            {\n                let mask := shl(176, 255)\n                toInsert := shift_left_176(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_22(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function copy_struct_to_storage_from_struct_Listing_to_struct_Listing(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 0)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint8(memberSrcPtr_1)\n                update_storage_value_offset_uint8_to_uint8(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 0)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_uint8(memberSrcPtr_2)\n                update_storage_value_offset_t_uint8_to_t_uint8(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 0)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_bool(memberSrcPtr_3)\n                update_storage_value_offset_bool_to_bool(memberSlot_3, memberValue_3)\n            }\n            function update_storage_value_struct_Listing_to_struct_Listing(slot, offset, value)\n            {\n                if offset { panic_error_0x00() }\n                copy_struct_to_storage_from_struct_Listing_to_struct_Listing(slot, value)\n            }\n            function array_push_from_struct_Listing_to_array_struct_Listing_storage_dyn_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_struct_Listing__dyn_ptr(array, oldLen)\n                update_storage_value_struct_Listing_to_struct_Listing(slot, offset, value0)\n            }\n            /// @ast-id 118 @src 0:1059:1477  \"function createListing(uint8 offerCardId, uint8 requestCardId) external {...\"\n            function fun_createListing(var_offerCardId, var_requestCardId)\n            {\n                /// @src 0:1150:1161  \"offerCardId\"\n                let _1 := var_offerCardId\n                let expr := _1\n                /// @src 0:1164:1166  \"17\"\n                let expr_1 := 0x11\n                /// @src 0:1150:1166  \"offerCardId < 17\"\n                let expr_2 := lt(cleanup_uint8(expr), convert_rational_by_to_uint8(expr_1))\n                /// @src 0:1150:1188  \"offerCardId < 17 && requestCardId < 17\"\n                let expr_3 := expr_2\n                if expr_3\n                {\n                    /// @src 0:1170:1183  \"requestCardId\"\n                    let _2 := var_requestCardId\n                    let expr_4 := _2\n                    /// @src 0:1186:1188  \"17\"\n                    let expr_5 := 0x11\n                    /// @src 0:1170:1188  \"requestCardId < 17\"\n                    let expr_6 := lt(cleanup_uint8(expr_4), convert_rational_by_to_uint8(expr_5))\n                    /// @src 0:1150:1188  \"offerCardId < 17 && requestCardId < 17\"\n                    expr_3 := expr_6\n                }\n                /// @src 0:1142:1203  \"require(offerCardId < 17 && requestCardId < 17, \\\"Invalid ID\\\")\"\n                require_helper_stringliteral_87f3(expr_3)\n                /// @src 0:1222:1231  \"inventory\"\n                let _3_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_95_address := _3_address\n                /// @src 0:1222:1239  \"inventory.hasCard\"\n                let expr_96_address := convert_contract_IInventoryManager_to_address(expr_95_address)\n                let expr_functionSelector := 0x4dca8ce6\n                /// @src 0:1240:1250  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 0:1252:1263  \"offerCardId\"\n                let _3 := var_offerCardId\n                let expr_8 := _3\n                /// @src 0:1265:1266  \"1\"\n                let expr_9 := 0x01\n                /// @src 0:1222:1267  \"inventory.hasCard(msg.sender, offerCardId, 1)\"\n                let _4 := allocate_unbounded()\n                mstore(_4, shift_left_224(expr_functionSelector))\n                let _5 := abi_encode_address_uint8_rational_by(add(_4, 4), expr_7, expr_8, expr_9)\n                let _6 := staticcall(gas(), expr_96_address, _4, sub(_5, _4), _4, 32)\n                if iszero(_6) { revert_forward() }\n                let expr_10\n                if _6\n                {\n                    let _7 := 32\n                    if gt(_7, returndatasize()) { _7 := returndatasize() }\n                    finalize_allocation(_4, _7)\n                    expr_10 := abi_decode_bool_fromMemory(_4, add(_4, _7))\n                }\n                /// @src 0:1214:1279  \"require(inventory.hasCard(msg.sender, offerCardId, 1), \\\"No card\\\")\"\n                require_helper_stringliteral_ec62(expr_10)\n                /// @src 0:1292:1300  \"listings\"\n                let _9_slot := 0x00\n                let expr_105_slot := _9_slot\n                /// @src 0:1292:1305  \"listings.push\"\n                let expr_self_slot := convert_array_array_struct_Listing_storage_dyn_storage_to_array_struct_Listing__dyn_ptr(expr_105_slot)\n                /// @src 0:1337:1347  \"msg.sender\"\n                let expr_11 := caller()\n                /// @src 0:1375:1386  \"offerCardId\"\n                let _8 := var_offerCardId\n                let expr_12 := _8\n                /// @src 0:1416:1429  \"requestCardId\"\n                let _9 := var_requestCardId\n                let expr_13 := _9\n                /// @src 0:1452:1456  \"true\"\n                let expr_14 := 0x01\n                /// @src 0:1306:1468  \"Listing({...\"\n                let expr_mpos := allocate_memory_struct_struct_Listing_storage_ptr()\n                write_to_memory_address(add(expr_mpos, 0), expr_11)\n                write_to_memory_uint8(add(expr_mpos, 32), expr_12)\n                write_to_memory_uint8(add(expr_mpos, 64), expr_13)\n                write_to_memory_bool(add(expr_mpos, 96), expr_14)\n                /// @src 0:1292:1469  \"listings.push(Listing({...\"\n                array_push_from_struct_Listing_to_array_struct_Listing_storage_dyn_ptr(expr_self_slot, expr_mpos)\n            }\n            /// @src 0:340:2531  \"contract CardTrading {...\"\n            function convert_struct_Listing_storage_to_struct_Listing_ptr(value) -> converted\n            { converted := value }\n            function store_literal_in_memory_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Inactive\")\n            }\n            function abi_encode_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 8)\n                store_literal_in_memory_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_8ab6(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(tail)\n            }\n            function require_helper_stringliteral_8ab6(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8ab6(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_d2a48e91a46a0ba02fd0da530dfd130801a0855e981c9fd8ad2b4db688b1d01f(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not seller\")\n            }\n            function abi_encode_stringliteral_d2a48e91a46a0ba02fd0da530dfd130801a0855e981c9fd8ad2b4db688b1d01f(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 10)\n                store_literal_in_memory_d2a48e91a46a0ba02fd0da530dfd130801a0855e981c9fd8ad2b4db688b1d01f(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_d2a4(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_d2a48e91a46a0ba02fd0da530dfd130801a0855e981c9fd8ad2b4db688b1d01f(tail)\n            }\n            function require_helper_stringliteral_d2a4(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_d2a4(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 238 @src 0:2095:2419  \"function cancelListing(uint listingId) external {...\"\n            function fun_cancelListing(var_listingId)\n            {\n                /// @src 0:2162:2171  \"listingId\"\n                let _1 := var_listingId\n                let expr := _1\n                /// @src 0:2174:2182  \"listings\"\n                let _13_slot := 0x00\n                let expr_203_slot := _13_slot\n                /// @src 0:2174:2189  \"listings.length\"\n                let expr_1 := array_length_array_struct_Listing_storage_dyn(expr_203_slot)\n                /// @src 0:2162:2189  \"listingId < listings.length\"\n                let expr_2 := lt(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 0:2154:2204  \"require(listingId < listings.length, \\\"Invalid ID\\\")\"\n                require_helper_stringliteral_87f3(expr_2)\n                /// @src 0:2241:2249  \"listings\"\n                let _slot := 0x00\n                let expr_212_slot := _slot\n                /// @src 0:2250:2259  \"listingId\"\n                let _2 := var_listingId\n                let expr_3 := _2\n                /// @src 0:2241:2260  \"listings[listingId]\"\n                let _3, _4 := storage_array_index_access_struct_Listing__dyn(expr_212_slot, expr_3)\n                let _18_slot := _3\n                let expr_214_slot := _18_slot\n                /// @src 0:2215:2260  \"Listing storage listing = listings[listingId]\"\n                let var_listing_slot := convert_struct_Listing_storage_to_struct_Listing_ptr(expr_214_slot)\n                /// @src 0:2279:2286  \"listing\"\n                let _19_slot := var_listing_slot\n                let expr_217_slot := _19_slot\n                /// @src 0:2279:2293  \"listing.active\"\n                let _5 := add(expr_217_slot, 0)\n                let _6 := read_from_storage_split_offset_bool(_5)\n                let expr_4 := _6\n                /// @src 0:2271:2306  \"require(listing.active, \\\"Inactive\\\")\"\n                require_helper_stringliteral_8ab6(expr_4)\n                /// @src 0:2325:2335  \"msg.sender\"\n                let expr_5 := caller()\n                /// @src 0:2339:2346  \"listing\"\n                let _22_slot := var_listing_slot\n                let expr_225_slot := _22_slot\n                /// @src 0:2339:2353  \"listing.seller\"\n                let _7 := add(expr_225_slot, 0)\n                let _8 := read_from_storage_split_offset_address(_7)\n                let expr_6 := _8\n                /// @src 0:2325:2353  \"msg.sender == listing.seller\"\n                let expr_7 := eq(cleanup_address(expr_5), cleanup_address(expr_6))\n                /// @src 0:2317:2368  \"require(msg.sender == listing.seller, \\\"Not seller\\\")\"\n                require_helper_stringliteral_d2a4(expr_7)\n                /// @src 0:2406:2411  \"false\"\n                let expr_8 := 0x00\n                /// @src 0:2389:2396  \"listing\"\n                let _25_slot := var_listing_slot\n                let expr_231_slot := _25_slot\n                /// @src 0:2389:2403  \"listing.active\"\n                let _9 := add(expr_231_slot, 0)\n                /// @src 0:2389:2411  \"listing.active = false\"\n                update_storage_value_offset_bool_to_bool(_9, expr_8)\n            }\n            /// @src 0:340:2531  \"contract CardTrading {...\"\n            function zero_value_for_split_array_struct_Listing_dyn() -> ret\n            { ret := 96 }\n            function array_allocation_size_array_struct_Listing_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_array_struct_Listing_dyn(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_struct_Listing_dyn(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function allocate_memory_struct_struct_Listing() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function read_from_storage_reference_type_struct_Listing(slot) -> value\n            {\n                value := allocate_memory_struct_struct_Listing()\n                let memberValue := read_from_storage_split_offset_address(add(slot, 0))\n                write_to_memory_address(add(value, 0), memberValue)\n                let memberValue_1 := read_from_storage_split_offset_t_uint8(add(slot, 0))\n                write_to_memory_uint8(add(value, 32), memberValue_1)\n                let memberValue_2 := read_from_storage_split_offset_uint8(add(slot, 0))\n                write_to_memory_uint8(add(value, 64), memberValue_2)\n                let memberValue_3 := read_from_storage_split_offset_bool(add(slot, 0))\n                write_to_memory_bool(add(value, 96), memberValue_3)\n            }\n            function convert_struct_Listing_storage_to_struct_Listing(value) -> converted\n            {\n                converted := read_from_storage_reference_type_struct_Listing(value)\n            }\n            function copy_array_from_storage_to_memory_array_struct_Listing__dyn(slot) -> memPtr\n            {\n                let length := array_length_array_struct_Listing_storage_dyn(slot)\n                memPtr := allocate_memory_array_array_struct_Listing_dyn(length)\n                let mpos := memPtr\n                mpos := add(mpos, 0x20)\n                let spos := array_dataslot_array_struct_Listing_storage_dyn(slot)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, convert_struct_Listing_storage_to_struct_Listing(spos))\n                    mpos := add(mpos, 0x20)\n                    spos := add(spos, 1)\n                }\n            }\n            function convert_array_array_struct_Listing_storage_dyn_to_array_struct_Listing_dyn(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_struct_Listing__dyn(value)\n            }\n            /// @ast-id 248 @src 0:2427:2528  \"function getAllListings() external view returns (Listing[] memory) {...\"\n            function fun_getAllListings() -> var_mpos\n            {\n                /// @src 0:2476:2492  \"Listing[] memory\"\n                let zero_array_struct_Listing_dyn_mpos := zero_value_for_split_array_struct_Listing_dyn()\n                var_mpos := zero_array_struct_Listing_dyn_mpos\n                /// @src 0:2512:2520  \"listings\"\n                let _28_slot := 0x00\n                let expr_245_slot := _28_slot\n                /// @src 0:2505:2520  \"return listings\"\n                var_mpos := convert_array_array_struct_Listing_storage_dyn_to_array_struct_Listing_dyn(expr_245_slot)\n                leave\n            }\n            /// @src 0:340:2531  \"contract CardTrading {...\"\n            function store_literal_in_memory_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Own listing\")\n            }\n            function abi_encode_stringliteral_5a8b(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 11)\n                store_literal_in_memory_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_5a8b(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_5a8b(tail)\n            }\n            function require_helper_stringliteral_5a8b(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_5a8b(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function abi_decode_fromMemory(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function abi_encode_address_address_uint8_rational_by(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_address(value1, add(headStart, 32))\n                abi_encode_uint8(value2, add(headStart, 64))\n                abi_encode_rational_by(value3, add(headStart, 96))\n            }\n            /// @ast-id 196 @src 0:1485:2087  \"function acceptListing(uint listingId) external {...\"\n            function fun_acceptListing(var_listingId)\n            {\n                /// @src 0:1552:1561  \"listingId\"\n                let _1 := var_listingId\n                let expr := _1\n                /// @src 0:1564:1572  \"listings\"\n                let _30_slot := 0x00\n                let expr_125_slot := _30_slot\n                /// @src 0:1564:1579  \"listings.length\"\n                let expr_1 := array_length_array_struct_Listing_storage_dyn(expr_125_slot)\n                /// @src 0:1552:1579  \"listingId < listings.length\"\n                let expr_2 := lt(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 0:1544:1594  \"require(listingId < listings.length, \\\"Invalid ID\\\")\"\n                require_helper_stringliteral_87f3(expr_2)\n                /// @src 0:1631:1639  \"listings\"\n                let _31_slot := 0x00\n                let expr_134_slot := _31_slot\n                /// @src 0:1640:1649  \"listingId\"\n                let _2 := var_listingId\n                let expr_3 := _2\n                /// @src 0:1631:1650  \"listings[listingId]\"\n                let _3, _4 := storage_array_index_access_struct_Listing__dyn(expr_134_slot, expr_3)\n                let _35_slot := _3\n                let expr_slot := _35_slot\n                /// @src 0:1605:1650  \"Listing storage listing = listings[listingId]\"\n                let var_listing_133_slot := convert_struct_Listing_storage_to_struct_Listing_ptr(expr_slot)\n                /// @src 0:1669:1676  \"listing\"\n                let _36_slot := var_listing_133_slot\n                let expr_139_slot := _36_slot\n                /// @src 0:1669:1683  \"listing.active\"\n                let _5 := add(expr_139_slot, 0)\n                let _6 := read_from_storage_split_offset_bool(_5)\n                let expr_4 := _6\n                /// @src 0:1661:1696  \"require(listing.active, \\\"Inactive\\\")\"\n                require_helper_stringliteral_8ab6(expr_4)\n                /// @src 0:1715:1725  \"msg.sender\"\n                let expr_5 := caller()\n                /// @src 0:1729:1736  \"listing\"\n                let _39_slot := var_listing_133_slot\n                let expr_147_slot := _39_slot\n                /// @src 0:1729:1743  \"listing.seller\"\n                let _7 := add(expr_147_slot, 0)\n                let _8 := read_from_storage_split_offset_address(_7)\n                let expr_6 := _8\n                /// @src 0:1715:1743  \"msg.sender != listing.seller\"\n                let expr_7 := iszero(eq(cleanup_address(expr_5), cleanup_address(expr_6)))\n                /// @src 0:1707:1759  \"require(msg.sender != listing.seller, \\\"Own listing\\\")\"\n                require_helper_stringliteral_5a8b(expr_7)\n                /// @src 0:1778:1787  \"inventory\"\n                let _address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_154_address := _address\n                /// @src 0:1778:1795  \"inventory.hasCard\"\n                let expr_155_address := convert_contract_IInventoryManager_to_address(expr_154_address)\n                let expr_155_functionSelector := 0x4dca8ce6\n                /// @src 0:1796:1806  \"msg.sender\"\n                let expr_8 := caller()\n                /// @src 0:1808:1815  \"listing\"\n                let _43_slot := var_listing_133_slot\n                let expr_158_slot := _43_slot\n                /// @src 0:1808:1829  \"listing.requestCardId\"\n                let _9 := add(expr_158_slot, 0)\n                let _10 := read_from_storage_split_offset_uint8(_9)\n                let expr_9 := _10\n                /// @src 0:1831:1832  \"1\"\n                let expr_10 := 0x01\n                /// @src 0:1778:1833  \"inventory.hasCard(msg.sender, listing.requestCardId, 1)\"\n                let _11 := allocate_unbounded()\n                mstore(_11, shift_left_224(expr_155_functionSelector))\n                let _12 := abi_encode_address_uint8_rational_by(add(_11, 4), expr_8, expr_9, expr_10)\n                let _13 := staticcall(gas(), expr_155_address, _11, sub(_12, _11), _11, 32)\n                if iszero(_13) { revert_forward() }\n                let expr_11\n                if _13\n                {\n                    let _14 := 32\n                    if gt(_14, returndatasize()) { _14 := returndatasize() }\n                    finalize_allocation(_11, _14)\n                    expr_11 := abi_decode_bool_fromMemory(_11, add(_11, _14))\n                }\n                /// @src 0:1770:1845  \"require(inventory.hasCard(msg.sender, listing.requestCardId, 1), \\\"No card\\\")\"\n                require_helper_stringliteral_ec62(expr_11)\n                /// @src 0:1881:1890  \"inventory\"\n                let _50_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_address := _50_address\n                /// @src 0:1881:1904  \"inventory.transferCards\"\n                let expr_167_address := convert_contract_IInventoryManager_to_address(expr_address)\n                let expr_167_functionSelector := 0x65352442\n                /// @src 0:1905:1915  \"msg.sender\"\n                let expr_12 := caller()\n                /// @src 0:1917:1924  \"listing\"\n                let _51_slot := var_listing_133_slot\n                let expr_170_slot := _51_slot\n                /// @src 0:1917:1931  \"listing.seller\"\n                let _15 := add(expr_170_slot, 0)\n                let _16 := read_from_storage_split_offset_address(_15)\n                let expr_13 := _16\n                /// @src 0:1933:1940  \"listing\"\n                let _54_slot := var_listing_133_slot\n                let expr_172_slot := _54_slot\n                /// @src 0:1933:1954  \"listing.requestCardId\"\n                let _17 := add(expr_172_slot, 0)\n                let _18 := read_from_storage_split_offset_uint8(_17)\n                let expr_14 := _18\n                /// @src 0:1956:1957  \"1\"\n                let expr_15 := 0x01\n                /// @src 0:1881:1958  \"inventory.transferCards(msg.sender, listing.seller, listing.requestCardId, 1)\"\n                if iszero(extcodesize(expr_167_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _19 := allocate_unbounded()\n                mstore(_19, shift_left_224(expr_167_functionSelector))\n                let _20 := abi_encode_address_address_uint8_rational_by(add(_19, 4), expr_12, expr_13, expr_14, expr_15)\n                let _21 := call(gas(), expr_167_address, 0, _19, sub(_20, _19), _19, 0)\n                if iszero(_21) { revert_forward() }\n                if _21\n                {\n                    let _22 := 0\n                    if gt(_22, returndatasize()) { _22 := returndatasize() }\n                    finalize_allocation(_19, _22)\n                    abi_decode_fromMemory(_19, add(_19, _22))\n                }\n                /// @src 0:1969:1978  \"inventory\"\n                let _61_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_177_address := _61_address\n                /// @src 0:1969:1992  \"inventory.transferCards\"\n                let expr_179_address := convert_contract_IInventoryManager_to_address(expr_177_address)\n                let expr_179_functionSelector := 0x65352442\n                /// @src 0:1993:2000  \"listing\"\n                let _62_slot := var_listing_133_slot\n                let expr_180_slot := _62_slot\n                /// @src 0:1993:2007  \"listing.seller\"\n                let _23 := add(expr_180_slot, 0)\n                let _24 := read_from_storage_split_offset_address(_23)\n                let expr_16 := _24\n                /// @src 0:2009:2019  \"msg.sender\"\n                let expr_17 := caller()\n                /// @src 0:2021:2028  \"listing\"\n                let _65_slot := var_listing_133_slot\n                let expr_184_slot := _65_slot\n                /// @src 0:2021:2040  \"listing.offerCardId\"\n                let _25 := add(expr_184_slot, 0)\n                let _26 := read_from_storage_split_offset_t_uint8(_25)\n                let expr_18 := _26\n                /// @src 0:2042:2043  \"1\"\n                let expr_19 := 0x01\n                /// @src 0:1969:2044  \"inventory.transferCards(listing.seller, msg.sender, listing.offerCardId, 1)\"\n                if iszero(extcodesize(expr_179_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _27 := allocate_unbounded()\n                mstore(_27, shift_left_224(expr_179_functionSelector))\n                let _28 := abi_encode_address_address_uint8_rational_by(add(_27, 4), expr_16, expr_17, expr_18, expr_19)\n                let _29 := call(gas(), expr_179_address, 0, _27, sub(_28, _27), _27, 0)\n                if iszero(_29) { revert_forward() }\n                if _29\n                {\n                    let _30 := 0\n                    if gt(_30, returndatasize()) { _30 := returndatasize() }\n                    finalize_allocation(_27, _30)\n                    abi_decode_fromMemory(_27, add(_27, _30))\n                }\n                /// @src 0:2074:2079  \"false\"\n                let expr_20 := 0x00\n                /// @src 0:2057:2064  \"listing\"\n                let _72_slot := var_listing_133_slot\n                let expr_189_slot := _72_slot\n                /// @src 0:2057:2071  \"listing.active\"\n                let _31 := add(expr_189_slot, 0)\n                /// @src 0:2057:2079  \"listing.active = false\"\n                update_storage_value_offset_bool_to_bool(_31, expr_20)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220f27d278bf545f2c5bc32d1032fc1a6f04692e7fa1d8b138d0750df421ac4940364736f6c634300081c0033\"\n    }\n}\n",
					"hash": "983df691bad5cef7b14527913b0fc420f22662a63794507be0eb46b317e85dcd",
					"factoryDependencies": {}
				},
				"IInventoryManager": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "hasCard",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								}
							],
							"name": "setTradingContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferCards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hasCard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTradingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CardTrading.sol\":\"IInventoryManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"CardTrading.sol\":{\"keccak256\":\"0x2ef60e15560393780414f21c56a51e990ca08fcdf57e055ae8baa009457aa9d4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6fe5716dc983950ecb5c2deae1dd2d39b0296f901e389615d328ba6cd4492f84\",\"dweb:/ipfs/QmebnfdvWaghu5JAihnjfHdfRGKiQQZbAid5h6VD621SYQ\"]}},\"version\":1}",
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"evm": {
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"hasCard(address,uint256,uint256)": "4dca8ce6",
							"setTradingContract(address)": "5be6f2c7",
							"transferCards(address,address,uint256,uint256)": "65352442"
						}
					},
					"irOptimized": ""
				}
			}
		},
		"sources": {
			"CardTrading.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "CardTrading.sol",
					"exportedSymbols": {
						"CardTrading": [
							249
						],
						"IInventoryManager": [
							29
						]
					},
					"id": 250,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IInventoryManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 29,
							"linearizedBaseContracts": [
								29
							],
							"name": "IInventoryManager",
							"nameLocation": "70:17:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "65352442",
									"id": 12,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferCards",
									"nameLocation": "104:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "126:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "118:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "118:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "140:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "132:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "132:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "149:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "144:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "144:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "162:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "157:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "157:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "117:52:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "178:0:0"
									},
									"scope": 29,
									"src": "95:84:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4dca8ce6",
									"id": 23,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasCard",
									"nameLocation": "194:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "210:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "202:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "202:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "221:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "216:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 15,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "216:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "234:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "229:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "229:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "201:40:0"
									},
									"returnParameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "265:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 20,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "265:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "264:6:0"
									},
									"scope": 29,
									"src": "185:86:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "5be6f2c7",
									"id": 28,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTradingContract",
									"nameLocation": "286:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "313:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "305:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 24,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "305:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "304:19:0"
									},
									"returnParameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "332:0:0"
									},
									"scope": 29,
									"src": "277:56:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 250,
							"src": "60:276:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CardTrading",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 249,
							"linearizedBaseContracts": [
								249
							],
							"name": "CardTrading",
							"nameLocation": "349:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "CardTrading.Listing",
									"id": 38,
									"members": [
										{
											"constant": false,
											"id": 31,
											"mutability": "mutable",
											"name": "seller",
											"nameLocation": "402:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 38,
											"src": "394:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 30,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "394:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 33,
											"mutability": "mutable",
											"name": "offerCardId",
											"nameLocation": "425:11:0",
											"nodeType": "VariableDeclaration",
											"scope": 38,
											"src": "419:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 32,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "419:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 35,
											"mutability": "mutable",
											"name": "requestCardId",
											"nameLocation": "453:13:0",
											"nodeType": "VariableDeclaration",
											"scope": 38,
											"src": "447:19:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 34,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "447:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 37,
											"mutability": "mutable",
											"name": "active",
											"nameLocation": "482:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 38,
											"src": "477:11:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 36,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "477:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Listing",
									"nameLocation": "375:7:0",
									"nodeType": "StructDefinition",
									"scope": 249,
									"src": "368:128:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "de74e57b",
									"id": 42,
									"mutability": "mutable",
									"name": "listings",
									"nameLocation": "521:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 249,
									"src": "504:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
										"typeString": "struct CardTrading.Listing[]"
									},
									"typeName": {
										"baseType": {
											"id": 40,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 39,
												"name": "Listing",
												"nameLocations": [
													"504:7:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "504:7:0"
											},
											"referencedDeclaration": 38,
											"src": "504:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
												"typeString": "struct CardTrading.Listing"
											}
										},
										"id": 41,
										"nodeType": "ArrayTypeName",
										"src": "504:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage_ptr",
											"typeString": "struct CardTrading.Listing[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "15d52a5c",
									"id": 45,
									"mutability": "mutable",
									"name": "inventory",
									"nameLocation": "561:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 249,
									"src": "536:34:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IInventoryManager_$29",
										"typeString": "contract IInventoryManager"
									},
									"typeName": {
										"id": 44,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 43,
											"name": "IInventoryManager",
											"nameLocations": [
												"536:17:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 29,
											"src": "536:17:0"
										},
										"referencedDeclaration": 29,
										"src": "536:17:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IInventoryManager_$29",
											"typeString": "contract IInventoryManager"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 47,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "592:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 249,
									"src": "577:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 46,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "577:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 75,
										"nodeType": "Block",
										"src": "644:407:0",
										"statements": [
											{
												"expression": {
													"id": 56,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 52,
														"name": "inventory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 45,
														"src": "655:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IInventoryManager_$29",
															"typeString": "contract IInventoryManager"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 54,
																"name": "inventoryAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 49,
																"src": "685:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 53,
															"name": "IInventoryManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "667:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IInventoryManager_$29_$",
																"typeString": "type(contract IInventoryManager)"
															}
														},
														"id": 55,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "667:35:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IInventoryManager_$29",
															"typeString": "contract IInventoryManager"
														}
													},
													"src": "655:47:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IInventoryManager_$29",
														"typeString": "contract IInventoryManager"
													}
												},
												"id": 57,
												"nodeType": "ExpressionStatement",
												"src": "655:47:0"
											},
											{
												"expression": {
													"id": 61,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 58,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 47,
														"src": "713:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 59,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "721:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 60,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "725:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "721:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "713:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 62,
												"nodeType": "ExpressionStatement",
												"src": "713:18:0"
											},
											{
												"clauses": [
													{
														"block": {
															"id": 70,
															"nodeType": "Block",
															"src": "871:83:0",
															"statements": []
														},
														"errorName": "",
														"id": 71,
														"nodeType": "TryCatchClause",
														"src": "871:83:0"
													},
													{
														"block": {
															"id": 72,
															"nodeType": "Block",
															"src": "961:83:0",
															"statements": []
														},
														"errorName": "",
														"id": 73,
														"nodeType": "TryCatchClause",
														"src": "955:89:0"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 67,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "864:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_CardTrading_$249",
																		"typeString": "contract CardTrading"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_CardTrading_$249",
																		"typeString": "contract CardTrading"
																	}
																],
																"id": 66,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "856:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 65,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "856:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 68,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "856:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 63,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "827:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInventoryManager_$29",
																"typeString": "contract IInventoryManager"
															}
														},
														"id": 64,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "837:18:0",
														"memberName": "setTradingContract",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 28,
														"src": "827:28:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address) external"
														}
													},
													"id": 69,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "827:43:0",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 74,
												"nodeType": "TryStatement",
												"src": "823:221:0"
											}
										]
									},
									"id": 76,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "inventoryAddress",
												"nameLocation": "626:16:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "618:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "618:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "617:26:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "644:0:0"
									},
									"scope": 249,
									"src": "606:445:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 117,
										"nodeType": "Block",
										"src": "1131:346:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 90,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 86,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 84,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 78,
																	"src": "1150:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "3137",
																	"id": 85,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1164:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_17_by_1",
																		"typeString": "int_const 17"
																	},
																	"value": "17"
																},
																"src": "1150:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 89,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 87,
																	"name": "requestCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 80,
																	"src": "1170:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "3137",
																	"id": 88,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1186:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_17_by_1",
																		"typeString": "int_const 17"
																	},
																	"value": "17"
																},
																"src": "1170:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1150:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c6964204944",
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1190:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															},
															"value": "Invalid ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															}
														],
														"id": 83,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1142:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 92,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1142:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 93,
												"nodeType": "ExpressionStatement",
												"src": "1142:61:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 97,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1240:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 98,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1244:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1240:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 99,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 78,
																	"src": "1252:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"hexValue": "31",
																	"id": 100,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1265:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	}
																],
																"expression": {
																	"id": 95,
																	"name": "inventory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 45,
																	"src": "1222:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IInventoryManager_$29",
																		"typeString": "contract IInventoryManager"
																	}
																},
																"id": 96,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1232:7:0",
																"memberName": "hasCard",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 23,
																"src": "1222:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,uint256) view external returns (bool)"
																}
															},
															"id": 101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1222:45:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2063617264",
															"id": 102,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1269:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															},
															"value": "No card"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															}
														],
														"id": 94,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1214:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1214:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "1214:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 109,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1337:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 110,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1341:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1337:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 111,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 78,
																	"src": "1375:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 112,
																	"name": "requestCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 80,
																	"src": "1416:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"hexValue": "74727565",
																	"id": 113,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1452:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 108,
																"name": "Listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 38,
																"src": "1306:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_struct$_Listing_$38_storage_ptr_$",
																	"typeString": "type(struct CardTrading.Listing storage pointer)"
																}
															},
															"id": 114,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "structConstructorCall",
															"lValueRequested": false,
															"nameLocations": [
																"1329:6:0",
																"1362:11:0",
																"1401:13:0",
																"1444:6:0"
															],
															"names": [
																"seller",
																"offerCardId",
																"requestCardId",
																"active"
															],
															"nodeType": "FunctionCall",
															"src": "1306:162:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$38_memory_ptr",
																"typeString": "struct CardTrading.Listing memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Listing_$38_memory_ptr",
																"typeString": "struct CardTrading.Listing memory"
															}
														],
														"expression": {
															"id": 105,
															"name": "listings",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 42,
															"src": "1292:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
																"typeString": "struct CardTrading.Listing storage ref[] storage ref"
															}
														},
														"id": 107,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1301:4:0",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "1292:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Listing_$38_storage_$dyn_storage_ptr_$_t_struct$_Listing_$38_storage_$returns$__$attached_to$_t_array$_t_struct$_Listing_$38_storage_$dyn_storage_ptr_$",
															"typeString": "function (struct CardTrading.Listing storage ref[] storage pointer,struct CardTrading.Listing storage ref)"
														}
													},
													"id": 115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1292:177:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 116,
												"nodeType": "ExpressionStatement",
												"src": "1292:177:0"
											}
										]
									},
									"functionSelector": "15a6f5cf",
									"id": 118,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createListing",
									"nameLocation": "1068:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "offerCardId",
												"nameLocation": "1088:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "1082:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 77,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1082:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "requestCardId",
												"nameLocation": "1107:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "1101:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 79,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1101:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:40:0"
									},
									"returnParameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1131:0:0"
									},
									"scope": 249,
									"src": "1059:418:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 195,
										"nodeType": "Block",
										"src": "1533:554:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 127,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 124,
																"name": "listingId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 120,
																"src": "1552:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 125,
																	"name": "listings",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 42,
																	"src": "1564:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
																		"typeString": "struct CardTrading.Listing storage ref[] storage ref"
																	}
																},
																"id": 126,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1573:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "1564:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1552:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c6964204944",
															"id": 128,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1581:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															},
															"value": "Invalid ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															}
														],
														"id": 123,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1544:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1544:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 130,
												"nodeType": "ExpressionStatement",
												"src": "1544:50:0"
											},
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "listing",
														"nameLocation": "1621:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 195,
														"src": "1605:23:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
															"typeString": "struct CardTrading.Listing"
														},
														"typeName": {
															"id": 132,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 131,
																"name": "Listing",
																"nameLocations": [
																	"1605:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 38,
																"src": "1605:7:0"
															},
															"referencedDeclaration": 38,
															"src": "1605:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																"typeString": "struct CardTrading.Listing"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 137,
												"initialValue": {
													"baseExpression": {
														"id": 134,
														"name": "listings",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 42,
														"src": "1631:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
															"typeString": "struct CardTrading.Listing storage ref[] storage ref"
														}
													},
													"id": 136,
													"indexExpression": {
														"id": 135,
														"name": "listingId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "1640:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1631:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Listing_$38_storage",
														"typeString": "struct CardTrading.Listing storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1605:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 139,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "1669:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 140,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1677:6:0",
															"memberName": "active",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 37,
															"src": "1669:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e616374697665",
															"id": 141,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1685:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646",
																"typeString": "literal_string \"Inactive\""
															},
															"value": "Inactive"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646",
																"typeString": "literal_string \"Inactive\""
															}
														],
														"id": 138,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1661:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1661:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 143,
												"nodeType": "ExpressionStatement",
												"src": "1661:35:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 145,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1715:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 146,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1719:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1715:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 147,
																	"name": "listing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "1729:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																		"typeString": "struct CardTrading.Listing storage pointer"
																	}
																},
																"id": 148,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1737:6:0",
																"memberName": "seller",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 31,
																"src": "1729:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1715:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e206c697374696e67",
															"id": 150,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1745:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226",
																"typeString": "literal_string \"Own listing\""
															},
															"value": "Own listing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226",
																"typeString": "literal_string \"Own listing\""
															}
														],
														"id": 144,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1707:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1707:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 152,
												"nodeType": "ExpressionStatement",
												"src": "1707:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 156,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1796:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1800:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1796:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"expression": {
																		"id": 158,
																		"name": "listing",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 133,
																		"src": "1808:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																			"typeString": "struct CardTrading.Listing storage pointer"
																		}
																	},
																	"id": 159,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1816:13:0",
																	"memberName": "requestCardId",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 35,
																	"src": "1808:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"hexValue": "31",
																	"id": 160,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1831:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	}
																],
																"expression": {
																	"id": 154,
																	"name": "inventory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 45,
																	"src": "1778:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IInventoryManager_$29",
																		"typeString": "contract IInventoryManager"
																	}
																},
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1788:7:0",
																"memberName": "hasCard",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 23,
																"src": "1778:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,uint256) view external returns (bool)"
																}
															},
															"id": 161,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1778:55:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2063617264",
															"id": 162,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1835:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															},
															"value": "No card"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															}
														],
														"id": 153,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1770:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1770:75:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 164,
												"nodeType": "ExpressionStatement",
												"src": "1770:75:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 168,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1905:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1909:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1905:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 170,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "1917:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 171,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1925:6:0",
															"memberName": "seller",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 31,
															"src": "1917:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 172,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "1933:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 173,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1941:13:0",
															"memberName": "requestCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 35,
															"src": "1933:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"hexValue": "31",
															"id": 174,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"expression": {
															"id": 165,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "1881:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInventoryManager_$29",
																"typeString": "contract IInventoryManager"
															}
														},
														"id": 167,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1891:13:0",
														"memberName": "transferCards",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 12,
														"src": "1881:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256) external"
														}
													},
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1881:77:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 176,
												"nodeType": "ExpressionStatement",
												"src": "1881:77:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 180,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "1993:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 181,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2001:6:0",
															"memberName": "seller",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 31,
															"src": "1993:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 182,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2009:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 183,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2013:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2009:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 184,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "2021:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 185,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2029:11:0",
															"memberName": "offerCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 33,
															"src": "2021:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"hexValue": "31",
															"id": 186,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2042:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"expression": {
															"id": 177,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "1969:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInventoryManager_$29",
																"typeString": "contract IInventoryManager"
															}
														},
														"id": 179,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1979:13:0",
														"memberName": "transferCards",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 12,
														"src": "1969:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256) external"
														}
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1969:75:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 188,
												"nodeType": "ExpressionStatement",
												"src": "1969:75:0"
											},
											{
												"expression": {
													"id": 193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 189,
															"name": "listing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "2057:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																"typeString": "struct CardTrading.Listing storage pointer"
															}
														},
														"id": 191,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2065:6:0",
														"memberName": "active",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 37,
														"src": "2057:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 192,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2074:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2057:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 194,
												"nodeType": "ExpressionStatement",
												"src": "2057:22:0"
											}
										]
									},
									"functionSelector": "b0eceb7e",
									"id": 196,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "acceptListing",
									"nameLocation": "1494:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "listingId",
												"nameLocation": "1513:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 196,
												"src": "1508:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 119,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1508:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1507:16:0"
									},
									"returnParameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1533:0:0"
									},
									"scope": 249,
									"src": "1485:602:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 237,
										"nodeType": "Block",
										"src": "2143:276:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 205,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 202,
																"name": "listingId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 198,
																"src": "2162:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 203,
																	"name": "listings",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 42,
																	"src": "2174:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
																		"typeString": "struct CardTrading.Listing storage ref[] storage ref"
																	}
																},
																"id": 204,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2183:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "2174:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2162:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c6964204944",
															"id": 206,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2191:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															},
															"value": "Invalid ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															}
														],
														"id": 201,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2154:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2154:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 208,
												"nodeType": "ExpressionStatement",
												"src": "2154:50:0"
											},
											{
												"assignments": [
													211
												],
												"declarations": [
													{
														"constant": false,
														"id": 211,
														"mutability": "mutable",
														"name": "listing",
														"nameLocation": "2231:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 237,
														"src": "2215:23:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
															"typeString": "struct CardTrading.Listing"
														},
														"typeName": {
															"id": 210,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 209,
																"name": "Listing",
																"nameLocations": [
																	"2215:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 38,
																"src": "2215:7:0"
															},
															"referencedDeclaration": 38,
															"src": "2215:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																"typeString": "struct CardTrading.Listing"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 215,
												"initialValue": {
													"baseExpression": {
														"id": 212,
														"name": "listings",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 42,
														"src": "2241:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
															"typeString": "struct CardTrading.Listing storage ref[] storage ref"
														}
													},
													"id": 214,
													"indexExpression": {
														"id": 213,
														"name": "listingId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 198,
														"src": "2250:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2241:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Listing_$38_storage",
														"typeString": "struct CardTrading.Listing storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2215:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 217,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 211,
																"src": "2279:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 218,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2287:6:0",
															"memberName": "active",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 37,
															"src": "2279:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e616374697665",
															"id": 219,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2295:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646",
																"typeString": "literal_string \"Inactive\""
															},
															"value": "Inactive"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646",
																"typeString": "literal_string \"Inactive\""
															}
														],
														"id": 216,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2271:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2271:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 221,
												"nodeType": "ExpressionStatement",
												"src": "2271:35:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 227,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 223,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2325:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 224,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2329:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2325:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 225,
																	"name": "listing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 211,
																	"src": "2339:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																		"typeString": "struct CardTrading.Listing storage pointer"
																	}
																},
																"id": 226,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2347:6:0",
																"memberName": "seller",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 31,
																"src": "2339:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2325:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f742073656c6c6572",
															"id": 228,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2355:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d2a48e91a46a0ba02fd0da530dfd130801a0855e981c9fd8ad2b4db688b1d01f",
																"typeString": "literal_string \"Not seller\""
															},
															"value": "Not seller"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d2a48e91a46a0ba02fd0da530dfd130801a0855e981c9fd8ad2b4db688b1d01f",
																"typeString": "literal_string \"Not seller\""
															}
														],
														"id": 222,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:51:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 230,
												"nodeType": "ExpressionStatement",
												"src": "2317:51:0"
											},
											{
												"expression": {
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 231,
															"name": "listing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 211,
															"src": "2389:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																"typeString": "struct CardTrading.Listing storage pointer"
															}
														},
														"id": 233,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2397:6:0",
														"memberName": "active",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 37,
														"src": "2389:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 234,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2406:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2389:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 236,
												"nodeType": "ExpressionStatement",
												"src": "2389:22:0"
											}
										]
									},
									"functionSelector": "305a67a8",
									"id": 238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cancelListing",
									"nameLocation": "2104:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "listingId",
												"nameLocation": "2123:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2118:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2118:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2117:16:0"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2143:0:0"
									},
									"scope": 249,
									"src": "2095:324:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 247,
										"nodeType": "Block",
										"src": "2494:34:0",
										"statements": [
											{
												"expression": {
													"id": 245,
													"name": "listings",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 42,
													"src": "2512:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
														"typeString": "struct CardTrading.Listing storage ref[] storage ref"
													}
												},
												"functionReturnParameters": 244,
												"id": 246,
												"nodeType": "Return",
												"src": "2505:15:0"
											}
										]
									},
									"functionSelector": "ae73ccec",
									"id": 248,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAllListings",
									"nameLocation": "2436:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2450:2:0"
									},
									"returnParameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "2476:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Listing_$38_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct CardTrading.Listing[]"
												},
												"typeName": {
													"baseType": {
														"id": 241,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 240,
															"name": "Listing",
															"nameLocations": [
																"2476:7:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 38,
															"src": "2476:7:0"
														},
														"referencedDeclaration": 38,
														"src": "2476:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
															"typeString": "struct CardTrading.Listing"
														}
													},
													"id": 242,
													"nodeType": "ArrayTypeName",
													"src": "2476:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage_ptr",
														"typeString": "struct CardTrading.Listing[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2475:18:0"
									},
									"scope": 249,
									"src": "2427:101:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 250,
							"src": "340:2191:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:2500:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}