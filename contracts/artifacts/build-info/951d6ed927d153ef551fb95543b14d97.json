{
	"id": "951d6ed927d153ef551fb95543b14d97",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"CardInventory.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.2 <0.9.0;\r\n\r\n\r\n\r\n\r\ncontract CardInventory {\r\n    mapping(address => mapping(uint => uint)) private cardBalances;\r\n\r\n\r\n    function addCard(address user, uint cardId, uint amount) external {\r\n        cardBalances[user][cardId] += amount;\r\n    }\r\n\r\n\r\n    function removeCard(address user, uint cardId, uint amount) external {\r\n        require(cardBalances[user][cardId] >= amount, \"Not enough cards\");\r\n        cardBalances[user][cardId] -= amount;\r\n    }\r\n\r\n\r\n    function getBalance(address user, uint cardId) external view returns (uint) {\r\n        return cardBalances[user][cardId];\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"CardInventory.sol": {
				"CardInventory": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "addCard",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								}
							],
							"name": "getBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "removeCard",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CardInventory.sol\":\"CardInventory\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"CardInventory.sol\":{\"keccak256\":\"0x01c80db43ea035f45b0e8d628ac6d96624b438283db1a028cbf7c03dbbb0d845\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a74736717bbb9ec6fae143864c29666906616529cedb93b5015991b1528c531c\",\"dweb:/ipfs/QmSu563K6Z5CE6EG7ujgiP9WTpDGwikXMEW3Vs6nT5sgp1\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "CardInventory.sol:CardInventory",
								"label": "cardBalances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_uint256)"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 3477\n// Code size = 10781 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 2 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 8 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @20 if a0 != 0\n      : @17 (gas: 3)\n   504: a0 = 0x40\n   507: a1 = 0x20\n   510: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   515: a1 = u8 [a0 + 0x11]\n   518: a2 = u8 [a0 + 0x10]\n   521: a3 = u8 [a0 + 0x12]\n   524: a4 = u8 [a0 + 0x13]\n   527: a1 = a1 << 0x8\n   530: a1 = a1 | a2\n   533: a3 = a3 << 0x10\n   536: a4 = a4 << 0x18\n   539: a3 = a3 | a4\n   542: a1 = a1 | a3\n   545: a2 = u8 [a0 + 0x15]\n   548: a3 = u8 [a0 + 0x14]\n   551: a4 = u8 [a0 + 0x16]\n   554: a5 = u8 [a0 + 0x17]\n   557: a2 = a2 << 0x8\n   560: a2 = a2 | a3\n   563: a4 = a4 << 0x10\n   566: a5 = a5 << 0x18\n   569: a4 = a4 | a5\n   572: a2 = a2 | a4\n   575: a2 = a2 << 0x20\n   578: t0 = a2 | a1\n   581: a2 = u8 [a0 + 0x1]\n   584: a3 = u8 [a0]\n   586: a4 = u8 [a0 + 0x2]\n   589: a5 = u8 [a0 + 0x3]\n   592: a2 = a2 << 0x8\n   595: a2 = a2 | a3\n   598: a4 = a4 << 0x10\n   601: a5 = a5 << 0x18\n   604: a4 = a4 | a5\n   607: a2 = a2 | a4\n   610: a3 = u8 [a0 + 0x5]\n   613: a4 = u8 [a0 + 0x4]\n   616: a5 = u8 [a0 + 0x6]\n   619: s1 = u8 [a0 + 0x7]\n   622: a3 = a3 << 0x8\n   625: a3 = a3 | a4\n   628: a5 = a5 << 0x10\n   631: s1 = s1 << 0x18\n   634: a5 = a5 | s1\n   637: a3 = a3 | a5\n   640: a3 = a3 << 0x20\n   643: a2 = a2 | a3\n   646: a3 = u8 [a0 + 0x19]\n   649: a4 = u8 [a0 + 0x18]\n   652: a5 = u8 [a0 + 0x1a]\n   655: s1 = u8 [a0 + 0x1b]\n   658: a3 = a3 << 0x8\n   661: a3 = a3 | a4\n   664: a5 = a5 << 0x10\n   667: s1 = s1 << 0x18\n   670: a5 = a5 | s1\n   673: a3 = a3 | a5\n   676: a4 = u8 [a0 + 0x1d]\n   679: a5 = u8 [a0 + 0x1c]\n   682: s1 = u8 [a0 + 0x1e]\n   685: a1 = u8 [a0 + 0x1f]\n   688: a4 = a4 << 0x8\n   691: a4 = a4 | a5\n   694: s1 = s1 << 0x10\n   697: a1 = a1 << 0x18\n   700: a1 = a1 | s1\n   703: a1 = a1 | a4\n   706: a1 = a1 << 0x20\n   709: a3 = a3 | a1\n   712: a1 = u8 [a0 + 0x9]\n   715: a4 = u8 [a0 + 0x8]\n   718: a5 = u8 [a0 + 0xa]\n   721: s1 = u8 [a0 + 0xb]\n   724: a1 = a1 << 0x8\n   727: a1 = a1 | a4\n   730: a5 = a5 << 0x10\n   733: s1 = s1 << 0x18\n   736: a5 = a5 | s1\n   739: a1 = a1 | a5\n   742: a4 = u8 [a0 + 0xd]\n   745: a5 = u8 [a0 + 0xc]\n   748: s1 = u8 [a0 + 0xe]\n   751: a0 = u8 [a0 + 0xf]\n   754: a4 = a4 << 0x8\n   757: a4 = a4 | a5\n   760: s1 = s1 << 0x10\n   763: a0 = a0 << 0x18\n   766: a0 = a0 | s1\n   769: a0 = a0 | a4\n   772: a0 = a0 << 0x20\n   775: a0 = a0 | a1\n   778: a0 = reverse a0\n   780: s1 = reverse a3\n   782: a1 = reverse a2\n   784: a2 = reverse t0\n   786: a1 = a1 | a2\n   789: a2 = s1 | a0\n   792: a2 = a2 | a1\n   795: a2 = a2 >> 0x20\n   798: a0 = a0 | a1\n   801: a0 = a0 << 0x20\n   804: a0 = a0 | a2\n   807: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   810: trap\n      : @20 (gas: 3)\n   811: a0 = 0\n   813: a1 = 0\n   815: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   820: i32 a1 = a0 + 0\n   822: a0 = 0x1\n   825: a2 = 0\n   827: ecalli 5 // 'seal_return'\n   829: fallthrough\n      : @22 (gas: 4)\n   830: i32 s1 = s1 + 0\n   832: a0 = s1\n   834: a1 = 0\n   836: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   841: i32 a0 = a0 + 0\n   843: a1 = 0\n   845: a2 = 0\n   847: ecalli 0 // 'call_data_copy'\n   848: fallthrough\n      : @24 (gas: 2)\n   849: a1 = i32 [0x20008]\n   854: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   857: a0 = 0x30010\n   862: i32 a0 = a0 + 0\n   864: ecalli 6 // 'set_immutable_data'\n   866: fallthrough\n      : @26 (gas: 3)\n   867: a0 = s1\n   869: a1 = 0\n   871: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   876: i32 a1 = a0 + 0\n   878: a0 = 0\n   880: a2 = 0\n   882: ra = 0x12\n   885: ecalli 5 // 'seal_return'\n   887: fallthrough\n      : @28 [@dyn 9] (gas: 8)\n   888: sp = sp + 0xffffffffffffffc0\n   891: u64 [sp + 0x38] = ra\n   894: u64 [sp + 0x30] = s0\n   897: s0 = sp + 0x40\n   900: sp = sp & 0xffffffffffffffe0\n   903: a0 = 0x40\n   906: a1 = 0x20\n   909: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 34)\n   914: u8 [a0 + 31] = 0x80\n   919: u8 [a0 + 30] = 0\n   922: u8 [a0 + 29] = 0\n   925: u8 [a0 + 28] = 0\n   928: u8 [a0 + 27] = 0\n   931: u8 [a0 + 26] = 0\n   934: u8 [a0 + 25] = 0\n   937: u8 [a0 + 24] = 0\n   940: u8 [a0 + 23] = 0\n   943: u8 [a0 + 22] = 0\n   946: u8 [a0 + 21] = 0\n   949: u8 [a0 + 20] = 0\n   952: u8 [a0 + 19] = 0\n   955: u8 [a0 + 18] = 0\n   958: u8 [a0 + 17] = 0\n   961: u8 [a0 + 16] = 0\n   964: u8 [a0 + 15] = 0\n   967: u8 [a0 + 14] = 0\n   970: u8 [a0 + 13] = 0\n   973: u8 [a0 + 12] = 0\n   976: u8 [a0 + 11] = 0\n   979: u8 [a0 + 10] = 0\n   982: u8 [a0 + 9] = 0\n   985: u8 [a0 + 8] = 0\n   988: u8 [a0 + 7] = 0\n   991: u8 [a0 + 3] = 0\n   994: u8 [a0 + 2] = 0\n   997: u8 [a0 + 1] = 0\n  1000: u8 [a0 + 0] = 0\n  1002: a1 = i32 [0x20004]\n  1007: u8 [a0 + 6] = 0\n  1010: u8 [a0 + 5] = 0\n  1013: u8 [a0 + 4] = 0\n  1016: jump @35 if a1 <u 4\n      : @30 (gas: 4)\n  1020: i32 a0 = sp + 0\n  1022: a1 = 0\n  1024: ecalli 1 // 'call_data_load'\n  1026: fallthrough\n      : @31 (gas: 2)\n  1027: a0 = i32 [sp + 0x1c]\n  1030: jump @37 if a0 == 721741888\n      : @32 (gas: 1)\n  1037: jump @36 if a0 == 760790400\n      : @33 (gas: 1)\n  1044: jump @35 if a0 != 910284582\n      : @34 (gas: 1)\n  1051: ra = 22, jump @86\n      : @35 [@dyn 11] (gas: 1)\n  1056: ra = 24, jump @97\n      : @36 [@dyn 12] (gas: 14)\n  1061: ra = 0x1a\n  1064: sp = sp + 0xfffffffffffffea0\n  1068: u64 [sp + 0x158] = ra\n  1072: u64 [sp + 0x150] = s0\n  1076: u64 [sp + 0x148] = s1\n  1080: s0 = sp + 0x160\n  1084: sp = sp & 0xffffffffffffffe0\n  1087: u64 [sp + 312] = 0\n  1091: u64 [sp + 304] = 0\n  1095: u64 [sp + 296] = 0\n  1099: u64 [sp + 288] = 0\n  1103: i32 a0 = sp + 0x120\n  1107: ecalli 8 // 'value_transferred'\n  1109: jump @76\n      : @37 [@dyn 13] (gas: 14)\n  1112: ra = 0x1c\n  1115: sp = sp + 0xfffffffffffffec0\n  1119: u64 [sp + 0x138] = ra\n  1123: u64 [sp + 0x130] = s0\n  1127: u64 [sp + 0x128] = s1\n  1131: s0 = sp + 0x140\n  1135: sp = sp & 0xffffffffffffffe0\n  1138: u64 [sp + 280] = 0\n  1142: u64 [sp + 272] = 0\n  1146: u64 [sp + 264] = 0\n  1150: u64 [sp + 256] = 0\n  1154: i32 a0 = sp + 0x100\n  1158: ecalli 8 // 'value_transferred'\n  1160: jump @53\n      : @38 [@dyn 14] (gas: 7)\n  1163: sp = sp + 0xfffffffffffffff0\n  1166: u64 [sp + 0x8] = ra\n  1169: u64 [sp] = s0\n  1171: s0 = a0\n  1173: a0 = 0x40\n  1176: a1 = 0x20\n  1179: ra = 30, jump @0\n      : @39 [@dyn 15] (gas: 100)\n  1184: a1 = u8 [a0 + 0x1]\n  1187: a2 = u8 [a0]\n  1189: a3 = u8 [a0 + 0x2]\n  1192: a4 = u8 [a0 + 0x3]\n  1195: a1 = a1 << 0x8\n  1198: a1 = a1 | a2\n  1201: a3 = a3 << 0x10\n  1204: a4 = a4 << 0x18\n  1207: a3 = a3 | a4\n  1210: a1 = a1 | a3\n  1213: a2 = u8 [a0 + 0x5]\n  1216: a3 = u8 [a0 + 0x4]\n  1219: a4 = u8 [a0 + 0x6]\n  1222: a5 = u8 [a0 + 0x7]\n  1225: a2 = a2 << 0x8\n  1228: a2 = a2 | a3\n  1231: a4 = a4 << 0x10\n  1234: a5 = a5 << 0x18\n  1237: a4 = a4 | a5\n  1240: a2 = a2 | a4\n  1243: a2 = a2 << 0x20\n  1246: t0 = a2 | a1\n  1249: a2 = u8 [a0 + 0x9]\n  1252: a3 = u8 [a0 + 0x8]\n  1255: a4 = u8 [a0 + 0xa]\n  1258: a5 = u8 [a0 + 0xb]\n  1261: a2 = a2 << 0x8\n  1264: a2 = a2 | a3\n  1267: a4 = a4 << 0x10\n  1270: a5 = a5 << 0x18\n  1273: a4 = a4 | a5\n  1276: a2 = a2 | a4\n  1279: a3 = u8 [a0 + 0xd]\n  1282: a4 = u8 [a0 + 0xc]\n  1285: a5 = u8 [a0 + 0xe]\n  1288: a1 = u8 [a0 + 0xf]\n  1291: a3 = a3 << 0x8\n  1294: a3 = a3 | a4\n  1297: a5 = a5 << 0x10\n  1300: a1 = a1 << 0x18\n  1303: a1 = a1 | a5\n  1306: a1 = a1 | a3\n  1309: a1 = a1 << 0x20\n  1312: t1 = a1 | a2\n  1315: a1 = u8 [a0 + 0x11]\n  1318: a3 = u8 [a0 + 0x10]\n  1321: a4 = u8 [a0 + 0x12]\n  1324: a5 = u8 [a0 + 0x13]\n  1327: a1 = a1 << 0x8\n  1330: a1 = a1 | a3\n  1333: a4 = a4 << 0x10\n  1336: a5 = a5 << 0x18\n  1339: a4 = a4 | a5\n  1342: a1 = a1 | a4\n  1345: a3 = u8 [a0 + 0x15]\n  1348: a4 = u8 [a0 + 0x14]\n  1351: a5 = u8 [a0 + 0x16]\n  1354: a2 = u8 [a0 + 0x17]\n  1357: a3 = a3 << 0x8\n  1360: a3 = a3 | a4\n  1363: a5 = a5 << 0x10\n  1366: a2 = a2 << 0x18\n  1369: a2 = a2 | a5\n  1372: a2 = a2 | a3\n  1375: a2 = a2 << 0x20\n  1378: a3 = a2 | a1\n  1381: a1 = u8 [a0 + 0x19]\n  1384: a2 = u8 [a0 + 0x18]\n  1387: a4 = u8 [a0 + 0x1a]\n  1390: a5 = u8 [a0 + 0x1b]\n  1393: a1 = a1 << 0x8\n  1396: a1 = a1 | a2\n  1399: a4 = a4 << 0x10\n  1402: a5 = a5 << 0x18\n  1405: a4 = a4 | a5\n  1408: a1 = a1 | a4\n  1411: a2 = u8 [a0 + 0x1d]\n  1414: a4 = u8 [a0 + 0x1c]\n  1417: a5 = u8 [a0 + 0x1e]\n  1420: a0 = u8 [a0 + 0x1f]\n  1423: a2 = a2 << 0x8\n  1426: a2 = a2 | a4\n  1429: a5 = a5 << 0x10\n  1432: a0 = a0 << 0x18\n  1435: a0 = a0 | a5\n  1438: a0 = a0 | a2\n  1441: a0 = a0 << 0x20\n  1444: a0 = a0 | a1\n  1447: a0 = reverse a0\n  1449: a1 = reverse a3\n  1451: a2 = reverse t1\n  1453: a3 = reverse t0\n  1455: u64 [s0 + 0x18] = a3\n  1458: u64 [s0 + 0x10] = a2\n  1461: u64 [s0 + 0x8] = a1\n  1464: u64 [s0] = a0\n  1466: ra = u64 [sp + 0x8]\n  1469: s0 = u64 [sp]\n  1471: sp = sp + 0x10\n  1474: ret\n      : @40 (gas: 47)\n  1476: sp = sp + 0xffffffffffffff80\n  1479: u64 [sp + 0x78] = ra\n  1482: u64 [sp + 0x70] = s0\n  1485: u64 [sp + 0x68] = s1\n  1488: s0 = sp + 0x80\n  1492: sp = sp & 0xffffffffffffffe0\n  1495: ra = u64 [a1 + 0x10]\n  1498: a5 = u64 [a1 + 0x8]\n  1501: a3 = u64 [a2 + 0x8]\n  1504: t1 = u64 [a1]\n  1506: a4 = u64 [a2]\n  1508: u64 [sp + 0x28] = a4\n  1511: t2 = u64 [a2 + 0x10]\n  1514: t0 = a3 ^ a5\n  1517: s1 = a3 <u a5\n  1520: a4 = a4 <u t1\n  1523: u64 [sp + 0x20] = a4\n  1526: s1 = a4 if t0 == 0\n  1529: t0 = u64 [a1 + 0x18]\n  1532: a1 = u64 [a2 + 0x18]\n  1535: u64 [sp + 0x18] = a1\n  1538: a2 = t2 - ra\n  1541: a1 = a2 - s1\n  1544: u64 [sp + 0x30] = a1\n  1547: a1 = a2 <u s1\n  1550: a4 = t2 <u ra\n  1553: u64 [sp + 0x38] = t0\n  1556: a2 = u64 [sp + 0x18]\n  1559: a2 = a2 - t0\n  1562: a2 = a2 - a4\n  1565: a2 = a2 - a1\n  1568: a1 = a3 - a5\n  1571: a3 = u64 [sp + 0x20]\n  1574: a1 = a1 - a3\n  1577: a3 = u64 [sp + 0x28]\n  1580: a3 = a3 - t1\n  1583: a4 = a1 >u 0\n  1585: a3 = a3 <u 0x40\n  1588: a3 = a3 ^ 0x1\n  1591: a3 = a4 if a1 != 0\n  1594: s1 = a2 >s 0\n  1596: a1 = u64 [sp + 0x30]\n  1599: a4 = a1 >u 0\n  1601: a4 = s1 if a2 != 0\n  1604: a1 = a1 | a2\n  1607: a3 = a4 if a1 != 0\n  1610: jump @47 if a3 == 0\n      : @41 (gas: 12)\n  1614: s1 = a0\n  1616: a0 = t1 | ra\n  1619: u64 [sp + 0x30] = a5\n  1622: a1 = u64 [sp + 0x38]\n  1625: a1 = a1 | a5\n  1628: a0 = a0 | a1\n  1631: a0 = a0 >> 0x20\n  1634: u64 [sp + 0x28] = ra\n  1637: a1 = a1 | ra\n  1640: a1 = a1 << 0x20\n  1643: a0 = a0 | a1\n  1646: jump @46 if a0 != 0\n      : @42 (gas: 6)\n  1650: u64 [sp + 0x20] = t1\n  1653: i32 a1 = t1 + 0\n  1655: i32 a0 = sp + 0x40\n  1658: u64 [sp + 0x8] = a1\n  1661: ecalli 1 // 'call_data_load'\n  1663: fallthrough\n      : @43 (gas: 10)\n  1664: a3 = u64 [sp + 0x50]\n  1667: a4 = u64 [sp + 0x58]\n  1670: a0 = 0x100000000\n  1680: a1 = a3 ^ a0\n  1683: a1 = a1 | a4\n  1686: a2 = a3 >> 0x20\n  1689: a2 = a2 <u 0x1\n  1692: a2 = 0 if a4 != 0\n  1694: a2 = 0 if a1 == 0\n  1696: jump @47 if a2 == 0\n      : @44 (gas: 12)\n  1700: u64 [sp + 0x10] = a4\n  1703: u64 [sp + 0x18] = a3\n  1706: a1 = u64 [sp + 0x28]\n  1709: a2 = u64 [sp + 0x38]\n  1712: a1 = a1 | a2\n  1715: a0 = 0xffffffe0\n  1725: a2 = u64 [sp + 0x20]\n  1728: a0 = a2 <u a0\n  1731: a2 = u64 [sp + 0x30]\n  1734: a0 = 0 if a2 != 0\n  1736: a0 = 0 if a1 != 0\n  1738: jump @46 if a0 == 0\n      : @45 (gas: 30)\n  1741: a0 = u64 [sp + 0x48]\n  1744: u64 [sp + 0x30] = a0\n  1747: a0 = u64 [sp + 0x40]\n  1750: u64 [sp + 0x38] = a0\n  1753: a0 = u64 [sp + 0x8]\n  1756: i32 a1 = a0 + 0x20\n  1759: i32 a0 = sp + 0x40\n  1762: ecalli 1 // 'call_data_load'\n  1764: a0 = u64 [sp + 0x58]\n  1767: a1 = u64 [sp + 0x50]\n  1770: a2 = u64 [sp + 0x48]\n  1773: a3 = u64 [sp + 0x40]\n  1776: u64 [s1 + 0x38] = a0\n  1779: u64 [s1 + 0x30] = a1\n  1782: u64 [s1 + 0x28] = a2\n  1785: u64 [s1 + 0x20] = a3\n  1788: a0 = u64 [sp + 0x10]\n  1791: u64 [s1 + 0x18] = a0\n  1794: a0 = u64 [sp + 0x18]\n  1797: u64 [s1 + 0x10] = a0\n  1800: a0 = u64 [sp + 0x30]\n  1803: u64 [s1 + 0x8] = a0\n  1806: a0 = u64 [sp + 0x38]\n  1809: u64 [s1] = a0\n  1811: sp = s0 + 0xffffffffffffff80\n  1814: ra = u64 [sp + 0x78]\n  1817: s0 = u64 [sp + 0x70]\n  1820: s1 = u64 [sp + 0x68]\n  1823: sp = sp + 0x80\n  1827: ret\n      : @46 (gas: 1)\n  1829: trap\n      : @47 (gas: 3)\n  1830: a0 = 0\n  1832: a1 = 0\n  1834: ra = 32, jump @0\n      : @48 [@dyn 16] (gas: 6)\n  1839: i32 a1 = a0 + 0\n  1841: a0 = 0x1\n  1844: a2 = 0\n  1846: ra = 0x22\n  1849: ecalli 5 // 'seal_return'\n  1851: fallthrough\n      : @49 [@dyn 17] (gas: 12)\n  1852: a2 = u64 [a1 + 0x10]\n  1855: a3 = u64 [a1 + 0x18]\n  1858: a4 = u64 [a1 + 0x8]\n  1861: a1 = u64 [a1]\n  1863: a3 = a3 | a4\n  1866: a4 = a1 | a2\n  1869: a4 = a4 | a3\n  1872: a4 = a4 >> 0x20\n  1875: a2 = a2 | a3\n  1878: a2 = a2 << 0x20\n  1881: a2 = a2 | a4\n  1884: jump @52 if a2 != 0\n      : @50 (gas: 13)\n  1888: sp = sp + 0xffffffffffffffd8\n  1891: u64 [sp + 0x20] = ra\n  1894: u64 [sp + 0x18] = s0\n  1897: u64 [sp + 0x10] = s1\n  1900: s0 = u64 [a0 + 0x18]\n  1903: s1 = u64 [a0 + 0x10]\n  1906: a2 = u64 [a0 + 0x8]\n  1909: u64 [sp] = a2\n  1911: a0 = u64 [a0]\n  1913: u64 [sp + 0x8] = a0\n  1916: i32 a0 = a1 + 0\n  1918: a1 = 0x20\n  1921: ra = 36, jump @0\n      : @51 [@dyn 18] (gas: 71)\n  1926: a1 = reverse s0\n  1928: a2 = reverse s1\n  1930: a3 = u64 [sp]\n  1932: a3 = reverse a3\n  1934: a4 = u64 [sp + 0x8]\n  1937: a4 = reverse a4\n  1939: a5 = a4 >> 0x38\n  1942: u8 [a0 + 0x1f] = a5\n  1945: a5 = a4 >> 0x30\n  1948: u8 [a0 + 0x1e] = a5\n  1951: a5 = a4 >> 0x28\n  1954: u8 [a0 + 0x1d] = a5\n  1957: a5 = a4 >> 0x20\n  1960: u8 [a0 + 0x1c] = a5\n  1963: a5 = a4 >> 0x18\n  1966: u8 [a0 + 0x1b] = a5\n  1969: a5 = a4 >> 0x10\n  1972: u8 [a0 + 0x1a] = a5\n  1975: a5 = a4 >> 0x8\n  1978: u8 [a0 + 0x19] = a5\n  1981: u8 [a0 + 0x18] = a4\n  1984: u8 [a0 + 0x10] = a3\n  1987: a4 = a3 >> 0x38\n  1990: u8 [a0 + 0x17] = a4\n  1993: a4 = a3 >> 0x30\n  1996: u8 [a0 + 0x16] = a4\n  1999: a4 = a3 >> 0x28\n  2002: u8 [a0 + 0x15] = a4\n  2005: a4 = a3 >> 0x20\n  2008: u8 [a0 + 0x14] = a4\n  2011: a4 = a3 >> 0x18\n  2014: u8 [a0 + 0x13] = a4\n  2017: a4 = a3 >> 0x10\n  2020: u8 [a0 + 0x12] = a4\n  2023: a3 = a3 >> 0x8\n  2026: u8 [a0 + 0x11] = a3\n  2029: u8 [a0 + 0x8] = a2\n  2032: a3 = a2 >> 0x38\n  2035: u8 [a0 + 0xf] = a3\n  2038: a3 = a2 >> 0x30\n  2041: u8 [a0 + 0xe] = a3\n  2044: a3 = a2 >> 0x28\n  2047: u8 [a0 + 0xd] = a3\n  2050: a3 = a2 >> 0x20\n  2053: u8 [a0 + 0xc] = a3\n  2056: a3 = a2 >> 0x18\n  2059: u8 [a0 + 0xb] = a3\n  2062: a3 = a2 >> 0x10\n  2065: u8 [a0 + 0xa] = a3\n  2068: a2 = a2 >> 0x8\n  2071: u8 [a0 + 0x9] = a2\n  2074: u8 [a0] = a1\n  2076: a2 = a1 >> 0x38\n  2079: u8 [a0 + 0x7] = a2\n  2082: a2 = a1 >> 0x30\n  2085: u8 [a0 + 0x6] = a2\n  2088: a2 = a1 >> 0x28\n  2091: u8 [a0 + 0x5] = a2\n  2094: a2 = a1 >> 0x20\n  2097: u8 [a0 + 0x4] = a2\n  2100: a2 = a1 >> 0x18\n  2103: u8 [a0 + 0x3] = a2\n  2106: a2 = a1 >> 0x10\n  2109: u8 [a0 + 0x2] = a2\n  2112: a1 = a1 >> 0x8\n  2115: u8 [a0 + 0x1] = a1\n  2118: ra = u64 [sp + 0x20]\n  2121: s0 = u64 [sp + 0x18]\n  2124: s1 = u64 [sp + 0x10]\n  2127: sp = sp + 0x28\n  2130: ret\n      : @52 (gas: 1)\n  2132: trap\n      : @53 (gas: 8)\n  2133: a0 = u64 [sp + 0x110]\n  2137: a1 = u64 [sp + 0x118]\n  2141: a2 = u64 [sp + 0x108]\n  2145: a3 = u64 [sp + 0x100]\n  2149: a1 = a1 | a2\n  2152: a0 = a0 | a3\n  2155: a0 = a0 | a1\n  2158: jump @59 if a0 != 0\n      : @54 (gas: 13)\n  2162: a0 = u32 [0x20004]\n  2167: u64 [sp + 152] = 0\n  2171: u64 [sp + 144] = 0\n  2175: u64 [sp + 136] = 0\n  2179: u64 [sp + 0x80] = a0\n  2183: u64 [sp + 184] = 0\n  2187: u64 [sp + 176] = 0\n  2191: u64 [sp + 160] = 0x4\n  2196: a0 = sp + 0xc0\n  2200: a1 = sp + 0xa0\n  2204: a2 = sp + 0x80\n  2208: u64 [sp + 168] = 0\n  2212: ra = 38, jump @40\n      : @55 [@dyn 19] (gas: 44)\n  2217: t0 = u64 [sp + 0xc0]\n  2221: a0 = u64 [sp + 0xc8]\n  2225: a1 = u64 [sp + 0xd0]\n  2229: a2 = u64 [sp + 0xd8]\n  2233: a4 = u64 [sp + 0xe0]\n  2237: a5 = u64 [sp + 0xe8]\n  2241: s1 = u64 [sp + 0xf0]\n  2245: a3 = u64 [sp + 0xf8]\n  2249: u64 [sp + 0x38] = a3\n  2252: u64 [sp + 0x30] = s1\n  2255: u64 [sp + 0x28] = a5\n  2258: u64 [sp + 0x20] = a4\n  2261: u64 [sp + 0x58] = a2\n  2264: u64 [sp + 0x50] = a1\n  2267: u64 [sp + 0x48] = a0\n  2270: a0 = sp + 0x60\n  2273: a1 = sp + 0x40\n  2276: a2 = sp + 0x20\n  2279: u64 [sp + 0x40] = t0\n  2282: ra = 0x28\n  2285: sp = sp + 0xffffffffffffff60\n  2289: u64 [sp + 0x98] = ra\n  2293: u64 [sp + 0x90] = s0\n  2297: u64 [sp + 0x88] = s1\n  2301: s0 = sp + 0xa0\n  2305: sp = sp & 0xffffffffffffffe0\n  2308: a3 = u64 [a2]\n  2310: u64 [sp + 0x30] = a3\n  2313: a3 = u64 [a2 + 0x8]\n  2316: u64 [sp + 0x28] = a3\n  2319: a3 = u64 [a2 + 0x10]\n  2322: u64 [sp + 0x20] = a3\n  2325: a2 = u64 [a2 + 0x18]\n  2328: u64 [sp + 0x18] = a2\n  2331: a2 = u64 [a1]\n  2333: u64 [sp + 0x10] = a2\n  2336: a2 = u64 [a1 + 0x8]\n  2339: u64 [sp + 0x8] = a2\n  2342: s1 = u32 [a1 + 0x10]\n  2345: u64 [sp + 0x38] = a0\n  2348: a1 = 0x20\n  2351: a0 = 0\n  2353: ra = 0x54\n  2356: jump @0\n      : @56 [@dyn 20] (gas: 11)\n  2359: a0 = u64 [sp + 0x78]\n  2362: u64 [sp] = a0\n  2364: a0 = u64 [sp + 0x70]\n  2367: u64 [sp + 0x8] = a0\n  2370: a0 = u64 [sp + 0x68]\n  2373: u64 [sp + 0x10] = a0\n  2376: a0 = u64 [sp + 0x60]\n  2379: u64 [sp + 0x18] = a0\n  2382: a0 = 0x40\n  2385: a1 = 0x20\n  2388: ra = 42, jump @0\n      : @57 [@dyn 21] (gas: 100)\n  2393: a1 = u8 [a0 + 0x11]\n  2396: a2 = u8 [a0 + 0x10]\n  2399: a3 = u8 [a0 + 0x12]\n  2402: a4 = u8 [a0 + 0x13]\n  2405: a1 = a1 << 0x8\n  2408: a1 = a1 | a2\n  2411: a3 = a3 << 0x10\n  2414: a4 = a4 << 0x18\n  2417: a3 = a3 | a4\n  2420: a1 = a1 | a3\n  2423: a2 = u8 [a0 + 0x15]\n  2426: a3 = u8 [a0 + 0x14]\n  2429: a4 = u8 [a0 + 0x16]\n  2432: a5 = u8 [a0 + 0x17]\n  2435: a2 = a2 << 0x8\n  2438: a2 = a2 | a3\n  2441: a4 = a4 << 0x10\n  2444: a5 = a5 << 0x18\n  2447: a4 = a4 | a5\n  2450: a2 = a2 | a4\n  2453: a2 = a2 << 0x20\n  2456: t0 = a2 | a1\n  2459: a2 = u8 [a0 + 0x1]\n  2462: a3 = u8 [a0]\n  2464: a4 = u8 [a0 + 0x2]\n  2467: a5 = u8 [a0 + 0x3]\n  2470: a2 = a2 << 0x8\n  2473: a2 = a2 | a3\n  2476: a4 = a4 << 0x10\n  2479: a5 = a5 << 0x18\n  2482: a4 = a4 | a5\n  2485: a2 = a2 | a4\n  2488: a3 = u8 [a0 + 0x5]\n  2491: a4 = u8 [a0 + 0x4]\n  2494: a5 = u8 [a0 + 0x6]\n  2497: s1 = u8 [a0 + 0x7]\n  2500: a3 = a3 << 0x8\n  2503: a3 = a3 | a4\n  2506: a5 = a5 << 0x10\n  2509: s1 = s1 << 0x18\n  2512: a5 = a5 | s1\n  2515: a3 = a3 | a5\n  2518: a3 = a3 << 0x20\n  2521: a2 = a2 | a3\n  2524: a3 = u8 [a0 + 0x19]\n  2527: a4 = u8 [a0 + 0x18]\n  2530: a5 = u8 [a0 + 0x1a]\n  2533: s1 = u8 [a0 + 0x1b]\n  2536: a3 = a3 << 0x8\n  2539: a3 = a3 | a4\n  2542: a5 = a5 << 0x10\n  2545: s1 = s1 << 0x18\n  2548: a5 = a5 | s1\n  2551: a3 = a3 | a5\n  2554: a4 = u8 [a0 + 0x1d]\n  2557: a5 = u8 [a0 + 0x1c]\n  2560: s1 = u8 [a0 + 0x1e]\n  2563: a1 = u8 [a0 + 0x1f]\n  2566: a4 = a4 << 0x8\n  2569: a4 = a4 | a5\n  2572: s1 = s1 << 0x10\n  2575: a1 = a1 << 0x18\n  2578: a1 = a1 | s1\n  2581: a1 = a1 | a4\n  2584: a1 = a1 << 0x20\n  2587: a3 = a3 | a1\n  2590: a1 = u8 [a0 + 0x9]\n  2593: a4 = u8 [a0 + 0x8]\n  2596: a5 = u8 [a0 + 0xa]\n  2599: s1 = u8 [a0 + 0xb]\n  2602: a1 = a1 << 0x8\n  2605: a1 = a1 | a4\n  2608: a5 = a5 << 0x10\n  2611: s1 = s1 << 0x18\n  2614: a5 = a5 | s1\n  2617: a1 = a1 | a5\n  2620: a4 = u8 [a0 + 0xd]\n  2623: a5 = u8 [a0 + 0xc]\n  2626: s1 = u8 [a0 + 0xe]\n  2629: a0 = u8 [a0 + 0xf]\n  2632: a4 = a4 << 0x8\n  2635: a4 = a4 | a5\n  2638: s1 = s1 << 0x10\n  2641: a0 = a0 << 0x18\n  2644: a0 = a0 | s1\n  2647: a0 = a0 | a4\n  2650: a0 = a0 << 0x20\n  2653: a0 = a0 | a1\n  2656: a1 = reverse a0\n  2658: a0 = reverse a3\n  2660: a2 = reverse a2\n  2662: a3 = reverse t0\n  2664: a2 = a2 | a3\n  2667: a3 = a0 | a1\n  2670: a3 = a3 | a2\n  2673: a3 = a3 >> 0x20\n  2676: a1 = a1 | a2\n  2679: a1 = a1 << 0x20\n  2682: a1 = a1 | a3\n  2685: jump @61 if a1 == 0\n      : @58 (gas: 1)\n  2688: trap\n      : @59 (gas: 3)\n  2689: a0 = 0\n  2691: a1 = 0\n  2693: ra = 44, jump @0\n      : @60 [@dyn 22] (gas: 5)\n  2698: i32 a1 = a0 + 0\n  2700: a0 = 0x1\n  2703: a2 = 0\n  2705: ecalli 5 // 'seal_return'\n  2707: fallthrough\n      : @61 (gas: 4)\n  2708: i32 s1 = a0 + 0\n  2710: a1 = 0x20\n  2713: a0 = s1\n  2715: ra = 46, jump @0\n      : @62 [@dyn 23] (gas: 71)\n  2720: a1 = u64 [sp]\n  2722: a1 = reverse a1\n  2724: a2 = u64 [sp + 0x8]\n  2727: a2 = reverse a2\n  2729: a3 = u64 [sp + 0x10]\n  2732: a3 = reverse a3\n  2734: a4 = u64 [sp + 0x18]\n  2737: a4 = reverse a4\n  2739: a5 = a4 >> 0x38\n  2742: u8 [a0 + 0x1f] = a5\n  2745: a5 = a4 >> 0x30\n  2748: u8 [a0 + 0x1e] = a5\n  2751: a5 = a4 >> 0x28\n  2754: u8 [a0 + 0x1d] = a5\n  2757: a5 = a4 >> 0x20\n  2760: u8 [a0 + 0x1c] = a5\n  2763: a5 = a4 >> 0x18\n  2766: u8 [a0 + 0x1b] = a5\n  2769: a5 = a4 >> 0x10\n  2772: u8 [a0 + 0x1a] = a5\n  2775: a5 = a4 >> 0x8\n  2778: u8 [a0 + 0x19] = a5\n  2781: u8 [a0 + 0x18] = a4\n  2784: u8 [a0 + 0x10] = a3\n  2787: a4 = a3 >> 0x38\n  2790: u8 [a0 + 0x17] = a4\n  2793: a4 = a3 >> 0x30\n  2796: u8 [a0 + 0x16] = a4\n  2799: a4 = a3 >> 0x28\n  2802: u8 [a0 + 0x15] = a4\n  2805: a4 = a3 >> 0x20\n  2808: u8 [a0 + 0x14] = a4\n  2811: a4 = a3 >> 0x18\n  2814: u8 [a0 + 0x13] = a4\n  2817: a4 = a3 >> 0x10\n  2820: u8 [a0 + 0x12] = a4\n  2823: a3 = a3 >> 0x8\n  2826: u8 [a0 + 0x11] = a3\n  2829: u8 [a0 + 0x8] = a2\n  2832: a3 = a2 >> 0x38\n  2835: u8 [a0 + 0xf] = a3\n  2838: a3 = a2 >> 0x30\n  2841: u8 [a0 + 0xe] = a3\n  2844: a3 = a2 >> 0x28\n  2847: u8 [a0 + 0xd] = a3\n  2850: a3 = a2 >> 0x20\n  2853: u8 [a0 + 0xc] = a3\n  2856: a3 = a2 >> 0x18\n  2859: u8 [a0 + 0xb] = a3\n  2862: a3 = a2 >> 0x10\n  2865: u8 [a0 + 0xa] = a3\n  2868: a2 = a2 >> 0x8\n  2871: u8 [a0 + 0x9] = a2\n  2874: u8 [a0] = a1\n  2876: a2 = a1 >> 0x38\n  2879: u8 [a0 + 0x7] = a2\n  2882: a2 = a1 >> 0x30\n  2885: u8 [a0 + 0x6] = a2\n  2888: a2 = a1 >> 0x28\n  2891: u8 [a0 + 0x5] = a2\n  2894: a2 = a1 >> 0x20\n  2897: u8 [a0 + 0x4] = a2\n  2900: a2 = a1 >> 0x18\n  2903: u8 [a0 + 0x3] = a2\n  2906: a2 = a1 >> 0x10\n  2909: u8 [a0 + 0x2] = a2\n  2912: a1 = a1 >> 0x8\n  2915: u8 [a0 + 0x1] = a1\n  2918: a1 = 0x20\n  2921: a0 = s1\n  2923: ra = 48, jump @0\n      : @63 [@dyn 24] (gas: 6)\n  2928: i32 a1 = a0 + 0\n  2930: a2 = 0x20\n  2933: a0 = 0\n  2935: ra = 0x32\n  2938: ecalli 5 // 'seal_return'\n  2940: fallthrough\n      : @64 [@dyn 25] (gas: 47)\n  2941: sp = sp + 0xffffffffffffff60\n  2945: u64 [sp + 0x98] = ra\n  2949: u64 [sp + 0x90] = s0\n  2953: u64 [sp + 0x88] = s1\n  2957: s0 = sp + 0xa0\n  2961: sp = sp & 0xffffffffffffffe0\n  2964: t0 = u64 [a1 + 0x10]\n  2967: a5 = u64 [a1 + 0x8]\n  2970: a3 = u64 [a2 + 0x8]\n  2973: ra = u64 [a1]\n  2975: a4 = u64 [a2]\n  2977: u64 [sp + 0x48] = a4\n  2980: t2 = u64 [a2 + 0x10]\n  2983: t1 = a3 ^ a5\n  2986: s1 = a3 <u a5\n  2989: a4 = a4 <u ra\n  2992: u64 [sp + 0x40] = a4\n  2995: s1 = a4 if t1 == 0\n  2998: t1 = u64 [a1 + 0x18]\n  3001: a1 = u64 [a2 + 0x18]\n  3004: u64 [sp + 0x38] = a1\n  3007: a2 = t2 - t0\n  3010: a1 = a2 - s1\n  3013: u64 [sp + 0x50] = a1\n  3016: a1 = a2 <u s1\n  3019: a4 = t2 <u t0\n  3022: u64 [sp + 0x58] = t1\n  3025: a2 = u64 [sp + 0x38]\n  3028: a2 = a2 - t1\n  3031: a2 = a2 - a4\n  3034: a2 = a2 - a1\n  3037: a1 = a3 - a5\n  3040: a3 = u64 [sp + 0x40]\n  3043: a1 = a1 - a3\n  3046: a3 = u64 [sp + 0x48]\n  3049: a3 = a3 - ra\n  3052: a4 = a1 >u 0\n  3054: a3 = a3 <u 0x60\n  3057: a3 = a3 ^ 0x1\n  3060: a3 = a4 if a1 != 0\n  3063: s1 = a2 >s 0\n  3065: a1 = u64 [sp + 0x50]\n  3068: a4 = a1 >u 0\n  3070: a4 = s1 if a2 != 0\n  3073: a1 = a1 | a2\n  3076: a3 = a4 if a1 != 0\n  3079: jump @73 if a3 == 0\n      : @65 (gas: 12)\n  3083: s1 = a0\n  3085: a0 = ra | t0\n  3088: u64 [sp + 0x50] = a5\n  3091: a1 = u64 [sp + 0x58]\n  3094: a1 = a1 | a5\n  3097: a0 = a0 | a1\n  3100: a0 = a0 >> 0x20\n  3103: u64 [sp + 0x38] = t0\n  3106: a1 = a1 | t0\n  3109: a1 = a1 << 0x20\n  3112: a0 = a0 | a1\n  3115: jump @72 if a0 != 0\n      : @66 (gas: 6)\n  3119: u64 [sp + 0x48] = ra\n  3122: i32 a1 = ra + 0\n  3124: i32 a0 = sp + 0x60\n  3127: u64 [sp + 0x40] = a1\n  3130: ecalli 1 // 'call_data_load'\n  3132: fallthrough\n      : @67 (gas: 10)\n  3133: a3 = u64 [sp + 0x70]\n  3136: a4 = u64 [sp + 0x78]\n  3139: a0 = 0x100000000\n  3149: a1 = a3 ^ a0\n  3152: a1 = a1 | a4\n  3155: a2 = a3 >> 0x20\n  3158: a2 = a2 <u 0x1\n  3161: a2 = 0 if a4 != 0\n  3163: a2 = 0 if a1 == 0\n  3165: jump @73 if a2 == 0\n      : @68 (gas: 13)\n  3169: u64 [sp + 0x28] = a4\n  3172: u64 [sp + 0x30] = a3\n  3175: a1 = u64 [sp + 0x38]\n  3178: a2 = u64 [sp + 0x58]\n  3181: a2 = a2 | a1\n  3184: a0 = 0xffffffe0\n  3194: a1 = u64 [sp + 0x48]\n  3197: a0 = a1 <u a0\n  3200: a1 = u64 [sp + 0x50]\n  3203: a0 = 0 if a1 != 0\n  3205: u64 [sp + 0x58] = a2\n  3208: a0 = 0 if a2 != 0\n  3210: jump @72 if a0 == 0\n      : @69 (gas: 9)\n  3214: a0 = u64 [sp + 0x68]\n  3217: u64 [sp + 0x20] = a0\n  3220: a0 = u64 [sp + 0x60]\n  3223: u64 [sp + 0x38] = a0\n  3226: a0 = u64 [sp + 0x40]\n  3229: i32 a1 = a0 + 0x20\n  3232: i32 a0 = sp + 0x60\n  3235: ecalli 1 // 'call_data_load'\n  3237: fallthrough\n      : @70 (gas: 8)\n  3238: a0 = 0xffffffc0\n  3248: a1 = u64 [sp + 0x48]\n  3251: a0 = a1 <u a0\n  3254: a1 = u64 [sp + 0x50]\n  3257: a0 = 0 if a1 != 0\n  3259: a1 = u64 [sp + 0x58]\n  3262: a0 = 0 if a1 != 0\n  3264: jump @72 if a0 == 0\n      : @71 (gas: 42)\n  3268: a0 = u64 [sp + 0x78]\n  3271: u64 [sp + 0x18] = a0\n  3274: a0 = u64 [sp + 0x70]\n  3277: u64 [sp + 0x48] = a0\n  3280: a0 = u64 [sp + 0x68]\n  3283: u64 [sp + 0x50] = a0\n  3286: a0 = u64 [sp + 0x60]\n  3289: u64 [sp + 0x58] = a0\n  3292: a0 = u64 [sp + 0x40]\n  3295: i32 a1 = a0 + 0x40\n  3298: i32 a0 = sp + 0x60\n  3301: ecalli 1 // 'call_data_load'\n  3303: a0 = u64 [sp + 0x78]\n  3306: a1 = u64 [sp + 0x70]\n  3309: a2 = u64 [sp + 0x68]\n  3312: a3 = u64 [sp + 0x60]\n  3315: u64 [s1 + 0x58] = a0\n  3318: u64 [s1 + 0x50] = a1\n  3321: u64 [s1 + 0x48] = a2\n  3324: u64 [s1 + 0x40] = a3\n  3327: a0 = u64 [sp + 0x18]\n  3330: u64 [s1 + 0x38] = a0\n  3333: a0 = u64 [sp + 0x48]\n  3336: u64 [s1 + 0x30] = a0\n  3339: a0 = u64 [sp + 0x50]\n  3342: u64 [s1 + 0x28] = a0\n  3345: a0 = u64 [sp + 0x58]\n  3348: u64 [s1 + 0x20] = a0\n  3351: a0 = u64 [sp + 0x28]\n  3354: u64 [s1 + 0x18] = a0\n  3357: a0 = u64 [sp + 0x30]\n  3360: u64 [s1 + 0x10] = a0\n  3363: a0 = u64 [sp + 0x20]\n  3366: u64 [s1 + 0x8] = a0\n  3369: a0 = u64 [sp + 0x38]\n  3372: u64 [s1] = a0\n  3374: sp = s0 + 0xffffffffffffff60\n  3378: ra = u64 [sp + 0x98]\n  3382: s0 = u64 [sp + 0x90]\n  3386: s1 = u64 [sp + 0x88]\n  3390: sp = sp + 0xa0\n  3394: ret\n      : @72 (gas: 1)\n  3396: trap\n      : @73 (gas: 3)\n  3397: a0 = 0\n  3399: a1 = 0\n  3401: ra = 52, jump @0\n      : @74 [@dyn 26] (gas: 6)\n  3406: i32 a1 = a0 + 0\n  3408: a0 = 0x1\n  3411: a2 = 0\n  3413: ra = 0x36\n  3416: ecalli 5 // 'seal_return'\n  3418: fallthrough\n      : @75 [@dyn 27] (gas: 9)\n  3419: a2 = u64 [a1 + 0x18]\n  3422: a3 = u64 [a1 + 0x10]\n  3425: a4 = u64 [a1 + 0x8]\n  3428: a1 = u64 [a1]\n  3430: u64 [a0 + 0x18] = a2\n  3433: u64 [a0 + 0x10] = a3\n  3436: u64 [a0 + 0x8] = a4\n  3439: u64 [a0] = a1\n  3441: ret\n      : @76 (gas: 8)\n  3443: a0 = u64 [sp + 0x130]\n  3447: a1 = u64 [sp + 0x138]\n  3451: a2 = u64 [sp + 0x128]\n  3455: a3 = u64 [sp + 0x120]\n  3459: a1 = a1 | a2\n  3462: a0 = a0 | a3\n  3465: a0 = a0 | a1\n  3468: jump @82 if a0 != 0\n      : @77 (gas: 13)\n  3472: a0 = u32 [0x20004]\n  3477: u64 [sp + 152] = 0\n  3481: u64 [sp + 144] = 0\n  3485: u64 [sp + 136] = 0\n  3489: u64 [sp + 0x80] = a0\n  3493: u64 [sp + 184] = 0\n  3497: u64 [sp + 176] = 0\n  3501: u64 [sp + 160] = 0x4\n  3506: a0 = sp + 0xc0\n  3510: a1 = sp + 0xa0\n  3514: a2 = sp + 0x80\n  3518: u64 [sp + 168] = 0\n  3522: ra = 56, jump @64\n      : @78 [@dyn 28] (gas: 61)\n  3527: a0 = u64 [sp + 0xc0]\n  3531: u64 [sp + 0x18] = a0\n  3534: t1 = u64 [sp + 0xc8]\n  3538: t2 = u64 [sp + 0xd0]\n  3542: ra = u64 [sp + 0xd8]\n  3546: t0 = u64 [sp + 0xe0]\n  3550: a5 = u64 [sp + 0xe8]\n  3554: a4 = u64 [sp + 0xf0]\n  3558: a3 = u64 [sp + 0xf8]\n  3562: a1 = u64 [sp + 0x100]\n  3566: s1 = u64 [sp + 0x108]\n  3570: a2 = u64 [sp + 0x110]\n  3574: a0 = u64 [sp + 0x118]\n  3578: u64 [sp + 0x38] = a0\n  3581: u64 [sp + 0x30] = a2\n  3584: u64 [sp + 0x28] = s1\n  3587: u64 [sp + 0x20] = a1\n  3590: u64 [sp + 0x58] = a3\n  3593: u64 [sp + 0x50] = a4\n  3596: u64 [sp + 0x48] = a5\n  3599: u64 [sp + 0x40] = t0\n  3602: u64 [sp + 0x78] = ra\n  3605: u64 [sp + 0x70] = t2\n  3608: u64 [sp + 0x68] = t1\n  3611: a0 = sp + 0x60\n  3614: a1 = sp + 0x40\n  3617: a2 = sp + 0x20\n  3620: a3 = u64 [sp + 0x18]\n  3623: u64 [sp + 0x60] = a3\n  3626: ra = 0x3a\n  3629: sp = sp + 0xfffffffffffffd20\n  3633: u64 [sp + 0x2d8] = ra\n  3637: u64 [sp + 0x2d0] = s0\n  3641: u64 [sp + 0x2c8] = s1\n  3645: s0 = sp + 0x2e0\n  3649: sp = sp & 0xffffffffffffffe0\n  3652: a3 = u64 [a2]\n  3654: u64 [sp + 0x1d8] = a3\n  3658: a3 = u64 [a2 + 0x8]\n  3661: u64 [sp + 0x1d0] = a3\n  3665: a3 = u64 [a2 + 0x10]\n  3668: u64 [sp + 0x1c0] = a3\n  3672: a2 = u64 [a2 + 0x18]\n  3675: u64 [sp + 0x1c8] = a2\n  3679: a2 = u64 [a1]\n  3681: u64 [sp + 0x1b8] = a2\n  3685: a2 = u64 [a1 + 0x8]\n  3688: u64 [sp + 0x1b0] = a2\n  3692: a2 = u64 [a1 + 0x10]\n  3695: u64 [sp + 0x1a8] = a2\n  3699: a1 = u64 [a1 + 0x18]\n  3702: u64 [sp + 0x1a0] = a1\n  3706: a1 = u64 [a0]\n  3708: u64 [sp + 0x198] = a1\n  3712: a1 = u64 [a0 + 0x8]\n  3715: u64 [sp + 0x190] = a1\n  3719: s1 = u32 [a0 + 0x10]\n  3722: a1 = 0x20\n  3725: a0 = 0\n  3727: ra = 0x66\n  3730: jump @0\n      : @79 [@dyn 29] (gas: 3)\n  3733: a0 = 0x40\n  3736: a1 = 0x20\n  3739: ra = 60, jump @0\n      : @80 [@dyn 30] (gas: 100)\n  3744: a1 = u8 [a0 + 0x11]\n  3747: a2 = u8 [a0 + 0x10]\n  3750: a3 = u8 [a0 + 0x12]\n  3753: a4 = u8 [a0 + 0x13]\n  3756: a1 = a1 << 0x8\n  3759: a1 = a1 | a2\n  3762: a3 = a3 << 0x10\n  3765: a4 = a4 << 0x18\n  3768: a3 = a3 | a4\n  3771: a1 = a1 | a3\n  3774: a2 = u8 [a0 + 0x15]\n  3777: a3 = u8 [a0 + 0x14]\n  3780: a4 = u8 [a0 + 0x16]\n  3783: a5 = u8 [a0 + 0x17]\n  3786: a2 = a2 << 0x8\n  3789: a2 = a2 | a3\n  3792: a4 = a4 << 0x10\n  3795: a5 = a5 << 0x18\n  3798: a4 = a4 | a5\n  3801: a2 = a2 | a4\n  3804: a2 = a2 << 0x20\n  3807: t0 = a2 | a1\n  3810: a2 = u8 [a0 + 0x1]\n  3813: a3 = u8 [a0]\n  3815: a4 = u8 [a0 + 0x2]\n  3818: a5 = u8 [a0 + 0x3]\n  3821: a2 = a2 << 0x8\n  3824: a2 = a2 | a3\n  3827: a4 = a4 << 0x10\n  3830: a5 = a5 << 0x18\n  3833: a4 = a4 | a5\n  3836: a2 = a2 | a4\n  3839: a3 = u8 [a0 + 0x5]\n  3842: a4 = u8 [a0 + 0x4]\n  3845: a5 = u8 [a0 + 0x6]\n  3848: s1 = u8 [a0 + 0x7]\n  3851: a3 = a3 << 0x8\n  3854: a3 = a3 | a4\n  3857: a5 = a5 << 0x10\n  3860: s1 = s1 << 0x18\n  3863: a5 = a5 | s1\n  3866: a3 = a3 | a5\n  3869: a3 = a3 << 0x20\n  3872: a2 = a2 | a3\n  3875: a3 = u8 [a0 + 0x19]\n  3878: a4 = u8 [a0 + 0x18]\n  3881: a5 = u8 [a0 + 0x1a]\n  3884: s1 = u8 [a0 + 0x1b]\n  3887: a3 = a3 << 0x8\n  3890: a3 = a3 | a4\n  3893: a5 = a5 << 0x10\n  3896: s1 = s1 << 0x18\n  3899: a5 = a5 | s1\n  3902: a3 = a3 | a5\n  3905: a4 = u8 [a0 + 0x1d]\n  3908: a5 = u8 [a0 + 0x1c]\n  3911: s1 = u8 [a0 + 0x1e]\n  3914: a1 = u8 [a0 + 0x1f]\n  3917: a4 = a4 << 0x8\n  3920: a4 = a4 | a5\n  3923: s1 = s1 << 0x10\n  3926: a1 = a1 << 0x18\n  3929: a1 = a1 | s1\n  3932: a1 = a1 | a4\n  3935: a1 = a1 << 0x20\n  3938: a3 = a3 | a1\n  3941: a1 = u8 [a0 + 0x9]\n  3944: a4 = u8 [a0 + 0x8]\n  3947: a5 = u8 [a0 + 0xa]\n  3950: s1 = u8 [a0 + 0xb]\n  3953: a1 = a1 << 0x8\n  3956: a1 = a1 | a4\n  3959: a5 = a5 << 0x10\n  3962: s1 = s1 << 0x18\n  3965: a5 = a5 | s1\n  3968: a1 = a1 | a5\n  3971: a4 = u8 [a0 + 0xd]\n  3974: a5 = u8 [a0 + 0xc]\n  3977: s1 = u8 [a0 + 0xe]\n  3980: a0 = u8 [a0 + 0xf]\n  3983: a4 = a4 << 0x8\n  3986: a4 = a4 | a5\n  3989: s1 = s1 << 0x10\n  3992: a0 = a0 << 0x18\n  3995: a0 = a0 | s1\n  3998: a0 = a0 | a4\n  4001: a0 = a0 << 0x20\n  4004: a0 = a0 | a1\n  4007: a1 = reverse a0\n  4009: a0 = reverse a3\n  4011: a2 = reverse a2\n  4013: a3 = reverse t0\n  4015: a2 = a2 | a3\n  4018: a3 = a0 | a1\n  4021: a3 = a3 | a2\n  4024: a3 = a3 >> 0x20\n  4027: a1 = a1 | a2\n  4030: a1 = a1 << 0x20\n  4033: a1 = a1 | a3\n  4036: jump @84 if a1 == 0\n      : @81 (gas: 1)\n  4039: trap\n      : @82 (gas: 3)\n  4040: a0 = 0\n  4042: a1 = 0\n  4044: ra = 62, jump @0\n      : @83 [@dyn 31] (gas: 7)\n  4049: i32 a1 = a0 + 0\n  4051: a0 = 0x1\n  4054: a2 = 0\n  4056: ecalli 5 // 'seal_return'\n  4058: i32 a0 = a0 + 0\n  4060: ra = 0x40\n  4063: jump @0\n      : @84 (gas: 2)\n  4066: i32 a0 = a0 + 0\n  4068: ra = 64, jump @0\n      : @85 [@dyn 32] (gas: 6)\n  4073: i32 a1 = a0 + 0\n  4075: a0 = 0\n  4077: a2 = 0\n  4079: ra = 0x42\n  4082: ecalli 5 // 'seal_return'\n  4084: fallthrough\n      : @86 [@dyn 33] (gas: 13)\n  4085: sp = sp + 0xfffffffffffffea0\n  4089: u64 [sp + 0x158] = ra\n  4093: u64 [sp + 0x150] = s0\n  4097: u64 [sp + 0x148] = s1\n  4101: s0 = sp + 0x160\n  4105: sp = sp & 0xffffffffffffffe0\n  4108: u64 [sp + 312] = 0\n  4112: u64 [sp + 304] = 0\n  4116: u64 [sp + 296] = 0\n  4120: u64 [sp + 288] = 0\n  4124: i32 a0 = sp + 0x120\n  4128: ecalli 8 // 'value_transferred'\n  4130: fallthrough\n      : @87 (gas: 8)\n  4131: a0 = u64 [sp + 0x130]\n  4135: a1 = u64 [sp + 0x138]\n  4139: a2 = u64 [sp + 0x128]\n  4143: a3 = u64 [sp + 0x120]\n  4147: a1 = a1 | a2\n  4150: a0 = a0 | a3\n  4153: a0 = a0 | a1\n  4156: jump @93 if a0 != 0\n      : @88 (gas: 13)\n  4160: a0 = u32 [0x20004]\n  4165: u64 [sp + 152] = 0\n  4169: u64 [sp + 144] = 0\n  4173: u64 [sp + 136] = 0\n  4177: u64 [sp + 0x80] = a0\n  4181: u64 [sp + 184] = 0\n  4185: u64 [sp + 176] = 0\n  4189: u64 [sp + 160] = 0x4\n  4194: a0 = sp + 0xc0\n  4198: a1 = sp + 0xa0\n  4202: a2 = sp + 0x80\n  4206: u64 [sp + 168] = 0\n  4210: ra = 68, jump @64\n      : @89 [@dyn 34] (gas: 30)\n  4215: a0 = u64 [sp + 0xc0]\n  4219: u64 [sp + 0x18] = a0\n  4222: t1 = u64 [sp + 0xc8]\n  4226: t2 = u64 [sp + 0xd0]\n  4230: ra = u64 [sp + 0xd8]\n  4234: t0 = u64 [sp + 0xe0]\n  4238: a5 = u64 [sp + 0xe8]\n  4242: a4 = u64 [sp + 0xf0]\n  4246: a3 = u64 [sp + 0xf8]\n  4250: a1 = u64 [sp + 0x100]\n  4254: s1 = u64 [sp + 0x108]\n  4258: a2 = u64 [sp + 0x110]\n  4262: a0 = u64 [sp + 0x118]\n  4266: u64 [sp + 0x38] = a0\n  4269: u64 [sp + 0x30] = a2\n  4272: u64 [sp + 0x28] = s1\n  4275: u64 [sp + 0x20] = a1\n  4278: u64 [sp + 0x58] = a3\n  4281: u64 [sp + 0x50] = a4\n  4284: u64 [sp + 0x48] = a5\n  4287: u64 [sp + 0x40] = t0\n  4290: u64 [sp + 0x78] = ra\n  4293: u64 [sp + 0x70] = t2\n  4296: u64 [sp + 0x68] = t1\n  4299: a0 = sp + 0x60\n  4302: a1 = sp + 0x40\n  4305: a2 = sp + 0x20\n  4308: a3 = u64 [sp + 0x18]\n  4311: u64 [sp + 0x60] = a3\n  4314: ra = 70, jump @148\n      : @90 [@dyn 35] (gas: 3)\n  4319: a0 = 0x40\n  4322: a1 = 0x20\n  4325: ra = 72, jump @0\n      : @91 [@dyn 36] (gas: 100)\n  4330: a1 = u8 [a0 + 0x11]\n  4333: a2 = u8 [a0 + 0x10]\n  4336: a3 = u8 [a0 + 0x12]\n  4339: a4 = u8 [a0 + 0x13]\n  4342: a1 = a1 << 0x8\n  4345: a1 = a1 | a2\n  4348: a3 = a3 << 0x10\n  4351: a4 = a4 << 0x18\n  4354: a3 = a3 | a4\n  4357: a1 = a1 | a3\n  4360: a2 = u8 [a0 + 0x15]\n  4363: a3 = u8 [a0 + 0x14]\n  4366: a4 = u8 [a0 + 0x16]\n  4369: a5 = u8 [a0 + 0x17]\n  4372: a2 = a2 << 0x8\n  4375: a2 = a2 | a3\n  4378: a4 = a4 << 0x10\n  4381: a5 = a5 << 0x18\n  4384: a4 = a4 | a5\n  4387: a2 = a2 | a4\n  4390: a2 = a2 << 0x20\n  4393: t0 = a2 | a1\n  4396: a2 = u8 [a0 + 0x1]\n  4399: a3 = u8 [a0]\n  4401: a4 = u8 [a0 + 0x2]\n  4404: a5 = u8 [a0 + 0x3]\n  4407: a2 = a2 << 0x8\n  4410: a2 = a2 | a3\n  4413: a4 = a4 << 0x10\n  4416: a5 = a5 << 0x18\n  4419: a4 = a4 | a5\n  4422: a2 = a2 | a4\n  4425: a3 = u8 [a0 + 0x5]\n  4428: a4 = u8 [a0 + 0x4]\n  4431: a5 = u8 [a0 + 0x6]\n  4434: s1 = u8 [a0 + 0x7]\n  4437: a3 = a3 << 0x8\n  4440: a3 = a3 | a4\n  4443: a5 = a5 << 0x10\n  4446: s1 = s1 << 0x18\n  4449: a5 = a5 | s1\n  4452: a3 = a3 | a5\n  4455: a3 = a3 << 0x20\n  4458: a2 = a2 | a3\n  4461: a3 = u8 [a0 + 0x19]\n  4464: a4 = u8 [a0 + 0x18]\n  4467: a5 = u8 [a0 + 0x1a]\n  4470: s1 = u8 [a0 + 0x1b]\n  4473: a3 = a3 << 0x8\n  4476: a3 = a3 | a4\n  4479: a5 = a5 << 0x10\n  4482: s1 = s1 << 0x18\n  4485: a5 = a5 | s1\n  4488: a3 = a3 | a5\n  4491: a4 = u8 [a0 + 0x1d]\n  4494: a5 = u8 [a0 + 0x1c]\n  4497: s1 = u8 [a0 + 0x1e]\n  4500: a1 = u8 [a0 + 0x1f]\n  4503: a4 = a4 << 0x8\n  4506: a4 = a4 | a5\n  4509: s1 = s1 << 0x10\n  4512: a1 = a1 << 0x18\n  4515: a1 = a1 | s1\n  4518: a1 = a1 | a4\n  4521: a1 = a1 << 0x20\n  4524: a3 = a3 | a1\n  4527: a1 = u8 [a0 + 0x9]\n  4530: a4 = u8 [a0 + 0x8]\n  4533: a5 = u8 [a0 + 0xa]\n  4536: s1 = u8 [a0 + 0xb]\n  4539: a1 = a1 << 0x8\n  4542: a1 = a1 | a4\n  4545: a5 = a5 << 0x10\n  4548: s1 = s1 << 0x18\n  4551: a5 = a5 | s1\n  4554: a1 = a1 | a5\n  4557: a4 = u8 [a0 + 0xd]\n  4560: a5 = u8 [a0 + 0xc]\n  4563: s1 = u8 [a0 + 0xe]\n  4566: a0 = u8 [a0 + 0xf]\n  4569: a4 = a4 << 0x8\n  4572: a4 = a4 | a5\n  4575: s1 = s1 << 0x10\n  4578: a0 = a0 << 0x18\n  4581: a0 = a0 | s1\n  4584: a0 = a0 | a4\n  4587: a0 = a0 << 0x20\n  4590: a0 = a0 | a1\n  4593: a1 = reverse a0\n  4595: a0 = reverse a3\n  4597: a2 = reverse a2\n  4599: a3 = reverse t0\n  4601: a2 = a2 | a3\n  4604: a3 = a0 | a1\n  4607: a3 = a3 | a2\n  4610: a3 = a3 >> 0x20\n  4613: a1 = a1 | a2\n  4616: a1 = a1 << 0x20\n  4619: a1 = a1 | a3\n  4622: jump @95 if a1 == 0\n      : @92 (gas: 1)\n  4625: trap\n      : @93 (gas: 3)\n  4626: a0 = 0\n  4628: a1 = 0\n  4630: ra = 74, jump @0\n      : @94 [@dyn 37] (gas: 7)\n  4635: i32 a1 = a0 + 0\n  4637: a0 = 0x1\n  4640: a2 = 0\n  4642: ecalli 5 // 'seal_return'\n  4644: i32 a0 = a0 + 0\n  4646: ra = 0x4c\n  4649: jump @0\n      : @95 (gas: 2)\n  4652: i32 a0 = a0 + 0\n  4654: ra = 76, jump @0\n      : @96 [@dyn 38] (gas: 6)\n  4659: i32 a1 = a0 + 0\n  4661: a0 = 0\n  4663: a2 = 0\n  4665: ra = 0x4e\n  4668: ecalli 5 // 'seal_return'\n  4670: fallthrough\n      : @97 [@dyn 39] (gas: 5)\n  4671: sp = sp + 0xfffffffffffffff8\n  4674: u64 [sp] = ra\n  4676: a0 = 0\n  4678: a1 = 0\n  4680: ra = 80, jump @0\n      : @98 [@dyn 40] (gas: 6)\n  4685: i32 a1 = a0 + 0\n  4687: a0 = 0x1\n  4690: a2 = 0\n  4692: ra = 0x52\n  4695: ecalli 5 // 'seal_return'\n  4697: fallthrough\n      : @99 [@dyn 41] (gas: 5)\n  4698: u64 [a0 + 24] = 0\n  4701: u64 [a0 + 16] = 0\n  4704: u64 [a0 + 8] = 0\n  4707: u64 [a0 + 0] = 0\n  4709: ret\n      : @100 [@dyn 42] (gas: 58)\n  4711: a1 = reverse s1\n  4713: a2 = u64 [sp + 0x8]\n  4716: a2 = reverse a2\n  4718: a3 = u64 [sp + 0x10]\n  4721: a3 = reverse a3\n  4723: a4 = a3 >> 0x38\n  4726: u8 [a0 + 0x1f] = a4\n  4729: a4 = a3 >> 0x30\n  4732: u8 [a0 + 0x1e] = a4\n  4735: a4 = a3 >> 0x28\n  4738: u8 [a0 + 0x1d] = a4\n  4741: a4 = a3 >> 0x20\n  4744: u8 [a0 + 0x1c] = a4\n  4747: a4 = a3 >> 0x18\n  4750: u8 [a0 + 0x1b] = a4\n  4753: a4 = a3 >> 0x10\n  4756: u8 [a0 + 0x1a] = a4\n  4759: a4 = a3 >> 0x8\n  4762: u8 [a0 + 0x19] = a4\n  4765: u8 [a0 + 0x18] = a3\n  4768: a3 = a2 >> 0x38\n  4771: u8 [a0 + 0x17] = a3\n  4774: a3 = a2 >> 0x30\n  4777: u8 [a0 + 0x16] = a3\n  4780: a3 = a2 >> 0x28\n  4783: u8 [a0 + 0x15] = a3\n  4786: a3 = a2 >> 0x20\n  4789: u8 [a0 + 0x14] = a3\n  4792: a3 = a2 >> 0x18\n  4795: u8 [a0 + 0x13] = a3\n  4798: a3 = a2 >> 0x10\n  4801: u8 [a0 + 0x12] = a3\n  4804: a3 = a2 >> 0x8\n  4807: u8 [a0 + 0x11] = a3\n  4810: u8 [a0 + 0x10] = a2\n  4813: a2 = a1 >> 0x38\n  4816: u8 [a0 + 0xf] = a2\n  4819: a2 = a1 >> 0x30\n  4822: u8 [a0 + 0xe] = a2\n  4825: a2 = a1 >> 0x28\n  4828: u8 [a0 + 0xd] = a2\n  4831: a2 = a1 >> 0x20\n  4834: u8 [a0 + 0xc] = a2\n  4837: u8 [a0 + 11] = 0\n  4840: u8 [a0 + 10] = 0\n  4843: u8 [a0 + 9] = 0\n  4846: u8 [a0 + 0x8] = a1\n  4849: u8 [a0 + 7] = 0\n  4852: u8 [a0 + 6] = 0\n  4855: u8 [a0 + 5] = 0\n  4858: u8 [a0 + 4] = 0\n  4861: u8 [a0 + 3] = 0\n  4864: u8 [a0 + 2] = 0\n  4867: u8 [a0 + 1] = 0\n  4870: u8 [a0 + 0] = 0\n  4872: a0 = 0x20\n  4875: a1 = 0x20\n  4878: ra = 86, jump @0\n      : @101 [@dyn 43] (gas: 35)\n  4883: u8 [a0 + 31] = 0\n  4886: u8 [a0 + 30] = 0\n  4889: u8 [a0 + 29] = 0\n  4892: u8 [a0 + 28] = 0\n  4895: u8 [a0 + 27] = 0\n  4898: u8 [a0 + 26] = 0\n  4901: u8 [a0 + 25] = 0\n  4904: u8 [a0 + 24] = 0\n  4907: u8 [a0 + 23] = 0\n  4910: u8 [a0 + 22] = 0\n  4913: u8 [a0 + 21] = 0\n  4916: u8 [a0 + 20] = 0\n  4919: u8 [a0 + 19] = 0\n  4922: u8 [a0 + 18] = 0\n  4925: u8 [a0 + 17] = 0\n  4928: u8 [a0 + 16] = 0\n  4931: u8 [a0 + 15] = 0\n  4934: u8 [a0 + 14] = 0\n  4937: u8 [a0 + 13] = 0\n  4940: u8 [a0 + 12] = 0\n  4943: u8 [a0 + 11] = 0\n  4946: u8 [a0 + 10] = 0\n  4949: u8 [a0 + 9] = 0\n  4952: u8 [a0 + 8] = 0\n  4955: u8 [a0 + 7] = 0\n  4958: u8 [a0 + 6] = 0\n  4961: u8 [a0 + 5] = 0\n  4964: u8 [a0 + 4] = 0\n  4967: u8 [a0 + 3] = 0\n  4970: u8 [a0 + 2] = 0\n  4973: u8 [a0 + 1] = 0\n  4976: u8 [a0 + 0] = 0\n  4978: a1 = 0x40\n  4981: a0 = 0\n  4983: ra = 88, jump @0\n      : @102 [@dyn 44] (gas: 14)\n  4988: i32 a0 = a0 + 0\n  4990: i32 a2 = sp + 0x60\n  4993: a1 = 0x40\n  4996: ecalli 4 // 'hash_keccak_256'\n  4998: a0 = u64 [sp + 0x60]\n  5001: u64 [sp + 0x10] = a0\n  5004: a0 = u64 [sp + 0x68]\n  5007: u64 [sp + 0x8] = a0\n  5010: a0 = u64 [sp + 0x70]\n  5013: u64 [sp] = a0\n  5015: s1 = u64 [sp + 0x78]\n  5018: a1 = 0x20\n  5021: a0 = 0\n  5023: ra = 90, jump @0\n      : @103 [@dyn 45] (gas: 71)\n  5028: a1 = u64 [sp + 0x18]\n  5031: a1 = reverse a1\n  5033: a2 = u64 [sp + 0x20]\n  5036: a2 = reverse a2\n  5038: a3 = u64 [sp + 0x28]\n  5041: a3 = reverse a3\n  5043: a4 = u64 [sp + 0x30]\n  5046: a4 = reverse a4\n  5048: a5 = a4 >> 0x38\n  5051: u8 [a0 + 0x1f] = a5\n  5054: a5 = a4 >> 0x30\n  5057: u8 [a0 + 0x1e] = a5\n  5060: a5 = a4 >> 0x28\n  5063: u8 [a0 + 0x1d] = a5\n  5066: a5 = a4 >> 0x20\n  5069: u8 [a0 + 0x1c] = a5\n  5072: a5 = a4 >> 0x18\n  5075: u8 [a0 + 0x1b] = a5\n  5078: a5 = a4 >> 0x10\n  5081: u8 [a0 + 0x1a] = a5\n  5084: a5 = a4 >> 0x8\n  5087: u8 [a0 + 0x19] = a5\n  5090: u8 [a0 + 0x18] = a4\n  5093: a4 = a3 >> 0x38\n  5096: u8 [a0 + 0x17] = a4\n  5099: a4 = a3 >> 0x30\n  5102: u8 [a0 + 0x16] = a4\n  5105: a4 = a3 >> 0x28\n  5108: u8 [a0 + 0x15] = a4\n  5111: a4 = a3 >> 0x20\n  5114: u8 [a0 + 0x14] = a4\n  5117: a4 = a3 >> 0x18\n  5120: u8 [a0 + 0x13] = a4\n  5123: a4 = a3 >> 0x10\n  5126: u8 [a0 + 0x12] = a4\n  5129: a4 = a3 >> 0x8\n  5132: u8 [a0 + 0x11] = a4\n  5135: u8 [a0 + 0x10] = a3\n  5138: a3 = a2 >> 0x38\n  5141: u8 [a0 + 0xf] = a3\n  5144: a3 = a2 >> 0x30\n  5147: u8 [a0 + 0xe] = a3\n  5150: a3 = a2 >> 0x28\n  5153: u8 [a0 + 0xd] = a3\n  5156: a3 = a2 >> 0x20\n  5159: u8 [a0 + 0xc] = a3\n  5162: a3 = a2 >> 0x18\n  5165: u8 [a0 + 0xb] = a3\n  5168: a3 = a2 >> 0x10\n  5171: u8 [a0 + 0xa] = a3\n  5174: a3 = a2 >> 0x8\n  5177: u8 [a0 + 0x9] = a3\n  5180: u8 [a0 + 0x8] = a2\n  5183: a2 = a1 >> 0x38\n  5186: u8 [a0 + 0x7] = a2\n  5189: a2 = a1 >> 0x30\n  5192: u8 [a0 + 0x6] = a2\n  5195: a2 = a1 >> 0x28\n  5198: u8 [a0 + 0x5] = a2\n  5201: a2 = a1 >> 0x20\n  5204: u8 [a0 + 0x4] = a2\n  5207: a2 = a1 >> 0x18\n  5210: u8 [a0 + 0x3] = a2\n  5213: a2 = a1 >> 0x10\n  5216: u8 [a0 + 0x2] = a2\n  5219: a2 = a1 >> 0x8\n  5222: u8 [a0 + 0x1] = a2\n  5225: u8 [a0] = a1\n  5227: a0 = 0x20\n  5230: a1 = 0x20\n  5233: ra = 92, jump @0\n      : @104 [@dyn 46] (gas: 66)\n  5238: a1 = s1 >> 0x38\n  5241: u8 [a0 + 0x1f] = a1\n  5244: a1 = s1 >> 0x30\n  5247: u8 [a0 + 0x1e] = a1\n  5250: a1 = s1 >> 0x28\n  5253: u8 [a0 + 0x1d] = a1\n  5256: a1 = s1 >> 0x20\n  5259: u8 [a0 + 0x1c] = a1\n  5262: a1 = s1 >> 0x18\n  5265: u8 [a0 + 0x1b] = a1\n  5268: a1 = s1 >> 0x10\n  5271: u8 [a0 + 0x1a] = a1\n  5274: a1 = s1 >> 0x8\n  5277: u8 [a0 + 0x19] = a1\n  5280: u8 [a0 + 0x18] = s1\n  5283: a2 = u64 [sp]\n  5285: a1 = a2 >> 0x38\n  5288: u8 [a0 + 0x17] = a1\n  5291: a1 = a2 >> 0x30\n  5294: u8 [a0 + 0x16] = a1\n  5297: a1 = a2 >> 0x28\n  5300: u8 [a0 + 0x15] = a1\n  5303: a1 = a2 >> 0x20\n  5306: u8 [a0 + 0x14] = a1\n  5309: a1 = a2 >> 0x18\n  5312: u8 [a0 + 0x13] = a1\n  5315: a1 = a2 >> 0x10\n  5318: u8 [a0 + 0x12] = a1\n  5321: a1 = a2 >> 0x8\n  5324: u8 [a0 + 0x11] = a1\n  5327: u8 [a0 + 0x10] = a2\n  5330: a2 = u64 [sp + 0x8]\n  5333: a1 = a2 >> 0x38\n  5336: u8 [a0 + 0xf] = a1\n  5339: a1 = a2 >> 0x30\n  5342: u8 [a0 + 0xe] = a1\n  5345: a1 = a2 >> 0x28\n  5348: u8 [a0 + 0xd] = a1\n  5351: a1 = a2 >> 0x20\n  5354: u8 [a0 + 0xc] = a1\n  5357: a1 = a2 >> 0x18\n  5360: u8 [a0 + 0xb] = a1\n  5363: a1 = a2 >> 0x10\n  5366: u8 [a0 + 0xa] = a1\n  5369: a1 = a2 >> 0x8\n  5372: u8 [a0 + 0x9] = a1\n  5375: u8 [a0 + 0x8] = a2\n  5378: a2 = u64 [sp + 0x10]\n  5381: a1 = a2 >> 0x38\n  5384: u8 [a0 + 0x7] = a1\n  5387: a1 = a2 >> 0x30\n  5390: u8 [a0 + 0x6] = a1\n  5393: a1 = a2 >> 0x28\n  5396: u8 [a0 + 0x5] = a1\n  5399: a1 = a2 >> 0x20\n  5402: u8 [a0 + 0x4] = a1\n  5405: a1 = a2 >> 0x18\n  5408: u8 [a0 + 0x3] = a1\n  5411: a1 = a2 >> 0x10\n  5414: u8 [a0 + 0x2] = a1\n  5417: a1 = a2 >> 0x8\n  5420: u8 [a0 + 0x1] = a1\n  5423: u8 [a0] = a2\n  5425: a1 = 0x40\n  5428: a0 = 0\n  5430: ra = 94, jump @0\n      : @105 [@dyn 47] (gas: 42)\n  5435: i32 a0 = a0 + 0\n  5437: i32 a2 = sp + 0x60\n  5440: a1 = 0x40\n  5443: ecalli 4 // 'hash_keccak_256'\n  5445: a0 = u64 [sp + 0x78]\n  5448: a1 = u64 [sp + 0x70]\n  5451: a2 = u64 [sp + 0x68]\n  5454: a3 = u64 [sp + 0x60]\n  5457: a0 = reverse a0\n  5459: a1 = reverse a1\n  5461: a2 = reverse a2\n  5463: a3 = reverse a3\n  5465: u64 [sp + 0x58] = a3\n  5468: u64 [sp + 0x50] = a2\n  5471: u64 [sp + 0x48] = a1\n  5474: u64 [sp + 0x40] = a0\n  5477: u64 [sp + 120] = 0\n  5480: u64 [sp + 112] = 0\n  5483: u64 [sp + 104] = 0\n  5486: u64 [sp + 96] = 0\n  5489: u32 [sp + 128] = 0x20\n  5494: i32 a1 = sp + 0x40\n  5497: i32 a3 = sp + 0x60\n  5500: i32 a4 = sp + 0x80\n  5504: a2 = 0xffffffffffffffff\n  5507: a0 = 0\n  5509: ecalli 3 // 'get_storage'\n  5511: a0 = u64 [sp + 0x78]\n  5514: a1 = u64 [sp + 0x70]\n  5517: a2 = u64 [sp + 0x68]\n  5520: a3 = u64 [sp + 0x60]\n  5523: a4 = u64 [sp + 0x38]\n  5526: u64 [a4 + 0x18] = a0\n  5529: u64 [a4 + 0x10] = a1\n  5532: u64 [a4 + 0x8] = a2\n  5535: u64 [a4] = a3\n  5537: sp = s0 + 0xffffffffffffff60\n  5541: ra = u64 [sp + 0x98]\n  5545: s0 = u64 [sp + 0x90]\n  5549: s1 = u64 [sp + 0x88]\n  5553: sp = sp + 0xa0\n  5557: ret\n      : @106 (gas: 17)\n  5559: sp = sp + 0xffffffffffffffa0\n  5562: u64 [sp + 0x58] = ra\n  5565: u64 [sp + 0x50] = s0\n  5568: u64 [sp + 0x48] = s1\n  5571: a3 = u64 [a1 + 0x18]\n  5574: a4 = u64 [a1 + 0x10]\n  5577: a5 = u64 [a1 + 0x8]\n  5580: s1 = u64 [a1]\n  5582: a1 = a5 | a3\n  5585: a2 = s1 | a4\n  5588: a2 = a2 | a1\n  5591: a2 = a2 >> 0x20\n  5594: a1 = a1 | a4\n  5597: a1 = a1 << 0x20\n  5600: a1 = a1 | a2\n  5603: u64 [sp + 0x28] = a0\n  5606: jump @113 if a1 != 0\n      : @107 (gas: 19)\n  5610: a0 = s1 + 0x20\n  5613: u64 [sp + 0x30] = a0\n  5616: a0 = a0 <u s1\n  5619: a1 = a5 + a0\n  5622: u64 [sp + 0x40] = a1\n  5625: u64 [sp + 0x8] = a5\n  5628: s0 = a1 <u a5\n  5631: s0 = a0 if a0 == 0\n  5634: s0 = s0 + a4\n  5637: u64 [sp + 0x10] = a4\n  5640: a0 = s0 <u a4\n  5643: u64 [sp + 0x18] = a3\n  5646: a0 = a0 + a3\n  5649: u64 [sp + 0x38] = a0\n  5652: u64 [sp] = s1\n  5654: i32 a0 = s1 + 0\n  5656: a1 = 0x20\n  5659: s1 = 0x20\n  5662: ra = 96, jump @0\n      : @108 [@dyn 48] (gas: 45)\n  5667: u8 [a0 + 0x1f] = s1\n  5670: a1 = u64 [sp + 0x30]\n  5673: s1 = a1\n  5675: a1 = a1 | s0\n  5678: a2 = u64 [sp + 0x40]\n  5681: a4 = u64 [sp + 0x38]\n  5684: a2 = a2 | a4\n  5687: a1 = a1 | a2\n  5690: a1 = a1 >> 0x20\n  5693: u64 [sp + 0x20] = s0\n  5696: a2 = a2 | s0\n  5699: a2 = a2 << 0x20\n  5702: a1 = a1 | a2\n  5705: u8 [a0 + 30] = 0\n  5708: u8 [a0 + 29] = 0\n  5711: u8 [a0 + 28] = 0\n  5714: u8 [a0 + 27] = 0\n  5717: u8 [a0 + 26] = 0\n  5720: u8 [a0 + 25] = 0\n  5723: u8 [a0 + 24] = 0\n  5726: u8 [a0 + 23] = 0\n  5729: u8 [a0 + 22] = 0\n  5732: u8 [a0 + 21] = 0\n  5735: u8 [a0 + 20] = 0\n  5738: u8 [a0 + 19] = 0\n  5741: u8 [a0 + 18] = 0\n  5744: u8 [a0 + 17] = 0\n  5747: u8 [a0 + 16] = 0\n  5750: u8 [a0 + 15] = 0\n  5753: u8 [a0 + 14] = 0\n  5756: u8 [a0 + 13] = 0\n  5759: u8 [a0 + 12] = 0\n  5762: u8 [a0 + 11] = 0\n  5765: u8 [a0 + 10] = 0\n  5768: u8 [a0 + 9] = 0\n  5771: u8 [a0 + 8] = 0\n  5774: u8 [a0 + 7] = 0\n  5777: u8 [a0 + 6] = 0\n  5780: u8 [a0 + 5] = 0\n  5783: u8 [a0 + 4] = 0\n  5786: u8 [a0 + 3] = 0\n  5789: u8 [a0 + 2] = 0\n  5792: u8 [a0 + 1] = 0\n  5795: u8 [a0 + 0] = 0\n  5797: jump @113 if a1 != 0\n      : @109 (gas: 4)\n  5801: i32 s0 = s1 + 0\n  5803: a1 = 0x20\n  5806: a0 = s0\n  5808: ra = 98, jump @0\n      : @110 [@dyn 49] (gas: 41)\n  5813: u8 [a0 + 31] = 0x10\n  5817: u8 [a0 + 30] = 0\n  5820: u8 [a0 + 29] = 0\n  5823: u8 [a0 + 28] = 0\n  5826: u8 [a0 + 27] = 0\n  5829: u8 [a0 + 26] = 0\n  5832: u8 [a0 + 25] = 0\n  5835: u8 [a0 + 24] = 0\n  5838: u8 [a0 + 23] = 0\n  5841: u8 [a0 + 22] = 0\n  5844: u8 [a0 + 21] = 0\n  5847: u8 [a0 + 20] = 0\n  5850: u8 [a0 + 19] = 0\n  5853: u8 [a0 + 18] = 0\n  5856: u8 [a0 + 17] = 0\n  5859: u8 [a0 + 16] = 0\n  5862: u8 [a0 + 15] = 0\n  5865: u8 [a0 + 14] = 0\n  5868: u8 [a0 + 13] = 0\n  5871: u8 [a0 + 12] = 0\n  5874: u8 [a0 + 11] = 0\n  5877: u8 [a0 + 10] = 0\n  5880: u8 [a0 + 9] = 0\n  5883: u8 [a0 + 8] = 0\n  5886: u8 [a0 + 7] = 0\n  5889: u8 [a0 + 6] = 0\n  5892: u8 [a0 + 5] = 0\n  5895: u8 [a0 + 4] = 0\n  5898: u8 [a0 + 3] = 0\n  5901: u8 [a0 + 2] = 0\n  5904: u8 [a0 + 1] = 0\n  5907: a1 = u64 [sp + 0x20]\n  5910: a2 = u64 [sp + 0x38]\n  5913: a1 = a1 | a2\n  5916: a2 = 0xffffffe0\n  5926: a2 = s1 <u a2\n  5929: a3 = u64 [sp + 0x40]\n  5932: a2 = 0 if a3 != 0\n  5934: a2 = 0 if a1 != 0\n  5936: u8 [a0 + 0] = 0\n  5938: jump @113 if a2 == 0\n      : @111 (gas: 3)\n  5942: i32 a0 = s0 + 0x20\n  5945: a1 = 0x20\n  5948: ra = 100, jump @0\n      : @112 [@dyn 50] (gas: 54)\n  5953: u8 [a0 + 31] = 0\n  5956: u8 [a0 + 30] = 0\n  5959: u8 [a0 + 29] = 0\n  5962: u8 [a0 + 28] = 0\n  5965: u8 [a0 + 27] = 0\n  5968: u8 [a0 + 26] = 0\n  5971: u8 [a0 + 25] = 0\n  5974: u8 [a0 + 24] = 0\n  5977: u8 [a0 + 23] = 0\n  5980: u8 [a0 + 22] = 0\n  5983: u8 [a0 + 21] = 0\n  5986: u8 [a0 + 20] = 0\n  5989: u8 [a0 + 19] = 0\n  5992: u8 [a0 + 18] = 0\n  5995: u8 [a0 + 17] = 0\n  5998: u8 [a0 + 16] = 0\n  6001: u8 [a0 + 15] = 0x73\n  6005: u8 [a0 + 14] = 0x64\n  6009: u8 [a0 + 13] = 0x72\n  6013: u8 [a0 + 12] = 0x61\n  6017: u8 [a0 + 11] = 0x63\n  6021: u8 [a0 + 10] = 0x20\n  6025: u8 [a0 + 9] = 0x68\n  6029: u8 [a0 + 8] = 0x67\n  6033: u8 [a0 + 7] = 0x75\n  6037: u8 [a0 + 6] = 0x6f\n  6041: u8 [a0 + 5] = 0x6e\n  6045: u8 [a0 + 4] = 0x65\n  6049: u8 [a0 + 3] = 0x20\n  6053: u8 [a0 + 2] = 0x74\n  6057: u8 [a0 + 1] = 0x6f\n  6061: u8 [a0 + 0] = 0x4e\n  6064: a1 = u64 [sp]\n  6066: a0 = a1 + 0x60\n  6069: a1 = a0 <u a1\n  6072: a3 = u64 [sp + 0x8]\n  6075: a2 = a3 + a1\n  6078: a3 = a2 <u a3\n  6081: a3 = a1 if a1 == 0\n  6084: a1 = u64 [sp + 0x10]\n  6087: a3 = a3 + a1\n  6090: a1 = a3 <u a1\n  6093: a4 = u64 [sp + 0x18]\n  6096: a1 = a1 + a4\n  6099: a4 = u64 [sp + 0x28]\n  6102: u64 [a4] = a0\n  6104: u64 [a4 + 0x8] = a2\n  6107: u64 [a4 + 0x10] = a3\n  6110: u64 [a4 + 0x18] = a1\n  6113: ra = u64 [sp + 0x58]\n  6116: s0 = u64 [sp + 0x50]\n  6119: s1 = u64 [sp + 0x48]\n  6122: sp = sp + 0x60\n  6125: ret\n      : @113 (gas: 1)\n  6127: trap\n      : @114 [@dyn 51] (gas: 79)\n  6128: a2 = reverse s1\n  6130: a1 = u64 [sp + 0x190]\n  6134: a4 = reverse a1\n  6136: a1 = u64 [sp + 0x198]\n  6140: a1 = reverse a1\n  6142: u8 [a0 + 0x18] = a1\n  6145: u8 [a0 + 0x10] = a4\n  6148: u8 [a0 + 11] = 0\n  6151: u8 [a0 + 10] = 0\n  6154: u8 [a0 + 9] = 0\n  6157: u8 [a0 + 0x8] = a2\n  6160: u8 [a0 + 7] = 0\n  6163: u8 [a0 + 6] = 0\n  6166: u8 [a0 + 5] = 0\n  6169: u8 [a0 + 4] = 0\n  6172: u8 [a0 + 3] = 0\n  6175: u8 [a0 + 2] = 0\n  6178: u8 [a0 + 1] = 0\n  6181: u8 [a0 + 0] = 0\n  6183: a3 = a1 >> 0x38\n  6186: u64 [sp + 0x170] = a3\n  6190: u8 [a0 + 0x1f] = a3\n  6193: a3 = a1 >> 0x30\n  6196: u64 [sp + 0x168] = a3\n  6200: u8 [a0 + 0x1e] = a3\n  6203: a3 = a1 >> 0x28\n  6206: u64 [sp + 0x160] = a3\n  6210: u8 [a0 + 0x1d] = a3\n  6213: a3 = a1 >> 0x20\n  6216: u64 [sp + 0x158] = a3\n  6220: u8 [a0 + 0x1c] = a3\n  6223: a3 = a1 >> 0x18\n  6226: u64 [sp + 0x150] = a3\n  6230: u8 [a0 + 0x1b] = a3\n  6233: a3 = a1 >> 0x10\n  6236: u64 [sp + 0x148] = a3\n  6240: u8 [a0 + 0x1a] = a3\n  6243: u64 [sp + 0x180] = a1\n  6247: a1 = a1 >> 0x8\n  6250: u64 [sp + 0x140] = a1\n  6254: u8 [a0 + 0x19] = a1\n  6257: a1 = a4 >> 0x38\n  6260: u64 [sp + 0x130] = a1\n  6264: u8 [a0 + 0x17] = a1\n  6267: a1 = a4 >> 0x30\n  6270: u64 [sp + 0x128] = a1\n  6274: u8 [a0 + 0x16] = a1\n  6277: a1 = a4 >> 0x28\n  6280: u64 [sp + 0x120] = a1\n  6284: u8 [a0 + 0x15] = a1\n  6287: a1 = a4 >> 0x20\n  6290: u64 [sp + 0x118] = a1\n  6294: u8 [a0 + 0x14] = a1\n  6297: a1 = a4 >> 0x18\n  6300: u64 [sp + 0x110] = a1\n  6304: u8 [a0 + 0x13] = a1\n  6307: a1 = a4 >> 0x10\n  6310: u64 [sp + 0x100] = a1\n  6314: u8 [a0 + 0x12] = a1\n  6317: u64 [sp + 0x138] = a4\n  6321: a4 = a4 >> 0x8\n  6324: u64 [sp + 0xf0] = a4\n  6328: u8 [a0 + 0x11] = a4\n  6331: a1 = a2 >> 0x38\n  6334: u64 [sp + 0x18] = a1\n  6337: u8 [a0 + 0xf] = a1\n  6340: a1 = a2 >> 0x30\n  6343: u64 [sp + 0x10] = a1\n  6346: u8 [a0 + 0xe] = a1\n  6349: a1 = a2 >> 0x28\n  6352: u64 [sp + 0x8] = a1\n  6355: u8 [a0 + 0xd] = a1\n  6358: u64 [sp + 0x178] = a2\n  6362: a2 = a2 >> 0x20\n  6365: u64 [sp] = a2\n  6367: u8 [a0 + 0xc] = a2\n  6370: a0 = 0x20\n  6373: a1 = 0x20\n  6376: ra = 104, jump @0\n      : @115 [@dyn 52] (gas: 35)\n  6381: u8 [a0 + 31] = 0\n  6384: u8 [a0 + 30] = 0\n  6387: u8 [a0 + 29] = 0\n  6390: u8 [a0 + 28] = 0\n  6393: u8 [a0 + 27] = 0\n  6396: u8 [a0 + 26] = 0\n  6399: u8 [a0 + 25] = 0\n  6402: u8 [a0 + 24] = 0\n  6405: u8 [a0 + 23] = 0\n  6408: u8 [a0 + 22] = 0\n  6411: u8 [a0 + 21] = 0\n  6414: u8 [a0 + 20] = 0\n  6417: u8 [a0 + 19] = 0\n  6420: u8 [a0 + 18] = 0\n  6423: u8 [a0 + 17] = 0\n  6426: u8 [a0 + 16] = 0\n  6429: u8 [a0 + 15] = 0\n  6432: u8 [a0 + 14] = 0\n  6435: u8 [a0 + 13] = 0\n  6438: u8 [a0 + 12] = 0\n  6441: u8 [a0 + 11] = 0\n  6444: u8 [a0 + 10] = 0\n  6447: u8 [a0 + 9] = 0\n  6450: u8 [a0 + 8] = 0\n  6453: u8 [a0 + 7] = 0\n  6456: u8 [a0 + 6] = 0\n  6459: u8 [a0 + 5] = 0\n  6462: u8 [a0 + 4] = 0\n  6465: u8 [a0 + 3] = 0\n  6468: u8 [a0 + 2] = 0\n  6471: u8 [a0 + 1] = 0\n  6474: u8 [a0 + 0] = 0\n  6476: a1 = 0x40\n  6479: a0 = 0\n  6481: ra = 106, jump @0\n      : @116 [@dyn 53] (gas: 14)\n  6486: i32 a0 = a0 + 0\n  6488: i32 a2 = sp + 0x2a0\n  6492: a1 = 0x40\n  6495: ecalli 4 // 'hash_keccak_256'\n  6497: a0 = u64 [sp + 0x2a0]\n  6501: u64 [sp + 0x198] = a0\n  6505: a0 = u64 [sp + 0x2a8]\n  6509: u64 [sp + 0x190] = a0\n  6513: a0 = u64 [sp + 0x2b0]\n  6517: u64 [sp + 0x188] = a0\n  6521: s1 = u64 [sp + 0x2b8]\n  6525: a1 = 0x20\n  6528: a0 = 0\n  6530: ra = 108, jump @0\n      : @117 [@dyn 54] (gas: 103)\n  6535: a1 = u64 [sp + 0x1a0]\n  6539: a1 = reverse a1\n  6541: a2 = u64 [sp + 0x1a8]\n  6545: a2 = reverse a2\n  6547: a3 = u64 [sp + 0x1b0]\n  6551: a3 = reverse a3\n  6553: a4 = u64 [sp + 0x1b8]\n  6557: a4 = reverse a4\n  6559: a5 = a4 >> 0x38\n  6562: u64 [sp + 0x108] = a5\n  6566: u8 [a0 + 0x1f] = a5\n  6569: a5 = a4 >> 0x30\n  6572: u64 [sp + 0xf8] = a5\n  6576: u8 [a0 + 0x1e] = a5\n  6579: a5 = a4 >> 0x28\n  6582: u64 [sp + 0xe8] = a5\n  6586: u8 [a0 + 0x1d] = a5\n  6589: a5 = a4 >> 0x20\n  6592: u64 [sp + 0xe0] = a5\n  6596: u8 [a0 + 0x1c] = a5\n  6599: a5 = a4 >> 0x18\n  6602: u64 [sp + 0xd8] = a5\n  6606: u8 [a0 + 0x1b] = a5\n  6609: a5 = a4 >> 0x10\n  6612: u64 [sp + 0xd0] = a5\n  6616: u8 [a0 + 0x1a] = a5\n  6619: a5 = a4 >> 0x8\n  6622: u64 [sp + 0xc8] = a5\n  6626: u8 [a0 + 0x19] = a5\n  6629: u64 [sp + 0x1a0] = a4\n  6633: u8 [a0 + 0x18] = a4\n  6636: a4 = a3 >> 0x38\n  6639: u64 [sp + 0xc0] = a4\n  6643: u8 [a0 + 0x17] = a4\n  6646: a4 = a3 >> 0x30\n  6649: u64 [sp + 0xb8] = a4\n  6653: u8 [a0 + 0x16] = a4\n  6656: a4 = a3 >> 0x28\n  6659: u64 [sp + 0xb0] = a4\n  6663: u8 [a0 + 0x15] = a4\n  6666: a4 = a3 >> 0x20\n  6669: u64 [sp + 0xa8] = a4\n  6673: u8 [a0 + 0x14] = a4\n  6676: a4 = a3 >> 0x18\n  6679: u64 [sp + 0xa0] = a4\n  6683: u8 [a0 + 0x13] = a4\n  6686: a4 = a3 >> 0x10\n  6689: u64 [sp + 0x98] = a4\n  6693: u8 [a0 + 0x12] = a4\n  6696: a4 = a3 >> 0x8\n  6699: u64 [sp + 0x90] = a4\n  6703: u8 [a0 + 0x11] = a4\n  6706: u64 [sp + 0x1a8] = a3\n  6710: u8 [a0 + 0x10] = a3\n  6713: a3 = a2 >> 0x38\n  6716: u64 [sp + 0x88] = a3\n  6720: u8 [a0 + 0xf] = a3\n  6723: a3 = a2 >> 0x30\n  6726: u64 [sp + 0x80] = a3\n  6730: u8 [a0 + 0xe] = a3\n  6733: a3 = a2 >> 0x28\n  6736: u64 [sp + 0x78] = a3\n  6739: u8 [a0 + 0xd] = a3\n  6742: a3 = a2 >> 0x20\n  6745: u64 [sp + 0x70] = a3\n  6748: u8 [a0 + 0xc] = a3\n  6751: a3 = a2 >> 0x18\n  6754: u64 [sp + 0x68] = a3\n  6757: u8 [a0 + 0xb] = a3\n  6760: a3 = a2 >> 0x10\n  6763: u64 [sp + 0x60] = a3\n  6766: u8 [a0 + 0xa] = a3\n  6769: a3 = a2 >> 0x8\n  6772: u64 [sp + 0x58] = a3\n  6775: u8 [a0 + 0x9] = a3\n  6778: u64 [sp + 0x1b0] = a2\n  6782: u8 [a0 + 0x8] = a2\n  6785: a2 = a1 >> 0x38\n  6788: u64 [sp + 0x50] = a2\n  6791: u8 [a0 + 0x7] = a2\n  6794: a2 = a1 >> 0x30\n  6797: u64 [sp + 0x48] = a2\n  6800: u8 [a0 + 0x6] = a2\n  6803: a2 = a1 >> 0x28\n  6806: u64 [sp + 0x40] = a2\n  6809: u8 [a0 + 0x5] = a2\n  6812: a2 = a1 >> 0x20\n  6815: u64 [sp + 0x38] = a2\n  6818: u8 [a0 + 0x4] = a2\n  6821: a2 = a1 >> 0x18\n  6824: u64 [sp + 0x30] = a2\n  6827: u8 [a0 + 0x3] = a2\n  6830: a2 = a1 >> 0x10\n  6833: u64 [sp + 0x28] = a2\n  6836: u8 [a0 + 0x2] = a2\n  6839: a2 = a1 >> 0x8\n  6842: u64 [sp + 0x20] = a2\n  6845: u8 [a0 + 0x1] = a2\n  6848: u64 [sp + 0x1b8] = a1\n  6852: u8 [a0] = a1\n  6854: a0 = 0x20\n  6857: a1 = 0x20\n  6860: ra = 110, jump @0\n      : @118 [@dyn 55] (gas: 66)\n  6865: a1 = s1 >> 0x38\n  6868: u8 [a0 + 0x1f] = a1\n  6871: a1 = s1 >> 0x30\n  6874: u8 [a0 + 0x1e] = a1\n  6877: a1 = s1 >> 0x28\n  6880: u8 [a0 + 0x1d] = a1\n  6883: a1 = s1 >> 0x20\n  6886: u8 [a0 + 0x1c] = a1\n  6889: a1 = s1 >> 0x18\n  6892: u8 [a0 + 0x1b] = a1\n  6895: a1 = s1 >> 0x10\n  6898: u8 [a0 + 0x1a] = a1\n  6901: a1 = s1 >> 0x8\n  6904: u8 [a0 + 0x19] = a1\n  6907: u8 [a0 + 0x18] = s1\n  6910: a2 = u64 [sp + 0x188]\n  6914: a1 = a2 >> 0x38\n  6917: u8 [a0 + 0x17] = a1\n  6920: a1 = a2 >> 0x30\n  6923: u8 [a0 + 0x16] = a1\n  6926: a1 = a2 >> 0x28\n  6929: u8 [a0 + 0x15] = a1\n  6932: a1 = a2 >> 0x20\n  6935: u8 [a0 + 0x14] = a1\n  6938: a1 = a2 >> 0x18\n  6941: u8 [a0 + 0x13] = a1\n  6944: a1 = a2 >> 0x10\n  6947: u8 [a0 + 0x12] = a1\n  6950: a1 = a2 >> 0x8\n  6953: u8 [a0 + 0x11] = a1\n  6956: u8 [a0 + 0x10] = a2\n  6959: a2 = u64 [sp + 0x190]\n  6963: a1 = a2 >> 0x38\n  6966: u8 [a0 + 0xf] = a1\n  6969: a1 = a2 >> 0x30\n  6972: u8 [a0 + 0xe] = a1\n  6975: a1 = a2 >> 0x28\n  6978: u8 [a0 + 0xd] = a1\n  6981: a1 = a2 >> 0x20\n  6984: u8 [a0 + 0xc] = a1\n  6987: a1 = a2 >> 0x18\n  6990: u8 [a0 + 0xb] = a1\n  6993: a1 = a2 >> 0x10\n  6996: u8 [a0 + 0xa] = a1\n  6999: a1 = a2 >> 0x8\n  7002: u8 [a0 + 0x9] = a1\n  7005: u8 [a0 + 0x8] = a2\n  7008: a2 = u64 [sp + 0x198]\n  7012: a1 = a2 >> 0x38\n  7015: u8 [a0 + 0x7] = a1\n  7018: a1 = a2 >> 0x30\n  7021: u8 [a0 + 0x6] = a1\n  7024: a1 = a2 >> 0x28\n  7027: u8 [a0 + 0x5] = a1\n  7030: a1 = a2 >> 0x20\n  7033: u8 [a0 + 0x4] = a1\n  7036: a1 = a2 >> 0x18\n  7039: u8 [a0 + 0x3] = a1\n  7042: a1 = a2 >> 0x10\n  7045: u8 [a0 + 0x2] = a1\n  7048: a1 = a2 >> 0x8\n  7051: u8 [a0 + 0x1] = a1\n  7054: u8 [a0] = a2\n  7056: a1 = 0x40\n  7059: a0 = 0\n  7061: ra = 112, jump @0\n      : @119 [@dyn 56] (gas: 28)\n  7066: i32 a0 = a0 + 0\n  7068: i32 a2 = sp + 0x2a0\n  7072: a1 = 0x40\n  7075: ecalli 4 // 'hash_keccak_256'\n  7077: a0 = u64 [sp + 0x2b8]\n  7081: a1 = u64 [sp + 0x2b0]\n  7085: a2 = u64 [sp + 0x2a8]\n  7089: a3 = u64 [sp + 0x2a0]\n  7093: a0 = reverse a0\n  7095: a1 = reverse a1\n  7097: a2 = reverse a2\n  7099: a3 = reverse a3\n  7101: u64 [sp + 0x298] = a3\n  7105: u64 [sp + 0x290] = a2\n  7109: u64 [sp + 0x288] = a1\n  7113: u64 [sp + 0x280] = a0\n  7117: u64 [sp + 696] = 0\n  7121: u64 [sp + 688] = 0\n  7125: u64 [sp + 680] = 0\n  7129: u64 [sp + 672] = 0\n  7133: u32 [sp + 608] = 0x20\n  7138: i32 a1 = sp + 0x280\n  7142: i32 a3 = sp + 0x2a0\n  7146: i32 a4 = sp + 0x260\n  7150: a2 = 0xffffffffffffffff\n  7153: a0 = 0\n  7155: ecalli 3 // 'get_storage'\n  7157: fallthrough\n      : @120 (gas: 20)\n  7158: a0 = u64 [sp + 0x2b8]\n  7162: t0 = u64 [sp + 0x2a0]\n  7166: a2 = u64 [sp + 0x2b0]\n  7170: a3 = u64 [sp + 0x2a8]\n  7174: a1 = u64 [sp + 0x1c8]\n  7178: a4 = a0 ^ a1\n  7181: s1 = a0 <u a1\n  7184: a0 = u64 [sp + 0x1c0]\n  7188: a5 = a2 <u a0\n  7191: a5 = s1 if a4 != 0\n  7194: a1 = u64 [sp + 0x1d0]\n  7198: s1 = a3 ^ a1\n  7201: a3 = a3 <u a1\n  7204: a1 = u64 [sp + 0x1d8]\n  7208: a1 = t0 <u a1\n  7211: a1 = a3 if s1 != 0\n  7214: a0 = a0 ^ a2\n  7217: a0 = a0 | a4\n  7220: a1 = a5 if a0 != 0\n  7223: jump @130 if a1 != 0\n      : @121 (gas: 3)\n  7227: a1 = 0x20\n  7230: a0 = 0\n  7232: ra = 114, jump @0\n      : @122 [@dyn 57] (gas: 59)\n  7237: a1 = u64 [sp + 0x138]\n  7241: u8 [a0 + 0x10] = a1\n  7244: a1 = u64 [sp + 0x18]\n  7247: u8 [a0 + 0xf] = a1\n  7250: a1 = u64 [sp + 0x10]\n  7253: u8 [a0 + 0xe] = a1\n  7256: a1 = u64 [sp + 0x8]\n  7259: u8 [a0 + 0xd] = a1\n  7262: a1 = u64 [sp]\n  7264: u8 [a0 + 0xc] = a1\n  7267: a2 = u64 [sp + 0x178]\n  7271: a1 = a2 >> 0x18\n  7274: u8 [a0 + 0xb] = a1\n  7277: a1 = a2 >> 0x10\n  7280: u8 [a0 + 0xa] = a1\n  7283: a1 = a2 >> 0x8\n  7286: u8 [a0 + 0x9] = a1\n  7289: u8 [a0 + 0x8] = a2\n  7292: a1 = u64 [sp + 0x180]\n  7296: u8 [a0 + 0x18] = a1\n  7299: a1 = u64 [sp + 0x130]\n  7303: u8 [a0 + 0x17] = a1\n  7306: a1 = u64 [sp + 0x128]\n  7310: u8 [a0 + 0x16] = a1\n  7313: a1 = u64 [sp + 0x120]\n  7317: u8 [a0 + 0x15] = a1\n  7320: a1 = u64 [sp + 0x118]\n  7324: u8 [a0 + 0x14] = a1\n  7327: a1 = u64 [sp + 0x110]\n  7331: u8 [a0 + 0x13] = a1\n  7334: a1 = u64 [sp + 0x100]\n  7338: u8 [a0 + 0x12] = a1\n  7341: a1 = u64 [sp + 0xf0]\n  7345: u8 [a0 + 0x11] = a1\n  7348: a1 = u64 [sp + 0x170]\n  7352: u8 [a0 + 0x1f] = a1\n  7355: a1 = u64 [sp + 0x168]\n  7359: u8 [a0 + 0x1e] = a1\n  7362: a1 = u64 [sp + 0x160]\n  7366: u8 [a0 + 0x1d] = a1\n  7369: a1 = u64 [sp + 0x158]\n  7373: u8 [a0 + 0x1c] = a1\n  7376: a1 = u64 [sp + 0x150]\n  7380: u8 [a0 + 0x1b] = a1\n  7383: a1 = u64 [sp + 0x148]\n  7387: u8 [a0 + 0x1a] = a1\n  7390: a1 = u64 [sp + 0x140]\n  7394: u8 [a0 + 0x19] = a1\n  7397: u8 [a0 + 7] = 0\n  7400: u8 [a0 + 6] = 0\n  7403: u8 [a0 + 5] = 0\n  7406: u8 [a0 + 4] = 0\n  7409: u8 [a0 + 3] = 0\n  7412: u8 [a0 + 2] = 0\n  7415: u8 [a0 + 1] = 0\n  7418: u8 [a0 + 0] = 0\n  7420: a0 = 0x20\n  7423: a1 = 0x20\n  7426: ra = 116, jump @0\n      : @123 [@dyn 58] (gas: 35)\n  7431: u8 [a0 + 31] = 0\n  7434: u8 [a0 + 30] = 0\n  7437: u8 [a0 + 29] = 0\n  7440: u8 [a0 + 28] = 0\n  7443: u8 [a0 + 27] = 0\n  7446: u8 [a0 + 26] = 0\n  7449: u8 [a0 + 25] = 0\n  7452: u8 [a0 + 24] = 0\n  7455: u8 [a0 + 23] = 0\n  7458: u8 [a0 + 22] = 0\n  7461: u8 [a0 + 21] = 0\n  7464: u8 [a0 + 20] = 0\n  7467: u8 [a0 + 19] = 0\n  7470: u8 [a0 + 18] = 0\n  7473: u8 [a0 + 17] = 0\n  7476: u8 [a0 + 16] = 0\n  7479: u8 [a0 + 15] = 0\n  7482: u8 [a0 + 14] = 0\n  7485: u8 [a0 + 13] = 0\n  7488: u8 [a0 + 12] = 0\n  7491: u8 [a0 + 11] = 0\n  7494: u8 [a0 + 10] = 0\n  7497: u8 [a0 + 9] = 0\n  7500: u8 [a0 + 8] = 0\n  7503: u8 [a0 + 7] = 0\n  7506: u8 [a0 + 6] = 0\n  7509: u8 [a0 + 5] = 0\n  7512: u8 [a0 + 4] = 0\n  7515: u8 [a0 + 3] = 0\n  7518: u8 [a0 + 2] = 0\n  7521: u8 [a0 + 1] = 0\n  7524: u8 [a0 + 0] = 0\n  7526: a1 = 0x40\n  7529: a0 = 0\n  7531: ra = 118, jump @0\n      : @124 [@dyn 59] (gas: 14)\n  7536: i32 a0 = a0 + 0\n  7538: i32 a2 = sp + 0x2a0\n  7542: a1 = 0x40\n  7545: ecalli 4 // 'hash_keccak_256'\n  7547: a0 = u64 [sp + 0x2a0]\n  7551: u64 [sp + 0x198] = a0\n  7555: a0 = u64 [sp + 0x2a8]\n  7559: u64 [sp + 0x190] = a0\n  7563: a0 = u64 [sp + 0x2b0]\n  7567: u64 [sp + 0x188] = a0\n  7571: s1 = u64 [sp + 0x2b8]\n  7575: a1 = 0x20\n  7578: a0 = 0\n  7580: ra = 120, jump @0\n      : @125 [@dyn 60] (gas: 67)\n  7585: a1 = u64 [sp + 0x108]\n  7589: u8 [a0 + 0x1f] = a1\n  7592: a1 = u64 [sp + 0xf8]\n  7596: u8 [a0 + 0x1e] = a1\n  7599: a1 = u64 [sp + 0xe8]\n  7603: u8 [a0 + 0x1d] = a1\n  7606: a1 = u64 [sp + 0xe0]\n  7610: u8 [a0 + 0x1c] = a1\n  7613: a1 = u64 [sp + 0xd8]\n  7617: u8 [a0 + 0x1b] = a1\n  7620: a1 = u64 [sp + 0xd0]\n  7624: u8 [a0 + 0x1a] = a1\n  7627: a1 = u64 [sp + 0xc8]\n  7631: u8 [a0 + 0x19] = a1\n  7634: a1 = u64 [sp + 0x1a0]\n  7638: u8 [a0 + 0x18] = a1\n  7641: a1 = u64 [sp + 0xc0]\n  7645: u8 [a0 + 0x17] = a1\n  7648: a1 = u64 [sp + 0xb8]\n  7652: u8 [a0 + 0x16] = a1\n  7655: a1 = u64 [sp + 0xb0]\n  7659: u8 [a0 + 0x15] = a1\n  7662: a1 = u64 [sp + 0xa8]\n  7666: u8 [a0 + 0x14] = a1\n  7669: a1 = u64 [sp + 0xa0]\n  7673: u8 [a0 + 0x13] = a1\n  7676: a1 = u64 [sp + 0x98]\n  7680: u8 [a0 + 0x12] = a1\n  7683: a1 = u64 [sp + 0x90]\n  7687: u8 [a0 + 0x11] = a1\n  7690: a1 = u64 [sp + 0x1a8]\n  7694: u8 [a0 + 0x10] = a1\n  7697: a1 = u64 [sp + 0x88]\n  7701: u8 [a0 + 0xf] = a1\n  7704: a1 = u64 [sp + 0x80]\n  7708: u8 [a0 + 0xe] = a1\n  7711: a1 = u64 [sp + 0x78]\n  7714: u8 [a0 + 0xd] = a1\n  7717: a1 = u64 [sp + 0x70]\n  7720: u8 [a0 + 0xc] = a1\n  7723: a1 = u64 [sp + 0x68]\n  7726: u8 [a0 + 0xb] = a1\n  7729: a1 = u64 [sp + 0x60]\n  7732: u8 [a0 + 0xa] = a1\n  7735: a1 = u64 [sp + 0x58]\n  7738: u8 [a0 + 0x9] = a1\n  7741: a1 = u64 [sp + 0x1b0]\n  7745: u8 [a0 + 0x8] = a1\n  7748: a1 = u64 [sp + 0x50]\n  7751: u8 [a0 + 0x7] = a1\n  7754: a1 = u64 [sp + 0x48]\n  7757: u8 [a0 + 0x6] = a1\n  7760: a1 = u64 [sp + 0x40]\n  7763: u8 [a0 + 0x5] = a1\n  7766: a1 = u64 [sp + 0x38]\n  7769: u8 [a0 + 0x4] = a1\n  7772: a1 = u64 [sp + 0x30]\n  7775: u8 [a0 + 0x3] = a1\n  7778: a1 = u64 [sp + 0x28]\n  7781: u8 [a0 + 0x2] = a1\n  7784: a1 = u64 [sp + 0x20]\n  7787: u8 [a0 + 0x1] = a1\n  7790: a1 = u64 [sp + 0x1b8]\n  7794: u8 [a0] = a1\n  7796: a0 = 0x20\n  7799: a1 = 0x20\n  7802: ra = 122, jump @0\n      : @126 [@dyn 61] (gas: 66)\n  7807: a1 = s1 >> 0x38\n  7810: u8 [a0 + 0x1f] = a1\n  7813: a1 = s1 >> 0x30\n  7816: u8 [a0 + 0x1e] = a1\n  7819: a1 = s1 >> 0x28\n  7822: u8 [a0 + 0x1d] = a1\n  7825: a1 = s1 >> 0x20\n  7828: u8 [a0 + 0x1c] = a1\n  7831: a1 = s1 >> 0x18\n  7834: u8 [a0 + 0x1b] = a1\n  7837: a1 = s1 >> 0x10\n  7840: u8 [a0 + 0x1a] = a1\n  7843: a1 = s1 >> 0x8\n  7846: u8 [a0 + 0x19] = a1\n  7849: u8 [a0 + 0x18] = s1\n  7852: a2 = u64 [sp + 0x188]\n  7856: a1 = a2 >> 0x38\n  7859: u8 [a0 + 0x17] = a1\n  7862: a1 = a2 >> 0x30\n  7865: u8 [a0 + 0x16] = a1\n  7868: a1 = a2 >> 0x28\n  7871: u8 [a0 + 0x15] = a1\n  7874: a1 = a2 >> 0x20\n  7877: u8 [a0 + 0x14] = a1\n  7880: a1 = a2 >> 0x18\n  7883: u8 [a0 + 0x13] = a1\n  7886: a1 = a2 >> 0x10\n  7889: u8 [a0 + 0x12] = a1\n  7892: a1 = a2 >> 0x8\n  7895: u8 [a0 + 0x11] = a1\n  7898: u8 [a0 + 0x10] = a2\n  7901: a2 = u64 [sp + 0x190]\n  7905: a1 = a2 >> 0x38\n  7908: u8 [a0 + 0xf] = a1\n  7911: a1 = a2 >> 0x30\n  7914: u8 [a0 + 0xe] = a1\n  7917: a1 = a2 >> 0x28\n  7920: u8 [a0 + 0xd] = a1\n  7923: a1 = a2 >> 0x20\n  7926: u8 [a0 + 0xc] = a1\n  7929: a1 = a2 >> 0x18\n  7932: u8 [a0 + 0xb] = a1\n  7935: a1 = a2 >> 0x10\n  7938: u8 [a0 + 0xa] = a1\n  7941: a1 = a2 >> 0x8\n  7944: u8 [a0 + 0x9] = a1\n  7947: u8 [a0 + 0x8] = a2\n  7950: a2 = u64 [sp + 0x198]\n  7954: a1 = a2 >> 0x38\n  7957: u8 [a0 + 0x7] = a1\n  7960: a1 = a2 >> 0x30\n  7963: u8 [a0 + 0x6] = a1\n  7966: a1 = a2 >> 0x28\n  7969: u8 [a0 + 0x5] = a1\n  7972: a1 = a2 >> 0x20\n  7975: u8 [a0 + 0x4] = a1\n  7978: a1 = a2 >> 0x18\n  7981: u8 [a0 + 0x3] = a1\n  7984: a1 = a2 >> 0x10\n  7987: u8 [a0 + 0x2] = a1\n  7990: a1 = a2 >> 0x8\n  7993: u8 [a0 + 0x1] = a1\n  7996: u8 [a0] = a2\n  7998: a1 = 0x40\n  8001: a0 = 0\n  8003: ra = 124, jump @0\n      : @127 [@dyn 62] (gas: 32)\n  8008: i32 a0 = a0 + 0\n  8010: i32 a2 = sp + 0x2a0\n  8014: a1 = 0x40\n  8017: ecalli 4 // 'hash_keccak_256'\n  8019: a0 = u64 [sp + 0x2b8]\n  8023: a1 = u64 [sp + 0x2b0]\n  8027: a2 = u64 [sp + 0x2a8]\n  8031: a3 = u64 [sp + 0x2a0]\n  8035: a0 = reverse a0\n  8037: a1 = reverse a1\n  8039: a2 = reverse a2\n  8041: a3 = reverse a3\n  8043: u64 [sp + 0x1a0] = a3\n  8047: u64 [sp + 0x298] = a3\n  8051: u64 [sp + 0x1a8] = a2\n  8055: u64 [sp + 0x290] = a2\n  8059: u64 [sp + 0x1b0] = a1\n  8063: u64 [sp + 0x288] = a1\n  8067: u64 [sp + 0x1b8] = a0\n  8071: u64 [sp + 0x280] = a0\n  8075: u64 [sp + 696] = 0\n  8079: u64 [sp + 688] = 0\n  8083: u64 [sp + 680] = 0\n  8087: u64 [sp + 672] = 0\n  8091: u32 [sp + 608] = 0x20\n  8096: i32 a1 = sp + 0x280\n  8100: i32 a3 = sp + 0x2a0\n  8104: i32 a4 = sp + 0x260\n  8108: a2 = 0xffffffffffffffff\n  8111: a0 = 0\n  8113: ecalli 3 // 'get_storage'\n  8115: fallthrough\n      : @128 (gas: 22)\n  8116: a2 = u64 [sp + 0x2b8]\n  8120: a3 = u64 [sp + 0x2b0]\n  8124: t1 = u64 [sp + 0x2a8]\n  8128: a1 = u64 [sp + 0x2a0]\n  8132: a4 = u64 [sp + 0x1c8]\n  8136: a0 = a2 ^ a4\n  8139: a4 = a2 <u a4\n  8142: t0 = u64 [sp + 0x1c0]\n  8146: a5 = a3 <u t0\n  8149: u64 [sp + 0x190] = a5\n  8153: a4 = a5 if a0 == 0\n  8156: a5 = u64 [sp + 0x1d0]\n  8160: t2 = t1 ^ a5\n  8163: s1 = t1 <u a5\n  8166: a5 = u64 [sp + 0x1d8]\n  8170: u64 [sp + 0x198] = a1\n  8174: ra = a1 <u a5\n  8177: s1 = ra if t2 == 0\n  8180: a5 = a3 ^ t0\n  8183: a0 = a0 | a5\n  8186: a4 = s1 if a0 == 0\n  8189: jump @136 if a4 != 0\n      : @129 (gas: 65)\n  8193: a0 = u64 [sp + 0x1c0]\n  8197: a0 = a3 - a0\n  8200: a3 = a0 - s1\n  8203: u64 [sp + 0x1c0] = a3\n  8207: a0 = a0 <u s1\n  8210: a3 = u64 [sp + 0x1c8]\n  8214: a2 = a2 - a3\n  8217: a1 = u64 [sp + 0x190]\n  8221: a2 = a2 - a1\n  8224: a2 = a2 - a0\n  8227: u64 [sp + 0x1c8] = a2\n  8231: a0 = u64 [sp + 0x1d0]\n  8235: a0 = t1 - a0\n  8238: a0 = a0 - ra\n  8241: u64 [sp + 0x1d0] = a0\n  8245: a0 = u64 [sp + 0x1d8]\n  8249: a1 = u64 [sp + 0x198]\n  8253: a0 = a1 - a0\n  8256: u64 [sp + 0x1d8] = a0\n  8260: u32 [sp + 608] = 0x20\n  8265: a0 = u64 [sp + 0x1a8]\n  8269: u64 [sp + 0x290] = a0\n  8273: a0 = u64 [sp + 0x1b0]\n  8277: u64 [sp + 0x288] = a0\n  8281: a0 = u64 [sp + 0x1b8]\n  8285: u64 [sp + 0x280] = a0\n  8289: s1 = u64 [sp + 0x1a0]\n  8293: u64 [sp + 0x298] = s1\n  8297: u64 [sp + 696] = 0\n  8301: u64 [sp + 688] = 0\n  8305: u64 [sp + 680] = 0\n  8309: u64 [sp + 672] = 0\n  8313: i32 a1 = sp + 0x280\n  8317: i32 a3 = sp + 0x2a0\n  8321: i32 a4 = sp + 0x260\n  8325: a2 = 0xffffffffffffffff\n  8328: a0 = 0\n  8330: ecalli 3 // 'get_storage'\n  8332: u64 [sp + 0x298] = s1\n  8336: a0 = u64 [sp + 0x1a8]\n  8340: u64 [sp + 0x290] = a0\n  8344: a0 = u64 [sp + 0x1b0]\n  8348: u64 [sp + 0x288] = a0\n  8352: a0 = u64 [sp + 0x1b8]\n  8356: u64 [sp + 0x280] = a0\n  8360: a0 = u64 [sp + 0x1c8]\n  8364: u64 [sp + 0x2b8] = a0\n  8368: a0 = u64 [sp + 0x1c0]\n  8372: u64 [sp + 0x2b0] = a0\n  8376: a0 = u64 [sp + 0x1d0]\n  8380: u64 [sp + 0x2a8] = a0\n  8384: a0 = u64 [sp + 0x1d8]\n  8388: u64 [sp + 0x2a0] = a0\n  8392: i32 a1 = sp + 0x280\n  8396: i32 a3 = sp + 0x2a0\n  8400: a2 = 0xffffffffffffffff\n  8403: a4 = 0x20\n  8406: a0 = 0\n  8408: ecalli 7 // 'set_storage'\n  8410: sp = s0 + 0xfffffffffffffd20\n  8414: ra = u64 [sp + 0x2d8]\n  8418: s0 = u64 [sp + 0x2d0]\n  8422: s1 = u64 [sp + 0x2c8]\n  8426: sp = sp + 0x2e0\n  8430: ret\n      : @130 (gas: 3)\n  8432: a0 = 0x40\n  8435: a1 = 0x20\n  8438: ra = 126, jump @0\n      : @131 [@dyn 63] (gas: 103)\n  8443: a1 = u8 [a0 + 0x11]\n  8446: a2 = u8 [a0 + 0x10]\n  8449: a3 = u8 [a0 + 0x12]\n  8452: a4 = u8 [a0 + 0x13]\n  8455: a1 = a1 << 0x8\n  8458: a1 = a1 | a2\n  8461: a3 = a3 << 0x10\n  8464: a4 = a4 << 0x18\n  8467: a3 = a3 | a4\n  8470: a1 = a1 | a3\n  8473: a2 = u8 [a0 + 0x15]\n  8476: a3 = u8 [a0 + 0x14]\n  8479: a4 = u8 [a0 + 0x16]\n  8482: a5 = u8 [a0 + 0x17]\n  8485: a2 = a2 << 0x8\n  8488: a2 = a2 | a3\n  8491: a4 = a4 << 0x10\n  8494: a5 = a5 << 0x18\n  8497: a4 = a4 | a5\n  8500: a2 = a2 | a4\n  8503: a2 = a2 << 0x20\n  8506: t0 = a2 | a1\n  8509: a2 = u8 [a0 + 0x1]\n  8512: a3 = u8 [a0]\n  8514: a4 = u8 [a0 + 0x2]\n  8517: a5 = u8 [a0 + 0x3]\n  8520: a2 = a2 << 0x8\n  8523: a2 = a2 | a3\n  8526: a4 = a4 << 0x10\n  8529: a5 = a5 << 0x18\n  8532: a4 = a4 | a5\n  8535: a2 = a2 | a4\n  8538: a3 = u8 [a0 + 0x5]\n  8541: a4 = u8 [a0 + 0x4]\n  8544: a5 = u8 [a0 + 0x6]\n  8547: s1 = u8 [a0 + 0x7]\n  8550: a3 = a3 << 0x8\n  8553: a3 = a3 | a4\n  8556: a5 = a5 << 0x10\n  8559: s1 = s1 << 0x18\n  8562: a5 = a5 | s1\n  8565: a3 = a3 | a5\n  8568: a3 = a3 << 0x20\n  8571: a2 = a2 | a3\n  8574: a3 = u8 [a0 + 0x19]\n  8577: a4 = u8 [a0 + 0x18]\n  8580: a5 = u8 [a0 + 0x1a]\n  8583: s1 = u8 [a0 + 0x1b]\n  8586: a3 = a3 << 0x8\n  8589: a3 = a3 | a4\n  8592: a5 = a5 << 0x10\n  8595: s1 = s1 << 0x18\n  8598: a5 = a5 | s1\n  8601: a3 = a3 | a5\n  8604: a4 = u8 [a0 + 0x1d]\n  8607: a5 = u8 [a0 + 0x1c]\n  8610: s1 = u8 [a0 + 0x1e]\n  8613: a1 = u8 [a0 + 0x1f]\n  8616: a4 = a4 << 0x8\n  8619: a4 = a4 | a5\n  8622: s1 = s1 << 0x10\n  8625: a1 = a1 << 0x18\n  8628: a1 = a1 | s1\n  8631: a1 = a1 | a4\n  8634: a1 = a1 << 0x20\n  8637: a3 = a3 | a1\n  8640: a1 = u8 [a0 + 0x9]\n  8643: a4 = u8 [a0 + 0x8]\n  8646: a5 = u8 [a0 + 0xa]\n  8649: s1 = u8 [a0 + 0xb]\n  8652: a1 = a1 << 0x8\n  8655: a1 = a1 | a4\n  8658: a5 = a5 << 0x10\n  8661: s1 = s1 << 0x18\n  8664: a5 = a5 | s1\n  8667: a1 = a1 | a5\n  8670: a4 = u8 [a0 + 0xd]\n  8673: a5 = u8 [a0 + 0xc]\n  8676: s1 = u8 [a0 + 0xe]\n  8679: a0 = u8 [a0 + 0xf]\n  8682: a4 = a4 << 0x8\n  8685: a4 = a4 | a5\n  8688: s1 = s1 << 0x10\n  8691: a0 = a0 << 0x18\n  8694: a0 = a0 | s1\n  8697: a0 = a0 | a4\n  8700: a0 = a0 << 0x20\n  8703: a0 = a0 | a1\n  8706: s1 = reverse a0\n  8708: a1 = reverse a3\n  8710: a2 = reverse a2\n  8712: a0 = reverse t0\n  8714: u64 [sp + 0x1d8] = a0\n  8718: u64 [sp + 0x1d0] = a2\n  8722: a0 = a0 | a2\n  8725: a2 = a1\n  8727: a1 = a1 | s1\n  8730: a1 = a1 | a0\n  8733: a1 = a1 >> 0x20\n  8736: a0 = a0 | s1\n  8739: a0 = a0 << 0x20\n  8742: a0 = a0 | a1\n  8745: jump @135 if a0 != 0\n      : @132 (gas: 5)\n  8749: u64 [sp + 0x1c8] = a2\n  8753: i32 a0 = a2 + 0\n  8755: a1 = 0x20\n  8758: u64 [sp + 0x1c0] = a0\n  8762: ra = 128, jump @0\n      : @133 [@dyn 64] (gas: 50)\n  8768: u8 [a0 + 31] = 0\n  8771: u8 [a0 + 30] = 0\n  8774: u8 [a0 + 29] = 0\n  8777: u8 [a0 + 28] = 0\n  8780: u8 [a0 + 27] = 0\n  8783: u8 [a0 + 26] = 0\n  8786: u8 [a0 + 25] = 0\n  8789: u8 [a0 + 24] = 0\n  8792: u8 [a0 + 23] = 0\n  8795: u8 [a0 + 22] = 0\n  8798: u8 [a0 + 21] = 0\n  8801: u8 [a0 + 20] = 0\n  8804: u8 [a0 + 19] = 0\n  8807: u8 [a0 + 18] = 0\n  8810: u8 [a0 + 17] = 0\n  8813: u8 [a0 + 16] = 0\n  8816: u8 [a0 + 15] = 0\n  8819: u8 [a0 + 14] = 0\n  8822: u8 [a0 + 13] = 0\n  8825: u8 [a0 + 12] = 0\n  8828: u8 [a0 + 11] = 0\n  8831: u8 [a0 + 10] = 0\n  8834: u8 [a0 + 9] = 0\n  8837: u8 [a0 + 8] = 0\n  8840: u8 [a0 + 7] = 0\n  8843: u8 [a0 + 6] = 0\n  8846: u8 [a0 + 5] = 0\n  8849: u8 [a0 + 4] = 0\n  8852: u8 [a0 + 3] = 0xa0\n  8857: u8 [a0 + 2] = 0x79\n  8861: u8 [a0 + 1] = 0xc3\n  8866: u8 [a0 + 0] = 0x8\n  8869: a1 = u64 [sp + 0x1c8]\n  8873: a0 = a1 + 0x4\n  8876: a1 = a0 <u a1\n  8879: a3 = u64 [sp + 0x1d8]\n  8883: a2 = a3 + a1\n  8886: a3 = a2 <u a3\n  8889: a3 = a1 if a1 == 0\n  8892: a3 = a3 + s1\n  8895: a1 = a3 <u s1\n  8898: a4 = u64 [sp + 0x1d0]\n  8902: a4 = a4 + a1\n  8905: u64 [sp + 0x1e8] = a2\n  8909: u64 [sp + 0x1e0] = a0\n  8913: u64 [sp + 0x1f0] = a3\n  8917: a0 = sp + 0x200\n  8921: a1 = sp + 0x1e0\n  8925: u64 [sp + 0x1f8] = a4\n  8929: ra = 130, jump @106\n      : @134 [@dyn 65] (gas: 30)\n  8935: a0 = u64 [sp + 0x208]\n  8939: t0 = u64 [sp + 0x218]\n  8943: t1 = u64 [sp + 0x200]\n  8947: a3 = u64 [sp + 0x210]\n  8951: a1 = u64 [sp + 0x1d8]\n  8955: a4 = a0 ^ a1\n  8958: a5 = a0 <u a1\n  8961: t2 = a1\n  8963: a2 = u64 [sp + 0x1c8]\n  8967: a1 = t1 <u a2\n  8970: a5 = a1 if a4 == 0\n  8973: a4 = a3 - s1\n  8976: a3 = a3 <u s1\n  8979: s1 = u64 [sp + 0x1d0]\n  8983: s1 = t0 - s1\n  8986: s1 = s1 - a3\n  8989: a3 = a4 <u a5\n  8992: s1 = s1 - a3\n  8995: a4 = a4 - a5\n  8998: a0 = a0 - t2\n  9001: a1 = a0 - a1\n  9004: a0 = t1 - a2\n  9007: a1 = a1 | s1\n  9010: a2 = a0 | a4\n  9013: a2 = a2 | a1\n  9016: a1 = a1 | a4\n  9019: a2 = a2 >> 0x20\n  9022: a1 = a1 << 0x20\n  9025: a1 = a1 | a2\n  9028: jump @140 if a1 == 0\n      : @135 (gas: 1)\n  9031: trap\n      : @136 (gas: 8)\n  9032: u64 [sp + 592] = 0\n  9036: u64 [sp + 584] = 0\n  9040: u64 [sp + 576] = 0\n  9044: a0 = 0x4e487b7100000000\n  9054: a1 = sp + 0x240\n  9058: u64 [sp + 0x258] = a0\n  9062: a0 = 0\n  9064: ra = 132, jump @8\n      : @137 [@dyn 66] (gas: 7)\n  9070: u64 [sp + 568] = 0\n  9074: u64 [sp + 560] = 0\n  9078: u64 [sp + 544] = 0x11\n  9083: a0 = 0x4\n  9086: a1 = sp + 0x220\n  9090: u64 [sp + 552] = 0\n  9094: ra = 134, jump @8\n      : @138 [@dyn 67] (gas: 3)\n  9100: a1 = 0x24\n  9103: a0 = 0\n  9105: ra = 136, jump @0\n      : @139 [@dyn 68] (gas: 5)\n  9111: i32 a1 = a0 + 0\n  9113: a0 = 0x1\n  9116: a2 = 0x24\n  9119: ecalli 5 // 'seal_return'\n  9121: fallthrough\n      : @140 (gas: 4)\n  9122: i32 s1 = a0 + 0\n  9124: a0 = u64 [sp + 0x1c0]\n  9128: a1 = s1\n  9130: ra = 138, jump @0\n      : @141 [@dyn 69] (gas: 6)\n  9136: i32 a1 = a0 + 0\n  9138: a0 = 0x1\n  9141: a2 = s1\n  9143: ra = 0x8c\n  9147: ecalli 5 // 'seal_return'\n  9149: fallthrough\n      : @142 [@dyn 70] (gas: 45)\n  9150: sp = sp + 0xffffffffffffff90\n  9153: u64 [sp + 0x68] = ra\n  9156: u64 [sp + 0x60] = s0\n  9159: u64 [sp + 0x58] = s1\n  9162: s0 = sp + 0x70\n  9165: sp = sp & 0xfffffffffffffff0\n  9168: a3 = u64 [a1 + 0x18]\n  9171: u64 [sp + 0x8] = a3\n  9174: a4 = u64 [a2 + 0x18]\n  9177: t2 = u64 [a1]\n  9179: u64 [sp] = t2\n  9181: a3 = u64 [a1 + 0x8]\n  9184: s1 = u64 [a2 + 0x8]\n  9187: a5 = u64 [a2]\n  9189: t1 = u64 [a1 + 0x10]\n  9192: t0 = u64 [a2 + 0x10]\n  9195: a2 = s1 + a3\n  9198: t2 = t2 + a5\n  9201: a5 = t2 <u a5\n  9204: a2 = a2 + a5\n  9207: ra = a2 ^ s1\n  9210: s1 = a2 <u s1\n  9213: s1 = a5 if ra == 0\n  9216: a1 = t0 + t1\n  9219: a5 = u64 [sp + 0x8]\n  9222: a5 = a5 + a4\n  9225: a4 = a1 <u t0\n  9228: a4 = a4 + a5\n  9231: a5 = a1 + s1\n  9234: a1 = a5 <u a1\n  9237: ra = a4 + a1\n  9240: a4 = a2 ^ a3\n  9243: a3 = a2 <u a3\n  9246: a1 = u64 [sp]\n  9248: s1 = t2 <u a1\n  9251: s1 = a3 if a4 != 0\n  9254: t0 = a5 <u t1\n  9257: a1 = u64 [sp + 0x8]\n  9260: a4 = ra ^ a1\n  9263: a3 = ra <u a1\n  9266: a3 = t0 if a4 == 0\n  9269: a1 = a5 ^ t1\n  9272: a1 = a1 | a4\n  9275: s1 = a3 if a1 != 0\n  9278: jump @144 if s1 != 0\n      : @143 (gas: 10)\n  9281: u64 [a0] = t2\n  9283: u64 [a0 + 0x8] = a2\n  9286: u64 [a0 + 0x10] = a5\n  9289: u64 [a0 + 0x18] = ra\n  9292: sp = s0 + 0xffffffffffffff90\n  9295: ra = u64 [sp + 0x68]\n  9298: s0 = u64 [sp + 0x60]\n  9301: s1 = u64 [sp + 0x58]\n  9304: sp = sp + 0x70\n  9307: ret\n      : @144 (gas: 8)\n  9309: u64 [sp + 64] = 0\n  9312: u64 [sp + 56] = 0\n  9315: u64 [sp + 48] = 0\n  9318: a0 = 0x4e487b7100000000\n  9328: a1 = sp + 0x30\n  9331: u64 [sp + 0x48] = a0\n  9334: a0 = 0\n  9336: ra = 142, jump @8\n      : @145 [@dyn 71] (gas: 7)\n  9342: u64 [sp + 40] = 0\n  9345: u64 [sp + 32] = 0\n  9348: u64 [sp + 16] = 0x11\n  9352: a0 = 0x4\n  9355: a1 = sp + 0x10\n  9358: u64 [sp + 24] = 0\n  9361: ra = 144, jump @8\n      : @146 [@dyn 72] (gas: 3)\n  9367: a1 = 0x24\n  9370: a0 = 0\n  9372: ra = 146, jump @0\n      : @147 [@dyn 73] (gas: 6)\n  9378: i32 a1 = a0 + 0\n  9380: a0 = 0x1\n  9383: a2 = 0x24\n  9386: ra = 0x94\n  9390: ecalli 5 // 'seal_return'\n  9392: fallthrough\n      : @148 [@dyn 74] (gas: 30)\n  9393: sp = sp + 0xfffffffffffffee0\n  9397: u64 [sp + 0x118] = ra\n  9401: u64 [sp + 0x110] = s0\n  9405: u64 [sp + 0x108] = s1\n  9409: s0 = sp + 0x120\n  9413: sp = sp & 0xffffffffffffffe0\n  9416: a3 = u64 [a2 + 0x18]\n  9419: u64 [sp + 0x38] = a3\n  9422: a3 = u64 [a2 + 0x10]\n  9425: u64 [sp + 0x30] = a3\n  9428: a3 = u64 [a2]\n  9430: u64 [sp + 0x28] = a3\n  9433: a2 = u64 [a2 + 0x8]\n  9436: u64 [sp + 0x20] = a2\n  9439: a2 = u64 [a1]\n  9441: u64 [sp + 0x58] = a2\n  9444: a2 = u64 [a1 + 0x8]\n  9447: u64 [sp + 0x50] = a2\n  9450: a2 = u64 [a1 + 0x10]\n  9453: u64 [sp + 0x48] = a2\n  9456: a1 = u64 [a1 + 0x18]\n  9459: u64 [sp + 0x40] = a1\n  9462: a1 = u64 [a0]\n  9464: u64 [sp + 0x18] = a1\n  9467: a1 = u64 [a0 + 0x8]\n  9470: u64 [sp + 0x10] = a1\n  9473: s1 = u32 [a0 + 0x10]\n  9476: a1 = 0x20\n  9479: a0 = 0\n  9481: ra = 150, jump @0\n      : @149 [@dyn 75] (gas: 58)\n  9487: a1 = reverse s1\n  9489: a2 = u64 [sp + 0x10]\n  9492: a2 = reverse a2\n  9494: a3 = u64 [sp + 0x18]\n  9497: a3 = reverse a3\n  9499: u8 [a0 + 0x18] = a3\n  9502: u8 [a0 + 0x10] = a2\n  9505: u8 [a0 + 11] = 0\n  9508: u8 [a0 + 10] = 0\n  9511: u8 [a0 + 9] = 0\n  9514: u8 [a0 + 0x8] = a1\n  9517: u8 [a0 + 7] = 0\n  9520: u8 [a0 + 6] = 0\n  9523: u8 [a0 + 5] = 0\n  9526: u8 [a0 + 4] = 0\n  9529: u8 [a0 + 3] = 0\n  9532: u8 [a0 + 2] = 0\n  9535: u8 [a0 + 1] = 0\n  9538: u8 [a0 + 0] = 0\n  9540: a4 = a3 >> 0x38\n  9543: u8 [a0 + 0x1f] = a4\n  9546: a4 = a3 >> 0x30\n  9549: u8 [a0 + 0x1e] = a4\n  9552: a4 = a3 >> 0x28\n  9555: u8 [a0 + 0x1d] = a4\n  9558: a4 = a3 >> 0x20\n  9561: u8 [a0 + 0x1c] = a4\n  9564: a4 = a3 >> 0x18\n  9567: u8 [a0 + 0x1b] = a4\n  9570: a4 = a3 >> 0x10\n  9573: u8 [a0 + 0x1a] = a4\n  9576: a3 = a3 >> 0x8\n  9579: u8 [a0 + 0x19] = a3\n  9582: a3 = a2 >> 0x38\n  9585: u8 [a0 + 0x17] = a3\n  9588: a3 = a2 >> 0x30\n  9591: u8 [a0 + 0x16] = a3\n  9594: a3 = a2 >> 0x28\n  9597: u8 [a0 + 0x15] = a3\n  9600: a3 = a2 >> 0x20\n  9603: u8 [a0 + 0x14] = a3\n  9606: a3 = a2 >> 0x18\n  9609: u8 [a0 + 0x13] = a3\n  9612: a3 = a2 >> 0x10\n  9615: u8 [a0 + 0x12] = a3\n  9618: a2 = a2 >> 0x8\n  9621: u8 [a0 + 0x11] = a2\n  9624: a2 = a1 >> 0x38\n  9627: u8 [a0 + 0xf] = a2\n  9630: a2 = a1 >> 0x30\n  9633: u8 [a0 + 0xe] = a2\n  9636: a2 = a1 >> 0x28\n  9639: u8 [a0 + 0xd] = a2\n  9642: a1 = a1 >> 0x20\n  9645: u8 [a0 + 0xc] = a1\n  9648: a0 = 0x20\n  9651: a1 = 0x20\n  9654: ra = 152, jump @0\n      : @150 [@dyn 76] (gas: 35)\n  9660: u8 [a0 + 31] = 0\n  9663: u8 [a0 + 30] = 0\n  9666: u8 [a0 + 29] = 0\n  9669: u8 [a0 + 28] = 0\n  9672: u8 [a0 + 27] = 0\n  9675: u8 [a0 + 26] = 0\n  9678: u8 [a0 + 25] = 0\n  9681: u8 [a0 + 24] = 0\n  9684: u8 [a0 + 23] = 0\n  9687: u8 [a0 + 22] = 0\n  9690: u8 [a0 + 21] = 0\n  9693: u8 [a0 + 20] = 0\n  9696: u8 [a0 + 19] = 0\n  9699: u8 [a0 + 18] = 0\n  9702: u8 [a0 + 17] = 0\n  9705: u8 [a0 + 16] = 0\n  9708: u8 [a0 + 15] = 0\n  9711: u8 [a0 + 14] = 0\n  9714: u8 [a0 + 13] = 0\n  9717: u8 [a0 + 12] = 0\n  9720: u8 [a0 + 11] = 0\n  9723: u8 [a0 + 10] = 0\n  9726: u8 [a0 + 9] = 0\n  9729: u8 [a0 + 8] = 0\n  9732: u8 [a0 + 7] = 0\n  9735: u8 [a0 + 6] = 0\n  9738: u8 [a0 + 5] = 0\n  9741: u8 [a0 + 4] = 0\n  9744: u8 [a0 + 3] = 0\n  9747: u8 [a0 + 2] = 0\n  9750: u8 [a0 + 1] = 0\n  9753: u8 [a0 + 0] = 0\n  9755: a1 = 0x40\n  9758: a0 = 0\n  9760: ra = 154, jump @0\n      : @151 [@dyn 77] (gas: 14)\n  9766: i32 a0 = a0 + 0\n  9768: i32 a2 = sp + 0xe0\n  9772: a1 = 0x40\n  9775: ecalli 4 // 'hash_keccak_256'\n  9777: a0 = u64 [sp + 0xe0]\n  9781: u64 [sp + 0x18] = a0\n  9784: a0 = u64 [sp + 0xe8]\n  9788: u64 [sp + 0x10] = a0\n  9791: a0 = u64 [sp + 0xf0]\n  9795: u64 [sp + 0x8] = a0\n  9798: s1 = u64 [sp + 0xf8]\n  9802: a1 = 0x20\n  9805: a0 = 0\n  9807: ra = 156, jump @0\n      : @152 [@dyn 78] (gas: 71)\n  9813: a1 = u64 [sp + 0x40]\n  9816: a1 = reverse a1\n  9818: a2 = u64 [sp + 0x48]\n  9821: a2 = reverse a2\n  9823: a3 = u64 [sp + 0x50]\n  9826: a3 = reverse a3\n  9828: a4 = u64 [sp + 0x58]\n  9831: a4 = reverse a4\n  9833: a5 = a4 >> 0x38\n  9836: u8 [a0 + 0x1f] = a5\n  9839: a5 = a4 >> 0x30\n  9842: u8 [a0 + 0x1e] = a5\n  9845: a5 = a4 >> 0x28\n  9848: u8 [a0 + 0x1d] = a5\n  9851: a5 = a4 >> 0x20\n  9854: u8 [a0 + 0x1c] = a5\n  9857: a5 = a4 >> 0x18\n  9860: u8 [a0 + 0x1b] = a5\n  9863: a5 = a4 >> 0x10\n  9866: u8 [a0 + 0x1a] = a5\n  9869: a5 = a4 >> 0x8\n  9872: u8 [a0 + 0x19] = a5\n  9875: u8 [a0 + 0x18] = a4\n  9878: a4 = a3 >> 0x38\n  9881: u8 [a0 + 0x17] = a4\n  9884: a4 = a3 >> 0x30\n  9887: u8 [a0 + 0x16] = a4\n  9890: a4 = a3 >> 0x28\n  9893: u8 [a0 + 0x15] = a4\n  9896: a4 = a3 >> 0x20\n  9899: u8 [a0 + 0x14] = a4\n  9902: a4 = a3 >> 0x18\n  9905: u8 [a0 + 0x13] = a4\n  9908: a4 = a3 >> 0x10\n  9911: u8 [a0 + 0x12] = a4\n  9914: a4 = a3 >> 0x8\n  9917: u8 [a0 + 0x11] = a4\n  9920: u8 [a0 + 0x10] = a3\n  9923: a3 = a2 >> 0x38\n  9926: u8 [a0 + 0xf] = a3\n  9929: a3 = a2 >> 0x30\n  9932: u8 [a0 + 0xe] = a3\n  9935: a3 = a2 >> 0x28\n  9938: u8 [a0 + 0xd] = a3\n  9941: a3 = a2 >> 0x20\n  9944: u8 [a0 + 0xc] = a3\n  9947: a3 = a2 >> 0x18\n  9950: u8 [a0 + 0xb] = a3\n  9953: a3 = a2 >> 0x10\n  9956: u8 [a0 + 0xa] = a3\n  9959: a3 = a2 >> 0x8\n  9962: u8 [a0 + 0x9] = a3\n  9965: u8 [a0 + 0x8] = a2\n  9968: a2 = a1 >> 0x38\n  9971: u8 [a0 + 0x7] = a2\n  9974: a2 = a1 >> 0x30\n  9977: u8 [a0 + 0x6] = a2\n  9980: a2 = a1 >> 0x28\n  9983: u8 [a0 + 0x5] = a2\n  9986: a2 = a1 >> 0x20\n  9989: u8 [a0 + 0x4] = a2\n  9992: a2 = a1 >> 0x18\n  9995: u8 [a0 + 0x3] = a2\n  9998: a2 = a1 >> 0x10\n 10001: u8 [a0 + 0x2] = a2\n 10004: a2 = a1 >> 0x8\n 10007: u8 [a0 + 0x1] = a2\n 10010: u8 [a0] = a1\n 10012: a0 = 0x20\n 10015: a1 = 0x20\n 10018: ra = 158, jump @0\n      : @153 [@dyn 79] (gas: 66)\n 10024: a1 = s1 >> 0x38\n 10027: u8 [a0 + 0x1f] = a1\n 10030: a1 = s1 >> 0x30\n 10033: u8 [a0 + 0x1e] = a1\n 10036: a1 = s1 >> 0x28\n 10039: u8 [a0 + 0x1d] = a1\n 10042: a1 = s1 >> 0x20\n 10045: u8 [a0 + 0x1c] = a1\n 10048: a1 = s1 >> 0x18\n 10051: u8 [a0 + 0x1b] = a1\n 10054: a1 = s1 >> 0x10\n 10057: u8 [a0 + 0x1a] = a1\n 10060: a1 = s1 >> 0x8\n 10063: u8 [a0 + 0x19] = a1\n 10066: u8 [a0 + 0x18] = s1\n 10069: a2 = u64 [sp + 0x8]\n 10072: a1 = a2 >> 0x38\n 10075: u8 [a0 + 0x17] = a1\n 10078: a1 = a2 >> 0x30\n 10081: u8 [a0 + 0x16] = a1\n 10084: a1 = a2 >> 0x28\n 10087: u8 [a0 + 0x15] = a1\n 10090: a1 = a2 >> 0x20\n 10093: u8 [a0 + 0x14] = a1\n 10096: a1 = a2 >> 0x18\n 10099: u8 [a0 + 0x13] = a1\n 10102: a1 = a2 >> 0x10\n 10105: u8 [a0 + 0x12] = a1\n 10108: a1 = a2 >> 0x8\n 10111: u8 [a0 + 0x11] = a1\n 10114: u8 [a0 + 0x10] = a2\n 10117: a2 = u64 [sp + 0x10]\n 10120: a1 = a2 >> 0x38\n 10123: u8 [a0 + 0xf] = a1\n 10126: a1 = a2 >> 0x30\n 10129: u8 [a0 + 0xe] = a1\n 10132: a1 = a2 >> 0x28\n 10135: u8 [a0 + 0xd] = a1\n 10138: a1 = a2 >> 0x20\n 10141: u8 [a0 + 0xc] = a1\n 10144: a1 = a2 >> 0x18\n 10147: u8 [a0 + 0xb] = a1\n 10150: a1 = a2 >> 0x10\n 10153: u8 [a0 + 0xa] = a1\n 10156: a1 = a2 >> 0x8\n 10159: u8 [a0 + 0x9] = a1\n 10162: u8 [a0 + 0x8] = a2\n 10165: a2 = u64 [sp + 0x18]\n 10168: a1 = a2 >> 0x38\n 10171: u8 [a0 + 0x7] = a1\n 10174: a1 = a2 >> 0x30\n 10177: u8 [a0 + 0x6] = a1\n 10180: a1 = a2 >> 0x28\n 10183: u8 [a0 + 0x5] = a1\n 10186: a1 = a2 >> 0x20\n 10189: u8 [a0 + 0x4] = a1\n 10192: a1 = a2 >> 0x18\n 10195: u8 [a0 + 0x3] = a1\n 10198: a1 = a2 >> 0x10\n 10201: u8 [a0 + 0x2] = a1\n 10204: a1 = a2 >> 0x8\n 10207: u8 [a0 + 0x1] = a1\n 10210: u8 [a0] = a2\n 10212: a1 = 0x40\n 10215: a0 = 0\n 10217: ra = 160, jump @0\n      : @154 [@dyn 80] (gas: 32)\n 10223: i32 a0 = a0 + 0\n 10225: i32 a2 = sp + 0xe0\n 10229: a1 = 0x40\n 10232: ecalli 4 // 'hash_keccak_256'\n 10234: a0 = u64 [sp + 0xf8]\n 10238: a1 = u64 [sp + 0xf0]\n 10242: a2 = u64 [sp + 0xe8]\n 10246: a3 = u64 [sp + 0xe0]\n 10250: a0 = reverse a0\n 10252: a1 = reverse a1\n 10254: a2 = reverse a2\n 10256: a3 = reverse a3\n 10258: u64 [sp + 0x40] = a3\n 10261: u64 [sp + 0xd8] = a3\n 10265: u64 [sp + 0x48] = a2\n 10268: u64 [sp + 0xd0] = a2\n 10272: u64 [sp + 0x50] = a1\n 10275: u64 [sp + 0xc8] = a1\n 10279: u64 [sp + 0x58] = a0\n 10282: u64 [sp + 0xc0] = a0\n 10286: u64 [sp + 248] = 0\n 10290: u64 [sp + 240] = 0\n 10294: u64 [sp + 232] = 0\n 10298: u64 [sp + 224] = 0\n 10302: u32 [sp + 160] = 0x20\n 10307: i32 a1 = sp + 0xc0\n 10311: i32 a3 = sp + 0xe0\n 10315: i32 a4 = sp + 0xa0\n 10319: a2 = 0xffffffffffffffff\n 10322: a0 = 0\n 10324: ecalli 3 // 'get_storage'\n 10326: fallthrough\n      : @155 (gas: 37)\n 10327: a3 = u64 [sp + 0xe8]\n 10331: a1 = u64 [sp + 0xe0]\n 10335: t0 = u64 [sp + 0xf8]\n 10339: a2 = u64 [sp + 0xf0]\n 10343: a5 = u64 [sp + 0x20]\n 10346: a5 = a5 + a3\n 10349: a0 = u64 [sp + 0x28]\n 10352: a0 = a0 + a1\n 10355: u64 [sp + 0x28] = a0\n 10358: a4 = a0 <u a1\n 10361: a5 = a5 + a4\n 10364: t1 = a5 ^ a3\n 10367: u64 [sp + 0x20] = a5\n 10370: a3 = a5 <u a3\n 10373: a5 = a4 ^ 0x1\n 10376: a4 = a3 if t1 != 0\n 10379: a0 = u64 [sp + 0x30]\n 10382: a0 = a0 + a2\n 10385: s1 = a0 + a4\n 10388: a4 = s1 <u a0\n 10391: a1 = u64 [sp + 0x38]\n 10394: a1 = a1 + t0\n 10397: a0 = a0 <u a2\n 10400: a0 = a0 + a1\n 10403: a4 = a4 + a0\n 10406: a0 = s1 <u a2\n 10409: a1 = a4 ^ t0\n 10412: u64 [sp + 0x38] = a4\n 10415: a4 = a4 <u t0\n 10418: a4 = a0 if a1 == 0\n 10421: a0 = a4 ^ 0x1\n 10424: a2 = a2 ^ s1\n 10427: a1 = a1 | a2\n 10430: a2 = a3 ^ 0x1\n 10433: a5 = a2 if t1 != 0\n 10436: a5 = a0 if a1 != 0\n 10439: jump @157 if a5 == 0\n      : @156 (gas: 46)\n 10443: a0 = u64 [sp + 0x48]\n 10446: u64 [sp + 0xd0] = a0\n 10450: a0 = u64 [sp + 0x50]\n 10453: u64 [sp + 0xc8] = a0\n 10457: a0 = u64 [sp + 0x58]\n 10460: u64 [sp + 0xc0] = a0\n 10464: a0 = u64 [sp + 0x40]\n 10467: u64 [sp + 0xd8] = a0\n 10471: u64 [sp + 248] = 0\n 10475: u64 [sp + 240] = 0\n 10479: u64 [sp + 232] = 0\n 10483: u64 [sp + 224] = 0\n 10487: u32 [sp + 160] = 0x20\n 10492: i32 a1 = sp + 0xc0\n 10496: i32 a3 = sp + 0xe0\n 10500: i32 a4 = sp + 0xa0\n 10504: a2 = 0xffffffffffffffff\n 10507: a0 = 0\n 10509: ecalli 3 // 'get_storage'\n 10511: a0 = u64 [sp + 0x40]\n 10514: u64 [sp + 0xd8] = a0\n 10518: a0 = u64 [sp + 0x48]\n 10521: u64 [sp + 0xd0] = a0\n 10525: a0 = u64 [sp + 0x50]\n 10528: u64 [sp + 0xc8] = a0\n 10532: a0 = u64 [sp + 0x58]\n 10535: u64 [sp + 0xc0] = a0\n 10539: a0 = u64 [sp + 0x38]\n 10542: u64 [sp + 0xf8] = a0\n 10546: u64 [sp + 0xf0] = s1\n 10550: a0 = u64 [sp + 0x20]\n 10553: u64 [sp + 0xe8] = a0\n 10557: a0 = u64 [sp + 0x28]\n 10560: u64 [sp + 0xe0] = a0\n 10564: i32 a1 = sp + 0xc0\n 10568: i32 a3 = sp + 0xe0\n 10572: a2 = 0xffffffffffffffff\n 10575: a4 = 0x20\n 10578: a0 = 0\n 10580: ecalli 7 // 'set_storage'\n 10582: sp = s0 + 0xfffffffffffffee0\n 10586: ra = u64 [sp + 0x118]\n 10590: s0 = u64 [sp + 0x110]\n 10594: s1 = u64 [sp + 0x108]\n 10598: sp = sp + 0x120\n 10602: ret\n      : @157 (gas: 8)\n 10604: u64 [sp + 144] = 0\n 10608: u64 [sp + 136] = 0\n 10612: u64 [sp + 128] = 0\n 10616: a0 = 0x4e487b7100000000\n 10626: a1 = sp + 0x80\n 10630: u64 [sp + 0x98] = a0\n 10634: a0 = 0\n 10636: ra = 162, jump @8\n      : @158 [@dyn 81] (gas: 7)\n 10642: u64 [sp + 120] = 0\n 10645: u64 [sp + 112] = 0\n 10648: u64 [sp + 96] = 0x11\n 10652: a0 = 0x4\n 10655: a1 = sp + 0x60\n 10658: u64 [sp + 104] = 0\n 10661: ra = 164, jump @8\n      : @159 [@dyn 82] (gas: 3)\n 10667: a1 = 0x24\n 10670: a0 = 0\n 10672: ra = 166, jump @0\n      : @160 [@dyn 83] (gas: 7)\n 10678: i32 a1 = a0 + 0\n 10680: a0 = 0x1\n 10683: a2 = 0x24\n 10686: ecalli 5 // 'seal_return'\n 10688: a0 = 0\n 10690: ra = 0xa8\n 10694: jump @10\n      : @161 [export #0: 'call'] (gas: 2)\n 10697: a0 = 0\n 10699: ra = 168, jump @10\n      : @162 [@dyn 84] [export #1: 'deploy'] (gas: 2)\n 10705: a0 = 0x1\n 10708: ra = 170, jump @10\n      : @163 [@dyn 85] (gas: 9)\n 10714: sp = sp + 0xffffffffffffffc0\n 10717: u64 [sp + 0x38] = ra\n 10720: u64 [sp + 0x30] = s0\n 10723: u64 [sp + 0x28] = s1\n 10726: s0 = sp + 0x40\n 10729: sp = sp & 0xfffffffffffffff0\n 10732: s1 = a0\n 10734: a0 = sp\n 10736: ra = 172, jump @38\n      : @164 [@dyn 86] (gas: 14)\n 10742: a0 = u64 [sp + 0x10]\n 10745: a1 = u64 [sp + 0x18]\n 10748: a2 = u64 [sp]\n 10750: a3 = u64 [sp + 0x8]\n 10753: u64 [s1 + 0x10] = a0\n 10756: u64 [s1 + 0x18] = a1\n 10759: u64 [s1] = a2\n 10761: u64 [s1 + 0x8] = a3\n 10764: sp = s0 + 0xffffffffffffffc0\n 10767: ra = u64 [sp + 0x38]\n 10770: s0 = u64 [sp + 0x30]\n 10773: s1 = u64 [sp + 0x28]\n 10776: sp = sp + 0x40\n 10779: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"addCard(address,uint256,uint256)": "3641d726",
							"getBalance(address,uint256)": "2b04e840",
							"removeCard(address,uint256,uint256)": "2d58bd80"
						}
					},
					"irOptimized": "/// @use-src 0:\"CardInventory.sol\"\nobject \"CardInventory_71\" {\n    code {\n        {\n            /// @src 0:78:653  \"contract CardInventory {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"CardInventory_71_deployed\"), datasize(\"CardInventory_71_deployed\"))\n            return(_1, datasize(\"CardInventory_71_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 0:\"CardInventory.sol\"\n    object \"CardInventory_71_deployed\" {\n        code {\n            {\n                /// @src 0:78:653  \"contract CardInventory {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x2b04e840 { external_fun_getBalance() }\n                    case 0x2d58bd80 { external_fun_removeCard() }\n                    case 0x3641d726 { external_fun_addCard() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_addresst_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_getBalance()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                let ret := fun_getBalance(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_uint256(add(headStart, offset_2), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_removeCard()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_addresst_uint256t_uint256(4, calldatasize())\n                fun_removeCard(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_addCard()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_addresst_uint256t_uint256(4, calldatasize())\n                fun_addCard(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function zero_value_for_split_uint256() -> ret\n            { ret := 0 }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_mapping_uint256_uint256_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function mapping_index_access_mapping_uint256_uint256_of_uint256(slot, key) -> dataSlot\n            {\n                mstore(0, convert_uint256_to_uint256(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            /// @ast-id 70 @src 0:522:650  \"function getBalance(address user, uint cardId) external view returns (uint) {...\"\n            function fun_getBalance(var_user, var_cardId) -> var\n            {\n                /// @src 0:592:596  \"uint\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var := zero_uint256\n                /// @src 0:616:628  \"cardBalances\"\n                let _2_slot := 0x00\n                let expr_slot := _2_slot\n                /// @src 0:629:633  \"user\"\n                let _1 := var_user\n                let expr := _1\n                /// @src 0:616:634  \"cardBalances[user]\"\n                let _2 := mapping_index_access_mapping_address_mapping_uint256_uint256_of_address(expr_slot, expr)\n                let _5_slot := _2\n                let expr_65_slot := _5_slot\n                /// @src 0:635:641  \"cardId\"\n                let _3 := var_cardId\n                let expr_1 := _3\n                /// @src 0:616:642  \"cardBalances[user][cardId]\"\n                let _4 := mapping_index_access_mapping_uint256_uint256_of_uint256(expr_65_slot, expr_1)\n                let _5 := read_from_storage_split_offset_uint256(_4)\n                let expr_2 := _5\n                /// @src 0:609:642  \"return cardBalances[user][cardId]\"\n                var := expr_2\n                leave\n            }\n            /// @src 0:78:653  \"contract CardInventory {...\"\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not enough cards\")\n            }\n            function abi_encode_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 16)\n                store_literal_in_memory_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_83e8(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(tail)\n            }\n            function require_helper_stringliteral_83e8(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_83e8(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            /// @ast-id 54 @src 0:312:512  \"function removeCard(address user, uint cardId, uint amount) external {...\"\n            function fun_removeCard(var_user, var_cardId, var_amount)\n            {\n                /// @src 0:400:412  \"cardBalances\"\n                let _9_slot := 0x00\n                let expr_35_slot := _9_slot\n                /// @src 0:413:417  \"user\"\n                let _1 := var_user\n                let expr := _1\n                /// @src 0:400:418  \"cardBalances[user]\"\n                let _2 := mapping_index_access_mapping_address_mapping_uint256_uint256_of_address(expr_35_slot, expr)\n                let _slot := _2\n                let expr_37_slot := _slot\n                /// @src 0:419:425  \"cardId\"\n                let _3 := var_cardId\n                let expr_1 := _3\n                /// @src 0:400:426  \"cardBalances[user][cardId]\"\n                let _4 := mapping_index_access_mapping_uint256_uint256_of_uint256(expr_37_slot, expr_1)\n                let _5 := read_from_storage_split_offset_uint256(_4)\n                let expr_2 := _5\n                /// @src 0:430:436  \"amount\"\n                let _6 := var_amount\n                let expr_3 := _6\n                /// @src 0:400:436  \"cardBalances[user][cardId] >= amount\"\n                let expr_4 := iszero(lt(cleanup_uint256(expr_2), cleanup_uint256(expr_3)))\n                /// @src 0:392:457  \"require(cardBalances[user][cardId] >= amount, \\\"Not enough cards\\\")\"\n                require_helper_stringliteral_83e8(expr_4)\n                /// @src 0:498:504  \"amount\"\n                let _7 := var_amount\n                let expr_5 := _7\n                /// @src 0:468:480  \"cardBalances\"\n                let _18_slot := 0x00\n                let expr_45_slot := _18_slot\n                /// @src 0:481:485  \"user\"\n                let _8 := var_user\n                let expr_6 := _8\n                /// @src 0:468:486  \"cardBalances[user]\"\n                let _9 := mapping_index_access_mapping_address_mapping_uint256_uint256_of_address(expr_45_slot, expr_6)\n                let _21_slot := _9\n                let expr_48_slot := _21_slot\n                /// @src 0:487:493  \"cardId\"\n                let _10 := var_cardId\n                let expr_7 := _10\n                /// @src 0:468:494  \"cardBalances[user][cardId]\"\n                let _11 := mapping_index_access_mapping_uint256_uint256_of_uint256(expr_48_slot, expr_7)\n                /// @src 0:468:504  \"cardBalances[user][cardId] -= amount\"\n                let _12 := read_from_storage_split_offset_uint256(_11)\n                let expr_8 := checked_sub_uint256(_12, expr_5)\n                update_storage_value_offset_uint256_to_uint256(_11, expr_8)\n            }\n            /// @src 0:78:653  \"contract CardInventory {...\"\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @ast-id 25 @src 0:181:302  \"function addCard(address user, uint cardId, uint amount) external {...\"\n            function fun_addCard(var_user, var_cardId, var_amount)\n            {\n                /// @src 0:288:294  \"amount\"\n                let _1 := var_amount\n                let expr := _1\n                /// @src 0:258:270  \"cardBalances\"\n                let _26_slot := 0x00\n                let expr_16_slot := _26_slot\n                /// @src 0:271:275  \"user\"\n                let _2 := var_user\n                let expr_1 := _2\n                /// @src 0:258:276  \"cardBalances[user]\"\n                let _3 := mapping_index_access_mapping_address_mapping_uint256_uint256_of_address(expr_16_slot, expr_1)\n                let _29_slot := _3\n                let expr_19_slot := _29_slot\n                /// @src 0:277:283  \"cardId\"\n                let _4 := var_cardId\n                let expr_2 := _4\n                /// @src 0:258:284  \"cardBalances[user][cardId]\"\n                let _5 := mapping_index_access_mapping_uint256_uint256_of_uint256(expr_19_slot, expr_2)\n                /// @src 0:258:294  \"cardBalances[user][cardId] += amount\"\n                let _6 := read_from_storage_split_offset_uint256(_5)\n                let expr_3 := checked_add_uint256(_6, expr)\n                update_storage_value_offset_uint256_to_uint256(_5, expr_3)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220ef8d745eac46b0004151b1c6bd978687c3fdf8c22126c171c69702613e33079264736f6c634300081c0033\"\n    }\n}\n",
					"hash": "b306a183637002afaa59752b6820808e4ceff84b372cafc45455bea1b12b27bf",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"CardInventory.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "CardInventory.sol",
					"exportedSymbols": {
						"CardInventory": [
							71
						]
					},
					"id": 72,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".2",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "37:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CardInventory",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 71,
							"linearizedBaseContracts": [
								71
							],
							"name": "CardInventory",
							"nameLocation": "87:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "cardBalances",
									"nameLocation": "158:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 71,
									"src": "108:62:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(uint256 => uint256))"
									},
									"typeName": {
										"id": 6,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "116:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "108:41:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(uint256 => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 5,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 3,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "135:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "127:21:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
												"typeString": "mapping(uint256 => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 4,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "143:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 24,
										"nodeType": "Block",
										"src": "247:55:0",
										"statements": [
											{
												"expression": {
													"id": 22,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 16,
																"name": "cardBalances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "258:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 19,
															"indexExpression": {
																"id": 17,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 9,
																"src": "271:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "258:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 20,
														"indexExpression": {
															"id": 18,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 11,
															"src": "277:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "258:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 21,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "288:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "258:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 23,
												"nodeType": "ExpressionStatement",
												"src": "258:36:0"
											}
										]
									},
									"functionSelector": "3641d726",
									"id": 25,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addCard",
									"nameLocation": "190:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "206:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 25,
												"src": "198:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "198:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "217:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 25,
												"src": "212:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 10,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "212:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "230:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 25,
												"src": "225:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 12,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "225:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "197:40:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "247:0:0"
									},
									"scope": 71,
									"src": "181:121:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "381:131:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 35,
																		"name": "cardBalances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 7,
																		"src": "400:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(uint256 => uint256))"
																		}
																	},
																	"id": 37,
																	"indexExpression": {
																		"id": 36,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 27,
																		"src": "413:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "400:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 39,
																"indexExpression": {
																	"id": 38,
																	"name": "cardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 29,
																	"src": "419:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "400:26:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 40,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 31,
																"src": "430:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "400:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420656e6f756768206361726473",
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "438:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c",
																"typeString": "literal_string \"Not enough cards\""
															},
															"value": "Not enough cards"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c",
																"typeString": "literal_string \"Not enough cards\""
															}
														],
														"id": 34,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "392:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 43,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "392:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 44,
												"nodeType": "ExpressionStatement",
												"src": "392:65:0"
											},
											{
												"expression": {
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 45,
																"name": "cardBalances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "468:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 48,
															"indexExpression": {
																"id": 46,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 27,
																"src": "481:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "468:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 49,
														"indexExpression": {
															"id": 47,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "487:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "468:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 50,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 31,
														"src": "498:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "468:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "468:36:0"
											}
										]
									},
									"functionSelector": "2d58bd80",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "removeCard",
									"nameLocation": "321:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "340:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "332:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "332:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "351:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "346:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 28,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "346:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "364:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "359:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 30,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "359:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "331:40:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "381:0:0"
									},
									"scope": 71,
									"src": "312:200:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 69,
										"nodeType": "Block",
										"src": "598:52:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 63,
															"name": "cardBalances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "616:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(uint256 => uint256))"
															}
														},
														"id": 65,
														"indexExpression": {
															"id": 64,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 56,
															"src": "629:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "616:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
															"typeString": "mapping(uint256 => uint256)"
														}
													},
													"id": 67,
													"indexExpression": {
														"id": 66,
														"name": "cardId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 58,
														"src": "635:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "616:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 62,
												"id": 68,
												"nodeType": "Return",
												"src": "609:33:0"
											}
										]
									},
									"functionSelector": "2b04e840",
									"id": 70,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBalance",
									"nameLocation": "531:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "550:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "542:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 55,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "542:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "561:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "556:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 57,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "556:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "541:27:0"
									},
									"returnParameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "592:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 60,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "592:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "591:6:0"
									},
									"scope": 71,
									"src": "522:128:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 72,
							"src": "78:575:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "37:618:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}