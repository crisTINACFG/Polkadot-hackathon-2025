{
	"id": "a9998f33c45d83bfd696580f5b752af3",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"CardTrading.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IInventoryManager {\r\n    function transferCards(address from, address to, uint cardId, uint amount) external;\r\n    function hasCard(address user, uint cardId, uint amount) external view returns (bool);\r\n    function setTradingContract(address _contract) external;\r\n}\r\n\r\ncontract CardTrading {\r\n    struct Listing {\r\n        address seller;\r\n        uint8 offerCardId;\r\n        uint8 requestCardId;\r\n        bool active;\r\n    }\r\n\r\n    Listing[] public listings;\r\n    IInventoryManager public inventory;\r\n    address public owner;\r\n\r\n    constructor(address inventoryAddress) {\r\n        inventory = IInventoryManager(inventoryAddress);\r\n        owner = msg.sender;\r\n        // Try to set this contract as the trading contract in InventoryManager\r\n        try inventory.setTradingContract(address(this)) {\r\n            // Successfully set this contract as the trading contract\r\n        } catch {\r\n            // The trading contract might already be set, that's okay\r\n        }\r\n    }\r\n\r\n    function createListing(uint8 offerCardId, uint8 requestCardId) external {\r\n        require(offerCardId < 17 && requestCardId < 17, \"Invalid ID\");\r\n        require(inventory.hasCard(msg.sender, offerCardId, 1), \"No card\");\r\n\r\n        listings.push(Listing({\r\n            seller: msg.sender,\r\n            offerCardId: offerCardId,\r\n            requestCardId: requestCardId,\r\n            active: true\r\n        }));\r\n    }\r\n\r\n    function acceptListing(uint listingId) external {\r\n        require(listingId < listings.length, \"Invalid ID\");\r\n        Listing storage listing = listings[listingId];\r\n        require(listing.active, \"Inactive\");\r\n        require(msg.sender != listing.seller, \"Own listing\");\r\n        require(inventory.hasCard(msg.sender, listing.requestCardId, 1), \"No card\");\r\n\r\n        // Swap cards\r\n        inventory.transferCards(msg.sender, listing.seller, listing.requestCardId, 1);\r\n        inventory.transferCards(listing.seller, msg.sender, listing.offerCardId, 1);\r\n\r\n        listing.active = false;\r\n    }\r\n\r\n    function getAllListings() external view returns (Listing[] memory) {\r\n        return listings;\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"CardTrading.sol": {
				"CardTrading": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "inventoryAddress",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "listingId",
									"type": "uint256"
								}
							],
							"name": "acceptListing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "offerCardId",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "requestCardId",
									"type": "uint8"
								}
							],
							"name": "createListing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllListings",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "seller",
											"type": "address"
										},
										{
											"internalType": "uint8",
											"name": "offerCardId",
											"type": "uint8"
										},
										{
											"internalType": "uint8",
											"name": "requestCardId",
											"type": "uint8"
										},
										{
											"internalType": "bool",
											"name": "active",
											"type": "bool"
										}
									],
									"internalType": "struct CardTrading.Listing[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "inventory",
							"outputs": [
								{
									"internalType": "contract IInventoryManager",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "listings",
							"outputs": [
								{
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "offerCardId",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "requestCardId",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inventoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"acceptListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"offerCardId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requestCardId\",\"type\":\"uint8\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllListings\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"offerCardId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requestCardId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct CardTrading.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"contract IInventoryManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"offerCardId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requestCardId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CardTrading.sol\":\"CardTrading\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"CardTrading.sol\":{\"keccak256\":\"0x6dbd80fbe747ec484237e8a7a052e57fa9d776b000c64188c007c531f24f4b23\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://125991e81bafb04d65fe3ecc8b5842429b4ef62c9675027ec547d7f7b070c798\",\"dweb:/ipfs/QmczAG6Je1sdeSzrEHWKK3CxGVTT6qAoU2VsjFjKhrtYDL\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 42,
								"contract": "CardTrading.sol:CardTrading",
								"label": "listings",
								"offset": 0,
								"slot": "0",
								"type": "t_array(t_struct(Listing)38_storage)dyn_storage"
							},
							{
								"astId": 45,
								"contract": "CardTrading.sol:CardTrading",
								"label": "inventory",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IInventoryManager)29"
							},
							{
								"astId": 47,
								"contract": "CardTrading.sol:CardTrading",
								"label": "owner",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_struct(Listing)38_storage)dyn_storage": {
								"base": "t_struct(Listing)38_storage",
								"encoding": "dynamic_array",
								"label": "struct CardTrading.Listing[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IInventoryManager)29": {
								"encoding": "inplace",
								"label": "contract IInventoryManager",
								"numberOfBytes": "20"
							},
							"t_struct(Listing)38_storage": {
								"encoding": "inplace",
								"label": "struct CardTrading.Listing",
								"members": [
									{
										"astId": 31,
										"contract": "CardTrading.sol:CardTrading",
										"label": "seller",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 33,
										"contract": "CardTrading.sol:CardTrading",
										"label": "offerCardId",
										"offset": 20,
										"slot": "0",
										"type": "t_uint8"
									},
									{
										"astId": 35,
										"contract": "CardTrading.sol:CardTrading",
										"label": "requestCardId",
										"offset": 21,
										"slot": "0",
										"type": "t_uint8"
									},
									{
										"astId": 37,
										"contract": "CardTrading.sol:CardTrading",
										"label": "active",
										"offset": 22,
										"slot": "0",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 12258\n// Code size = 38378 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 4 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @30\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffff80\n   341: u64 [sp + 0x78] = ra\n   344: u64 [sp + 0x70] = s0\n   347: u64 [sp + 0x68] = s1\n   350: s0 = sp + 0x80\n   354: sp = sp & 0xffffffffffffffe0\n   357: a0 = 0x40\n   360: a1 = 0x20\n   363: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   368: u8 [a0 + 31] = 0x80\n   373: u8 [a0 + 30] = 0\n   376: u8 [a0 + 29] = 0\n   379: u8 [a0 + 28] = 0\n   382: u8 [a0 + 27] = 0\n   385: u8 [a0 + 26] = 0\n   388: u8 [a0 + 25] = 0\n   391: u8 [a0 + 24] = 0\n   394: u8 [a0 + 23] = 0\n   397: u8 [a0 + 22] = 0\n   400: u8 [a0 + 21] = 0\n   403: u8 [a0 + 20] = 0\n   406: u8 [a0 + 19] = 0\n   409: u8 [a0 + 18] = 0\n   412: u8 [a0 + 17] = 0\n   415: u8 [a0 + 16] = 0\n   418: u8 [a0 + 15] = 0\n   421: u8 [a0 + 14] = 0\n   424: u8 [a0 + 13] = 0\n   427: u8 [a0 + 12] = 0\n   430: u8 [a0 + 11] = 0\n   433: u8 [a0 + 10] = 0\n   436: u8 [a0 + 9] = 0\n   439: u8 [a0 + 8] = 0\n   442: u8 [a0 + 7] = 0\n   445: u8 [a0 + 6] = 0\n   448: u8 [a0 + 5] = 0\n   451: u8 [a0 + 4] = 0\n   454: u8 [a0 + 3] = 0\n   457: u8 [a0 + 2] = 0\n   460: u8 [a0 + 1] = 0\n   463: u8 [a0 + 0] = 0\n   465: u64 [sp + 88] = 0\n   468: u64 [sp + 64] = 0\n   471: u64 [sp + 72] = 0\n   474: u64 [sp + 80] = 0\n   477: i32 a0 = sp + 0x40\n   480: ecalli 15 // 'value_transferred'\n   482: fallthrough\n      : @16 (gas: 8)\n   483: a0 = u64 [sp + 0x50]\n   486: a1 = u64 [sp + 0x58]\n   489: a2 = u64 [sp + 0x48]\n   492: a3 = u64 [sp + 0x40]\n   495: a1 = a1 | a2\n   498: a0 = a0 | a3\n   501: a0 = a0 | a1\n   504: jump @22 if a0 != 0\n      : @17 (gas: 20)\n   508: a0 = sp + 0x20\n   511: ra = 0xa\n   514: sp = sp + 0xffffffffffffff90\n   517: u64 [sp + 0x68] = ra\n   520: u64 [sp + 0x60] = s0\n   523: u64 [sp + 0x58] = s1\n   526: s0 = sp + 0x70\n   529: sp = sp & 0xfffffffffffffff0\n   532: s1 = i32 [0x20004]\n   537: u64 [sp + 0x8] = a0\n   540: a0 = s1 << 0x20\n   543: a0 = a0 >> 0x20\n   546: u64 [sp + 40] = 0\n   549: u64 [sp + 32] = 0\n   552: u64 [sp + 0x10] = a0\n   555: a0 = sp + 0x30\n   558: a1 = sp + 0x10\n   561: u64 [sp + 24] = 0\n   564: ra = 0x36\n   567: jump @49\n      : @18 [@dyn 5] (gas: 157)\n   570: a1 = u64 [sp + 0x20]\n   573: a0 = u64 [sp + 0x28]\n   576: a2 = u64 [sp + 0x30]\n   579: a3 = u64 [sp + 0x38]\n   582: u64 [sp + 0x18] = a3\n   585: u64 [sp + 0x10] = a2\n   588: u64 [sp + 0x8] = a0\n   591: a0 = sp\n   593: u64 [sp] = a1\n   595: ra = 0xc\n   598: sp = sp + 0xfffffffffffffe40\n   602: u64 [sp + 0x1b8] = ra\n   606: u64 [sp + 0x1b0] = s0\n   610: u64 [sp + 0x1a8] = s1\n   614: s0 = sp + 0x1c0\n   618: sp = sp & 0xffffffffffffffe0\n   621: a1 = u64 [a0]\n   623: u64 [sp + 0x78] = a1\n   626: a1 = u64 [a0 + 0x8]\n   629: u64 [sp + 0x70] = a1\n   632: s1 = u32 [a0 + 0x10]\n   635: u64 [sp + 376] = 0\n   639: u64 [sp + 368] = 0\n   643: u64 [sp + 360] = 0\n   647: u64 [sp + 352] = 0x1\n   652: u64 [sp + 408] = 0\n   656: u64 [sp + 400] = 0\n   660: u64 [sp + 392] = 0\n   664: u64 [sp + 384] = 0\n   668: u32 [sp + 416] = 0x20\n   673: i32 a1 = sp + 0x160\n   677: i32 a3 = sp + 0x180\n   681: i32 a4 = sp + 0x1a0\n   685: a2 = 0xffffffffffffffff\n   688: a0 = 0\n   690: ecalli 7 // 'get_storage'\n   692: a0 = u32 [sp + 0x194]\n   696: a0 = a0 << 0x20\n   699: a1 = u64 [sp + 0x198]\n   703: a0 = a0 | s1\n   706: u64 [sp + 376] = 0\n   710: u64 [sp + 368] = 0\n   714: u64 [sp + 360] = 0\n   718: u64 [sp + 352] = 0x1\n   723: u64 [sp + 0x198] = a1\n   727: u64 [sp + 0x190] = a0\n   731: a0 = u64 [sp + 0x70]\n   734: u64 [sp + 0x188] = a0\n   738: a0 = u64 [sp + 0x78]\n   741: u64 [sp + 0x180] = a0\n   745: i32 a1 = sp + 0x160\n   749: i32 a3 = sp + 0x180\n   753: a2 = 0xffffffffffffffff\n   756: a4 = 0x20\n   759: a0 = 0\n   761: ecalli 14 // 'set_storage'\n   763: i32 a0 = sp + 0x80\n   767: ecalli 5 // 'caller'\n   769: a0 = u64 [sp + 0x88]\n   773: a1 = i32 [sp + 0x90]\n   777: a2 = u64 [sp + 0x80]\n   781: a0 = reverse a0\n   783: a3 = a0 << 0x20\n   786: a1 = reverse a1\n   788: a1 = a1 >> 0x20\n   791: a1 = a1 | a3\n   794: u64 [sp + 0x78] = a1\n   797: a0 = a0 >> 0x20\n   800: s1 = reverse a2\n   802: a1 = s1 << 0x20\n   805: a0 = a0 | a1\n   808: u64 [sp + 0x70] = a0\n   811: s1 = s1 >> 0x20\n   814: u64 [sp + 376] = 0\n   818: u64 [sp + 368] = 0\n   822: u64 [sp + 360] = 0\n   826: u64 [sp + 352] = 0x2\n   831: u64 [sp + 408] = 0\n   835: u64 [sp + 400] = 0\n   839: u64 [sp + 392] = 0\n   843: u64 [sp + 384] = 0\n   847: u32 [sp + 416] = 0x20\n   852: i32 a1 = sp + 0x160\n   856: i32 a3 = sp + 0x180\n   860: i32 a4 = sp + 0x1a0\n   864: a2 = 0xffffffffffffffff\n   867: a0 = 0\n   869: ecalli 7 // 'get_storage'\n   871: a0 = u32 [sp + 0x194]\n   875: a0 = a0 << 0x20\n   878: a1 = u64 [sp + 0x198]\n   882: a0 = a0 | s1\n   885: u64 [sp + 376] = 0\n   889: u64 [sp + 368] = 0\n   893: u64 [sp + 360] = 0\n   897: u64 [sp + 352] = 0x2\n   902: u64 [sp + 0x198] = a1\n   906: u64 [sp + 0x190] = a0\n   910: a0 = u64 [sp + 0x70]\n   913: u64 [sp + 0x188] = a0\n   917: a0 = u64 [sp + 0x78]\n   920: u64 [sp + 0x180] = a0\n   924: i32 a1 = sp + 0x160\n   928: i32 a3 = sp + 0x180\n   932: a2 = 0xffffffffffffffff\n   935: a4 = 0x20\n   938: a0 = 0\n   940: ecalli 14 // 'set_storage'\n   942: u64 [sp + 376] = 0\n   946: u64 [sp + 368] = 0\n   950: u64 [sp + 360] = 0\n   954: u64 [sp + 352] = 0x1\n   959: u64 [sp + 408] = 0\n   963: u64 [sp + 400] = 0\n   967: u64 [sp + 392] = 0\n   971: u64 [sp + 384] = 0\n   975: u32 [sp + 416] = 0x20\n   980: i32 a1 = sp + 0x160\n   984: i32 a3 = sp + 0x180\n   988: i32 a4 = sp + 0x1a0\n   992: a2 = 0xffffffffffffffff\n   995: a0 = 0\n   997: ecalli 7 // 'get_storage'\n   999: a0 = u64 [sp + 0x180]\n  1003: u64 [sp + 0x78] = a0\n  1006: a0 = u64 [sp + 0x190]\n  1010: u64 [sp + 0x70] = a0\n  1013: s1 = u64 [sp + 0x188]\n  1017: i32 a0 = sp + 0xa0\n  1021: ecalli 0 // 'address'\n  1022: a0 = i32 [sp + 0xb0]\n  1026: u64 [sp + 0x48] = a0\n  1029: a0 = u64 [sp + 0xa0]\n  1033: u64 [sp + 0x40] = a0\n  1036: a0 = u64 [sp + 0xa8]\n  1040: u64 [sp + 0x38] = a0\n  1043: a0 = reverse s1\n  1045: a1 = a0 << 0x20\n  1048: a2 = u64 [sp + 0x70]\n  1051: a2 = reverse a2\n  1053: a2 = a2 >> 0x20\n  1056: a3 = a2 | a1\n  1059: a0 = a0 >> 0x20\n  1062: a1 = u64 [sp + 0x78]\n  1065: a1 = reverse a1\n  1067: a2 = a1 << 0x20\n  1070: a0 = a0 | a2\n  1073: a1 = a1 >> 0x20\n  1076: u64 [sp + 0x50] = a0\n  1079: u64 [sp + 0xc8] = a0\n  1083: u64 [sp + 0x60] = a3\n  1086: u64 [sp + 0xc0] = a3\n  1090: u64 [sp + 0x58] = a1\n  1093: u32 [sp + 0xd0] = a1\n  1097: i32 a0 = sp + 0xc0\n  1101: ecalli 6 // 'code_size'\n  1103: jump @72\n      : @19 [@dyn 6] (gas: 3)\n  1106: a0 = 0x40\n  1109: a1 = 0x20\n  1112: ra = 14, jump @0\n      : @20 [@dyn 7] (gas: 100)\n  1117: a1 = u8 [a0 + 0x11]\n  1120: a2 = u8 [a0 + 0x10]\n  1123: a3 = u8 [a0 + 0x12]\n  1126: a4 = u8 [a0 + 0x13]\n  1129: a1 = a1 << 0x8\n  1132: a1 = a1 | a2\n  1135: a3 = a3 << 0x10\n  1138: a4 = a4 << 0x18\n  1141: a3 = a3 | a4\n  1144: a1 = a1 | a3\n  1147: a2 = u8 [a0 + 0x15]\n  1150: a3 = u8 [a0 + 0x14]\n  1153: a4 = u8 [a0 + 0x16]\n  1156: a5 = u8 [a0 + 0x17]\n  1159: a2 = a2 << 0x8\n  1162: a2 = a2 | a3\n  1165: a4 = a4 << 0x10\n  1168: a5 = a5 << 0x18\n  1171: a4 = a4 | a5\n  1174: a2 = a2 | a4\n  1177: a2 = a2 << 0x20\n  1180: t0 = a2 | a1\n  1183: a2 = u8 [a0 + 0x1]\n  1186: a3 = u8 [a0]\n  1188: a4 = u8 [a0 + 0x2]\n  1191: a5 = u8 [a0 + 0x3]\n  1194: a2 = a2 << 0x8\n  1197: a2 = a2 | a3\n  1200: a4 = a4 << 0x10\n  1203: a5 = a5 << 0x18\n  1206: a4 = a4 | a5\n  1209: a2 = a2 | a4\n  1212: a3 = u8 [a0 + 0x5]\n  1215: a4 = u8 [a0 + 0x4]\n  1218: a5 = u8 [a0 + 0x6]\n  1221: s1 = u8 [a0 + 0x7]\n  1224: a3 = a3 << 0x8\n  1227: a3 = a3 | a4\n  1230: a5 = a5 << 0x10\n  1233: s1 = s1 << 0x18\n  1236: a5 = a5 | s1\n  1239: a3 = a3 | a5\n  1242: a3 = a3 << 0x20\n  1245: a2 = a2 | a3\n  1248: a3 = u8 [a0 + 0x19]\n  1251: a4 = u8 [a0 + 0x18]\n  1254: a5 = u8 [a0 + 0x1a]\n  1257: s1 = u8 [a0 + 0x1b]\n  1260: a3 = a3 << 0x8\n  1263: a3 = a3 | a4\n  1266: a5 = a5 << 0x10\n  1269: s1 = s1 << 0x18\n  1272: a5 = a5 | s1\n  1275: a3 = a3 | a5\n  1278: a4 = u8 [a0 + 0x1d]\n  1281: a5 = u8 [a0 + 0x1c]\n  1284: s1 = u8 [a0 + 0x1e]\n  1287: a1 = u8 [a0 + 0x1f]\n  1290: a4 = a4 << 0x8\n  1293: a4 = a4 | a5\n  1296: s1 = s1 << 0x10\n  1299: a1 = a1 << 0x18\n  1302: a1 = a1 | s1\n  1305: a1 = a1 | a4\n  1308: a1 = a1 << 0x20\n  1311: a3 = a3 | a1\n  1314: a1 = u8 [a0 + 0x9]\n  1317: a4 = u8 [a0 + 0x8]\n  1320: a5 = u8 [a0 + 0xa]\n  1323: s1 = u8 [a0 + 0xb]\n  1326: a1 = a1 << 0x8\n  1329: a1 = a1 | a4\n  1332: a5 = a5 << 0x10\n  1335: s1 = s1 << 0x18\n  1338: a5 = a5 | s1\n  1341: a1 = a1 | a5\n  1344: a4 = u8 [a0 + 0xd]\n  1347: a5 = u8 [a0 + 0xc]\n  1350: s1 = u8 [a0 + 0xe]\n  1353: a0 = u8 [a0 + 0xf]\n  1356: a4 = a4 << 0x8\n  1359: a4 = a4 | a5\n  1362: s1 = s1 << 0x10\n  1365: a0 = a0 << 0x18\n  1368: a0 = a0 | s1\n  1371: a0 = a0 | a4\n  1374: a0 = a0 << 0x20\n  1377: a0 = a0 | a1\n  1380: a0 = reverse a0\n  1382: s1 = reverse a3\n  1384: a1 = reverse a2\n  1386: a2 = reverse t0\n  1388: a1 = a1 | a2\n  1391: a2 = s1 | a0\n  1394: a2 = a2 | a1\n  1397: a2 = a2 >> 0x20\n  1400: a0 = a0 | a1\n  1403: a0 = a0 << 0x20\n  1406: a0 = a0 | a2\n  1409: jump @24 if a0 == 0\n      : @21 (gas: 1)\n  1412: trap\n      : @22 (gas: 3)\n  1413: a0 = 0\n  1415: a1 = 0\n  1417: ra = 16, jump @0\n      : @23 [@dyn 8] (gas: 5)\n  1422: i32 a1 = a0 + 0\n  1424: a0 = 0x1\n  1427: a2 = 0\n  1429: ecalli 12 // 'seal_return'\n  1431: fallthrough\n      : @24 (gas: 4)\n  1432: i32 s1 = s1 + 0\n  1434: a0 = s1\n  1436: a1 = 0\n  1438: ra = 18, jump @0\n      : @25 [@dyn 9] (gas: 5)\n  1443: i32 a0 = a0 + 0\n  1445: a1 = 0\n  1447: a2 = 0\n  1449: ecalli 2 // 'call_data_copy'\n  1451: fallthrough\n      : @26 (gas: 2)\n  1452: a1 = i32 [0x20008]\n  1457: jump @28 if a1 == 0\n      : @27 (gas: 4)\n  1460: a0 = 0x30010\n  1465: i32 a0 = a0 + 0\n  1467: ecalli 13 // 'set_immutable_data'\n  1469: fallthrough\n      : @28 (gas: 3)\n  1470: a0 = s1\n  1472: a1 = 0\n  1474: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 6)\n  1479: i32 a1 = a0 + 0\n  1481: a0 = 0\n  1483: a2 = 0\n  1485: ra = 0x16\n  1488: ecalli 12 // 'seal_return'\n  1490: fallthrough\n      : @30 [@dyn 11] (gas: 8)\n  1491: sp = sp + 0xffffffffffffffc0\n  1494: u64 [sp + 0x38] = ra\n  1497: u64 [sp + 0x30] = s0\n  1500: s0 = sp + 0x40\n  1503: sp = sp & 0xffffffffffffffe0\n  1506: a0 = 0x40\n  1509: a1 = 0x20\n  1512: ra = 24, jump @0\n      : @31 [@dyn 12] (gas: 34)\n  1517: u8 [a0 + 31] = 0x80\n  1522: u8 [a0 + 30] = 0\n  1525: u8 [a0 + 29] = 0\n  1528: u8 [a0 + 28] = 0\n  1531: u8 [a0 + 27] = 0\n  1534: u8 [a0 + 26] = 0\n  1537: u8 [a0 + 25] = 0\n  1540: u8 [a0 + 24] = 0\n  1543: u8 [a0 + 23] = 0\n  1546: u8 [a0 + 22] = 0\n  1549: u8 [a0 + 21] = 0\n  1552: u8 [a0 + 20] = 0\n  1555: u8 [a0 + 19] = 0\n  1558: u8 [a0 + 18] = 0\n  1561: u8 [a0 + 17] = 0\n  1564: u8 [a0 + 16] = 0\n  1567: u8 [a0 + 15] = 0\n  1570: u8 [a0 + 14] = 0\n  1573: u8 [a0 + 13] = 0\n  1576: u8 [a0 + 12] = 0\n  1579: u8 [a0 + 11] = 0\n  1582: u8 [a0 + 10] = 0\n  1585: u8 [a0 + 9] = 0\n  1588: u8 [a0 + 8] = 0\n  1591: u8 [a0 + 7] = 0\n  1594: u8 [a0 + 3] = 0\n  1597: u8 [a0 + 2] = 0\n  1600: u8 [a0 + 1] = 0\n  1603: u8 [a0 + 0] = 0\n  1605: a1 = i32 [0x20004]\n  1610: u8 [a0 + 6] = 0\n  1613: u8 [a0 + 5] = 0\n  1616: u8 [a0 + 4] = 0\n  1619: jump @42 if a1 <u 4\n      : @32 (gas: 4)\n  1624: i32 a0 = sp + 0\n  1626: a1 = 0\n  1628: ecalli 3 // 'call_data_load'\n  1630: fallthrough\n      : @33 (gas: 3)\n  1631: a0 = i32 [sp + 0x1c]\n  1634: a1 = 0xffffffffde74e000\n  1640: jump @38 if a0 >s 3732202874\n      : @34 (gas: 1)\n  1647: jump @43 if a0 == 2376452955\n      : @35 (gas: 1)\n  1655: jump @45 if a0 == 2926824684\n      : @36 (gas: 1)\n  1663: jump @42 if a0 != 2968316798\n      : @37 (gas: 13)\n  1670: ra = 0x1a\n  1673: sp = sp + 0xffffffffffffff80\n  1676: u64 [sp + 0x78] = ra\n  1679: u64 [sp + 0x70] = s0\n  1682: s0 = sp + 0x80\n  1686: sp = sp & 0xffffffffffffffe0\n  1689: u64 [sp + 56] = 0\n  1692: u64 [sp + 48] = 0\n  1695: u64 [sp + 40] = 0\n  1698: u64 [sp + 32] = 0\n  1701: i32 a0 = sp + 0x20\n  1704: ecalli 15 // 'value_transferred'\n  1706: jump @193\n      : @38 [@dyn 13] (gas: 2)\n  1709: i32 a1 = a1 + 0x57b\n  1713: jump @44 if a0 == a1\n      : @39 (gas: 1)\n  1717: jump @46 if a0 == 363263439\n      : @40 (gas: 1)\n  1725: jump @42 if a0 != 366291548\n      : @41 (gas: 14)\n  1732: ra = 0x1c\n  1735: sp = sp + 0xffffffffffffff60\n  1739: u64 [sp + 0x98] = ra\n  1743: u64 [sp + 0x90] = s0\n  1747: u64 [sp + 0x88] = s1\n  1751: s0 = sp + 0xa0\n  1755: sp = sp & 0xffffffffffffffe0\n  1758: u64 [sp + 56] = 0\n  1761: u64 [sp + 48] = 0\n  1764: u64 [sp + 40] = 0\n  1767: u64 [sp + 32] = 0\n  1770: i32 a0 = sp + 0x20\n  1773: ecalli 15 // 'value_transferred'\n  1775: jump @117\n      : @42 [@dyn 14] (gas: 7)\n  1778: ra = 0x1e\n  1781: sp = sp + 0xfffffffffffffff8\n  1784: u64 [sp] = ra\n  1786: a0 = 0\n  1788: a1 = 0\n  1790: ra = 0x40\n  1793: jump @0\n      : @43 [@dyn 15] (gas: 14)\n  1796: ra = 0x20\n  1799: sp = sp + 0xffffffffffffff60\n  1803: u64 [sp + 0x98] = ra\n  1807: u64 [sp + 0x90] = s0\n  1811: u64 [sp + 0x88] = s1\n  1815: s0 = sp + 0xa0\n  1819: sp = sp & 0xffffffffffffffe0\n  1822: u64 [sp + 56] = 0\n  1825: u64 [sp + 48] = 0\n  1828: u64 [sp + 40] = 0\n  1831: u64 [sp + 32] = 0\n  1834: i32 a0 = sp + 0x20\n  1837: ecalli 15 // 'value_transferred'\n  1839: jump @128\n      : @44 [@dyn 16] (gas: 14)\n  1842: ra = 0x22\n  1845: sp = sp + 0xfffffffffffffe80\n  1849: u64 [sp + 0x178] = ra\n  1853: u64 [sp + 0x170] = s0\n  1857: u64 [sp + 0x168] = s1\n  1861: s0 = sp + 0x180\n  1865: sp = sp & 0xffffffffffffffe0\n  1868: u64 [sp + 312] = 0\n  1872: u64 [sp + 304] = 0\n  1876: u64 [sp + 296] = 0\n  1880: u64 [sp + 288] = 0\n  1884: i32 a0 = sp + 0x120\n  1888: ecalli 15 // 'value_transferred'\n  1890: jump @233\n      : @45 [@dyn 17] (gas: 14)\n  1893: ra = 0x24\n  1896: sp = sp + 0xfffffffffffffee0\n  1900: u64 [sp + 0x118] = ra\n  1904: u64 [sp + 0x110] = s0\n  1908: u64 [sp + 0x108] = s1\n  1912: s0 = sp + 0x120\n  1916: sp = sp & 0xffffffffffffffe0\n  1919: u64 [sp + 248] = 0\n  1923: u64 [sp + 240] = 0\n  1927: u64 [sp + 232] = 0\n  1931: u64 [sp + 224] = 0\n  1935: i32 a0 = sp + 0xe0\n  1939: ecalli 15 // 'value_transferred'\n  1941: jump @180\n      : @46 [@dyn 18] (gas: 13)\n  1944: ra = 0x26\n  1947: sp = sp + 0xffffffffffffff00\n  1951: u64 [sp + 0xf8] = ra\n  1955: u64 [sp + 0xf0] = s0\n  1959: s0 = sp + 0x100\n  1963: sp = sp & 0xffffffffffffffe0\n  1966: u64 [sp + 216] = 0\n  1970: u64 [sp + 208] = 0\n  1974: u64 [sp + 200] = 0\n  1978: u64 [sp + 192] = 0\n  1982: i32 a0 = sp + 0xc0\n  1986: ecalli 15 // 'value_transferred'\n  1988: jump @102\n      : @47 [@dyn 19] (gas: 7)\n  1991: sp = sp + 0xfffffffffffffff0\n  1994: u64 [sp + 0x8] = ra\n  1997: u64 [sp] = s0\n  1999: s0 = a0\n  2001: a0 = 0x40\n  2004: a1 = 0x20\n  2007: ra = 40, jump @0\n      : @48 [@dyn 20] (gas: 100)\n  2012: a1 = u8 [a0 + 0x1]\n  2015: a2 = u8 [a0]\n  2017: a3 = u8 [a0 + 0x2]\n  2020: a4 = u8 [a0 + 0x3]\n  2023: a1 = a1 << 0x8\n  2026: a1 = a1 | a2\n  2029: a3 = a3 << 0x10\n  2032: a4 = a4 << 0x18\n  2035: a3 = a3 | a4\n  2038: a1 = a1 | a3\n  2041: a2 = u8 [a0 + 0x5]\n  2044: a3 = u8 [a0 + 0x4]\n  2047: a4 = u8 [a0 + 0x6]\n  2050: a5 = u8 [a0 + 0x7]\n  2053: a2 = a2 << 0x8\n  2056: a2 = a2 | a3\n  2059: a4 = a4 << 0x10\n  2062: a5 = a5 << 0x18\n  2065: a4 = a4 | a5\n  2068: a2 = a2 | a4\n  2071: a2 = a2 << 0x20\n  2074: t0 = a2 | a1\n  2077: a2 = u8 [a0 + 0x9]\n  2080: a3 = u8 [a0 + 0x8]\n  2083: a4 = u8 [a0 + 0xa]\n  2086: a5 = u8 [a0 + 0xb]\n  2089: a2 = a2 << 0x8\n  2092: a2 = a2 | a3\n  2095: a4 = a4 << 0x10\n  2098: a5 = a5 << 0x18\n  2101: a4 = a4 | a5\n  2104: a2 = a2 | a4\n  2107: a3 = u8 [a0 + 0xd]\n  2110: a4 = u8 [a0 + 0xc]\n  2113: a5 = u8 [a0 + 0xe]\n  2116: a1 = u8 [a0 + 0xf]\n  2119: a3 = a3 << 0x8\n  2122: a3 = a3 | a4\n  2125: a5 = a5 << 0x10\n  2128: a1 = a1 << 0x18\n  2131: a1 = a1 | a5\n  2134: a1 = a1 | a3\n  2137: a1 = a1 << 0x20\n  2140: t1 = a1 | a2\n  2143: a1 = u8 [a0 + 0x11]\n  2146: a3 = u8 [a0 + 0x10]\n  2149: a4 = u8 [a0 + 0x12]\n  2152: a5 = u8 [a0 + 0x13]\n  2155: a1 = a1 << 0x8\n  2158: a1 = a1 | a3\n  2161: a4 = a4 << 0x10\n  2164: a5 = a5 << 0x18\n  2167: a4 = a4 | a5\n  2170: a1 = a1 | a4\n  2173: a3 = u8 [a0 + 0x15]\n  2176: a4 = u8 [a0 + 0x14]\n  2179: a5 = u8 [a0 + 0x16]\n  2182: a2 = u8 [a0 + 0x17]\n  2185: a3 = a3 << 0x8\n  2188: a3 = a3 | a4\n  2191: a5 = a5 << 0x10\n  2194: a2 = a2 << 0x18\n  2197: a2 = a2 | a5\n  2200: a2 = a2 | a3\n  2203: a2 = a2 << 0x20\n  2206: a3 = a2 | a1\n  2209: a1 = u8 [a0 + 0x19]\n  2212: a2 = u8 [a0 + 0x18]\n  2215: a4 = u8 [a0 + 0x1a]\n  2218: a5 = u8 [a0 + 0x1b]\n  2221: a1 = a1 << 0x8\n  2224: a1 = a1 | a2\n  2227: a4 = a4 << 0x10\n  2230: a5 = a5 << 0x18\n  2233: a4 = a4 | a5\n  2236: a1 = a1 | a4\n  2239: a2 = u8 [a0 + 0x1d]\n  2242: a4 = u8 [a0 + 0x1c]\n  2245: a5 = u8 [a0 + 0x1e]\n  2248: a0 = u8 [a0 + 0x1f]\n  2251: a2 = a2 << 0x8\n  2254: a2 = a2 | a4\n  2257: a5 = a5 << 0x10\n  2260: a0 = a0 << 0x18\n  2263: a0 = a0 | a5\n  2266: a0 = a0 | a2\n  2269: a0 = a0 << 0x20\n  2272: a0 = a0 | a1\n  2275: a0 = reverse a0\n  2277: a1 = reverse a3\n  2279: a2 = reverse t1\n  2281: a3 = reverse t0\n  2283: u64 [s0 + 0x18] = a3\n  2286: u64 [s0 + 0x10] = a2\n  2289: u64 [s0 + 0x8] = a1\n  2292: u64 [s0] = a0\n  2294: ra = u64 [sp + 0x8]\n  2297: s0 = u64 [sp]\n  2299: sp = sp + 0x10\n  2302: ret\n      : @49 (gas: 18)\n  2304: sp = sp + 0xffffffffffffff60\n  2308: u64 [sp + 0x98] = ra\n  2312: u64 [sp + 0x90] = s0\n  2316: u64 [sp + 0x88] = s1\n  2320: s0 = sp + 0xa0\n  2324: sp = sp & 0xfffffffffffffff0\n  2327: a2 = u64 [a1 + 0x18]\n  2330: u64 [sp + 0x30] = a2\n  2333: a2 = u64 [a1 + 0x10]\n  2336: u64 [sp + 0x28] = a2\n  2339: a2 = u64 [a1 + 0x8]\n  2342: u64 [sp + 0x20] = a2\n  2345: a1 = u64 [a1]\n  2347: u64 [sp + 0x18] = a1\n  2350: u64 [sp + 0x38] = a0\n  2353: a0 = 0x40\n  2356: a1 = 0x20\n  2359: ra = 42, jump @0\n      : @50 [@dyn 21] (gas: 130)\n  2364: a1 = u8 [a0 + 0x19]\n  2367: a2 = u8 [a0 + 0x18]\n  2370: a3 = u8 [a0 + 0x1a]\n  2373: a4 = u8 [a0 + 0x1b]\n  2376: a1 = a1 << 0x8\n  2379: a1 = a1 | a2\n  2382: a3 = a3 << 0x10\n  2385: a4 = a4 << 0x18\n  2388: a3 = a3 | a4\n  2391: a1 = a1 | a3\n  2394: a2 = u8 [a0 + 0x1d]\n  2397: a3 = u8 [a0 + 0x1c]\n  2400: a4 = u8 [a0 + 0x1e]\n  2403: a5 = u8 [a0 + 0x1f]\n  2406: a2 = a2 << 0x8\n  2409: a2 = a2 | a3\n  2412: a4 = a4 << 0x10\n  2415: a5 = a5 << 0x18\n  2418: a4 = a4 | a5\n  2421: a2 = a2 | a4\n  2424: a2 = a2 << 0x20\n  2427: t0 = a2 | a1\n  2430: a2 = u8 [a0 + 0x11]\n  2433: a3 = u8 [a0 + 0x10]\n  2436: a4 = u8 [a0 + 0x12]\n  2439: a5 = u8 [a0 + 0x13]\n  2442: a2 = a2 << 0x8\n  2445: a2 = a2 | a3\n  2448: a4 = a4 << 0x10\n  2451: a5 = a5 << 0x18\n  2454: a4 = a4 | a5\n  2457: a2 = a2 | a4\n  2460: a3 = u8 [a0 + 0x15]\n  2463: a4 = u8 [a0 + 0x14]\n  2466: a5 = u8 [a0 + 0x16]\n  2469: s1 = u8 [a0 + 0x17]\n  2472: a3 = a3 << 0x8\n  2475: a3 = a3 | a4\n  2478: a5 = a5 << 0x10\n  2481: s1 = s1 << 0x18\n  2484: a5 = a5 | s1\n  2487: a3 = a3 | a5\n  2490: a3 = a3 << 0x20\n  2493: a2 = a2 | a3\n  2496: a3 = u8 [a0 + 0x9]\n  2499: a4 = u8 [a0 + 0x8]\n  2502: a5 = u8 [a0 + 0xa]\n  2505: s1 = u8 [a0 + 0xb]\n  2508: a3 = a3 << 0x8\n  2511: a3 = a3 | a4\n  2514: a5 = a5 << 0x10\n  2517: s1 = s1 << 0x18\n  2520: a5 = a5 | s1\n  2523: a3 = a3 | a5\n  2526: a4 = u8 [a0 + 0xd]\n  2529: a5 = u8 [a0 + 0xc]\n  2532: s1 = u8 [a0 + 0xe]\n  2535: a1 = u8 [a0 + 0xf]\n  2538: a4 = a4 << 0x8\n  2541: a4 = a4 | a5\n  2544: s1 = s1 << 0x10\n  2547: a1 = a1 << 0x18\n  2550: a1 = a1 | s1\n  2553: a1 = a1 | a4\n  2556: a1 = a1 << 0x20\n  2559: a3 = a3 | a1\n  2562: a1 = u8 [a0 + 0x1]\n  2565: a4 = u8 [a0]\n  2567: a5 = u8 [a0 + 0x2]\n  2570: s1 = u8 [a0 + 0x3]\n  2573: a1 = a1 << 0x8\n  2576: a1 = a1 | a4\n  2579: a5 = a5 << 0x10\n  2582: s1 = s1 << 0x18\n  2585: a5 = a5 | s1\n  2588: a1 = a1 | a5\n  2591: a4 = u8 [a0 + 0x5]\n  2594: a5 = u8 [a0 + 0x4]\n  2597: s1 = u8 [a0 + 0x6]\n  2600: a0 = u8 [a0 + 0x7]\n  2603: a4 = a4 << 0x8\n  2606: a4 = a4 | a5\n  2609: s1 = s1 << 0x10\n  2612: a0 = a0 << 0x18\n  2615: a0 = a0 | s1\n  2618: a0 = a0 | a4\n  2621: a0 = a0 << 0x20\n  2624: a0 = a0 | a1\n  2627: t1 = reverse a0\n  2629: t2 = reverse a3\n  2631: s1 = reverse a2\n  2633: a5 = reverse t0\n  2635: a1 = u64 [sp + 0x18]\n  2638: a0 = a1 + 0x1f\n  2641: a1 = a0 <u a1\n  2644: a3 = u64 [sp + 0x20]\n  2647: a2 = a3 + a1\n  2650: a3 = a2 <u a3\n  2653: a3 = a1 if a1 == 0\n  2656: a1 = u64 [sp + 0x28]\n  2659: a3 = a3 + a1\n  2662: a1 = a3 <u a1\n  2665: a4 = u64 [sp + 0x30]\n  2668: a1 = a1 + a4\n  2671: a0 = a0 & 0xffffffffffffffe0\n  2674: a0 = a0 + a5\n  2677: u64 [sp + 0x28] = a5\n  2680: u64 [sp + 0x10] = a0\n  2683: a4 = a0 <u a5\n  2686: a2 = a2 + s1\n  2689: a5 = a2 + a4\n  2692: a2 = a5 ^ s1\n  2695: u64 [sp + 0x30] = s1\n  2698: a0 = a5 <u s1\n  2701: a0 = a4 if a2 == 0\n  2704: a3 = a3 + t2\n  2707: a4 = a3 + a0\n  2710: s1 = a4 <u a3\n  2713: a2 = a3 <u t2\n  2716: a1 = a1 + t1\n  2719: a1 = a1 + a2\n  2722: s1 = s1 + a1\n  2725: a1 = a4 >u 0\n  2727: a2 = s1 >u 0\n  2729: a2 = a1 if s1 == 0\n  2732: a1 = a4 | s1\n  2735: u64 [sp + 0x8] = a5\n  2738: a3 = a5 >u 0\n  2740: a3 = a2 if a1 != 0\n  2743: jump @54 if a3 != 0\n      : @51 (gas: 8)\n  2747: a1 = a4 <u t2\n  2750: a2 = s1 ^ t1\n  2753: a3 = s1 <u t1\n  2756: a3 = a1 if a2 == 0\n  2759: a1 = a4 ^ t2\n  2762: a1 = a1 | a2\n  2765: a0 = a3 if a1 != 0\n  2768: jump @54 if a0 != 0\n      : @52 (gas: 6)\n  2772: a0 = 0x40\n  2775: a1 = 0x20\n  2778: u64 [sp + 0x20] = t2\n  2781: u64 [sp + 0x18] = t1\n  2784: u64 [sp] = a4\n  2786: ra = 44, jump @0\n      : @53 [@dyn 22] (gas: 82)\n  2791: a1 = reverse s1\n  2793: a2 = u64 [sp]\n  2795: a2 = reverse a2\n  2797: a3 = u64 [sp + 0x8]\n  2800: a3 = reverse a3\n  2802: a4 = u64 [sp + 0x10]\n  2805: a4 = reverse a4\n  2807: u8 [a0 + 0x18] = a4\n  2810: a5 = a4 >> 0x38\n  2813: u8 [a0 + 0x1f] = a5\n  2816: a5 = a4 >> 0x30\n  2819: u8 [a0 + 0x1e] = a5\n  2822: a5 = a4 >> 0x28\n  2825: u8 [a0 + 0x1d] = a5\n  2828: a5 = a4 >> 0x20\n  2831: u8 [a0 + 0x1c] = a5\n  2834: a5 = a4 >> 0x18\n  2837: u8 [a0 + 0x1b] = a5\n  2840: a5 = a4 >> 0x10\n  2843: u8 [a0 + 0x1a] = a5\n  2846: a4 = a4 >> 0x8\n  2849: u8 [a0 + 0x19] = a4\n  2852: u8 [a0 + 0x10] = a3\n  2855: a4 = a3 >> 0x38\n  2858: u8 [a0 + 0x17] = a4\n  2861: a4 = a3 >> 0x30\n  2864: u8 [a0 + 0x16] = a4\n  2867: a4 = a3 >> 0x28\n  2870: u8 [a0 + 0x15] = a4\n  2873: a4 = a3 >> 0x20\n  2876: u8 [a0 + 0x14] = a4\n  2879: a4 = a3 >> 0x18\n  2882: u8 [a0 + 0x13] = a4\n  2885: a4 = a3 >> 0x10\n  2888: u8 [a0 + 0x12] = a4\n  2891: a3 = a3 >> 0x8\n  2894: u8 [a0 + 0x11] = a3\n  2897: u8 [a0 + 0x8] = a2\n  2900: a3 = a2 >> 0x38\n  2903: u8 [a0 + 0xf] = a3\n  2906: a3 = a2 >> 0x30\n  2909: u8 [a0 + 0xe] = a3\n  2912: a3 = a2 >> 0x28\n  2915: u8 [a0 + 0xd] = a3\n  2918: a3 = a2 >> 0x20\n  2921: u8 [a0 + 0xc] = a3\n  2924: a3 = a2 >> 0x18\n  2927: u8 [a0 + 0xb] = a3\n  2930: a3 = a2 >> 0x10\n  2933: u8 [a0 + 0xa] = a3\n  2936: a2 = a2 >> 0x8\n  2939: u8 [a0 + 0x9] = a2\n  2942: u8 [a0] = a1\n  2944: a2 = a1 >> 0x38\n  2947: u8 [a0 + 0x7] = a2\n  2950: a2 = a1 >> 0x30\n  2953: u8 [a0 + 0x6] = a2\n  2956: a2 = a1 >> 0x28\n  2959: u8 [a0 + 0x5] = a2\n  2962: a2 = a1 >> 0x20\n  2965: u8 [a0 + 0x4] = a2\n  2968: a2 = a1 >> 0x18\n  2971: u8 [a0 + 0x3] = a2\n  2974: a2 = a1 >> 0x10\n  2977: u8 [a0 + 0x2] = a2\n  2980: a1 = a1 >> 0x8\n  2983: u8 [a0 + 0x1] = a1\n  2986: a0 = u64 [sp + 0x38]\n  2989: a1 = u64 [sp + 0x28]\n  2992: u64 [a0] = a1\n  2994: a1 = u64 [sp + 0x18]\n  2997: u64 [a0 + 0x18] = a1\n  3000: a1 = u64 [sp + 0x30]\n  3003: u64 [a0 + 0x8] = a1\n  3006: a1 = u64 [sp + 0x20]\n  3009: u64 [a0 + 0x10] = a1\n  3012: sp = s0 + 0xffffffffffffff60\n  3016: ra = u64 [sp + 0x98]\n  3020: s0 = u64 [sp + 0x90]\n  3024: s1 = u64 [sp + 0x88]\n  3028: sp = sp + 0xa0\n  3032: ret\n      : @54 (gas: 8)\n  3034: u64 [sp + 112] = 0\n  3037: u64 [sp + 104] = 0\n  3040: u64 [sp + 96] = 0\n  3043: a0 = 0x4e487b7100000000\n  3053: a1 = sp + 0x60\n  3056: u64 [sp + 0x78] = a0\n  3059: a0 = 0\n  3061: ra = 46, jump @8\n      : @55 [@dyn 23] (gas: 7)\n  3066: u64 [sp + 88] = 0\n  3069: u64 [sp + 80] = 0\n  3072: u64 [sp + 64] = 0x41\n  3076: a0 = 0x4\n  3079: a1 = sp + 0x40\n  3082: u64 [sp + 72] = 0\n  3085: ra = 48, jump @8\n      : @56 [@dyn 24] (gas: 3)\n  3090: a1 = 0x24\n  3093: a0 = 0\n  3095: ra = 50, jump @0\n      : @57 [@dyn 25] (gas: 6)\n  3100: i32 a1 = a0 + 0\n  3102: a0 = 0x1\n  3105: a2 = 0x24\n  3108: ra = 0x34\n  3111: ecalli 12 // 'seal_return'\n  3113: fallthrough\n      : @58 [@dyn 26] (gas: 8)\n  3114: a2 = u32 [a1 + 0x10]\n  3117: a3 = u64 [a1 + 0x8]\n  3120: a1 = u64 [a1]\n  3122: u64 [a0 + 24] = 0\n  3125: u64 [a0 + 0x10] = a2\n  3128: u64 [a0 + 0x8] = a3\n  3131: u64 [a0] = a1\n  3133: ret\n      : @59 [@dyn 27] (gas: 12)\n  3135: a1 = u64 [sp + 0x48]\n  3138: a2 = u64 [sp + 0x40]\n  3141: a3 = u64 [sp + 0x38]\n  3144: a0 = u64 [sp + 0x30]\n  3147: a1 = a1 | a3\n  3150: a3 = a0 | a2\n  3153: a3 = a3 | a1\n  3156: a3 = a3 >> 0x20\n  3159: a1 = a1 | a2\n  3162: a1 = a1 << 0x20\n  3165: a1 = a1 | a3\n  3168: jump @66 if a1 != 0\n      : @60 (gas: 4)\n  3172: i32 a0 = a0 + 0\n  3174: u64 [sp] = a0\n  3176: a1 = s1\n  3178: ra = 56, jump @0\n      : @61 [@dyn 28] (gas: 5)\n  3183: i32 a0 = a0 + 0\n  3185: a1 = s1\n  3187: a2 = 0\n  3189: ecalli 2 // 'call_data_copy'\n  3191: fallthrough\n      : @62 (gas: 1)\n  3192: jump @67 if s1 <=u 31\n      : @63 (gas: 3)\n  3197: a1 = 0x20\n  3200: a0 = u64 [sp]\n  3202: ra = 58, jump @0\n      : @64 [@dyn 29] (gas: 54)\n  3207: a1 = u8 [a0 + 0x9]\n  3210: a2 = u8 [a0 + 0x8]\n  3213: a3 = u8 [a0 + 0xa]\n  3216: a4 = u8 [a0 + 0xb]\n  3219: a1 = a1 << 0x8\n  3222: a1 = a1 | a2\n  3225: a3 = a3 << 0x10\n  3228: a4 = a4 << 0x18\n  3231: a3 = a3 | a4\n  3234: a1 = a1 | a3\n  3237: a2 = u8 [a0 + 0xd]\n  3240: a3 = u8 [a0 + 0xc]\n  3243: a4 = u8 [a0 + 0xe]\n  3246: a5 = u8 [a0 + 0xf]\n  3249: a2 = a2 << 0x8\n  3252: a2 = a2 | a3\n  3255: a4 = a4 << 0x10\n  3258: a5 = a5 << 0x18\n  3261: a4 = a4 | a5\n  3264: a2 = a2 | a4\n  3267: a2 = a2 << 0x20\n  3270: a2 = a2 | a1\n  3273: a1 = u8 [a0 + 0x1]\n  3276: a3 = u8 [a0]\n  3278: a4 = u8 [a0 + 0x2]\n  3281: a5 = u8 [a0 + 0x3]\n  3284: a1 = a1 << 0x8\n  3287: a1 = a1 | a3\n  3290: a4 = a4 << 0x10\n  3293: a5 = a5 << 0x18\n  3296: a4 = a4 | a5\n  3299: a1 = a1 | a4\n  3302: a3 = u8 [a0 + 0x5]\n  3305: a4 = u8 [a0 + 0x4]\n  3308: a5 = u8 [a0 + 0x6]\n  3311: s1 = u8 [a0 + 0x7]\n  3314: a3 = a3 << 0x8\n  3317: a3 = a3 | a4\n  3320: a5 = a5 << 0x10\n  3323: s1 = s1 << 0x18\n  3326: a5 = a5 | s1\n  3329: a3 = a3 | a5\n  3332: a3 = a3 << 0x20\n  3335: a1 = a1 | a3\n  3338: t0 = reverse a1\n  3340: a2 = reverse a2\n  3342: a3 = 0x100000000\n  3352: a3 = a3 ^ a2\n  3355: a3 = a3 | t0\n  3358: a4 = a2 >> 0x20\n  3361: a4 = a4 <u 0x1\n  3364: a4 = 0 if t0 != 0\n  3366: a4 = 0 if a3 == 0\n  3368: jump @67 if a4 == 0\n      : @65 (gas: 57)\n  3372: a3 = u8 [a0 + 0x19]\n  3375: a4 = u8 [a0 + 0x18]\n  3378: a5 = u8 [a0 + 0x1a]\n  3381: s1 = u8 [a0 + 0x1b]\n  3384: a3 = a3 << 0x8\n  3387: a3 = a3 | a4\n  3390: a5 = a5 << 0x10\n  3393: s1 = s1 << 0x18\n  3396: a5 = a5 | s1\n  3399: a3 = a3 | a5\n  3402: a4 = u8 [a0 + 0x1d]\n  3405: a5 = u8 [a0 + 0x1c]\n  3408: s1 = u8 [a0 + 0x1e]\n  3411: a1 = u8 [a0 + 0x1f]\n  3414: a4 = a4 << 0x8\n  3417: a4 = a4 | a5\n  3420: s1 = s1 << 0x10\n  3423: a1 = a1 << 0x18\n  3426: a1 = a1 | s1\n  3429: a1 = a1 | a4\n  3432: a1 = a1 << 0x20\n  3435: a3 = a3 | a1\n  3438: a1 = u8 [a0 + 0x11]\n  3441: a4 = u8 [a0 + 0x10]\n  3444: a5 = u8 [a0 + 0x12]\n  3447: s1 = u8 [a0 + 0x13]\n  3450: a1 = a1 << 0x8\n  3453: a1 = a1 | a4\n  3456: a5 = a5 << 0x10\n  3459: s1 = s1 << 0x18\n  3462: a5 = a5 | s1\n  3465: a1 = a1 | a5\n  3468: a4 = u8 [a0 + 0x15]\n  3471: a5 = u8 [a0 + 0x14]\n  3474: s1 = u8 [a0 + 0x16]\n  3477: a0 = u8 [a0 + 0x17]\n  3480: a4 = a4 << 0x8\n  3483: a4 = a4 | a5\n  3486: s1 = s1 << 0x10\n  3489: a0 = a0 << 0x18\n  3492: a0 = a0 | s1\n  3495: a0 = a0 | a4\n  3498: a0 = a0 << 0x20\n  3501: a0 = a0 | a1\n  3504: a0 = reverse a0\n  3506: a1 = reverse a3\n  3508: a3 = u64 [sp + 0x8]\n  3511: u64 [a3] = a1\n  3513: u64 [a3 + 0x8] = a0\n  3516: u64 [a3 + 0x10] = a2\n  3519: u64 [a3 + 0x18] = t0\n  3522: sp = s0 + 0xffffffffffffff90\n  3525: ra = u64 [sp + 0x68]\n  3528: s0 = u64 [sp + 0x60]\n  3531: s1 = u64 [sp + 0x58]\n  3534: sp = sp + 0x70\n  3537: ret\n      : @66 (gas: 1)\n  3539: trap\n      : @67 (gas: 3)\n  3540: a0 = 0\n  3542: a1 = 0\n  3544: ra = 60, jump @0\n      : @68 [@dyn 30] (gas: 6)\n  3549: i32 a1 = a0 + 0\n  3551: a0 = 0x1\n  3554: a2 = 0\n  3556: ra = 0x3e\n  3559: ecalli 12 // 'seal_return'\n  3561: fallthrough\n      : @69 [@dyn 31] (gas: 9)\n  3562: a2 = u64 [a1 + 0x18]\n  3565: a3 = u64 [a1 + 0x10]\n  3568: a4 = u64 [a1 + 0x8]\n  3571: a1 = u64 [a1]\n  3573: u64 [a0 + 0x18] = a2\n  3576: u64 [a0 + 0x10] = a3\n  3579: u64 [a0 + 0x8] = a4\n  3582: u64 [a0] = a1\n  3584: ret\n      : @70 [@dyn 32] (gas: 6)\n  3586: i32 a1 = a0 + 0\n  3588: a0 = 0x1\n  3591: a2 = 0\n  3593: ra = 0x42\n  3596: ecalli 12 // 'seal_return'\n  3598: fallthrough\n      : @71 [@dyn 33] (gas: 7)\n  3599: a1 = u64 [a1]\n  3601: a1 = a1 << 0x20\n  3604: u64 [a0 + 0x18] = a1\n  3607: u64 [a0 + 16] = 0\n  3610: u64 [a0 + 8] = 0\n  3613: u64 [a0 + 0] = 0\n  3615: ret\n      : @72 (gas: 1)\n  3617: jump @86 if a0 == 0\n      : @73 (gas: 3)\n  3621: a0 = 0x40\n  3624: a1 = 0x20\n  3627: ra = 68, jump @0\n      : @74 [@dyn 34] (gas: 106)\n  3632: a1 = u8 [a0 + 0x11]\n  3635: a2 = u8 [a0 + 0x10]\n  3638: a3 = u8 [a0 + 0x12]\n  3641: a4 = u8 [a0 + 0x13]\n  3644: a1 = a1 << 0x8\n  3647: a1 = a1 | a2\n  3650: a3 = a3 << 0x10\n  3653: a4 = a4 << 0x18\n  3656: a3 = a3 | a4\n  3659: a1 = a1 | a3\n  3662: a2 = u8 [a0 + 0x15]\n  3665: a3 = u8 [a0 + 0x14]\n  3668: a4 = u8 [a0 + 0x16]\n  3671: a5 = u8 [a0 + 0x17]\n  3674: a2 = a2 << 0x8\n  3677: a2 = a2 | a3\n  3680: a4 = a4 << 0x10\n  3683: a5 = a5 << 0x18\n  3686: a4 = a4 | a5\n  3689: a2 = a2 | a4\n  3692: a2 = a2 << 0x20\n  3695: t1 = a2 | a1\n  3698: a1 = u8 [a0 + 0x1]\n  3701: a2 = u8 [a0]\n  3703: a3 = u8 [a0 + 0x2]\n  3706: a4 = u8 [a0 + 0x3]\n  3709: a1 = a1 << 0x8\n  3712: a1 = a1 | a2\n  3715: a3 = a3 << 0x10\n  3718: a4 = a4 << 0x18\n  3721: a3 = a3 | a4\n  3724: a1 = a1 | a3\n  3727: a2 = u8 [a0 + 0x5]\n  3730: a3 = u8 [a0 + 0x4]\n  3733: a4 = u8 [a0 + 0x6]\n  3736: a5 = u8 [a0 + 0x7]\n  3739: a2 = a2 << 0x8\n  3742: a2 = a2 | a3\n  3745: a4 = a4 << 0x10\n  3748: a5 = a5 << 0x18\n  3751: a4 = a4 | a5\n  3754: a2 = a2 | a4\n  3757: a2 = a2 << 0x20\n  3760: t0 = a2 | a1\n  3763: a1 = u8 [a0 + 0x19]\n  3766: a2 = u8 [a0 + 0x18]\n  3769: a3 = u8 [a0 + 0x1a]\n  3772: a4 = u8 [a0 + 0x1b]\n  3775: a1 = a1 << 0x8\n  3778: a1 = a1 | a2\n  3781: a3 = a3 << 0x10\n  3784: a4 = a4 << 0x18\n  3787: a3 = a3 | a4\n  3790: a1 = a1 | a3\n  3793: a2 = u8 [a0 + 0x1d]\n  3796: a3 = u8 [a0 + 0x1c]\n  3799: a4 = u8 [a0 + 0x1e]\n  3802: a5 = u8 [a0 + 0x1f]\n  3805: a2 = a2 << 0x8\n  3808: a2 = a2 | a3\n  3811: a4 = a4 << 0x10\n  3814: a5 = a5 << 0x18\n  3817: a4 = a4 | a5\n  3820: a2 = a2 | a4\n  3823: a2 = a2 << 0x20\n  3826: a5 = a2 | a1\n  3829: a1 = u8 [a0 + 0x9]\n  3832: a2 = u8 [a0 + 0x8]\n  3835: a3 = u8 [a0 + 0xa]\n  3838: a4 = u8 [a0 + 0xb]\n  3841: a1 = a1 << 0x8\n  3844: a1 = a1 | a2\n  3847: a3 = a3 << 0x10\n  3850: a4 = a4 << 0x18\n  3853: a3 = a3 | a4\n  3856: a1 = a1 | a3\n  3859: a2 = u8 [a0 + 0xd]\n  3862: a3 = u8 [a0 + 0xc]\n  3865: a4 = u8 [a0 + 0xe]\n  3868: a0 = u8 [a0 + 0xf]\n  3871: a2 = a2 << 0x8\n  3874: a2 = a2 | a3\n  3877: a4 = a4 << 0x10\n  3880: a0 = a0 << 0x18\n  3883: a0 = a0 | a4\n  3886: a0 = a0 | a2\n  3889: a0 = a0 << 0x20\n  3892: a0 = a0 | a1\n  3895: u64 [sp + 0x10] = a0\n  3898: s1 = reverse a0\n  3900: u64 [sp + 0x18] = a5\n  3903: a2 = reverse a5\n  3905: u64 [sp + 0x28] = t0\n  3908: a1 = reverse t0\n  3910: u64 [sp + 0x20] = t1\n  3913: a0 = reverse t1\n  3915: u64 [sp + 0x70] = a0\n  3918: u64 [sp + 0x68] = a1\n  3921: a0 = a0 | a1\n  3924: a1 = a2 | s1\n  3927: a1 = a1 | a0\n  3930: a1 = a1 >> 0x20\n  3933: a0 = a0 | s1\n  3936: a0 = a0 << 0x20\n  3939: a0 = a0 | a1\n  3942: jump @85 if a0 != 0\n      : @75 (gas: 5)\n  3946: i32 a0 = a2 + 0\n  3948: a1 = 0x20\n  3951: u64 [sp + 0x78] = a0\n  3954: u64 [sp + 0x30] = a2\n  3957: ra = 70, jump @0\n      : @76 [@dyn 35] (gas: 41)\n  3962: u8 [a0 + 31] = 0\n  3965: u8 [a0 + 30] = 0\n  3968: u8 [a0 + 29] = 0\n  3971: u8 [a0 + 28] = 0\n  3974: u8 [a0 + 27] = 0\n  3977: u8 [a0 + 26] = 0\n  3980: u8 [a0 + 25] = 0\n  3983: u8 [a0 + 24] = 0\n  3986: u8 [a0 + 23] = 0\n  3989: u8 [a0 + 22] = 0\n  3992: u8 [a0 + 21] = 0\n  3995: u8 [a0 + 20] = 0\n  3998: u8 [a0 + 19] = 0\n  4001: u8 [a0 + 18] = 0\n  4004: u8 [a0 + 17] = 0\n  4007: u8 [a0 + 16] = 0\n  4010: u8 [a0 + 15] = 0\n  4013: u8 [a0 + 14] = 0\n  4016: u8 [a0 + 13] = 0\n  4019: u8 [a0 + 12] = 0\n  4022: u8 [a0 + 11] = 0\n  4025: u8 [a0 + 10] = 0\n  4028: u8 [a0 + 9] = 0\n  4031: u8 [a0 + 8] = 0\n  4034: u8 [a0 + 7] = 0\n  4037: u8 [a0 + 6] = 0\n  4040: u8 [a0 + 5] = 0\n  4043: u8 [a0 + 4] = 0\n  4046: u8 [a0 + 3] = 0xc7\n  4051: u8 [a0 + 2] = 0xf2\n  4056: u8 [a0 + 1] = 0xe6\n  4061: a1 = u64 [sp + 0x68]\n  4064: a1 = a1 | s1\n  4067: a2 = 0xfffffffc\n  4077: a3 = u64 [sp + 0x30]\n  4080: a2 = a3 <u a2\n  4083: a4 = u64 [sp + 0x70]\n  4086: a2 = 0 if a4 != 0\n  4088: a2 = 0 if a1 != 0\n  4090: u8 [a0 + 0] = 0x5b\n  4093: jump @85 if a2 == 0\n      : @77 (gas: 19)\n  4097: a0 = u64 [sp + 0x38]\n  4100: a0 = reverse a0\n  4102: a1 = a0 >> 0x20\n  4105: a2 = u64 [sp + 0x40]\n  4108: a2 = reverse a2\n  4110: a3 = a2 << 0x20\n  4113: a1 = a1 | a3\n  4116: u64 [sp + 0x70] = a1\n  4119: a0 = a0 << 0x20\n  4122: a1 = u64 [sp + 0x48]\n  4125: a1 = reverse a1\n  4127: a1 = a1 >> 0x20\n  4130: a0 = a0 | a1\n  4133: u64 [sp + 0x68] = a0\n  4136: s1 = a2 >> 0x20\n  4139: a0 = u64 [sp + 0x78]\n  4142: i32 a0 = a0 + 0x4\n  4145: a1 = 0x20\n  4148: ra = 72, jump @0\n      : @78 [@dyn 36] (gas: 70)\n  4153: a1 = reverse s1\n  4155: a2 = u64 [sp + 0x70]\n  4158: a2 = reverse a2\n  4160: a3 = u64 [sp + 0x68]\n  4163: a3 = reverse a3\n  4165: a4 = a3 >> 0x38\n  4168: u8 [a0 + 0x1f] = a4\n  4171: a4 = a3 >> 0x30\n  4174: u8 [a0 + 0x1e] = a4\n  4177: a4 = a3 >> 0x28\n  4180: u8 [a0 + 0x1d] = a4\n  4183: a4 = a3 >> 0x20\n  4186: u8 [a0 + 0x1c] = a4\n  4189: a4 = a3 >> 0x18\n  4192: u8 [a0 + 0x1b] = a4\n  4195: a4 = a3 >> 0x10\n  4198: u8 [a0 + 0x1a] = a4\n  4201: a4 = a3 >> 0x8\n  4204: u8 [a0 + 0x19] = a4\n  4207: u8 [a0 + 0x18] = a3\n  4210: u8 [a0 + 0x10] = a2\n  4213: u8 [a0 + 11] = 0\n  4216: u8 [a0 + 10] = 0\n  4219: u8 [a0 + 9] = 0\n  4222: u8 [a0 + 7] = 0\n  4225: u8 [a0 + 6] = 0\n  4228: u8 [a0 + 5] = 0\n  4231: u8 [a0 + 4] = 0\n  4234: u8 [a0 + 3] = 0\n  4237: u8 [a0 + 2] = 0\n  4240: u8 [a0 + 1] = 0\n  4243: u8 [a0 + 0] = 0\n  4245: a3 = a2 >> 0x38\n  4248: u8 [a0 + 0x17] = a3\n  4251: a3 = a2 >> 0x30\n  4254: u8 [a0 + 0x16] = a3\n  4257: a3 = a2 >> 0x28\n  4260: u8 [a0 + 0x15] = a3\n  4263: a3 = a2 >> 0x20\n  4266: u8 [a0 + 0x14] = a3\n  4269: a3 = a2 >> 0x18\n  4272: u8 [a0 + 0x13] = a3\n  4275: a3 = a2 >> 0x10\n  4278: u8 [a0 + 0x12] = a3\n  4281: a2 = a2 >> 0x8\n  4284: u8 [a0 + 0x11] = a2\n  4287: u8 [a0 + 0x8] = a1\n  4290: a2 = a1 >> 0x38\n  4293: u8 [a0 + 0xf] = a2\n  4296: a2 = a1 >> 0x30\n  4299: u8 [a0 + 0xe] = a2\n  4302: a2 = a1 >> 0x28\n  4305: u8 [a0 + 0xd] = a2\n  4308: a1 = a1 >> 0x20\n  4311: u8 [a0 + 0xc] = a1\n  4314: ecalli 9 // 'ref_time_left'\n  4316: a0 = u64 [sp + 0x50]\n  4319: u64 [sp + 0xe8] = a0\n  4323: a0 = u64 [sp + 0x60]\n  4326: u64 [sp + 0xe0] = a0\n  4330: a0 = u64 [sp + 0x58]\n  4333: u32 [sp + 0xf0] = a0\n  4337: u64 [sp + 280] = 0\n  4341: u64 [sp + 272] = 0\n  4345: u64 [sp + 264] = 0\n  4349: u64 [sp + 256] = 0\n  4353: a1 = 0x24\n  4356: s1 = u64 [sp + 0x78]\n  4359: a0 = s1\n  4361: ra = 74, jump @0\n      : @79 [@dyn 37] (gas: 4)\n  4366: u64 [sp + 0x70] = a0\n  4369: a0 = s1\n  4371: a1 = 0\n  4373: ra = 76, jump @0\n      : @80 [@dyn 38] (gas: 31)\n  4378: u32 [sp + 288] = 0\n  4382: u64 [sp + 344] = 0xffffffffffffffff\n  4387: u64 [sp + 336] = 0xffffffffffffffff\n  4392: u64 [sp + 328] = 0xffffffffffffffff\n  4397: u64 [sp + 320] = 0xffffffffffffffff\n  4402: a1 = sp + 0xe0\n  4406: a1 = a1 << 0x20\n  4409: a1 = a1 >> 0x20\n  4412: s1 = 0x800000000\n  4422: s1 = s1 | a1\n  4425: a1 = sp + 0x100\n  4429: a1 = a1 << 0x20\n  4432: a1 = a1 >> 0x20\n  4435: a2 = sp + 0x140\n  4439: a2 = a2 << 0x20\n  4442: a3 = a2 | a1\n  4445: a1 = u64 [sp + 0x70]\n  4448: a1 = a1 << 0x20\n  4451: a1 = a1 >> 0x20\n  4454: a2 = 0x2400000000\n  4464: a4 = a1 | a2\n  4467: a0 = a0 << 0x20\n  4470: a0 = a0 >> 0x20\n  4473: a1 = sp + 0x120\n  4477: a1 = a1 << 0x20\n  4480: a5 = a1 | a0\n  4483: a1 = 0xffffffffffffffff\n  4486: a2 = 0xffffffffffffffff\n  4489: a0 = s1\n  4491: ecalli 1 // 'call'\n  4493: fallthrough\n      : @81 (gas: 1)\n  4494: jump @84 if a0 != 0\n      : @82 (gas: 4)\n  4498: ecalli 11 // 'return_data_size'\n  4500: a0 = 0x40\n  4503: a1 = 0x20\n  4506: ra = 78, jump @0\n      : @83 [@dyn 39] (gas: 65)\n  4511: a3 = u64 [sp + 0x18]\n  4514: u8 [a0 + 0x18] = a3\n  4517: a2 = u64 [sp + 0x20]\n  4520: a1 = a2 >> 0x38\n  4523: u8 [a0 + 0x17] = a1\n  4526: a1 = a2 >> 0x30\n  4529: u8 [a0 + 0x16] = a1\n  4532: a1 = a2 >> 0x28\n  4535: u8 [a0 + 0x15] = a1\n  4538: a1 = a2 >> 0x20\n  4541: u8 [a0 + 0x14] = a1\n  4544: a1 = a2 >> 0x18\n  4547: u8 [a0 + 0x13] = a1\n  4550: a1 = a2 >> 0x10\n  4553: u8 [a0 + 0x12] = a1\n  4556: a1 = a2 >> 0x8\n  4559: u8 [a0 + 0x11] = a1\n  4562: u8 [a0 + 0x10] = a2\n  4565: a2 = u64 [sp + 0x10]\n  4568: a1 = a2 >> 0x38\n  4571: u8 [a0 + 0xf] = a1\n  4574: a1 = a2 >> 0x30\n  4577: u8 [a0 + 0xe] = a1\n  4580: a1 = a2 >> 0x28\n  4583: u8 [a0 + 0xd] = a1\n  4586: a1 = a2 >> 0x20\n  4589: u8 [a0 + 0xc] = a1\n  4592: a1 = a2 >> 0x18\n  4595: u8 [a0 + 0xb] = a1\n  4598: a1 = a2 >> 0x10\n  4601: u8 [a0 + 0xa] = a1\n  4604: a1 = a2 >> 0x8\n  4607: u8 [a0 + 0x9] = a1\n  4610: u8 [a0 + 0x8] = a2\n  4613: a2 = u64 [sp + 0x28]\n  4616: a1 = a2 >> 0x38\n  4619: u8 [a0 + 0x7] = a1\n  4622: a1 = a2 >> 0x30\n  4625: u8 [a0 + 0x6] = a1\n  4628: a1 = a2 >> 0x28\n  4631: u8 [a0 + 0x5] = a1\n  4634: a1 = a2 >> 0x20\n  4637: u8 [a0 + 0x4] = a1\n  4640: a1 = a2 >> 0x18\n  4643: u8 [a0 + 0x3] = a1\n  4646: a1 = a2 >> 0x10\n  4649: u8 [a0 + 0x2] = a1\n  4652: a1 = a2 >> 0x8\n  4655: u8 [a0 + 0x1] = a1\n  4658: u8 [a0] = a2\n  4660: a1 = a3 >> 0x38\n  4663: u8 [a0 + 0x1f] = a1\n  4666: a1 = a3 >> 0x30\n  4669: u8 [a0 + 0x1e] = a1\n  4672: a1 = a3 >> 0x28\n  4675: u8 [a0 + 0x1d] = a1\n  4678: a1 = a3 >> 0x20\n  4681: u8 [a0 + 0x1c] = a1\n  4684: a1 = a3 >> 0x18\n  4687: u8 [a0 + 0x1b] = a1\n  4690: a1 = a3 >> 0x10\n  4693: u8 [a0 + 0x1a] = a1\n  4696: a1 = a3 >> 0x8\n  4699: u8 [a0 + 0x19] = a1\n  4702: fallthrough\n      : @84 (gas: 6)\n  4703: sp = s0 + 0xfffffffffffffe40\n  4707: ra = u64 [sp + 0x1b8]\n  4711: s0 = u64 [sp + 0x1b0]\n  4715: s1 = u64 [sp + 0x1a8]\n  4719: sp = sp + 0x1c0\n  4723: ret\n      : @85 (gas: 1)\n  4725: trap\n      : @86 (gas: 2)\n  4726: a1 = 0\n  4728: ra = 80, jump @0\n      : @87 [@dyn 40] (gas: 6)\n  4733: i32 a1 = a0 + 0\n  4735: a0 = 0x1\n  4738: a2 = 0\n  4740: ra = 0x52\n  4743: ecalli 12 // 'seal_return'\n  4745: fallthrough\n      : @88 [@dyn 41] (gas: 6)\n  4746: a1 = u32 [a1 + 0x1c]\n  4749: u64 [a0 + 24] = 0\n  4752: u64 [a0 + 16] = 0\n  4755: u64 [a0 + 8] = 0\n  4758: u64 [a0] = a1\n  4760: ret\n      : @89 (gas: 47)\n  4762: sp = sp + 0xffffffffffffff60\n  4766: u64 [sp + 0x98] = ra\n  4770: u64 [sp + 0x90] = s0\n  4774: u64 [sp + 0x88] = s1\n  4778: s0 = sp + 0xa0\n  4782: sp = sp & 0xffffffffffffffe0\n  4785: ra = u64 [a1 + 0x10]\n  4788: a5 = u64 [a1 + 0x8]\n  4791: a3 = u64 [a2 + 0x8]\n  4794: t1 = u64 [a1]\n  4796: a4 = u64 [a2]\n  4798: u64 [sp + 0x48] = a4\n  4801: t2 = u64 [a2 + 0x10]\n  4804: t0 = a3 ^ a5\n  4807: s1 = a3 <u a5\n  4810: a4 = a4 <u t1\n  4813: u64 [sp + 0x40] = a4\n  4816: s1 = a4 if t0 == 0\n  4819: t0 = u64 [a1 + 0x18]\n  4822: a1 = u64 [a2 + 0x18]\n  4825: u64 [sp + 0x38] = a1\n  4828: a2 = t2 - ra\n  4831: a1 = a2 - s1\n  4834: u64 [sp + 0x50] = a1\n  4837: a1 = a2 <u s1\n  4840: a4 = t2 <u ra\n  4843: u64 [sp + 0x58] = t0\n  4846: a2 = u64 [sp + 0x38]\n  4849: a2 = a2 - t0\n  4852: a2 = a2 - a4\n  4855: a2 = a2 - a1\n  4858: a1 = a3 - a5\n  4861: a3 = u64 [sp + 0x40]\n  4864: a1 = a1 - a3\n  4867: a3 = u64 [sp + 0x48]\n  4870: a3 = a3 - t1\n  4873: a4 = a1 >u 0\n  4875: a3 = a3 <u 0x40\n  4878: a3 = a3 ^ 0x1\n  4881: a3 = a4 if a1 != 0\n  4884: s1 = a2 >s 0\n  4886: a1 = u64 [sp + 0x50]\n  4889: a4 = a1 >u 0\n  4891: a4 = s1 if a2 != 0\n  4894: a1 = a1 | a2\n  4897: a3 = a4 if a1 != 0\n  4900: jump @98 if a3 == 0\n      : @90 (gas: 12)\n  4904: s1 = a0\n  4906: a0 = t1 | ra\n  4909: u64 [sp + 0x50] = a5\n  4912: a1 = u64 [sp + 0x58]\n  4915: a1 = a1 | a5\n  4918: a0 = a0 | a1\n  4921: a0 = a0 >> 0x20\n  4924: u64 [sp + 0x48] = ra\n  4927: a1 = a1 | ra\n  4930: a1 = a1 << 0x20\n  4933: a0 = a0 | a1\n  4936: jump @97 if a0 != 0\n      : @91 (gas: 6)\n  4940: u64 [sp + 0x40] = t1\n  4943: i32 a1 = t1 + 0\n  4945: i32 a0 = sp + 0x60\n  4948: u64 [sp + 0x18] = a1\n  4951: ecalli 3 // 'call_data_load'\n  4953: fallthrough\n      : @92 (gas: 9)\n  4954: a2 = u64 [sp + 0x78]\n  4957: a3 = u64 [sp + 0x70]\n  4960: a4 = u64 [sp + 0x60]\n  4963: a5 = u64 [sp + 0x68]\n  4966: a0 = a3 | a2\n  4969: a1 = a4 <u 0x100\n  4973: a1 = 0 if a5 != 0\n  4975: a1 = 0 if a0 != 0\n  4977: jump @99 if a1 == 0\n      : @93 (gas: 14)\n  4981: u64 [sp + 0x20] = a5\n  4984: u64 [sp + 0x28] = a4\n  4987: u64 [sp + 0x30] = a3\n  4990: u64 [sp + 0x38] = a2\n  4993: a0 = u64 [sp + 0x48]\n  4996: a1 = u64 [sp + 0x58]\n  4999: a0 = a0 | a1\n  5002: a1 = 0xffffffe0\n  5012: a2 = u64 [sp + 0x40]\n  5015: a1 = a2 <u a1\n  5018: a2 = u64 [sp + 0x50]\n  5021: a1 = 0 if a2 != 0\n  5023: a1 = 0 if a0 != 0\n  5025: jump @97 if a1 == 0\n      : @94 (gas: 5)\n  5028: a0 = u64 [sp + 0x18]\n  5031: i32 a1 = a0 + 0x20\n  5034: i32 a0 = sp + 0x60\n  5037: ecalli 3 // 'call_data_load'\n  5039: fallthrough\n      : @95 (gas: 9)\n  5040: a0 = u64 [sp + 0x78]\n  5043: a1 = u64 [sp + 0x70]\n  5046: a2 = u64 [sp + 0x60]\n  5049: a3 = u64 [sp + 0x68]\n  5052: a4 = a1 | a0\n  5055: a5 = a2 <u 0x100\n  5059: a5 = 0 if a3 != 0\n  5061: a5 = 0 if a4 != 0\n  5063: jump @98 if a5 == 0\n      : @96 (gas: 18)\n  5066: u64 [s1 + 0x28] = a3\n  5069: u64 [s1 + 0x20] = a2\n  5072: a2 = u64 [sp + 0x20]\n  5075: u64 [s1 + 0x8] = a2\n  5078: a2 = u64 [sp + 0x28]\n  5081: u64 [s1] = a2\n  5083: u64 [s1 + 0x30] = a1\n  5086: a1 = u64 [sp + 0x30]\n  5089: u64 [s1 + 0x10] = a1\n  5092: u64 [s1 + 0x38] = a0\n  5095: a0 = u64 [sp + 0x38]\n  5098: u64 [s1 + 0x18] = a0\n  5101: sp = s0 + 0xffffffffffffff60\n  5105: ra = u64 [sp + 0x98]\n  5109: s0 = u64 [sp + 0x90]\n  5113: s1 = u64 [sp + 0x88]\n  5117: sp = sp + 0xa0\n  5121: ret\n      : @97 (gas: 1)\n  5123: trap\n      : @98 (gas: 4)\n  5124: a0 = 0\n  5126: a1 = 0\n  5128: ra = 0x54\n  5131: jump @0\n      : @99 (gas: 2)\n  5134: a0 = 0\n  5136: ra = 84, jump @0\n      : @100 [@dyn 42] (gas: 6)\n  5141: i32 a1 = a0 + 0\n  5143: a0 = 0x1\n  5146: a2 = 0\n  5148: ra = 0x56\n  5151: ecalli 12 // 'seal_return'\n  5153: fallthrough\n      : @101 [@dyn 43] (gas: 9)\n  5154: a2 = u64 [a1 + 0x18]\n  5157: a3 = u64 [a1 + 0x10]\n  5160: a4 = u64 [a1 + 0x8]\n  5163: a1 = u64 [a1]\n  5165: u64 [a0 + 0x18] = a2\n  5168: u64 [a0 + 0x10] = a3\n  5171: u64 [a0 + 0x8] = a4\n  5174: u64 [a0] = a1\n  5176: ret\n      : @102 (gas: 8)\n  5178: a0 = u64 [sp + 0xd0]\n  5182: a1 = u64 [sp + 0xd8]\n  5186: a2 = u64 [sp + 0xc8]\n  5190: a3 = u64 [sp + 0xc0]\n  5194: a1 = a1 | a2\n  5197: a0 = a0 | a3\n  5200: a0 = a0 | a1\n  5203: jump @108 if a0 != 0\n      : @103 (gas: 13)\n  5207: a0 = u32 [0x20004]\n  5212: u64 [sp + 88] = 0\n  5215: u64 [sp + 80] = 0\n  5218: u64 [sp + 72] = 0\n  5221: u64 [sp + 0x40] = a0\n  5224: u64 [sp + 120] = 0\n  5227: u64 [sp + 112] = 0\n  5230: u64 [sp + 96] = 0x4\n  5234: a0 = sp + 0x80\n  5238: a1 = sp + 0x60\n  5241: a2 = sp + 0x40\n  5244: u64 [sp + 104] = 0\n  5247: ra = 88, jump @89\n      : @104 [@dyn 44] (gas: 19)\n  5252: t0 = u64 [sp + 0x80]\n  5256: t1 = u64 [sp + 0x88]\n  5260: a1 = u64 [sp + 0x90]\n  5264: a3 = u64 [sp + 0x98]\n  5268: a4 = u64 [sp + 0xa0]\n  5272: a5 = u64 [sp + 0xa8]\n  5276: a2 = u64 [sp + 0xb0]\n  5280: a0 = u64 [sp + 0xb8]\n  5284: u64 [sp + 0x18] = a0\n  5287: u64 [sp + 0x10] = a2\n  5290: u64 [sp + 0x8] = a5\n  5293: u64 [sp] = a4\n  5295: u64 [sp + 0x38] = a3\n  5298: u64 [sp + 0x30] = a1\n  5301: u64 [sp + 0x28] = t1\n  5304: a0 = sp + 0x20\n  5307: a1 = sp\n  5309: u64 [sp + 0x20] = t0\n  5312: ra = 90, jump @307\n      : @105 [@dyn 45] (gas: 3)\n  5317: a0 = 0x40\n  5320: a1 = 0x20\n  5323: ra = 92, jump @0\n      : @106 [@dyn 46] (gas: 100)\n  5328: a1 = u8 [a0 + 0x11]\n  5331: a2 = u8 [a0 + 0x10]\n  5334: a3 = u8 [a0 + 0x12]\n  5337: a4 = u8 [a0 + 0x13]\n  5340: a1 = a1 << 0x8\n  5343: a1 = a1 | a2\n  5346: a3 = a3 << 0x10\n  5349: a4 = a4 << 0x18\n  5352: a3 = a3 | a4\n  5355: a1 = a1 | a3\n  5358: a2 = u8 [a0 + 0x15]\n  5361: a3 = u8 [a0 + 0x14]\n  5364: a4 = u8 [a0 + 0x16]\n  5367: a5 = u8 [a0 + 0x17]\n  5370: a2 = a2 << 0x8\n  5373: a2 = a2 | a3\n  5376: a4 = a4 << 0x10\n  5379: a5 = a5 << 0x18\n  5382: a4 = a4 | a5\n  5385: a2 = a2 | a4\n  5388: a2 = a2 << 0x20\n  5391: t0 = a2 | a1\n  5394: a2 = u8 [a0 + 0x1]\n  5397: a3 = u8 [a0]\n  5399: a4 = u8 [a0 + 0x2]\n  5402: a5 = u8 [a0 + 0x3]\n  5405: a2 = a2 << 0x8\n  5408: a2 = a2 | a3\n  5411: a4 = a4 << 0x10\n  5414: a5 = a5 << 0x18\n  5417: a4 = a4 | a5\n  5420: a2 = a2 | a4\n  5423: a3 = u8 [a0 + 0x5]\n  5426: a4 = u8 [a0 + 0x4]\n  5429: a5 = u8 [a0 + 0x6]\n  5432: a1 = u8 [a0 + 0x7]\n  5435: a3 = a3 << 0x8\n  5438: a3 = a3 | a4\n  5441: a5 = a5 << 0x10\n  5444: a1 = a1 << 0x18\n  5447: a1 = a1 | a5\n  5450: a1 = a1 | a3\n  5453: a1 = a1 << 0x20\n  5456: t1 = a1 | a2\n  5459: a1 = u8 [a0 + 0x19]\n  5462: a3 = u8 [a0 + 0x18]\n  5465: a4 = u8 [a0 + 0x1a]\n  5468: a5 = u8 [a0 + 0x1b]\n  5471: a1 = a1 << 0x8\n  5474: a1 = a1 | a3\n  5477: a4 = a4 << 0x10\n  5480: a5 = a5 << 0x18\n  5483: a4 = a4 | a5\n  5486: a1 = a1 | a4\n  5489: a3 = u8 [a0 + 0x1d]\n  5492: a4 = u8 [a0 + 0x1c]\n  5495: a5 = u8 [a0 + 0x1e]\n  5498: a2 = u8 [a0 + 0x1f]\n  5501: a3 = a3 << 0x8\n  5504: a3 = a3 | a4\n  5507: a5 = a5 << 0x10\n  5510: a2 = a2 << 0x18\n  5513: a2 = a2 | a5\n  5516: a2 = a2 | a3\n  5519: a2 = a2 << 0x20\n  5522: a3 = a2 | a1\n  5525: a1 = u8 [a0 + 0x9]\n  5528: a2 = u8 [a0 + 0x8]\n  5531: a4 = u8 [a0 + 0xa]\n  5534: a5 = u8 [a0 + 0xb]\n  5537: a1 = a1 << 0x8\n  5540: a1 = a1 | a2\n  5543: a4 = a4 << 0x10\n  5546: a5 = a5 << 0x18\n  5549: a4 = a4 | a5\n  5552: a1 = a1 | a4\n  5555: a2 = u8 [a0 + 0xd]\n  5558: a4 = u8 [a0 + 0xc]\n  5561: a5 = u8 [a0 + 0xe]\n  5564: a0 = u8 [a0 + 0xf]\n  5567: a2 = a2 << 0x8\n  5570: a2 = a2 | a4\n  5573: a5 = a5 << 0x10\n  5576: a0 = a0 << 0x18\n  5579: a0 = a0 | a5\n  5582: a0 = a0 | a2\n  5585: a0 = a0 << 0x20\n  5588: a0 = a0 | a1\n  5591: a1 = reverse a0\n  5593: a0 = reverse a3\n  5595: a2 = reverse t1\n  5597: a3 = reverse t0\n  5599: a2 = a2 | a3\n  5602: a3 = a0 | a1\n  5605: a3 = a3 | a2\n  5608: a3 = a3 >> 0x20\n  5611: a1 = a1 | a2\n  5614: a1 = a1 << 0x20\n  5617: a1 = a1 | a3\n  5620: jump @110 if a1 == 0\n      : @107 (gas: 1)\n  5623: trap\n      : @108 (gas: 3)\n  5624: a0 = 0\n  5626: a1 = 0\n  5628: ra = 94, jump @0\n      : @109 [@dyn 47] (gas: 7)\n  5633: i32 a1 = a0 + 0\n  5635: a0 = 0x1\n  5638: a2 = 0\n  5640: ecalli 12 // 'seal_return'\n  5642: i32 a0 = a0 + 0\n  5644: ra = 0x60\n  5647: jump @0\n      : @110 (gas: 2)\n  5650: i32 a0 = a0 + 0\n  5652: ra = 96, jump @0\n      : @111 [@dyn 48] (gas: 6)\n  5657: i32 a1 = a0 + 0\n  5659: a0 = 0\n  5661: a2 = 0\n  5663: ra = 0x62\n  5666: ecalli 12 // 'seal_return'\n  5668: fallthrough\n      : @112 [@dyn 49] (gas: 19)\n  5669: t0 = u64 [a0 + 0x18]\n  5672: t1 = u64 [a1 + 0x18]\n  5675: a4 = u64 [a0 + 0x10]\n  5678: a5 = u64 [a0 + 0x8]\n  5681: a2 = u64 [a1 + 0x8]\n  5684: t2 = u64 [a0]\n  5686: a3 = u64 [a1]\n  5688: a1 = u64 [a1 + 0x10]\n  5691: a0 = a2 ^ a5\n  5694: a2 = a2 <u a5\n  5697: a3 = a3 <u t2\n  5700: a3 = a2 if a0 != 0\n  5703: a0 = a1 - a4\n  5706: a0 = a0 <u a3\n  5709: a1 = a1 <u a4\n  5712: a2 = t1 - t0\n  5715: a2 = a2 - a1\n  5718: a2 = a2 - a0\n  5721: jump @114 if a2 <s 0\n      : @113 (gas: 1)\n  5724: ret\n      : @114 (gas: 5)\n  5726: sp = sp + 0xfffffffffffffff8\n  5729: u64 [sp] = ra\n  5731: a0 = 0\n  5733: a1 = 0\n  5735: ra = 100, jump @0\n      : @115 [@dyn 50] (gas: 6)\n  5740: i32 a1 = a0 + 0\n  5742: a0 = 0x1\n  5745: a2 = 0\n  5747: ra = 0x66\n  5750: ecalli 12 // 'seal_return'\n  5752: fallthrough\n      : @116 [@dyn 51] (gas: 236)\n  5753: sp = sp + 0xffffffffffffffa0\n  5756: u64 [sp + 0x58] = ra\n  5759: u64 [sp + 0x50] = s0\n  5762: u64 [sp + 0x48] = s1\n  5765: u64 [sp] = a0\n  5767: t0 = u64 [a1]\n  5769: t1 = u64 [a2]\n  5771: a0 = u64 [a2 + 0x8]\n  5774: a3 = u64 [a2 + 0x10]\n  5777: a4 = u64 [a1 + 0x18]\n  5780: s0 = u64 [a1 + 0x10]\n  5783: a2 = u64 [a2 + 0x18]\n  5786: a1 = u64 [a1 + 0x8]\n  5789: t2 = a4 >u 0\n  5791: s1 = s0 >u 0\n  5793: s1 = t2 if a4 != 0\n  5796: ra = a1 >u 0\n  5798: a5 = t0 <u 0x100\n  5802: t2 = a5 ^ 0x1\n  5805: t2 = ra if a1 != 0\n  5808: a4 = a4 | s0\n  5811: t2 = s1 if a4 != 0\n  5814: u8 [sp + 71] = 0\n  5817: u8 [sp + 70] = 0\n  5820: u8 [sp + 69] = 0\n  5823: u8 [sp + 68] = 0\n  5826: u8 [sp + 67] = 0\n  5829: u8 [sp + 66] = 0\n  5832: u8 [sp + 65] = 0\n  5835: u8 [sp + 64] = 0\n  5838: u8 [sp + 63] = 0\n  5841: u8 [sp + 62] = 0\n  5844: u8 [sp + 61] = 0\n  5847: u8 [sp + 60] = 0\n  5850: u8 [sp + 59] = 0\n  5853: u8 [sp + 58] = 0\n  5856: u8 [sp + 57] = 0\n  5859: u8 [sp + 56] = 0\n  5862: u8 [sp + 55] = 0\n  5865: u8 [sp + 54] = 0\n  5868: u8 [sp + 53] = 0\n  5871: u8 [sp + 52] = 0\n  5874: u8 [sp + 51] = 0\n  5877: u8 [sp + 50] = 0\n  5880: u8 [sp + 49] = 0\n  5883: u8 [sp + 48] = 0\n  5886: u8 [sp + 47] = 0\n  5889: u8 [sp + 46] = 0\n  5892: u8 [sp + 45] = 0\n  5895: u8 [sp + 44] = 0\n  5898: u8 [sp + 43] = 0\n  5901: u8 [sp + 42] = 0\n  5904: u8 [sp + 41] = 0\n  5907: u8 [sp + 40] = 0\n  5910: u8 [sp + 0x20] = a2\n  5913: u8 [sp + 0x18] = a3\n  5916: u8 [sp + 0x10] = a0\n  5919: u8 [sp + 0x8] = t1\n  5922: a1 = a2 >> 0x38\n  5925: u8 [sp + 0x27] = a1\n  5928: a1 = a2 >> 0x30\n  5931: u8 [sp + 0x26] = a1\n  5934: a1 = a2 >> 0x28\n  5937: u8 [sp + 0x25] = a1\n  5940: a1 = a2 >> 0x20\n  5943: u8 [sp + 0x24] = a1\n  5946: a1 = a2 >> 0x18\n  5949: u8 [sp + 0x23] = a1\n  5952: a1 = a2 >> 0x10\n  5955: u8 [sp + 0x22] = a1\n  5958: a2 = a2 >> 0x8\n  5961: u8 [sp + 0x21] = a2\n  5964: a1 = a3 >> 0x38\n  5967: u8 [sp + 0x1f] = a1\n  5970: a1 = a3 >> 0x30\n  5973: u8 [sp + 0x1e] = a1\n  5976: a1 = a3 >> 0x28\n  5979: u8 [sp + 0x1d] = a1\n  5982: a1 = a3 >> 0x20\n  5985: u8 [sp + 0x1c] = a1\n  5988: a1 = a3 >> 0x18\n  5991: u8 [sp + 0x1b] = a1\n  5994: a1 = a3 >> 0x10\n  5997: u8 [sp + 0x1a] = a1\n  6000: a3 = a3 >> 0x8\n  6003: u8 [sp + 0x19] = a3\n  6006: a1 = a0 >> 0x38\n  6009: u8 [sp + 0x17] = a1\n  6012: a1 = a0 >> 0x30\n  6015: u8 [sp + 0x16] = a1\n  6018: a1 = a0 >> 0x28\n  6021: u8 [sp + 0x15] = a1\n  6024: a1 = a0 >> 0x20\n  6027: u8 [sp + 0x14] = a1\n  6030: a1 = a0 >> 0x18\n  6033: u8 [sp + 0x13] = a1\n  6036: a1 = a0 >> 0x10\n  6039: u8 [sp + 0x12] = a1\n  6042: a0 = a0 >> 0x8\n  6045: u8 [sp + 0x11] = a0\n  6048: a0 = t1 >> 0x38\n  6051: u8 [sp + 0xf] = a0\n  6054: a0 = t1 >> 0x30\n  6057: u8 [sp + 0xe] = a0\n  6060: a0 = t1 >> 0x28\n  6063: u8 [sp + 0xd] = a0\n  6066: a0 = t1 >> 0x20\n  6069: u8 [sp + 0xc] = a0\n  6072: a0 = t1 >> 0x18\n  6075: u8 [sp + 0xb] = a0\n  6078: a0 = t1 >> 0x10\n  6081: u8 [sp + 0xa] = a0\n  6084: a0 = t1 >> 0x8\n  6087: u8 [sp + 0x9] = a0\n  6090: a0 = t0 << 0x38\n  6093: a0 = a0 >> 0x3b\n  6096: a2 = sp + 0x8\n  6099: a2 = a2 + a0\n  6102: a0 = u8 [a2 + 0x11]\n  6105: a1 = u8 [a2 + 0x10]\n  6108: a3 = u8 [a2 + 0x12]\n  6111: a4 = u8 [a2 + 0x13]\n  6114: a0 = a0 << 0x8\n  6117: a0 = a0 | a1\n  6120: a3 = a3 << 0x10\n  6123: a4 = a4 << 0x18\n  6126: a3 = a3 | a4\n  6129: a0 = a0 | a3\n  6132: a1 = u8 [a2 + 0x15]\n  6135: a3 = u8 [a2 + 0x14]\n  6138: a4 = u8 [a2 + 0x16]\n  6141: a5 = u8 [a2 + 0x17]\n  6144: a1 = a1 << 0x8\n  6147: a1 = a1 | a3\n  6150: a4 = a4 << 0x10\n  6153: a5 = a5 << 0x18\n  6156: a4 = a4 | a5\n  6159: a1 = a1 | a4\n  6162: a1 = a1 << 0x20\n  6165: ra = a1 | a0\n  6168: a3 = t0 & 0x7\n  6171: a1 = ra >> a3\n  6174: a0 = u8 [a2 + 0x19]\n  6177: a4 = u8 [a2 + 0x18]\n  6180: s1 = u8 [a2 + 0x1a]\n  6183: s0 = u8 [a2 + 0x1b]\n  6186: a0 = a0 << 0x8\n  6189: a0 = a0 | a4\n  6192: s1 = s1 << 0x10\n  6195: s0 = s0 << 0x18\n  6198: s0 = s0 | s1\n  6201: a0 = a0 | s0\n  6204: a4 = u8 [a2 + 0x1d]\n  6207: s1 = u8 [a2 + 0x1c]\n  6210: s0 = u8 [a2 + 0x1e]\n  6213: a5 = u8 [a2 + 0x1f]\n  6216: a4 = a4 << 0x8\n  6219: a4 = a4 | s1\n  6222: s0 = s0 << 0x10\n  6225: a5 = a5 << 0x18\n  6228: a5 = a5 | s0\n  6231: a4 = a4 | a5\n  6234: a4 = a4 << 0x20\n  6237: t0 = a4 | a0\n  6240: a0 = t0 << 0x1\n  6243: t1 = a3 ^ 0x3f\n  6246: a4 = a0 << t1\n  6249: a4 = a4 | a1\n  6252: a0 = u8 [a2 + 0x9]\n  6255: a1 = u8 [a2 + 0x8]\n  6258: a5 = u8 [a2 + 0xa]\n  6261: s0 = u8 [a2 + 0xb]\n  6264: a0 = a0 << 0x8\n  6267: a0 = a0 | a1\n  6270: a5 = a5 << 0x10\n  6273: s0 = s0 << 0x18\n  6276: a5 = a5 | s0\n  6279: a0 = a0 | a5\n  6282: a1 = u8 [a2 + 0xd]\n  6285: a5 = u8 [a2 + 0xc]\n  6288: s0 = u8 [a2 + 0xe]\n  6291: s1 = u8 [a2 + 0xf]\n  6294: a1 = a1 << 0x8\n  6297: a1 = a1 | a5\n  6300: s0 = s0 << 0x10\n  6303: s1 = s1 << 0x18\n  6306: s0 = s0 | s1\n  6309: a1 = a1 | s0\n  6312: a1 = a1 << 0x20\n  6315: a1 = a1 | a0\n  6318: a0 = a1 >> a3\n  6321: ra = ra << 0x1\n  6324: a5 = a3 ^ 0xffffffffffffffff\n  6327: a5 = ra << a5\n  6330: ra = a0 | a5\n  6333: a0 = u8 [a2 + 0x1]\n  6336: s0 = u8 [a2]\n  6338: s1 = u8 [a2 + 0x2]\n  6341: a5 = u8 [a2 + 0x3]\n  6344: a0 = a0 << 0x8\n  6347: a0 = a0 | s0\n  6350: s1 = s1 << 0x10\n  6353: a5 = a5 << 0x18\n  6356: a5 = a5 | s1\n  6359: a0 = a0 | a5\n  6362: a5 = u8 [a2 + 0x5]\n  6365: s0 = u8 [a2 + 0x4]\n  6368: s1 = u8 [a2 + 0x6]\n  6371: a2 = u8 [a2 + 0x7]\n  6374: a5 = a5 << 0x8\n  6377: a5 = a5 | s0\n  6380: s1 = s1 << 0x10\n  6383: a2 = a2 << 0x18\n  6386: a2 = a2 | s1\n  6389: a2 = a2 | a5\n  6392: a2 = a2 << 0x20\n  6395: a0 = a0 | a2\n  6398: a0 = a0 >> a3\n  6401: a1 = a1 << 0x1\n  6404: a1 = a1 << t1\n  6407: a0 = a0 | a1\n  6410: a1 = t0 >> a3\n  6413: a0 = 0 if t2 != 0\n  6415: ra = 0 if t2 != 0\n  6417: a4 = 0 if t2 != 0\n  6419: a1 = 0 if t2 != 0\n  6421: a2 = u64 [sp]\n  6423: u64 [a2 + 0x18] = a1\n  6426: u64 [a2 + 0x10] = a4\n  6429: u64 [a2 + 0x8] = ra\n  6432: u64 [a2] = a0\n  6434: ra = u64 [sp + 0x58]\n  6437: s0 = u64 [sp + 0x50]\n  6440: s1 = u64 [sp + 0x48]\n  6443: sp = sp + 0x60\n  6446: ret\n      : @117 (gas: 8)\n  6448: a0 = u64 [sp + 0x30]\n  6451: a1 = u64 [sp + 0x38]\n  6454: a2 = u64 [sp + 0x28]\n  6457: a3 = u64 [sp + 0x20]\n  6460: a1 = a1 | a2\n  6463: a0 = a0 | a3\n  6466: a0 = a0 | a1\n  6469: jump @122 if a0 != 0\n      : @118 (gas: 2)\n  6473: a0 = i32 [0x20004]\n  6478: jump @122 if a0 <=u 3\n      : @119 (gas: 24)\n  6483: u64 [sp + 88] = 0\n  6486: u64 [sp + 80] = 0\n  6489: u64 [sp + 72] = 0\n  6492: u64 [sp + 64] = 0x1\n  6496: u64 [sp + 120] = 0\n  6499: u64 [sp + 112] = 0\n  6502: u64 [sp + 104] = 0\n  6505: u64 [sp + 96] = 0\n  6508: u32 [sp + 128] = 0x20\n  6513: i32 a1 = sp + 0x40\n  6516: i32 a3 = sp + 0x60\n  6519: i32 a4 = sp + 0x80\n  6523: a2 = 0xffffffffffffffff\n  6526: a0 = 0\n  6528: ecalli 7 // 'get_storage'\n  6530: a0 = u64 [sp + 0x70]\n  6533: u64 [sp + 0x8] = a0\n  6536: a0 = u64 [sp + 0x68]\n  6539: u64 [sp + 0x10] = a0\n  6542: a0 = u64 [sp + 0x60]\n  6545: u64 [sp + 0x18] = a0\n  6548: a0 = 0x40\n  6551: a1 = 0x20\n  6554: ra = 104, jump @0\n      : @120 [@dyn 52] (gas: 100)\n  6559: a1 = u8 [a0 + 0x11]\n  6562: a2 = u8 [a0 + 0x10]\n  6565: a3 = u8 [a0 + 0x12]\n  6568: a4 = u8 [a0 + 0x13]\n  6571: a1 = a1 << 0x8\n  6574: a1 = a1 | a2\n  6577: a3 = a3 << 0x10\n  6580: a4 = a4 << 0x18\n  6583: a3 = a3 | a4\n  6586: a1 = a1 | a3\n  6589: a2 = u8 [a0 + 0x15]\n  6592: a3 = u8 [a0 + 0x14]\n  6595: a4 = u8 [a0 + 0x16]\n  6598: a5 = u8 [a0 + 0x17]\n  6601: a2 = a2 << 0x8\n  6604: a2 = a2 | a3\n  6607: a4 = a4 << 0x10\n  6610: a5 = a5 << 0x18\n  6613: a4 = a4 | a5\n  6616: a2 = a2 | a4\n  6619: a2 = a2 << 0x20\n  6622: t0 = a2 | a1\n  6625: a2 = u8 [a0 + 0x1]\n  6628: a3 = u8 [a0]\n  6630: a4 = u8 [a0 + 0x2]\n  6633: a5 = u8 [a0 + 0x3]\n  6636: a2 = a2 << 0x8\n  6639: a2 = a2 | a3\n  6642: a4 = a4 << 0x10\n  6645: a5 = a5 << 0x18\n  6648: a4 = a4 | a5\n  6651: a2 = a2 | a4\n  6654: a3 = u8 [a0 + 0x5]\n  6657: a4 = u8 [a0 + 0x4]\n  6660: a5 = u8 [a0 + 0x6]\n  6663: s1 = u8 [a0 + 0x7]\n  6666: a3 = a3 << 0x8\n  6669: a3 = a3 | a4\n  6672: a5 = a5 << 0x10\n  6675: s1 = s1 << 0x18\n  6678: a5 = a5 | s1\n  6681: a3 = a3 | a5\n  6684: a3 = a3 << 0x20\n  6687: a2 = a2 | a3\n  6690: a3 = u8 [a0 + 0x19]\n  6693: a4 = u8 [a0 + 0x18]\n  6696: a5 = u8 [a0 + 0x1a]\n  6699: s1 = u8 [a0 + 0x1b]\n  6702: a3 = a3 << 0x8\n  6705: a3 = a3 | a4\n  6708: a5 = a5 << 0x10\n  6711: s1 = s1 << 0x18\n  6714: a5 = a5 | s1\n  6717: a3 = a3 | a5\n  6720: a4 = u8 [a0 + 0x1d]\n  6723: a5 = u8 [a0 + 0x1c]\n  6726: s1 = u8 [a0 + 0x1e]\n  6729: a1 = u8 [a0 + 0x1f]\n  6732: a4 = a4 << 0x8\n  6735: a4 = a4 | a5\n  6738: s1 = s1 << 0x10\n  6741: a1 = a1 << 0x18\n  6744: a1 = a1 | s1\n  6747: a1 = a1 | a4\n  6750: a1 = a1 << 0x20\n  6753: a3 = a3 | a1\n  6756: a1 = u8 [a0 + 0x9]\n  6759: a4 = u8 [a0 + 0x8]\n  6762: a5 = u8 [a0 + 0xa]\n  6765: s1 = u8 [a0 + 0xb]\n  6768: a1 = a1 << 0x8\n  6771: a1 = a1 | a4\n  6774: a5 = a5 << 0x10\n  6777: s1 = s1 << 0x18\n  6780: a5 = a5 | s1\n  6783: a1 = a1 | a5\n  6786: a4 = u8 [a0 + 0xd]\n  6789: a5 = u8 [a0 + 0xc]\n  6792: s1 = u8 [a0 + 0xe]\n  6795: a0 = u8 [a0 + 0xf]\n  6798: a4 = a4 << 0x8\n  6801: a4 = a4 | a5\n  6804: s1 = s1 << 0x10\n  6807: a0 = a0 << 0x18\n  6810: a0 = a0 | s1\n  6813: a0 = a0 | a4\n  6816: a0 = a0 << 0x20\n  6819: a0 = a0 | a1\n  6822: a1 = reverse a0\n  6824: a0 = reverse a3\n  6826: a2 = reverse a2\n  6828: a3 = reverse t0\n  6830: a2 = a2 | a3\n  6833: a3 = a0 | a1\n  6836: a3 = a3 | a2\n  6839: a3 = a3 >> 0x20\n  6842: a1 = a1 | a2\n  6845: a1 = a1 << 0x20\n  6848: a1 = a1 | a3\n  6851: jump @124 if a1 == 0\n      : @121 (gas: 1)\n  6854: trap\n      : @122 (gas: 3)\n  6855: a0 = 0\n  6857: a1 = 0\n  6859: ra = 106, jump @0\n      : @123 [@dyn 53] (gas: 5)\n  6864: i32 a1 = a0 + 0\n  6866: a0 = 0x1\n  6869: a2 = 0\n  6871: ecalli 12 // 'seal_return'\n  6873: fallthrough\n      : @124 (gas: 7)\n  6874: a1 = u64 [sp + 0x8]\n  6877: a1 = a1 << 0x20\n  6880: s1 = a1 >> 0x20\n  6883: i32 a0 = a0 + 0\n  6885: u64 [sp + 0x8] = a0\n  6888: a1 = 0x20\n  6891: ra = 108, jump @0\n      : @125 [@dyn 54] (gas: 58)\n  6896: a1 = reverse s1\n  6898: a2 = u64 [sp + 0x10]\n  6901: a2 = reverse a2\n  6903: a3 = u64 [sp + 0x18]\n  6906: a3 = reverse a3\n  6908: a4 = a3 >> 0x38\n  6911: u8 [a0 + 0x1f] = a4\n  6914: a4 = a3 >> 0x30\n  6917: u8 [a0 + 0x1e] = a4\n  6920: a4 = a3 >> 0x28\n  6923: u8 [a0 + 0x1d] = a4\n  6926: a4 = a3 >> 0x20\n  6929: u8 [a0 + 0x1c] = a4\n  6932: a4 = a3 >> 0x18\n  6935: u8 [a0 + 0x1b] = a4\n  6938: a4 = a3 >> 0x10\n  6941: u8 [a0 + 0x1a] = a4\n  6944: a4 = a3 >> 0x8\n  6947: u8 [a0 + 0x19] = a4\n  6950: u8 [a0 + 0x18] = a3\n  6953: u8 [a0 + 0x10] = a2\n  6956: u8 [a0 + 11] = 0\n  6959: u8 [a0 + 10] = 0\n  6962: u8 [a0 + 9] = 0\n  6965: u8 [a0 + 7] = 0\n  6968: u8 [a0 + 6] = 0\n  6971: u8 [a0 + 5] = 0\n  6974: u8 [a0 + 4] = 0\n  6977: u8 [a0 + 3] = 0\n  6980: u8 [a0 + 2] = 0\n  6983: u8 [a0 + 1] = 0\n  6986: u8 [a0 + 0] = 0\n  6988: a3 = a2 >> 0x38\n  6991: u8 [a0 + 0x17] = a3\n  6994: a3 = a2 >> 0x30\n  6997: u8 [a0 + 0x16] = a3\n  7000: a3 = a2 >> 0x28\n  7003: u8 [a0 + 0x15] = a3\n  7006: a3 = a2 >> 0x20\n  7009: u8 [a0 + 0x14] = a3\n  7012: a3 = a2 >> 0x18\n  7015: u8 [a0 + 0x13] = a3\n  7018: a3 = a2 >> 0x10\n  7021: u8 [a0 + 0x12] = a3\n  7024: a2 = a2 >> 0x8\n  7027: u8 [a0 + 0x11] = a2\n  7030: u8 [a0 + 0x8] = a1\n  7033: a2 = a1 >> 0x38\n  7036: u8 [a0 + 0xf] = a2\n  7039: a2 = a1 >> 0x30\n  7042: u8 [a0 + 0xe] = a2\n  7045: a2 = a1 >> 0x28\n  7048: u8 [a0 + 0xd] = a2\n  7051: a1 = a1 >> 0x20\n  7054: u8 [a0 + 0xc] = a1\n  7057: a1 = 0x20\n  7060: a0 = u64 [sp + 0x8]\n  7063: ra = 110, jump @0\n      : @126 [@dyn 55] (gas: 6)\n  7068: i32 a1 = a0 + 0\n  7070: a2 = 0x20\n  7073: a0 = 0\n  7075: ra = 0x70\n  7078: ecalli 12 // 'seal_return'\n  7080: fallthrough\n      : @127 [@dyn 56] (gas: 194)\n  7081: sp = sp + 0xffffffffffffffa0\n  7084: u64 [sp + 0x58] = ra\n  7087: u64 [sp + 0x50] = s0\n  7090: u64 [sp + 0x48] = s1\n  7093: u64 [sp] = a0\n  7095: t1 = u64 [a1]\n  7097: ra = u64 [a1 + 0x8]\n  7100: a4 = u64 [a1 + 0x10]\n  7103: a1 = u64 [a1 + 0x18]\n  7106: t0 = u64 [a2]\n  7108: a3 = u64 [a2 + 0x8]\n  7111: t2 = u64 [a2 + 0x18]\n  7114: a2 = u64 [a2 + 0x10]\n  7117: s0 = t0 >> 0x3d\n  7120: s1 = a3 << 0x3\n  7123: s0 = s0 | s1\n  7126: a3 = a3 >> 0x3d\n  7129: s1 = a2 << 0x3\n  7132: a3 = a3 | s1\n  7135: a2 = a2 >> 0x3d\n  7138: t2 = t2 << 0x3\n  7141: s1 = t2 | a2\n  7144: t2 = t0 << 0x3\n  7147: a2 = s1 >u 0\n  7149: a5 = a3 >u 0\n  7151: a5 = a2 if s1 != 0\n  7154: a0 = s0 >u 0\n  7156: a2 = t2 <u 0x100\n  7160: t2 = a2 ^ 0x1\n  7163: t2 = a0 if s0 != 0\n  7166: a3 = a3 | s1\n  7169: t2 = a5 if a3 != 0\n  7172: u8 [sp + 71] = 0\n  7175: u8 [sp + 70] = 0\n  7178: u8 [sp + 69] = 0\n  7181: u8 [sp + 68] = 0\n  7184: u8 [sp + 67] = 0\n  7187: u8 [sp + 66] = 0\n  7190: u8 [sp + 65] = 0\n  7193: u8 [sp + 64] = 0\n  7196: u8 [sp + 63] = 0\n  7199: u8 [sp + 62] = 0\n  7202: u8 [sp + 61] = 0\n  7205: u8 [sp + 60] = 0\n  7208: u8 [sp + 59] = 0\n  7211: u8 [sp + 58] = 0\n  7214: u8 [sp + 57] = 0\n  7217: u8 [sp + 56] = 0\n  7220: u8 [sp + 55] = 0\n  7223: u8 [sp + 54] = 0\n  7226: u8 [sp + 53] = 0\n  7229: u8 [sp + 52] = 0\n  7232: u8 [sp + 51] = 0\n  7235: u8 [sp + 50] = 0\n  7238: u8 [sp + 49] = 0\n  7241: u8 [sp + 48] = 0\n  7244: u8 [sp + 47] = 0\n  7247: u8 [sp + 46] = 0\n  7250: u8 [sp + 45] = 0\n  7253: u8 [sp + 44] = 0\n  7256: u8 [sp + 43] = 0\n  7259: u8 [sp + 42] = 0\n  7262: u8 [sp + 41] = 0\n  7265: u8 [sp + 40] = 0\n  7268: u8 [sp + 0x20] = a1\n  7271: u8 [sp + 0x18] = a4\n  7274: u8 [sp + 0x10] = ra\n  7277: u8 [sp + 0x8] = t1\n  7280: a0 = a1 >> 0x38\n  7283: u8 [sp + 0x27] = a0\n  7286: a0 = a1 >> 0x30\n  7289: u8 [sp + 0x26] = a0\n  7292: a0 = a1 >> 0x28\n  7295: u8 [sp + 0x25] = a0\n  7298: a0 = a1 >> 0x20\n  7301: u8 [sp + 0x24] = a0\n  7304: a0 = a1 >> 0x18\n  7307: u8 [sp + 0x23] = a0\n  7310: a0 = a1 >> 0x10\n  7313: u8 [sp + 0x22] = a0\n  7316: a1 = a1 >> 0x8\n  7319: u8 [sp + 0x21] = a1\n  7322: a0 = a4 >> 0x38\n  7325: u8 [sp + 0x1f] = a0\n  7328: a0 = a4 >> 0x30\n  7331: u8 [sp + 0x1e] = a0\n  7334: a0 = a4 >> 0x28\n  7337: u8 [sp + 0x1d] = a0\n  7340: a0 = a4 >> 0x20\n  7343: u8 [sp + 0x1c] = a0\n  7346: a0 = a4 >> 0x18\n  7349: u8 [sp + 0x1b] = a0\n  7352: a0 = a4 >> 0x10\n  7355: u8 [sp + 0x1a] = a0\n  7358: a4 = a4 >> 0x8\n  7361: u8 [sp + 0x19] = a4\n  7364: a0 = ra >> 0x38\n  7367: u8 [sp + 0x17] = a0\n  7370: a0 = ra >> 0x30\n  7373: u8 [sp + 0x16] = a0\n  7376: a0 = ra >> 0x28\n  7379: u8 [sp + 0x15] = a0\n  7382: a0 = ra >> 0x20\n  7385: u8 [sp + 0x14] = a0\n  7388: a0 = ra >> 0x18\n  7391: u8 [sp + 0x13] = a0\n  7394: a0 = ra >> 0x10\n  7397: u8 [sp + 0x12] = a0\n  7400: a0 = ra >> 0x8\n  7403: u8 [sp + 0x11] = a0\n  7406: a0 = t1 >> 0x38\n  7409: u8 [sp + 0xf] = a0\n  7412: a0 = t1 >> 0x30\n  7415: u8 [sp + 0xe] = a0\n  7418: a0 = t1 >> 0x28\n  7421: u8 [sp + 0xd] = a0\n  7424: a0 = t1 >> 0x20\n  7427: u8 [sp + 0xc] = a0\n  7430: a0 = t1 >> 0x18\n  7433: u8 [sp + 0xb] = a0\n  7436: a0 = t1 >> 0x10\n  7439: u8 [sp + 0xa] = a0\n  7442: a0 = t1 >> 0x8\n  7445: u8 [sp + 0x9] = a0\n  7448: a1 = t0 & 0x1f\n  7451: a0 = sp + 0x8\n  7454: a1 = a1 + a0\n  7457: a0 = u8 [a1 + 0x9]\n  7460: a2 = u8 [a1 + 0x8]\n  7463: a3 = u8 [a1 + 0xa]\n  7466: a4 = u8 [a1 + 0xb]\n  7469: a0 = a0 << 0x8\n  7472: a0 = a0 | a2\n  7475: a3 = a3 << 0x10\n  7478: a4 = a4 << 0x18\n  7481: a3 = a3 | a4\n  7484: a0 = a0 | a3\n  7487: a2 = u8 [a1 + 0xd]\n  7490: a3 = u8 [a1 + 0xc]\n  7493: a4 = u8 [a1 + 0xe]\n  7496: a5 = u8 [a1 + 0xf]\n  7499: a2 = a2 << 0x8\n  7502: a2 = a2 | a3\n  7505: a4 = a4 << 0x10\n  7508: a5 = a5 << 0x18\n  7511: a4 = a4 | a5\n  7514: a2 = a2 | a4\n  7517: a2 = a2 << 0x20\n  7520: a3 = a2 | a0\n  7523: a0 = u8 [a1 + 0x1]\n  7526: a2 = u8 [a1]\n  7528: a4 = u8 [a1 + 0x2]\n  7531: a5 = u8 [a1 + 0x3]\n  7534: a0 = a0 << 0x8\n  7537: a0 = a0 | a2\n  7540: a4 = a4 << 0x10\n  7543: a5 = a5 << 0x18\n  7546: a4 = a4 | a5\n  7549: a0 = a0 | a4\n  7552: a2 = u8 [a1 + 0x5]\n  7555: a4 = u8 [a1 + 0x4]\n  7558: a5 = u8 [a1 + 0x6]\n  7561: s1 = u8 [a1 + 0x7]\n  7564: a2 = a2 << 0x8\n  7567: a2 = a2 | a4\n  7570: a5 = a5 << 0x10\n  7573: s1 = s1 << 0x18\n  7576: a5 = a5 | s1\n  7579: a2 = a2 | a5\n  7582: a2 = a2 << 0x20\n  7585: a0 = a0 | a2\n  7588: a2 = u8 [a1 + 0x11]\n  7591: a4 = u8 [a1 + 0x10]\n  7594: a5 = u8 [a1 + 0x12]\n  7597: a1 = u8 [a1 + 0x13]\n  7600: a2 = a2 << 0x8\n  7603: a2 = a2 | a4\n  7606: a5 = a5 << 0x10\n  7609: a1 = a1 << 0x18\n  7612: a1 = a1 | a5\n  7615: a1 = a1 | a2\n  7618: a0 = 0 if t2 != 0\n  7620: a3 = 0 if t2 != 0\n  7622: a1 = 0 if t2 != 0\n  7624: a2 = u64 [sp]\n  7626: u64 [a2 + 24] = 0\n  7629: u64 [a2 + 0x10] = a1\n  7632: u64 [a2 + 0x8] = a3\n  7635: u64 [a2] = a0\n  7637: ra = u64 [sp + 0x58]\n  7640: s0 = u64 [sp + 0x50]\n  7643: s1 = u64 [sp + 0x48]\n  7646: sp = sp + 0x60\n  7649: ret\n      : @128 (gas: 8)\n  7651: a0 = u64 [sp + 0x30]\n  7654: a1 = u64 [sp + 0x38]\n  7657: a2 = u64 [sp + 0x28]\n  7660: a3 = u64 [sp + 0x20]\n  7663: a1 = a1 | a2\n  7666: a0 = a0 | a3\n  7669: a0 = a0 | a1\n  7672: jump @133 if a0 != 0\n      : @129 (gas: 2)\n  7676: a0 = i32 [0x20004]\n  7681: jump @133 if a0 <=u 3\n      : @130 (gas: 24)\n  7686: u64 [sp + 88] = 0\n  7689: u64 [sp + 80] = 0\n  7692: u64 [sp + 72] = 0\n  7695: u64 [sp + 64] = 0x2\n  7699: u64 [sp + 120] = 0\n  7702: u64 [sp + 112] = 0\n  7705: u64 [sp + 104] = 0\n  7708: u64 [sp + 96] = 0\n  7711: u32 [sp + 128] = 0x20\n  7716: i32 a1 = sp + 0x40\n  7719: i32 a3 = sp + 0x60\n  7722: i32 a4 = sp + 0x80\n  7726: a2 = 0xffffffffffffffff\n  7729: a0 = 0\n  7731: ecalli 7 // 'get_storage'\n  7733: a0 = u64 [sp + 0x70]\n  7736: u64 [sp + 0x8] = a0\n  7739: a0 = u64 [sp + 0x68]\n  7742: u64 [sp + 0x10] = a0\n  7745: a0 = u64 [sp + 0x60]\n  7748: u64 [sp + 0x18] = a0\n  7751: a0 = 0x40\n  7754: a1 = 0x20\n  7757: ra = 114, jump @0\n      : @131 [@dyn 57] (gas: 100)\n  7762: a1 = u8 [a0 + 0x11]\n  7765: a2 = u8 [a0 + 0x10]\n  7768: a3 = u8 [a0 + 0x12]\n  7771: a4 = u8 [a0 + 0x13]\n  7774: a1 = a1 << 0x8\n  7777: a1 = a1 | a2\n  7780: a3 = a3 << 0x10\n  7783: a4 = a4 << 0x18\n  7786: a3 = a3 | a4\n  7789: a1 = a1 | a3\n  7792: a2 = u8 [a0 + 0x15]\n  7795: a3 = u8 [a0 + 0x14]\n  7798: a4 = u8 [a0 + 0x16]\n  7801: a5 = u8 [a0 + 0x17]\n  7804: a2 = a2 << 0x8\n  7807: a2 = a2 | a3\n  7810: a4 = a4 << 0x10\n  7813: a5 = a5 << 0x18\n  7816: a4 = a4 | a5\n  7819: a2 = a2 | a4\n  7822: a2 = a2 << 0x20\n  7825: t0 = a2 | a1\n  7828: a2 = u8 [a0 + 0x1]\n  7831: a3 = u8 [a0]\n  7833: a4 = u8 [a0 + 0x2]\n  7836: a5 = u8 [a0 + 0x3]\n  7839: a2 = a2 << 0x8\n  7842: a2 = a2 | a3\n  7845: a4 = a4 << 0x10\n  7848: a5 = a5 << 0x18\n  7851: a4 = a4 | a5\n  7854: a2 = a2 | a4\n  7857: a3 = u8 [a0 + 0x5]\n  7860: a4 = u8 [a0 + 0x4]\n  7863: a5 = u8 [a0 + 0x6]\n  7866: s1 = u8 [a0 + 0x7]\n  7869: a3 = a3 << 0x8\n  7872: a3 = a3 | a4\n  7875: a5 = a5 << 0x10\n  7878: s1 = s1 << 0x18\n  7881: a5 = a5 | s1\n  7884: a3 = a3 | a5\n  7887: a3 = a3 << 0x20\n  7890: a2 = a2 | a3\n  7893: a3 = u8 [a0 + 0x19]\n  7896: a4 = u8 [a0 + 0x18]\n  7899: a5 = u8 [a0 + 0x1a]\n  7902: s1 = u8 [a0 + 0x1b]\n  7905: a3 = a3 << 0x8\n  7908: a3 = a3 | a4\n  7911: a5 = a5 << 0x10\n  7914: s1 = s1 << 0x18\n  7917: a5 = a5 | s1\n  7920: a3 = a3 | a5\n  7923: a4 = u8 [a0 + 0x1d]\n  7926: a5 = u8 [a0 + 0x1c]\n  7929: s1 = u8 [a0 + 0x1e]\n  7932: a1 = u8 [a0 + 0x1f]\n  7935: a4 = a4 << 0x8\n  7938: a4 = a4 | a5\n  7941: s1 = s1 << 0x10\n  7944: a1 = a1 << 0x18\n  7947: a1 = a1 | s1\n  7950: a1 = a1 | a4\n  7953: a1 = a1 << 0x20\n  7956: a3 = a3 | a1\n  7959: a1 = u8 [a0 + 0x9]\n  7962: a4 = u8 [a0 + 0x8]\n  7965: a5 = u8 [a0 + 0xa]\n  7968: s1 = u8 [a0 + 0xb]\n  7971: a1 = a1 << 0x8\n  7974: a1 = a1 | a4\n  7977: a5 = a5 << 0x10\n  7980: s1 = s1 << 0x18\n  7983: a5 = a5 | s1\n  7986: a1 = a1 | a5\n  7989: a4 = u8 [a0 + 0xd]\n  7992: a5 = u8 [a0 + 0xc]\n  7995: s1 = u8 [a0 + 0xe]\n  7998: a0 = u8 [a0 + 0xf]\n  8001: a4 = a4 << 0x8\n  8004: a4 = a4 | a5\n  8007: s1 = s1 << 0x10\n  8010: a0 = a0 << 0x18\n  8013: a0 = a0 | s1\n  8016: a0 = a0 | a4\n  8019: a0 = a0 << 0x20\n  8022: a0 = a0 | a1\n  8025: a1 = reverse a0\n  8027: a0 = reverse a3\n  8029: a2 = reverse a2\n  8031: a3 = reverse t0\n  8033: a2 = a2 | a3\n  8036: a3 = a0 | a1\n  8039: a3 = a3 | a2\n  8042: a3 = a3 >> 0x20\n  8045: a1 = a1 | a2\n  8048: a1 = a1 << 0x20\n  8051: a1 = a1 | a3\n  8054: jump @135 if a1 == 0\n      : @132 (gas: 1)\n  8057: trap\n      : @133 (gas: 3)\n  8058: a0 = 0\n  8060: a1 = 0\n  8062: ra = 116, jump @0\n      : @134 [@dyn 58] (gas: 5)\n  8067: i32 a1 = a0 + 0\n  8069: a0 = 0x1\n  8072: a2 = 0\n  8074: ecalli 12 // 'seal_return'\n  8076: fallthrough\n      : @135 (gas: 7)\n  8077: a1 = u64 [sp + 0x8]\n  8080: a1 = a1 << 0x20\n  8083: s1 = a1 >> 0x20\n  8086: i32 a0 = a0 + 0\n  8088: u64 [sp + 0x8] = a0\n  8091: a1 = 0x20\n  8094: ra = 118, jump @0\n      : @136 [@dyn 59] (gas: 58)\n  8099: a1 = reverse s1\n  8101: a2 = u64 [sp + 0x10]\n  8104: a2 = reverse a2\n  8106: a3 = u64 [sp + 0x18]\n  8109: a3 = reverse a3\n  8111: a4 = a3 >> 0x38\n  8114: u8 [a0 + 0x1f] = a4\n  8117: a4 = a3 >> 0x30\n  8120: u8 [a0 + 0x1e] = a4\n  8123: a4 = a3 >> 0x28\n  8126: u8 [a0 + 0x1d] = a4\n  8129: a4 = a3 >> 0x20\n  8132: u8 [a0 + 0x1c] = a4\n  8135: a4 = a3 >> 0x18\n  8138: u8 [a0 + 0x1b] = a4\n  8141: a4 = a3 >> 0x10\n  8144: u8 [a0 + 0x1a] = a4\n  8147: a4 = a3 >> 0x8\n  8150: u8 [a0 + 0x19] = a4\n  8153: u8 [a0 + 0x18] = a3\n  8156: u8 [a0 + 0x10] = a2\n  8159: u8 [a0 + 11] = 0\n  8162: u8 [a0 + 10] = 0\n  8165: u8 [a0 + 9] = 0\n  8168: u8 [a0 + 7] = 0\n  8171: u8 [a0 + 6] = 0\n  8174: u8 [a0 + 5] = 0\n  8177: u8 [a0 + 4] = 0\n  8180: u8 [a0 + 3] = 0\n  8183: u8 [a0 + 2] = 0\n  8186: u8 [a0 + 1] = 0\n  8189: u8 [a0 + 0] = 0\n  8191: a3 = a2 >> 0x38\n  8194: u8 [a0 + 0x17] = a3\n  8197: a3 = a2 >> 0x30\n  8200: u8 [a0 + 0x16] = a3\n  8203: a3 = a2 >> 0x28\n  8206: u8 [a0 + 0x15] = a3\n  8209: a3 = a2 >> 0x20\n  8212: u8 [a0 + 0x14] = a3\n  8215: a3 = a2 >> 0x18\n  8218: u8 [a0 + 0x13] = a3\n  8221: a3 = a2 >> 0x10\n  8224: u8 [a0 + 0x12] = a3\n  8227: a2 = a2 >> 0x8\n  8230: u8 [a0 + 0x11] = a2\n  8233: u8 [a0 + 0x8] = a1\n  8236: a2 = a1 >> 0x38\n  8239: u8 [a0 + 0xf] = a2\n  8242: a2 = a1 >> 0x30\n  8245: u8 [a0 + 0xe] = a2\n  8248: a2 = a1 >> 0x28\n  8251: u8 [a0 + 0xd] = a2\n  8254: a1 = a1 >> 0x20\n  8257: u8 [a0 + 0xc] = a1\n  8260: a1 = 0x20\n  8263: a0 = u64 [sp + 0x8]\n  8266: ra = 120, jump @0\n      : @137 [@dyn 60] (gas: 6)\n  8271: i32 a1 = a0 + 0\n  8273: a2 = 0x20\n  8276: a0 = 0\n  8278: ra = 0x7a\n  8281: ecalli 12 // 'seal_return'\n  8283: fallthrough\n      : @138 [@dyn 61] (gas: 12)\n  8284: a2 = u64 [a1 + 0x10]\n  8287: a3 = u64 [a1 + 0x18]\n  8290: a4 = u64 [a1 + 0x8]\n  8293: a1 = u64 [a1]\n  8295: a3 = a3 | a4\n  8298: a4 = a1 | a2\n  8301: a4 = a4 | a3\n  8304: a4 = a4 >> 0x20\n  8307: a2 = a2 | a3\n  8310: a2 = a2 << 0x20\n  8313: a2 = a2 | a4\n  8316: jump @141 if a2 != 0\n      : @139 (gas: 7)\n  8320: sp = sp + 0xfffffffffffffff0\n  8323: u64 [sp + 0x8] = ra\n  8326: u64 [sp] = s0\n  8328: s0 = a0\n  8330: i32 a0 = a1 + 0\n  8332: a1 = 0x20\n  8335: ra = 124, jump @0\n      : @140 [@dyn 62] (gas: 100)\n  8340: a1 = u8 [a0 + 0x1]\n  8343: a2 = u8 [a0]\n  8345: a3 = u8 [a0 + 0x2]\n  8348: a4 = u8 [a0 + 0x3]\n  8351: a1 = a1 << 0x8\n  8354: a1 = a1 | a2\n  8357: a3 = a3 << 0x10\n  8360: a4 = a4 << 0x18\n  8363: a3 = a3 | a4\n  8366: a1 = a1 | a3\n  8369: a2 = u8 [a0 + 0x5]\n  8372: a3 = u8 [a0 + 0x4]\n  8375: a4 = u8 [a0 + 0x6]\n  8378: a5 = u8 [a0 + 0x7]\n  8381: a2 = a2 << 0x8\n  8384: a2 = a2 | a3\n  8387: a4 = a4 << 0x10\n  8390: a5 = a5 << 0x18\n  8393: a4 = a4 | a5\n  8396: a2 = a2 | a4\n  8399: a2 = a2 << 0x20\n  8402: t0 = a2 | a1\n  8405: a2 = u8 [a0 + 0x9]\n  8408: a3 = u8 [a0 + 0x8]\n  8411: a4 = u8 [a0 + 0xa]\n  8414: a5 = u8 [a0 + 0xb]\n  8417: a2 = a2 << 0x8\n  8420: a2 = a2 | a3\n  8423: a4 = a4 << 0x10\n  8426: a5 = a5 << 0x18\n  8429: a4 = a4 | a5\n  8432: a2 = a2 | a4\n  8435: a3 = u8 [a0 + 0xd]\n  8438: a4 = u8 [a0 + 0xc]\n  8441: a5 = u8 [a0 + 0xe]\n  8444: a1 = u8 [a0 + 0xf]\n  8447: a3 = a3 << 0x8\n  8450: a3 = a3 | a4\n  8453: a5 = a5 << 0x10\n  8456: a1 = a1 << 0x18\n  8459: a1 = a1 | a5\n  8462: a1 = a1 | a3\n  8465: a1 = a1 << 0x20\n  8468: t1 = a1 | a2\n  8471: a1 = u8 [a0 + 0x11]\n  8474: a3 = u8 [a0 + 0x10]\n  8477: a4 = u8 [a0 + 0x12]\n  8480: a5 = u8 [a0 + 0x13]\n  8483: a1 = a1 << 0x8\n  8486: a1 = a1 | a3\n  8489: a4 = a4 << 0x10\n  8492: a5 = a5 << 0x18\n  8495: a4 = a4 | a5\n  8498: a1 = a1 | a4\n  8501: a3 = u8 [a0 + 0x15]\n  8504: a4 = u8 [a0 + 0x14]\n  8507: a5 = u8 [a0 + 0x16]\n  8510: a2 = u8 [a0 + 0x17]\n  8513: a3 = a3 << 0x8\n  8516: a3 = a3 | a4\n  8519: a5 = a5 << 0x10\n  8522: a2 = a2 << 0x18\n  8525: a2 = a2 | a5\n  8528: a2 = a2 | a3\n  8531: a2 = a2 << 0x20\n  8534: a3 = a2 | a1\n  8537: a1 = u8 [a0 + 0x19]\n  8540: a2 = u8 [a0 + 0x18]\n  8543: a4 = u8 [a0 + 0x1a]\n  8546: a5 = u8 [a0 + 0x1b]\n  8549: a1 = a1 << 0x8\n  8552: a1 = a1 | a2\n  8555: a4 = a4 << 0x10\n  8558: a5 = a5 << 0x18\n  8561: a4 = a4 | a5\n  8564: a1 = a1 | a4\n  8567: a2 = u8 [a0 + 0x1d]\n  8570: a4 = u8 [a0 + 0x1c]\n  8573: a5 = u8 [a0 + 0x1e]\n  8576: a0 = u8 [a0 + 0x1f]\n  8579: a2 = a2 << 0x8\n  8582: a2 = a2 | a4\n  8585: a5 = a5 << 0x10\n  8588: a0 = a0 << 0x18\n  8591: a0 = a0 | a5\n  8594: a0 = a0 | a2\n  8597: a0 = a0 << 0x20\n  8600: a0 = a0 | a1\n  8603: a0 = reverse a0\n  8605: a1 = reverse a3\n  8607: a2 = reverse t1\n  8609: a3 = reverse t0\n  8611: u64 [s0 + 0x18] = a3\n  8614: u64 [s0 + 0x10] = a2\n  8617: u64 [s0 + 0x8] = a1\n  8620: u64 [s0] = a0\n  8622: ra = u64 [sp + 0x8]\n  8625: s0 = u64 [sp]\n  8627: sp = sp + 0x10\n  8630: ret\n      : @141 (gas: 1)\n  8632: trap\n      : @142 (gas: 20)\n  8633: sp = sp + 0xffffffffffffffb0\n  8636: u64 [sp + 0x48] = ra\n  8639: u64 [sp + 0x40] = s0\n  8642: u64 [sp + 0x38] = s1\n  8645: a4 = u64 [a1 + 0x10]\n  8648: a3 = u64 [a1 + 0x18]\n  8651: a5 = u64 [a1 + 0x8]\n  8654: s0 = u64 [a1]\n  8656: u64 [sp + 0x28] = a3\n  8659: u64 [sp + 0x20] = a5\n  8662: a1 = a5 | a3\n  8665: a3 = s0 | a4\n  8668: a3 = a3 | a1\n  8671: a3 = a3 >> 0x20\n  8674: u64 [sp + 0x30] = a4\n  8677: a1 = a1 | a4\n  8680: a1 = a1 << 0x20\n  8683: a1 = a1 | a3\n  8686: u64 [sp + 0x18] = a0\n  8689: jump @145 if a1 != 0\n      : @143 (gas: 10)\n  8693: a0 = u64 [a2 + 0x18]\n  8696: u64 [sp] = a0\n  8698: s1 = u64 [a2 + 0x10]\n  8701: a0 = u64 [a2 + 0x8]\n  8704: u64 [sp + 0x8] = a0\n  8707: a0 = u64 [a2]\n  8709: u64 [sp + 0x10] = a0\n  8712: i32 a0 = s0 + 0\n  8714: a1 = 0x20\n  8717: ra = 126, jump @0\n      : @144 [@dyn 63] (gas: 88)\n  8722: a1 = u64 [sp]\n  8724: a1 = reverse a1\n  8726: a2 = reverse s1\n  8728: a3 = u64 [sp + 0x8]\n  8731: a3 = reverse a3\n  8733: a4 = u64 [sp + 0x10]\n  8736: a4 = reverse a4\n  8738: a5 = a4 >> 0x38\n  8741: u8 [a0 + 0x1f] = a5\n  8744: a5 = a4 >> 0x30\n  8747: u8 [a0 + 0x1e] = a5\n  8750: a5 = a4 >> 0x28\n  8753: u8 [a0 + 0x1d] = a5\n  8756: a5 = a4 >> 0x20\n  8759: u8 [a0 + 0x1c] = a5\n  8762: a5 = a4 >> 0x18\n  8765: u8 [a0 + 0x1b] = a5\n  8768: a5 = a4 >> 0x10\n  8771: u8 [a0 + 0x1a] = a5\n  8774: a5 = a4 >> 0x8\n  8777: u8 [a0 + 0x19] = a5\n  8780: u8 [a0 + 0x18] = a4\n  8783: u8 [a0 + 0x10] = a3\n  8786: a4 = a3 >> 0x38\n  8789: u8 [a0 + 0x17] = a4\n  8792: a4 = a3 >> 0x30\n  8795: u8 [a0 + 0x16] = a4\n  8798: a4 = a3 >> 0x28\n  8801: u8 [a0 + 0x15] = a4\n  8804: a4 = a3 >> 0x20\n  8807: u8 [a0 + 0x14] = a4\n  8810: a4 = a3 >> 0x18\n  8813: u8 [a0 + 0x13] = a4\n  8816: a4 = a3 >> 0x10\n  8819: u8 [a0 + 0x12] = a4\n  8822: a3 = a3 >> 0x8\n  8825: u8 [a0 + 0x11] = a3\n  8828: u8 [a0 + 0x8] = a2\n  8831: a3 = a2 >> 0x38\n  8834: u8 [a0 + 0xf] = a3\n  8837: a3 = a2 >> 0x30\n  8840: u8 [a0 + 0xe] = a3\n  8843: a3 = a2 >> 0x28\n  8846: u8 [a0 + 0xd] = a3\n  8849: a3 = a2 >> 0x20\n  8852: u8 [a0 + 0xc] = a3\n  8855: a3 = a2 >> 0x18\n  8858: u8 [a0 + 0xb] = a3\n  8861: a3 = a2 >> 0x10\n  8864: u8 [a0 + 0xa] = a3\n  8867: a2 = a2 >> 0x8\n  8870: u8 [a0 + 0x9] = a2\n  8873: u8 [a0] = a1\n  8875: a2 = a1 >> 0x38\n  8878: u8 [a0 + 0x7] = a2\n  8881: a2 = a1 >> 0x30\n  8884: u8 [a0 + 0x6] = a2\n  8887: a2 = a1 >> 0x28\n  8890: u8 [a0 + 0x5] = a2\n  8893: a2 = a1 >> 0x20\n  8896: u8 [a0 + 0x4] = a2\n  8899: a2 = a1 >> 0x18\n  8902: u8 [a0 + 0x3] = a2\n  8905: a2 = a1 >> 0x10\n  8908: u8 [a0 + 0x2] = a2\n  8911: a1 = a1 >> 0x8\n  8914: u8 [a0 + 0x1] = a1\n  8917: a0 = s0 + 0x20\n  8920: a1 = a0 <u s0\n  8923: a3 = u64 [sp + 0x20]\n  8926: a2 = a3 + a1\n  8929: a3 = a2 <u a3\n  8932: a3 = a1 if a1 == 0\n  8935: a1 = u64 [sp + 0x30]\n  8938: a3 = a3 + a1\n  8941: a1 = a3 <u a1\n  8944: a4 = u64 [sp + 0x28]\n  8947: a1 = a1 + a4\n  8950: a4 = u64 [sp + 0x18]\n  8953: u64 [a4] = a0\n  8955: u64 [a4 + 0x8] = a2\n  8958: u64 [a4 + 0x10] = a3\n  8961: u64 [a4 + 0x18] = a1\n  8964: ra = u64 [sp + 0x48]\n  8967: s0 = u64 [sp + 0x40]\n  8970: s1 = u64 [sp + 0x38]\n  8973: sp = sp + 0x50\n  8976: ret\n      : @145 (gas: 1)\n  8978: trap\n      : @146 (gas: 19)\n  8979: sp = sp + 0xffffffffffffff08\n  8983: u64 [sp + 0xf0] = ra\n  8987: u64 [sp + 0xe8] = s0\n  8991: u64 [sp + 0xe0] = s1\n  8995: a4 = u64 [a0 + 0x10]\n  8998: a5 = u64 [a0 + 0x18]\n  9001: a2 = u64 [a0 + 0x8]\n  9004: a3 = u64 [a0]\n  9006: u64 [sp + 0xd0] = a2\n  9010: u64 [sp + 0x98] = a5\n  9014: a0 = a2 | a5\n  9017: a2 = a3 | a4\n  9020: a2 = a2 | a0\n  9023: a2 = a2 >> 0x20\n  9026: u64 [sp + 0xa8] = a4\n  9030: a0 = a0 | a4\n  9033: a0 = a0 << 0x20\n  9036: a0 = a0 | a2\n  9039: jump @163 if a0 != 0\n      : @147 (gas: 11)\n  9043: a0 = u64 [a1 + 0x18]\n  9046: u64 [sp + 0xb0] = a0\n  9050: s1 = u64 [a1 + 0x10]\n  9053: s0 = u64 [a1 + 0x8]\n  9056: a0 = u64 [a1]\n  9058: u64 [sp + 0xd8] = a0\n  9062: i32 a0 = a3 + 0\n  9064: a1 = 0x20\n  9067: u64 [sp + 0xb8] = a0\n  9071: u64 [sp + 0xc8] = a3\n  9075: ra = 128, jump @0\n      : @148 [@dyn 64] (gas: 12)\n  9081: a3 = u64 [sp + 0xd8]\n  9085: a1 = a3 | s1\n  9088: u64 [sp + 0xc0] = s0\n  9092: a2 = u64 [sp + 0xb0]\n  9096: a2 = a2 | s0\n  9099: a1 = a1 | a2\n  9102: a1 = a1 >> 0x20\n  9105: u64 [sp + 0x90] = s1\n  9109: a2 = a2 | s1\n  9112: a2 = a2 << 0x20\n  9115: a1 = a1 | a2\n  9118: jump @163 if a1 != 0\n      : @149 (gas: 42)\n  9122: a1 = u8 [a0 + 0xc]\n  9125: u64 [sp + 0x88] = a1\n  9129: a1 = u8 [a0 + 0xd]\n  9132: u64 [sp + 0x80] = a1\n  9136: a1 = u8 [a0 + 0xe]\n  9139: u64 [sp + 0x78] = a1\n  9142: a1 = u8 [a0 + 0xf]\n  9145: u64 [sp + 0x70] = a1\n  9148: a1 = u8 [a0 + 0x10]\n  9151: u64 [sp + 0x68] = a1\n  9154: a1 = u8 [a0 + 0x11]\n  9157: u64 [sp + 0x60] = a1\n  9160: a1 = u8 [a0 + 0x12]\n  9163: u64 [sp + 0x58] = a1\n  9166: a1 = u8 [a0 + 0x13]\n  9169: u64 [sp + 0x50] = a1\n  9172: a1 = u8 [a0 + 0x14]\n  9175: u64 [sp + 0x48] = a1\n  9178: a1 = u8 [a0 + 0x15]\n  9181: u64 [sp + 0x40] = a1\n  9184: a1 = u8 [a0 + 0x16]\n  9187: u64 [sp + 0x38] = a1\n  9190: a1 = u8 [a0 + 0x17]\n  9193: u64 [sp + 0x30] = a1\n  9196: a1 = u8 [a0 + 0x18]\n  9199: u64 [sp + 0x28] = a1\n  9202: a1 = u8 [a0 + 0x19]\n  9205: u64 [sp + 0x20] = a1\n  9208: a1 = u8 [a0 + 0x1a]\n  9211: u64 [sp + 0x18] = a1\n  9214: a1 = u8 [a0 + 0x1b]\n  9217: u64 [sp + 0x10] = a1\n  9220: a1 = u8 [a0 + 0x1c]\n  9223: u64 [sp + 0x8] = a1\n  9226: a1 = u8 [a0 + 0x1d]\n  9229: u64 [sp] = a1\n  9231: s0 = u8 [a0 + 0x1e]\n  9234: s1 = u8 [a0 + 0x1f]\n  9237: i32 a0 = a3 + 0\n  9239: a1 = 0x20\n  9242: u64 [sp + 0xa0] = a0\n  9246: ra = 130, jump @0\n      : @150 [@dyn 65] (gas: 61)\n  9252: u8 [a0 + 0x1f] = s1\n  9255: u8 [a0 + 0x1e] = s0\n  9258: a1 = u64 [sp]\n  9260: u8 [a0 + 0x1d] = a1\n  9263: a1 = u64 [sp + 0x8]\n  9266: u8 [a0 + 0x1c] = a1\n  9269: a1 = u64 [sp + 0x10]\n  9272: u8 [a0 + 0x1b] = a1\n  9275: a1 = u64 [sp + 0x18]\n  9278: u8 [a0 + 0x1a] = a1\n  9281: a1 = u64 [sp + 0x20]\n  9284: u8 [a0 + 0x19] = a1\n  9287: a1 = u64 [sp + 0x28]\n  9290: u8 [a0 + 0x18] = a1\n  9293: a1 = u64 [sp + 0x30]\n  9296: u8 [a0 + 0x17] = a1\n  9299: a1 = u64 [sp + 0x38]\n  9302: u8 [a0 + 0x16] = a1\n  9305: a1 = u64 [sp + 0x40]\n  9308: u8 [a0 + 0x15] = a1\n  9311: a1 = u64 [sp + 0x48]\n  9314: u8 [a0 + 0x14] = a1\n  9317: a1 = u64 [sp + 0x50]\n  9320: u8 [a0 + 0x13] = a1\n  9323: a1 = u64 [sp + 0x58]\n  9326: u8 [a0 + 0x12] = a1\n  9329: a1 = u64 [sp + 0x60]\n  9332: u8 [a0 + 0x11] = a1\n  9335: a1 = u64 [sp + 0x68]\n  9338: u8 [a0 + 0x10] = a1\n  9341: a1 = u64 [sp + 0x70]\n  9344: u8 [a0 + 0xf] = a1\n  9347: a1 = u64 [sp + 0x78]\n  9350: u8 [a0 + 0xe] = a1\n  9353: a1 = u64 [sp + 0x80]\n  9357: u8 [a0 + 0xd] = a1\n  9360: a1 = u64 [sp + 0x88]\n  9364: u8 [a0 + 0xc] = a1\n  9367: u8 [a0 + 11] = 0\n  9370: u8 [a0 + 10] = 0\n  9373: u8 [a0 + 9] = 0\n  9376: u8 [a0 + 8] = 0\n  9379: u8 [a0 + 7] = 0\n  9382: u8 [a0 + 6] = 0\n  9385: u8 [a0 + 5] = 0\n  9388: u8 [a0 + 4] = 0\n  9391: u8 [a0 + 3] = 0\n  9394: u8 [a0 + 2] = 0\n  9397: u8 [a0 + 1] = 0\n  9400: a1 = u64 [sp + 0xa8]\n  9404: a3 = u64 [sp + 0x98]\n  9408: a3 = a3 | a1\n  9411: s0 = 0xffffffe0\n  9421: a1 = u64 [sp + 0xc8]\n  9425: a1 = a1 <u s0\n  9428: a2 = u64 [sp + 0xd0]\n  9432: a1 = 0 if a2 != 0\n  9434: u64 [sp + 0xa8] = a3\n  9438: a1 = 0 if a3 != 0\n  9440: u8 [a0 + 0] = 0\n  9442: jump @163 if a1 == 0\n      : @151 (gas: 4)\n  9446: a0 = u64 [sp + 0xb8]\n  9450: i32 a0 = a0 + 0x20\n  9453: a1 = 0x20\n  9456: ra = 132, jump @0\n      : @152 [@dyn 66] (gas: 10)\n  9462: a1 = u64 [sp + 0xb0]\n  9466: a3 = u64 [sp + 0x90]\n  9470: a3 = a3 | a1\n  9473: a1 = u64 [sp + 0xd8]\n  9477: a1 = a1 <u s0\n  9480: a2 = u64 [sp + 0xc0]\n  9484: a1 = 0 if a2 != 0\n  9486: u64 [sp + 0xb0] = a3\n  9490: a1 = 0 if a3 != 0\n  9492: jump @163 if a1 == 0\n      : @153 (gas: 5)\n  9496: s0 = u8 [a0 + 0x1f]\n  9499: s1 = u64 [sp + 0xa0]\n  9503: i32 a0 = s1 + 0x20\n  9506: a1 = 0x20\n  9509: ra = 134, jump @0\n      : @154 [@dyn 67] (gas: 40)\n  9515: u8 [a0 + 0x1f] = s0\n  9518: u8 [a0 + 30] = 0\n  9521: u8 [a0 + 29] = 0\n  9524: u8 [a0 + 28] = 0\n  9527: u8 [a0 + 27] = 0\n  9530: u8 [a0 + 26] = 0\n  9533: u8 [a0 + 25] = 0\n  9536: u8 [a0 + 24] = 0\n  9539: u8 [a0 + 23] = 0\n  9542: u8 [a0 + 22] = 0\n  9545: u8 [a0 + 21] = 0\n  9548: u8 [a0 + 20] = 0\n  9551: u8 [a0 + 19] = 0\n  9554: u8 [a0 + 18] = 0\n  9557: u8 [a0 + 17] = 0\n  9560: u8 [a0 + 16] = 0\n  9563: u8 [a0 + 15] = 0\n  9566: u8 [a0 + 14] = 0\n  9569: u8 [a0 + 13] = 0\n  9572: u8 [a0 + 12] = 0\n  9575: u8 [a0 + 11] = 0\n  9578: u8 [a0 + 10] = 0\n  9581: u8 [a0 + 9] = 0\n  9584: u8 [a0 + 8] = 0\n  9587: u8 [a0 + 7] = 0\n  9590: u8 [a0 + 6] = 0\n  9593: u8 [a0 + 5] = 0\n  9596: u8 [a0 + 4] = 0\n  9599: u8 [a0 + 3] = 0\n  9602: u8 [a0 + 2] = 0\n  9605: u8 [a0 + 1] = 0\n  9608: s0 = 0xffffffc0\n  9618: a1 = u64 [sp + 0xc8]\n  9622: a1 = a1 <u s0\n  9625: a2 = u64 [sp + 0xd0]\n  9629: a1 = 0 if a2 != 0\n  9631: a2 = u64 [sp + 0xa8]\n  9635: a1 = 0 if a2 != 0\n  9637: u8 [a0 + 0] = 0\n  9639: jump @163 if a1 == 0\n      : @155 (gas: 4)\n  9643: a0 = u64 [sp + 0xb8]\n  9647: i32 a0 = a0 + 0x40\n  9650: a1 = 0x20\n  9653: ra = 136, jump @0\n      : @156 [@dyn 68] (gas: 7)\n  9659: a1 = u64 [sp + 0xd8]\n  9663: a1 = a1 <u s0\n  9666: a2 = u64 [sp + 0xc0]\n  9670: a1 = 0 if a2 != 0\n  9672: a2 = u64 [sp + 0xb0]\n  9676: a1 = 0 if a2 != 0\n  9678: jump @163 if a1 == 0\n      : @157 (gas: 27)\n  9682: a1 = u8 [a0 + 0x19]\n  9685: a2 = u8 [a0 + 0x18]\n  9688: a3 = u8 [a0 + 0x1a]\n  9691: a4 = u8 [a0 + 0x1b]\n  9694: a1 = a1 << 0x8\n  9697: a1 = a1 | a2\n  9700: a3 = a3 << 0x10\n  9703: a4 = a4 << 0x18\n  9706: a2 = u8 [a0 + 0x1d]\n  9709: a5 = u8 [a0 + 0x1c]\n  9712: a3 = a3 | a4\n  9715: a1 = a1 | a3\n  9718: a2 = a2 << 0x8\n  9721: a2 = a2 | a5\n  9724: a3 = u8 [a0 + 0x1e]\n  9727: a0 = u8 [a0 + 0x1f]\n  9730: a4 = 0xff00000000000000\n  9740: a3 = a3 << 0x10\n  9743: a0 = a0 << 0x18\n  9746: a0 = a0 | a3\n  9749: a0 = a0 | a2\n  9752: a0 = a0 << 0x20\n  9755: a0 = a0 | a1\n  9758: s0 = a0 & a4\n  9761: i32 a0 = s1 + 0x40\n  9764: a1 = 0x20\n  9767: ra = 138, jump @0\n      : @158 [@dyn 69] (gas: 47)\n  9773: u8 [a0 + 23] = 0\n  9776: u8 [a0 + 22] = 0\n  9779: u8 [a0 + 21] = 0\n  9782: u8 [a0 + 20] = 0\n  9785: u8 [a0 + 19] = 0\n  9788: u8 [a0 + 18] = 0\n  9791: u8 [a0 + 17] = 0\n  9794: u8 [a0 + 16] = 0\n  9797: u8 [a0 + 15] = 0\n  9800: u8 [a0 + 14] = 0\n  9803: u8 [a0 + 13] = 0\n  9806: u8 [a0 + 12] = 0\n  9809: u8 [a0 + 11] = 0\n  9812: u8 [a0 + 10] = 0\n  9815: u8 [a0 + 9] = 0\n  9818: u8 [a0 + 8] = 0\n  9821: u8 [a0 + 7] = 0\n  9824: u8 [a0 + 6] = 0\n  9827: u8 [a0 + 5] = 0\n  9830: u8 [a0 + 4] = 0\n  9833: u8 [a0 + 3] = 0\n  9836: u8 [a0 + 2] = 0\n  9839: u8 [a0 + 1] = 0\n  9842: u8 [a0 + 0] = 0\n  9844: u8 [a0 + 0x18] = s0\n  9847: a1 = s0 >> 0x38\n  9850: u8 [a0 + 0x1f] = a1\n  9853: a1 = s0 >> 0x30\n  9856: u8 [a0 + 0x1e] = a1\n  9859: a1 = s0 >> 0x28\n  9862: u8 [a0 + 0x1d] = a1\n  9865: a1 = s0 >> 0x20\n  9868: u8 [a0 + 0x1c] = a1\n  9871: a1 = s0 >> 0x18\n  9874: u8 [a0 + 0x1b] = a1\n  9877: a1 = s0 >> 0x10\n  9880: u8 [a0 + 0x1a] = a1\n  9883: a1 = s0 >> 0x8\n  9886: s0 = 0xffffffa0\n  9896: a2 = u64 [sp + 0xc8]\n  9900: a2 = a2 <u s0\n  9903: a3 = u64 [sp + 0xd0]\n  9907: a2 = 0 if a3 != 0\n  9909: a3 = u64 [sp + 0xa8]\n  9913: a2 = 0 if a3 != 0\n  9915: u8 [a0 + 0x19] = a1\n  9918: jump @163 if a2 == 0\n      : @159 (gas: 4)\n  9922: a0 = u64 [sp + 0xb8]\n  9926: i32 a0 = a0 + 0x60\n  9929: a1 = 0x20\n  9932: ra = 140, jump @0\n      : @160 [@dyn 70] (gas: 7)\n  9938: a1 = u64 [sp + 0xd8]\n  9942: a1 = a1 <u s0\n  9945: a2 = u64 [sp + 0xc0]\n  9949: a1 = 0 if a2 != 0\n  9951: a2 = u64 [sp + 0xb0]\n  9955: a1 = 0 if a2 != 0\n  9957: jump @163 if a1 == 0\n      : @161 (gas: 94)\n  9961: a1 = u8 [a0 + 0x1d]\n  9964: a2 = u8 [a0 + 0x1c]\n  9967: a3 = u8 [a0 + 0x1e]\n  9970: a4 = u8 [a0 + 0x1f]\n  9973: a1 = a1 << 0x8\n  9976: a1 = a1 | a2\n  9979: a3 = a3 << 0x10\n  9982: a4 = a4 << 0x18\n  9985: a3 = a3 | a4\n  9988: a1 = a1 | a3\n  9991: a2 = u8 [a0 + 0xd]\n  9994: a3 = u8 [a0 + 0xc]\n  9997: a4 = u8 [a0 + 0xe]\n 10000: a5 = u8 [a0 + 0xf]\n 10003: a2 = a2 << 0x8\n 10006: a2 = a2 | a3\n 10009: a4 = a4 << 0x10\n 10012: a5 = a5 << 0x18\n 10015: a4 = a4 | a5\n 10018: a2 = a2 | a4\n 10021: a1 = a1 | a2\n 10024: a1 = a1 << 0x20\n 10027: a2 = u8 [a0 + 0x9]\n 10030: a3 = u8 [a0 + 0x8]\n 10033: a4 = u8 [a0 + 0xa]\n 10036: a5 = u8 [a0 + 0xb]\n 10039: a2 = a2 << 0x8\n 10042: a2 = a2 | a3\n 10045: a4 = a4 << 0x10\n 10048: a5 = a5 << 0x18\n 10051: a4 = a4 | a5\n 10054: a2 = a2 | a4\n 10057: a3 = u8 [a0 + 0x19]\n 10060: a4 = u8 [a0 + 0x18]\n 10063: a5 = u8 [a0 + 0x1a]\n 10066: s1 = u8 [a0 + 0x1b]\n 10069: a3 = a3 << 0x8\n 10072: a3 = a3 | a4\n 10075: a5 = a5 << 0x10\n 10078: s1 = s1 << 0x18\n 10081: a5 = a5 | s1\n 10084: a3 = a3 | a5\n 10087: a2 = a2 | a3\n 10090: a1 = a1 | a2\n 10093: a2 = u8 [a0 + 0x15]\n 10096: a3 = u8 [a0 + 0x14]\n 10099: a4 = u8 [a0 + 0x16]\n 10102: a5 = u8 [a0 + 0x17]\n 10105: a2 = a2 << 0x8\n 10108: a2 = a2 | a3\n 10111: a4 = a4 << 0x10\n 10114: a5 = a5 << 0x18\n 10117: a4 = a4 | a5\n 10120: a2 = a2 | a4\n 10123: a3 = u8 [a0 + 0x5]\n 10126: a4 = u8 [a0 + 0x4]\n 10129: a5 = u8 [a0 + 0x6]\n 10132: s1 = u8 [a0 + 0x7]\n 10135: a3 = a3 << 0x8\n 10138: a3 = a3 | a4\n 10141: a5 = a5 << 0x10\n 10144: s1 = s1 << 0x18\n 10147: a5 = a5 | s1\n 10150: a3 = a3 | a5\n 10153: a2 = a2 | a3\n 10156: a3 = u8 [a0 + 0x1]\n 10159: a4 = u8 [a0]\n 10161: a5 = u8 [a0 + 0x2]\n 10164: s1 = u8 [a0 + 0x3]\n 10167: a3 = a3 << 0x8\n 10170: a3 = a3 | a4\n 10173: a5 = a5 << 0x10\n 10176: s1 = s1 << 0x18\n 10179: a4 = u8 [a0 + 0x11]\n 10182: a5 = a5 | s1\n 10185: a3 = a3 | a5\n 10188: a5 = u8 [a0 + 0x10]\n 10191: a4 = a4 << 0x8\n 10194: s1 = u8 [a0 + 0x12]\n 10197: a0 = u8 [a0 + 0x13]\n 10200: a4 = a4 | a5\n 10203: a2 = a2 << 0x20\n 10206: s1 = s1 << 0x10\n 10209: a0 = a0 << 0x18\n 10212: a0 = a0 | s1\n 10215: a0 = a0 | a4\n 10218: a0 = a0 | a3\n 10221: a0 = a0 | a2\n 10224: a0 = a0 | a1\n 10227: s0 = a0 >u 0\n 10229: a0 = u64 [sp + 0xa0]\n 10233: i32 a0 = a0 + 0x60\n 10236: a1 = 0x20\n 10239: ra = 142, jump @0\n      : @162 [@dyn 71] (gas: 37)\n 10245: u8 [a0 + 30] = 0\n 10248: u8 [a0 + 29] = 0\n 10251: u8 [a0 + 28] = 0\n 10254: u8 [a0 + 27] = 0\n 10257: u8 [a0 + 26] = 0\n 10260: u8 [a0 + 25] = 0\n 10263: u8 [a0 + 24] = 0\n 10266: u8 [a0 + 23] = 0\n 10269: u8 [a0 + 22] = 0\n 10272: u8 [a0 + 21] = 0\n 10275: u8 [a0 + 20] = 0\n 10278: u8 [a0 + 19] = 0\n 10281: u8 [a0 + 18] = 0\n 10284: u8 [a0 + 17] = 0\n 10287: u8 [a0 + 16] = 0\n 10290: u8 [a0 + 15] = 0\n 10293: u8 [a0 + 14] = 0\n 10296: u8 [a0 + 13] = 0\n 10299: u8 [a0 + 12] = 0\n 10302: u8 [a0 + 11] = 0\n 10305: u8 [a0 + 10] = 0\n 10308: u8 [a0 + 9] = 0\n 10311: u8 [a0 + 8] = 0\n 10314: u8 [a0 + 7] = 0\n 10317: u8 [a0 + 6] = 0\n 10320: u8 [a0 + 5] = 0\n 10323: u8 [a0 + 4] = 0\n 10326: u8 [a0 + 3] = 0\n 10329: u8 [a0 + 2] = 0\n 10332: u8 [a0 + 1] = 0\n 10335: u8 [a0 + 0] = 0\n 10337: u8 [a0 + 0x1f] = s0\n 10340: ra = u64 [sp + 0xf0]\n 10344: s0 = u64 [sp + 0xe8]\n 10348: s1 = u64 [sp + 0xe0]\n 10352: sp = sp + 0xf8\n 10356: ret\n      : @163 (gas: 1)\n 10358: trap\n      : @164 (gas: 22)\n 10359: sp = sp + 0xffffffffffffff20\n 10363: u64 [sp + 0xd8] = ra\n 10367: u64 [sp + 0xd0] = s0\n 10371: u64 [sp + 0xc8] = s1\n 10375: s0 = sp + 0xe0\n 10379: sp = sp & 0xfffffffffffffff0\n 10382: a3 = u64 [a1 + 0x18]\n 10385: a4 = u64 [a1 + 0x10]\n 10388: a5 = u64 [a1 + 0x8]\n 10391: s1 = u64 [a1]\n 10393: u64 [sp + 0x78] = a3\n 10396: u64 [sp + 0x68] = a5\n 10399: a1 = a5 | a3\n 10402: a3 = s1 | a4\n 10405: a3 = a3 | a1\n 10408: a3 = a3 >> 0x20\n 10411: u64 [sp + 0x70] = a4\n 10414: a1 = a1 | a4\n 10417: a1 = a1 << 0x20\n 10420: a1 = a1 | a3\n 10423: u64 [sp + 0x10] = a0\n 10426: jump @179 if a1 != 0\n      : @165 (gas: 13)\n 10430: a0 = u64 [a2 + 0x18]\n 10433: u64 [sp + 0x60] = a0\n 10436: a0 = u64 [a2 + 0x10]\n 10439: u64 [sp + 0x48] = a0\n 10442: a0 = u64 [a2 + 0x8]\n 10445: u64 [sp + 0x40] = a0\n 10448: a0 = u64 [a2]\n 10450: u64 [sp + 0x50] = a0\n 10453: u64 [sp + 0x58] = s1\n 10456: i32 a0 = s1 + 0\n 10458: a1 = 0x20\n 10461: s1 = 0x20\n 10464: ra = 144, jump @0\n      : @166 [@dyn 72] (gas: 44)\n 10470: a3 = u64 [sp + 0x50]\n 10473: u8 [a0 + 0x1f] = s1\n 10476: a4 = u64 [sp + 0x48]\n 10479: a1 = a3 | a4\n 10482: a2 = u64 [sp + 0x60]\n 10485: a5 = u64 [sp + 0x40]\n 10488: a2 = a2 | a5\n 10491: a1 = a1 | a2\n 10494: a1 = a1 >> 0x20\n 10497: a2 = a2 | a4\n 10500: a2 = a2 << 0x20\n 10503: a1 = a1 | a2\n 10506: u8 [a0 + 30] = 0\n 10509: u8 [a0 + 29] = 0\n 10512: u8 [a0 + 28] = 0\n 10515: u8 [a0 + 27] = 0\n 10518: u8 [a0 + 26] = 0\n 10521: u8 [a0 + 25] = 0\n 10524: u8 [a0 + 24] = 0\n 10527: u8 [a0 + 23] = 0\n 10530: u8 [a0 + 22] = 0\n 10533: u8 [a0 + 21] = 0\n 10536: u8 [a0 + 20] = 0\n 10539: u8 [a0 + 19] = 0\n 10542: u8 [a0 + 18] = 0\n 10545: u8 [a0 + 17] = 0\n 10548: u8 [a0 + 16] = 0\n 10551: u8 [a0 + 15] = 0\n 10554: u8 [a0 + 14] = 0\n 10557: u8 [a0 + 13] = 0\n 10560: u8 [a0 + 12] = 0\n 10563: u8 [a0 + 11] = 0\n 10566: u8 [a0 + 10] = 0\n 10569: u8 [a0 + 9] = 0\n 10572: u8 [a0 + 8] = 0\n 10575: u8 [a0 + 7] = 0\n 10578: u8 [a0 + 6] = 0\n 10581: u8 [a0 + 5] = 0\n 10584: u8 [a0 + 4] = 0\n 10587: u8 [a0 + 3] = 0\n 10590: u8 [a0 + 2] = 0\n 10593: u8 [a0 + 1] = 0\n 10596: u8 [a0 + 0] = 0\n 10598: jump @179 if a1 != 0\n      : @167 (gas: 18)\n 10602: a0 = u64 [sp + 0x58]\n 10605: a1 = a0 + 0x20\n 10608: u64 [sp + 0x30] = a1\n 10611: a0 = a1 <u a0\n 10614: a1 = u64 [sp + 0x68]\n 10617: a2 = a1 + a0\n 10620: u64 [sp + 0x38] = a2\n 10623: a1 = a2 <u a1\n 10626: a1 = a0 if a0 == 0\n 10629: a0 = u64 [sp + 0x70]\n 10632: s1 = a0 + a1\n 10635: a0 = s1 <u a0\n 10638: a1 = u64 [sp + 0x78]\n 10641: a0 = a0 + a1\n 10644: u64 [sp + 0x28] = a0\n 10647: i32 a0 = a3 + 0\n 10649: a1 = 0x20\n 10652: ra = 146, jump @0\n      : @168 [@dyn 73] (gas: 11)\n 10658: t0 = u64 [sp + 0x30]\n 10661: a1 = t0 | s1\n 10664: a2 = u64 [sp + 0x38]\n 10667: a3 = u64 [sp + 0x28]\n 10670: a2 = a2 | a3\n 10673: a1 = a1 | a2\n 10676: a1 = a1 >> 0x20\n 10679: a2 = a2 | s1\n 10682: a2 = a2 << 0x20\n 10685: a1 = a1 | a2\n 10688: jump @179 if a1 != 0\n      : @169 (gas: 94)\n 10692: a1 = u8 [a0 + 0x19]\n 10695: a2 = u8 [a0 + 0x18]\n 10698: a3 = u8 [a0 + 0x1a]\n 10701: a4 = u8 [a0 + 0x1b]\n 10704: a1 = a1 << 0x8\n 10707: a1 = a1 | a2\n 10710: a3 = a3 << 0x10\n 10713: a4 = a4 << 0x18\n 10716: a3 = a3 | a4\n 10719: a1 = a1 | a3\n 10722: a2 = u8 [a0 + 0x1d]\n 10725: a3 = u8 [a0 + 0x1c]\n 10728: a4 = u8 [a0 + 0x1e]\n 10731: a5 = u8 [a0 + 0x1f]\n 10734: a2 = a2 << 0x8\n 10737: a2 = a2 | a3\n 10740: a4 = a4 << 0x10\n 10743: a5 = a5 << 0x18\n 10746: a4 = a4 | a5\n 10749: a2 = a2 | a4\n 10752: a2 = a2 << 0x20\n 10755: a1 = a1 | a2\n 10758: u64 [sp + 0x38] = a1\n 10761: a1 = u8 [a0 + 0x11]\n 10764: a2 = u8 [a0 + 0x10]\n 10767: a3 = u8 [a0 + 0x12]\n 10770: a4 = u8 [a0 + 0x13]\n 10773: a1 = a1 << 0x8\n 10776: a1 = a1 | a2\n 10779: a3 = a3 << 0x10\n 10782: a4 = a4 << 0x18\n 10785: a3 = a3 | a4\n 10788: a1 = a1 | a3\n 10791: a2 = u8 [a0 + 0x15]\n 10794: a3 = u8 [a0 + 0x14]\n 10797: a4 = u8 [a0 + 0x16]\n 10800: a5 = u8 [a0 + 0x17]\n 10803: a2 = a2 << 0x8\n 10806: a2 = a2 | a3\n 10809: a4 = a4 << 0x10\n 10812: a5 = a5 << 0x18\n 10815: a4 = a4 | a5\n 10818: a2 = a2 | a4\n 10821: a2 = a2 << 0x20\n 10824: a1 = a1 | a2\n 10827: u64 [sp + 0x28] = a1\n 10830: a1 = u8 [a0 + 0x9]\n 10833: a2 = u8 [a0 + 0x8]\n 10836: a3 = u8 [a0 + 0xa]\n 10839: a4 = u8 [a0 + 0xb]\n 10842: a1 = a1 << 0x8\n 10845: a1 = a1 | a2\n 10848: a3 = a3 << 0x10\n 10851: a4 = a4 << 0x18\n 10854: a3 = a3 | a4\n 10857: a1 = a1 | a3\n 10860: a2 = u8 [a0 + 0xd]\n 10863: a3 = u8 [a0 + 0xc]\n 10866: a4 = u8 [a0 + 0xe]\n 10869: a5 = u8 [a0 + 0xf]\n 10872: a2 = a2 << 0x8\n 10875: a2 = a2 | a3\n 10878: a4 = a4 << 0x10\n 10881: a5 = a5 << 0x18\n 10884: a4 = a4 | a5\n 10887: a2 = a2 | a4\n 10890: a2 = a2 << 0x20\n 10893: a1 = a1 | a2\n 10896: u64 [sp + 0x20] = a1\n 10899: a1 = u8 [a0 + 0x1]\n 10902: a2 = u8 [a0]\n 10904: a3 = u8 [a0 + 0x2]\n 10907: a4 = u8 [a0 + 0x3]\n 10910: a1 = a1 << 0x8\n 10913: a1 = a1 | a2\n 10916: a3 = a3 << 0x10\n 10919: a4 = a4 << 0x18\n 10922: a3 = a3 | a4\n 10925: a1 = a1 | a3\n 10928: a2 = u8 [a0 + 0x5]\n 10931: a3 = u8 [a0 + 0x4]\n 10934: a4 = u8 [a0 + 0x6]\n 10937: a0 = u8 [a0 + 0x7]\n 10940: a2 = a2 << 0x8\n 10943: a2 = a2 | a3\n 10946: a4 = a4 << 0x10\n 10949: a0 = a0 << 0x18\n 10952: a0 = a0 | a4\n 10955: a0 = a0 | a2\n 10958: a0 = a0 << 0x20\n 10961: s1 = a0 | a1\n 10964: i32 a0 = t0 + 0\n 10966: a1 = 0x20\n 10969: ra = 148, jump @0\n      : @170 [@dyn 74] (gas: 81)\n 10975: a3 = s1\n 10977: s1 = u64 [sp + 0x20]\n 10980: a4 = u64 [sp + 0x28]\n 10983: t2 = u64 [sp + 0x38]\n 10986: u8 [a0 + 0x10] = a4\n 10989: a1 = s1 >> 0x38\n 10992: u8 [a0 + 0xf] = a1\n 10995: a1 = s1 >> 0x30\n 10998: u8 [a0 + 0xe] = a1\n 11001: a1 = s1 >> 0x28\n 11004: u8 [a0 + 0xd] = a1\n 11007: a1 = s1 >> 0x20\n 11010: u8 [a0 + 0xc] = a1\n 11013: a1 = s1 >> 0x18\n 11016: u8 [a0 + 0xb] = a1\n 11019: a1 = s1 >> 0x10\n 11022: u8 [a0 + 0xa] = a1\n 11025: a1 = s1 >> 0x8\n 11028: u8 [a0 + 0x9] = a1\n 11031: u8 [a0 + 0x8] = s1\n 11034: a1 = a3 >> 0x38\n 11037: u8 [a0 + 0x7] = a1\n 11040: a1 = a3 >> 0x30\n 11043: u8 [a0 + 0x6] = a1\n 11046: a1 = a3 >> 0x28\n 11049: u8 [a0 + 0x5] = a1\n 11052: a1 = a3 >> 0x20\n 11055: u8 [a0 + 0x4] = a1\n 11058: a1 = a3 >> 0x18\n 11061: u8 [a0 + 0x3] = a1\n 11064: a1 = a3 >> 0x10\n 11067: u8 [a0 + 0x2] = a1\n 11070: a1 = a3 >> 0x8\n 11073: u8 [a0 + 0x1] = a1\n 11076: u8 [a0] = a3\n 11078: u8 [a0 + 0x18] = t2\n 11081: a1 = a4 >> 0x38\n 11084: u8 [a0 + 0x17] = a1\n 11087: a1 = a4 >> 0x30\n 11090: u8 [a0 + 0x16] = a1\n 11093: a1 = a4 >> 0x28\n 11096: u8 [a0 + 0x15] = a1\n 11099: a1 = a4 >> 0x20\n 11102: u8 [a0 + 0x14] = a1\n 11105: a1 = a4 >> 0x18\n 11108: u8 [a0 + 0x13] = a1\n 11111: a1 = a4 >> 0x10\n 11114: u8 [a0 + 0x12] = a1\n 11117: a1 = a4 >> 0x8\n 11120: u8 [a0 + 0x11] = a1\n 11123: a1 = t2 >> 0x38\n 11126: u8 [a0 + 0x1f] = a1\n 11129: a1 = t2 >> 0x30\n 11132: u8 [a0 + 0x1e] = a1\n 11135: a1 = t2 >> 0x28\n 11138: u8 [a0 + 0x1d] = a1\n 11141: a1 = t2 >> 0x20\n 11144: u8 [a0 + 0x1c] = a1\n 11147: a1 = t2 >> 0x18\n 11150: u8 [a0 + 0x1b] = a1\n 11153: a1 = t2 >> 0x10\n 11156: u8 [a0 + 0x1a] = a1\n 11159: a1 = t2 >> 0x8\n 11162: u8 [a0 + 0x19] = a1\n 11165: a0 = u64 [sp + 0x58]\n 11168: t0 = a0 + 0x40\n 11171: a0 = t0 <u a0\n 11174: a1 = u64 [sp + 0x68]\n 11177: t1 = a1 + a0\n 11180: a1 = t1 <u a1\n 11183: a1 = a0 if a0 == 0\n 11186: a0 = a3 | a4\n 11189: a2 = s1 | t2\n 11192: a0 = a0 | a2\n 11195: a5 = u64 [sp + 0x70]\n 11198: a2 = a5 + a1\n 11201: a1 = a2 <u a5\n 11204: a5 = u64 [sp + 0x78]\n 11207: a1 = a1 + a5\n 11210: u64 [sp + 0x78] = a1\n 11213: jump @177 if a0 == 0\n      : @171 (gas: 162)\n 11217: u64 [sp + 0x68] = a2\n 11220: u64 [sp + 0x70] = t1\n 11223: u64 [sp + 0x58] = t0\n 11226: a5 = reverse a3\n 11228: a3 = reverse s1\n 11230: u64 [sp + 0x20] = a3\n 11233: a2 = reverse a4\n 11235: a0 = reverse t2\n 11237: t0 = 0x1\n 11240: a1 = a0\n 11242: a1 = t0 if a2 == 0\n 11245: a4 = maxu(a0, t0)\n 11248: a4 = a1 if a2 != 0\n 11251: a1 = a3 >u 0\n 11253: s1 = a5\n 11255: a5 = a5 >u 0\n 11257: a5 = a1 if s1 == 0\n 11260: u64 [sp + 0x30] = s1\n 11263: a0 = t0 if a5 == 0\n 11266: s1 = s1 | a3\n 11269: a0 = a4 if s1 == 0\n 11272: a1 = a2\n 11274: a1 = 0 if a5 == 0\n 11276: a1 = a2 if s1 == 0\n 11279: t2 = a1\n 11281: a1 = 0xffffffe0\n 11291: a3 = u64 [sp + 0x50]\n 11294: t0 = a1 <u a3\n 11297: a5 = a3\n 11299: a4 = u64 [sp + 0x40]\n 11302: a3 = a4 >u 0\n 11304: a3 = t0 if a4 == 0\n 11307: a2 = a4\n 11309: s1 = u64 [sp + 0x48]\n 11312: a4 = -s1\n 11314: ra = a4 - a3\n 11317: t1 = ra >u 0\n 11319: a3 = a4 <u a3\n 11322: a4 = s1 >u 0\n 11324: s1 = u64 [sp + 0x60]\n 11327: a4 = a4 + s1\n 11330: s1 = -a4\n 11332: s1 = s1 - a3\n 11335: a4 = s1 >u 0\n 11337: a4 = t1 if s1 == 0\n 11340: a5 = a1 - a5\n 11343: a3 = -a2\n 11345: a2 = a3 - t0\n 11348: u64 [sp + 0x38] = a1\n 11351: t1 = a1 <u a5\n 11354: a3 = a2 >u 0\n 11356: a3 = t1 if a2 == 0\n 11359: a1 = ra | s1\n 11362: a3 = a4 if a1 != 0\n 11365: a5 = 0 if a3 != 0\n 11367: a4 = a5 + 0x1f\n 11370: a1 = a4 <u a5\n 11373: a2 = 0 if a3 != 0\n 11375: a5 = a2 + a1\n 11378: t1 = a5 <u a2\n 11381: t1 = a1 if a1 == 0\n 11384: ra = 0 if a3 != 0\n 11386: a1 = ra + t1\n 11389: u64 [sp] = a1\n 11391: a1 = a1 << 0x3b\n 11394: a2 = a5 >> 0x5\n 11397: a2 = a2 | a1\n 11400: a5 = a5 << 0x3b\n 11403: a4 = a4 >> 0x5\n 11406: a5 = a5 | a4\n 11409: u64 [sp + 0x28] = a5\n 11412: a1 = a0 <u 0x1\n 11415: t0 = t2\n 11417: t2 = t2 - a1\n 11420: t1 = a0 + 0xffffffffffffffff\n 11423: a1 = a2\n 11425: u64 [sp + 0x18] = a2\n 11428: a2 = t2 ^ a2\n 11431: a1 = t2 <u a1\n 11434: a4 = t1 <u a5\n 11437: a4 = a1 if a2 != 0\n 11440: u64 [sp + 0x8] = a4\n 11443: a4 = u64 [sp + 0x20]\n 11446: a1 = a4\n 11448: a2 = u64 [sp + 0x30]\n 11451: a1 = 0 if a2 == 0\n 11453: a1 = a4 if a2 == 0\n 11456: a0 = a0 | t0\n 11459: a0 = a0 <u 0x1\n 11462: a4 = a1 <u a0\n 11465: t0 = a2 - a4\n 11468: a5 = a1 - a0\n 11471: s1 = 0 if a3 != 0\n 11473: a3 = u64 [sp]\n 11475: a0 = a3 <u ra\n 11478: ra = u64 [sp + 0x60]\n 11481: a0 = a0 + s1\n 11484: a3 = a3 >> 0x5\n 11487: a4 = a0 << 0x3b\n 11490: a3 = a3 | a4\n 11493: a2 = a0 >> 0x5\n 11496: a1 = a5 <u a3\n 11499: s1 = t0 ^ a2\n 11502: a4 = t0 <u a2\n 11505: a0 = t0\n 11507: a4 = a1 if s1 == 0\n 11510: a1 = a5 ^ a3\n 11513: a1 = a1 | s1\n 11516: t0 = u64 [sp + 0x40]\n 11519: s1 = u64 [sp + 0x8]\n 11522: a4 = s1 if a1 == 0\n 11525: a0 = a2 if a4 == 0\n 11528: u64 [sp + 0x30] = a0\n 11531: a5 = a3 if a4 == 0\n 11534: a0 = u64 [sp + 0x18]\n 11537: t2 = a0 if a4 == 0\n 11540: a0 = u64 [sp + 0x28]\n 11543: t1 = a0 if a4 == 0\n 11546: a0 = t1 >> 0x3b\n 11549: a1 = t2 << 0x5\n 11552: a0 = a0 | a1\n 11555: t1 = t1 << 0x5\n 11558: a0 = a0 + t0\n 11561: s1 = u64 [sp + 0x50]\n 11564: t1 = t1 + s1\n 11567: u64 [sp + 0x28] = t1\n 11570: a1 = t1 <u s1\n 11573: t1 = a0 + a1\n 11576: a3 = t1 ^ t0\n 11579: a4 = t1 <u t0\n 11582: a4 = a1 if a3 == 0\n 11585: a1 = t2 >> 0x3b\n 11588: a3 = a5 << 0x5\n 11591: a1 = a1 | a3\n 11594: a2 = a5 >> 0x3b\n 11597: t2 = u64 [sp + 0x30]\n 11600: t2 = t2 << 0x5\n 11603: a2 = t2 | a2\n 11606: a2 = a2 + ra\n 11609: a0 = u64 [sp + 0x48]\n 11612: a1 = a1 + a0\n 11615: a3 = a1 <u a0\n 11618: a2 = a2 + a3\n 11621: a4 = a4 + a1\n 11624: a1 = a4 <u a1\n 11627: a1 = a1 + a2\n 11630: a3 = u64 [sp + 0x28]\n 11633: a2 = a3 + 0x20\n 11636: u64 [sp + 0x30] = a2\n 11639: a2 = a2 <u a3\n 11642: a5 = a0\n 11644: a3 = s1\n 11646: a0 = t1 + a2\n 11649: u64 [sp + 0x28] = a0\n 11652: a0 = a0 <u t1\n 11655: a0 = a2 if a2 == 0\n 11658: a0 = a0 + a4\n 11661: u64 [sp + 0x20] = a0\n 11664: a0 = a0 <u a4\n 11667: a0 = a0 + a1\n 11670: u64 [sp + 0x18] = a0\n 11673: fallthrough\n      : @172 (gas: 6)\n 11674: a0 = a5 | ra\n 11677: a1 = u64 [sp + 0x38]\n 11680: a1 = a3 <u a1\n 11683: a1 = 0 if t0 != 0\n 11685: a1 = 0 if a0 != 0\n 11687: jump @179 if a1 == 0\n      : @173 (gas: 15)\n 11691: a0 = a3 + 0x20\n 11694: u64 [sp + 0x48] = a0\n 11697: a0 = a0 <u a3\n 11700: a1 = t0 + a0\n 11703: u64 [sp + 0x50] = a1\n 11706: s1 = a1 <u t0\n 11709: s1 = a0 if a0 == 0\n 11712: s1 = s1 + a5\n 11715: u64 [sp + 0x40] = s1\n 11718: a0 = s1 <u a5\n 11721: ra = ra + a0\n 11724: u64 [sp + 0x60] = ra\n 11727: i32 a0 = a3 + 0x20\n 11730: a1 = 0x20\n 11733: ra = 150, jump @0\n      : @174 [@dyn 75] (gas: 107)\n 11739: a1 = u8 [a0 + 0x1]\n 11742: a2 = u8 [a0]\n 11744: a3 = u8 [a0 + 0x2]\n 11747: a4 = u8 [a0 + 0x3]\n 11750: a1 = a1 << 0x8\n 11753: a1 = a1 | a2\n 11756: a3 = a3 << 0x10\n 11759: a4 = a4 << 0x18\n 11762: a3 = a3 | a4\n 11765: a1 = a1 | a3\n 11768: a2 = u8 [a0 + 0x5]\n 11771: a3 = u8 [a0 + 0x4]\n 11774: a4 = u8 [a0 + 0x6]\n 11777: a5 = u8 [a0 + 0x7]\n 11780: a2 = a2 << 0x8\n 11783: a2 = a2 | a3\n 11786: a4 = a4 << 0x10\n 11789: a5 = a5 << 0x18\n 11792: a4 = a4 | a5\n 11795: a2 = a2 | a4\n 11798: a2 = a2 << 0x20\n 11801: t0 = a2 | a1\n 11804: a2 = u8 [a0 + 0x9]\n 11807: a3 = u8 [a0 + 0x8]\n 11810: a4 = u8 [a0 + 0xa]\n 11813: a5 = u8 [a0 + 0xb]\n 11816: a2 = a2 << 0x8\n 11819: a2 = a2 | a3\n 11822: a4 = a4 << 0x10\n 11825: a5 = a5 << 0x18\n 11828: a4 = a4 | a5\n 11831: a2 = a2 | a4\n 11834: a3 = u8 [a0 + 0xd]\n 11837: a4 = u8 [a0 + 0xc]\n 11840: a5 = u8 [a0 + 0xe]\n 11843: a1 = u8 [a0 + 0xf]\n 11846: a3 = a3 << 0x8\n 11849: a3 = a3 | a4\n 11852: a5 = a5 << 0x10\n 11855: a1 = a1 << 0x18\n 11858: a1 = a1 | a5\n 11861: a1 = a1 | a3\n 11864: a1 = a1 << 0x20\n 11867: a2 = a2 | a1\n 11870: a1 = u8 [a0 + 0x11]\n 11873: a3 = u8 [a0 + 0x10]\n 11876: a4 = u8 [a0 + 0x12]\n 11879: a5 = u8 [a0 + 0x13]\n 11882: a1 = a1 << 0x8\n 11885: a1 = a1 | a3\n 11888: a4 = a4 << 0x10\n 11891: a5 = a5 << 0x18\n 11894: a4 = a4 | a5\n 11897: a1 = a1 | a4\n 11900: a3 = u8 [a0 + 0x15]\n 11903: a4 = u8 [a0 + 0x14]\n 11906: a5 = u8 [a0 + 0x16]\n 11909: s1 = u8 [a0 + 0x17]\n 11912: a3 = a3 << 0x8\n 11915: a3 = a3 | a4\n 11918: a5 = a5 << 0x10\n 11921: s1 = s1 << 0x18\n 11924: a5 = a5 | s1\n 11927: a3 = a3 | a5\n 11930: a3 = a3 << 0x20\n 11933: a3 = a3 | a1\n 11936: a1 = u8 [a0 + 0x19]\n 11939: a4 = u8 [a0 + 0x18]\n 11942: a5 = u8 [a0 + 0x1a]\n 11945: s1 = u8 [a0 + 0x1b]\n 11948: a1 = a1 << 0x8\n 11951: a1 = a1 | a4\n 11954: a5 = a5 << 0x10\n 11957: s1 = s1 << 0x18\n 11960: a5 = a5 | s1\n 11963: a1 = a1 | a5\n 11966: a4 = u8 [a0 + 0x1d]\n 11969: a5 = u8 [a0 + 0x1c]\n 11972: s1 = u8 [a0 + 0x1e]\n 11975: a0 = u8 [a0 + 0x1f]\n 11978: a4 = a4 << 0x8\n 11981: a4 = a4 | a5\n 11984: s1 = s1 << 0x10\n 11987: a0 = a0 << 0x18\n 11990: a0 = a0 | s1\n 11993: a0 = a0 | a4\n 11996: a0 = a0 << 0x20\n 11999: a0 = a0 | a1\n 12002: a4 = reverse a0\n 12004: a0 = reverse a3\n 12006: a1 = reverse a2\n 12008: a2 = reverse t0\n 12010: a3 = u64 [sp + 0x78]\n 12013: u64 [sp + 0x98] = a3\n 12017: a3 = u64 [sp + 0x68]\n 12020: u64 [sp + 0x90] = a3\n 12024: a3 = u64 [sp + 0x70]\n 12027: u64 [sp + 0x88] = a3\n 12031: s1 = u64 [sp + 0x58]\n 12034: u64 [sp + 0x80] = s1\n 12038: u64 [sp + 0xb8] = a2\n 12042: u64 [sp + 0xb0] = a1\n 12046: u64 [sp + 0xa8] = a0\n 12050: a0 = sp + 0xa0\n 12054: a1 = sp + 0x80\n 12058: u64 [sp + 0xa0] = a4\n 12062: ra = 152, jump @146\n      : @175 [@dyn 76] (gas: 33)\n 12068: ra = u64 [sp + 0x60]\n 12071: t2 = s1 + 0x80\n 12075: a2 = t2 <u s1\n 12078: a0 = u64 [sp + 0x70]\n 12081: a1 = a0 + a2\n 12084: a3 = a1 <u a0\n 12087: a3 = a2 if a2 == 0\n 12090: a0 = u64 [sp + 0x68]\n 12093: a2 = a0 + a3\n 12096: t0 = a2 <u a0\n 12099: a4 = u64 [sp + 0x20]\n 12102: a0 = u64 [sp + 0x40]\n 12105: a4 = a4 ^ a0\n 12108: a5 = u64 [sp + 0x30]\n 12111: a3 = u64 [sp + 0x48]\n 12114: a5 = a5 ^ a3\n 12117: t1 = a5 | a4\n 12120: a5 = u64 [sp + 0x18]\n 12123: a5 = ra ^ a5\n 12126: s1 = u64 [sp + 0x28]\n 12129: a4 = u64 [sp + 0x50]\n 12132: s1 = s1 ^ a4\n 12135: a5 = a5 | s1\n 12138: s1 = t1 | a5\n 12141: a5 = u64 [sp + 0x78]\n 12144: a5 = a5 + t0\n 12147: u64 [sp + 0x78] = a5\n 12150: t0 = a4\n 12152: a5 = a0\n 12154: u64 [sp + 0x58] = t2\n 12157: u64 [sp + 0x70] = a1\n 12160: u64 [sp + 0x68] = a2\n 12163: jump @172 if s1 != 0\n      : @176 (gas: 1)\n 12167: jump @178\n      : @177 (gas: 3)\n 12169: t2 = t0\n 12171: a1 = t1\n 12173: fallthrough\n      : @178 (gas: 12)\n 12174: a3 = u64 [sp + 0x10]\n 12177: u64 [a3] = t2\n 12179: u64 [a3 + 0x8] = a1\n 12182: u64 [a3 + 0x10] = a2\n 12185: a0 = u64 [sp + 0x78]\n 12188: u64 [a3 + 0x18] = a0\n 12191: sp = s0 + 0xffffffffffffff20\n 12195: ra = u64 [sp + 0xd8]\n 12199: s0 = u64 [sp + 0xd0]\n 12203: s1 = u64 [sp + 0xc8]\n 12207: sp = sp + 0xe0\n 12211: ret\n      : @179 (gas: 1)\n 12213: trap\n      : @180 (gas: 8)\n 12214: a0 = u64 [sp + 0xf0]\n 12218: a1 = u64 [sp + 0xf8]\n 12222: a2 = u64 [sp + 0xe8]\n 12226: a3 = u64 [sp + 0xe0]\n 12230: a1 = a1 | a2\n 12233: a0 = a0 | a3\n 12236: a0 = a0 | a1\n 12239: jump @188 if a0 != 0\n      : @181 (gas: 2)\n 12243: a0 = i32 [0x20004]\n 12248: jump @188 if a0 <=u 3\n      : @182 (gas: 52)\n 12253: u64 [sp + 184] = 0\n 12257: u64 [sp + 176] = 0\n 12261: u64 [sp + 168] = 0\n 12265: a0 = sp + 0xc0\n 12269: a1 = sp + 0xa0\n 12273: u64 [sp + 160] = 0\n 12277: ra = 0x9a\n 12281: sp = sp + 0xfffffffffffffe40\n 12285: u64 [sp + 0x1b8] = ra\n 12289: u64 [sp + 0x1b0] = s0\n 12293: u64 [sp + 0x1a8] = s1\n 12297: s0 = sp + 0x1c0\n 12301: sp = sp & 0xffffffffffffffe0\n 12304: u64 [sp + 0x18] = a0\n 12307: a3 = u64 [a1 + 0x18]\n 12310: u64 [sp + 0x88] = a3\n 12314: a2 = u64 [a1 + 0x10]\n 12317: u64 [sp + 0x90] = a2\n 12321: a0 = u64 [a1 + 0x8]\n 12324: u64 [sp + 0x98] = a0\n 12328: s1 = u64 [a1]\n 12330: u64 [sp + 0x158] = a3\n 12334: u64 [sp + 0x150] = a2\n 12338: u64 [sp + 0x148] = a0\n 12342: u64 [sp + 0x140] = s1\n 12346: u64 [sp + 408] = 0\n 12350: u64 [sp + 400] = 0\n 12354: u64 [sp + 392] = 0\n 12358: u64 [sp + 384] = 0\n 12362: u32 [sp + 352] = 0x20\n 12367: i32 a1 = sp + 0x140\n 12371: i32 a3 = sp + 0x180\n 12375: i32 a4 = sp + 0x160\n 12379: a2 = 0xffffffffffffffff\n 12382: a0 = 0\n 12384: ecalli 7 // 'get_storage'\n 12386: a0 = u64 [sp + 0x198]\n 12390: u64 [sp + 0xb8] = a0\n 12394: a3 = u64 [sp + 0x190]\n 12398: u64 [sp + 0xa0] = a3\n 12402: a1 = u64 [sp + 0x188]\n 12406: u64 [sp + 0xb0] = a1\n 12410: a2 = u64 [sp + 0x180]\n 12414: u64 [sp + 0xa8] = a2\n 12418: u64 [sp + 0x118] = a0\n 12422: u64 [sp + 0x110] = a3\n 12426: u64 [sp + 0x108] = a1\n 12430: a0 = sp + 0x120\n 12434: a1 = sp + 0x100\n 12438: u64 [sp + 0x100] = a2\n 12442: ra = 0x160\n 12446: jump @364\n      : @183 [@dyn 77] (gas: 11)\n 12449: a0 = u64 [sp + 0xc0]\n 12453: u64 [sp + 0x38] = a0\n 12456: a0 = u64 [sp + 0xc8]\n 12460: u64 [sp + 0x30] = a0\n 12463: a0 = u64 [sp + 0xd0]\n 12467: u64 [sp + 0x28] = a0\n 12470: a0 = u64 [sp + 0xd8]\n 12474: u64 [sp + 0x20] = a0\n 12477: a0 = 0x40\n 12480: a1 = 0x20\n 12483: ra = 156, jump @0\n      : @184 [@dyn 78] (gas: 111)\n 12489: a1 = u8 [a0 + 0x1]\n 12492: a2 = u8 [a0]\n 12494: a3 = u8 [a0 + 0x2]\n 12497: a4 = u8 [a0 + 0x3]\n 12500: a1 = a1 << 0x8\n 12503: a1 = a1 | a2\n 12506: a3 = a3 << 0x10\n 12509: a4 = a4 << 0x18\n 12512: a3 = a3 | a4\n 12515: a1 = a1 | a3\n 12518: a2 = u8 [a0 + 0x5]\n 12521: a3 = u8 [a0 + 0x4]\n 12524: a4 = u8 [a0 + 0x6]\n 12527: a5 = u8 [a0 + 0x7]\n 12530: a2 = a2 << 0x8\n 12533: a2 = a2 | a3\n 12536: a4 = a4 << 0x10\n 12539: a5 = a5 << 0x18\n 12542: a4 = a4 | a5\n 12545: a2 = a2 | a4\n 12548: a2 = a2 << 0x20\n 12551: t0 = a2 | a1\n 12554: a2 = u8 [a0 + 0x9]\n 12557: a3 = u8 [a0 + 0x8]\n 12560: a4 = u8 [a0 + 0xa]\n 12563: a5 = u8 [a0 + 0xb]\n 12566: a2 = a2 << 0x8\n 12569: a2 = a2 | a3\n 12572: a4 = a4 << 0x10\n 12575: a5 = a5 << 0x18\n 12578: a4 = a4 | a5\n 12581: a2 = a2 | a4\n 12584: a3 = u8 [a0 + 0xd]\n 12587: a4 = u8 [a0 + 0xc]\n 12590: a5 = u8 [a0 + 0xe]\n 12593: s1 = u8 [a0 + 0xf]\n 12596: a3 = a3 << 0x8\n 12599: a3 = a3 | a4\n 12602: a5 = a5 << 0x10\n 12605: s1 = s1 << 0x18\n 12608: a5 = a5 | s1\n 12611: a3 = a3 | a5\n 12614: a3 = a3 << 0x20\n 12617: a2 = a2 | a3\n 12620: a3 = u8 [a0 + 0x11]\n 12623: a4 = u8 [a0 + 0x10]\n 12626: a5 = u8 [a0 + 0x12]\n 12629: s1 = u8 [a0 + 0x13]\n 12632: a3 = a3 << 0x8\n 12635: a3 = a3 | a4\n 12638: a5 = a5 << 0x10\n 12641: s1 = s1 << 0x18\n 12644: a5 = a5 | s1\n 12647: a3 = a3 | a5\n 12650: a4 = u8 [a0 + 0x15]\n 12653: a5 = u8 [a0 + 0x14]\n 12656: s1 = u8 [a0 + 0x16]\n 12659: a1 = u8 [a0 + 0x17]\n 12662: a4 = a4 << 0x8\n 12665: a4 = a4 | a5\n 12668: s1 = s1 << 0x10\n 12671: a1 = a1 << 0x18\n 12674: a1 = a1 | s1\n 12677: a1 = a1 | a4\n 12680: a1 = a1 << 0x20\n 12683: a3 = a3 | a1\n 12686: a1 = u8 [a0 + 0x19]\n 12689: a4 = u8 [a0 + 0x18]\n 12692: a5 = u8 [a0 + 0x1a]\n 12695: s1 = u8 [a0 + 0x1b]\n 12698: a1 = a1 << 0x8\n 12701: a1 = a1 | a4\n 12704: a5 = a5 << 0x10\n 12707: s1 = s1 << 0x18\n 12710: a5 = a5 | s1\n 12713: a1 = a1 | a5\n 12716: a4 = u8 [a0 + 0x1d]\n 12719: a5 = u8 [a0 + 0x1c]\n 12722: s1 = u8 [a0 + 0x1e]\n 12725: a0 = u8 [a0 + 0x1f]\n 12728: a4 = a4 << 0x8\n 12731: a4 = a4 | a5\n 12734: s1 = s1 << 0x10\n 12737: a0 = a0 << 0x18\n 12740: a0 = a0 | s1\n 12743: a0 = a0 | a4\n 12746: a0 = a0 << 0x20\n 12749: a0 = a0 | a1\n 12752: a4 = reverse a0\n 12754: u64 [sp + 0x8] = a4\n 12757: a3 = reverse a3\n 12759: u64 [sp + 0x10] = a3\n 12762: a1 = reverse a2\n 12764: u64 [sp + 0x18] = a1\n 12767: s1 = reverse t0\n 12769: a0 = u64 [sp + 0x20]\n 12772: u64 [sp + 0x58] = a0\n 12775: a0 = u64 [sp + 0x28]\n 12778: u64 [sp + 0x50] = a0\n 12781: a0 = u64 [sp + 0x30]\n 12784: u64 [sp + 0x48] = a0\n 12787: a0 = u64 [sp + 0x38]\n 12790: u64 [sp + 0x40] = a0\n 12793: u64 [sp + 0x78] = s1\n 12796: u64 [sp + 0x70] = a1\n 12799: u64 [sp + 0x68] = a3\n 12802: a0 = sp + 0x80\n 12806: a1 = sp + 0x60\n 12809: a2 = sp + 0x40\n 12812: u64 [sp + 0x60] = a4\n 12815: ra = 158, jump @164\n      : @185 [@dyn 79] (gas: 12)\n 12821: a4 = u64 [sp + 0x10]\n 12824: a2 = u64 [sp + 0x8]\n 12827: u64 [sp + 0x38] = s1\n 12830: a0 = a4 | s1\n 12833: s1 = u64 [sp + 0x18]\n 12836: a1 = a2 | s1\n 12839: a1 = a1 | a0\n 12842: a1 = a1 >> 0x20\n 12845: a0 = a0 | s1\n 12848: a0 = a0 << 0x20\n 12851: a0 = a0 | a1\n 12854: jump @187 if a0 != 0\n      : @186 (gas: 29)\n 12857: a0 = u64 [sp + 0x88]\n 12861: a1 = u64 [sp + 0x98]\n 12865: u64 [sp + 0x30] = a1\n 12868: t1 = u64 [sp + 0x80]\n 12872: a1 = u64 [sp + 0x90]\n 12876: t2 = a0 ^ a4\n 12879: a5 = a0 <u a4\n 12882: ra = t1 <u a2\n 12885: a5 = ra if t2 == 0\n 12888: a3 = a1 - s1\n 12891: t2 = a3 - a5\n 12894: t0 = a3 <u a5\n 12897: a3 = a1 <u s1\n 12900: a1 = u64 [sp + 0x38]\n 12903: a5 = u64 [sp + 0x30]\n 12906: a5 = a5 - a1\n 12909: a5 = a5 - a3\n 12912: a5 = a5 - t0\n 12915: a0 = a0 - a4\n 12918: a0 = a0 - ra\n 12921: s1 = t1 - a2\n 12924: a0 = a0 | a5\n 12927: a1 = s1 | t2\n 12930: a1 = a1 | a0\n 12933: a0 = a0 | t2\n 12936: a1 = a1 >> 0x20\n 12939: a0 = a0 << 0x20\n 12942: a0 = a0 | a1\n 12945: jump @190 if a0 == 0\n      : @187 (gas: 1)\n 12948: trap\n      : @188 (gas: 3)\n 12949: a0 = 0\n 12951: a1 = 0\n 12953: ra = 160, jump @0\n      : @189 [@dyn 80] (gas: 5)\n 12959: i32 a1 = a0 + 0\n 12961: a0 = 0x1\n 12964: a2 = 0\n 12966: ecalli 12 // 'seal_return'\n 12968: fallthrough\n      : @190 (gas: 4)\n 12969: i32 a0 = a2 + 0\n 12971: i32 s1 = s1 + 0\n 12973: a1 = s1\n 12975: ra = 162, jump @0\n      : @191 [@dyn 81] (gas: 6)\n 12981: i32 a1 = a0 + 0\n 12983: a0 = 0\n 12985: a2 = s1\n 12987: ra = 0xa4\n 12991: ecalli 12 // 'seal_return'\n 12993: fallthrough\n      : @192 [@dyn 82] (gas: 9)\n 12994: a2 = u64 [a1 + 0x18]\n 12997: a3 = u64 [a1 + 0x10]\n 13000: a4 = u64 [a1 + 0x8]\n 13003: a1 = u64 [a1]\n 13005: u64 [a0 + 0x18] = a2\n 13008: u64 [a0 + 0x10] = a3\n 13011: u64 [a0 + 0x8] = a4\n 13014: u64 [a0] = a1\n 13016: ret\n      : @193 (gas: 8)\n 13018: a0 = u64 [sp + 0x30]\n 13021: a1 = u64 [sp + 0x38]\n 13024: a2 = u64 [sp + 0x28]\n 13027: a3 = u64 [sp + 0x20]\n 13030: a1 = a1 | a2\n 13033: a0 = a0 | a3\n 13036: a0 = a0 | a1\n 13039: jump @199 if a0 != 0\n      : @194 (gas: 2)\n 13043: a0 = i32 [0x20004]\n 13048: jump @199 if a0 <=u 35\n      : @195 (gas: 42)\n 13053: i32 a0 = sp + 0x40\n 13056: a1 = 0x4\n 13059: ecalli 3 // 'call_data_load'\n 13061: a1 = u64 [sp + 0x40]\n 13064: a0 = u64 [sp + 0x48]\n 13067: a2 = u64 [sp + 0x50]\n 13070: a3 = u64 [sp + 0x58]\n 13073: u64 [sp + 0x18] = a3\n 13076: u64 [sp + 0x10] = a2\n 13079: u64 [sp + 0x8] = a0\n 13082: a0 = sp\n 13084: u64 [sp] = a1\n 13086: ra = 0xa6\n 13090: sp = sp + 0xfffffffffffffaa0\n 13094: u64 [sp + 0x558] = ra\n 13098: u64 [sp + 0x550] = s0\n 13102: u64 [sp + 0x548] = s1\n 13106: s0 = sp + 0x560\n 13110: sp = sp & 0xffffffffffffffe0\n 13113: a1 = u64 [a0]\n 13115: u64 [sp + 0xd0] = a1\n 13119: a1 = u64 [a0 + 0x8]\n 13122: u64 [sp + 0xc8] = a1\n 13126: a1 = u64 [a0 + 0x10]\n 13129: u64 [sp + 0xd8] = a1\n 13133: s1 = u64 [a0 + 0x18]\n 13136: u64 [sp + 1304] = 0\n 13140: u64 [sp + 1296] = 0\n 13144: u64 [sp + 1288] = 0\n 13148: u64 [sp + 1280] = 0\n 13152: u64 [sp + 1336] = 0\n 13156: u64 [sp + 1328] = 0\n 13160: u64 [sp + 1320] = 0\n 13164: u64 [sp + 1312] = 0\n 13168: u32 [sp + 1248] = 0x20\n 13173: i32 a1 = sp + 0x500\n 13177: i32 a3 = sp + 0x520\n 13181: i32 a4 = sp + 0x4e0\n 13185: a2 = 0xffffffffffffffff\n 13188: a0 = 0\n 13190: ecalli 7 // 'get_storage'\n 13192: jump @417\n      : @196 [@dyn 83] (gas: 3)\n 13195: a0 = 0x40\n 13198: a1 = 0x20\n 13201: ra = 168, jump @0\n      : @197 [@dyn 84] (gas: 100)\n 13207: a1 = u8 [a0 + 0x11]\n 13210: a2 = u8 [a0 + 0x10]\n 13213: a3 = u8 [a0 + 0x12]\n 13216: a4 = u8 [a0 + 0x13]\n 13219: a1 = a1 << 0x8\n 13222: a1 = a1 | a2\n 13225: a3 = a3 << 0x10\n 13228: a4 = a4 << 0x18\n 13231: a3 = a3 | a4\n 13234: a1 = a1 | a3\n 13237: a2 = u8 [a0 + 0x15]\n 13240: a3 = u8 [a0 + 0x14]\n 13243: a4 = u8 [a0 + 0x16]\n 13246: a5 = u8 [a0 + 0x17]\n 13249: a2 = a2 << 0x8\n 13252: a2 = a2 | a3\n 13255: a4 = a4 << 0x10\n 13258: a5 = a5 << 0x18\n 13261: a4 = a4 | a5\n 13264: a2 = a2 | a4\n 13267: a2 = a2 << 0x20\n 13270: t0 = a2 | a1\n 13273: a2 = u8 [a0 + 0x1]\n 13276: a3 = u8 [a0]\n 13278: a4 = u8 [a0 + 0x2]\n 13281: a5 = u8 [a0 + 0x3]\n 13284: a2 = a2 << 0x8\n 13287: a2 = a2 | a3\n 13290: a4 = a4 << 0x10\n 13293: a5 = a5 << 0x18\n 13296: a4 = a4 | a5\n 13299: a2 = a2 | a4\n 13302: a3 = u8 [a0 + 0x5]\n 13305: a4 = u8 [a0 + 0x4]\n 13308: a5 = u8 [a0 + 0x6]\n 13311: a1 = u8 [a0 + 0x7]\n 13314: a3 = a3 << 0x8\n 13317: a3 = a3 | a4\n 13320: a5 = a5 << 0x10\n 13323: a1 = a1 << 0x18\n 13326: a1 = a1 | a5\n 13329: a1 = a1 | a3\n 13332: a1 = a1 << 0x20\n 13335: t1 = a1 | a2\n 13338: a1 = u8 [a0 + 0x19]\n 13341: a3 = u8 [a0 + 0x18]\n 13344: a4 = u8 [a0 + 0x1a]\n 13347: a5 = u8 [a0 + 0x1b]\n 13350: a1 = a1 << 0x8\n 13353: a1 = a1 | a3\n 13356: a4 = a4 << 0x10\n 13359: a5 = a5 << 0x18\n 13362: a4 = a4 | a5\n 13365: a1 = a1 | a4\n 13368: a3 = u8 [a0 + 0x1d]\n 13371: a4 = u8 [a0 + 0x1c]\n 13374: a5 = u8 [a0 + 0x1e]\n 13377: a2 = u8 [a0 + 0x1f]\n 13380: a3 = a3 << 0x8\n 13383: a3 = a3 | a4\n 13386: a5 = a5 << 0x10\n 13389: a2 = a2 << 0x18\n 13392: a2 = a2 | a5\n 13395: a2 = a2 | a3\n 13398: a2 = a2 << 0x20\n 13401: a3 = a2 | a1\n 13404: a1 = u8 [a0 + 0x9]\n 13407: a2 = u8 [a0 + 0x8]\n 13410: a4 = u8 [a0 + 0xa]\n 13413: a5 = u8 [a0 + 0xb]\n 13416: a1 = a1 << 0x8\n 13419: a1 = a1 | a2\n 13422: a4 = a4 << 0x10\n 13425: a5 = a5 << 0x18\n 13428: a4 = a4 | a5\n 13431: a1 = a1 | a4\n 13434: a2 = u8 [a0 + 0xd]\n 13437: a4 = u8 [a0 + 0xc]\n 13440: a5 = u8 [a0 + 0xe]\n 13443: a0 = u8 [a0 + 0xf]\n 13446: a2 = a2 << 0x8\n 13449: a2 = a2 | a4\n 13452: a5 = a5 << 0x10\n 13455: a0 = a0 << 0x18\n 13458: a0 = a0 | a5\n 13461: a0 = a0 | a2\n 13464: a0 = a0 << 0x20\n 13467: a0 = a0 | a1\n 13470: a1 = reverse a0\n 13472: a0 = reverse a3\n 13474: a2 = reverse t1\n 13476: a3 = reverse t0\n 13478: a2 = a2 | a3\n 13481: a3 = a0 | a1\n 13484: a3 = a3 | a2\n 13487: a3 = a3 >> 0x20\n 13490: a1 = a1 | a2\n 13493: a1 = a1 << 0x20\n 13496: a1 = a1 | a3\n 13499: jump @201 if a1 == 0\n      : @198 (gas: 1)\n 13502: trap\n      : @199 (gas: 3)\n 13503: a0 = 0\n 13505: a1 = 0\n 13507: ra = 170, jump @0\n      : @200 [@dyn 85] (gas: 7)\n 13513: i32 a1 = a0 + 0\n 13515: a0 = 0x1\n 13518: a2 = 0\n 13520: ecalli 12 // 'seal_return'\n 13522: i32 a0 = a0 + 0\n 13524: ra = 0xac\n 13528: jump @0\n      : @201 (gas: 2)\n 13531: i32 a0 = a0 + 0\n 13533: ra = 172, jump @0\n      : @202 [@dyn 86] (gas: 6)\n 13539: i32 a1 = a0 + 0\n 13541: a0 = 0\n 13543: a2 = 0\n 13545: ra = 0xae\n 13549: ecalli 12 // 'seal_return'\n 13551: fallthrough\n      : @203 [@dyn 87] (gas: 13)\n 13552: sp = sp + 0xffffffffffffffb0\n 13555: u64 [sp + 0x48] = ra\n 13558: u64 [sp + 0x40] = s0\n 13561: s0 = sp + 0x50\n 13564: sp = sp & 0xfffffffffffffff0\n 13567: u64 [sp + 48] = 0\n 13570: u64 [sp + 40] = 0\n 13573: u64 [sp + 32] = 0\n 13576: a0 = 0x4e487b7100000000\n 13586: a1 = sp + 0x20\n 13589: u64 [sp + 0x38] = a0\n 13592: a0 = 0\n 13594: ra = 176, jump @8\n      : @204 [@dyn 88] (gas: 7)\n 13600: u64 [sp + 24] = 0\n 13603: u64 [sp + 16] = 0\n 13606: u64 [sp + 0] = 0x32\n 13609: a0 = 0x4\n 13612: a1 = sp\n 13614: u64 [sp + 8] = 0\n 13617: ra = 178, jump @8\n      : @205 [@dyn 89] (gas: 3)\n 13623: a1 = 0x24\n 13626: a0 = 0\n 13628: ra = 180, jump @0\n      : @206 [@dyn 90] (gas: 6)\n 13634: i32 a1 = a0 + 0\n 13636: a0 = 0x1\n 13639: a2 = 0x24\n 13642: ra = 0xb6\n 13646: ecalli 12 // 'seal_return'\n 13648: fallthrough\n      : @207 [@dyn 91] (gas: 40)\n 13649: sp = sp + 0xffffffffffffffa0\n 13652: u64 [sp + 0x58] = ra\n 13655: u64 [sp + 0x50] = s0\n 13658: u64 [sp + 0x48] = s1\n 13661: s0 = sp + 0x60\n 13664: sp = sp & 0xffffffffffffffe0\n 13667: s1 = a0\n 13669: a0 = u64 [a1 + 0x18]\n 13672: a2 = u64 [a1 + 0x10]\n 13675: a3 = u64 [a1 + 0x8]\n 13678: a1 = u64 [a1]\n 13680: u64 [sp + 0x18] = a0\n 13683: u64 [sp + 0x10] = a2\n 13686: u64 [sp + 0x8] = a3\n 13689: u64 [sp] = a1\n 13691: u64 [sp + 56] = 0\n 13694: u64 [sp + 48] = 0\n 13697: u64 [sp + 40] = 0\n 13700: u64 [sp + 32] = 0\n 13703: u32 [sp + 64] = 0x20\n 13707: i32 a1 = sp + 0\n 13709: i32 a3 = sp + 0x20\n 13712: i32 a4 = sp + 0x40\n 13715: a2 = 0xffffffffffffffff\n 13718: a0 = 0\n 13720: ecalli 7 // 'get_storage'\n 13722: a0 = u64 [sp + 0x38]\n 13725: a1 = u64 [sp + 0x30]\n 13728: a2 = u64 [sp + 0x28]\n 13731: a3 = u64 [sp + 0x20]\n 13734: u64 [s1 + 0x18] = a0\n 13737: u64 [s1 + 0x10] = a1\n 13740: u64 [s1 + 0x8] = a2\n 13743: u64 [s1] = a3\n 13745: sp = s0 + 0xffffffffffffffa0\n 13748: ra = u64 [sp + 0x58]\n 13751: s0 = u64 [sp + 0x50]\n 13754: s1 = u64 [sp + 0x48]\n 13757: sp = sp + 0x60\n 13760: ret\n      : @208 (gas: 38)\n 13762: sp = sp + 0xfffffffffffffee0\n 13766: u64 [sp + 0x118] = ra\n 13770: u64 [sp + 0x110] = s0\n 13774: u64 [sp + 0x108] = s1\n 13778: s0 = sp + 0x120\n 13782: sp = sp & 0xffffffffffffffe0\n 13785: u64 [sp + 0x40] = a0\n 13788: a0 = u64 [a2]\n 13790: u64 [sp + 0x48] = a0\n 13793: a0 = u64 [a2 + 0x8]\n 13796: u64 [sp + 0x50] = a0\n 13799: a0 = u64 [a2 + 0x10]\n 13802: u64 [sp + 0x58] = a0\n 13805: s1 = u64 [a2 + 0x18]\n 13808: a4 = u64 [a1 + 0x18]\n 13811: a3 = u64 [a1 + 0x10]\n 13814: a2 = u64 [a1 + 0x8]\n 13817: a0 = u64 [a1]\n 13819: u64 [sp + 0x18] = a4\n 13822: u64 [sp + 0xb8] = a4\n 13826: u64 [sp + 0x20] = a3\n 13829: u64 [sp + 0xb0] = a3\n 13833: u64 [sp + 0x28] = a2\n 13836: u64 [sp + 0xa8] = a2\n 13840: u64 [sp + 0x30] = a0\n 13843: u64 [sp + 0xa0] = a0\n 13847: u64 [sp + 248] = 0\n 13851: u64 [sp + 240] = 0\n 13855: u64 [sp + 232] = 0\n 13859: u64 [sp + 224] = 0\n 13863: u32 [sp + 192] = 0x20\n 13868: i32 a1 = sp + 0xa0\n 13872: i32 a3 = sp + 0xe0\n 13876: i32 a4 = sp + 0xc0\n 13880: a2 = 0xffffffffffffffff\n 13883: a0 = 0\n 13885: ecalli 7 // 'get_storage'\n 13887: fallthrough\n      : @209 (gas: 20)\n 13888: a0 = u64 [sp + 0xf8]\n 13892: t0 = u64 [sp + 0xe0]\n 13896: a2 = u64 [sp + 0xf0]\n 13900: a3 = u64 [sp + 0xe8]\n 13904: a4 = a0 ^ s1\n 13907: u64 [sp + 0x38] = s1\n 13910: a1 = s1 <u a0\n 13913: a0 = u64 [sp + 0x58]\n 13916: a5 = a0 <u a2\n 13919: a5 = a1 if a4 != 0\n 13922: a1 = u64 [sp + 0x50]\n 13925: t1 = a3 ^ a1\n 13928: a3 = a1 <u a3\n 13931: a1 = u64 [sp + 0x48]\n 13934: a1 = a1 <u t0\n 13937: a1 = a3 if t1 != 0\n 13940: a0 = a0 ^ a2\n 13943: a0 = a0 | a4\n 13946: a1 = a5 if a0 != 0\n 13949: jump @213 if a1 == 0\n      : @210 (gas: 3)\n 13953: a1 = 0x20\n 13956: a0 = 0\n 13958: ra = 184, jump @0\n      : @211 [@dyn 92] (gas: 71)\n 13964: a1 = u64 [sp + 0x18]\n 13967: a1 = reverse a1\n 13969: a2 = u64 [sp + 0x20]\n 13972: a2 = reverse a2\n 13974: a3 = u64 [sp + 0x28]\n 13977: a3 = reverse a3\n 13979: a4 = u64 [sp + 0x30]\n 13982: a4 = reverse a4\n 13984: a5 = a4 >> 0x38\n 13987: u8 [a0 + 0x1f] = a5\n 13990: a5 = a4 >> 0x30\n 13993: u8 [a0 + 0x1e] = a5\n 13996: a5 = a4 >> 0x28\n 13999: u8 [a0 + 0x1d] = a5\n 14002: a5 = a4 >> 0x20\n 14005: u8 [a0 + 0x1c] = a5\n 14008: a5 = a4 >> 0x18\n 14011: u8 [a0 + 0x1b] = a5\n 14014: a5 = a4 >> 0x10\n 14017: u8 [a0 + 0x1a] = a5\n 14020: a5 = a4 >> 0x8\n 14023: u8 [a0 + 0x19] = a5\n 14026: u8 [a0 + 0x18] = a4\n 14029: u8 [a0 + 0x10] = a3\n 14032: a4 = a3 >> 0x38\n 14035: u8 [a0 + 0x17] = a4\n 14038: a4 = a3 >> 0x30\n 14041: u8 [a0 + 0x16] = a4\n 14044: a4 = a3 >> 0x28\n 14047: u8 [a0 + 0x15] = a4\n 14050: a4 = a3 >> 0x20\n 14053: u8 [a0 + 0x14] = a4\n 14056: a4 = a3 >> 0x18\n 14059: u8 [a0 + 0x13] = a4\n 14062: a4 = a3 >> 0x10\n 14065: u8 [a0 + 0x12] = a4\n 14068: a3 = a3 >> 0x8\n 14071: u8 [a0 + 0x11] = a3\n 14074: u8 [a0 + 0x8] = a2\n 14077: a3 = a2 >> 0x38\n 14080: u8 [a0 + 0xf] = a3\n 14083: a3 = a2 >> 0x30\n 14086: u8 [a0 + 0xe] = a3\n 14089: a3 = a2 >> 0x28\n 14092: u8 [a0 + 0xd] = a3\n 14095: a3 = a2 >> 0x20\n 14098: u8 [a0 + 0xc] = a3\n 14101: a3 = a2 >> 0x18\n 14104: u8 [a0 + 0xb] = a3\n 14107: a3 = a2 >> 0x10\n 14110: u8 [a0 + 0xa] = a3\n 14113: a2 = a2 >> 0x8\n 14116: u8 [a0 + 0x9] = a2\n 14119: u8 [a0] = a1\n 14121: a2 = a1 >> 0x38\n 14124: u8 [a0 + 0x7] = a2\n 14127: a2 = a1 >> 0x30\n 14130: u8 [a0 + 0x6] = a2\n 14133: a2 = a1 >> 0x28\n 14136: u8 [a0 + 0x5] = a2\n 14139: a2 = a1 >> 0x20\n 14142: u8 [a0 + 0x4] = a2\n 14145: a2 = a1 >> 0x18\n 14148: u8 [a0 + 0x3] = a2\n 14151: a2 = a1 >> 0x10\n 14154: u8 [a0 + 0x2] = a2\n 14157: a1 = a1 >> 0x8\n 14160: u8 [a0 + 0x1] = a1\n 14163: a1 = 0x20\n 14166: a0 = 0\n 14168: ra = 186, jump @0\n      : @212 [@dyn 93] (gas: 45)\n 14174: i32 a0 = a0 + 0\n 14176: i32 a2 = sp + 0xe0\n 14180: a1 = 0x20\n 14183: ecalli 8 // 'hash_keccak_256'\n 14185: a0 = u64 [sp + 0xe0]\n 14189: a1 = u64 [sp + 0xe8]\n 14193: a2 = u64 [sp + 0xf8]\n 14197: a3 = u64 [sp + 0xf0]\n 14201: t0 = reverse a0\n 14203: a1 = reverse a1\n 14205: a2 = reverse a2\n 14207: a3 = reverse a3\n 14209: a4 = u64 [sp + 0x50]\n 14212: a4 = a4 + a3\n 14215: a5 = u64 [sp + 0x48]\n 14218: a5 = a5 + a2\n 14221: a2 = a5 <u a2\n 14224: a4 = a4 + a2\n 14227: s1 = a4 ^ a3\n 14230: a3 = a4 <u a3\n 14233: a3 = a2 if s1 == 0\n 14236: a2 = u64 [sp + 0x58]\n 14239: a2 = a2 + a1\n 14242: a3 = a3 + a2\n 14245: s1 = a3 <u a2\n 14248: a0 = u64 [sp + 0x38]\n 14251: a0 = a0 + t0\n 14254: a1 = a2 <u a1\n 14257: a0 = a0 + a1\n 14260: a0 = a0 + s1\n 14263: a1 = u64 [sp + 0x40]\n 14266: u64 [a1 + 56] = 0\n 14269: u64 [a1 + 48] = 0\n 14272: u64 [a1 + 40] = 0\n 14275: u64 [a1 + 32] = 0\n 14278: u64 [a1] = a5\n 14280: u64 [a1 + 0x8] = a4\n 14283: u64 [a1 + 0x10] = a3\n 14286: u64 [a1 + 0x18] = a0\n 14289: sp = s0 + 0xfffffffffffffee0\n 14293: ra = u64 [sp + 0x118]\n 14297: s0 = u64 [sp + 0x110]\n 14301: s1 = u64 [sp + 0x108]\n 14305: sp = sp + 0x120\n 14309: ret\n      : @213 (gas: 8)\n 14311: u64 [sp + 144] = 0\n 14315: u64 [sp + 136] = 0\n 14319: u64 [sp + 128] = 0\n 14323: a0 = 0x4e487b7100000000\n 14333: a1 = sp + 0x80\n 14337: u64 [sp + 0x98] = a0\n 14341: a0 = 0\n 14343: ra = 188, jump @8\n      : @214 [@dyn 94] (gas: 7)\n 14349: u64 [sp + 120] = 0\n 14352: u64 [sp + 112] = 0\n 14355: u64 [sp + 96] = 0x32\n 14359: a0 = 0x4\n 14362: a1 = sp + 0x60\n 14365: u64 [sp + 104] = 0\n 14368: ra = 190, jump @8\n      : @215 [@dyn 95] (gas: 3)\n 14374: a1 = 0x24\n 14377: a0 = 0\n 14379: ra = 192, jump @0\n      : @216 [@dyn 96] (gas: 6)\n 14385: i32 a1 = a0 + 0\n 14387: a0 = 0x1\n 14390: a2 = 0x24\n 14393: ra = 0xc2\n 14397: ecalli 12 // 'seal_return'\n 14399: fallthrough\n      : @217 [@dyn 97] (gas: 9)\n 14400: a2 = u64 [a1 + 0x18]\n 14403: a3 = u64 [a1 + 0x10]\n 14406: a4 = u64 [a1 + 0x8]\n 14409: a1 = u64 [a1]\n 14411: u64 [a0 + 0x18] = a2\n 14414: u64 [a0 + 0x10] = a3\n 14417: u64 [a0 + 0x8] = a4\n 14420: u64 [a0] = a1\n 14422: ret\n      : @218 (gas: 20)\n 14424: t2 = s1\n 14426: t1 = u64 [sp + 0x50]\n 14429: t0 = u64 [sp + 0x48]\n 14432: a0 = u64 [sp + 0x118]\n 14436: a1 = u64 [sp + 0x100]\n 14440: s1 = u64 [sp + 0x110]\n 14444: a3 = u64 [sp + 0x108]\n 14448: a4 = a0 ^ t0\n 14451: a0 = t0 <u a0\n 14454: a2 = u64 [sp + 0x58]\n 14457: a5 = a2 <u s1\n 14460: a5 = a0 if a4 != 0\n 14463: a0 = a3 ^ t1\n 14466: a3 = t1 <u a3\n 14469: a1 = t2 <u a1\n 14472: a1 = a3 if a0 != 0\n 14475: a0 = s1 ^ a2\n 14478: a0 = a0 | a4\n 14481: a1 = a5 if a0 != 0\n 14484: jump @221 if a1 == 0\n      : @219 (gas: 12)\n 14488: u64 [sp + 0x60] = t2\n 14491: u64 [sp + 152] = 0\n 14495: u64 [sp + 144] = 0\n 14499: u64 [sp + 136] = 0\n 14503: u64 [sp + 128] = 0\n 14507: u64 [sp + 0x68] = t1\n 14510: u64 [sp + 0x70] = a2\n 14513: a0 = sp + 0xa0\n 14517: a1 = sp + 0x80\n 14521: a2 = sp + 0x60\n 14524: u64 [sp + 0x78] = t0\n 14527: ra = 196, jump @208\n      : @220 [@dyn 98] (gas: 117)\n 14533: a3 = u64 [sp + 0xb8]\n 14537: u64 [sp + 0x40] = a3\n 14540: a2 = u64 [sp + 0xb0]\n 14544: u64 [sp + 0x48] = a2\n 14547: a1 = u64 [sp + 0xa8]\n 14551: u64 [sp + 0x50] = a1\n 14554: a0 = u64 [sp + 0xa0]\n 14558: u64 [sp + 0x58] = a0\n 14561: u64 [sp + 0xf8] = a3\n 14565: u64 [sp + 0xf0] = a2\n 14569: u64 [sp + 0xe8] = a1\n 14573: u64 [sp + 0xe0] = a0\n 14577: u64 [sp + 280] = 0\n 14581: u64 [sp + 272] = 0\n 14585: u64 [sp + 264] = 0\n 14589: u64 [sp + 256] = 0\n 14593: u32 [sp + 288] = 0x20\n 14598: i32 a1 = sp + 0xe0\n 14602: i32 a3 = sp + 0x100\n 14606: i32 a4 = sp + 0x120\n 14610: a2 = 0xffffffffffffffff\n 14613: a0 = 0\n 14615: ecalli 7 // 'get_storage'\n 14617: a0 = u64 [sp + 0x100]\n 14621: u64 [sp + 0x38] = a0\n 14624: a0 = u64 [sp + 0x108]\n 14628: u64 [sp + 0x30] = a0\n 14631: a0 = u32 [sp + 0x110]\n 14635: u64 [sp + 0x28] = a0\n 14638: a0 = u64 [sp + 0x40]\n 14641: u64 [sp + 0xf8] = a0\n 14645: a0 = u64 [sp + 0x48]\n 14648: u64 [sp + 0xf0] = a0\n 14652: a0 = u64 [sp + 0x50]\n 14655: u64 [sp + 0xe8] = a0\n 14659: a0 = u64 [sp + 0x58]\n 14662: u64 [sp + 0xe0] = a0\n 14666: u64 [sp + 280] = 0\n 14670: u64 [sp + 272] = 0\n 14674: u64 [sp + 264] = 0\n 14678: u64 [sp + 256] = 0\n 14682: u32 [sp + 288] = 0x20\n 14687: i32 a1 = sp + 0xe0\n 14691: i32 a3 = sp + 0x100\n 14695: i32 a4 = sp + 0x120\n 14699: a2 = 0xffffffffffffffff\n 14702: a0 = 0\n 14704: ecalli 7 // 'get_storage'\n 14706: a0 = u8 [sp + 0x114]\n 14710: u64 [sp + 0x20] = a0\n 14713: a0 = u64 [sp + 0x40]\n 14716: u64 [sp + 0xf8] = a0\n 14720: a0 = u64 [sp + 0x48]\n 14723: u64 [sp + 0xf0] = a0\n 14727: a0 = u64 [sp + 0x50]\n 14730: u64 [sp + 0xe8] = a0\n 14734: a0 = u64 [sp + 0x58]\n 14737: u64 [sp + 0xe0] = a0\n 14741: u64 [sp + 280] = 0\n 14745: u64 [sp + 272] = 0\n 14749: u64 [sp + 264] = 0\n 14753: u64 [sp + 256] = 0\n 14757: u32 [sp + 288] = 0x20\n 14762: i32 a1 = sp + 0xe0\n 14766: i32 a3 = sp + 0x100\n 14770: i32 a4 = sp + 0x120\n 14774: a2 = 0xffffffffffffffff\n 14777: a0 = 0\n 14779: ecalli 7 // 'get_storage'\n 14781: s1 = u8 [sp + 0x115]\n 14785: a0 = u64 [sp + 0x40]\n 14788: u64 [sp + 0xf8] = a0\n 14792: a0 = u64 [sp + 0x48]\n 14795: u64 [sp + 0xf0] = a0\n 14799: a0 = u64 [sp + 0x50]\n 14802: u64 [sp + 0xe8] = a0\n 14806: a0 = u64 [sp + 0x58]\n 14809: u64 [sp + 0xe0] = a0\n 14813: u64 [sp + 280] = 0\n 14817: u64 [sp + 272] = 0\n 14821: u64 [sp + 264] = 0\n 14825: u64 [sp + 256] = 0\n 14829: u32 [sp + 288] = 0x20\n 14834: i32 a1 = sp + 0xe0\n 14838: i32 a3 = sp + 0x100\n 14842: i32 a4 = sp + 0x120\n 14846: a2 = 0xffffffffffffffff\n 14849: a0 = 0\n 14851: ecalli 7 // 'get_storage'\n 14853: a0 = u8 [sp + 0x116]\n 14857: a1 = u64 [sp + 0x18]\n 14860: u64 [a1 + 120] = 0\n 14863: u64 [a1 + 112] = 0\n 14866: u64 [a1 + 104] = 0\n 14869: u64 [a1 + 0x60] = a0\n 14872: u64 [a1 + 88] = 0\n 14875: u64 [a1 + 80] = 0\n 14878: u64 [a1 + 72] = 0\n 14881: u64 [a1 + 0x40] = s1\n 14884: u64 [a1 + 56] = 0\n 14887: u64 [a1 + 48] = 0\n 14890: u64 [a1 + 40] = 0\n 14893: a0 = u64 [sp + 0x20]\n 14896: u64 [a1 + 0x20] = a0\n 14899: u64 [a1 + 24] = 0\n 14902: a0 = u64 [sp + 0x28]\n 14905: u64 [a1 + 0x10] = a0\n 14908: a0 = u64 [sp + 0x30]\n 14911: u64 [a1 + 0x8] = a0\n 14914: a0 = u64 [sp + 0x38]\n 14917: u64 [a1] = a0\n 14919: sp = s0 + 0xfffffffffffffec0\n 14923: ra = u64 [sp + 0x138]\n 14927: s0 = u64 [sp + 0x130]\n 14931: s1 = u64 [sp + 0x128]\n 14935: sp = sp + 0x140\n 14939: ret\n      : @221 (gas: 2)\n 14941: a0 = 0\n 14943: ra = 198, jump @0\n      : @222 [@dyn 99] (gas: 6)\n 14949: i32 a1 = a0 + 0\n 14951: a0 = 0x1\n 14954: a2 = 0\n 14956: ra = 0xc8\n 14960: ecalli 12 // 'seal_return'\n 14962: fallthrough\n      : @223 [@dyn 100] (gas: 21)\n 14963: sp = sp + 0xffffffffffffff80\n 14966: u64 [sp + 0x78] = ra\n 14969: u64 [sp + 0x70] = s0\n 14972: u64 [sp + 0x68] = s1\n 14975: s0 = u64 [a1 + 0x10]\n 14978: t0 = u64 [a1 + 0x18]\n 14981: s1 = u64 [a1 + 0x8]\n 14984: a1 = u64 [a1]\n 14986: u64 [sp + 0x58] = s1\n 14989: u64 [sp + 0x40] = t0\n 14992: t0 = s1 | t0\n 14995: u64 [sp + 0x60] = a1\n 14998: s1 = a1 | s0\n 15001: s1 = s1 | t0\n 15004: s1 = s1 >> 0x20\n 15007: u64 [sp + 0x48] = s0\n 15010: a1 = t0 | s0\n 15013: a1 = a1 << 0x20\n 15016: a1 = a1 | s1\n 15019: u64 [sp + 0x28] = a0\n 15022: jump @232 if a1 != 0\n      : @224 (gas: 22)\n 15026: a0 = u64 [a5 + 0x18]\n 15029: u64 [sp + 0x18] = a0\n 15032: a0 = u64 [a5 + 0x10]\n 15035: u64 [sp + 0x8] = a0\n 15038: a0 = u64 [a5 + 0x8]\n 15041: u64 [sp + 0x10] = a0\n 15044: a0 = u64 [a5]\n 15046: u64 [sp] = a0\n 15048: a0 = u64 [a4]\n 15050: u64 [sp + 0x20] = a0\n 15053: a0 = u64 [a2 + 0x10]\n 15056: a1 = u64 [a3]\n 15058: u64 [sp + 0x30] = a1\n 15061: s1 = u64 [a2 + 0x8]\n 15064: a1 = u64 [a2]\n 15066: u64 [sp + 0x38] = a1\n 15069: a0 = a0 << 0x20\n 15072: s0 = a0 >> 0x20\n 15075: a0 = i32 [sp + 0x60]\n 15078: a1 = 0x20\n 15081: u64 [sp + 0x50] = a0\n 15084: ra = 202, jump @0\n      : @225 [@dyn 101] (gas: 65)\n 15090: a1 = reverse s0\n 15092: a2 = reverse s1\n 15094: a3 = u64 [sp + 0x38]\n 15097: a3 = reverse a3\n 15099: a4 = a3 >> 0x38\n 15102: u8 [a0 + 0x1f] = a4\n 15105: a4 = a3 >> 0x30\n 15108: u8 [a0 + 0x1e] = a4\n 15111: a4 = a3 >> 0x28\n 15114: u8 [a0 + 0x1d] = a4\n 15117: a4 = a3 >> 0x20\n 15120: u8 [a0 + 0x1c] = a4\n 15123: a4 = a3 >> 0x18\n 15126: u8 [a0 + 0x1b] = a4\n 15129: a4 = a3 >> 0x10\n 15132: u8 [a0 + 0x1a] = a4\n 15135: a4 = a3 >> 0x8\n 15138: u8 [a0 + 0x19] = a4\n 15141: u8 [a0 + 0x18] = a3\n 15144: u8 [a0 + 0x10] = a2\n 15147: u8 [a0 + 11] = 0\n 15150: u8 [a0 + 10] = 0\n 15153: u8 [a0 + 9] = 0\n 15156: u8 [a0 + 7] = 0\n 15159: u8 [a0 + 6] = 0\n 15162: u8 [a0 + 5] = 0\n 15165: u8 [a0 + 4] = 0\n 15168: u8 [a0 + 3] = 0\n 15171: u8 [a0 + 2] = 0\n 15174: u8 [a0 + 1] = 0\n 15177: u8 [a0 + 0] = 0\n 15179: a3 = a2 >> 0x38\n 15182: u8 [a0 + 0x17] = a3\n 15185: a3 = a2 >> 0x30\n 15188: u8 [a0 + 0x16] = a3\n 15191: a3 = a2 >> 0x28\n 15194: u8 [a0 + 0x15] = a3\n 15197: a3 = a2 >> 0x20\n 15200: u8 [a0 + 0x14] = a3\n 15203: a3 = a2 >> 0x18\n 15206: u8 [a0 + 0x13] = a3\n 15209: a3 = a2 >> 0x10\n 15212: u8 [a0 + 0x12] = a3\n 15215: a2 = a2 >> 0x8\n 15218: u8 [a0 + 0x11] = a2\n 15221: u8 [a0 + 0x8] = a1\n 15224: a2 = a1 >> 0x38\n 15227: u8 [a0 + 0xf] = a2\n 15230: a2 = a1 >> 0x30\n 15233: u8 [a0 + 0xe] = a2\n 15236: a2 = a1 >> 0x28\n 15239: u8 [a0 + 0xd] = a2\n 15242: a1 = a1 >> 0x20\n 15245: a2 = u64 [sp + 0x48]\n 15248: a4 = u64 [sp + 0x40]\n 15251: a4 = a4 | a2\n 15254: s1 = 0x100000000\n 15264: a2 = 0xffffffe0\n 15274: a3 = u64 [sp + 0x60]\n 15277: a2 = a3 <u a2\n 15280: a3 = u64 [sp + 0x58]\n 15283: a2 = 0 if a3 != 0\n 15285: a2 = 0 if a4 != 0\n 15287: u8 [a0 + 0xc] = a1\n 15290: jump @232 if a2 == 0\n      : @226 (gas: 5)\n 15294: s0 = a4\n 15296: a0 = u64 [sp + 0x50]\n 15299: i32 a0 = a0 + 0x20\n 15302: a1 = 0x20\n 15305: ra = 204, jump @0\n      : @227 [@dyn 102] (gas: 40)\n 15311: a1 = u64 [sp + 0x30]\n 15314: u8 [a0 + 0x1f] = a1\n 15317: u8 [a0 + 30] = 0\n 15320: u8 [a0 + 29] = 0\n 15323: u8 [a0 + 28] = 0\n 15326: u8 [a0 + 27] = 0\n 15329: u8 [a0 + 26] = 0\n 15332: u8 [a0 + 25] = 0\n 15335: u8 [a0 + 24] = 0\n 15338: u8 [a0 + 23] = 0\n 15341: u8 [a0 + 22] = 0\n 15344: u8 [a0 + 21] = 0\n 15347: u8 [a0 + 20] = 0\n 15350: u8 [a0 + 19] = 0\n 15353: u8 [a0 + 18] = 0\n 15356: u8 [a0 + 17] = 0\n 15359: u8 [a0 + 16] = 0\n 15362: u8 [a0 + 15] = 0\n 15365: u8 [a0 + 14] = 0\n 15368: u8 [a0 + 13] = 0\n 15371: u8 [a0 + 12] = 0\n 15374: u8 [a0 + 11] = 0\n 15377: u8 [a0 + 10] = 0\n 15380: u8 [a0 + 9] = 0\n 15383: u8 [a0 + 8] = 0\n 15386: u8 [a0 + 7] = 0\n 15389: u8 [a0 + 6] = 0\n 15392: u8 [a0 + 5] = 0\n 15395: u8 [a0 + 4] = 0\n 15398: u8 [a0 + 3] = 0\n 15401: u8 [a0 + 2] = 0\n 15404: u8 [a0 + 1] = 0\n 15407: a1 = s1 + 0xffffffffffffffc0\n 15410: a2 = u64 [sp + 0x60]\n 15413: a1 = a2 <u a1\n 15416: a2 = u64 [sp + 0x58]\n 15419: a1 = 0 if a2 != 0\n 15421: a1 = 0 if s0 != 0\n 15423: u8 [a0 + 0] = 0\n 15425: jump @232 if a1 == 0\n      : @228 (gas: 4)\n 15429: a0 = u64 [sp + 0x50]\n 15432: i32 a0 = a0 + 0x40\n 15435: a1 = 0x20\n 15438: ra = 206, jump @0\n      : @229 [@dyn 103] (gas: 40)\n 15444: a1 = u64 [sp + 0x20]\n 15447: u8 [a0 + 0x1f] = a1\n 15450: u8 [a0 + 30] = 0\n 15453: u8 [a0 + 29] = 0\n 15456: u8 [a0 + 28] = 0\n 15459: u8 [a0 + 27] = 0\n 15462: u8 [a0 + 26] = 0\n 15465: u8 [a0 + 25] = 0\n 15468: u8 [a0 + 24] = 0\n 15471: u8 [a0 + 23] = 0\n 15474: u8 [a0 + 22] = 0\n 15477: u8 [a0 + 21] = 0\n 15480: u8 [a0 + 20] = 0\n 15483: u8 [a0 + 19] = 0\n 15486: u8 [a0 + 18] = 0\n 15489: u8 [a0 + 17] = 0\n 15492: u8 [a0 + 16] = 0\n 15495: u8 [a0 + 15] = 0\n 15498: u8 [a0 + 14] = 0\n 15501: u8 [a0 + 13] = 0\n 15504: u8 [a0 + 12] = 0\n 15507: u8 [a0 + 11] = 0\n 15510: u8 [a0 + 10] = 0\n 15513: u8 [a0 + 9] = 0\n 15516: u8 [a0 + 8] = 0\n 15519: u8 [a0 + 7] = 0\n 15522: u8 [a0 + 6] = 0\n 15525: u8 [a0 + 5] = 0\n 15528: u8 [a0 + 4] = 0\n 15531: u8 [a0 + 3] = 0\n 15534: u8 [a0 + 2] = 0\n 15537: u8 [a0 + 1] = 0\n 15540: a1 = 0xffffffa0\n 15550: a2 = u64 [sp + 0x60]\n 15553: a1 = a2 <u a1\n 15556: a2 = u64 [sp + 0x58]\n 15559: a1 = 0 if a2 != 0\n 15561: a1 = 0 if s0 != 0\n 15563: u8 [a0 + 0] = 0\n 15565: jump @232 if a1 == 0\n      : @230 (gas: 27)\n 15569: a0 = u64 [sp + 0x60]\n 15572: s1 = a0 + 0x80\n 15576: a0 = s1 <u a0\n 15579: a1 = u64 [sp + 0x58]\n 15582: a2 = a1 + a0\n 15585: u64 [sp + 0x60] = a2\n 15588: s0 = a2 <u a1\n 15591: s0 = a0 if a0 == 0\n 15594: a0 = u64 [sp + 0x48]\n 15597: s0 = s0 + a0\n 15600: a0 = s0 <u a0\n 15603: a1 = u64 [sp + 0x40]\n 15606: a0 = a0 + a1\n 15609: u64 [sp + 0x58] = a0\n 15612: a0 = u64 [sp + 0x8]\n 15615: a1 = u64 [sp]\n 15617: a0 = a0 | a1\n 15620: a1 = u64 [sp + 0x18]\n 15623: a2 = u64 [sp + 0x10]\n 15626: a1 = a1 | a2\n 15629: a0 = a0 | a1\n 15632: a0 = a0 >u 0\n 15634: u64 [sp + 0x48] = a0\n 15637: a0 = u64 [sp + 0x50]\n 15640: i32 a0 = a0 + 0x60\n 15643: a1 = 0x20\n 15646: ra = 208, jump @0\n      : @231 [@dyn 104] (gas: 45)\n 15652: u8 [a0 + 30] = 0\n 15655: u8 [a0 + 29] = 0\n 15658: u8 [a0 + 28] = 0\n 15661: u8 [a0 + 27] = 0\n 15664: u8 [a0 + 26] = 0\n 15667: u8 [a0 + 25] = 0\n 15670: u8 [a0 + 24] = 0\n 15673: u8 [a0 + 23] = 0\n 15676: u8 [a0 + 22] = 0\n 15679: u8 [a0 + 21] = 0\n 15682: u8 [a0 + 20] = 0\n 15685: u8 [a0 + 19] = 0\n 15688: u8 [a0 + 18] = 0\n 15691: u8 [a0 + 17] = 0\n 15694: u8 [a0 + 16] = 0\n 15697: u8 [a0 + 15] = 0\n 15700: u8 [a0 + 14] = 0\n 15703: u8 [a0 + 13] = 0\n 15706: u8 [a0 + 12] = 0\n 15709: u8 [a0 + 11] = 0\n 15712: u8 [a0 + 10] = 0\n 15715: u8 [a0 + 9] = 0\n 15718: u8 [a0 + 8] = 0\n 15721: u8 [a0 + 7] = 0\n 15724: u8 [a0 + 6] = 0\n 15727: u8 [a0 + 5] = 0\n 15730: u8 [a0 + 4] = 0\n 15733: u8 [a0 + 3] = 0\n 15736: u8 [a0 + 2] = 0\n 15739: u8 [a0 + 1] = 0\n 15742: u8 [a0 + 0] = 0\n 15744: a1 = u64 [sp + 0x48]\n 15747: u8 [a0 + 0x1f] = a1\n 15750: a0 = u64 [sp + 0x28]\n 15753: u64 [a0] = s1\n 15755: a1 = u64 [sp + 0x58]\n 15758: u64 [a0 + 0x18] = a1\n 15761: a1 = u64 [sp + 0x60]\n 15764: u64 [a0 + 0x8] = a1\n 15767: u64 [a0 + 0x10] = s0\n 15770: ra = u64 [sp + 0x78]\n 15773: s0 = u64 [sp + 0x70]\n 15776: s1 = u64 [sp + 0x68]\n 15779: sp = sp + 0x80\n 15783: ret\n      : @232 (gas: 1)\n 15785: trap\n      : @233 (gas: 8)\n 15786: a0 = u64 [sp + 0x130]\n 15790: a1 = u64 [sp + 0x138]\n 15794: a2 = u64 [sp + 0x128]\n 15798: a3 = u64 [sp + 0x120]\n 15802: a1 = a1 | a2\n 15805: a0 = a0 | a3\n 15808: a0 = a0 | a1\n 15811: jump @245 if a0 != 0\n      : @234 (gas: 2)\n 15815: a0 = i32 [0x20004]\n 15820: jump @245 if a0 <=u 35\n      : @235 (gas: 44)\n 15825: i32 a0 = sp + 0x140\n 15829: a1 = 0x4\n 15832: ecalli 3 // 'call_data_load'\n 15834: a2 = u64 [sp + 0x140]\n 15838: a0 = u64 [sp + 0x148]\n 15842: a1 = u64 [sp + 0x150]\n 15846: a3 = u64 [sp + 0x158]\n 15850: u64 [sp + 0x98] = a3\n 15854: u64 [sp + 0x90] = a1\n 15858: u64 [sp + 0x88] = a0\n 15862: a0 = sp + 0xa0\n 15866: a1 = sp + 0x80\n 15870: u64 [sp + 0x80] = a2\n 15874: ra = 0xd2\n 15878: sp = sp + 0xfffffffffffffec0\n 15882: u64 [sp + 0x138] = ra\n 15886: u64 [sp + 0x130] = s0\n 15890: u64 [sp + 0x128] = s1\n 15894: s0 = sp + 0x140\n 15898: sp = sp & 0xffffffffffffffe0\n 15901: u64 [sp + 0x18] = a0\n 15904: s1 = u64 [a1]\n 15906: a0 = u64 [a1 + 0x8]\n 15909: u64 [sp + 0x50] = a0\n 15912: a0 = u64 [a1 + 0x10]\n 15915: u64 [sp + 0x58] = a0\n 15918: a0 = u64 [a1 + 0x18]\n 15921: u64 [sp + 0x48] = a0\n 15924: u64 [sp + 248] = 0\n 15928: u64 [sp + 240] = 0\n 15932: u64 [sp + 232] = 0\n 15936: u64 [sp + 224] = 0\n 15940: u64 [sp + 280] = 0\n 15944: u64 [sp + 272] = 0\n 15948: u64 [sp + 264] = 0\n 15952: u64 [sp + 256] = 0\n 15956: u32 [sp + 288] = 0x20\n 15961: i32 a1 = sp + 0xe0\n 15965: i32 a3 = sp + 0x100\n 15969: i32 a4 = sp + 0x120\n 15973: a2 = 0xffffffffffffffff\n 15976: a0 = 0\n 15978: ecalli 7 // 'get_storage'\n 15980: jump @218\n      : @236 [@dyn 105] (gas: 21)\n 15983: a0 = u64 [sp + 0x118]\n 15987: u64 [sp + 0x48] = a0\n 15990: a0 = u64 [sp + 0x110]\n 15994: u64 [sp + 0x38] = a0\n 15997: a0 = u64 [sp + 0x108]\n 16001: u64 [sp + 0x40] = a0\n 16004: a0 = u64 [sp + 0x100]\n 16008: u64 [sp + 0x30] = a0\n 16011: a0 = u64 [sp + 0xe0]\n 16015: u64 [sp + 0x50] = a0\n 16018: a0 = u64 [sp + 0xc0]\n 16022: u64 [sp + 0x58] = a0\n 16025: a0 = u64 [sp + 0xb0]\n 16029: u64 [sp + 0x68] = a0\n 16032: a0 = u64 [sp + 0xa8]\n 16036: u64 [sp + 0x70] = a0\n 16039: a0 = u64 [sp + 0xa0]\n 16043: u64 [sp + 0x78] = a0\n 16046: a0 = 0x40\n 16049: a1 = 0x20\n 16052: ra = 212, jump @0\n      : @237 [@dyn 106] (gas: 100)\n 16058: a1 = u8 [a0 + 0x11]\n 16061: a2 = u8 [a0 + 0x10]\n 16064: a3 = u8 [a0 + 0x12]\n 16067: a4 = u8 [a0 + 0x13]\n 16070: a1 = a1 << 0x8\n 16073: a1 = a1 | a2\n 16076: a3 = a3 << 0x10\n 16079: a4 = a4 << 0x18\n 16082: a3 = a3 | a4\n 16085: a1 = a1 | a3\n 16088: a2 = u8 [a0 + 0x15]\n 16091: a3 = u8 [a0 + 0x14]\n 16094: a4 = u8 [a0 + 0x16]\n 16097: a5 = u8 [a0 + 0x17]\n 16100: a2 = a2 << 0x8\n 16103: a2 = a2 | a3\n 16106: a4 = a4 << 0x10\n 16109: a5 = a5 << 0x18\n 16112: a4 = a4 | a5\n 16115: a2 = a2 | a4\n 16118: a2 = a2 << 0x20\n 16121: t0 = a2 | a1\n 16124: a2 = u8 [a0 + 0x1]\n 16127: a3 = u8 [a0]\n 16129: a4 = u8 [a0 + 0x2]\n 16132: a5 = u8 [a0 + 0x3]\n 16135: a2 = a2 << 0x8\n 16138: a2 = a2 | a3\n 16141: a4 = a4 << 0x10\n 16144: a5 = a5 << 0x18\n 16147: a4 = a4 | a5\n 16150: a2 = a2 | a4\n 16153: a3 = u8 [a0 + 0x5]\n 16156: a4 = u8 [a0 + 0x4]\n 16159: a5 = u8 [a0 + 0x6]\n 16162: s1 = u8 [a0 + 0x7]\n 16165: a3 = a3 << 0x8\n 16168: a3 = a3 | a4\n 16171: a5 = a5 << 0x10\n 16174: s1 = s1 << 0x18\n 16177: a5 = a5 | s1\n 16180: a3 = a3 | a5\n 16183: a3 = a3 << 0x20\n 16186: a2 = a2 | a3\n 16189: a3 = u8 [a0 + 0x19]\n 16192: a4 = u8 [a0 + 0x18]\n 16195: a5 = u8 [a0 + 0x1a]\n 16198: s1 = u8 [a0 + 0x1b]\n 16201: a3 = a3 << 0x8\n 16204: a3 = a3 | a4\n 16207: a5 = a5 << 0x10\n 16210: s1 = s1 << 0x18\n 16213: a5 = a5 | s1\n 16216: a3 = a3 | a5\n 16219: a4 = u8 [a0 + 0x1d]\n 16222: a5 = u8 [a0 + 0x1c]\n 16225: s1 = u8 [a0 + 0x1e]\n 16228: a1 = u8 [a0 + 0x1f]\n 16231: a4 = a4 << 0x8\n 16234: a4 = a4 | a5\n 16237: s1 = s1 << 0x10\n 16240: a1 = a1 << 0x18\n 16243: a1 = a1 | s1\n 16246: a1 = a1 | a4\n 16249: a1 = a1 << 0x20\n 16252: a3 = a3 | a1\n 16255: a1 = u8 [a0 + 0x9]\n 16258: a4 = u8 [a0 + 0x8]\n 16261: a5 = u8 [a0 + 0xa]\n 16264: s1 = u8 [a0 + 0xb]\n 16267: a1 = a1 << 0x8\n 16270: a1 = a1 | a4\n 16273: a5 = a5 << 0x10\n 16276: s1 = s1 << 0x18\n 16279: a5 = a5 | s1\n 16282: a1 = a1 | a5\n 16285: a4 = u8 [a0 + 0xd]\n 16288: a5 = u8 [a0 + 0xc]\n 16291: s1 = u8 [a0 + 0xe]\n 16294: a0 = u8 [a0 + 0xf]\n 16297: a4 = a4 << 0x8\n 16300: a4 = a4 | a5\n 16303: s1 = s1 << 0x10\n 16306: a0 = a0 << 0x18\n 16309: a0 = a0 | s1\n 16312: a0 = a0 | a4\n 16315: a0 = a0 << 0x20\n 16318: a0 = a0 | a1\n 16321: s1 = reverse a0\n 16323: a3 = reverse a3\n 16325: a4 = reverse a2\n 16327: a2 = reverse t0\n 16329: a0 = a2 | a4\n 16332: a1 = a3 | s1\n 16335: a1 = a1 | a0\n 16338: a1 = a1 >> 0x20\n 16341: a0 = a0 | s1\n 16344: a0 = a0 << 0x20\n 16347: a0 = a0 | a1\n 16350: jump @244 if a0 != 0\n      : @238 (gas: 11)\n 16354: a0 = u64 [sp + 0x68]\n 16357: a0 = a0 << 0x20\n 16360: a0 = a0 >> 0x20\n 16363: u64 [sp + 0x20] = a0\n 16366: i32 a0 = a3 + 0\n 16368: a1 = 0x20\n 16371: u64 [sp + 0x18] = a0\n 16374: u64 [sp + 0x68] = a3\n 16377: u64 [sp + 0x60] = a2\n 16380: u64 [sp + 0x28] = a4\n 16383: ra = 214, jump @0\n      : @239 [@dyn 107] (gas: 66)\n 16389: a1 = u64 [sp + 0x20]\n 16392: a1 = reverse a1\n 16394: a2 = u64 [sp + 0x70]\n 16397: a2 = reverse a2\n 16399: a3 = u64 [sp + 0x78]\n 16402: a3 = reverse a3\n 16404: a4 = a3 >> 0x38\n 16407: u8 [a0 + 0x1f] = a4\n 16410: a4 = a3 >> 0x30\n 16413: u8 [a0 + 0x1e] = a4\n 16416: a4 = a3 >> 0x28\n 16419: u8 [a0 + 0x1d] = a4\n 16422: a4 = a3 >> 0x20\n 16425: u8 [a0 + 0x1c] = a4\n 16428: a4 = a3 >> 0x18\n 16431: u8 [a0 + 0x1b] = a4\n 16434: a4 = a3 >> 0x10\n 16437: u8 [a0 + 0x1a] = a4\n 16440: a4 = a3 >> 0x8\n 16443: u8 [a0 + 0x19] = a4\n 16446: u8 [a0 + 0x18] = a3\n 16449: u8 [a0 + 0x10] = a2\n 16452: u8 [a0 + 11] = 0\n 16455: u8 [a0 + 10] = 0\n 16458: u8 [a0 + 9] = 0\n 16461: u8 [a0 + 7] = 0\n 16464: u8 [a0 + 6] = 0\n 16467: u8 [a0 + 5] = 0\n 16470: u8 [a0 + 4] = 0\n 16473: u8 [a0 + 3] = 0\n 16476: u8 [a0 + 2] = 0\n 16479: u8 [a0 + 1] = 0\n 16482: u8 [a0 + 0] = 0\n 16484: a3 = a2 >> 0x38\n 16487: u8 [a0 + 0x17] = a3\n 16490: a3 = a2 >> 0x30\n 16493: u8 [a0 + 0x16] = a3\n 16496: a3 = a2 >> 0x28\n 16499: u8 [a0 + 0x15] = a3\n 16502: a3 = a2 >> 0x20\n 16505: u8 [a0 + 0x14] = a3\n 16508: a3 = a2 >> 0x18\n 16511: u8 [a0 + 0x13] = a3\n 16514: a3 = a2 >> 0x10\n 16517: u8 [a0 + 0x12] = a3\n 16520: a2 = a2 >> 0x8\n 16523: u8 [a0 + 0x11] = a2\n 16526: u8 [a0 + 0x8] = a1\n 16529: a2 = a1 >> 0x38\n 16532: u8 [a0 + 0xf] = a2\n 16535: a2 = a1 >> 0x30\n 16538: u8 [a0 + 0xe] = a2\n 16541: a2 = a1 >> 0x28\n 16544: u8 [a0 + 0xd] = a2\n 16547: a1 = a1 >> 0x20\n 16550: a4 = u64 [sp + 0x28]\n 16553: a4 = a4 | s1\n 16556: s1 = 0x100000000\n 16566: a2 = 0xffffffe0\n 16576: a3 = u64 [sp + 0x68]\n 16579: a2 = a3 <u a2\n 16582: a3 = u64 [sp + 0x60]\n 16585: a2 = 0 if a3 != 0\n 16587: a2 = 0 if a4 != 0\n 16589: u8 [a0 + 0xc] = a1\n 16592: jump @244 if a2 == 0\n      : @240 (gas: 6)\n 16596: a0 = u64 [sp + 0x18]\n 16599: i32 a0 = a0 + 0x20\n 16602: a1 = 0x20\n 16605: u64 [sp + 0x78] = s1\n 16608: s1 = a4\n 16610: ra = 216, jump @0\n      : @241 [@dyn 108] (gas: 41)\n 16616: a3 = u64 [sp + 0x60]\n 16619: a2 = u64 [sp + 0x68]\n 16622: a1 = u64 [sp + 0x58]\n 16625: u8 [a0 + 0x1f] = a1\n 16628: u8 [a0 + 30] = 0\n 16631: u8 [a0 + 29] = 0\n 16634: u8 [a0 + 28] = 0\n 16637: u8 [a0 + 27] = 0\n 16640: u8 [a0 + 26] = 0\n 16643: u8 [a0 + 25] = 0\n 16646: u8 [a0 + 24] = 0\n 16649: u8 [a0 + 23] = 0\n 16652: u8 [a0 + 22] = 0\n 16655: u8 [a0 + 21] = 0\n 16658: u8 [a0 + 20] = 0\n 16661: u8 [a0 + 19] = 0\n 16664: u8 [a0 + 18] = 0\n 16667: u8 [a0 + 17] = 0\n 16670: u8 [a0 + 16] = 0\n 16673: u8 [a0 + 15] = 0\n 16676: u8 [a0 + 14] = 0\n 16679: u8 [a0 + 13] = 0\n 16682: u8 [a0 + 12] = 0\n 16685: u8 [a0 + 11] = 0\n 16688: u8 [a0 + 10] = 0\n 16691: u8 [a0 + 9] = 0\n 16694: u8 [a0 + 8] = 0\n 16697: u8 [a0 + 7] = 0\n 16700: u8 [a0 + 6] = 0\n 16703: u8 [a0 + 5] = 0\n 16706: u8 [a0 + 4] = 0\n 16709: u8 [a0 + 3] = 0\n 16712: u8 [a0 + 2] = 0\n 16715: u8 [a0 + 1] = 0\n 16718: a1 = u64 [sp + 0x78]\n 16721: a1 = a1 + 0xffffffffffffffc0\n 16724: a1 = a2 <u a1\n 16727: a1 = 0 if a3 != 0\n 16729: a1 = 0 if s1 != 0\n 16731: u8 [a0 + 0] = 0\n 16733: jump @244 if a1 == 0\n      : @242 (gas: 7)\n 16737: a4 = s1\n 16739: a0 = u64 [sp + 0x18]\n 16742: i32 a0 = a0 + 0x40\n 16745: a1 = 0x20\n 16748: s1 = a2\n 16750: u64 [sp + 0x78] = a4\n 16753: ra = 218, jump @0\n      : @243 [@dyn 109] (gas: 40)\n 16759: a1 = u64 [sp + 0x50]\n 16762: u8 [a0 + 0x1f] = a1\n 16765: u8 [a0 + 30] = 0\n 16768: u8 [a0 + 29] = 0\n 16771: u8 [a0 + 28] = 0\n 16774: u8 [a0 + 27] = 0\n 16777: u8 [a0 + 26] = 0\n 16780: u8 [a0 + 25] = 0\n 16783: u8 [a0 + 24] = 0\n 16786: u8 [a0 + 23] = 0\n 16789: u8 [a0 + 22] = 0\n 16792: u8 [a0 + 21] = 0\n 16795: u8 [a0 + 20] = 0\n 16798: u8 [a0 + 19] = 0\n 16801: u8 [a0 + 18] = 0\n 16804: u8 [a0 + 17] = 0\n 16807: u8 [a0 + 16] = 0\n 16810: u8 [a0 + 15] = 0\n 16813: u8 [a0 + 14] = 0\n 16816: u8 [a0 + 13] = 0\n 16819: u8 [a0 + 12] = 0\n 16822: u8 [a0 + 11] = 0\n 16825: u8 [a0 + 10] = 0\n 16828: u8 [a0 + 9] = 0\n 16831: u8 [a0 + 8] = 0\n 16834: u8 [a0 + 7] = 0\n 16837: u8 [a0 + 6] = 0\n 16840: u8 [a0 + 5] = 0\n 16843: u8 [a0 + 4] = 0\n 16846: u8 [a0 + 3] = 0\n 16849: u8 [a0 + 2] = 0\n 16852: u8 [a0 + 1] = 0\n 16855: a1 = 0xffffffa0\n 16865: a1 = s1 <u a1\n 16868: a2 = u64 [sp + 0x60]\n 16871: a1 = 0 if a2 != 0\n 16873: a2 = u64 [sp + 0x78]\n 16876: a1 = 0 if a2 != 0\n 16878: u8 [a0 + 0] = 0\n 16880: jump @247 if a1 != 0\n      : @244 (gas: 1)\n 16883: trap\n      : @245 (gas: 3)\n 16884: a0 = 0\n 16886: a1 = 0\n 16888: ra = 220, jump @0\n      : @246 [@dyn 110] (gas: 5)\n 16894: i32 a1 = a0 + 0\n 16896: a0 = 0x1\n 16899: a2 = 0\n 16901: ecalli 12 // 'seal_return'\n 16903: fallthrough\n      : @247 (gas: 13)\n 16904: a0 = u64 [sp + 0x38]\n 16907: a1 = u64 [sp + 0x30]\n 16910: a0 = a0 | a1\n 16913: a1 = u64 [sp + 0x48]\n 16916: a2 = u64 [sp + 0x40]\n 16919: a1 = a1 | a2\n 16922: a0 = a0 | a1\n 16925: a0 = a0 >u 0\n 16927: u64 [sp + 0x78] = a0\n 16930: s1 = u64 [sp + 0x18]\n 16933: i32 a0 = s1 + 0x60\n 16936: a1 = 0x20\n 16939: ra = 222, jump @0\n      : @248 [@dyn 111] (gas: 36)\n 16945: u8 [a0 + 30] = 0\n 16948: u8 [a0 + 29] = 0\n 16951: u8 [a0 + 28] = 0\n 16954: u8 [a0 + 27] = 0\n 16957: u8 [a0 + 26] = 0\n 16960: u8 [a0 + 25] = 0\n 16963: u8 [a0 + 24] = 0\n 16966: u8 [a0 + 23] = 0\n 16969: u8 [a0 + 22] = 0\n 16972: u8 [a0 + 21] = 0\n 16975: u8 [a0 + 20] = 0\n 16978: u8 [a0 + 19] = 0\n 16981: u8 [a0 + 18] = 0\n 16984: u8 [a0 + 17] = 0\n 16987: u8 [a0 + 16] = 0\n 16990: u8 [a0 + 15] = 0\n 16993: u8 [a0 + 14] = 0\n 16996: u8 [a0 + 13] = 0\n 16999: u8 [a0 + 12] = 0\n 17002: u8 [a0 + 11] = 0\n 17005: u8 [a0 + 10] = 0\n 17008: u8 [a0 + 9] = 0\n 17011: u8 [a0 + 8] = 0\n 17014: u8 [a0 + 7] = 0\n 17017: u8 [a0 + 6] = 0\n 17020: u8 [a0 + 5] = 0\n 17023: u8 [a0 + 4] = 0\n 17026: u8 [a0 + 3] = 0\n 17029: u8 [a0 + 2] = 0\n 17032: u8 [a0 + 1] = 0\n 17035: u8 [a0 + 0] = 0\n 17037: a1 = u64 [sp + 0x78]\n 17040: u8 [a0 + 0x1f] = a1\n 17043: a1 = 0x80\n 17047: a0 = s1\n 17049: ra = 224, jump @0\n      : @249 [@dyn 112] (gas: 6)\n 17055: i32 a1 = a0 + 0\n 17057: a2 = 0x80\n 17061: a0 = 0\n 17063: ra = 0xe2\n 17067: ecalli 12 // 'seal_return'\n 17069: fallthrough\n      : @250 [@dyn 113] (gas: 9)\n 17070: a2 = u64 [a1 + 0x18]\n 17073: a3 = u64 [a1 + 0x10]\n 17076: a4 = u64 [a1 + 0x8]\n 17079: a1 = u64 [a1]\n 17081: u64 [a0 + 0x18] = a2\n 17084: u64 [a0 + 0x10] = a3\n 17087: u64 [a0 + 0x8] = a4\n 17090: u64 [a0] = a1\n 17092: ret\n      : @251 (gas: 17)\n 17094: sp = sp + 0xffffffffffffffa0\n 17097: u64 [sp + 0x58] = ra\n 17100: u64 [sp + 0x50] = s0\n 17103: u64 [sp + 0x48] = s1\n 17106: a3 = u64 [a1 + 0x18]\n 17109: a4 = u64 [a1 + 0x10]\n 17112: a5 = u64 [a1 + 0x8]\n 17115: s1 = u64 [a1]\n 17117: a1 = a5 | a3\n 17120: a2 = s1 | a4\n 17123: a2 = a2 | a1\n 17126: a2 = a2 >> 0x20\n 17129: a1 = a1 | a4\n 17132: a1 = a1 << 0x20\n 17135: a1 = a1 | a2\n 17138: u64 [sp + 0x28] = a0\n 17141: jump @258 if a1 != 0\n      : @252 (gas: 19)\n 17145: a0 = s1 + 0x20\n 17148: u64 [sp + 0x30] = a0\n 17151: a0 = a0 <u s1\n 17154: a1 = a5 + a0\n 17157: u64 [sp + 0x40] = a1\n 17160: u64 [sp + 0x8] = a5\n 17163: s0 = a1 <u a5\n 17166: s0 = a0 if a0 == 0\n 17169: s0 = s0 + a4\n 17172: u64 [sp + 0x10] = a4\n 17175: a0 = s0 <u a4\n 17178: u64 [sp + 0x18] = a3\n 17181: a0 = a0 + a3\n 17184: u64 [sp + 0x38] = a0\n 17187: u64 [sp] = s1\n 17189: i32 a0 = s1 + 0\n 17191: a1 = 0x20\n 17194: s1 = 0x20\n 17197: ra = 228, jump @0\n      : @253 [@dyn 114] (gas: 45)\n 17203: u8 [a0 + 0x1f] = s1\n 17206: a1 = u64 [sp + 0x30]\n 17209: s1 = a1\n 17211: a1 = a1 | s0\n 17214: a2 = u64 [sp + 0x40]\n 17217: a4 = u64 [sp + 0x38]\n 17220: a2 = a2 | a4\n 17223: a1 = a1 | a2\n 17226: a1 = a1 >> 0x20\n 17229: u64 [sp + 0x20] = s0\n 17232: a2 = a2 | s0\n 17235: a2 = a2 << 0x20\n 17238: a1 = a1 | a2\n 17241: u8 [a0 + 30] = 0\n 17244: u8 [a0 + 29] = 0\n 17247: u8 [a0 + 28] = 0\n 17250: u8 [a0 + 27] = 0\n 17253: u8 [a0 + 26] = 0\n 17256: u8 [a0 + 25] = 0\n 17259: u8 [a0 + 24] = 0\n 17262: u8 [a0 + 23] = 0\n 17265: u8 [a0 + 22] = 0\n 17268: u8 [a0 + 21] = 0\n 17271: u8 [a0 + 20] = 0\n 17274: u8 [a0 + 19] = 0\n 17277: u8 [a0 + 18] = 0\n 17280: u8 [a0 + 17] = 0\n 17283: u8 [a0 + 16] = 0\n 17286: u8 [a0 + 15] = 0\n 17289: u8 [a0 + 14] = 0\n 17292: u8 [a0 + 13] = 0\n 17295: u8 [a0 + 12] = 0\n 17298: u8 [a0 + 11] = 0\n 17301: u8 [a0 + 10] = 0\n 17304: u8 [a0 + 9] = 0\n 17307: u8 [a0 + 8] = 0\n 17310: u8 [a0 + 7] = 0\n 17313: u8 [a0 + 6] = 0\n 17316: u8 [a0 + 5] = 0\n 17319: u8 [a0 + 4] = 0\n 17322: u8 [a0 + 3] = 0\n 17325: u8 [a0 + 2] = 0\n 17328: u8 [a0 + 1] = 0\n 17331: u8 [a0 + 0] = 0\n 17333: jump @258 if a1 != 0\n      : @254 (gas: 4)\n 17337: i32 s0 = s1 + 0\n 17339: a1 = 0x20\n 17342: a0 = s0\n 17344: ra = 230, jump @0\n      : @255 [@dyn 115] (gas: 41)\n 17350: u8 [a0 + 31] = 0xa\n 17354: u8 [a0 + 30] = 0\n 17357: u8 [a0 + 29] = 0\n 17360: u8 [a0 + 28] = 0\n 17363: u8 [a0 + 27] = 0\n 17366: u8 [a0 + 26] = 0\n 17369: u8 [a0 + 25] = 0\n 17372: u8 [a0 + 24] = 0\n 17375: u8 [a0 + 23] = 0\n 17378: u8 [a0 + 22] = 0\n 17381: u8 [a0 + 21] = 0\n 17384: u8 [a0 + 20] = 0\n 17387: u8 [a0 + 19] = 0\n 17390: u8 [a0 + 18] = 0\n 17393: u8 [a0 + 17] = 0\n 17396: u8 [a0 + 16] = 0\n 17399: u8 [a0 + 15] = 0\n 17402: u8 [a0 + 14] = 0\n 17405: u8 [a0 + 13] = 0\n 17408: u8 [a0 + 12] = 0\n 17411: u8 [a0 + 11] = 0\n 17414: u8 [a0 + 10] = 0\n 17417: u8 [a0 + 9] = 0\n 17420: u8 [a0 + 8] = 0\n 17423: u8 [a0 + 7] = 0\n 17426: u8 [a0 + 6] = 0\n 17429: u8 [a0 + 5] = 0\n 17432: u8 [a0 + 4] = 0\n 17435: u8 [a0 + 3] = 0\n 17438: u8 [a0 + 2] = 0\n 17441: u8 [a0 + 1] = 0\n 17444: a1 = u64 [sp + 0x20]\n 17447: a2 = u64 [sp + 0x38]\n 17450: a1 = a1 | a2\n 17453: a2 = 0xffffffe0\n 17463: a2 = s1 <u a2\n 17466: a3 = u64 [sp + 0x40]\n 17469: a2 = 0 if a3 != 0\n 17471: a2 = 0 if a1 != 0\n 17473: u8 [a0 + 0] = 0\n 17475: jump @258 if a2 == 0\n      : @256 (gas: 3)\n 17479: i32 a0 = s0 + 0x20\n 17482: a1 = 0x20\n 17485: ra = 232, jump @0\n      : @257 [@dyn 116] (gas: 54)\n 17491: u8 [a0 + 31] = 0\n 17494: u8 [a0 + 30] = 0\n 17497: u8 [a0 + 29] = 0\n 17500: u8 [a0 + 28] = 0\n 17503: u8 [a0 + 27] = 0\n 17506: u8 [a0 + 26] = 0\n 17509: u8 [a0 + 25] = 0\n 17512: u8 [a0 + 24] = 0\n 17515: u8 [a0 + 23] = 0\n 17518: u8 [a0 + 22] = 0\n 17521: u8 [a0 + 21] = 0\n 17524: u8 [a0 + 20] = 0\n 17527: u8 [a0 + 19] = 0\n 17530: u8 [a0 + 18] = 0\n 17533: u8 [a0 + 17] = 0\n 17536: u8 [a0 + 16] = 0\n 17539: u8 [a0 + 15] = 0\n 17542: u8 [a0 + 14] = 0\n 17545: u8 [a0 + 13] = 0\n 17548: u8 [a0 + 12] = 0\n 17551: u8 [a0 + 11] = 0\n 17554: u8 [a0 + 10] = 0\n 17557: u8 [a0 + 9] = 0x44\n 17561: u8 [a0 + 8] = 0x49\n 17565: u8 [a0 + 7] = 0x20\n 17569: u8 [a0 + 6] = 0x64\n 17573: u8 [a0 + 5] = 0x69\n 17577: u8 [a0 + 4] = 0x6c\n 17581: u8 [a0 + 3] = 0x61\n 17585: u8 [a0 + 2] = 0x76\n 17589: u8 [a0 + 1] = 0x6e\n 17593: u8 [a0 + 0] = 0x49\n 17596: a1 = u64 [sp]\n 17598: a0 = a1 + 0x60\n 17601: a1 = a0 <u a1\n 17604: a3 = u64 [sp + 0x8]\n 17607: a2 = a3 + a1\n 17610: a3 = a2 <u a3\n 17613: a3 = a1 if a1 == 0\n 17616: a1 = u64 [sp + 0x10]\n 17619: a3 = a3 + a1\n 17622: a1 = a3 <u a1\n 17625: a4 = u64 [sp + 0x18]\n 17628: a1 = a1 + a4\n 17631: a4 = u64 [sp + 0x28]\n 17634: u64 [a4] = a0\n 17636: u64 [a4 + 0x8] = a2\n 17639: u64 [a4 + 0x10] = a3\n 17642: u64 [a4 + 0x18] = a1\n 17645: ra = u64 [sp + 0x58]\n 17648: s0 = u64 [sp + 0x50]\n 17651: s1 = u64 [sp + 0x48]\n 17654: sp = sp + 0x60\n 17657: ret\n      : @258 (gas: 1)\n 17659: trap\n      : @259 (gas: 9)\n 17660: sp = sp + 0xffffffffffffffc0\n 17663: u64 [sp + 0x38] = ra\n 17666: u64 [sp + 0x30] = s0\n 17669: u64 [sp + 0x28] = s1\n 17672: s0 = sp + 0x40\n 17675: sp = sp & 0xffffffffffffffe0\n 17678: a0 = 0x40\n 17681: a1 = 0x20\n 17684: ra = 234, jump @0\n      : @260 [@dyn 117] (gas: 97)\n 17690: a1 = u8 [a0 + 0x11]\n 17693: a2 = u8 [a0 + 0x10]\n 17696: a3 = u8 [a0 + 0x12]\n 17699: a4 = u8 [a0 + 0x13]\n 17702: a1 = a1 << 0x8\n 17705: a1 = a1 | a2\n 17708: a3 = a3 << 0x10\n 17711: a4 = a4 << 0x18\n 17714: a3 = a3 | a4\n 17717: a1 = a1 | a3\n 17720: a2 = u8 [a0 + 0x15]\n 17723: a3 = u8 [a0 + 0x14]\n 17726: a4 = u8 [a0 + 0x16]\n 17729: a5 = u8 [a0 + 0x17]\n 17732: a2 = a2 << 0x8\n 17735: a2 = a2 | a3\n 17738: a4 = a4 << 0x10\n 17741: a5 = a5 << 0x18\n 17744: a4 = a4 | a5\n 17747: a2 = a2 | a4\n 17750: a2 = a2 << 0x20\n 17753: t0 = a2 | a1\n 17756: a2 = u8 [a0 + 0x1]\n 17759: a3 = u8 [a0]\n 17761: a4 = u8 [a0 + 0x2]\n 17764: a5 = u8 [a0 + 0x3]\n 17767: a2 = a2 << 0x8\n 17770: a2 = a2 | a3\n 17773: a4 = a4 << 0x10\n 17776: a5 = a5 << 0x18\n 17779: a4 = a4 | a5\n 17782: a2 = a2 | a4\n 17785: a3 = u8 [a0 + 0x5]\n 17788: a4 = u8 [a0 + 0x4]\n 17791: a5 = u8 [a0 + 0x6]\n 17794: s1 = u8 [a0 + 0x7]\n 17797: a3 = a3 << 0x8\n 17800: a3 = a3 | a4\n 17803: a5 = a5 << 0x10\n 17806: s1 = s1 << 0x18\n 17809: a5 = a5 | s1\n 17812: a3 = a3 | a5\n 17815: a3 = a3 << 0x20\n 17818: a2 = a2 | a3\n 17821: a3 = u8 [a0 + 0x19]\n 17824: a4 = u8 [a0 + 0x18]\n 17827: a5 = u8 [a0 + 0x1a]\n 17830: s1 = u8 [a0 + 0x1b]\n 17833: a3 = a3 << 0x8\n 17836: a3 = a3 | a4\n 17839: a5 = a5 << 0x10\n 17842: s1 = s1 << 0x18\n 17845: a5 = a5 | s1\n 17848: a3 = a3 | a5\n 17851: a4 = u8 [a0 + 0x1d]\n 17854: a5 = u8 [a0 + 0x1c]\n 17857: s1 = u8 [a0 + 0x1e]\n 17860: a1 = u8 [a0 + 0x1f]\n 17863: a4 = a4 << 0x8\n 17866: a4 = a4 | a5\n 17869: s1 = s1 << 0x10\n 17872: a1 = a1 << 0x18\n 17875: a1 = a1 | s1\n 17878: a1 = a1 | a4\n 17881: a1 = a1 << 0x20\n 17884: a3 = a3 | a1\n 17887: a1 = u8 [a0 + 0x9]\n 17890: a4 = u8 [a0 + 0x8]\n 17893: a5 = u8 [a0 + 0xa]\n 17896: s1 = u8 [a0 + 0xb]\n 17899: a1 = a1 << 0x8\n 17902: a1 = a1 | a4\n 17905: a5 = a5 << 0x10\n 17908: s1 = s1 << 0x18\n 17911: a5 = a5 | s1\n 17914: a1 = a1 | a5\n 17917: a4 = u8 [a0 + 0xd]\n 17920: a5 = u8 [a0 + 0xc]\n 17923: s1 = u8 [a0 + 0xe]\n 17926: a0 = u8 [a0 + 0xf]\n 17929: a4 = a4 << 0x8\n 17932: a4 = a4 | a5\n 17935: s1 = s1 << 0x10\n 17938: a0 = a0 << 0x18\n 17941: a0 = a0 | s1\n 17944: a0 = a0 | a4\n 17947: a0 = a0 << 0x20\n 17950: a0 = a0 | a1\n 17953: s1 = reverse a0\n 17955: a0 = reverse a3\n 17957: u64 [sp + 0x8] = a0\n 17960: a0 = reverse a2\n 17962: u64 [sp + 0x18] = a0\n 17965: a0 = reverse t0\n 17967: u64 [sp + 0x10] = a0\n 17970: ecalli 11 // 'return_data_size'\n 17972: fallthrough\n      : @261 (gas: 11)\n 17973: a3 = u64 [sp + 0x8]\n 17976: a1 = u64 [sp + 0x18]\n 17979: a2 = u64 [sp + 0x10]\n 17982: a1 = a1 | a2\n 17985: a2 = a3 | s1\n 17988: a2 = a2 | a1\n 17991: a2 = a2 >> 0x20\n 17994: a1 = a1 | s1\n 17997: a1 = a1 << 0x20\n 18000: a1 = a1 | a2\n 18003: jump @268 if a1 != 0\n      : @262 (gas: 3)\n 18006: s1 = a0\n 18008: a0 = a0 >> 0x20\n 18011: jump @268 if a0 != 0\n      : @263 (gas: 5)\n 18014: i32 a0 = a3 + 0\n 18016: i32 a1 = s1 + 0\n 18018: u64 [sp + 0x18] = a1\n 18021: u64 [sp + 0x10] = a0\n 18024: ra = 236, jump @0\n      : @264 [@dyn 118] (gas: 6)\n 18030: u32 [sp + 0x20] = s1\n 18033: i32 a0 = a0 + 0\n 18035: i32 a1 = sp + 0x20\n 18038: a2 = 0\n 18040: ecalli 10 // 'return_data_copy'\n 18042: fallthrough\n      : @265 (gas: 3)\n 18043: a0 = i32 [sp + 0x20]\n 18046: a1 = u64 [sp + 0x18]\n 18049: jump @268 if a0 <u a1\n      : @266 (gas: 2)\n 18052: ecalli 11 // 'return_data_size'\n 18054: fallthrough\n      : @267 (gas: 2)\n 18055: a1 = a0 >> 0x20\n 18058: jump @269 if a1 == 0\n      : @268 (gas: 1)\n 18061: trap\n      : @269 (gas: 4)\n 18062: i32 s1 = a0 + 0\n 18064: a0 = u64 [sp + 0x10]\n 18067: a1 = s1\n 18069: ra = 238, jump @0\n      : @270 [@dyn 119] (gas: 6)\n 18075: i32 a1 = a0 + 0\n 18077: a0 = 0x1\n 18080: a2 = s1\n 18082: ra = 0xf0\n 18086: ecalli 12 // 'seal_return'\n 18088: fallthrough\n      : @271 [@dyn 120] (gas: 12)\n 18089: a1 = u64 [a0 + 0x10]\n 18092: a2 = u64 [a0 + 0x18]\n 18095: a3 = u64 [a0 + 0x8]\n 18098: a0 = u64 [a0]\n 18100: a2 = a2 | a3\n 18103: a3 = a0 | a1\n 18106: a3 = a3 | a2\n 18109: a3 = a3 >> 0x20\n 18112: a1 = a1 | a2\n 18115: a1 = a1 << 0x20\n 18118: a1 = a1 | a3\n 18121: jump @274 if a1 != 0\n      : @272 (gas: 7)\n 18125: sp = sp + 0xfffffffffffffff0\n 18128: u64 [sp + 0x8] = ra\n 18131: u64 [sp] = s0\n 18133: i32 a0 = a0 + 0\n 18135: a1 = 0x20\n 18138: s0 = 0x20\n 18141: ra = 242, jump @0\n      : @273 [@dyn 121] (gas: 37)\n 18147: u8 [a0 + 31] = 0\n 18150: u8 [a0 + 30] = 0\n 18153: u8 [a0 + 29] = 0\n 18156: u8 [a0 + 28] = 0\n 18159: u8 [a0 + 27] = 0\n 18162: u8 [a0 + 26] = 0\n 18165: u8 [a0 + 25] = 0\n 18168: u8 [a0 + 24] = 0\n 18171: u8 [a0 + 23] = 0\n 18174: u8 [a0 + 22] = 0\n 18177: u8 [a0 + 21] = 0\n 18180: u8 [a0 + 20] = 0\n 18183: u8 [a0 + 19] = 0\n 18186: u8 [a0 + 18] = 0\n 18189: u8 [a0 + 17] = 0\n 18192: u8 [a0 + 16] = 0\n 18195: u8 [a0 + 15] = 0\n 18198: u8 [a0 + 14] = 0\n 18201: u8 [a0 + 13] = 0\n 18204: u8 [a0 + 12] = 0\n 18207: u8 [a0 + 11] = 0\n 18210: u8 [a0 + 10] = 0\n 18213: u8 [a0 + 9] = 0\n 18216: u8 [a0 + 8] = 0\n 18219: u8 [a0 + 7] = 0\n 18222: u8 [a0 + 6] = 0x64\n 18226: u8 [a0 + 5] = 0x72\n 18230: u8 [a0 + 4] = 0x61\n 18234: u8 [a0 + 3] = 0x63\n 18238: u8 [a0 + 0x2] = s0\n 18241: u8 [a0 + 1] = 0x6f\n 18245: a1 = 0x4e\n 18248: u8 [a0] = a1\n 18250: ra = u64 [sp + 0x8]\n 18253: s0 = u64 [sp]\n 18255: sp = sp + 0x10\n 18258: ret\n      : @274 (gas: 1)\n 18260: trap\n      : @275 (gas: 17)\n 18261: sp = sp + 0xffffffffffffffa0\n 18264: u64 [sp + 0x58] = ra\n 18267: u64 [sp + 0x50] = s0\n 18270: u64 [sp + 0x48] = s1\n 18273: a3 = u64 [a1 + 0x18]\n 18276: a4 = u64 [a1 + 0x10]\n 18279: a5 = u64 [a1 + 0x8]\n 18282: s1 = u64 [a1]\n 18284: a1 = a5 | a3\n 18287: a2 = s1 | a4\n 18290: a2 = a2 | a1\n 18293: a2 = a2 >> 0x20\n 18296: a1 = a1 | a4\n 18299: a1 = a1 << 0x20\n 18302: a1 = a1 | a2\n 18305: u64 [sp + 0x28] = a0\n 18308: jump @282 if a1 != 0\n      : @276 (gas: 19)\n 18312: a0 = s1 + 0x20\n 18315: u64 [sp + 0x30] = a0\n 18318: a0 = a0 <u s1\n 18321: a1 = a5 + a0\n 18324: u64 [sp + 0x40] = a1\n 18327: u64 [sp + 0x8] = a5\n 18330: s0 = a1 <u a5\n 18333: s0 = a0 if a0 == 0\n 18336: s0 = s0 + a4\n 18339: u64 [sp + 0x10] = a4\n 18342: a0 = s0 <u a4\n 18345: u64 [sp + 0x18] = a3\n 18348: a0 = a0 + a3\n 18351: u64 [sp + 0x38] = a0\n 18354: u64 [sp] = s1\n 18356: i32 a0 = s1 + 0\n 18358: a1 = 0x20\n 18361: s1 = 0x20\n 18364: ra = 244, jump @0\n      : @277 [@dyn 122] (gas: 45)\n 18370: u8 [a0 + 0x1f] = s1\n 18373: a1 = u64 [sp + 0x30]\n 18376: s1 = a1\n 18378: a1 = a1 | s0\n 18381: a2 = u64 [sp + 0x40]\n 18384: a4 = u64 [sp + 0x38]\n 18387: a2 = a2 | a4\n 18390: a1 = a1 | a2\n 18393: a1 = a1 >> 0x20\n 18396: u64 [sp + 0x20] = s0\n 18399: a2 = a2 | s0\n 18402: a2 = a2 << 0x20\n 18405: a1 = a1 | a2\n 18408: u8 [a0 + 30] = 0\n 18411: u8 [a0 + 29] = 0\n 18414: u8 [a0 + 28] = 0\n 18417: u8 [a0 + 27] = 0\n 18420: u8 [a0 + 26] = 0\n 18423: u8 [a0 + 25] = 0\n 18426: u8 [a0 + 24] = 0\n 18429: u8 [a0 + 23] = 0\n 18432: u8 [a0 + 22] = 0\n 18435: u8 [a0 + 21] = 0\n 18438: u8 [a0 + 20] = 0\n 18441: u8 [a0 + 19] = 0\n 18444: u8 [a0 + 18] = 0\n 18447: u8 [a0 + 17] = 0\n 18450: u8 [a0 + 16] = 0\n 18453: u8 [a0 + 15] = 0\n 18456: u8 [a0 + 14] = 0\n 18459: u8 [a0 + 13] = 0\n 18462: u8 [a0 + 12] = 0\n 18465: u8 [a0 + 11] = 0\n 18468: u8 [a0 + 10] = 0\n 18471: u8 [a0 + 9] = 0\n 18474: u8 [a0 + 8] = 0\n 18477: u8 [a0 + 7] = 0\n 18480: u8 [a0 + 6] = 0\n 18483: u8 [a0 + 5] = 0\n 18486: u8 [a0 + 4] = 0\n 18489: u8 [a0 + 3] = 0\n 18492: u8 [a0 + 2] = 0\n 18495: u8 [a0 + 1] = 0\n 18498: u8 [a0 + 0] = 0\n 18500: jump @282 if a1 != 0\n      : @278 (gas: 4)\n 18504: i32 s0 = s1 + 0\n 18506: a1 = 0x20\n 18509: a0 = s0\n 18511: ra = 246, jump @0\n      : @279 [@dyn 123] (gas: 41)\n 18517: u8 [a0 + 31] = 0x7\n 18521: u8 [a0 + 30] = 0\n 18524: u8 [a0 + 29] = 0\n 18527: u8 [a0 + 28] = 0\n 18530: u8 [a0 + 27] = 0\n 18533: u8 [a0 + 26] = 0\n 18536: u8 [a0 + 25] = 0\n 18539: u8 [a0 + 24] = 0\n 18542: u8 [a0 + 23] = 0\n 18545: u8 [a0 + 22] = 0\n 18548: u8 [a0 + 21] = 0\n 18551: u8 [a0 + 20] = 0\n 18554: u8 [a0 + 19] = 0\n 18557: u8 [a0 + 18] = 0\n 18560: u8 [a0 + 17] = 0\n 18563: u8 [a0 + 16] = 0\n 18566: u8 [a0 + 15] = 0\n 18569: u8 [a0 + 14] = 0\n 18572: u8 [a0 + 13] = 0\n 18575: u8 [a0 + 12] = 0\n 18578: u8 [a0 + 11] = 0\n 18581: u8 [a0 + 10] = 0\n 18584: u8 [a0 + 9] = 0\n 18587: u8 [a0 + 8] = 0\n 18590: u8 [a0 + 7] = 0\n 18593: u8 [a0 + 6] = 0\n 18596: u8 [a0 + 5] = 0\n 18599: u8 [a0 + 4] = 0\n 18602: u8 [a0 + 3] = 0\n 18605: u8 [a0 + 2] = 0\n 18608: u8 [a0 + 1] = 0\n 18611: a1 = u64 [sp + 0x20]\n 18614: a2 = u64 [sp + 0x38]\n 18617: a1 = a1 | a2\n 18620: a2 = 0xffffffe0\n 18630: a2 = s1 <u a2\n 18633: a3 = u64 [sp + 0x40]\n 18636: a2 = 0 if a3 != 0\n 18638: a2 = 0 if a1 != 0\n 18640: u8 [a0 + 0] = 0\n 18642: jump @282 if a2 == 0\n      : @280 (gas: 3)\n 18646: i32 a0 = s0 + 0x20\n 18649: a1 = 0x20\n 18652: ra = 248, jump @0\n      : @281 [@dyn 124] (gas: 54)\n 18658: u8 [a0 + 31] = 0\n 18661: u8 [a0 + 30] = 0\n 18664: u8 [a0 + 29] = 0\n 18667: u8 [a0 + 28] = 0\n 18670: u8 [a0 + 27] = 0\n 18673: u8 [a0 + 26] = 0\n 18676: u8 [a0 + 25] = 0\n 18679: u8 [a0 + 24] = 0\n 18682: u8 [a0 + 23] = 0\n 18685: u8 [a0 + 22] = 0\n 18688: u8 [a0 + 21] = 0\n 18691: u8 [a0 + 20] = 0\n 18694: u8 [a0 + 19] = 0\n 18697: u8 [a0 + 18] = 0\n 18700: u8 [a0 + 17] = 0\n 18703: u8 [a0 + 16] = 0\n 18706: u8 [a0 + 15] = 0\n 18709: u8 [a0 + 14] = 0\n 18712: u8 [a0 + 13] = 0\n 18715: u8 [a0 + 12] = 0\n 18718: u8 [a0 + 11] = 0\n 18721: u8 [a0 + 10] = 0\n 18724: u8 [a0 + 9] = 0\n 18727: u8 [a0 + 8] = 0\n 18730: u8 [a0 + 7] = 0\n 18733: u8 [a0 + 6] = 0x64\n 18737: u8 [a0 + 5] = 0x72\n 18741: u8 [a0 + 4] = 0x61\n 18745: u8 [a0 + 3] = 0x63\n 18749: u8 [a0 + 2] = 0x20\n 18753: u8 [a0 + 1] = 0x6f\n 18757: u8 [a0 + 0] = 0x4e\n 18760: a1 = u64 [sp]\n 18762: a0 = a1 + 0x60\n 18765: a1 = a0 <u a1\n 18768: a3 = u64 [sp + 0x8]\n 18771: a2 = a3 + a1\n 18774: a3 = a2 <u a3\n 18777: a3 = a1 if a1 == 0\n 18780: a1 = u64 [sp + 0x10]\n 18783: a3 = a3 + a1\n 18786: a1 = a3 <u a1\n 18789: a4 = u64 [sp + 0x18]\n 18792: a1 = a1 + a4\n 18795: a4 = u64 [sp + 0x28]\n 18798: u64 [a4] = a0\n 18800: u64 [a4 + 0x8] = a2\n 18803: u64 [a4 + 0x10] = a3\n 18806: u64 [a4 + 0x18] = a1\n 18809: ra = u64 [sp + 0x58]\n 18812: s0 = u64 [sp + 0x50]\n 18815: s1 = u64 [sp + 0x48]\n 18818: sp = sp + 0x60\n 18821: ret\n      : @282 (gas: 1)\n 18823: trap\n      : @283 (gas: 22)\n 18824: sp = sp + 0xffffffffffffff20\n 18828: u64 [sp + 0xd8] = ra\n 18832: u64 [sp + 0xd0] = s0\n 18836: u64 [sp + 0xc8] = s1\n 18840: s0 = sp + 0xe0\n 18844: sp = sp & 0xffffffffffffffe0\n 18847: a4 = u64 [a1 + 0x10]\n 18850: a5 = u64 [a1 + 0x18]\n 18853: a2 = u64 [a1 + 0x8]\n 18856: a3 = u64 [a1]\n 18858: u64 [sp + 0x30] = a2\n 18861: u64 [sp + 0x18] = a5\n 18864: a1 = a2 | a5\n 18867: u64 [sp + 0x38] = a3\n 18870: a2 = a3 | a4\n 18873: a2 = a2 | a1\n 18876: a2 = a2 >> 0x20\n 18879: u64 [sp + 0x20] = a4\n 18882: a1 = a1 | a4\n 18885: a1 = a1 << 0x20\n 18888: a1 = a1 | a2\n 18891: jump @295 if a1 != 0\n      : @284 (gas: 12)\n 18895: a1 = u64 [a0 + 0x18]\n 18898: u64 [sp + 0x48] = a1\n 18901: a1 = u64 [a0 + 0x10]\n 18904: u64 [sp + 0x50] = a1\n 18907: a1 = u64 [a0 + 0x8]\n 18910: u64 [sp + 0x58] = a1\n 18913: a0 = u64 [a0]\n 18915: u64 [sp + 0x40] = a0\n 18918: a0 = i32 [sp + 0x38]\n 18921: a1 = 0x20\n 18924: u64 [sp + 0x28] = a0\n 18927: ra = 250, jump @0\n      : @285 [@dyn 125] (gas: 105)\n 18933: a1 = u8 [a0 + 0x11]\n 18936: a2 = u8 [a0 + 0x10]\n 18939: a3 = u8 [a0 + 0x12]\n 18942: a4 = u8 [a0 + 0x13]\n 18945: a1 = a1 << 0x8\n 18948: a1 = a1 | a2\n 18951: a3 = a3 << 0x10\n 18954: a4 = a4 << 0x18\n 18957: a3 = a3 | a4\n 18960: a1 = a1 | a3\n 18963: a2 = u8 [a0 + 0x15]\n 18966: a3 = u8 [a0 + 0x14]\n 18969: a4 = u8 [a0 + 0x16]\n 18972: a5 = u8 [a0 + 0x17]\n 18975: a2 = a2 << 0x8\n 18978: a2 = a2 | a3\n 18981: a4 = a4 << 0x10\n 18984: a5 = a5 << 0x18\n 18987: a4 = a4 | a5\n 18990: a2 = a2 | a4\n 18993: a2 = a2 << 0x20\n 18996: a1 = a1 | a2\n 18999: a2 = u8 [a0 + 0x19]\n 19002: a3 = u8 [a0 + 0x18]\n 19005: a4 = u8 [a0 + 0x1a]\n 19008: a5 = u8 [a0 + 0x1b]\n 19011: a2 = a2 << 0x8\n 19014: a2 = a2 | a3\n 19017: a4 = a4 << 0x10\n 19020: a5 = a5 << 0x18\n 19023: a4 = a4 | a5\n 19026: a2 = a2 | a4\n 19029: a3 = u8 [a0 + 0x1d]\n 19032: a4 = u8 [a0 + 0x1c]\n 19035: a5 = u8 [a0 + 0x1e]\n 19038: s1 = u8 [a0 + 0x1f]\n 19041: a3 = a3 << 0x8\n 19044: a3 = a3 | a4\n 19047: a5 = a5 << 0x10\n 19050: s1 = s1 << 0x18\n 19053: a5 = a5 | s1\n 19056: a3 = a3 | a5\n 19059: a3 = a3 << 0x20\n 19062: a2 = a2 | a3\n 19065: a3 = u8 [a0 + 0xd]\n 19068: a4 = u8 [a0 + 0xc]\n 19071: a5 = u8 [a0 + 0xe]\n 19074: a0 = u8 [a0 + 0xf]\n 19077: a3 = a3 << 0x8\n 19080: a3 = a3 | a4\n 19083: a5 = a5 << 0x10\n 19086: a0 = a0 << 0x18\n 19089: a0 = a0 | a5\n 19092: a0 = a0 | a3\n 19095: a2 = reverse a2\n 19097: u64 [sp + 0x10] = a2\n 19100: a1 = reverse a1\n 19102: u64 [sp + 0x8] = a1\n 19105: s1 = reverse a0\n 19107: s1 = s1 >> 0x20\n 19110: u64 [sp] = s1\n 19112: a0 = u64 [sp + 0x48]\n 19115: u64 [sp + 0x98] = a0\n 19119: a0 = u64 [sp + 0x50]\n 19122: u64 [sp + 0x90] = a0\n 19126: a0 = u64 [sp + 0x58]\n 19129: u64 [sp + 0x88] = a0\n 19133: s1 = u64 [sp + 0x40]\n 19136: u64 [sp + 0x80] = s1\n 19140: u64 [sp + 184] = 0\n 19144: u64 [sp + 176] = 0\n 19148: u64 [sp + 168] = 0\n 19152: u64 [sp + 160] = 0\n 19156: u32 [sp + 96] = 0x20\n 19160: i32 a1 = sp + 0x80\n 19164: i32 a3 = sp + 0xa0\n 19168: i32 a4 = sp + 0x60\n 19171: a2 = 0xffffffffffffffff\n 19174: a0 = 0\n 19176: ecalli 7 // 'get_storage'\n 19178: a0 = u32 [sp + 0xb4]\n 19182: a0 = a0 << 0x20\n 19185: a1 = u64 [sp + 0xb8]\n 19189: a2 = u64 [sp]\n 19191: a0 = a0 | a2\n 19194: a2 = u64 [sp + 0x48]\n 19197: u64 [sp + 0x98] = a2\n 19201: a2 = u64 [sp + 0x50]\n 19204: u64 [sp + 0x90] = a2\n 19208: a2 = u64 [sp + 0x58]\n 19211: u64 [sp + 0x88] = a2\n 19215: u64 [sp + 0x80] = s1\n 19219: u64 [sp + 0xb8] = a1\n 19223: u64 [sp + 0xb0] = a0\n 19227: a0 = u64 [sp + 0x8]\n 19230: u64 [sp + 0xa8] = a0\n 19234: a0 = u64 [sp + 0x10]\n 19237: u64 [sp + 0xa0] = a0\n 19241: i32 a1 = sp + 0x80\n 19245: i32 a3 = sp + 0xa0\n 19249: a2 = 0xffffffffffffffff\n 19252: a4 = 0x20\n 19255: a0 = 0\n 19257: ecalli 14 // 'set_storage'\n 19259: fallthrough\n      : @286 (gas: 13)\n 19260: a0 = u64 [sp + 0x20]\n 19263: a2 = u64 [sp + 0x18]\n 19266: a2 = a2 | a0\n 19269: a0 = 0x100000000\n 19279: u64 [sp + 0x18] = a0\n 19282: a0 = 0xffffffe0\n 19292: a1 = u64 [sp + 0x38]\n 19295: a0 = a1 <u a0\n 19298: a1 = u64 [sp + 0x30]\n 19301: a0 = 0 if a1 != 0\n 19303: u64 [sp + 0x20] = a2\n 19306: a0 = 0 if a2 != 0\n 19308: jump @295 if a0 == 0\n      : @287 (gas: 4)\n 19312: a0 = u64 [sp + 0x28]\n 19315: i32 a0 = a0 + 0x20\n 19318: a1 = 0x20\n 19321: ra = 252, jump @0\n      : @288 [@dyn 126] (gas: 47)\n 19327: s1 = u8 [a0 + 0x1f]\n 19330: a0 = u64 [sp + 0x48]\n 19333: u64 [sp + 0x98] = a0\n 19337: a0 = u64 [sp + 0x50]\n 19340: u64 [sp + 0x90] = a0\n 19344: a0 = u64 [sp + 0x58]\n 19347: u64 [sp + 0x88] = a0\n 19351: a0 = u64 [sp + 0x40]\n 19354: u64 [sp + 0x80] = a0\n 19358: u64 [sp + 184] = 0\n 19362: u64 [sp + 176] = 0\n 19366: u64 [sp + 168] = 0\n 19370: u64 [sp + 160] = 0\n 19374: u32 [sp + 96] = 0x20\n 19378: i32 a1 = sp + 0x80\n 19382: i32 a3 = sp + 0xa0\n 19386: i32 a4 = sp + 0x60\n 19389: a2 = 0xffffffffffffffff\n 19392: a0 = 0\n 19394: ecalli 7 // 'get_storage'\n 19396: a0 = u64 [sp + 0xa0]\n 19400: a1 = u64 [sp + 0xa8]\n 19404: a2 = u64 [sp + 0xb8]\n 19408: a3 = u64 [sp + 0xb0]\n 19412: s1 = s1 << 0x20\n 19415: a4 = 0xffffff00ffffffff\n 19425: a3 = a3 & a4\n 19428: a3 = a3 | s1\n 19431: a4 = u64 [sp + 0x48]\n 19434: u64 [sp + 0x98] = a4\n 19438: a4 = u64 [sp + 0x50]\n 19441: u64 [sp + 0x90] = a4\n 19445: a4 = u64 [sp + 0x58]\n 19448: u64 [sp + 0x88] = a4\n 19452: a4 = u64 [sp + 0x40]\n 19455: u64 [sp + 0x80] = a4\n 19459: u64 [sp + 0xb8] = a2\n 19463: u64 [sp + 0xb0] = a3\n 19467: u64 [sp + 0xa8] = a1\n 19471: u64 [sp + 0xa0] = a0\n 19475: i32 a1 = sp + 0x80\n 19479: i32 a3 = sp + 0xa0\n 19483: a2 = 0xffffffffffffffff\n 19486: a4 = 0x20\n 19489: a0 = 0\n 19491: ecalli 14 // 'set_storage'\n 19493: fallthrough\n      : @289 (gas: 9)\n 19494: a0 = u64 [sp + 0x18]\n 19497: a0 = a0 + 0xffffffffffffffc0\n 19500: a1 = u64 [sp + 0x38]\n 19503: a0 = a1 <u a0\n 19506: a1 = u64 [sp + 0x30]\n 19509: a0 = 0 if a1 != 0\n 19511: a1 = u64 [sp + 0x20]\n 19514: a0 = 0 if a1 != 0\n 19516: jump @295 if a0 == 0\n      : @290 (gas: 4)\n 19520: a0 = u64 [sp + 0x28]\n 19523: i32 a0 = a0 + 0x40\n 19526: a1 = 0x20\n 19529: ra = 254, jump @0\n      : @291 [@dyn 127] (gas: 47)\n 19535: s1 = u8 [a0 + 0x1f]\n 19538: a0 = u64 [sp + 0x48]\n 19541: u64 [sp + 0x98] = a0\n 19545: a0 = u64 [sp + 0x50]\n 19548: u64 [sp + 0x90] = a0\n 19552: a0 = u64 [sp + 0x58]\n 19555: u64 [sp + 0x88] = a0\n 19559: a0 = u64 [sp + 0x40]\n 19562: u64 [sp + 0x80] = a0\n 19566: u64 [sp + 184] = 0\n 19570: u64 [sp + 176] = 0\n 19574: u64 [sp + 168] = 0\n 19578: u64 [sp + 160] = 0\n 19582: u32 [sp + 96] = 0x20\n 19586: i32 a1 = sp + 0x80\n 19590: i32 a3 = sp + 0xa0\n 19594: i32 a4 = sp + 0x60\n 19597: a2 = 0xffffffffffffffff\n 19600: a0 = 0\n 19602: ecalli 7 // 'get_storage'\n 19604: a0 = u64 [sp + 0xa0]\n 19608: a1 = u64 [sp + 0xa8]\n 19612: a2 = u64 [sp + 0xb0]\n 19616: a3 = u64 [sp + 0xb8]\n 19620: s1 = s1 << 0x28\n 19623: a4 = 0xffff00ffffffffff\n 19633: a2 = a2 & a4\n 19636: a2 = a2 | s1\n 19639: a4 = u64 [sp + 0x48]\n 19642: u64 [sp + 0x98] = a4\n 19646: a4 = u64 [sp + 0x50]\n 19649: u64 [sp + 0x90] = a4\n 19653: a4 = u64 [sp + 0x58]\n 19656: u64 [sp + 0x88] = a4\n 19660: a4 = u64 [sp + 0x40]\n 19663: u64 [sp + 0x80] = a4\n 19667: u64 [sp + 0xb8] = a3\n 19671: u64 [sp + 0xb0] = a2\n 19675: u64 [sp + 0xa8] = a1\n 19679: u64 [sp + 0xa0] = a0\n 19683: i32 a1 = sp + 0x80\n 19687: i32 a3 = sp + 0xa0\n 19691: a2 = 0xffffffffffffffff\n 19694: a4 = 0x20\n 19697: a0 = 0\n 19699: ecalli 14 // 'set_storage'\n 19701: fallthrough\n      : @292 (gas: 8)\n 19702: a0 = 0xffffffa0\n 19712: a1 = u64 [sp + 0x38]\n 19715: a0 = a1 <u a0\n 19718: a1 = u64 [sp + 0x30]\n 19721: a0 = 0 if a1 != 0\n 19723: a1 = u64 [sp + 0x20]\n 19726: a0 = 0 if a1 != 0\n 19728: jump @295 if a0 == 0\n      : @293 (gas: 4)\n 19732: a0 = u64 [sp + 0x28]\n 19735: i32 a0 = a0 + 0x60\n 19738: a1 = 0x20\n 19741: ra = 256, jump @0\n      : @294 [@dyn 128] (gas: 141)\n 19747: a1 = u8 [a0 + 0x1d]\n 19750: a2 = u8 [a0 + 0x1c]\n 19753: a3 = u8 [a0 + 0x1e]\n 19756: a4 = u8 [a0 + 0x1f]\n 19759: a1 = a1 << 0x8\n 19762: a1 = a1 | a2\n 19765: a3 = a3 << 0x10\n 19768: a4 = a4 << 0x18\n 19771: a3 = a3 | a4\n 19774: a1 = a1 | a3\n 19777: a2 = u8 [a0 + 0xd]\n 19780: a3 = u8 [a0 + 0xc]\n 19783: a4 = u8 [a0 + 0xe]\n 19786: a5 = u8 [a0 + 0xf]\n 19789: a2 = a2 << 0x8\n 19792: a2 = a2 | a3\n 19795: a4 = a4 << 0x10\n 19798: a5 = a5 << 0x18\n 19801: a4 = a4 | a5\n 19804: a2 = a2 | a4\n 19807: a1 = a1 | a2\n 19810: a1 = a1 << 0x20\n 19813: a2 = u8 [a0 + 0x9]\n 19816: a3 = u8 [a0 + 0x8]\n 19819: a4 = u8 [a0 + 0xa]\n 19822: a5 = u8 [a0 + 0xb]\n 19825: a2 = a2 << 0x8\n 19828: a2 = a2 | a3\n 19831: a4 = a4 << 0x10\n 19834: a5 = a5 << 0x18\n 19837: a4 = a4 | a5\n 19840: a2 = a2 | a4\n 19843: a3 = u8 [a0 + 0x19]\n 19846: a4 = u8 [a0 + 0x18]\n 19849: a5 = u8 [a0 + 0x1a]\n 19852: s1 = u8 [a0 + 0x1b]\n 19855: a3 = a3 << 0x8\n 19858: a3 = a3 | a4\n 19861: a5 = a5 << 0x10\n 19864: s1 = s1 << 0x18\n 19867: a5 = a5 | s1\n 19870: a3 = a3 | a5\n 19873: a2 = a2 | a3\n 19876: a1 = a1 | a2\n 19879: a2 = u8 [a0 + 0x15]\n 19882: a3 = u8 [a0 + 0x14]\n 19885: a4 = u8 [a0 + 0x16]\n 19888: a5 = u8 [a0 + 0x17]\n 19891: a2 = a2 << 0x8\n 19894: a2 = a2 | a3\n 19897: a4 = a4 << 0x10\n 19900: a5 = a5 << 0x18\n 19903: a4 = a4 | a5\n 19906: a2 = a2 | a4\n 19909: a3 = u8 [a0 + 0x5]\n 19912: a4 = u8 [a0 + 0x4]\n 19915: a5 = u8 [a0 + 0x6]\n 19918: s1 = u8 [a0 + 0x7]\n 19921: a3 = a3 << 0x8\n 19924: a3 = a3 | a4\n 19927: a5 = a5 << 0x10\n 19930: s1 = s1 << 0x18\n 19933: a5 = a5 | s1\n 19936: a3 = a3 | a5\n 19939: a2 = a2 | a3\n 19942: a3 = u8 [a0 + 0x1]\n 19945: a4 = u8 [a0]\n 19947: a5 = u8 [a0 + 0x2]\n 19950: s1 = u8 [a0 + 0x3]\n 19953: a3 = a3 << 0x8\n 19956: a3 = a3 | a4\n 19959: a5 = a5 << 0x10\n 19962: s1 = s1 << 0x18\n 19965: a4 = u8 [a0 + 0x11]\n 19968: a5 = a5 | s1\n 19971: a3 = a3 | a5\n 19974: a5 = u8 [a0 + 0x10]\n 19977: a4 = a4 << 0x8\n 19980: s1 = u8 [a0 + 0x12]\n 19983: a0 = u8 [a0 + 0x13]\n 19986: a4 = a4 | a5\n 19989: a2 = a2 << 0x20\n 19992: s1 = s1 << 0x10\n 19995: a0 = a0 << 0x18\n 19998: a0 = a0 | s1\n 20001: a0 = a0 | a4\n 20004: a0 = a0 | a3\n 20007: a0 = a0 | a2\n 20010: a0 = a0 | a1\n 20013: s1 = a0 >u 0\n 20015: a0 = u64 [sp + 0x48]\n 20018: u64 [sp + 0x98] = a0\n 20022: a0 = u64 [sp + 0x50]\n 20025: u64 [sp + 0x90] = a0\n 20029: a0 = u64 [sp + 0x58]\n 20032: u64 [sp + 0x88] = a0\n 20036: a0 = u64 [sp + 0x40]\n 20039: u64 [sp + 0x80] = a0\n 20043: u64 [sp + 184] = 0\n 20047: u64 [sp + 176] = 0\n 20051: u64 [sp + 168] = 0\n 20055: u64 [sp + 160] = 0\n 20059: u32 [sp + 96] = 0x20\n 20063: i32 a1 = sp + 0x80\n 20067: i32 a3 = sp + 0xa0\n 20071: i32 a4 = sp + 0x60\n 20074: a2 = 0xffffffffffffffff\n 20077: a0 = 0\n 20079: ecalli 7 // 'get_storage'\n 20081: a0 = u64 [sp + 0xa0]\n 20085: a1 = u64 [sp + 0xa8]\n 20089: a2 = u64 [sp + 0xb8]\n 20093: a3 = u64 [sp + 0xb0]\n 20097: s1 = s1 << 0x30\n 20100: a4 = 0xff00ffffffffffff\n 20110: a3 = a3 & a4\n 20113: a3 = a3 | s1\n 20116: a4 = u64 [sp + 0x48]\n 20119: u64 [sp + 0x98] = a4\n 20123: a4 = u64 [sp + 0x50]\n 20126: u64 [sp + 0x90] = a4\n 20130: a4 = u64 [sp + 0x58]\n 20133: u64 [sp + 0x88] = a4\n 20137: a4 = u64 [sp + 0x40]\n 20140: u64 [sp + 0x80] = a4\n 20144: u64 [sp + 0xb8] = a2\n 20148: u64 [sp + 0xb0] = a3\n 20152: u64 [sp + 0xa8] = a1\n 20156: u64 [sp + 0xa0] = a0\n 20160: i32 a1 = sp + 0x80\n 20164: i32 a3 = sp + 0xa0\n 20168: a2 = 0xffffffffffffffff\n 20171: a4 = 0x20\n 20174: a0 = 0\n 20176: ecalli 14 // 'set_storage'\n 20178: sp = s0 + 0xffffffffffffff20\n 20182: ra = u64 [sp + 0xd8]\n 20186: s0 = u64 [sp + 0xd0]\n 20190: s1 = u64 [sp + 0xc8]\n 20194: sp = sp + 0xe0\n 20198: ret\n      : @295 (gas: 1)\n 20200: trap\n      : @296 (gas: 7)\n 20201: a3 = u64 [sp + 0x1f8]\n 20205: s1 = u64 [sp + 0x1f0]\n 20209: a2 = u64 [sp + 0x1e8]\n 20213: a0 = s1 | a3\n 20216: a1 = a2 <u 0x1\n 20219: a1 = 0 if a0 != 0\n 20221: jump @301 if a1 == 0\n      : @297 (gas: 49)\n 20225: a0 = u64 [sp + 0x1e0]\n 20229: u64 [sp + 0x18] = a0\n 20232: a0 = a0 + 0x1\n 20235: a1 = a0 <u 0x1\n 20238: a1 = a1 + a2\n 20241: u64 [sp + 0x1e0] = a0\n 20245: a0 = a0 | a1\n 20248: u64 [sp + 0x1e8] = a1\n 20252: a0 = a0 <u 0x1\n 20255: a0 = a0 + s1\n 20258: u64 [sp + 0x1f0] = a0\n 20262: a0 = a0 <u s1\n 20265: a0 = a0 + a3\n 20268: u64 [sp + 0x1f8] = a0\n 20272: a0 = u64 [sp + 0x50]\n 20275: u64 [sp + 0x1c8] = a0\n 20279: a0 = u64 [sp + 0x58]\n 20282: u64 [sp + 0x1c0] = a0\n 20286: a0 = u64 [sp + 0x48]\n 20289: u64 [sp + 0x1d0] = a0\n 20293: a0 = u64 [sp + 0x40]\n 20296: u64 [sp + 0x1d8] = a0\n 20300: i32 a1 = sp + 0x1c0\n 20304: u64 [sp + 0x10] = a3\n 20307: i32 a3 = sp + 0x1e0\n 20311: u64 [sp + 0x8] = a2\n 20314: a2 = 0xffffffffffffffff\n 20317: a4 = 0x20\n 20320: a0 = 0\n 20322: ecalli 14 // 'set_storage'\n 20324: a0 = u64 [sp + 0x10]\n 20327: u64 [sp + 0x138] = a0\n 20331: u64 [sp + 0x130] = s1\n 20335: a0 = u64 [sp + 0x8]\n 20338: u64 [sp + 0x128] = a0\n 20342: a0 = u64 [sp + 0x18]\n 20345: u64 [sp + 0x120] = a0\n 20349: a0 = u64 [sp + 0x40]\n 20352: u64 [sp + 0x158] = a0\n 20356: a0 = u64 [sp + 0x48]\n 20359: u64 [sp + 0x150] = a0\n 20363: a0 = u64 [sp + 0x50]\n 20366: u64 [sp + 0x148] = a0\n 20370: a0 = sp + 0x160\n 20374: a1 = sp + 0x140\n 20378: a2 = sp + 0x120\n 20382: a3 = u64 [sp + 0x58]\n 20385: u64 [sp + 0x140] = a3\n 20389: ra = 258, jump @208\n      : @298 [@dyn 129] (gas: 8)\n 20395: a0 = u64 [sp + 0x198]\n 20399: a1 = u64 [sp + 0x190]\n 20403: a2 = u64 [sp + 0x188]\n 20407: a3 = u64 [sp + 0x180]\n 20411: a0 = a0 | a2\n 20414: a1 = a1 | a3\n 20417: a0 = a0 | a1\n 20420: jump @303 if a0 != 0\n      : @299 (gas: 19)\n 20424: a2 = u64 [sp + 0x178]\n 20428: a0 = u64 [sp + 0x170]\n 20432: a1 = u64 [sp + 0x168]\n 20436: a3 = u64 [sp + 0x160]\n 20440: a4 = u64 [sp + 0x20]\n 20443: u64 [sp + 0xa0] = a4\n 20447: u64 [sp + 0xc0] = a3\n 20451: a3 = u64 [sp + 0x28]\n 20454: u64 [sp + 0xa8] = a3\n 20458: u64 [sp + 0xc8] = a1\n 20462: a1 = u64 [sp + 0x30]\n 20465: u64 [sp + 0xb0] = a1\n 20469: u64 [sp + 0xd0] = a0\n 20473: a0 = u64 [sp + 0x38]\n 20476: u64 [sp + 0xb8] = a0\n 20480: a0 = sp + 0xc0\n 20484: a1 = sp + 0xa0\n 20488: u64 [sp + 0xd8] = a2\n 20492: ra = 260, jump @283\n      : @300 [@dyn 130] (gas: 6)\n 20498: sp = s0 + 0xfffffffffffffde0\n 20502: ra = u64 [sp + 0x218]\n 20506: s0 = u64 [sp + 0x210]\n 20510: s1 = u64 [sp + 0x208]\n 20514: sp = sp + 0x220\n 20518: ret\n      : @301 (gas: 8)\n 20520: u64 [sp + 144] = 0\n 20524: u64 [sp + 136] = 0\n 20528: u64 [sp + 128] = 0\n 20532: a0 = 0x4e487b7100000000\n 20542: a1 = sp + 0x80\n 20546: u64 [sp + 0x98] = a0\n 20550: a0 = 0\n 20552: ra = 262, jump @8\n      : @302 [@dyn 131] (gas: 8)\n 20558: u64 [sp + 120] = 0\n 20561: u64 [sp + 112] = 0\n 20564: u64 [sp + 96] = 0x41\n 20568: a0 = 0x4\n 20571: a1 = sp + 0x60\n 20574: u64 [sp + 104] = 0\n 20577: ra = 0x10a\n 20581: jump @8\n      : @303 (gas: 8)\n 20584: u64 [sp + 272] = 0\n 20588: u64 [sp + 264] = 0\n 20592: u64 [sp + 256] = 0\n 20596: a0 = 0x4e487b7100000000\n 20606: a1 = sp + 0x100\n 20610: u64 [sp + 0x118] = a0\n 20614: a0 = 0\n 20616: ra = 264, jump @8\n      : @304 [@dyn 132] (gas: 7)\n 20622: u64 [sp + 248] = 0\n 20626: u64 [sp + 240] = 0\n 20630: u64 [sp + 232] = 0\n 20634: a0 = 0x4\n 20637: a1 = sp + 0xe0\n 20641: u64 [sp + 224] = 0\n 20645: ra = 266, jump @8\n      : @305 [@dyn 133] (gas: 3)\n 20651: a1 = 0x24\n 20654: a0 = 0\n 20656: ra = 268, jump @0\n      : @306 [@dyn 134] (gas: 6)\n 20662: i32 a1 = a0 + 0\n 20664: a0 = 0x1\n 20667: a2 = 0x24\n 20670: ra = 0x10e\n 20674: ecalli 12 // 'seal_return'\n 20676: fallthrough\n      : @307 [@dyn 135] (gas: 10)\n 20677: sp = sp + 0xfffffffffffffd20\n 20681: u64 [sp + 0x2d8] = ra\n 20685: u64 [sp + 0x2d0] = s0\n 20689: u64 [sp + 0x2c8] = s1\n 20693: s0 = sp + 0x2e0\n 20697: sp = sp & 0xffffffffffffffe0\n 20700: a0 = u64 [a0]\n 20702: u64 [sp + 0x50] = a0\n 20705: a0 = a0 & 0xff\n 20709: jump @342 if a0 >u 16\n      : @308 (gas: 4)\n 20714: a0 = u64 [a1]\n 20716: u64 [sp + 0x10] = a0\n 20719: a0 = a0 & 0xff\n 20723: jump @342 if a0 >=u 17\n      : @309 (gas: 32)\n 20728: u64 [sp + 664] = 0\n 20732: u64 [sp + 656] = 0\n 20736: u64 [sp + 648] = 0\n 20740: u64 [sp + 640] = 0x1\n 20745: u64 [sp + 696] = 0\n 20749: u64 [sp + 688] = 0\n 20753: u64 [sp + 680] = 0\n 20757: u64 [sp + 672] = 0\n 20761: u32 [sp + 704] = 0x20\n 20766: i32 a1 = sp + 0x280\n 20770: i32 a3 = sp + 0x2a0\n 20774: i32 a4 = sp + 0x2c0\n 20778: a2 = 0xffffffffffffffff\n 20781: a0 = 0\n 20783: ecalli 7 // 'get_storage'\n 20785: a0 = u64 [sp + 0x2b0]\n 20789: u64 [sp + 0x28] = a0\n 20792: a0 = u64 [sp + 0x2a8]\n 20796: u64 [sp + 0x20] = a0\n 20799: a0 = u64 [sp + 0x2a0]\n 20803: u64 [sp + 0x30] = a0\n 20806: i32 a0 = sp + 0x1c0\n 20810: ecalli 5 // 'caller'\n 20812: a0 = i32 [sp + 0x1d0]\n 20816: u64 [sp + 0x48] = a0\n 20819: a0 = u64 [sp + 0x1c0]\n 20823: u64 [sp + 0x40] = a0\n 20826: a0 = u64 [sp + 0x1c8]\n 20830: u64 [sp + 0x38] = a0\n 20833: a0 = 0x40\n 20836: a1 = 0x20\n 20839: ra = 272, jump @0\n      : @310 [@dyn 136] (gas: 102)\n 20845: a1 = u8 [a0 + 0x11]\n 20848: a2 = u8 [a0 + 0x10]\n 20851: a3 = u8 [a0 + 0x12]\n 20854: a4 = u8 [a0 + 0x13]\n 20857: a1 = a1 << 0x8\n 20860: a1 = a1 | a2\n 20863: a3 = a3 << 0x10\n 20866: a4 = a4 << 0x18\n 20869: a3 = a3 | a4\n 20872: a1 = a1 | a3\n 20875: a2 = u8 [a0 + 0x15]\n 20878: a3 = u8 [a0 + 0x14]\n 20881: a4 = u8 [a0 + 0x16]\n 20884: a5 = u8 [a0 + 0x17]\n 20887: a2 = a2 << 0x8\n 20890: a2 = a2 | a3\n 20893: a4 = a4 << 0x10\n 20896: a5 = a5 << 0x18\n 20899: a4 = a4 | a5\n 20902: a2 = a2 | a4\n 20905: a2 = a2 << 0x20\n 20908: t0 = a2 | a1\n 20911: a2 = u8 [a0 + 0x1]\n 20914: a3 = u8 [a0]\n 20916: a4 = u8 [a0 + 0x2]\n 20919: a5 = u8 [a0 + 0x3]\n 20922: a2 = a2 << 0x8\n 20925: a2 = a2 | a3\n 20928: a4 = a4 << 0x10\n 20931: a5 = a5 << 0x18\n 20934: a4 = a4 | a5\n 20937: a2 = a2 | a4\n 20940: a3 = u8 [a0 + 0x5]\n 20943: a4 = u8 [a0 + 0x4]\n 20946: a5 = u8 [a0 + 0x6]\n 20949: s1 = u8 [a0 + 0x7]\n 20952: a3 = a3 << 0x8\n 20955: a3 = a3 | a4\n 20958: a5 = a5 << 0x10\n 20961: s1 = s1 << 0x18\n 20964: a5 = a5 | s1\n 20967: a3 = a3 | a5\n 20970: a3 = a3 << 0x20\n 20973: a2 = a2 | a3\n 20976: a3 = u8 [a0 + 0x19]\n 20979: a4 = u8 [a0 + 0x18]\n 20982: a5 = u8 [a0 + 0x1a]\n 20985: s1 = u8 [a0 + 0x1b]\n 20988: a3 = a3 << 0x8\n 20991: a3 = a3 | a4\n 20994: a5 = a5 << 0x10\n 20997: s1 = s1 << 0x18\n 21000: a5 = a5 | s1\n 21003: a3 = a3 | a5\n 21006: a4 = u8 [a0 + 0x1d]\n 21009: a5 = u8 [a0 + 0x1c]\n 21012: s1 = u8 [a0 + 0x1e]\n 21015: a1 = u8 [a0 + 0x1f]\n 21018: a4 = a4 << 0x8\n 21021: a4 = a4 | a5\n 21024: s1 = s1 << 0x10\n 21027: a1 = a1 << 0x18\n 21030: a1 = a1 | s1\n 21033: a1 = a1 | a4\n 21036: a1 = a1 << 0x20\n 21039: a3 = a3 | a1\n 21042: a1 = u8 [a0 + 0x9]\n 21045: a4 = u8 [a0 + 0x8]\n 21048: a5 = u8 [a0 + 0xa]\n 21051: s1 = u8 [a0 + 0xb]\n 21054: a1 = a1 << 0x8\n 21057: a1 = a1 | a4\n 21060: a5 = a5 << 0x10\n 21063: s1 = s1 << 0x18\n 21066: a5 = a5 | s1\n 21069: a1 = a1 | a5\n 21072: a4 = u8 [a0 + 0xd]\n 21075: a5 = u8 [a0 + 0xc]\n 21078: s1 = u8 [a0 + 0xe]\n 21081: a0 = u8 [a0 + 0xf]\n 21084: a4 = a4 << 0x8\n 21087: a4 = a4 | a5\n 21090: s1 = s1 << 0x10\n 21093: a0 = a0 << 0x18\n 21096: a0 = a0 | s1\n 21099: a0 = a0 | a4\n 21102: a0 = a0 << 0x20\n 21105: a0 = a0 | a1\n 21108: s1 = reverse a0\n 21110: a3 = reverse a3\n 21112: a1 = reverse a2\n 21114: a0 = reverse t0\n 21116: u64 [sp + 0x78] = a0\n 21119: u64 [sp + 0x60] = a1\n 21122: a0 = a0 | a1\n 21125: a1 = a3 | s1\n 21128: a1 = a1 | a0\n 21131: a1 = a1 >> 0x20\n 21134: a0 = a0 | s1\n 21137: a0 = a0 << 0x20\n 21140: a0 = a0 | a1\n 21143: jump @354 if a0 != 0\n      : @311 (gas: 5)\n 21147: i32 a0 = a3 + 0\n 21149: a1 = 0x20\n 21152: u64 [sp + 0x68] = a0\n 21155: u64 [sp + 0x70] = a3\n 21158: ra = 274, jump @0\n      : @312 [@dyn 137] (gas: 43)\n 21164: u8 [a0 + 31] = 0\n 21167: u8 [a0 + 30] = 0\n 21170: u8 [a0 + 29] = 0\n 21173: u8 [a0 + 28] = 0\n 21176: u8 [a0 + 27] = 0\n 21179: u8 [a0 + 26] = 0\n 21182: u8 [a0 + 25] = 0\n 21185: u8 [a0 + 24] = 0\n 21188: u8 [a0 + 23] = 0\n 21191: u8 [a0 + 22] = 0\n 21194: u8 [a0 + 21] = 0\n 21197: u8 [a0 + 20] = 0\n 21200: u8 [a0 + 19] = 0\n 21203: u8 [a0 + 18] = 0\n 21206: u8 [a0 + 17] = 0\n 21209: u8 [a0 + 16] = 0\n 21212: u8 [a0 + 15] = 0\n 21215: u8 [a0 + 14] = 0\n 21218: u8 [a0 + 13] = 0\n 21221: u8 [a0 + 12] = 0\n 21224: u8 [a0 + 11] = 0\n 21227: u8 [a0 + 10] = 0\n 21230: u8 [a0 + 9] = 0\n 21233: u8 [a0 + 8] = 0\n 21236: u8 [a0 + 7] = 0\n 21239: u8 [a0 + 6] = 0\n 21242: u8 [a0 + 5] = 0\n 21245: u8 [a0 + 3] = 0xe6\n 21250: u8 [a0 + 2] = 0x8c\n 21255: u8 [a0 + 1] = 0xca\n 21260: u8 [a0 + 0] = 0x4d\n 21263: u64 [sp + 0x18] = s1\n 21266: a3 = u64 [sp + 0x60]\n 21269: a3 = a3 | s1\n 21272: a1 = 0xfffffffc\n 21282: a2 = u64 [sp + 0x70]\n 21285: a1 = a2 <u a1\n 21288: a2 = u64 [sp + 0x78]\n 21291: a1 = 0 if a2 != 0\n 21293: u64 [sp + 0x58] = a3\n 21296: a1 = 0 if a3 != 0\n 21298: u8 [a0 + 4] = 0\n 21301: jump @354 if a1 == 0\n      : @313 (gas: 19)\n 21305: a0 = u64 [sp + 0x38]\n 21308: a0 = reverse a0\n 21310: a1 = a0 >> 0x20\n 21313: a2 = u64 [sp + 0x40]\n 21316: a2 = reverse a2\n 21318: a3 = a2 << 0x20\n 21321: a1 = a1 | a3\n 21324: u64 [sp + 0x40] = a1\n 21327: a0 = a0 << 0x20\n 21330: a1 = u64 [sp + 0x48]\n 21333: a1 = reverse a1\n 21335: a1 = a1 >> 0x20\n 21338: a0 = a0 | a1\n 21341: u64 [sp + 0x48] = a0\n 21344: s1 = a2 >> 0x20\n 21347: a0 = u64 [sp + 0x68]\n 21350: i32 a0 = a0 + 0x4\n 21353: a1 = 0x20\n 21356: ra = 276, jump @0\n      : @314 [@dyn 138] (gas: 64)\n 21362: a1 = reverse s1\n 21364: a2 = u64 [sp + 0x40]\n 21367: a2 = reverse a2\n 21369: a3 = u64 [sp + 0x48]\n 21372: a3 = reverse a3\n 21374: a4 = a3 >> 0x38\n 21377: u8 [a0 + 0x1f] = a4\n 21380: a4 = a3 >> 0x30\n 21383: u8 [a0 + 0x1e] = a4\n 21386: a4 = a3 >> 0x28\n 21389: u8 [a0 + 0x1d] = a4\n 21392: a4 = a3 >> 0x20\n 21395: u8 [a0 + 0x1c] = a4\n 21398: a4 = a3 >> 0x18\n 21401: u8 [a0 + 0x1b] = a4\n 21404: a4 = a3 >> 0x10\n 21407: u8 [a0 + 0x1a] = a4\n 21410: a4 = a3 >> 0x8\n 21413: u8 [a0 + 0x19] = a4\n 21416: u8 [a0 + 0x18] = a3\n 21419: u8 [a0 + 0x10] = a2\n 21422: u8 [a0 + 11] = 0\n 21425: u8 [a0 + 10] = 0\n 21428: u8 [a0 + 9] = 0\n 21431: u8 [a0 + 7] = 0\n 21434: u8 [a0 + 6] = 0\n 21437: u8 [a0 + 5] = 0\n 21440: u8 [a0 + 4] = 0\n 21443: u8 [a0 + 3] = 0\n 21446: u8 [a0 + 2] = 0\n 21449: u8 [a0 + 1] = 0\n 21452: u8 [a0 + 0] = 0\n 21454: a3 = a2 >> 0x38\n 21457: u8 [a0 + 0x17] = a3\n 21460: a3 = a2 >> 0x30\n 21463: u8 [a0 + 0x16] = a3\n 21466: a3 = a2 >> 0x28\n 21469: u8 [a0 + 0x15] = a3\n 21472: a3 = a2 >> 0x20\n 21475: u8 [a0 + 0x14] = a3\n 21478: a3 = a2 >> 0x18\n 21481: u8 [a0 + 0x13] = a3\n 21484: a3 = a2 >> 0x10\n 21487: u8 [a0 + 0x12] = a3\n 21490: a2 = a2 >> 0x8\n 21493: u8 [a0 + 0x11] = a2\n 21496: u8 [a0 + 0x8] = a1\n 21499: a2 = a1 >> 0x38\n 21502: u8 [a0 + 0xf] = a2\n 21505: a2 = a1 >> 0x30\n 21508: u8 [a0 + 0xe] = a2\n 21511: a2 = a1 >> 0x28\n 21514: u8 [a0 + 0xd] = a2\n 21517: a1 = a1 >> 0x20\n 21520: s1 = 0x100000000\n 21530: a2 = 0xffffffdc\n 21540: a3 = u64 [sp + 0x70]\n 21543: a2 = a3 <u a2\n 21546: a3 = u64 [sp + 0x78]\n 21549: a2 = 0 if a3 != 0\n 21551: a3 = u64 [sp + 0x58]\n 21554: a2 = 0 if a3 != 0\n 21556: u8 [a0 + 0xc] = a1\n 21559: jump @354 if a2 == 0\n      : @315 (gas: 4)\n 21563: a0 = u64 [sp + 0x68]\n 21566: i32 a0 = a0 + 0x24\n 21569: a1 = 0x20\n 21572: ra = 278, jump @0\n      : @316 [@dyn 139] (gas: 43)\n 21578: a2 = u64 [sp + 0x50]\n 21581: a1 = a2 << 0x38\n 21584: u8 [a0 + 0x1f] = a2\n 21587: u8 [a0 + 30] = 0\n 21590: u8 [a0 + 29] = 0\n 21593: u8 [a0 + 28] = 0\n 21596: u8 [a0 + 27] = 0\n 21599: u8 [a0 + 26] = 0\n 21602: u8 [a0 + 25] = 0\n 21605: u64 [sp + 0x48] = a1\n 21608: u8 [a0 + 0x18] = a1\n 21611: u8 [a0 + 23] = 0\n 21614: u8 [a0 + 22] = 0\n 21617: u8 [a0 + 21] = 0\n 21620: u8 [a0 + 20] = 0\n 21623: u8 [a0 + 19] = 0\n 21626: u8 [a0 + 18] = 0\n 21629: u8 [a0 + 17] = 0\n 21632: u8 [a0 + 16] = 0\n 21635: u8 [a0 + 15] = 0\n 21638: u8 [a0 + 14] = 0\n 21641: u8 [a0 + 13] = 0\n 21644: u8 [a0 + 12] = 0\n 21647: u8 [a0 + 11] = 0\n 21650: u8 [a0 + 10] = 0\n 21653: u8 [a0 + 9] = 0\n 21656: u8 [a0 + 8] = 0\n 21659: u8 [a0 + 7] = 0\n 21662: u8 [a0 + 6] = 0\n 21665: u8 [a0 + 5] = 0\n 21668: u8 [a0 + 4] = 0\n 21671: u8 [a0 + 3] = 0\n 21674: u8 [a0 + 2] = 0\n 21677: u8 [a0 + 1] = 0\n 21680: a1 = s1 + 0xffffffffffffffbc\n 21683: a2 = u64 [sp + 0x70]\n 21686: a1 = a2 <u a1\n 21689: a2 = u64 [sp + 0x78]\n 21692: a1 = 0 if a2 != 0\n 21694: a2 = u64 [sp + 0x58]\n 21697: a1 = 0 if a2 != 0\n 21699: u8 [a0 + 0] = 0\n 21701: jump @354 if a1 == 0\n      : @317 (gas: 4)\n 21705: s1 = u64 [sp + 0x68]\n 21708: i32 a0 = s1 + 0x44\n 21711: a1 = 0x20\n 21714: ra = 280, jump @0\n      : @318 [@dyn 140] (gas: 56)\n 21720: u8 [a0 + 31] = 0x1\n 21724: u8 [a0 + 30] = 0\n 21727: u8 [a0 + 29] = 0\n 21730: u8 [a0 + 28] = 0\n 21733: u8 [a0 + 27] = 0\n 21736: u8 [a0 + 26] = 0\n 21739: u8 [a0 + 25] = 0\n 21742: u8 [a0 + 24] = 0\n 21745: u8 [a0 + 23] = 0\n 21748: u8 [a0 + 22] = 0\n 21751: u8 [a0 + 21] = 0\n 21754: u8 [a0 + 20] = 0\n 21757: u8 [a0 + 19] = 0\n 21760: u8 [a0 + 18] = 0\n 21763: u8 [a0 + 17] = 0\n 21766: u8 [a0 + 16] = 0\n 21769: u8 [a0 + 15] = 0\n 21772: u8 [a0 + 14] = 0\n 21775: u8 [a0 + 13] = 0\n 21778: u8 [a0 + 12] = 0\n 21781: u8 [a0 + 11] = 0\n 21784: u8 [a0 + 10] = 0\n 21787: u8 [a0 + 9] = 0\n 21790: u8 [a0 + 8] = 0\n 21793: u8 [a0 + 7] = 0\n 21796: u8 [a0 + 6] = 0\n 21799: u8 [a0 + 5] = 0\n 21802: u8 [a0 + 4] = 0\n 21805: u8 [a0 + 3] = 0\n 21808: u8 [a0 + 2] = 0\n 21811: u8 [a0 + 1] = 0\n 21814: u8 [a0 + 0] = 0\n 21816: ecalli 9 // 'ref_time_left'\n 21818: a0 = u64 [sp + 0x20]\n 21821: a0 = reverse a0\n 21823: a1 = a0 << 0x20\n 21826: a2 = u64 [sp + 0x28]\n 21829: a2 = reverse a2\n 21831: a2 = a2 >> 0x20\n 21834: a1 = a1 | a2\n 21837: a2 = u64 [sp + 0x30]\n 21840: a2 = reverse a2\n 21842: a3 = a2 << 0x20\n 21845: a0 = a0 >> 0x20\n 21848: a0 = a0 | a3\n 21851: a2 = a2 >> 0x20\n 21854: u64 [sp + 0x1e8] = a0\n 21858: u64 [sp + 0x1e0] = a1\n 21862: u32 [sp + 0x1f0] = a2\n 21866: u64 [sp + 536] = 0\n 21870: u64 [sp + 528] = 0\n 21874: u64 [sp + 520] = 0\n 21878: u64 [sp + 512] = 0\n 21882: a1 = 0x64\n 21885: a0 = s1\n 21887: ra = 282, jump @0\n      : @319 [@dyn 141] (gas: 4)\n 21893: u64 [sp + 0x58] = a0\n 21896: a1 = 0x20\n 21899: a0 = s1\n 21901: ra = 284, jump @0\n      : @320 [@dyn 142] (gas: 31)\n 21907: u32 [sp + 544] = 0x20\n 21912: u64 [sp + 600] = 0\n 21916: u64 [sp + 592] = 0\n 21920: u64 [sp + 584] = 0\n 21924: u64 [sp + 576] = 0\n 21928: a1 = sp + 0x1e0\n 21932: a1 = a1 << 0x20\n 21935: a1 = a1 >> 0x20\n 21938: a2 = 0x1800000000\n 21948: s1 = a1 | a2\n 21951: a1 = sp + 0x200\n 21955: a1 = a1 << 0x20\n 21958: a1 = a1 >> 0x20\n 21961: a2 = sp + 0x240\n 21965: a2 = a2 << 0x20\n 21968: a3 = a2 | a1\n 21971: a1 = u64 [sp + 0x58]\n 21974: a1 = a1 << 0x20\n 21977: a1 = a1 >> 0x20\n 21980: a2 = 0x6400000000\n 21990: a4 = a1 | a2\n 21993: a0 = a0 << 0x20\n 21996: a0 = a0 >> 0x20\n 21999: a1 = sp + 0x220\n 22003: a1 = a1 << 0x20\n 22006: a5 = a1 | a0\n 22009: a1 = 0xffffffffffffffff\n 22012: a2 = 0xffffffffffffffff\n 22015: a0 = s1\n 22017: ecalli 1 // 'call'\n 22019: fallthrough\n      : @321 (gas: 1)\n 22020: jump @347 if a0 != 0\n      : @322 (gas: 2)\n 22024: ecalli 11 // 'return_data_size'\n 22026: fallthrough\n      : @323 (gas: 2)\n 22027: a1 = 0x20\n 22030: jump @325 if a0 >=u a1\n      : @324 (gas: 3)\n 22033: ecalli 11 // 'return_data_size'\n 22035: a1 = a0\n 22037: fallthrough\n      : @325 (gas: 28)\n 22038: a4 = 0\n 22040: a3 = u64 [sp + 0x60]\n 22043: a2 = u64 [sp + 0x70]\n 22046: s1 = u64 [sp + 0x78]\n 22049: a0 = a1 + 0x1f\n 22052: u64 [sp + 0x70] = a1\n 22055: a1 = a0 <u a1\n 22058: u64 [sp + 120] = 0\n 22061: a1 = a1 & 0x1\n 22064: a0 = a0 & 0xffffffffffffffe0\n 22067: a2 = a2 + a0\n 22070: u64 [sp + 0x60] = a2\n 22073: a0 = a2 <u a0\n 22076: s1 = s1 + a1\n 22079: s1 = s1 + a0\n 22082: a2 = s1 ^ a1\n 22085: a1 = s1 <u a1\n 22088: a1 = a0 if a2 == 0\n 22091: a0 = u64 [sp + 0x18]\n 22094: a1 = a1 + a0\n 22097: a0 = a1 <u a0\n 22100: a0 = a0 + a3\n 22103: u64 [sp + 0x58] = a1\n 22106: u64 [sp + 0x50] = a0\n 22109: a0 = a0 | a1\n 22112: a1 = s1 <u 0x1\n 22115: a1 = 0 if a0 != 0\n 22117: jump @357 if a1 == 0\n      : @326 (gas: 3)\n 22121: a0 = 0x40\n 22124: a1 = 0x20\n 22127: ra = 286, jump @0\n      : @327 [@dyn 143] (gas: 79)\n 22133: a1 = u64 [sp + 0x50]\n 22136: a1 = reverse a1\n 22138: a2 = u64 [sp + 0x58]\n 22141: a2 = reverse a2\n 22143: a3 = reverse s1\n 22145: a4 = u64 [sp + 0x60]\n 22148: a4 = reverse a4\n 22150: u8 [a0 + 0x18] = a4\n 22153: a5 = a4 >> 0x38\n 22156: u8 [a0 + 0x1f] = a5\n 22159: a5 = a4 >> 0x30\n 22162: u8 [a0 + 0x1e] = a5\n 22165: a5 = a4 >> 0x28\n 22168: u8 [a0 + 0x1d] = a5\n 22171: a5 = a4 >> 0x20\n 22174: u8 [a0 + 0x1c] = a5\n 22177: a5 = a4 >> 0x18\n 22180: u8 [a0 + 0x1b] = a5\n 22183: a5 = a4 >> 0x10\n 22186: u8 [a0 + 0x1a] = a5\n 22189: a4 = a4 >> 0x8\n 22192: u8 [a0 + 0x19] = a4\n 22195: u8 [a0 + 0x10] = a3\n 22198: a4 = a3 >> 0x38\n 22201: u8 [a0 + 0x17] = a4\n 22204: a4 = a3 >> 0x30\n 22207: u8 [a0 + 0x16] = a4\n 22210: a4 = a3 >> 0x28\n 22213: u8 [a0 + 0x15] = a4\n 22216: a4 = a3 >> 0x20\n 22219: u8 [a0 + 0x14] = a4\n 22222: a4 = a3 >> 0x18\n 22225: u8 [a0 + 0x13] = a4\n 22228: a4 = a3 >> 0x10\n 22231: u8 [a0 + 0x12] = a4\n 22234: a3 = a3 >> 0x8\n 22237: u8 [a0 + 0x11] = a3\n 22240: u8 [a0 + 0x8] = a2\n 22243: a3 = a2 >> 0x38\n 22246: u8 [a0 + 0xf] = a3\n 22249: a3 = a2 >> 0x30\n 22252: u8 [a0 + 0xe] = a3\n 22255: a3 = a2 >> 0x28\n 22258: u8 [a0 + 0xd] = a3\n 22261: a3 = a2 >> 0x20\n 22264: u8 [a0 + 0xc] = a3\n 22267: a3 = a2 >> 0x18\n 22270: u8 [a0 + 0xb] = a3\n 22273: a3 = a2 >> 0x10\n 22276: u8 [a0 + 0xa] = a3\n 22279: a2 = a2 >> 0x8\n 22282: u8 [a0 + 0x9] = a2\n 22285: u8 [a0] = a1\n 22287: a2 = a1 >> 0x38\n 22290: u8 [a0 + 0x7] = a2\n 22293: a2 = a1 >> 0x30\n 22296: u8 [a0 + 0x6] = a2\n 22299: a2 = a1 >> 0x28\n 22302: u8 [a0 + 0x5] = a2\n 22305: a2 = a1 >> 0x20\n 22308: u8 [a0 + 0x4] = a2\n 22311: a2 = a1 >> 0x18\n 22314: u8 [a0 + 0x3] = a2\n 22317: a2 = a1 >> 0x10\n 22320: u8 [a0 + 0x2] = a2\n 22323: a1 = a1 >> 0x8\n 22326: a5 = u64 [sp + 0x78]\n 22329: a2 = a5 >u 0\n 22331: a3 = u64 [sp + 0x70]\n 22334: a3 = a3 <u 0x20\n 22337: a3 = a3 ^ 0x1\n 22340: a3 = a2 if a5 != 0\n 22343: a2 = a5 >u 0\n 22345: a4 = a5 >u 0\n 22347: a4 = a2 if a5 == 0\n 22350: a2 = a5 | a5\n 22353: a4 = a3 if a2 == 0\n 22356: u8 [a0 + 0x1] = a1\n 22359: jump @355 if a4 == 0\n      : @328 (gas: 3)\n 22363: a1 = 0x20\n 22366: a0 = u64 [sp + 0x68]\n 22369: ra = 288, jump @0\n      : @329 [@dyn 144] (gas: 96)\n 22375: a1 = u8 [a0 + 0x9]\n 22378: a2 = u8 [a0 + 0x8]\n 22381: a3 = u8 [a0 + 0xa]\n 22384: a4 = u8 [a0 + 0xb]\n 22387: a1 = a1 << 0x8\n 22390: a1 = a1 | a2\n 22393: a3 = a3 << 0x10\n 22396: a4 = a4 << 0x18\n 22399: a3 = a3 | a4\n 22402: a1 = a1 | a3\n 22405: a2 = u8 [a0 + 0xd]\n 22408: a3 = u8 [a0 + 0xc]\n 22411: a4 = u8 [a0 + 0xe]\n 22414: a5 = u8 [a0 + 0xf]\n 22417: a2 = a2 << 0x8\n 22420: a2 = a2 | a3\n 22423: a4 = a4 << 0x10\n 22426: a5 = a5 << 0x18\n 22429: a4 = a4 | a5\n 22432: a2 = a2 | a4\n 22435: a2 = a2 << 0x20\n 22438: t0 = a2 | a1\n 22441: a2 = u8 [a0 + 0x1]\n 22444: a3 = u8 [a0]\n 22446: a4 = u8 [a0 + 0x2]\n 22449: a5 = u8 [a0 + 0x3]\n 22452: a2 = a2 << 0x8\n 22455: a2 = a2 | a3\n 22458: a4 = a4 << 0x10\n 22461: a5 = a5 << 0x18\n 22464: a4 = a4 | a5\n 22467: a2 = a2 | a4\n 22470: a3 = u8 [a0 + 0x5]\n 22473: a4 = u8 [a0 + 0x4]\n 22476: a5 = u8 [a0 + 0x6]\n 22479: s1 = u8 [a0 + 0x7]\n 22482: a3 = a3 << 0x8\n 22485: a3 = a3 | a4\n 22488: a5 = a5 << 0x10\n 22491: s1 = s1 << 0x18\n 22494: a5 = a5 | s1\n 22497: a3 = a3 | a5\n 22500: a3 = a3 << 0x20\n 22503: a2 = a2 | a3\n 22506: a3 = u8 [a0 + 0x19]\n 22509: a4 = u8 [a0 + 0x18]\n 22512: a5 = u8 [a0 + 0x1a]\n 22515: s1 = u8 [a0 + 0x1b]\n 22518: a3 = a3 << 0x8\n 22521: a3 = a3 | a4\n 22524: a5 = a5 << 0x10\n 22527: s1 = s1 << 0x18\n 22530: a5 = a5 | s1\n 22533: a3 = a3 | a5\n 22536: a4 = u8 [a0 + 0x1d]\n 22539: a5 = u8 [a0 + 0x1c]\n 22542: s1 = u8 [a0 + 0x1e]\n 22545: a1 = u8 [a0 + 0x1f]\n 22548: a4 = a4 << 0x8\n 22551: a4 = a4 | a5\n 22554: s1 = s1 << 0x10\n 22557: a1 = a1 << 0x18\n 22560: a1 = a1 | s1\n 22563: a1 = a1 | a4\n 22566: a1 = a1 << 0x20\n 22569: a3 = a3 | a1\n 22572: a1 = u8 [a0 + 0x11]\n 22575: a4 = u8 [a0 + 0x10]\n 22578: a5 = u8 [a0 + 0x12]\n 22581: s1 = u8 [a0 + 0x13]\n 22584: a1 = a1 << 0x8\n 22587: a1 = a1 | a4\n 22590: a5 = a5 << 0x10\n 22593: s1 = s1 << 0x18\n 22596: a5 = a5 | s1\n 22599: a1 = a1 | a5\n 22602: a4 = u8 [a0 + 0x15]\n 22605: a5 = u8 [a0 + 0x14]\n 22608: s1 = u8 [a0 + 0x16]\n 22611: a0 = u8 [a0 + 0x17]\n 22614: a4 = a4 << 0x8\n 22617: a4 = a4 | a5\n 22620: s1 = s1 << 0x10\n 22623: a0 = a0 << 0x18\n 22626: a0 = a0 | s1\n 22629: a0 = a0 | a4\n 22632: a0 = a0 << 0x20\n 22635: a0 = a0 | a1\n 22638: a1 = reverse a0\n 22640: a4 = reverse a3\n 22642: a4 = a4 <u 0x2\n 22645: a4 = 0 if a1 != 0\n 22647: a1 = t0 | a2\n 22650: a1 = reverse a1\n 22652: a4 = 0 if a1 != 0\n 22654: jump @355 if a4 == 0\n      : @330 (gas: 4)\n 22658: a0 = a0 | a2\n 22661: a1 = t0 | a3\n 22664: a0 = a0 | a1\n 22667: jump @348 if a0 == 0\n      : @331 (gas: 14)\n 22671: i32 a0 = sp + 0x260\n 22675: ecalli 5 // 'caller'\n 22677: a0 = u32 [sp + 0x270]\n 22681: u64 [sp + 0x68] = a0\n 22684: a0 = u64 [sp + 0x268]\n 22688: u64 [sp + 0x50] = a0\n 22691: s1 = u64 [sp + 0x260]\n 22695: u64 [sp + 408] = 0\n 22699: u64 [sp + 400] = 0\n 22703: u64 [sp + 384] = 0x80\n 22709: a0 = sp + 0x1a0\n 22713: a1 = sp + 0x180\n 22717: u64 [sp + 392] = 0\n 22721: ra = 290, jump @49\n      : @332 [@dyn 145] (gas: 16)\n 22727: a2 = u64 [sp + 0x1b8]\n 22731: a3 = u64 [sp + 0x1b0]\n 22735: a0 = u64 [sp + 0x1a8]\n 22739: a1 = u64 [sp + 0x1a0]\n 22743: u64 [sp + 0x70] = a0\n 22746: u64 [sp + 0x58] = a2\n 22749: a0 = a0 | a2\n 22752: u64 [sp + 0x78] = a1\n 22755: a1 = a1 | a3\n 22758: a1 = a1 | a0\n 22761: a1 = a1 >> 0x20\n 22764: u64 [sp + 0x60] = a3\n 22767: a0 = a0 | a3\n 22770: a0 = a0 << 0x20\n 22773: a0 = a0 | a1\n 22776: jump @354 if a0 != 0\n      : @333 (gas: 17)\n 22780: a0 = reverse s1\n 22782: a0 = a0 << 0x20\n 22785: a1 = u64 [sp + 0x50]\n 22788: a1 = reverse a1\n 22790: a2 = a1 >> 0x20\n 22793: a0 = a0 | a2\n 22796: u64 [sp + 0x50] = a0\n 22799: a1 = a1 << 0x20\n 22802: a0 = u64 [sp + 0x68]\n 22805: a0 = reverse a0\n 22807: a0 = a0 >> 0x20\n 22810: a0 = a0 | a1\n 22813: u64 [sp + 0x40] = a0\n 22816: a0 = i32 [sp + 0x78]\n 22819: a1 = 0x20\n 22822: u64 [sp + 0x68] = a0\n 22825: ra = 292, jump @0\n      : @334 [@dyn 146] (gas: 65)\n 22831: a1 = u64 [sp + 0x40]\n 22834: a1 = reverse a1\n 22836: a2 = u64 [sp + 0x50]\n 22839: a2 = reverse a2\n 22841: a3 = s1 >> 0x18\n 22844: u8 [a0 + 0xf] = a3\n 22847: a3 = s1 >> 0x10\n 22850: u8 [a0 + 0xe] = a3\n 22853: a3 = s1 >> 0x8\n 22856: u8 [a0 + 0xd] = a3\n 22859: u8 [a0 + 0xc] = s1\n 22862: u8 [a0 + 11] = 0\n 22865: u8 [a0 + 10] = 0\n 22868: u8 [a0 + 9] = 0\n 22871: u8 [a0 + 8] = 0\n 22874: u8 [a0 + 7] = 0\n 22877: u8 [a0 + 6] = 0\n 22880: u8 [a0 + 5] = 0\n 22883: u8 [a0 + 4] = 0\n 22886: u8 [a0 + 3] = 0\n 22889: u8 [a0 + 2] = 0\n 22892: u8 [a0 + 1] = 0\n 22895: u8 [a0 + 0] = 0\n 22897: u8 [a0 + 0x10] = a2\n 22900: u8 [a0 + 0x18] = a1\n 22903: a3 = a2 >> 0x38\n 22906: u8 [a0 + 0x17] = a3\n 22909: a3 = a2 >> 0x30\n 22912: u8 [a0 + 0x16] = a3\n 22915: a3 = a2 >> 0x28\n 22918: u8 [a0 + 0x15] = a3\n 22921: a3 = a2 >> 0x20\n 22924: u8 [a0 + 0x14] = a3\n 22927: a3 = a2 >> 0x18\n 22930: u8 [a0 + 0x13] = a3\n 22933: a3 = a2 >> 0x10\n 22936: u8 [a0 + 0x12] = a3\n 22939: a2 = a2 >> 0x8\n 22942: u8 [a0 + 0x11] = a2\n 22945: a2 = a1 >> 0x38\n 22948: u8 [a0 + 0x1f] = a2\n 22951: a2 = a1 >> 0x30\n 22954: u8 [a0 + 0x1e] = a2\n 22957: a2 = a1 >> 0x28\n 22960: u8 [a0 + 0x1d] = a2\n 22963: a2 = a1 >> 0x20\n 22966: u8 [a0 + 0x1c] = a2\n 22969: a2 = a1 >> 0x18\n 22972: u8 [a0 + 0x1b] = a2\n 22975: a2 = a1 >> 0x10\n 22978: u8 [a0 + 0x1a] = a2\n 22981: a1 = a1 >> 0x8\n 22984: a2 = u64 [sp + 0x58]\n 22987: a4 = u64 [sp + 0x60]\n 22990: a4 = a4 | a2\n 22993: s1 = 0x100000000\n 23003: a2 = 0xffffffe0\n 23013: a3 = u64 [sp + 0x78]\n 23016: a2 = a3 <u a2\n 23019: a3 = u64 [sp + 0x70]\n 23022: a2 = 0 if a3 != 0\n 23024: u64 [sp + 0x50] = a4\n 23027: a2 = 0 if a4 != 0\n 23029: u8 [a0 + 0x19] = a1\n 23032: jump @354 if a2 == 0\n      : @335 (gas: 4)\n 23036: a0 = u64 [sp + 0x68]\n 23039: i32 a0 = a0 + 0x20\n 23042: a1 = 0x20\n 23045: ra = 294, jump @0\n      : @336 [@dyn 147] (gas: 48)\n 23051: u8 [a0 + 23] = 0\n 23054: u8 [a0 + 22] = 0\n 23057: u8 [a0 + 21] = 0\n 23060: u8 [a0 + 20] = 0\n 23063: u8 [a0 + 19] = 0\n 23066: u8 [a0 + 18] = 0\n 23069: u8 [a0 + 17] = 0\n 23072: u8 [a0 + 16] = 0\n 23075: u8 [a0 + 15] = 0\n 23078: u8 [a0 + 14] = 0\n 23081: u8 [a0 + 13] = 0\n 23084: u8 [a0 + 12] = 0\n 23087: u8 [a0 + 11] = 0\n 23090: u8 [a0 + 10] = 0\n 23093: u8 [a0 + 9] = 0\n 23096: u8 [a0 + 8] = 0\n 23099: u8 [a0 + 7] = 0\n 23102: u8 [a0 + 6] = 0\n 23105: u8 [a0 + 5] = 0\n 23108: u8 [a0 + 4] = 0\n 23111: u8 [a0 + 3] = 0\n 23114: u8 [a0 + 2] = 0\n 23117: u8 [a0 + 1] = 0\n 23120: u8 [a0 + 0] = 0\n 23122: a2 = u64 [sp + 0x48]\n 23125: u8 [a0 + 0x18] = a2\n 23128: a1 = a2 >> 0x38\n 23131: u8 [a0 + 0x1f] = a1\n 23134: a1 = a2 >> 0x30\n 23137: u8 [a0 + 0x1e] = a1\n 23140: a1 = a2 >> 0x28\n 23143: u8 [a0 + 0x1d] = a1\n 23146: a1 = a2 >> 0x20\n 23149: u8 [a0 + 0x1c] = a1\n 23152: a1 = a2 >> 0x18\n 23155: u8 [a0 + 0x1b] = a1\n 23158: a1 = a2 >> 0x10\n 23161: u8 [a0 + 0x1a] = a1\n 23164: a1 = a2 >> 0x8\n 23167: a2 = s1 + 0xffffffffffffffc0\n 23170: a3 = u64 [sp + 0x78]\n 23173: a2 = a3 <u a2\n 23176: a3 = u64 [sp + 0x70]\n 23179: a2 = 0 if a3 != 0\n 23181: a3 = u64 [sp + 0x50]\n 23184: a2 = 0 if a3 != 0\n 23186: u8 [a0 + 0x19] = a1\n 23189: jump @354 if a2 == 0\n      : @337 (gas: 4)\n 23193: a0 = u64 [sp + 0x68]\n 23196: i32 a0 = a0 + 0x40\n 23199: a1 = 0x20\n 23202: ra = 296, jump @0\n      : @338 [@dyn 148] (gas: 42)\n 23208: a1 = u64 [sp + 0x10]\n 23211: u8 [a0 + 0x1f] = a1\n 23214: s1 = 0x1\n 23217: a1 = 0xffffffa0\n 23227: a2 = u64 [sp + 0x78]\n 23230: a1 = a2 <u a1\n 23233: a2 = u64 [sp + 0x70]\n 23236: a1 = 0 if a2 != 0\n 23238: a2 = u64 [sp + 0x50]\n 23241: a1 = 0 if a2 != 0\n 23243: u8 [a0 + 30] = 0\n 23246: u8 [a0 + 29] = 0\n 23249: u8 [a0 + 28] = 0\n 23252: u8 [a0 + 27] = 0\n 23255: u8 [a0 + 26] = 0\n 23258: u8 [a0 + 25] = 0\n 23261: u8 [a0 + 24] = 0\n 23264: u8 [a0 + 23] = 0\n 23267: u8 [a0 + 22] = 0\n 23270: u8 [a0 + 21] = 0\n 23273: u8 [a0 + 20] = 0\n 23276: u8 [a0 + 19] = 0\n 23279: u8 [a0 + 18] = 0\n 23282: u8 [a0 + 17] = 0\n 23285: u8 [a0 + 16] = 0\n 23288: u8 [a0 + 15] = 0\n 23291: u8 [a0 + 14] = 0\n 23294: u8 [a0 + 13] = 0\n 23297: u8 [a0 + 12] = 0\n 23300: u8 [a0 + 11] = 0\n 23303: u8 [a0 + 10] = 0\n 23306: u8 [a0 + 9] = 0\n 23309: u8 [a0 + 8] = 0\n 23312: u8 [a0 + 7] = 0\n 23315: u8 [a0 + 6] = 0\n 23318: u8 [a0 + 5] = 0\n 23321: u8 [a0 + 4] = 0\n 23324: u8 [a0 + 3] = 0\n 23327: u8 [a0 + 2] = 0\n 23330: u8 [a0 + 1] = 0\n 23333: u8 [a0 + 0] = 0\n 23335: jump @354 if a1 == 0\n      : @339 (gas: 4)\n 23339: a0 = u64 [sp + 0x68]\n 23342: i32 a0 = a0 + 0x60\n 23345: a1 = 0x20\n 23348: ra = 298, jump @0\n      : @340 [@dyn 149] (gas: 85)\n 23354: u8 [a0 + 0x1f] = s1\n 23357: u8 [a0 + 30] = 0\n 23360: u8 [a0 + 29] = 0\n 23363: u8 [a0 + 28] = 0\n 23366: u8 [a0 + 27] = 0\n 23369: u8 [a0 + 26] = 0\n 23372: u8 [a0 + 25] = 0\n 23375: u8 [a0 + 24] = 0\n 23378: u8 [a0 + 23] = 0\n 23381: u8 [a0 + 22] = 0\n 23384: u8 [a0 + 21] = 0\n 23387: u8 [a0 + 20] = 0\n 23390: u8 [a0 + 19] = 0\n 23393: u8 [a0 + 18] = 0\n 23396: u8 [a0 + 17] = 0\n 23399: u8 [a0 + 16] = 0\n 23402: u8 [a0 + 15] = 0\n 23405: u8 [a0 + 14] = 0\n 23408: u8 [a0 + 13] = 0\n 23411: u8 [a0 + 12] = 0\n 23414: u8 [a0 + 11] = 0\n 23417: u8 [a0 + 10] = 0\n 23420: u8 [a0 + 9] = 0\n 23423: u8 [a0 + 8] = 0\n 23426: u8 [a0 + 7] = 0\n 23429: u8 [a0 + 6] = 0\n 23432: u8 [a0 + 5] = 0\n 23435: u8 [a0 + 4] = 0\n 23438: u8 [a0 + 3] = 0\n 23441: u8 [a0 + 2] = 0\n 23444: u8 [a0 + 1] = 0\n 23447: u8 [a0 + 0] = 0\n 23449: a0 = u64 [sp + 0x58]\n 23452: u64 [sp + 0x158] = a0\n 23456: a0 = u64 [sp + 0x60]\n 23459: u64 [sp + 0x150] = a0\n 23463: a0 = u64 [sp + 0x70]\n 23466: u64 [sp + 0x148] = a0\n 23470: a0 = u64 [sp + 0x78]\n 23473: u64 [sp + 0x140] = a0\n 23477: u64 [sp + 376] = 0\n 23481: u64 [sp + 368] = 0\n 23485: u64 [sp + 360] = 0\n 23489: a0 = sp + 0x160\n 23493: a1 = sp + 0x140\n 23497: u64 [sp + 352] = 0\n 23501: ra = 0x12c\n 23505: sp = sp + 0xfffffffffffffde0\n 23509: u64 [sp + 0x218] = ra\n 23513: u64 [sp + 0x210] = s0\n 23517: u64 [sp + 0x208] = s1\n 23521: s0 = sp + 0x220\n 23525: sp = sp & 0xffffffffffffffe0\n 23528: a2 = u64 [a1 + 0x18]\n 23531: u64 [sp + 0x38] = a2\n 23534: a2 = u64 [a1 + 0x10]\n 23537: u64 [sp + 0x30] = a2\n 23540: a2 = u64 [a1 + 0x8]\n 23543: u64 [sp + 0x28] = a2\n 23546: a1 = u64 [a1]\n 23548: u64 [sp + 0x20] = a1\n 23551: a3 = u64 [a0 + 0x18]\n 23554: a2 = u64 [a0 + 0x10]\n 23557: a1 = u64 [a0 + 0x8]\n 23560: a0 = u64 [a0]\n 23562: u64 [sp + 0x40] = a3\n 23565: u64 [sp + 0x1d8] = a3\n 23569: u64 [sp + 0x48] = a2\n 23572: u64 [sp + 0x1d0] = a2\n 23576: u64 [sp + 0x50] = a1\n 23579: u64 [sp + 0x1c8] = a1\n 23583: u64 [sp + 0x58] = a0\n 23586: u64 [sp + 0x1c0] = a0\n 23590: u64 [sp + 504] = 0\n 23594: u64 [sp + 496] = 0\n 23598: u64 [sp + 488] = 0\n 23602: u64 [sp + 480] = 0\n 23606: u32 [sp + 416] = 0x20\n 23611: i32 a1 = sp + 0x1c0\n 23615: i32 a3 = sp + 0x1e0\n 23619: i32 a4 = sp + 0x1a0\n 23623: a2 = 0xffffffffffffffff\n 23626: a0 = 0\n 23628: ecalli 7 // 'get_storage'\n 23630: jump @296\n      : @341 [@dyn 150] (gas: 6)\n 23633: sp = s0 + 0xfffffffffffffd20\n 23637: ra = u64 [sp + 0x2d8]\n 23641: s0 = u64 [sp + 0x2d0]\n 23645: s1 = u64 [sp + 0x2c8]\n 23649: sp = sp + 0x2e0\n 23653: ret\n      : @342 (gas: 3)\n 23655: a0 = 0x40\n 23658: a1 = 0x20\n 23661: ra = 302, jump @0\n      : @343 [@dyn 151] (gas: 103)\n 23667: a1 = u8 [a0 + 0x11]\n 23670: a2 = u8 [a0 + 0x10]\n 23673: a3 = u8 [a0 + 0x12]\n 23676: a4 = u8 [a0 + 0x13]\n 23679: a1 = a1 << 0x8\n 23682: a1 = a1 | a2\n 23685: a3 = a3 << 0x10\n 23688: a4 = a4 << 0x18\n 23691: a3 = a3 | a4\n 23694: a1 = a1 | a3\n 23697: a2 = u8 [a0 + 0x15]\n 23700: a3 = u8 [a0 + 0x14]\n 23703: a4 = u8 [a0 + 0x16]\n 23706: a5 = u8 [a0 + 0x17]\n 23709: a2 = a2 << 0x8\n 23712: a2 = a2 | a3\n 23715: a4 = a4 << 0x10\n 23718: a5 = a5 << 0x18\n 23721: a4 = a4 | a5\n 23724: a2 = a2 | a4\n 23727: a2 = a2 << 0x20\n 23730: t0 = a2 | a1\n 23733: a2 = u8 [a0 + 0x1]\n 23736: a3 = u8 [a0]\n 23738: a4 = u8 [a0 + 0x2]\n 23741: a5 = u8 [a0 + 0x3]\n 23744: a2 = a2 << 0x8\n 23747: a2 = a2 | a3\n 23750: a4 = a4 << 0x10\n 23753: a5 = a5 << 0x18\n 23756: a4 = a4 | a5\n 23759: a2 = a2 | a4\n 23762: a3 = u8 [a0 + 0x5]\n 23765: a4 = u8 [a0 + 0x4]\n 23768: a5 = u8 [a0 + 0x6]\n 23771: s1 = u8 [a0 + 0x7]\n 23774: a3 = a3 << 0x8\n 23777: a3 = a3 | a4\n 23780: a5 = a5 << 0x10\n 23783: s1 = s1 << 0x18\n 23786: a5 = a5 | s1\n 23789: a3 = a3 | a5\n 23792: a3 = a3 << 0x20\n 23795: a2 = a2 | a3\n 23798: a3 = u8 [a0 + 0x19]\n 23801: a4 = u8 [a0 + 0x18]\n 23804: a5 = u8 [a0 + 0x1a]\n 23807: s1 = u8 [a0 + 0x1b]\n 23810: a3 = a3 << 0x8\n 23813: a3 = a3 | a4\n 23816: a5 = a5 << 0x10\n 23819: s1 = s1 << 0x18\n 23822: a5 = a5 | s1\n 23825: a3 = a3 | a5\n 23828: a4 = u8 [a0 + 0x1d]\n 23831: a5 = u8 [a0 + 0x1c]\n 23834: s1 = u8 [a0 + 0x1e]\n 23837: a1 = u8 [a0 + 0x1f]\n 23840: a4 = a4 << 0x8\n 23843: a4 = a4 | a5\n 23846: s1 = s1 << 0x10\n 23849: a1 = a1 << 0x18\n 23852: a1 = a1 | s1\n 23855: a1 = a1 | a4\n 23858: a1 = a1 << 0x20\n 23861: a3 = a3 | a1\n 23864: a1 = u8 [a0 + 0x9]\n 23867: a4 = u8 [a0 + 0x8]\n 23870: a5 = u8 [a0 + 0xa]\n 23873: s1 = u8 [a0 + 0xb]\n 23876: a1 = a1 << 0x8\n 23879: a1 = a1 | a4\n 23882: a5 = a5 << 0x10\n 23885: s1 = s1 << 0x18\n 23888: a5 = a5 | s1\n 23891: a1 = a1 | a5\n 23894: a4 = u8 [a0 + 0xd]\n 23897: a5 = u8 [a0 + 0xc]\n 23900: s1 = u8 [a0 + 0xe]\n 23903: a0 = u8 [a0 + 0xf]\n 23906: a4 = a4 << 0x8\n 23909: a4 = a4 | a5\n 23912: s1 = s1 << 0x10\n 23915: a0 = a0 << 0x18\n 23918: a0 = a0 | s1\n 23921: a0 = a0 | a4\n 23924: a0 = a0 << 0x20\n 23927: a0 = a0 | a1\n 23930: s1 = reverse a0\n 23932: a1 = reverse a3\n 23934: a2 = reverse a2\n 23936: a0 = reverse t0\n 23938: u64 [sp + 0x78] = a0\n 23941: u64 [sp + 0x70] = a2\n 23944: a0 = a0 | a2\n 23947: a2 = a1\n 23949: a1 = a1 | s1\n 23952: a1 = a1 | a0\n 23955: a1 = a1 >> 0x20\n 23958: a0 = a0 | s1\n 23961: a0 = a0 << 0x20\n 23964: a0 = a0 | a1\n 23967: jump @354 if a0 != 0\n      : @344 (gas: 5)\n 23971: u64 [sp + 0x68] = a2\n 23974: i32 a0 = a2 + 0\n 23976: a1 = 0x20\n 23979: u64 [sp + 0x60] = a0\n 23982: ra = 304, jump @0\n      : @345 [@dyn 152] (gas: 50)\n 23988: u8 [a0 + 31] = 0\n 23991: u8 [a0 + 30] = 0\n 23994: u8 [a0 + 29] = 0\n 23997: u8 [a0 + 28] = 0\n 24000: u8 [a0 + 27] = 0\n 24003: u8 [a0 + 26] = 0\n 24006: u8 [a0 + 25] = 0\n 24009: u8 [a0 + 24] = 0\n 24012: u8 [a0 + 23] = 0\n 24015: u8 [a0 + 22] = 0\n 24018: u8 [a0 + 21] = 0\n 24021: u8 [a0 + 20] = 0\n 24024: u8 [a0 + 19] = 0\n 24027: u8 [a0 + 18] = 0\n 24030: u8 [a0 + 17] = 0\n 24033: u8 [a0 + 16] = 0\n 24036: u8 [a0 + 15] = 0\n 24039: u8 [a0 + 14] = 0\n 24042: u8 [a0 + 13] = 0\n 24045: u8 [a0 + 12] = 0\n 24048: u8 [a0 + 11] = 0\n 24051: u8 [a0 + 10] = 0\n 24054: u8 [a0 + 9] = 0\n 24057: u8 [a0 + 8] = 0\n 24060: u8 [a0 + 7] = 0\n 24063: u8 [a0 + 6] = 0\n 24066: u8 [a0 + 5] = 0\n 24069: u8 [a0 + 4] = 0\n 24072: u8 [a0 + 3] = 0xa0\n 24077: u8 [a0 + 2] = 0x79\n 24081: u8 [a0 + 1] = 0xc3\n 24086: u8 [a0 + 0] = 0x8\n 24089: a1 = u64 [sp + 0x68]\n 24092: a0 = a1 + 0x4\n 24095: a1 = a0 <u a1\n 24098: a3 = u64 [sp + 0x78]\n 24101: a2 = a3 + a1\n 24104: a3 = a2 <u a3\n 24107: a3 = a1 if a1 == 0\n 24110: a3 = a3 + s1\n 24113: a1 = a3 <u s1\n 24116: a4 = u64 [sp + 0x70]\n 24119: a4 = a4 + a1\n 24122: u64 [sp + 0x88] = a2\n 24126: u64 [sp + 0x80] = a0\n 24130: u64 [sp + 0x90] = a3\n 24134: a0 = sp + 0xa0\n 24138: a1 = sp + 0x80\n 24142: u64 [sp + 0x98] = a4\n 24146: ra = 306, jump @251\n      : @346 [@dyn 153] (gas: 5)\n 24152: a0 = u64 [sp + 0xa8]\n 24156: t0 = u64 [sp + 0xb8]\n 24160: t1 = u64 [sp + 0xa0]\n 24164: a3 = u64 [sp + 0xb0]\n 24168: jump @353\n      : @347 (gas: 1)\n 24171: ra = 308, jump @259\n      : @348 [@dyn 154] (gas: 3)\n 24177: a0 = 0x40\n 24180: a1 = 0x20\n 24183: ra = 310, jump @0\n      : @349 [@dyn 155] (gas: 103)\n 24189: a1 = u8 [a0 + 0x11]\n 24192: a2 = u8 [a0 + 0x10]\n 24195: a3 = u8 [a0 + 0x12]\n 24198: a4 = u8 [a0 + 0x13]\n 24201: a1 = a1 << 0x8\n 24204: a1 = a1 | a2\n 24207: a3 = a3 << 0x10\n 24210: a4 = a4 << 0x18\n 24213: a3 = a3 | a4\n 24216: a1 = a1 | a3\n 24219: a2 = u8 [a0 + 0x15]\n 24222: a3 = u8 [a0 + 0x14]\n 24225: a4 = u8 [a0 + 0x16]\n 24228: a5 = u8 [a0 + 0x17]\n 24231: a2 = a2 << 0x8\n 24234: a2 = a2 | a3\n 24237: a4 = a4 << 0x10\n 24240: a5 = a5 << 0x18\n 24243: a4 = a4 | a5\n 24246: a2 = a2 | a4\n 24249: a2 = a2 << 0x20\n 24252: t0 = a2 | a1\n 24255: a2 = u8 [a0 + 0x1]\n 24258: a3 = u8 [a0]\n 24260: a4 = u8 [a0 + 0x2]\n 24263: a5 = u8 [a0 + 0x3]\n 24266: a2 = a2 << 0x8\n 24269: a2 = a2 | a3\n 24272: a4 = a4 << 0x10\n 24275: a5 = a5 << 0x18\n 24278: a4 = a4 | a5\n 24281: a2 = a2 | a4\n 24284: a3 = u8 [a0 + 0x5]\n 24287: a4 = u8 [a0 + 0x4]\n 24290: a5 = u8 [a0 + 0x6]\n 24293: s1 = u8 [a0 + 0x7]\n 24296: a3 = a3 << 0x8\n 24299: a3 = a3 | a4\n 24302: a5 = a5 << 0x10\n 24305: s1 = s1 << 0x18\n 24308: a5 = a5 | s1\n 24311: a3 = a3 | a5\n 24314: a3 = a3 << 0x20\n 24317: a2 = a2 | a3\n 24320: a3 = u8 [a0 + 0x19]\n 24323: a4 = u8 [a0 + 0x18]\n 24326: a5 = u8 [a0 + 0x1a]\n 24329: s1 = u8 [a0 + 0x1b]\n 24332: a3 = a3 << 0x8\n 24335: a3 = a3 | a4\n 24338: a5 = a5 << 0x10\n 24341: s1 = s1 << 0x18\n 24344: a5 = a5 | s1\n 24347: a3 = a3 | a5\n 24350: a4 = u8 [a0 + 0x1d]\n 24353: a5 = u8 [a0 + 0x1c]\n 24356: s1 = u8 [a0 + 0x1e]\n 24359: a1 = u8 [a0 + 0x1f]\n 24362: a4 = a4 << 0x8\n 24365: a4 = a4 | a5\n 24368: s1 = s1 << 0x10\n 24371: a1 = a1 << 0x18\n 24374: a1 = a1 | s1\n 24377: a1 = a1 | a4\n 24380: a1 = a1 << 0x20\n 24383: a3 = a3 | a1\n 24386: a1 = u8 [a0 + 0x9]\n 24389: a4 = u8 [a0 + 0x8]\n 24392: a5 = u8 [a0 + 0xa]\n 24395: s1 = u8 [a0 + 0xb]\n 24398: a1 = a1 << 0x8\n 24401: a1 = a1 | a4\n 24404: a5 = a5 << 0x10\n 24407: s1 = s1 << 0x18\n 24410: a5 = a5 | s1\n 24413: a1 = a1 | a5\n 24416: a4 = u8 [a0 + 0xd]\n 24419: a5 = u8 [a0 + 0xc]\n 24422: s1 = u8 [a0 + 0xe]\n 24425: a0 = u8 [a0 + 0xf]\n 24428: a4 = a4 << 0x8\n 24431: a4 = a4 | a5\n 24434: s1 = s1 << 0x10\n 24437: a0 = a0 << 0x18\n 24440: a0 = a0 | s1\n 24443: a0 = a0 | a4\n 24446: a0 = a0 << 0x20\n 24449: a0 = a0 | a1\n 24452: s1 = reverse a0\n 24454: a1 = reverse a3\n 24456: a2 = reverse a2\n 24458: a0 = reverse t0\n 24460: u64 [sp + 0x78] = a0\n 24463: u64 [sp + 0x70] = a2\n 24466: a0 = a0 | a2\n 24469: a2 = a1\n 24471: a1 = a1 | s1\n 24474: a1 = a1 | a0\n 24477: a1 = a1 >> 0x20\n 24480: a0 = a0 | s1\n 24483: a0 = a0 << 0x20\n 24486: a0 = a0 | a1\n 24489: jump @354 if a0 != 0\n      : @350 (gas: 5)\n 24493: u64 [sp + 0x68] = a2\n 24496: i32 a0 = a2 + 0\n 24498: a1 = 0x20\n 24501: u64 [sp + 0x60] = a0\n 24504: ra = 312, jump @0\n      : @351 [@dyn 156] (gas: 50)\n 24510: u8 [a0 + 31] = 0\n 24513: u8 [a0 + 30] = 0\n 24516: u8 [a0 + 29] = 0\n 24519: u8 [a0 + 28] = 0\n 24522: u8 [a0 + 27] = 0\n 24525: u8 [a0 + 26] = 0\n 24528: u8 [a0 + 25] = 0\n 24531: u8 [a0 + 24] = 0\n 24534: u8 [a0 + 23] = 0\n 24537: u8 [a0 + 22] = 0\n 24540: u8 [a0 + 21] = 0\n 24543: u8 [a0 + 20] = 0\n 24546: u8 [a0 + 19] = 0\n 24549: u8 [a0 + 18] = 0\n 24552: u8 [a0 + 17] = 0\n 24555: u8 [a0 + 16] = 0\n 24558: u8 [a0 + 15] = 0\n 24561: u8 [a0 + 14] = 0\n 24564: u8 [a0 + 13] = 0\n 24567: u8 [a0 + 12] = 0\n 24570: u8 [a0 + 11] = 0\n 24573: u8 [a0 + 10] = 0\n 24576: u8 [a0 + 9] = 0\n 24579: u8 [a0 + 8] = 0\n 24582: u8 [a0 + 7] = 0\n 24585: u8 [a0 + 6] = 0\n 24588: u8 [a0 + 5] = 0\n 24591: u8 [a0 + 4] = 0\n 24594: u8 [a0 + 3] = 0xa0\n 24599: u8 [a0 + 2] = 0x79\n 24603: u8 [a0 + 1] = 0xc3\n 24608: u8 [a0 + 0] = 0x8\n 24611: a1 = u64 [sp + 0x68]\n 24614: a0 = a1 + 0x4\n 24617: a1 = a0 <u a1\n 24620: a3 = u64 [sp + 0x78]\n 24623: a2 = a3 + a1\n 24626: a3 = a2 <u a3\n 24629: a3 = a1 if a1 == 0\n 24632: a3 = a3 + s1\n 24635: a1 = a3 <u s1\n 24638: a4 = u64 [sp + 0x70]\n 24641: a4 = a4 + a1\n 24644: u64 [sp + 0x108] = a2\n 24648: u64 [sp + 0x100] = a0\n 24652: u64 [sp + 0x110] = a3\n 24656: a0 = sp + 0x120\n 24660: a1 = sp + 0x100\n 24664: u64 [sp + 0x118] = a4\n 24668: ra = 314, jump @275\n      : @352 [@dyn 157] (gas: 5)\n 24674: a0 = u64 [sp + 0x128]\n 24678: t0 = u64 [sp + 0x138]\n 24682: t1 = u64 [sp + 0x120]\n 24686: a3 = u64 [sp + 0x130]\n 24690: fallthrough\n      : @353 (gas: 26)\n 24691: a1 = u64 [sp + 0x78]\n 24694: a4 = a0 ^ a1\n 24697: a5 = a0 <u a1\n 24700: t2 = a1\n 24702: a2 = u64 [sp + 0x68]\n 24705: a1 = t1 <u a2\n 24708: a5 = a1 if a4 == 0\n 24711: a4 = a3 - s1\n 24714: a3 = a3 <u s1\n 24717: s1 = u64 [sp + 0x70]\n 24720: s1 = t0 - s1\n 24723: s1 = s1 - a3\n 24726: a3 = a4 <u a5\n 24729: s1 = s1 - a3\n 24732: a4 = a4 - a5\n 24735: a0 = a0 - t2\n 24738: a1 = a0 - a1\n 24741: a0 = t1 - a2\n 24744: a1 = a1 | s1\n 24747: a2 = a0 | a4\n 24750: a2 = a2 | a1\n 24753: a1 = a1 | a4\n 24756: a2 = a2 >> 0x20\n 24759: a1 = a1 << 0x20\n 24762: a1 = a1 | a2\n 24765: jump @361 if a1 == 0\n      : @354 (gas: 1)\n 24768: trap\n      : @355 (gas: 3)\n 24769: a0 = 0\n 24771: a1 = 0\n 24773: ra = 316, jump @0\n      : @356 [@dyn 158] (gas: 5)\n 24779: i32 a1 = a0 + 0\n 24781: a0 = 0x1\n 24784: a2 = 0\n 24786: ecalli 12 // 'seal_return'\n 24788: fallthrough\n      : @357 (gas: 8)\n 24789: u64 [sp + 240] = 0\n 24793: u64 [sp + 232] = 0\n 24797: u64 [sp + 224] = 0\n 24801: a0 = 0x4e487b7100000000\n 24811: a1 = sp + 0xe0\n 24815: u64 [sp + 0xf8] = a0\n 24819: a0 = 0\n 24821: ra = 318, jump @8\n      : @358 [@dyn 159] (gas: 7)\n 24827: u64 [sp + 216] = 0\n 24831: u64 [sp + 208] = 0\n 24835: u64 [sp + 192] = 0x41\n 24840: a0 = 0x4\n 24843: a1 = sp + 0xc0\n 24847: u64 [sp + 200] = 0\n 24851: ra = 320, jump @8\n      : @359 [@dyn 160] (gas: 3)\n 24857: a1 = 0x24\n 24860: a0 = 0\n 24862: ra = 322, jump @0\n      : @360 [@dyn 161] (gas: 5)\n 24868: i32 a1 = a0 + 0\n 24870: a0 = 0x1\n 24873: a2 = 0x24\n 24876: ecalli 12 // 'seal_return'\n 24878: fallthrough\n      : @361 (gas: 4)\n 24879: i32 s1 = a0 + 0\n 24881: a0 = u64 [sp + 0x60]\n 24884: a1 = s1\n 24886: ra = 324, jump @0\n      : @362 [@dyn 162] (gas: 6)\n 24892: i32 a1 = a0 + 0\n 24894: a0 = 0x1\n 24897: a2 = s1\n 24899: ra = 0x146\n 24903: ecalli 12 // 'seal_return'\n 24905: fallthrough\n      : @363 [@dyn 163] (gas: 6)\n 24906: u64 [a0 + 24] = 0\n 24909: u64 [a0 + 16] = 0\n 24912: u64 [a0 + 8] = 0\n 24915: a1 = 0x60\n 24918: u64 [a0] = a1\n 24920: ret\n      : @364 (gas: 14)\n 24922: sp = sp + 0xffffffffffffff10\n 24926: u64 [sp + 0xe8] = ra\n 24930: u64 [sp + 0xe0] = s0\n 24934: u64 [sp + 0xd8] = s1\n 24938: s0 = sp + 0xf0\n 24942: sp = sp & 0xfffffffffffffff0\n 24945: a2 = u64 [a1 + 0x18]\n 24948: a4 = u64 [a1 + 0x10]\n 24951: a5 = u64 [a1 + 0x8]\n 24954: s1 = a4 | a2\n 24957: a3 = a5 <u 0x1\n 24960: a3 = 0 if s1 != 0\n 24962: u64 [sp + 0x48] = a0\n 24965: jump @370 if a3 == 0\n      : @365 (gas: 30)\n 24969: s1 = u64 [a1]\n 24971: a0 = a4 >> 0x3b\n 24974: u64 [sp + 0x20] = a2\n 24977: a1 = a2 << 0x5\n 24980: a0 = a0 | a1\n 24983: a1 = a5 >> 0x3b\n 24986: u64 [sp + 0x28] = a4\n 24989: a2 = a4 << 0x5\n 24992: a1 = a1 | a2\n 24995: a2 = s1 >> 0x3b\n 24998: u64 [sp + 0x10] = a5\n 25001: a3 = a5 << 0x5\n 25004: a2 = a2 | a3\n 25007: u64 [sp + 0x18] = s1\n 25010: a3 = s1 << 0x5\n 25013: a4 = a3 + 0x20\n 25016: a3 = a4 <u a3\n 25019: a5 = a2 + a3\n 25022: a2 = a5 <u a2\n 25025: a2 = a3 if a3 == 0\n 25028: a2 = a2 + a1\n 25031: a1 = a2 <u a1\n 25034: a3 = a0 + a1\n 25037: u64 [sp + 0x90] = a4\n 25041: u64 [sp + 0x98] = a5\n 25045: u64 [sp + 0xa0] = a2\n 25049: a0 = sp + 0xb0\n 25053: a1 = sp + 0x90\n 25057: u64 [sp + 0xa8] = a3\n 25061: ra = 328, jump @49\n      : @366 [@dyn 164] (gas: 15)\n 25067: a0 = u64 [sp + 0xc8]\n 25071: a2 = u64 [sp + 0xc0]\n 25075: a1 = u64 [sp + 0xb8]\n 25079: a3 = u64 [sp + 0xb0]\n 25083: u64 [sp + 0x38] = a0\n 25086: u64 [sp + 0x30] = a1\n 25089: a0 = a0 | a1\n 25092: a1 = a3 | a2\n 25095: a1 = a1 | a0\n 25098: a1 = a1 >> 0x20\n 25101: u64 [sp + 0x40] = a2\n 25104: a0 = a0 | a2\n 25107: a0 = a0 << 0x20\n 25110: a0 = a0 | a1\n 25113: jump @369 if a0 != 0\n      : @367 (gas: 4)\n 25117: i32 a0 = a3 + 0\n 25119: a1 = 0x20\n 25122: u64 [sp + 0x8] = a3\n 25125: ra = 330, jump @0\n      : @368 [@dyn 165] (gas: 83)\n 25131: a1 = u64 [sp + 0x20]\n 25134: a1 = reverse a1\n 25136: a2 = u64 [sp + 0x28]\n 25139: a2 = reverse a2\n 25141: a3 = u64 [sp + 0x10]\n 25144: a3 = reverse a3\n 25146: a4 = u64 [sp + 0x18]\n 25149: a4 = reverse a4\n 25151: a5 = a4 >> 0x38\n 25154: u8 [a0 + 0x1f] = a5\n 25157: a5 = a4 >> 0x30\n 25160: u8 [a0 + 0x1e] = a5\n 25163: a5 = a4 >> 0x28\n 25166: u8 [a0 + 0x1d] = a5\n 25169: a5 = a4 >> 0x20\n 25172: u8 [a0 + 0x1c] = a5\n 25175: a5 = a4 >> 0x18\n 25178: u8 [a0 + 0x1b] = a5\n 25181: a5 = a4 >> 0x10\n 25184: u8 [a0 + 0x1a] = a5\n 25187: a5 = a4 >> 0x8\n 25190: u8 [a0 + 0x19] = a5\n 25193: u8 [a0 + 0x18] = a4\n 25196: u8 [a0 + 0x10] = a3\n 25199: a4 = a3 >> 0x38\n 25202: u8 [a0 + 0x17] = a4\n 25205: a4 = a3 >> 0x30\n 25208: u8 [a0 + 0x16] = a4\n 25211: a4 = a3 >> 0x28\n 25214: u8 [a0 + 0x15] = a4\n 25217: a4 = a3 >> 0x20\n 25220: u8 [a0 + 0x14] = a4\n 25223: a4 = a3 >> 0x18\n 25226: u8 [a0 + 0x13] = a4\n 25229: a4 = a3 >> 0x10\n 25232: u8 [a0 + 0x12] = a4\n 25235: a3 = a3 >> 0x8\n 25238: u8 [a0 + 0x11] = a3\n 25241: u8 [a0 + 0x8] = a2\n 25244: a3 = a2 >> 0x38\n 25247: u8 [a0 + 0xf] = a3\n 25250: a3 = a2 >> 0x30\n 25253: u8 [a0 + 0xe] = a3\n 25256: a3 = a2 >> 0x28\n 25259: u8 [a0 + 0xd] = a3\n 25262: a3 = a2 >> 0x20\n 25265: u8 [a0 + 0xc] = a3\n 25268: a3 = a2 >> 0x18\n 25271: u8 [a0 + 0xb] = a3\n 25274: a3 = a2 >> 0x10\n 25277: u8 [a0 + 0xa] = a3\n 25280: a2 = a2 >> 0x8\n 25283: u8 [a0 + 0x9] = a2\n 25286: u8 [a0] = a1\n 25288: a2 = a1 >> 0x38\n 25291: u8 [a0 + 0x7] = a2\n 25294: a2 = a1 >> 0x30\n 25297: u8 [a0 + 0x6] = a2\n 25300: a2 = a1 >> 0x28\n 25303: u8 [a0 + 0x5] = a2\n 25306: a2 = a1 >> 0x20\n 25309: u8 [a0 + 0x4] = a2\n 25312: a2 = a1 >> 0x18\n 25315: u8 [a0 + 0x3] = a2\n 25318: a2 = a1 >> 0x10\n 25321: u8 [a0 + 0x2] = a2\n 25324: a1 = a1 >> 0x8\n 25327: u8 [a0 + 0x1] = a1\n 25330: a0 = u64 [sp + 0x48]\n 25333: a1 = u64 [sp + 0x8]\n 25336: u64 [a0] = a1\n 25338: a1 = u64 [sp + 0x38]\n 25341: u64 [a0 + 0x18] = a1\n 25344: a1 = u64 [sp + 0x30]\n 25347: u64 [a0 + 0x8] = a1\n 25350: a1 = u64 [sp + 0x40]\n 25353: u64 [a0 + 0x10] = a1\n 25356: sp = s0 + 0xffffffffffffff10\n 25360: ra = u64 [sp + 0xe8]\n 25364: s0 = u64 [sp + 0xe0]\n 25368: s1 = u64 [sp + 0xd8]\n 25372: sp = sp + 0xf0\n 25376: ret\n      : @369 (gas: 1)\n 25378: trap\n      : @370 (gas: 8)\n 25379: u64 [sp + 128] = 0\n 25383: u64 [sp + 120] = 0\n 25386: u64 [sp + 112] = 0\n 25389: a0 = 0x4e487b7100000000\n 25399: a1 = sp + 0x70\n 25402: u64 [sp + 0x88] = a0\n 25406: a0 = 0\n 25408: ra = 332, jump @8\n      : @371 [@dyn 166] (gas: 7)\n 25414: u64 [sp + 104] = 0\n 25417: u64 [sp + 96] = 0\n 25420: u64 [sp + 80] = 0x41\n 25424: a0 = 0x4\n 25427: a1 = sp + 0x50\n 25430: u64 [sp + 88] = 0\n 25433: ra = 334, jump @8\n      : @372 [@dyn 167] (gas: 3)\n 25439: a1 = 0x24\n 25442: a0 = 0\n 25444: ra = 336, jump @0\n      : @373 [@dyn 168] (gas: 6)\n 25450: i32 a1 = a0 + 0\n 25452: a0 = 0x1\n 25455: a2 = 0x24\n 25458: ra = 0x152\n 25462: ecalli 12 // 'seal_return'\n 25464: fallthrough\n      : @374 [@dyn 169] (gas: 14)\n 25465: sp = sp + 0xffffffffffffffa0\n 25468: u64 [sp + 0x58] = ra\n 25471: u64 [sp + 0x50] = s0\n 25474: u64 [sp + 0x48] = s1\n 25477: s0 = sp + 0x60\n 25480: sp = sp & 0xfffffffffffffff0\n 25483: s1 = a0\n 25485: u64 [sp + 24] = 0\n 25488: u64 [sp + 16] = 0\n 25491: u64 [sp + 0] = 0x80\n 25495: a0 = sp + 0x20\n 25498: a1 = sp\n 25500: u64 [sp + 8] = 0\n 25503: ra = 340, jump @49\n      : @375 [@dyn 170] (gas: 14)\n 25509: a0 = u64 [sp + 0x30]\n 25512: a1 = u64 [sp + 0x38]\n 25515: a2 = u64 [sp + 0x20]\n 25518: a3 = u64 [sp + 0x28]\n 25521: u64 [s1 + 0x10] = a0\n 25524: u64 [s1 + 0x18] = a1\n 25527: u64 [s1] = a2\n 25529: u64 [s1 + 0x8] = a3\n 25532: sp = s0 + 0xffffffffffffffa0\n 25535: ra = u64 [sp + 0x58]\n 25538: s0 = u64 [sp + 0x50]\n 25541: s1 = u64 [sp + 0x48]\n 25544: sp = sp + 0x60\n 25547: ret\n      : @376 [@dyn 171] (gas: 27)\n 25549: a0 = u64 [sp + 0xb8]\n 25553: u64 [sp + 0x48] = a0\n 25556: s1 = u64 [sp + 0xb0]\n 25560: a0 = u64 [sp + 0xa8]\n 25564: u64 [sp + 0x70] = a0\n 25567: a0 = u64 [sp + 0xa0]\n 25571: u64 [sp + 0x78] = a0\n 25574: a0 = u64 [sp + 0x50]\n 25577: u64 [sp + 0xd8] = a0\n 25581: a0 = u64 [sp + 0x58]\n 25584: u64 [sp + 0xd0] = a0\n 25588: a0 = u64 [sp + 0x60]\n 25591: u64 [sp + 0xc8] = a0\n 25595: a0 = u64 [sp + 0x68]\n 25598: u64 [sp + 0xc0] = a0\n 25602: u64 [sp + 248] = 0\n 25606: u64 [sp + 240] = 0\n 25610: u64 [sp + 232] = 0\n 25614: u64 [sp + 224] = 0\n 25618: u32 [sp + 256] = 0x20\n 25623: i32 a1 = sp + 0xc0\n 25627: i32 a3 = sp + 0xe0\n 25631: i32 a4 = sp + 0x100\n 25635: a2 = 0xffffffffffffffff\n 25638: a0 = 0\n 25640: ecalli 7 // 'get_storage'\n 25642: fallthrough\n      : @377 (gas: 12)\n 25643: a0 = u64 [sp + 0x48]\n 25646: a1 = u64 [sp + 0x70]\n 25649: a0 = a0 | a1\n 25652: a1 = u64 [sp + 0x78]\n 25655: a1 = a1 | s1\n 25658: a1 = a1 | a0\n 25661: a1 = a1 >> 0x20\n 25664: u64 [sp + 0x38] = s1\n 25667: a0 = a0 | s1\n 25670: a0 = a0 << 0x20\n 25673: a0 = a0 | a1\n 25676: jump @389 if a0 != 0\n      : @378 (gas: 11)\n 25680: a0 = u64 [sp + 0xf0]\n 25684: a1 = u64 [sp + 0xe8]\n 25688: u64 [sp + 0x28] = a1\n 25691: a1 = u64 [sp + 0xe0]\n 25695: u64 [sp + 0x30] = a1\n 25698: a0 = a0 << 0x20\n 25701: s1 = a0 >> 0x20\n 25704: a0 = i32 [sp + 0x78]\n 25707: a1 = 0x20\n 25710: u64 [sp + 0x40] = a0\n 25713: ra = 344, jump @0\n      : @379 [@dyn 172] (gas: 75)\n 25719: a1 = reverse s1\n 25721: a2 = u64 [sp + 0x28]\n 25724: a2 = reverse a2\n 25726: a3 = u64 [sp + 0x30]\n 25729: a3 = reverse a3\n 25731: a4 = a3 >> 0x38\n 25734: u8 [a0 + 0x1f] = a4\n 25737: a4 = a3 >> 0x30\n 25740: u8 [a0 + 0x1e] = a4\n 25743: a4 = a3 >> 0x28\n 25746: u8 [a0 + 0x1d] = a4\n 25749: a4 = a3 >> 0x20\n 25752: u8 [a0 + 0x1c] = a4\n 25755: a4 = a3 >> 0x18\n 25758: u8 [a0 + 0x1b] = a4\n 25761: a4 = a3 >> 0x10\n 25764: u8 [a0 + 0x1a] = a4\n 25767: a4 = a3 >> 0x8\n 25770: u8 [a0 + 0x19] = a4\n 25773: u8 [a0 + 0x18] = a3\n 25776: u8 [a0 + 0x10] = a2\n 25779: u8 [a0 + 11] = 0\n 25782: u8 [a0 + 10] = 0\n 25785: u8 [a0 + 9] = 0\n 25788: u8 [a0 + 7] = 0\n 25791: u8 [a0 + 6] = 0\n 25794: u8 [a0 + 5] = 0\n 25797: u8 [a0 + 4] = 0\n 25800: u8 [a0 + 3] = 0\n 25803: u8 [a0 + 2] = 0\n 25806: u8 [a0 + 1] = 0\n 25809: u8 [a0 + 0] = 0\n 25811: a3 = a2 >> 0x38\n 25814: u8 [a0 + 0x17] = a3\n 25817: a3 = a2 >> 0x30\n 25820: u8 [a0 + 0x16] = a3\n 25823: a3 = a2 >> 0x28\n 25826: u8 [a0 + 0x15] = a3\n 25829: a3 = a2 >> 0x20\n 25832: u8 [a0 + 0x14] = a3\n 25835: a3 = a2 >> 0x18\n 25838: u8 [a0 + 0x13] = a3\n 25841: a3 = a2 >> 0x10\n 25844: u8 [a0 + 0x12] = a3\n 25847: a2 = a2 >> 0x8\n 25850: u8 [a0 + 0x11] = a2\n 25853: u8 [a0 + 0x8] = a1\n 25856: a2 = a1 >> 0x38\n 25859: u8 [a0 + 0xf] = a2\n 25862: a2 = a1 >> 0x30\n 25865: u8 [a0 + 0xe] = a2\n 25868: a2 = a1 >> 0x28\n 25871: u8 [a0 + 0xd] = a2\n 25874: a1 = a1 >> 0x20\n 25877: u8 [a0 + 0xc] = a1\n 25880: a0 = u64 [sp + 0x50]\n 25883: u64 [sp + 0xd8] = a0\n 25887: a0 = u64 [sp + 0x58]\n 25890: u64 [sp + 0xd0] = a0\n 25894: a0 = u64 [sp + 0x60]\n 25897: u64 [sp + 0xc8] = a0\n 25901: a0 = u64 [sp + 0x68]\n 25904: u64 [sp + 0xc0] = a0\n 25908: u64 [sp + 248] = 0\n 25912: u64 [sp + 240] = 0\n 25916: u64 [sp + 232] = 0\n 25920: u64 [sp + 224] = 0\n 25924: u32 [sp + 256] = 0x20\n 25929: i32 a1 = sp + 0xc0\n 25933: i32 a3 = sp + 0xe0\n 25937: i32 a4 = sp + 0x100\n 25941: a2 = 0xffffffffffffffff\n 25944: a0 = 0\n 25946: ecalli 7 // 'get_storage'\n 25948: fallthrough\n      : @380 (gas: 13)\n 25949: a0 = u64 [sp + 0x48]\n 25952: a2 = u64 [sp + 0x38]\n 25955: a2 = a2 | a0\n 25958: a0 = 0x100000000\n 25968: u64 [sp + 0x28] = a0\n 25971: a0 = 0xffffffe0\n 25981: a1 = u64 [sp + 0x78]\n 25984: a0 = a1 <u a0\n 25987: a1 = u64 [sp + 0x70]\n 25990: a0 = 0 if a1 != 0\n 25992: u64 [sp + 0x30] = a2\n 25995: a0 = 0 if a2 != 0\n 25997: jump @389 if a0 == 0\n      : @381 (gas: 7)\n 26001: a0 = u64 [sp + 0xf0]\n 26005: u64 [sp + 0x18] = a0\n 26008: s1 = 0xff00000000000000\n 26018: a0 = u64 [sp + 0x40]\n 26021: i32 a0 = a0 + 0x20\n 26024: a1 = 0x20\n 26027: ra = 346, jump @0\n      : @382 [@dyn 173] (gas: 56)\n 26033: u8 [a0 + 30] = 0\n 26036: u8 [a0 + 29] = 0\n 26039: u64 [sp + 0x10] = s1\n 26042: a1 = s1 >> 0x20\n 26045: u8 [a0 + 0x1c] = a1\n 26048: u8 [a0 + 27] = 0\n 26051: u8 [a0 + 26] = 0\n 26054: u8 [a0 + 25] = 0\n 26057: u8 [a0 + 24] = 0\n 26060: u8 [a0 + 23] = 0\n 26063: u8 [a0 + 22] = 0\n 26066: u8 [a0 + 21] = 0\n 26069: u8 [a0 + 20] = 0\n 26072: u8 [a0 + 19] = 0\n 26075: u8 [a0 + 18] = 0\n 26078: u8 [a0 + 17] = 0\n 26081: u8 [a0 + 16] = 0\n 26084: u8 [a0 + 15] = 0\n 26087: u8 [a0 + 14] = 0\n 26090: u8 [a0 + 13] = 0\n 26093: u8 [a0 + 12] = 0\n 26096: u8 [a0 + 11] = 0\n 26099: u8 [a0 + 10] = 0\n 26102: u8 [a0 + 9] = 0\n 26105: u8 [a0 + 8] = 0\n 26108: u8 [a0 + 7] = 0\n 26111: u8 [a0 + 6] = 0\n 26114: u8 [a0 + 5] = 0\n 26117: u8 [a0 + 4] = 0\n 26120: u8 [a0 + 3] = 0\n 26123: u8 [a0 + 2] = 0\n 26126: u8 [a0 + 1] = 0\n 26129: u8 [a0 + 0] = 0\n 26131: a1 = u64 [sp + 0x18]\n 26134: a1 = a1 >> 0x20\n 26137: u8 [a0 + 0x1f] = a1\n 26140: a0 = u64 [sp + 0x50]\n 26143: u64 [sp + 0xd8] = a0\n 26147: a0 = u64 [sp + 0x58]\n 26150: u64 [sp + 0xd0] = a0\n 26154: a0 = u64 [sp + 0x60]\n 26157: u64 [sp + 0xc8] = a0\n 26161: a0 = u64 [sp + 0x68]\n 26164: u64 [sp + 0xc0] = a0\n 26168: u64 [sp + 248] = 0\n 26172: u64 [sp + 240] = 0\n 26176: u64 [sp + 232] = 0\n 26180: u64 [sp + 224] = 0\n 26184: u32 [sp + 256] = 0x20\n 26189: i32 a1 = sp + 0xc0\n 26193: i32 a3 = sp + 0xe0\n 26197: i32 a4 = sp + 0x100\n 26201: a2 = 0xffffffffffffffff\n 26204: a0 = 0\n 26206: ecalli 7 // 'get_storage'\n 26208: fallthrough\n      : @383 (gas: 9)\n 26209: a0 = u64 [sp + 0x28]\n 26212: a0 = a0 + 0xffffffffffffffc0\n 26215: a1 = u64 [sp + 0x78]\n 26218: a0 = a1 <u a0\n 26221: a1 = u64 [sp + 0x70]\n 26224: a0 = 0 if a1 != 0\n 26226: a1 = u64 [sp + 0x30]\n 26229: a0 = 0 if a1 != 0\n 26231: jump @389 if a0 == 0\n      : @384 (gas: 7)\n 26235: a0 = u64 [sp + 0xf0]\n 26239: u64 [sp + 0x28] = a0\n 26242: s1 = u64 [sp + 0xe8]\n 26246: a0 = u64 [sp + 0x40]\n 26249: i32 a0 = a0 + 0x40\n 26252: a1 = 0x20\n 26255: ra = 348, jump @0\n      : @385 [@dyn 174] (gas: 65)\n 26261: s1 = s1 >> 0x30\n 26264: a1 = u64 [sp + 0x28]\n 26267: a1 = a1 << 0x10\n 26270: a1 = a1 | s1\n 26273: a2 = u64 [sp + 0x10]\n 26276: a1 = a1 & a2\n 26279: u8 [a0 + 23] = 0\n 26282: u8 [a0 + 22] = 0\n 26285: u8 [a0 + 21] = 0\n 26288: u8 [a0 + 20] = 0\n 26291: u8 [a0 + 19] = 0\n 26294: u8 [a0 + 18] = 0\n 26297: u8 [a0 + 17] = 0\n 26300: u8 [a0 + 16] = 0\n 26303: u8 [a0 + 15] = 0\n 26306: u8 [a0 + 14] = 0\n 26309: u8 [a0 + 13] = 0\n 26312: u8 [a0 + 12] = 0\n 26315: u8 [a0 + 11] = 0\n 26318: u8 [a0 + 10] = 0\n 26321: u8 [a0 + 9] = 0\n 26324: u8 [a0 + 8] = 0\n 26327: u8 [a0 + 7] = 0\n 26330: u8 [a0 + 6] = 0\n 26333: u8 [a0 + 5] = 0\n 26336: u8 [a0 + 4] = 0\n 26339: u8 [a0 + 3] = 0\n 26342: u8 [a0 + 2] = 0\n 26345: u8 [a0 + 1] = 0\n 26348: u8 [a0 + 0] = 0\n 26350: u8 [a0 + 0x18] = a1\n 26353: a2 = a1 >> 0x38\n 26356: u8 [a0 + 0x1f] = a2\n 26359: a2 = a1 >> 0x30\n 26362: u8 [a0 + 0x1e] = a2\n 26365: a2 = a1 >> 0x28\n 26368: u8 [a0 + 0x1d] = a2\n 26371: a2 = a1 >> 0x20\n 26374: u8 [a0 + 0x1c] = a2\n 26377: a2 = a1 >> 0x18\n 26380: u8 [a0 + 0x1b] = a2\n 26383: a2 = a1 >> 0x10\n 26386: u8 [a0 + 0x1a] = a2\n 26389: a1 = a1 >> 0x8\n 26392: u8 [a0 + 0x19] = a1\n 26395: a0 = u64 [sp + 0x50]\n 26398: u64 [sp + 0xd8] = a0\n 26402: a0 = u64 [sp + 0x58]\n 26405: u64 [sp + 0xd0] = a0\n 26409: a0 = u64 [sp + 0x60]\n 26412: u64 [sp + 0xc8] = a0\n 26416: a0 = u64 [sp + 0x68]\n 26419: u64 [sp + 0xc0] = a0\n 26423: u64 [sp + 248] = 0\n 26427: u64 [sp + 240] = 0\n 26431: u64 [sp + 232] = 0\n 26435: u64 [sp + 224] = 0\n 26439: u32 [sp + 256] = 0x20\n 26444: i32 a1 = sp + 0xc0\n 26448: i32 a3 = sp + 0xe0\n 26452: i32 a4 = sp + 0x100\n 26456: a2 = 0xffffffffffffffff\n 26459: a0 = 0\n 26461: ecalli 7 // 'get_storage'\n 26463: fallthrough\n      : @386 (gas: 8)\n 26464: a0 = 0xffffffa0\n 26474: a1 = u64 [sp + 0x78]\n 26477: a0 = a1 <u a0\n 26480: a1 = u64 [sp + 0x70]\n 26483: a0 = 0 if a1 != 0\n 26485: a1 = u64 [sp + 0x30]\n 26488: a0 = 0 if a1 != 0\n 26490: jump @389 if a0 == 0\n      : @387 (gas: 8)\n 26494: a0 = u64 [sp + 0xf0]\n 26498: a1 = 0xff000000000000\n 26508: a0 = a0 & a1\n 26511: s1 = a0 >u 0\n 26513: a0 = u64 [sp + 0x40]\n 26516: i32 a0 = a0 + 0x60\n 26519: a1 = 0x20\n 26522: ra = 350, jump @0\n      : @388 [@dyn 175] (gas: 47)\n 26528: u8 [a0 + 30] = 0\n 26531: u8 [a0 + 29] = 0\n 26534: u8 [a0 + 28] = 0\n 26537: u8 [a0 + 27] = 0\n 26540: u8 [a0 + 26] = 0\n 26543: u8 [a0 + 25] = 0\n 26546: u8 [a0 + 24] = 0\n 26549: u8 [a0 + 23] = 0\n 26552: u8 [a0 + 22] = 0\n 26555: u8 [a0 + 21] = 0\n 26558: u8 [a0 + 20] = 0\n 26561: u8 [a0 + 19] = 0\n 26564: u8 [a0 + 18] = 0\n 26567: u8 [a0 + 17] = 0\n 26570: u8 [a0 + 16] = 0\n 26573: u8 [a0 + 15] = 0\n 26576: u8 [a0 + 14] = 0\n 26579: u8 [a0 + 13] = 0\n 26582: u8 [a0 + 12] = 0\n 26585: u8 [a0 + 11] = 0\n 26588: u8 [a0 + 10] = 0\n 26591: u8 [a0 + 9] = 0\n 26594: u8 [a0 + 8] = 0\n 26597: u8 [a0 + 7] = 0\n 26600: u8 [a0 + 6] = 0\n 26603: u8 [a0 + 5] = 0\n 26606: u8 [a0 + 4] = 0\n 26609: u8 [a0 + 3] = 0\n 26612: u8 [a0 + 2] = 0\n 26615: u8 [a0 + 1] = 0\n 26618: u8 [a0 + 0] = 0\n 26620: u8 [a0 + 0x1f] = s1\n 26623: a0 = u64 [sp + 0x20]\n 26626: a1 = u64 [sp + 0x78]\n 26629: u64 [a0] = a1\n 26631: a1 = u64 [sp + 0x48]\n 26634: u64 [a0 + 0x18] = a1\n 26637: a1 = u64 [sp + 0x70]\n 26640: u64 [a0 + 0x8] = a1\n 26643: a1 = u64 [sp + 0x38]\n 26646: u64 [a0 + 0x10] = a1\n 26649: sp = s0 + 0xfffffffffffffee0\n 26653: ra = u64 [sp + 0x118]\n 26657: s0 = u64 [sp + 0x110]\n 26661: s1 = u64 [sp + 0x108]\n 26665: sp = sp + 0x120\n 26669: ret\n      : @389 (gas: 1)\n 26671: trap\n      : @390 [@dyn 176] (gas: 11)\n 26672: a0 = u64 [sp + 0x138]\n 26676: u64 [sp + 0x38] = a0\n 26679: a0 = u64 [sp + 0x130]\n 26683: u64 [sp + 0x30] = a0\n 26686: a0 = u64 [sp + 0x128]\n 26690: u64 [sp + 0x28] = a0\n 26693: a0 = u64 [sp + 0x120]\n 26697: u64 [sp + 0x20] = a0\n 26700: a1 = 0x20\n 26703: a0 = 0\n 26705: ra = 354, jump @0\n      : @391 [@dyn 177] (gas: 70)\n 26711: a1 = u64 [sp + 0x88]\n 26715: a1 = reverse a1\n 26717: a2 = u64 [sp + 0x90]\n 26721: a2 = reverse a2\n 26723: a3 = u64 [sp + 0x98]\n 26727: a3 = reverse a3\n 26729: a4 = reverse s1\n 26731: a5 = a4 >> 0x38\n 26734: u8 [a0 + 0x1f] = a5\n 26737: a5 = a4 >> 0x30\n 26740: u8 [a0 + 0x1e] = a5\n 26743: a5 = a4 >> 0x28\n 26746: u8 [a0 + 0x1d] = a5\n 26749: a5 = a4 >> 0x20\n 26752: u8 [a0 + 0x1c] = a5\n 26755: a5 = a4 >> 0x18\n 26758: u8 [a0 + 0x1b] = a5\n 26761: a5 = a4 >> 0x10\n 26764: u8 [a0 + 0x1a] = a5\n 26767: a5 = a4 >> 0x8\n 26770: u8 [a0 + 0x19] = a5\n 26773: u8 [a0 + 0x18] = a4\n 26776: a4 = a3 >> 0x38\n 26779: u8 [a0 + 0x17] = a4\n 26782: a4 = a3 >> 0x30\n 26785: u8 [a0 + 0x16] = a4\n 26788: a4 = a3 >> 0x28\n 26791: u8 [a0 + 0x15] = a4\n 26794: a4 = a3 >> 0x20\n 26797: u8 [a0 + 0x14] = a4\n 26800: a4 = a3 >> 0x18\n 26803: u8 [a0 + 0x13] = a4\n 26806: a4 = a3 >> 0x10\n 26809: u8 [a0 + 0x12] = a4\n 26812: a4 = a3 >> 0x8\n 26815: u8 [a0 + 0x11] = a4\n 26818: u8 [a0 + 0x10] = a3\n 26821: a3 = a2 >> 0x38\n 26824: u8 [a0 + 0xf] = a3\n 26827: a3 = a2 >> 0x30\n 26830: u8 [a0 + 0xe] = a3\n 26833: a3 = a2 >> 0x28\n 26836: u8 [a0 + 0xd] = a3\n 26839: a3 = a2 >> 0x20\n 26842: u8 [a0 + 0xc] = a3\n 26845: a3 = a2 >> 0x18\n 26848: u8 [a0 + 0xb] = a3\n 26851: a3 = a2 >> 0x10\n 26854: u8 [a0 + 0xa] = a3\n 26857: a3 = a2 >> 0x8\n 26860: u8 [a0 + 0x9] = a3\n 26863: u8 [a0 + 0x8] = a2\n 26866: a2 = a1 >> 0x38\n 26869: u8 [a0 + 0x7] = a2\n 26872: a2 = a1 >> 0x30\n 26875: u8 [a0 + 0x6] = a2\n 26878: a2 = a1 >> 0x28\n 26881: u8 [a0 + 0x5] = a2\n 26884: a2 = a1 >> 0x20\n 26887: u8 [a0 + 0x4] = a2\n 26890: a2 = a1 >> 0x18\n 26893: u8 [a0 + 0x3] = a2\n 26896: a2 = a1 >> 0x10\n 26899: u8 [a0 + 0x2] = a2\n 26902: a2 = a1 >> 0x8\n 26905: u8 [a0 + 0x1] = a2\n 26908: u8 [a0] = a1\n 26910: a1 = 0x20\n 26913: a0 = 0\n 26915: ra = 356, jump @0\n      : @392 [@dyn 178] (gas: 5)\n 26921: i32 a0 = a0 + 0\n 26923: i32 a2 = sp + 0x180\n 26927: a1 = 0x20\n 26930: ecalli 8 // 'hash_keccak_256'\n 26932: fallthrough\n      : @393 (gas: 8)\n 26933: a0 = u64 [sp + 0xb8]\n 26937: a2 = u64 [sp + 0xb0]\n 26941: a0 = a0 | a2\n 26944: a1 = u64 [sp + 0xa0]\n 26948: a2 = u64 [sp + 0xa8]\n 26952: a1 = a1 | a2\n 26955: a0 = a0 | a1\n 26958: jump @399 if a0 == 0\n      : @394 (gas: 143)\n 26962: a1 = u64 [sp + 0x20]\n 26965: a2 = a1 + 0x20\n 26968: a0 = a2 <u a1\n 26971: t0 = a1\n 26973: a1 = u64 [sp + 0x28]\n 26976: a5 = a1 + a0\n 26979: t2 = a5 <u a1\n 26982: s1 = a1\n 26984: t2 = a0 if a0 == 0\n 26987: ra = u64 [sp + 0x30]\n 26990: t2 = t2 + ra\n 26993: t1 = t2 <u ra\n 26996: a0 = u64 [sp + 0x38]\n 26999: t1 = t1 + a0\n 27002: a0 = t2 >u 0\n 27004: a1 = t1 >u 0\n 27006: a1 = a0 if t1 == 0\n 27009: a0 = 0x100000000\n 27019: u64 [sp + 0x90] = a2\n 27023: a4 = a2\n 27025: a4 = a0 if a1 == 0\n 27028: a3 = a2\n 27030: u64 [sp + 0x88] = a5\n 27034: a3 = a0 if a5 == 0\n 27037: a0 = maxu(a2, a0)\n 27040: a0 = a3 if a5 != 0\n 27043: a3 = t2 | t1\n 27046: a0 = a4 if a3 != 0\n 27049: a2 = a5\n 27051: a2 = 0 if a1 == 0\n 27053: a2 = a5 if a3 == 0\n 27056: a3 = s1 ^ 0xffffffffffffffff\n 27059: a1 = a3 + a2\n 27062: a2 = t0 ^ 0xffffffffffffffff\n 27065: a0 = a0 + a2\n 27068: a2 = a0 <u a2\n 27071: a1 = a1 + a2\n 27074: a4 = a1 ^ a3\n 27077: t0 = a1 <u a3\n 27080: t0 = a2 if a4 == 0\n 27083: u64 [sp + 0x80] = t2\n 27087: a3 = t2\n 27089: u64 [sp + 0x98] = t1\n 27093: a3 = 0 if t1 == 0\n 27095: a3 = t2 if t1 == 0\n 27098: ra = ra ^ 0xffffffffffffffff\n 27101: t1 = ra + a3\n 27104: t0 = t0 + t1\n 27107: a2 = t0 << 0x3b\n 27110: s1 = a1 >> 0x5\n 27113: a2 = a2 | s1\n 27116: u64 [sp + 0x70] = a2\n 27119: a1 = a1 << 0x3b\n 27122: a0 = a0 >> 0x5\n 27125: s1 = a0 | a1\n 27128: u64 [sp + 0x78] = s1\n 27131: a4 = u64 [sp + 0xa8]\n 27135: a0 = a4 <u 0x1\n 27138: a3 = u64 [sp + 0xb0]\n 27142: a5 = a3 - a0\n 27145: t2 = a4 + 0xffffffffffffffff\n 27148: a0 = a5 ^ a2\n 27151: a1 = a5 <u a2\n 27154: a2 = t2 <u s1\n 27157: a2 = a1 if a0 != 0\n 27160: a0 = a4 | a3\n 27163: a0 = a0 <u 0x1\n 27166: a4 = u64 [sp + 0xa0]\n 27170: a1 = a4 <u a0\n 27173: a3 = u64 [sp + 0xb8]\n 27177: a1 = a3 - a1\n 27180: a0 = a4 - a0\n 27183: a3 = t1 <u ra\n 27186: a4 = u64 [sp + 0x38]\n 27189: ra = a4 ^ 0xffffffffffffffff\n 27192: a4 = u64 [sp + 0x98]\n 27196: ra = ra + a4\n 27199: a3 = a3 + ra\n 27202: s1 = t0 <u t1\n 27205: s1 = s1 + a3\n 27208: t0 = t0 >> 0x5\n 27211: a3 = s1 << 0x3b\n 27214: ra = t0 | a3\n 27217: s1 = s1 >> 0x5\n 27220: t0 = a0 <u ra\n 27223: t1 = a1 ^ s1\n 27226: a3 = a1 <u s1\n 27229: a3 = t0 if t1 == 0\n 27232: a4 = a0 ^ ra\n 27235: a4 = a4 | t1\n 27238: a3 = a2 if a4 == 0\n 27241: a1 = s1 if a3 == 0\n 27244: a0 = ra if a3 == 0\n 27247: a2 = u64 [sp + 0x70]\n 27250: a5 = a2 if a3 == 0\n 27253: a2 = u64 [sp + 0x190]\n 27257: a4 = u64 [sp + 0x78]\n 27260: t2 = a4 if a3 == 0\n 27263: a3 = t2 >> 0x3b\n 27266: a4 = a5 << 0x5\n 27269: t0 = a4 | a3\n 27272: a5 = a5 >> 0x3b\n 27275: a4 = a0 << 0x5\n 27278: a3 = a4 | a5\n 27281: a5 = u64 [sp + 0x180]\n 27285: a0 = a0 >> 0x3b\n 27288: a1 = a1 << 0x5\n 27291: a0 = a0 | a1\n 27294: a1 = u64 [sp + 0x188]\n 27298: a4 = u64 [sp + 0x98]\n 27302: a0 = a0 + a4\n 27305: s1 = u64 [sp + 0x198]\n 27309: a5 = reverse a5\n 27311: ra = reverse a1\n 27313: t1 = reverse a2\n 27315: a4 = reverse s1\n 27317: t2 = t2 << 0x5\n 27320: a1 = u64 [sp + 0x80]\n 27324: s1 = a1 + a3\n 27327: a1 = s1 <u a1\n 27330: a0 = a0 + a1\n 27333: a2 = u64 [sp + 0x88]\n 27337: a3 = a2 + t0\n 27340: a1 = u64 [sp + 0x90]\n 27344: t2 = t2 + a1\n 27347: u64 [sp + 0x58] = t2\n 27350: a1 = t2 <u a1\n 27353: a3 = a3 + a1\n 27356: t0 = a3 ^ a2\n 27359: u64 [sp + 0x50] = a3\n 27362: a3 = a3 <u a2\n 27365: a3 = a1 if t0 == 0\n 27368: a3 = a3 + s1\n 27371: u64 [sp + 0x48] = a3\n 27374: a1 = a3 <u s1\n 27377: a0 = a0 + a1\n 27380: u64 [sp + 0x40] = a0\n 27383: t0 = u64 [sp + 0x20]\n 27386: s1 = u64 [sp + 0x28]\n 27389: t2 = u64 [sp + 0x30]\n 27392: a0 = u64 [sp + 0x38]\n 27395: u64 [sp + 0xb8] = a0\n 27399: fallthrough\n      : @395 (gas: 46)\n 27400: a3 = t0 + 0x20\n 27403: u64 [sp + 0xa0] = a3\n 27407: a2 = a3 <u t0\n 27410: a3 = s1 + a2\n 27413: u64 [sp + 0xb0] = a3\n 27417: s1 = a3 <u s1\n 27420: s1 = a2 if a2 == 0\n 27423: s1 = s1 + t2\n 27426: u64 [sp + 0xa8] = s1\n 27430: a0 = s1 <u t2\n 27433: s1 = u64 [sp + 0xb8]\n 27437: s1 = s1 + a0\n 27440: u64 [sp + 0x88] = a4\n 27444: u64 [sp + 0xc0] = a4\n 27448: u64 [sp + 0x90] = t1\n 27452: u64 [sp + 0xc8] = t1\n 27456: u64 [sp + 0x80] = ra\n 27460: u64 [sp + 0xd0] = ra\n 27464: a0 = sp + 0xe0\n 27468: a1 = sp + 0xc0\n 27472: u64 [sp + 0x98] = a5\n 27476: u64 [sp + 0xd8] = a5\n 27480: ra = 0x166\n 27484: sp = sp + 0xfffffffffffffee0\n 27488: u64 [sp + 0x118] = ra\n 27492: u64 [sp + 0x110] = s0\n 27496: u64 [sp + 0x108] = s1\n 27500: s0 = sp + 0x120\n 27504: sp = sp & 0xffffffffffffffe0\n 27507: a2 = u64 [a1]\n 27509: u64 [sp + 0x68] = a2\n 27512: a2 = u64 [a1 + 0x8]\n 27515: u64 [sp + 0x60] = a2\n 27518: a2 = u64 [a1 + 0x10]\n 27521: u64 [sp + 0x58] = a2\n 27524: a1 = u64 [a1 + 0x18]\n 27527: u64 [sp + 0x50] = a1\n 27530: u64 [sp + 0x20] = a0\n 27533: u64 [sp + 152] = 0\n 27537: u64 [sp + 144] = 0\n 27541: u64 [sp + 128] = 0x80\n 27547: a0 = sp + 0xa0\n 27551: a1 = sp + 0x80\n 27555: u64 [sp + 136] = 0\n 27559: ra = 0x156\n 27563: jump @49\n      : @396 [@dyn 179] (gas: 12)\n 27566: a2 = u64 [sp + 0xa0]\n 27570: a3 = u64 [sp + 0xa8]\n 27574: a0 = a2 | a3\n 27577: u64 [sp + 0xb8] = s1\n 27581: a1 = u64 [sp + 0xb0]\n 27585: a1 = a1 | s1\n 27588: a0 = a0 | a1\n 27591: a0 = a0 >> 0x20\n 27594: a1 = a1 | a3\n 27597: a1 = a1 << 0x20\n 27600: a0 = a0 | a1\n 27603: jump @400 if a0 != 0\n      : @397 (gas: 12)\n 27607: a0 = u64 [sp + 0xf8]\n 27611: u64 [sp + 0x78] = a0\n 27614: a0 = u64 [sp + 0xf0]\n 27618: u64 [sp + 0x70] = a0\n 27621: a0 = u64 [sp + 0xe8]\n 27625: u64 [sp + 0x68] = a0\n 27628: a0 = u64 [sp + 0xe0]\n 27632: u64 [sp + 0x60] = a0\n 27635: i32 a0 = a2 + 0\n 27637: a1 = 0x20\n 27640: s1 = a2\n 27642: ra = 360, jump @0\n      : @398 [@dyn 180] (gas: 97)\n 27648: t0 = s1\n 27650: a1 = u64 [sp + 0x60]\n 27653: a1 = reverse a1\n 27655: a2 = a1 >> 0x38\n 27658: u8 [a0 + 0x1f] = a2\n 27661: a2 = a1 >> 0x30\n 27664: u8 [a0 + 0x1e] = a2\n 27667: a2 = a1 >> 0x28\n 27670: u8 [a0 + 0x1d] = a2\n 27673: a2 = a1 >> 0x20\n 27676: u8 [a0 + 0x1c] = a2\n 27679: a2 = a1 >> 0x18\n 27682: u8 [a0 + 0x1b] = a2\n 27685: a2 = a1 >> 0x10\n 27688: u8 [a0 + 0x1a] = a2\n 27691: a2 = a1 >> 0x8\n 27694: u8 [a0 + 0x19] = a2\n 27697: a2 = u64 [sp + 0x68]\n 27700: a2 = reverse a2\n 27702: u8 [a0 + 0x18] = a1\n 27705: a1 = a2 >> 0x38\n 27708: u8 [a0 + 0x17] = a1\n 27711: a1 = a2 >> 0x30\n 27714: u8 [a0 + 0x16] = a1\n 27717: a1 = a2 >> 0x28\n 27720: u8 [a0 + 0x15] = a1\n 27723: a1 = a2 >> 0x20\n 27726: u8 [a0 + 0x14] = a1\n 27729: a1 = a2 >> 0x18\n 27732: u8 [a0 + 0x13] = a1\n 27735: a1 = a2 >> 0x10\n 27738: u8 [a0 + 0x12] = a1\n 27741: a1 = u64 [sp + 0x70]\n 27744: a1 = reverse a1\n 27746: u8 [a0 + 0x10] = a2\n 27749: a2 = a2 >> 0x8\n 27752: u8 [a0 + 0x11] = a2\n 27755: a2 = a1 >> 0x38\n 27758: u8 [a0 + 0xf] = a2\n 27761: a2 = a1 >> 0x30\n 27764: u8 [a0 + 0xe] = a2\n 27767: a2 = a1 >> 0x28\n 27770: u8 [a0 + 0xd] = a2\n 27773: a2 = a1 >> 0x20\n 27776: u8 [a0 + 0xc] = a2\n 27779: a2 = a1 >> 0x18\n 27782: u8 [a0 + 0xb] = a2\n 27785: a2 = a1 >> 0x10\n 27788: u8 [a0 + 0xa] = a2\n 27791: a2 = u64 [sp + 0x78]\n 27794: a2 = reverse a2\n 27796: u8 [a0 + 0x8] = a1\n 27799: a1 = a1 >> 0x8\n 27802: u8 [a0 + 0x9] = a1\n 27805: u8 [a0] = a2\n 27807: a1 = a2 >> 0x38\n 27810: u8 [a0 + 0x7] = a1\n 27813: a1 = a2 >> 0x30\n 27816: u8 [a0 + 0x6] = a1\n 27819: a1 = a2 >> 0x28\n 27822: u8 [a0 + 0x5] = a1\n 27825: a1 = a2 >> 0x20\n 27828: u8 [a0 + 0x4] = a1\n 27831: a1 = a2 >> 0x18\n 27834: u8 [a0 + 0x3] = a1\n 27837: a1 = a2 >> 0x10\n 27840: u8 [a0 + 0x2] = a1\n 27843: a2 = a2 >> 0x8\n 27846: u8 [a0 + 0x1] = a2\n 27849: a4 = u64 [sp + 0x88]\n 27853: a4 = a4 + 0x1\n 27856: a0 = a4 <u 0x1\n 27859: t1 = u64 [sp + 0x90]\n 27863: t1 = t1 + a0\n 27866: a0 = u64 [sp + 0x58]\n 27869: a0 = a0 ^ s1\n 27872: a1 = u64 [sp + 0x48]\n 27875: t2 = u64 [sp + 0xa8]\n 27879: a1 = t2 ^ a1\n 27882: a0 = a0 | a1\n 27885: a1 = u64 [sp + 0x50]\n 27888: s1 = u64 [sp + 0xb0]\n 27892: a1 = a1 ^ s1\n 27895: a2 = u64 [sp + 0x40]\n 27898: a3 = u64 [sp + 0xb8]\n 27902: a2 = a2 ^ a3\n 27905: a1 = a1 | a2\n 27908: a0 = a0 | a1\n 27911: a1 = a4 | t1\n 27914: a1 = a1 <u 0x1\n 27917: a2 = u64 [sp + 0x80]\n 27921: a1 = a1 + a2\n 27924: a2 = a1 <u a2\n 27927: a5 = u64 [sp + 0x98]\n 27931: a5 = a5 + a2\n 27934: ra = a1\n 27936: jump @395 if a0 != 0\n      : @399 (gas: 15)\n 27940: a0 = u64 [sp + 0x18]\n 27943: a1 = u64 [sp + 0x20]\n 27946: u64 [a0] = a1\n 27948: a1 = u64 [sp + 0x28]\n 27951: u64 [a0 + 0x8] = a1\n 27954: a1 = u64 [sp + 0x30]\n 27957: u64 [a0 + 0x10] = a1\n 27960: a1 = u64 [sp + 0x38]\n 27963: u64 [a0 + 0x18] = a1\n 27966: sp = s0 + 0xfffffffffffffe40\n 27970: ra = u64 [sp + 0x1b8]\n 27974: s0 = u64 [sp + 0x1b0]\n 27978: s1 = u64 [sp + 0x1a8]\n 27982: sp = sp + 0x1c0\n 27986: ret\n      : @400 (gas: 1)\n 27988: trap\n      : @401 (gas: 17)\n 27989: sp = sp + 0xffffffffffffffa0\n 27992: u64 [sp + 0x58] = ra\n 27995: u64 [sp + 0x50] = s0\n 27998: u64 [sp + 0x48] = s1\n 28001: a3 = u64 [a1 + 0x18]\n 28004: a4 = u64 [a1 + 0x10]\n 28007: a5 = u64 [a1 + 0x8]\n 28010: s1 = u64 [a1]\n 28012: a1 = a5 | a3\n 28015: a2 = s1 | a4\n 28018: a2 = a2 | a1\n 28021: a2 = a2 >> 0x20\n 28024: a1 = a1 | a4\n 28027: a1 = a1 << 0x20\n 28030: a1 = a1 | a2\n 28033: u64 [sp + 0x28] = a0\n 28036: jump @408 if a1 != 0\n      : @402 (gas: 19)\n 28040: a0 = s1 + 0x20\n 28043: u64 [sp + 0x30] = a0\n 28046: a0 = a0 <u s1\n 28049: a1 = a5 + a0\n 28052: u64 [sp + 0x40] = a1\n 28055: u64 [sp + 0x8] = a5\n 28058: s0 = a1 <u a5\n 28061: s0 = a0 if a0 == 0\n 28064: s0 = s0 + a4\n 28067: u64 [sp + 0x10] = a4\n 28070: a0 = s0 <u a4\n 28073: u64 [sp + 0x18] = a3\n 28076: a0 = a0 + a3\n 28079: u64 [sp + 0x38] = a0\n 28082: u64 [sp] = s1\n 28084: i32 a0 = s1 + 0\n 28086: a1 = 0x20\n 28089: s1 = 0x20\n 28092: ra = 362, jump @0\n      : @403 [@dyn 181] (gas: 45)\n 28098: u8 [a0 + 0x1f] = s1\n 28101: a1 = u64 [sp + 0x30]\n 28104: s1 = a1\n 28106: a1 = a1 | s0\n 28109: a2 = u64 [sp + 0x40]\n 28112: a4 = u64 [sp + 0x38]\n 28115: a2 = a2 | a4\n 28118: a1 = a1 | a2\n 28121: a1 = a1 >> 0x20\n 28124: u64 [sp + 0x20] = s0\n 28127: a2 = a2 | s0\n 28130: a2 = a2 << 0x20\n 28133: a1 = a1 | a2\n 28136: u8 [a0 + 30] = 0\n 28139: u8 [a0 + 29] = 0\n 28142: u8 [a0 + 28] = 0\n 28145: u8 [a0 + 27] = 0\n 28148: u8 [a0 + 26] = 0\n 28151: u8 [a0 + 25] = 0\n 28154: u8 [a0 + 24] = 0\n 28157: u8 [a0 + 23] = 0\n 28160: u8 [a0 + 22] = 0\n 28163: u8 [a0 + 21] = 0\n 28166: u8 [a0 + 20] = 0\n 28169: u8 [a0 + 19] = 0\n 28172: u8 [a0 + 18] = 0\n 28175: u8 [a0 + 17] = 0\n 28178: u8 [a0 + 16] = 0\n 28181: u8 [a0 + 15] = 0\n 28184: u8 [a0 + 14] = 0\n 28187: u8 [a0 + 13] = 0\n 28190: u8 [a0 + 12] = 0\n 28193: u8 [a0 + 11] = 0\n 28196: u8 [a0 + 10] = 0\n 28199: u8 [a0 + 9] = 0\n 28202: u8 [a0 + 8] = 0\n 28205: u8 [a0 + 7] = 0\n 28208: u8 [a0 + 6] = 0\n 28211: u8 [a0 + 5] = 0\n 28214: u8 [a0 + 4] = 0\n 28217: u8 [a0 + 3] = 0\n 28220: u8 [a0 + 2] = 0\n 28223: u8 [a0 + 1] = 0\n 28226: u8 [a0 + 0] = 0\n 28228: jump @408 if a1 != 0\n      : @404 (gas: 4)\n 28232: i32 s0 = s1 + 0\n 28234: a1 = 0x20\n 28237: a0 = s0\n 28239: ra = 364, jump @0\n      : @405 [@dyn 182] (gas: 41)\n 28245: u8 [a0 + 31] = 0x8\n 28249: u8 [a0 + 30] = 0\n 28252: u8 [a0 + 29] = 0\n 28255: u8 [a0 + 28] = 0\n 28258: u8 [a0 + 27] = 0\n 28261: u8 [a0 + 26] = 0\n 28264: u8 [a0 + 25] = 0\n 28267: u8 [a0 + 24] = 0\n 28270: u8 [a0 + 23] = 0\n 28273: u8 [a0 + 22] = 0\n 28276: u8 [a0 + 21] = 0\n 28279: u8 [a0 + 20] = 0\n 28282: u8 [a0 + 19] = 0\n 28285: u8 [a0 + 18] = 0\n 28288: u8 [a0 + 17] = 0\n 28291: u8 [a0 + 16] = 0\n 28294: u8 [a0 + 15] = 0\n 28297: u8 [a0 + 14] = 0\n 28300: u8 [a0 + 13] = 0\n 28303: u8 [a0 + 12] = 0\n 28306: u8 [a0 + 11] = 0\n 28309: u8 [a0 + 10] = 0\n 28312: u8 [a0 + 9] = 0\n 28315: u8 [a0 + 8] = 0\n 28318: u8 [a0 + 7] = 0\n 28321: u8 [a0 + 6] = 0\n 28324: u8 [a0 + 5] = 0\n 28327: u8 [a0 + 4] = 0\n 28330: u8 [a0 + 3] = 0\n 28333: u8 [a0 + 2] = 0\n 28336: u8 [a0 + 1] = 0\n 28339: a1 = u64 [sp + 0x20]\n 28342: a2 = u64 [sp + 0x38]\n 28345: a1 = a1 | a2\n 28348: a2 = 0xffffffe0\n 28358: a2 = s1 <u a2\n 28361: a3 = u64 [sp + 0x40]\n 28364: a2 = 0 if a3 != 0\n 28366: a2 = 0 if a1 != 0\n 28368: u8 [a0 + 0] = 0\n 28370: jump @408 if a2 == 0\n      : @406 (gas: 3)\n 28374: i32 a0 = s0 + 0x20\n 28377: a1 = 0x20\n 28380: ra = 366, jump @0\n      : @407 [@dyn 183] (gas: 54)\n 28386: u8 [a0 + 31] = 0\n 28389: u8 [a0 + 30] = 0\n 28392: u8 [a0 + 29] = 0\n 28395: u8 [a0 + 28] = 0\n 28398: u8 [a0 + 27] = 0\n 28401: u8 [a0 + 26] = 0\n 28404: u8 [a0 + 25] = 0\n 28407: u8 [a0 + 24] = 0\n 28410: u8 [a0 + 23] = 0\n 28413: u8 [a0 + 22] = 0\n 28416: u8 [a0 + 21] = 0\n 28419: u8 [a0 + 20] = 0\n 28422: u8 [a0 + 19] = 0\n 28425: u8 [a0 + 18] = 0\n 28428: u8 [a0 + 17] = 0\n 28431: u8 [a0 + 16] = 0\n 28434: u8 [a0 + 15] = 0\n 28437: u8 [a0 + 14] = 0\n 28440: u8 [a0 + 13] = 0\n 28443: u8 [a0 + 12] = 0\n 28446: u8 [a0 + 11] = 0\n 28449: u8 [a0 + 10] = 0\n 28452: u8 [a0 + 9] = 0\n 28455: u8 [a0 + 8] = 0\n 28458: u8 [a0 + 7] = 0x65\n 28462: u8 [a0 + 6] = 0x76\n 28466: u8 [a0 + 5] = 0x69\n 28470: u8 [a0 + 4] = 0x74\n 28474: u8 [a0 + 3] = 0x63\n 28478: u8 [a0 + 2] = 0x61\n 28482: u8 [a0 + 1] = 0x6e\n 28486: u8 [a0 + 0] = 0x49\n 28489: a1 = u64 [sp]\n 28491: a0 = a1 + 0x60\n 28494: a1 = a0 <u a1\n 28497: a3 = u64 [sp + 0x8]\n 28500: a2 = a3 + a1\n 28503: a3 = a2 <u a3\n 28506: a3 = a1 if a1 == 0\n 28509: a1 = u64 [sp + 0x10]\n 28512: a3 = a3 + a1\n 28515: a1 = a3 <u a1\n 28518: a4 = u64 [sp + 0x18]\n 28521: a1 = a1 + a4\n 28524: a4 = u64 [sp + 0x28]\n 28527: u64 [a4] = a0\n 28529: u64 [a4 + 0x8] = a2\n 28532: u64 [a4 + 0x10] = a3\n 28535: u64 [a4 + 0x18] = a1\n 28538: ra = u64 [sp + 0x58]\n 28541: s0 = u64 [sp + 0x50]\n 28544: s1 = u64 [sp + 0x48]\n 28547: sp = sp + 0x60\n 28550: ret\n      : @408 (gas: 1)\n 28552: trap\n      : @409 (gas: 17)\n 28553: sp = sp + 0xffffffffffffffa0\n 28556: u64 [sp + 0x58] = ra\n 28559: u64 [sp + 0x50] = s0\n 28562: u64 [sp + 0x48] = s1\n 28565: a3 = u64 [a1 + 0x18]\n 28568: a4 = u64 [a1 + 0x10]\n 28571: a5 = u64 [a1 + 0x8]\n 28574: s1 = u64 [a1]\n 28576: a1 = a5 | a3\n 28579: a2 = s1 | a4\n 28582: a2 = a2 | a1\n 28585: a2 = a2 >> 0x20\n 28588: a1 = a1 | a4\n 28591: a1 = a1 << 0x20\n 28594: a1 = a1 | a2\n 28597: u64 [sp + 0x28] = a0\n 28600: jump @416 if a1 != 0\n      : @410 (gas: 19)\n 28604: a0 = s1 + 0x20\n 28607: u64 [sp + 0x30] = a0\n 28610: a0 = a0 <u s1\n 28613: a1 = a5 + a0\n 28616: u64 [sp + 0x40] = a1\n 28619: u64 [sp + 0x8] = a5\n 28622: s0 = a1 <u a5\n 28625: s0 = a0 if a0 == 0\n 28628: s0 = s0 + a4\n 28631: u64 [sp + 0x10] = a4\n 28634: a0 = s0 <u a4\n 28637: u64 [sp + 0x18] = a3\n 28640: a0 = a0 + a3\n 28643: u64 [sp + 0x38] = a0\n 28646: u64 [sp] = s1\n 28648: i32 a0 = s1 + 0\n 28650: a1 = 0x20\n 28653: s1 = 0x20\n 28656: ra = 368, jump @0\n      : @411 [@dyn 184] (gas: 45)\n 28662: u8 [a0 + 0x1f] = s1\n 28665: a1 = u64 [sp + 0x30]\n 28668: s1 = a1\n 28670: a1 = a1 | s0\n 28673: a2 = u64 [sp + 0x40]\n 28676: a4 = u64 [sp + 0x38]\n 28679: a2 = a2 | a4\n 28682: a1 = a1 | a2\n 28685: a1 = a1 >> 0x20\n 28688: u64 [sp + 0x20] = s0\n 28691: a2 = a2 | s0\n 28694: a2 = a2 << 0x20\n 28697: a1 = a1 | a2\n 28700: u8 [a0 + 30] = 0\n 28703: u8 [a0 + 29] = 0\n 28706: u8 [a0 + 28] = 0\n 28709: u8 [a0 + 27] = 0\n 28712: u8 [a0 + 26] = 0\n 28715: u8 [a0 + 25] = 0\n 28718: u8 [a0 + 24] = 0\n 28721: u8 [a0 + 23] = 0\n 28724: u8 [a0 + 22] = 0\n 28727: u8 [a0 + 21] = 0\n 28730: u8 [a0 + 20] = 0\n 28733: u8 [a0 + 19] = 0\n 28736: u8 [a0 + 18] = 0\n 28739: u8 [a0 + 17] = 0\n 28742: u8 [a0 + 16] = 0\n 28745: u8 [a0 + 15] = 0\n 28748: u8 [a0 + 14] = 0\n 28751: u8 [a0 + 13] = 0\n 28754: u8 [a0 + 12] = 0\n 28757: u8 [a0 + 11] = 0\n 28760: u8 [a0 + 10] = 0\n 28763: u8 [a0 + 9] = 0\n 28766: u8 [a0 + 8] = 0\n 28769: u8 [a0 + 7] = 0\n 28772: u8 [a0 + 6] = 0\n 28775: u8 [a0 + 5] = 0\n 28778: u8 [a0 + 4] = 0\n 28781: u8 [a0 + 3] = 0\n 28784: u8 [a0 + 2] = 0\n 28787: u8 [a0 + 1] = 0\n 28790: u8 [a0 + 0] = 0\n 28792: jump @416 if a1 != 0\n      : @412 (gas: 4)\n 28796: i32 s0 = s1 + 0\n 28798: a1 = 0x20\n 28801: a0 = s0\n 28803: ra = 370, jump @0\n      : @413 [@dyn 185] (gas: 41)\n 28809: u8 [a0 + 31] = 0xb\n 28813: u8 [a0 + 30] = 0\n 28816: u8 [a0 + 29] = 0\n 28819: u8 [a0 + 28] = 0\n 28822: u8 [a0 + 27] = 0\n 28825: u8 [a0 + 26] = 0\n 28828: u8 [a0 + 25] = 0\n 28831: u8 [a0 + 24] = 0\n 28834: u8 [a0 + 23] = 0\n 28837: u8 [a0 + 22] = 0\n 28840: u8 [a0 + 21] = 0\n 28843: u8 [a0 + 20] = 0\n 28846: u8 [a0 + 19] = 0\n 28849: u8 [a0 + 18] = 0\n 28852: u8 [a0 + 17] = 0\n 28855: u8 [a0 + 16] = 0\n 28858: u8 [a0 + 15] = 0\n 28861: u8 [a0 + 14] = 0\n 28864: u8 [a0 + 13] = 0\n 28867: u8 [a0 + 12] = 0\n 28870: u8 [a0 + 11] = 0\n 28873: u8 [a0 + 10] = 0\n 28876: u8 [a0 + 9] = 0\n 28879: u8 [a0 + 8] = 0\n 28882: u8 [a0 + 7] = 0\n 28885: u8 [a0 + 6] = 0\n 28888: u8 [a0 + 5] = 0\n 28891: u8 [a0 + 4] = 0\n 28894: u8 [a0 + 3] = 0\n 28897: u8 [a0 + 2] = 0\n 28900: u8 [a0 + 1] = 0\n 28903: a1 = u64 [sp + 0x20]\n 28906: a2 = u64 [sp + 0x38]\n 28909: a1 = a1 | a2\n 28912: a2 = 0xffffffe0\n 28922: a2 = s1 <u a2\n 28925: a3 = u64 [sp + 0x40]\n 28928: a2 = 0 if a3 != 0\n 28930: a2 = 0 if a1 != 0\n 28932: u8 [a0 + 0] = 0\n 28934: jump @416 if a2 == 0\n      : @414 (gas: 3)\n 28938: i32 a0 = s0 + 0x20\n 28941: a1 = 0x20\n 28944: ra = 372, jump @0\n      : @415 [@dyn 186] (gas: 54)\n 28950: u8 [a0 + 31] = 0\n 28953: u8 [a0 + 30] = 0\n 28956: u8 [a0 + 29] = 0\n 28959: u8 [a0 + 28] = 0\n 28962: u8 [a0 + 27] = 0\n 28965: u8 [a0 + 26] = 0\n 28968: u8 [a0 + 25] = 0\n 28971: u8 [a0 + 24] = 0\n 28974: u8 [a0 + 23] = 0\n 28977: u8 [a0 + 22] = 0\n 28980: u8 [a0 + 21] = 0\n 28983: u8 [a0 + 20] = 0\n 28986: u8 [a0 + 19] = 0\n 28989: u8 [a0 + 18] = 0\n 28992: u8 [a0 + 17] = 0\n 28995: u8 [a0 + 16] = 0\n 28998: u8 [a0 + 15] = 0\n 29001: u8 [a0 + 14] = 0\n 29004: u8 [a0 + 13] = 0\n 29007: u8 [a0 + 12] = 0\n 29010: u8 [a0 + 11] = 0\n 29013: u8 [a0 + 10] = 0x67\n 29017: u8 [a0 + 9] = 0x6e\n 29021: u8 [a0 + 8] = 0x69\n 29025: u8 [a0 + 7] = 0x74\n 29029: u8 [a0 + 6] = 0x73\n 29033: u8 [a0 + 5] = 0x69\n 29037: u8 [a0 + 4] = 0x6c\n 29041: u8 [a0 + 3] = 0x20\n 29045: u8 [a0 + 2] = 0x6e\n 29049: u8 [a0 + 1] = 0x77\n 29053: u8 [a0 + 0] = 0x4f\n 29056: a1 = u64 [sp]\n 29058: a0 = a1 + 0x60\n 29061: a1 = a0 <u a1\n 29064: a3 = u64 [sp + 0x8]\n 29067: a2 = a3 + a1\n 29070: a3 = a2 <u a3\n 29073: a3 = a1 if a1 == 0\n 29076: a1 = u64 [sp + 0x10]\n 29079: a3 = a3 + a1\n 29082: a1 = a3 <u a1\n 29085: a4 = u64 [sp + 0x18]\n 29088: a1 = a1 + a4\n 29091: a4 = u64 [sp + 0x28]\n 29094: u64 [a4] = a0\n 29096: u64 [a4 + 0x8] = a2\n 29099: u64 [a4 + 0x10] = a3\n 29102: u64 [a4 + 0x18] = a1\n 29105: ra = u64 [sp + 0x58]\n 29108: s0 = u64 [sp + 0x50]\n 29111: s1 = u64 [sp + 0x48]\n 29114: sp = sp + 0x60\n 29117: ret\n      : @416 (gas: 1)\n 29119: trap\n      : @417 (gas: 19)\n 29120: t1 = u64 [sp + 0xd0]\n 29124: t0 = u64 [sp + 0xc8]\n 29128: a0 = u64 [sp + 0x538]\n 29132: a1 = u64 [sp + 0x520]\n 29136: t2 = u64 [sp + 0x530]\n 29140: a3 = u64 [sp + 0x528]\n 29144: a4 = a0 ^ s1\n 29147: a0 = s1 <u a0\n 29150: a2 = u64 [sp + 0xd8]\n 29154: a5 = a2 <u t2\n 29157: a5 = a0 if a4 != 0\n 29160: a0 = a3 ^ t0\n 29163: a3 = t0 <u a3\n 29166: a1 = t1 <u a1\n 29169: a1 = a3 if a0 != 0\n 29172: a0 = t2 ^ a2\n 29175: a0 = a0 | a4\n 29178: a1 = a5 if a0 != 0\n 29181: jump @419 if a1 != 0\n      : @418 (gas: 1)\n 29184: jump @502\n      : @419 (gas: 12)\n 29187: u64 [sp + 0x1e0] = t1\n 29191: u64 [sp + 536] = 0\n 29195: u64 [sp + 528] = 0\n 29199: u64 [sp + 520] = 0\n 29203: u64 [sp + 512] = 0\n 29207: u64 [sp + 0x1e8] = t0\n 29211: u64 [sp + 0x1f0] = a2\n 29215: a0 = sp + 0x220\n 29219: a1 = sp + 0x200\n 29223: a2 = sp + 0x1e0\n 29227: u64 [sp + 0x1f8] = s1\n 29231: ra = 374, jump @208\n      : @420 [@dyn 187] (gas: 24)\n 29237: a3 = u64 [sp + 0x238]\n 29241: a2 = u64 [sp + 0x230]\n 29245: a1 = u64 [sp + 0x228]\n 29249: a0 = u64 [sp + 0x220]\n 29253: u64 [sp + 0xc8] = a3\n 29257: u64 [sp + 0x518] = a3\n 29261: u64 [sp + 0xd0] = a2\n 29265: u64 [sp + 0x510] = a2\n 29269: u64 [sp + 0xd8] = a1\n 29273: u64 [sp + 0x508] = a1\n 29277: u64 [sp + 0xc0] = a0\n 29281: u64 [sp + 0x500] = a0\n 29285: u64 [sp + 1336] = 0\n 29289: u64 [sp + 1328] = 0\n 29293: u64 [sp + 1320] = 0\n 29297: u64 [sp + 1312] = 0\n 29301: u32 [sp + 1248] = 0x20\n 29306: i32 a1 = sp + 0x500\n 29310: i32 a3 = sp + 0x520\n 29314: i32 a4 = sp + 0x4e0\n 29318: a2 = 0xffffffffffffffff\n 29321: a0 = 0\n 29323: ecalli 7 // 'get_storage'\n 29325: fallthrough\n      : @421 (gas: 2)\n 29326: a0 = u8 [sp + 0x536]\n 29330: jump @423 if a0 != 0\n      : @422 (gas: 1)\n 29333: jump @507\n      : @423 (gas: 37)\n 29336: i32 a0 = sp + 0x2a0\n 29340: ecalli 5 // 'caller'\n 29342: a0 = u64 [sp + 0x2a8]\n 29346: a1 = u64 [sp + 0x2a0]\n 29350: a2 = i32 [sp + 0x2b0]\n 29354: a0 = reverse a0\n 29356: a3 = a0 >> 0x20\n 29359: s1 = reverse a1\n 29361: a1 = s1 << 0x20\n 29364: a1 = a1 | a3\n 29367: u64 [sp + 0xb8] = a1\n 29371: a0 = a0 << 0x20\n 29374: a1 = reverse a2\n 29376: a1 = a1 >> 0x20\n 29379: a0 = a0 | a1\n 29382: u64 [sp + 0xb0] = a0\n 29386: s1 = s1 >> 0x20\n 29389: a0 = u64 [sp + 0xc8]\n 29393: u64 [sp + 0x518] = a0\n 29397: a0 = u64 [sp + 0xd0]\n 29401: u64 [sp + 0x510] = a0\n 29405: a0 = u64 [sp + 0xd8]\n 29409: u64 [sp + 0x508] = a0\n 29413: a0 = u64 [sp + 0xc0]\n 29417: u64 [sp + 0x500] = a0\n 29421: u64 [sp + 1336] = 0\n 29425: u64 [sp + 1328] = 0\n 29429: u64 [sp + 1320] = 0\n 29433: u64 [sp + 1312] = 0\n 29437: u32 [sp + 1248] = 0x20\n 29442: i32 a1 = sp + 0x500\n 29446: i32 a3 = sp + 0x520\n 29450: i32 a4 = sp + 0x4e0\n 29454: a2 = 0xffffffffffffffff\n 29457: a0 = 0\n 29459: ecalli 7 // 'get_storage'\n 29461: fallthrough\n      : @424 (gas: 11)\n 29462: a0 = u32 [sp + 0x530]\n 29466: a1 = u64 [sp + 0x520]\n 29470: a2 = u64 [sp + 0x528]\n 29474: a0 = a0 ^ s1\n 29477: a3 = u64 [sp + 0xb0]\n 29481: a1 = a1 ^ a3\n 29484: a0 = a0 | a1\n 29487: a1 = u64 [sp + 0xb8]\n 29491: a1 = a1 ^ a2\n 29494: a0 = a0 | a1\n 29497: jump @426 if a0 != 0\n      : @425 (gas: 1)\n 29500: jump @512\n      : @426 (gas: 54)\n 29503: u64 [sp + 1304] = 0\n 29507: u64 [sp + 1296] = 0\n 29511: u64 [sp + 1288] = 0\n 29515: u64 [sp + 1280] = 0x1\n 29520: u64 [sp + 1336] = 0\n 29524: u64 [sp + 1328] = 0\n 29528: u64 [sp + 1320] = 0\n 29532: u64 [sp + 1312] = 0\n 29536: s1 = 0x20\n 29539: u32 [sp + 0x4e0] = s1\n 29543: i32 a1 = sp + 0x500\n 29547: i32 a3 = sp + 0x520\n 29551: i32 a4 = sp + 0x4e0\n 29555: a2 = 0xffffffffffffffff\n 29558: a0 = 0\n 29560: ecalli 7 // 'get_storage'\n 29562: a0 = u64 [sp + 0x530]\n 29566: u64 [sp + 0x68] = a0\n 29569: a0 = u64 [sp + 0x528]\n 29573: u64 [sp + 0x60] = a0\n 29576: a0 = u64 [sp + 0x520]\n 29580: u64 [sp + 0x70] = a0\n 29583: i32 a0 = sp + 0x2c0\n 29587: ecalli 5 // 'caller'\n 29589: a0 = i32 [sp + 0x2d0]\n 29593: u64 [sp + 0x90] = a0\n 29597: a0 = u64 [sp + 0x2c0]\n 29601: u64 [sp + 0x88] = a0\n 29605: a0 = u64 [sp + 0x2c8]\n 29609: u64 [sp + 0x80] = a0\n 29613: a0 = u64 [sp + 0xc8]\n 29617: u64 [sp + 0x518] = a0\n 29621: a0 = u64 [sp + 0xd0]\n 29625: u64 [sp + 0x510] = a0\n 29629: a0 = u64 [sp + 0xd8]\n 29633: u64 [sp + 0x508] = a0\n 29637: a0 = u64 [sp + 0xc0]\n 29641: u64 [sp + 0x500] = a0\n 29645: u64 [sp + 1336] = 0\n 29649: u64 [sp + 1328] = 0\n 29653: u64 [sp + 1320] = 0\n 29657: u64 [sp + 1312] = 0\n 29661: u32 [sp + 0x4e0] = s1\n 29665: i32 a1 = sp + 0x500\n 29669: i32 a3 = sp + 0x520\n 29673: i32 a4 = sp + 0x4e0\n 29677: a2 = 0xffffffffffffffff\n 29680: a0 = 0\n 29682: ecalli 7 // 'get_storage'\n 29684: a0 = u64 [sp + 0x530]\n 29688: u64 [sp + 0x78] = a0\n 29691: a0 = 0x40\n 29694: a1 = 0x20\n 29697: ra = 376, jump @0\n      : @427 [@dyn 188] (gas: 102)\n 29703: a1 = u8 [a0 + 0x11]\n 29706: a2 = u8 [a0 + 0x10]\n 29709: a3 = u8 [a0 + 0x12]\n 29712: a4 = u8 [a0 + 0x13]\n 29715: a1 = a1 << 0x8\n 29718: a1 = a1 | a2\n 29721: a3 = a3 << 0x10\n 29724: a4 = a4 << 0x18\n 29727: a3 = a3 | a4\n 29730: a1 = a1 | a3\n 29733: a2 = u8 [a0 + 0x15]\n 29736: a3 = u8 [a0 + 0x14]\n 29739: a4 = u8 [a0 + 0x16]\n 29742: a5 = u8 [a0 + 0x17]\n 29745: a2 = a2 << 0x8\n 29748: a2 = a2 | a3\n 29751: a4 = a4 << 0x10\n 29754: a5 = a5 << 0x18\n 29757: a4 = a4 | a5\n 29760: a2 = a2 | a4\n 29763: a2 = a2 << 0x20\n 29766: t0 = a2 | a1\n 29769: a2 = u8 [a0 + 0x1]\n 29772: a3 = u8 [a0]\n 29774: a4 = u8 [a0 + 0x2]\n 29777: a5 = u8 [a0 + 0x3]\n 29780: a2 = a2 << 0x8\n 29783: a2 = a2 | a3\n 29786: a4 = a4 << 0x10\n 29789: a5 = a5 << 0x18\n 29792: a4 = a4 | a5\n 29795: a2 = a2 | a4\n 29798: a3 = u8 [a0 + 0x5]\n 29801: a4 = u8 [a0 + 0x4]\n 29804: a5 = u8 [a0 + 0x6]\n 29807: s1 = u8 [a0 + 0x7]\n 29810: a3 = a3 << 0x8\n 29813: a3 = a3 | a4\n 29816: a5 = a5 << 0x10\n 29819: s1 = s1 << 0x18\n 29822: a5 = a5 | s1\n 29825: a3 = a3 | a5\n 29828: a3 = a3 << 0x20\n 29831: a2 = a2 | a3\n 29834: a3 = u8 [a0 + 0x19]\n 29837: a4 = u8 [a0 + 0x18]\n 29840: a5 = u8 [a0 + 0x1a]\n 29843: s1 = u8 [a0 + 0x1b]\n 29846: a3 = a3 << 0x8\n 29849: a3 = a3 | a4\n 29852: a5 = a5 << 0x10\n 29855: s1 = s1 << 0x18\n 29858: a5 = a5 | s1\n 29861: a3 = a3 | a5\n 29864: a4 = u8 [a0 + 0x1d]\n 29867: a5 = u8 [a0 + 0x1c]\n 29870: s1 = u8 [a0 + 0x1e]\n 29873: a1 = u8 [a0 + 0x1f]\n 29876: a4 = a4 << 0x8\n 29879: a4 = a4 | a5\n 29882: s1 = s1 << 0x10\n 29885: a1 = a1 << 0x18\n 29888: a1 = a1 | s1\n 29891: a1 = a1 | a4\n 29894: a1 = a1 << 0x20\n 29897: a3 = a3 | a1\n 29900: a1 = u8 [a0 + 0x9]\n 29903: a4 = u8 [a0 + 0x8]\n 29906: a5 = u8 [a0 + 0xa]\n 29909: s1 = u8 [a0 + 0xb]\n 29912: a1 = a1 << 0x8\n 29915: a1 = a1 | a4\n 29918: a5 = a5 << 0x10\n 29921: s1 = s1 << 0x18\n 29924: a5 = a5 | s1\n 29927: a1 = a1 | a5\n 29930: a4 = u8 [a0 + 0xd]\n 29933: a5 = u8 [a0 + 0xc]\n 29936: s1 = u8 [a0 + 0xe]\n 29939: a0 = u8 [a0 + 0xf]\n 29942: a4 = a4 << 0x8\n 29945: a4 = a4 | a5\n 29948: s1 = s1 << 0x10\n 29951: a0 = a0 << 0x18\n 29954: a0 = a0 | s1\n 29957: a0 = a0 | a4\n 29960: a0 = a0 << 0x20\n 29963: a0 = a0 | a1\n 29966: s1 = reverse a0\n 29968: a3 = reverse a3\n 29970: a1 = reverse a2\n 29972: a0 = reverse t0\n 29974: u64 [sp + 0xb8] = a0\n 29978: u64 [sp + 0xa0] = a1\n 29982: a0 = a0 | a1\n 29985: a1 = a3 | s1\n 29988: a1 = a1 | a0\n 29991: a1 = a1 >> 0x20\n 29994: a0 = a0 | s1\n 29997: a0 = a0 << 0x20\n 30000: a0 = a0 | a1\n 30003: jump @429 if a0 == 0\n      : @428 (gas: 1)\n 30006: jump @523\n      : @429 (gas: 5)\n 30009: i32 a0 = a3 + 0\n 30011: a1 = 0x20\n 30014: u64 [sp + 0xa8] = a0\n 30018: u64 [sp + 0xb0] = a3\n 30022: ra = 378, jump @0\n      : @430 [@dyn 189] (gas: 43)\n 30028: u8 [a0 + 31] = 0\n 30031: u8 [a0 + 30] = 0\n 30034: u8 [a0 + 29] = 0\n 30037: u8 [a0 + 28] = 0\n 30040: u8 [a0 + 27] = 0\n 30043: u8 [a0 + 26] = 0\n 30046: u8 [a0 + 25] = 0\n 30049: u8 [a0 + 24] = 0\n 30052: u8 [a0 + 23] = 0\n 30055: u8 [a0 + 22] = 0\n 30058: u8 [a0 + 21] = 0\n 30061: u8 [a0 + 20] = 0\n 30064: u8 [a0 + 19] = 0\n 30067: u8 [a0 + 18] = 0\n 30070: u8 [a0 + 17] = 0\n 30073: u8 [a0 + 16] = 0\n 30076: u8 [a0 + 15] = 0\n 30079: u8 [a0 + 14] = 0\n 30082: u8 [a0 + 13] = 0\n 30085: u8 [a0 + 12] = 0\n 30088: u8 [a0 + 11] = 0\n 30091: u8 [a0 + 10] = 0\n 30094: u8 [a0 + 9] = 0\n 30097: u8 [a0 + 8] = 0\n 30100: u8 [a0 + 7] = 0\n 30103: u8 [a0 + 6] = 0\n 30106: u8 [a0 + 5] = 0\n 30109: u8 [a0 + 3] = 0xe6\n 30114: u8 [a0 + 2] = 0x8c\n 30119: u8 [a0 + 1] = 0xca\n 30124: u8 [a0 + 0] = 0x4d\n 30127: u64 [sp + 0x58] = s1\n 30130: a3 = u64 [sp + 0xa0]\n 30134: a3 = a3 | s1\n 30137: a1 = 0xfffffffc\n 30147: a2 = u64 [sp + 0xb0]\n 30151: a1 = a2 <u a1\n 30154: a2 = u64 [sp + 0xb8]\n 30158: a1 = 0 if a2 != 0\n 30160: u64 [sp + 0x98] = a3\n 30164: a1 = 0 if a3 != 0\n 30166: u8 [a0 + 4] = 0\n 30169: jump @432 if a1 != 0\n      : @431 (gas: 1)\n 30172: jump @523\n      : @432 (gas: 19)\n 30175: a0 = u64 [sp + 0x80]\n 30179: a0 = reverse a0\n 30181: a1 = a0 >> 0x20\n 30184: a2 = u64 [sp + 0x88]\n 30188: a2 = reverse a2\n 30190: a3 = a2 << 0x20\n 30193: a1 = a1 | a3\n 30196: u64 [sp + 0x88] = a1\n 30200: a0 = a0 << 0x20\n 30203: a1 = u64 [sp + 0x90]\n 30207: a1 = reverse a1\n 30209: a1 = a1 >> 0x20\n 30212: a0 = a0 | a1\n 30215: u64 [sp + 0x90] = a0\n 30219: s1 = a2 >> 0x20\n 30222: a0 = u64 [sp + 0xa8]\n 30226: i32 a0 = a0 + 0x4\n 30229: a1 = 0x20\n 30232: ra = 380, jump @0\n      : @433 [@dyn 190] (gas: 65)\n 30238: a1 = reverse s1\n 30240: a2 = u64 [sp + 0x88]\n 30244: a2 = reverse a2\n 30246: a3 = u64 [sp + 0x90]\n 30250: a3 = reverse a3\n 30252: a4 = a3 >> 0x38\n 30255: u8 [a0 + 0x1f] = a4\n 30258: a4 = a3 >> 0x30\n 30261: u8 [a0 + 0x1e] = a4\n 30264: a4 = a3 >> 0x28\n 30267: u8 [a0 + 0x1d] = a4\n 30270: a4 = a3 >> 0x20\n 30273: u8 [a0 + 0x1c] = a4\n 30276: a4 = a3 >> 0x18\n 30279: u8 [a0 + 0x1b] = a4\n 30282: a4 = a3 >> 0x10\n 30285: u8 [a0 + 0x1a] = a4\n 30288: a4 = a3 >> 0x8\n 30291: u8 [a0 + 0x19] = a4\n 30294: u8 [a0 + 0x18] = a3\n 30297: u8 [a0 + 0x10] = a2\n 30300: u8 [a0 + 11] = 0\n 30303: u8 [a0 + 10] = 0\n 30306: u8 [a0 + 9] = 0\n 30309: u8 [a0 + 7] = 0\n 30312: u8 [a0 + 6] = 0\n 30315: u8 [a0 + 5] = 0\n 30318: u8 [a0 + 4] = 0\n 30321: u8 [a0 + 3] = 0\n 30324: u8 [a0 + 2] = 0\n 30327: u8 [a0 + 1] = 0\n 30330: u8 [a0 + 0] = 0\n 30332: a3 = a2 >> 0x38\n 30335: u8 [a0 + 0x17] = a3\n 30338: a3 = a2 >> 0x30\n 30341: u8 [a0 + 0x16] = a3\n 30344: a3 = a2 >> 0x28\n 30347: u8 [a0 + 0x15] = a3\n 30350: a3 = a2 >> 0x20\n 30353: u8 [a0 + 0x14] = a3\n 30356: a3 = a2 >> 0x18\n 30359: u8 [a0 + 0x13] = a3\n 30362: a3 = a2 >> 0x10\n 30365: u8 [a0 + 0x12] = a3\n 30368: a2 = a2 >> 0x8\n 30371: u8 [a0 + 0x11] = a2\n 30374: u8 [a0 + 0x8] = a1\n 30377: a2 = a1 >> 0x38\n 30380: u8 [a0 + 0xf] = a2\n 30383: a2 = a1 >> 0x30\n 30386: u8 [a0 + 0xe] = a2\n 30389: a2 = a1 >> 0x28\n 30392: u8 [a0 + 0xd] = a2\n 30395: a1 = a1 >> 0x20\n 30398: s1 = 0x100000000\n 30408: u64 [sp + 0x88] = s1\n 30412: a2 = 0xffffffdc\n 30422: a3 = u64 [sp + 0xb0]\n 30426: a2 = a3 <u a2\n 30429: a3 = u64 [sp + 0xb8]\n 30433: a2 = 0 if a3 != 0\n 30435: a3 = u64 [sp + 0x98]\n 30439: a2 = 0 if a3 != 0\n 30441: u8 [a0 + 0xc] = a1\n 30444: jump @435 if a2 != 0\n      : @434 (gas: 1)\n 30447: jump @523\n      : @435 (gas: 5)\n 30450: s1 = 0xff00000000000000\n 30460: a0 = u64 [sp + 0xa8]\n 30464: i32 a0 = a0 + 0x24\n 30467: a1 = 0x20\n 30470: ra = 382, jump @0\n      : @436 [@dyn 191] (gas: 46)\n 30476: u8 [a0 + 30] = 0\n 30479: u8 [a0 + 29] = 0\n 30482: a1 = s1 >> 0x20\n 30485: u8 [a0 + 0x1c] = a1\n 30488: u8 [a0 + 27] = 0\n 30491: u64 [sp + 0x90] = s1\n 30495: a1 = s1 >> 0x10\n 30498: u8 [a0 + 0x1a] = a1\n 30501: u8 [a0 + 25] = 0\n 30504: u8 [a0 + 24] = 0\n 30507: u8 [a0 + 23] = 0\n 30510: u8 [a0 + 22] = 0\n 30513: u8 [a0 + 21] = 0\n 30516: u8 [a0 + 20] = 0\n 30519: u8 [a0 + 19] = 0\n 30522: u8 [a0 + 18] = 0\n 30525: u8 [a0 + 17] = 0\n 30528: u8 [a0 + 16] = 0\n 30531: u8 [a0 + 15] = 0\n 30534: u8 [a0 + 14] = 0\n 30537: u8 [a0 + 13] = 0\n 30540: u8 [a0 + 12] = 0\n 30543: u8 [a0 + 11] = 0\n 30546: u8 [a0 + 10] = 0\n 30549: u8 [a0 + 9] = 0\n 30552: u8 [a0 + 8] = 0\n 30555: u8 [a0 + 7] = 0\n 30558: u8 [a0 + 6] = 0\n 30561: u8 [a0 + 5] = 0\n 30564: u8 [a0 + 4] = 0\n 30567: u8 [a0 + 3] = 0\n 30570: u8 [a0 + 2] = 0\n 30573: u8 [a0 + 1] = 0\n 30576: u8 [a0 + 0] = 0\n 30578: a1 = u64 [sp + 0x78]\n 30581: a1 = a1 >> 0x28\n 30584: a2 = u64 [sp + 0x88]\n 30588: a2 = a2 + 0xffffffffffffffbc\n 30591: a3 = u64 [sp + 0xb0]\n 30595: a2 = a3 <u a2\n 30598: a3 = u64 [sp + 0xb8]\n 30602: a2 = 0 if a3 != 0\n 30604: a3 = u64 [sp + 0x98]\n 30608: a2 = 0 if a3 != 0\n 30610: u8 [a0 + 0x1f] = a1\n 30613: jump @438 if a2 != 0\n      : @437 (gas: 1)\n 30616: jump @523\n      : @438 (gas: 4)\n 30619: s1 = u64 [sp + 0xa8]\n 30623: i32 a0 = s1 + 0x44\n 30626: a1 = 0x20\n 30629: ra = 384, jump @0\n      : @439 [@dyn 192] (gas: 56)\n 30635: u8 [a0 + 31] = 0x1\n 30639: u8 [a0 + 30] = 0\n 30642: u8 [a0 + 29] = 0\n 30645: u8 [a0 + 28] = 0\n 30648: u8 [a0 + 27] = 0\n 30651: u8 [a0 + 26] = 0\n 30654: u8 [a0 + 25] = 0\n 30657: u8 [a0 + 24] = 0\n 30660: u8 [a0 + 23] = 0\n 30663: u8 [a0 + 22] = 0\n 30666: u8 [a0 + 21] = 0\n 30669: u8 [a0 + 20] = 0\n 30672: u8 [a0 + 19] = 0\n 30675: u8 [a0 + 18] = 0\n 30678: u8 [a0 + 17] = 0\n 30681: u8 [a0 + 16] = 0\n 30684: u8 [a0 + 15] = 0\n 30687: u8 [a0 + 14] = 0\n 30690: u8 [a0 + 13] = 0\n 30693: u8 [a0 + 12] = 0\n 30696: u8 [a0 + 11] = 0\n 30699: u8 [a0 + 10] = 0\n 30702: u8 [a0 + 9] = 0\n 30705: u8 [a0 + 8] = 0\n 30708: u8 [a0 + 7] = 0\n 30711: u8 [a0 + 6] = 0\n 30714: u8 [a0 + 5] = 0\n 30717: u8 [a0 + 4] = 0\n 30720: u8 [a0 + 3] = 0\n 30723: u8 [a0 + 2] = 0\n 30726: u8 [a0 + 1] = 0\n 30729: u8 [a0 + 0] = 0\n 30731: ecalli 9 // 'ref_time_left'\n 30733: a0 = u64 [sp + 0x60]\n 30736: a0 = reverse a0\n 30738: a1 = a0 << 0x20\n 30741: a2 = u64 [sp + 0x68]\n 30744: a2 = reverse a2\n 30746: a2 = a2 >> 0x20\n 30749: a1 = a1 | a2\n 30752: a2 = u64 [sp + 0x70]\n 30755: a2 = reverse a2\n 30757: a3 = a2 << 0x20\n 30760: a0 = a0 >> 0x20\n 30763: a0 = a0 | a3\n 30766: a2 = a2 >> 0x20\n 30769: u64 [sp + 0x2e8] = a0\n 30773: u64 [sp + 0x2e0] = a1\n 30777: u32 [sp + 0x2f0] = a2\n 30781: u64 [sp + 792] = 0\n 30785: u64 [sp + 784] = 0\n 30789: u64 [sp + 776] = 0\n 30793: u64 [sp + 768] = 0\n 30797: a1 = 0x64\n 30800: a0 = s1\n 30802: ra = 386, jump @0\n      : @440 [@dyn 193] (gas: 4)\n 30808: u64 [sp + 0x98] = a0\n 30812: a1 = 0x20\n 30815: a0 = s1\n 30817: ra = 388, jump @0\n      : @441 [@dyn 194] (gas: 31)\n 30823: u32 [sp + 800] = 0x20\n 30828: u64 [sp + 856] = 0\n 30832: u64 [sp + 848] = 0\n 30836: u64 [sp + 840] = 0\n 30840: u64 [sp + 832] = 0\n 30844: a1 = sp + 0x2e0\n 30848: a1 = a1 << 0x20\n 30851: a1 = a1 >> 0x20\n 30854: a2 = 0x1800000000\n 30864: s1 = a1 | a2\n 30867: a1 = sp + 0x300\n 30871: a1 = a1 << 0x20\n 30874: a1 = a1 >> 0x20\n 30877: a2 = sp + 0x340\n 30881: a2 = a2 << 0x20\n 30884: a3 = a2 | a1\n 30887: a1 = u64 [sp + 0x98]\n 30891: a1 = a1 << 0x20\n 30894: a1 = a1 >> 0x20\n 30897: a2 = 0x6400000000\n 30907: a4 = a1 | a2\n 30910: a0 = a0 << 0x20\n 30913: a0 = a0 >> 0x20\n 30916: a1 = sp + 0x320\n 30920: a1 = a1 << 0x20\n 30923: a5 = a1 | a0\n 30926: a1 = 0xffffffffffffffff\n 30929: a2 = 0xffffffffffffffff\n 30932: a0 = s1\n 30934: ecalli 1 // 'call'\n 30936: fallthrough\n      : @442 (gas: 1)\n 30937: jump @444 if a0 == 0\n      : @443 (gas: 1)\n 30940: jump @501\n      : @444 (gas: 2)\n 30943: ecalli 11 // 'return_data_size'\n 30945: fallthrough\n      : @445 (gas: 2)\n 30946: a1 = 0x20\n 30949: jump @447 if a0 >=u a1\n      : @446 (gas: 3)\n 30952: ecalli 11 // 'return_data_size'\n 30954: a1 = a0\n 30956: fallthrough\n      : @447 (gas: 28)\n 30957: a4 = 0\n 30959: a3 = u64 [sp + 0xa0]\n 30963: a2 = u64 [sp + 0xb0]\n 30967: s1 = u64 [sp + 0xb8]\n 30971: a0 = a1 + 0x1f\n 30974: u64 [sp + 0xb0] = a1\n 30978: a1 = a0 <u a1\n 30981: u64 [sp + 184] = 0\n 30985: a1 = a1 & 0x1\n 30988: a0 = a0 & 0xffffffffffffffe0\n 30991: a2 = a2 + a0\n 30994: u64 [sp + 0xa0] = a2\n 30998: a0 = a2 <u a0\n 31001: s1 = s1 + a1\n 31004: s1 = s1 + a0\n 31007: a2 = s1 ^ a1\n 31010: a1 = s1 <u a1\n 31013: a1 = a0 if a2 == 0\n 31016: a0 = u64 [sp + 0x58]\n 31019: a1 = a1 + a0\n 31022: a0 = a1 <u a0\n 31025: a0 = a0 + a3\n 31028: u64 [sp + 0x98] = a1\n 31032: u64 [sp + 0x88] = a0\n 31036: a0 = a0 | a1\n 31039: a1 = s1 <u 0x1\n 31042: a1 = 0 if a0 != 0\n 31044: jump @449 if a1 != 0\n      : @448 (gas: 1)\n 31047: jump @527\n      : @449 (gas: 3)\n 31050: a0 = 0x40\n 31053: a1 = 0x20\n 31056: ra = 390, jump @0\n      : @450 [@dyn 195] (gas: 79)\n 31062: a1 = u64 [sp + 0x88]\n 31066: a1 = reverse a1\n 31068: a2 = u64 [sp + 0x98]\n 31072: a2 = reverse a2\n 31074: a3 = reverse s1\n 31076: a4 = u64 [sp + 0xa0]\n 31080: a4 = reverse a4\n 31082: u8 [a0 + 0x18] = a4\n 31085: a5 = a4 >> 0x38\n 31088: u8 [a0 + 0x1f] = a5\n 31091: a5 = a4 >> 0x30\n 31094: u8 [a0 + 0x1e] = a5\n 31097: a5 = a4 >> 0x28\n 31100: u8 [a0 + 0x1d] = a5\n 31103: a5 = a4 >> 0x20\n 31106: u8 [a0 + 0x1c] = a5\n 31109: a5 = a4 >> 0x18\n 31112: u8 [a0 + 0x1b] = a5\n 31115: a5 = a4 >> 0x10\n 31118: u8 [a0 + 0x1a] = a5\n 31121: a4 = a4 >> 0x8\n 31124: u8 [a0 + 0x19] = a4\n 31127: u8 [a0 + 0x10] = a3\n 31130: a4 = a3 >> 0x38\n 31133: u8 [a0 + 0x17] = a4\n 31136: a4 = a3 >> 0x30\n 31139: u8 [a0 + 0x16] = a4\n 31142: a4 = a3 >> 0x28\n 31145: u8 [a0 + 0x15] = a4\n 31148: a4 = a3 >> 0x20\n 31151: u8 [a0 + 0x14] = a4\n 31154: a4 = a3 >> 0x18\n 31157: u8 [a0 + 0x13] = a4\n 31160: a4 = a3 >> 0x10\n 31163: u8 [a0 + 0x12] = a4\n 31166: a3 = a3 >> 0x8\n 31169: u8 [a0 + 0x11] = a3\n 31172: u8 [a0 + 0x8] = a2\n 31175: a3 = a2 >> 0x38\n 31178: u8 [a0 + 0xf] = a3\n 31181: a3 = a2 >> 0x30\n 31184: u8 [a0 + 0xe] = a3\n 31187: a3 = a2 >> 0x28\n 31190: u8 [a0 + 0xd] = a3\n 31193: a3 = a2 >> 0x20\n 31196: u8 [a0 + 0xc] = a3\n 31199: a3 = a2 >> 0x18\n 31202: u8 [a0 + 0xb] = a3\n 31205: a3 = a2 >> 0x10\n 31208: u8 [a0 + 0xa] = a3\n 31211: a2 = a2 >> 0x8\n 31214: u8 [a0 + 0x9] = a2\n 31217: u8 [a0] = a1\n 31219: a2 = a1 >> 0x38\n 31222: u8 [a0 + 0x7] = a2\n 31225: a2 = a1 >> 0x30\n 31228: u8 [a0 + 0x6] = a2\n 31231: a2 = a1 >> 0x28\n 31234: u8 [a0 + 0x5] = a2\n 31237: a2 = a1 >> 0x20\n 31240: u8 [a0 + 0x4] = a2\n 31243: a2 = a1 >> 0x18\n 31246: u8 [a0 + 0x3] = a2\n 31249: a2 = a1 >> 0x10\n 31252: u8 [a0 + 0x2] = a2\n 31255: a1 = a1 >> 0x8\n 31258: a5 = u64 [sp + 0xb8]\n 31262: a2 = a5 >u 0\n 31264: a3 = u64 [sp + 0xb0]\n 31268: a3 = a3 <u 0x20\n 31271: a3 = a3 ^ 0x1\n 31274: a3 = a2 if a5 != 0\n 31277: a2 = a5 >u 0\n 31279: a4 = a5 >u 0\n 31281: a4 = a2 if a5 == 0\n 31284: a2 = a5 | a5\n 31287: a4 = a3 if a2 == 0\n 31290: u8 [a0 + 0x1] = a1\n 31293: jump @452 if a4 != 0\n      : @451 (gas: 1)\n 31296: jump @524\n      : @452 (gas: 3)\n 31299: a1 = 0x20\n 31302: a0 = u64 [sp + 0xa8]\n 31306: ra = 392, jump @0\n      : @453 [@dyn 196] (gas: 96)\n 31312: a1 = u8 [a0 + 0x9]\n 31315: a2 = u8 [a0 + 0x8]\n 31318: a3 = u8 [a0 + 0xa]\n 31321: a4 = u8 [a0 + 0xb]\n 31324: a1 = a1 << 0x8\n 31327: a1 = a1 | a2\n 31330: a3 = a3 << 0x10\n 31333: a4 = a4 << 0x18\n 31336: a3 = a3 | a4\n 31339: a1 = a1 | a3\n 31342: a2 = u8 [a0 + 0xd]\n 31345: a3 = u8 [a0 + 0xc]\n 31348: a4 = u8 [a0 + 0xe]\n 31351: a5 = u8 [a0 + 0xf]\n 31354: a2 = a2 << 0x8\n 31357: a2 = a2 | a3\n 31360: a4 = a4 << 0x10\n 31363: a5 = a5 << 0x18\n 31366: a4 = a4 | a5\n 31369: a2 = a2 | a4\n 31372: a2 = a2 << 0x20\n 31375: t0 = a2 | a1\n 31378: a2 = u8 [a0 + 0x1]\n 31381: a3 = u8 [a0]\n 31383: a4 = u8 [a0 + 0x2]\n 31386: a5 = u8 [a0 + 0x3]\n 31389: a2 = a2 << 0x8\n 31392: a2 = a2 | a3\n 31395: a4 = a4 << 0x10\n 31398: a5 = a5 << 0x18\n 31401: a4 = a4 | a5\n 31404: a2 = a2 | a4\n 31407: a3 = u8 [a0 + 0x5]\n 31410: a4 = u8 [a0 + 0x4]\n 31413: a5 = u8 [a0 + 0x6]\n 31416: s1 = u8 [a0 + 0x7]\n 31419: a3 = a3 << 0x8\n 31422: a3 = a3 | a4\n 31425: a5 = a5 << 0x10\n 31428: s1 = s1 << 0x18\n 31431: a5 = a5 | s1\n 31434: a3 = a3 | a5\n 31437: a3 = a3 << 0x20\n 31440: a2 = a2 | a3\n 31443: a3 = u8 [a0 + 0x19]\n 31446: a4 = u8 [a0 + 0x18]\n 31449: a5 = u8 [a0 + 0x1a]\n 31452: s1 = u8 [a0 + 0x1b]\n 31455: a3 = a3 << 0x8\n 31458: a3 = a3 | a4\n 31461: a5 = a5 << 0x10\n 31464: s1 = s1 << 0x18\n 31467: a5 = a5 | s1\n 31470: a3 = a3 | a5\n 31473: a4 = u8 [a0 + 0x1d]\n 31476: a5 = u8 [a0 + 0x1c]\n 31479: s1 = u8 [a0 + 0x1e]\n 31482: a1 = u8 [a0 + 0x1f]\n 31485: a4 = a4 << 0x8\n 31488: a4 = a4 | a5\n 31491: s1 = s1 << 0x10\n 31494: a1 = a1 << 0x18\n 31497: a1 = a1 | s1\n 31500: a1 = a1 | a4\n 31503: a1 = a1 << 0x20\n 31506: a3 = a3 | a1\n 31509: a1 = u8 [a0 + 0x11]\n 31512: a4 = u8 [a0 + 0x10]\n 31515: a5 = u8 [a0 + 0x12]\n 31518: s1 = u8 [a0 + 0x13]\n 31521: a1 = a1 << 0x8\n 31524: a1 = a1 | a4\n 31527: a5 = a5 << 0x10\n 31530: s1 = s1 << 0x18\n 31533: a5 = a5 | s1\n 31536: a1 = a1 | a5\n 31539: a4 = u8 [a0 + 0x15]\n 31542: a5 = u8 [a0 + 0x14]\n 31545: s1 = u8 [a0 + 0x16]\n 31548: a0 = u8 [a0 + 0x17]\n 31551: a4 = a4 << 0x8\n 31554: a4 = a4 | a5\n 31557: s1 = s1 << 0x10\n 31560: a0 = a0 << 0x18\n 31563: a0 = a0 | s1\n 31566: a0 = a0 | a4\n 31569: a0 = a0 << 0x20\n 31572: a0 = a0 | a1\n 31575: a1 = reverse a0\n 31577: a4 = reverse a3\n 31579: a4 = a4 <u 0x2\n 31582: a4 = 0 if a1 != 0\n 31584: a1 = t0 | a2\n 31587: a1 = reverse a1\n 31589: a4 = 0 if a1 != 0\n 31591: jump @455 if a4 != 0\n      : @454 (gas: 1)\n 31594: jump @524\n      : @455 (gas: 5)\n 31597: a0 = a0 | a2\n 31600: a1 = t0 | a3\n 31603: a0 = a0 | a1\n 31606: s1 = u64 [sp + 0xd8]\n 31610: jump @457 if a0 != 0\n      : @456 (gas: 1)\n 31613: jump @517\n      : @457 (gas: 97)\n 31616: u64 [sp + 1304] = 0\n 31620: u64 [sp + 1296] = 0\n 31624: u64 [sp + 1288] = 0\n 31628: u64 [sp + 1280] = 0x1\n 31633: u64 [sp + 1336] = 0\n 31637: u64 [sp + 1328] = 0\n 31641: u64 [sp + 1320] = 0\n 31645: u64 [sp + 1312] = 0\n 31649: u32 [sp + 1248] = 0x20\n 31654: i32 a1 = sp + 0x500\n 31658: i32 a3 = sp + 0x520\n 31662: i32 a4 = sp + 0x4e0\n 31666: a2 = 0xffffffffffffffff\n 31669: a0 = 0\n 31671: ecalli 7 // 'get_storage'\n 31673: a0 = u64 [sp + 0x520]\n 31677: u64 [sp + 0xb8] = a0\n 31681: a0 = u64 [sp + 0x530]\n 31685: u64 [sp + 0xb0] = a0\n 31689: a0 = u64 [sp + 0x528]\n 31693: u64 [sp + 0xa8] = a0\n 31697: i32 a0 = sp + 0x360\n 31701: ecalli 5 // 'caller'\n 31703: a0 = i32 [sp + 0x370]\n 31707: u64 [sp + 0x98] = a0\n 31711: a0 = u64 [sp + 0x360]\n 31715: u64 [sp + 0x88] = a0\n 31719: a0 = u64 [sp + 0x368]\n 31723: u64 [sp + 0x80] = a0\n 31727: a0 = u64 [sp + 0xc8]\n 31731: u64 [sp + 0x518] = a0\n 31735: a0 = u64 [sp + 0xd0]\n 31739: u64 [sp + 0x510] = a0\n 31743: u64 [sp + 0x508] = s1\n 31747: s1 = u64 [sp + 0xc0]\n 31751: u64 [sp + 0x500] = s1\n 31755: u64 [sp + 1336] = 0\n 31759: u64 [sp + 1328] = 0\n 31763: u64 [sp + 1320] = 0\n 31767: u64 [sp + 1312] = 0\n 31771: u32 [sp + 1248] = 0x20\n 31776: i32 a1 = sp + 0x500\n 31780: i32 a3 = sp + 0x520\n 31784: i32 a4 = sp + 0x4e0\n 31788: a2 = 0xffffffffffffffff\n 31791: a0 = 0\n 31793: ecalli 7 // 'get_storage'\n 31795: a0 = u64 [sp + 0x528]\n 31799: u64 [sp + 0x70] = a0\n 31802: a0 = u64 [sp + 0x520]\n 31806: u64 [sp + 0x78] = a0\n 31809: a0 = u32 [sp + 0x530]\n 31813: u64 [sp + 0x68] = a0\n 31816: a0 = u64 [sp + 0xc8]\n 31820: u64 [sp + 0x518] = a0\n 31824: a0 = u64 [sp + 0xd0]\n 31828: u64 [sp + 0x510] = a0\n 31832: a0 = u64 [sp + 0xd8]\n 31836: u64 [sp + 0x508] = a0\n 31840: u64 [sp + 0x500] = s1\n 31844: u64 [sp + 1336] = 0\n 31848: u64 [sp + 1328] = 0\n 31852: u64 [sp + 1320] = 0\n 31856: u64 [sp + 1312] = 0\n 31860: u32 [sp + 1248] = 0x20\n 31865: i32 a1 = sp + 0x500\n 31869: i32 a3 = sp + 0x520\n 31873: i32 a4 = sp + 0x4e0\n 31877: a2 = 0xffffffffffffffff\n 31880: a0 = 0\n 31882: ecalli 7 // 'get_storage'\n 31884: a0 = u64 [sp + 0x530]\n 31888: u64 [sp + 0x58] = a0\n 31891: a0 = u64 [sp + 0x528]\n 31895: u64 [sp + 0x50] = a0\n 31898: a0 = u64 [sp + 0xa8]\n 31902: a0 = reverse a0\n 31904: a1 = a0 << 0x20\n 31907: a2 = u64 [sp + 0xb0]\n 31911: a2 = reverse a2\n 31913: a2 = a2 >> 0x20\n 31916: a3 = a2 | a1\n 31919: a0 = a0 >> 0x20\n 31922: a1 = u64 [sp + 0xb8]\n 31926: a1 = reverse a1\n 31928: a2 = a1 << 0x20\n 31931: a0 = a0 | a2\n 31934: a1 = a1 >> 0x20\n 31937: u64 [sp + 0x38] = a0\n 31940: u64 [sp + 0x388] = a0\n 31944: u64 [sp + 0x48] = a3\n 31947: u64 [sp + 0x380] = a3\n 31951: u64 [sp + 0x40] = a1\n 31954: u32 [sp + 0x390] = a1\n 31958: i32 a0 = sp + 0x380\n 31962: ecalli 6 // 'code_size'\n 31964: fallthrough\n      : @458 (gas: 1)\n 31965: jump @460 if a0 != 0\n      : @459 (gas: 1)\n 31968: jump @525\n      : @460 (gas: 3)\n 31971: a0 = 0x40\n 31974: a1 = 0x20\n 31977: ra = 394, jump @0\n      : @461 [@dyn 197] (gas: 107)\n 31983: a1 = u8 [a0 + 0x11]\n 31986: a2 = u8 [a0 + 0x10]\n 31989: a3 = u8 [a0 + 0x12]\n 31992: a4 = u8 [a0 + 0x13]\n 31995: a1 = a1 << 0x8\n 31998: a1 = a1 | a2\n 32001: a3 = a3 << 0x10\n 32004: a4 = a4 << 0x18\n 32007: a3 = a3 | a4\n 32010: a1 = a1 | a3\n 32013: a2 = u8 [a0 + 0x15]\n 32016: a3 = u8 [a0 + 0x14]\n 32019: a4 = u8 [a0 + 0x16]\n 32022: a5 = u8 [a0 + 0x17]\n 32025: a2 = a2 << 0x8\n 32028: a2 = a2 | a3\n 32031: a4 = a4 << 0x10\n 32034: a5 = a5 << 0x18\n 32037: a4 = a4 | a5\n 32040: a2 = a2 | a4\n 32043: a2 = a2 << 0x20\n 32046: t1 = a2 | a1\n 32049: a1 = u8 [a0 + 0x1]\n 32052: a2 = u8 [a0]\n 32054: a3 = u8 [a0 + 0x2]\n 32057: a4 = u8 [a0 + 0x3]\n 32060: a1 = a1 << 0x8\n 32063: a1 = a1 | a2\n 32066: a3 = a3 << 0x10\n 32069: a4 = a4 << 0x18\n 32072: a3 = a3 | a4\n 32075: a1 = a1 | a3\n 32078: a2 = u8 [a0 + 0x5]\n 32081: a3 = u8 [a0 + 0x4]\n 32084: a4 = u8 [a0 + 0x6]\n 32087: a5 = u8 [a0 + 0x7]\n 32090: a2 = a2 << 0x8\n 32093: a2 = a2 | a3\n 32096: a4 = a4 << 0x10\n 32099: a5 = a5 << 0x18\n 32102: a4 = a4 | a5\n 32105: a2 = a2 | a4\n 32108: a2 = a2 << 0x20\n 32111: t0 = a2 | a1\n 32114: a1 = u8 [a0 + 0x19]\n 32117: a2 = u8 [a0 + 0x18]\n 32120: a3 = u8 [a0 + 0x1a]\n 32123: a4 = u8 [a0 + 0x1b]\n 32126: a1 = a1 << 0x8\n 32129: a1 = a1 | a2\n 32132: a3 = a3 << 0x10\n 32135: a4 = a4 << 0x18\n 32138: a3 = a3 | a4\n 32141: a1 = a1 | a3\n 32144: a2 = u8 [a0 + 0x1d]\n 32147: a3 = u8 [a0 + 0x1c]\n 32150: a4 = u8 [a0 + 0x1e]\n 32153: a5 = u8 [a0 + 0x1f]\n 32156: a2 = a2 << 0x8\n 32159: a2 = a2 | a3\n 32162: a4 = a4 << 0x10\n 32165: a5 = a5 << 0x18\n 32168: a4 = a4 | a5\n 32171: a2 = a2 | a4\n 32174: a2 = a2 << 0x20\n 32177: a5 = a2 | a1\n 32180: a1 = u8 [a0 + 0x9]\n 32183: a2 = u8 [a0 + 0x8]\n 32186: a3 = u8 [a0 + 0xa]\n 32189: a4 = u8 [a0 + 0xb]\n 32192: a1 = a1 << 0x8\n 32195: a1 = a1 | a2\n 32198: a3 = a3 << 0x10\n 32201: a4 = a4 << 0x18\n 32204: a3 = a3 | a4\n 32207: a1 = a1 | a3\n 32210: a2 = u8 [a0 + 0xd]\n 32213: a3 = u8 [a0 + 0xc]\n 32216: a4 = u8 [a0 + 0xe]\n 32219: a0 = u8 [a0 + 0xf]\n 32222: a2 = a2 << 0x8\n 32225: a2 = a2 | a3\n 32228: a4 = a4 << 0x10\n 32231: a0 = a0 << 0x18\n 32234: a0 = a0 | a4\n 32237: a0 = a0 | a2\n 32240: a0 = a0 << 0x20\n 32243: a0 = a0 | a1\n 32246: u64 [sp + 0x18] = a0\n 32249: s1 = reverse a0\n 32251: u64 [sp + 0x20] = a5\n 32254: a1 = reverse a5\n 32256: u64 [sp + 0x30] = t0\n 32259: a2 = reverse t0\n 32261: u64 [sp + 0x28] = t1\n 32264: a0 = reverse t1\n 32266: u64 [sp + 0xb0] = a0\n 32270: u64 [sp + 0xa0] = a2\n 32274: a0 = a0 | a2\n 32277: u64 [sp + 0xb8] = a1\n 32281: a1 = a1 | s1\n 32284: a1 = a1 | a0\n 32287: a1 = a1 >> 0x20\n 32290: a0 = a0 | s1\n 32293: a0 = a0 << 0x20\n 32296: a0 = a0 | a1\n 32299: jump @463 if a0 == 0\n      : @462 (gas: 1)\n 32302: jump @523\n      : @463 (gas: 4)\n 32305: a0 = i32 [sp + 0xb8]\n 32309: a1 = 0x20\n 32312: u64 [sp + 0xa8] = a0\n 32316: ra = 396, jump @0\n      : @464 [@dyn 198] (gas: 44)\n 32322: u8 [a0 + 31] = 0\n 32325: u8 [a0 + 30] = 0\n 32328: u8 [a0 + 29] = 0\n 32331: u8 [a0 + 28] = 0\n 32334: u8 [a0 + 27] = 0\n 32337: u8 [a0 + 26] = 0\n 32340: u8 [a0 + 25] = 0\n 32343: u8 [a0 + 24] = 0\n 32346: u8 [a0 + 23] = 0\n 32349: u8 [a0 + 22] = 0\n 32352: u8 [a0 + 21] = 0\n 32355: u8 [a0 + 20] = 0\n 32358: u8 [a0 + 19] = 0\n 32361: u8 [a0 + 18] = 0\n 32364: u8 [a0 + 17] = 0\n 32367: u8 [a0 + 16] = 0\n 32370: u8 [a0 + 15] = 0\n 32373: u8 [a0 + 14] = 0\n 32376: u8 [a0 + 13] = 0\n 32379: u8 [a0 + 12] = 0\n 32382: u8 [a0 + 11] = 0\n 32385: u8 [a0 + 10] = 0\n 32388: u8 [a0 + 9] = 0\n 32391: u8 [a0 + 8] = 0\n 32394: u8 [a0 + 7] = 0\n 32397: u8 [a0 + 6] = 0\n 32400: u8 [a0 + 5] = 0\n 32403: u8 [a0 + 3] = 0x42\n 32407: u8 [a0 + 2] = 0x24\n 32411: u8 [a0 + 1] = 0x35\n 32415: u8 [a0 + 0] = 0x65\n 32418: a3 = u64 [sp + 0xa0]\n 32422: a3 = a3 | s1\n 32425: a1 = 0x100000000\n 32435: u64 [sp + 0x60] = a1\n 32438: a1 = 0xfffffffc\n 32448: a2 = u64 [sp + 0xb8]\n 32452: a1 = a2 <u a1\n 32455: a2 = u64 [sp + 0xb0]\n 32459: a1 = 0 if a2 != 0\n 32461: u64 [sp + 0xa0] = a3\n 32465: a1 = 0 if a3 != 0\n 32467: u8 [a0 + 4] = 0\n 32470: jump @466 if a1 != 0\n      : @465 (gas: 1)\n 32473: jump @523\n      : @466 (gas: 19)\n 32476: a0 = u64 [sp + 0x80]\n 32480: a0 = reverse a0\n 32482: a1 = a0 >> 0x20\n 32485: a2 = u64 [sp + 0x88]\n 32489: a2 = reverse a2\n 32491: a3 = a2 << 0x20\n 32494: a1 = a1 | a3\n 32497: u64 [sp + 0x88] = a1\n 32501: a0 = a0 << 0x20\n 32504: a1 = u64 [sp + 0x98]\n 32508: a1 = reverse a1\n 32510: a1 = a1 >> 0x20\n 32513: a0 = a0 | a1\n 32516: u64 [sp + 0x98] = a0\n 32520: s1 = a2 >> 0x20\n 32523: a0 = u64 [sp + 0xa8]\n 32527: i32 a0 = a0 + 0x4\n 32530: a1 = 0x20\n 32533: ra = 398, jump @0\n      : @467 [@dyn 199] (gas: 64)\n 32539: a1 = reverse s1\n 32541: a2 = u64 [sp + 0x88]\n 32545: a2 = reverse a2\n 32547: a3 = u64 [sp + 0x98]\n 32551: a3 = reverse a3\n 32553: a4 = a3 >> 0x38\n 32556: u8 [a0 + 0x1f] = a4\n 32559: a4 = a3 >> 0x30\n 32562: u8 [a0 + 0x1e] = a4\n 32565: a4 = a3 >> 0x28\n 32568: u8 [a0 + 0x1d] = a4\n 32571: a4 = a3 >> 0x20\n 32574: u8 [a0 + 0x1c] = a4\n 32577: a4 = a3 >> 0x18\n 32580: u8 [a0 + 0x1b] = a4\n 32583: a4 = a3 >> 0x10\n 32586: u8 [a0 + 0x1a] = a4\n 32589: a4 = a3 >> 0x8\n 32592: u8 [a0 + 0x19] = a4\n 32595: u8 [a0 + 0x18] = a3\n 32598: u8 [a0 + 0x10] = a2\n 32601: u8 [a0 + 11] = 0\n 32604: u8 [a0 + 10] = 0\n 32607: u8 [a0 + 9] = 0\n 32610: u8 [a0 + 7] = 0\n 32613: u8 [a0 + 6] = 0\n 32616: u8 [a0 + 5] = 0\n 32619: u8 [a0 + 4] = 0\n 32622: u8 [a0 + 3] = 0\n 32625: u8 [a0 + 2] = 0\n 32628: u8 [a0 + 1] = 0\n 32631: u8 [a0 + 0] = 0\n 32633: a3 = a2 >> 0x38\n 32636: u8 [a0 + 0x17] = a3\n 32639: a3 = a2 >> 0x30\n 32642: u8 [a0 + 0x16] = a3\n 32645: a3 = a2 >> 0x28\n 32648: u8 [a0 + 0x15] = a3\n 32651: a3 = a2 >> 0x20\n 32654: u8 [a0 + 0x14] = a3\n 32657: a3 = a2 >> 0x18\n 32660: u8 [a0 + 0x13] = a3\n 32663: a3 = a2 >> 0x10\n 32666: u8 [a0 + 0x12] = a3\n 32669: a2 = a2 >> 0x8\n 32672: u8 [a0 + 0x11] = a2\n 32675: u8 [a0 + 0x8] = a1\n 32678: a2 = a1 >> 0x38\n 32681: u8 [a0 + 0xf] = a2\n 32684: a2 = a1 >> 0x30\n 32687: u8 [a0 + 0xe] = a2\n 32690: a2 = a1 >> 0x28\n 32693: u8 [a0 + 0xd] = a2\n 32696: a1 = a1 >> 0x20\n 32699: a2 = u64 [sp + 0x60]\n 32702: a2 = a2 + 0xffffffffffffffdc\n 32705: a3 = u64 [sp + 0xb8]\n 32709: a2 = a3 <u a2\n 32712: a3 = u64 [sp + 0xb0]\n 32716: a2 = 0 if a3 != 0\n 32718: a3 = u64 [sp + 0xa0]\n 32722: a2 = 0 if a3 != 0\n 32724: u8 [a0 + 0xc] = a1\n 32727: jump @469 if a2 != 0\n      : @468 (gas: 1)\n 32730: jump @523\n      : @469 (gas: 4)\n 32733: a0 = u64 [sp + 0xa8]\n 32737: i32 a0 = a0 + 0x24\n 32740: a1 = 0x20\n 32743: ra = 400, jump @0\n      : @470 [@dyn 200] (gas: 65)\n 32749: a1 = u64 [sp + 0x68]\n 32752: a1 = reverse a1\n 32754: a2 = u64 [sp + 0x70]\n 32757: a2 = reverse a2\n 32759: a3 = u64 [sp + 0x78]\n 32762: a3 = reverse a3\n 32764: a4 = a3 >> 0x38\n 32767: u8 [a0 + 0x1f] = a4\n 32770: a4 = a3 >> 0x30\n 32773: u8 [a0 + 0x1e] = a4\n 32776: a4 = a3 >> 0x28\n 32779: u8 [a0 + 0x1d] = a4\n 32782: a4 = a3 >> 0x20\n 32785: u8 [a0 + 0x1c] = a4\n 32788: a4 = a3 >> 0x18\n 32791: u8 [a0 + 0x1b] = a4\n 32794: a4 = a3 >> 0x10\n 32797: u8 [a0 + 0x1a] = a4\n 32800: a4 = a3 >> 0x8\n 32803: u8 [a0 + 0x19] = a4\n 32806: u8 [a0 + 0x18] = a3\n 32809: u8 [a0 + 0x10] = a2\n 32812: u8 [a0 + 11] = 0\n 32815: u8 [a0 + 10] = 0\n 32818: u8 [a0 + 9] = 0\n 32821: u8 [a0 + 7] = 0\n 32824: u8 [a0 + 6] = 0\n 32827: u8 [a0 + 5] = 0\n 32830: u8 [a0 + 4] = 0\n 32833: u8 [a0 + 3] = 0\n 32836: u8 [a0 + 2] = 0\n 32839: u8 [a0 + 1] = 0\n 32842: u8 [a0 + 0] = 0\n 32844: a3 = a2 >> 0x38\n 32847: u8 [a0 + 0x17] = a3\n 32850: a3 = a2 >> 0x30\n 32853: u8 [a0 + 0x16] = a3\n 32856: a3 = a2 >> 0x28\n 32859: u8 [a0 + 0x15] = a3\n 32862: a3 = a2 >> 0x20\n 32865: u8 [a0 + 0x14] = a3\n 32868: a3 = a2 >> 0x18\n 32871: u8 [a0 + 0x13] = a3\n 32874: a3 = a2 >> 0x10\n 32877: u8 [a0 + 0x12] = a3\n 32880: a2 = a2 >> 0x8\n 32883: u8 [a0 + 0x11] = a2\n 32886: u8 [a0 + 0x8] = a1\n 32889: a2 = a1 >> 0x38\n 32892: u8 [a0 + 0xf] = a2\n 32895: a2 = a1 >> 0x30\n 32898: u8 [a0 + 0xe] = a2\n 32901: a2 = a1 >> 0x28\n 32904: u8 [a0 + 0xd] = a2\n 32907: a1 = a1 >> 0x20\n 32910: s1 = 0x100000000\n 32920: a2 = 0xffffffbc\n 32930: a3 = u64 [sp + 0xb8]\n 32934: a2 = a3 <u a2\n 32937: a3 = u64 [sp + 0xb0]\n 32941: a2 = 0 if a3 != 0\n 32943: a3 = u64 [sp + 0xa0]\n 32947: a2 = 0 if a3 != 0\n 32949: u8 [a0 + 0xc] = a1\n 32952: jump @472 if a2 != 0\n      : @471 (gas: 1)\n 32955: jump @523\n      : @472 (gas: 4)\n 32958: a0 = u64 [sp + 0xa8]\n 32962: i32 a0 = a0 + 0x44\n 32965: a1 = 0x20\n 32968: ra = 402, jump @0\n      : @473 [@dyn 201] (gas: 54)\n 32975: a1 = u64 [sp + 0x50]\n 32978: a1 = a1 >> 0x30\n 32981: a2 = u64 [sp + 0x58]\n 32984: a2 = a2 << 0x10\n 32987: a1 = a1 | a2\n 32990: a2 = u64 [sp + 0x90]\n 32994: a1 = a1 & a2\n 32997: u8 [a0 + 23] = 0\n 33000: u8 [a0 + 22] = 0\n 33003: u8 [a0 + 21] = 0\n 33006: u8 [a0 + 20] = 0\n 33009: u8 [a0 + 19] = 0\n 33012: u8 [a0 + 18] = 0\n 33015: u8 [a0 + 17] = 0\n 33018: u8 [a0 + 16] = 0\n 33021: u8 [a0 + 15] = 0\n 33024: u8 [a0 + 14] = 0\n 33027: u8 [a0 + 13] = 0\n 33030: u8 [a0 + 12] = 0\n 33033: u8 [a0 + 11] = 0\n 33036: u8 [a0 + 10] = 0\n 33039: u8 [a0 + 9] = 0\n 33042: u8 [a0 + 8] = 0\n 33045: u8 [a0 + 7] = 0\n 33048: u8 [a0 + 6] = 0\n 33051: u8 [a0 + 5] = 0\n 33054: u8 [a0 + 4] = 0\n 33057: u8 [a0 + 3] = 0\n 33060: u8 [a0 + 2] = 0\n 33063: u8 [a0 + 1] = 0\n 33066: u8 [a0 + 0] = 0\n 33068: u8 [a0 + 0x18] = a1\n 33071: a2 = a1 >> 0x38\n 33074: u8 [a0 + 0x1f] = a2\n 33077: a2 = a1 >> 0x30\n 33080: u8 [a0 + 0x1e] = a2\n 33083: a2 = a1 >> 0x28\n 33086: u8 [a0 + 0x1d] = a2\n 33089: a2 = a1 >> 0x20\n 33092: u8 [a0 + 0x1c] = a2\n 33095: a2 = a1 >> 0x18\n 33098: u8 [a0 + 0x1b] = a2\n 33101: a2 = a1 >> 0x10\n 33104: u8 [a0 + 0x1a] = a2\n 33107: a1 = a1 >> 0x8\n 33110: a2 = s1 + 0xffffffffffffff9c\n 33113: a3 = u64 [sp + 0xb8]\n 33117: a2 = a3 <u a2\n 33120: a3 = u64 [sp + 0xb0]\n 33124: a2 = 0 if a3 != 0\n 33126: a3 = u64 [sp + 0xa0]\n 33130: a2 = 0 if a3 != 0\n 33132: u8 [a0 + 0x19] = a1\n 33135: jump @475 if a2 != 0\n      : @474 (gas: 1)\n 33138: jump @523\n      : @475 (gas: 8)\n 33141: a0 = 0x8400000000\n 33151: u64 [sp + 0x98] = a0\n 33155: a0 = 0x800000000\n 33165: u64 [sp + 0x88] = a0\n 33169: s1 = u64 [sp + 0xa8]\n 33173: i32 a0 = s1 + 0x64\n 33176: a1 = 0x20\n 33179: ra = 404, jump @0\n      : @476 [@dyn 202] (gas: 46)\n 33186: u8 [a0 + 31] = 0x1\n 33190: u8 [a0 + 30] = 0\n 33193: u8 [a0 + 29] = 0\n 33196: u8 [a0 + 28] = 0\n 33199: u8 [a0 + 27] = 0\n 33202: u8 [a0 + 26] = 0\n 33205: u8 [a0 + 25] = 0\n 33208: u8 [a0 + 24] = 0\n 33211: u8 [a0 + 23] = 0\n 33214: u8 [a0 + 22] = 0\n 33217: u8 [a0 + 21] = 0\n 33220: u8 [a0 + 20] = 0\n 33223: u8 [a0 + 19] = 0\n 33226: u8 [a0 + 18] = 0\n 33229: u8 [a0 + 17] = 0\n 33232: u8 [a0 + 16] = 0\n 33235: u8 [a0 + 15] = 0\n 33238: u8 [a0 + 14] = 0\n 33241: u8 [a0 + 13] = 0\n 33244: u8 [a0 + 12] = 0\n 33247: u8 [a0 + 11] = 0\n 33250: u8 [a0 + 10] = 0\n 33253: u8 [a0 + 9] = 0\n 33256: u8 [a0 + 8] = 0\n 33259: u8 [a0 + 7] = 0\n 33262: u8 [a0 + 6] = 0\n 33265: u8 [a0 + 5] = 0\n 33268: u8 [a0 + 4] = 0\n 33271: u8 [a0 + 3] = 0\n 33274: u8 [a0 + 2] = 0\n 33277: u8 [a0 + 1] = 0\n 33280: u8 [a0 + 0] = 0\n 33282: ecalli 9 // 'ref_time_left'\n 33284: a0 = u64 [sp + 0x38]\n 33287: u64 [sp + 0x3a8] = a0\n 33291: a0 = u64 [sp + 0x48]\n 33294: u64 [sp + 0x3a0] = a0\n 33298: a0 = u64 [sp + 0x40]\n 33301: u32 [sp + 0x3b0] = a0\n 33305: u64 [sp + 984] = 0\n 33309: u64 [sp + 976] = 0\n 33313: u64 [sp + 968] = 0\n 33317: u64 [sp + 960] = 0\n 33321: a1 = 0x84\n 33325: a0 = s1\n 33327: ra = 406, jump @0\n      : @477 [@dyn 203] (gas: 4)\n 33334: u64 [sp + 0xb8] = a0\n 33338: a0 = s1\n 33340: a1 = 0\n 33342: ra = 408, jump @0\n      : @478 [@dyn 204] (gas: 31)\n 33349: u32 [sp + 992] = 0\n 33353: u64 [sp + 1048] = 0xffffffffffffffff\n 33358: u64 [sp + 1040] = 0xffffffffffffffff\n 33363: u64 [sp + 1032] = 0xffffffffffffffff\n 33368: u64 [sp + 1024] = 0xffffffffffffffff\n 33373: a1 = sp + 0x3a0\n 33377: a1 = a1 << 0x20\n 33380: a1 = a1 >> 0x20\n 33383: s1 = u64 [sp + 0x88]\n 33387: s1 = s1 | a1\n 33390: a1 = sp + 0x3c0\n 33394: a1 = a1 << 0x20\n 33397: a1 = a1 >> 0x20\n 33400: a2 = sp + 0x400\n 33404: a2 = a2 << 0x20\n 33407: a3 = a2 | a1\n 33410: a1 = u64 [sp + 0xb8]\n 33414: a1 = a1 << 0x20\n 33417: a1 = a1 >> 0x20\n 33420: a4 = u64 [sp + 0x98]\n 33424: a4 = a4 | a1\n 33427: a0 = a0 << 0x20\n 33430: a0 = a0 >> 0x20\n 33433: a1 = sp + 0x3e0\n 33437: a1 = a1 << 0x20\n 33440: a5 = a1 | a0\n 33443: a1 = 0xffffffffffffffff\n 33446: a2 = 0xffffffffffffffff\n 33449: a0 = s1\n 33451: ecalli 1 // 'call'\n 33453: fallthrough\n      : @479 (gas: 1)\n 33454: jump @501 if a0 != 0\n      : @480 (gas: 4)\n 33458: ecalli 11 // 'return_data_size'\n 33460: a0 = 0x40\n 33463: a1 = 0x20\n 33466: ra = 410, jump @0\n      : @481 [@dyn 205] (gas: 162)\n 33473: a3 = u64 [sp + 0x20]\n 33476: u8 [a0 + 0x18] = a3\n 33479: a2 = u64 [sp + 0x28]\n 33482: a1 = a2 >> 0x38\n 33485: u8 [a0 + 0x17] = a1\n 33488: a1 = a2 >> 0x30\n 33491: u8 [a0 + 0x16] = a1\n 33494: a1 = a2 >> 0x28\n 33497: u8 [a0 + 0x15] = a1\n 33500: a1 = a2 >> 0x20\n 33503: u8 [a0 + 0x14] = a1\n 33506: a1 = a2 >> 0x18\n 33509: u8 [a0 + 0x13] = a1\n 33512: a1 = a2 >> 0x10\n 33515: u8 [a0 + 0x12] = a1\n 33518: a1 = a2 >> 0x8\n 33521: u8 [a0 + 0x11] = a1\n 33524: u8 [a0 + 0x10] = a2\n 33527: a2 = u64 [sp + 0x18]\n 33530: a1 = a2 >> 0x38\n 33533: u8 [a0 + 0xf] = a1\n 33536: a1 = a2 >> 0x30\n 33539: u8 [a0 + 0xe] = a1\n 33542: a1 = a2 >> 0x28\n 33545: u8 [a0 + 0xd] = a1\n 33548: a1 = a2 >> 0x20\n 33551: u8 [a0 + 0xc] = a1\n 33554: a1 = a2 >> 0x18\n 33557: u8 [a0 + 0xb] = a1\n 33560: a1 = a2 >> 0x10\n 33563: u8 [a0 + 0xa] = a1\n 33566: a1 = a2 >> 0x8\n 33569: u8 [a0 + 0x9] = a1\n 33572: u8 [a0 + 0x8] = a2\n 33575: a2 = u64 [sp + 0x30]\n 33578: a1 = a2 >> 0x38\n 33581: u8 [a0 + 0x7] = a1\n 33584: a1 = a2 >> 0x30\n 33587: u8 [a0 + 0x6] = a1\n 33590: a1 = a2 >> 0x28\n 33593: u8 [a0 + 0x5] = a1\n 33596: a1 = a2 >> 0x20\n 33599: u8 [a0 + 0x4] = a1\n 33602: a1 = a2 >> 0x18\n 33605: u8 [a0 + 0x3] = a1\n 33608: a1 = a2 >> 0x10\n 33611: u8 [a0 + 0x2] = a1\n 33614: a1 = a2 >> 0x8\n 33617: u8 [a0 + 0x1] = a1\n 33620: u8 [a0] = a2\n 33622: a1 = a3 >> 0x38\n 33625: u8 [a0 + 0x1f] = a1\n 33628: a1 = a3 >> 0x30\n 33631: u8 [a0 + 0x1e] = a1\n 33634: a1 = a3 >> 0x28\n 33637: u8 [a0 + 0x1d] = a1\n 33640: a1 = a3 >> 0x20\n 33643: u8 [a0 + 0x1c] = a1\n 33646: a1 = a3 >> 0x18\n 33649: u8 [a0 + 0x1b] = a1\n 33652: a1 = a3 >> 0x10\n 33655: u8 [a0 + 0x1a] = a1\n 33658: a1 = a3 >> 0x8\n 33661: u8 [a0 + 0x19] = a1\n 33664: u64 [sp + 1304] = 0\n 33668: u64 [sp + 1296] = 0\n 33672: u64 [sp + 1288] = 0\n 33676: u64 [sp + 1280] = 0x1\n 33681: u64 [sp + 1336] = 0\n 33685: u64 [sp + 1328] = 0\n 33689: u64 [sp + 1320] = 0\n 33693: u64 [sp + 1312] = 0\n 33697: u32 [sp + 1248] = 0x20\n 33702: i32 a1 = sp + 0x500\n 33706: i32 a3 = sp + 0x520\n 33710: i32 a4 = sp + 0x4e0\n 33714: a2 = 0xffffffffffffffff\n 33717: a0 = 0\n 33719: ecalli 7 // 'get_storage'\n 33721: a0 = u64 [sp + 0x520]\n 33725: u64 [sp + 0xb8] = a0\n 33729: a0 = u64 [sp + 0x530]\n 33733: u64 [sp + 0xb0] = a0\n 33737: a0 = u64 [sp + 0x528]\n 33741: u64 [sp + 0xa8] = a0\n 33745: a0 = u64 [sp + 0xc8]\n 33749: u64 [sp + 0x518] = a0\n 33753: a0 = u64 [sp + 0xd0]\n 33757: u64 [sp + 0x510] = a0\n 33761: a0 = u64 [sp + 0xd8]\n 33765: u64 [sp + 0x508] = a0\n 33769: s1 = u64 [sp + 0xc0]\n 33773: u64 [sp + 0x500] = s1\n 33777: u64 [sp + 1336] = 0\n 33781: u64 [sp + 1328] = 0\n 33785: u64 [sp + 1320] = 0\n 33789: u64 [sp + 1312] = 0\n 33793: u32 [sp + 1248] = 0x20\n 33798: i32 a1 = sp + 0x500\n 33802: i32 a3 = sp + 0x520\n 33806: i32 a4 = sp + 0x4e0\n 33810: a2 = 0xffffffffffffffff\n 33813: a0 = 0\n 33815: ecalli 7 // 'get_storage'\n 33817: a0 = u64 [sp + 0x520]\n 33821: u64 [sp + 0x80] = a0\n 33825: a0 = u64 [sp + 0x528]\n 33829: u64 [sp + 0x78] = a0\n 33832: a0 = u64 [sp + 0x530]\n 33836: u64 [sp + 0x70] = a0\n 33839: i32 a0 = sp + 0x420\n 33843: ecalli 5 // 'caller'\n 33845: a0 = i32 [sp + 0x430]\n 33849: u64 [sp + 0x68] = a0\n 33852: a0 = u64 [sp + 0x420]\n 33856: u64 [sp + 0x60] = a0\n 33859: a0 = u64 [sp + 0x428]\n 33863: u64 [sp + 0x58] = a0\n 33866: a0 = u64 [sp + 0xc8]\n 33870: u64 [sp + 0x518] = a0\n 33874: a0 = u64 [sp + 0xd0]\n 33878: u64 [sp + 0x510] = a0\n 33882: a0 = u64 [sp + 0xd8]\n 33886: u64 [sp + 0x508] = a0\n 33890: u64 [sp + 0x500] = s1\n 33894: u64 [sp + 1336] = 0\n 33898: u64 [sp + 1328] = 0\n 33902: u64 [sp + 1320] = 0\n 33906: u64 [sp + 1312] = 0\n 33910: u32 [sp + 1248] = 0x20\n 33915: i32 a1 = sp + 0x500\n 33919: i32 a3 = sp + 0x520\n 33923: i32 a4 = sp + 0x4e0\n 33927: a2 = 0xffffffffffffffff\n 33930: a0 = 0\n 33932: ecalli 7 // 'get_storage'\n 33934: a0 = u64 [sp + 0x530]\n 33938: u64 [sp + 0x48] = a0\n 33941: a0 = u64 [sp + 0x528]\n 33945: u64 [sp + 0x40] = a0\n 33948: a0 = u64 [sp + 0xa8]\n 33952: a0 = reverse a0\n 33954: a1 = a0 << 0x20\n 33957: a2 = u64 [sp + 0xb0]\n 33961: a2 = reverse a2\n 33963: a2 = a2 >> 0x20\n 33966: a3 = a2 | a1\n 33969: a0 = a0 >> 0x20\n 33972: a1 = u64 [sp + 0xb8]\n 33976: a1 = reverse a1\n 33978: a2 = a1 << 0x20\n 33981: a0 = a0 | a2\n 33984: a1 = a1 >> 0x20\n 33987: u64 [sp + 0x28] = a0\n 33990: u64 [sp + 0x448] = a0\n 33994: u64 [sp + 0x38] = a3\n 33997: u64 [sp + 0x440] = a3\n 34001: u64 [sp + 0x30] = a1\n 34004: u32 [sp + 0x450] = a1\n 34008: i32 a0 = sp + 0x440\n 34012: ecalli 6 // 'code_size'\n 34014: fallthrough\n      : @482 (gas: 1)\n 34015: jump @484 if a0 != 0\n      : @483 (gas: 1)\n 34018: jump @525\n      : @484 (gas: 3)\n 34021: a0 = 0x40\n 34024: a1 = 0x20\n 34027: ra = 412, jump @0\n      : @485 [@dyn 206] (gas: 107)\n 34034: a1 = u8 [a0 + 0x11]\n 34037: a2 = u8 [a0 + 0x10]\n 34040: a3 = u8 [a0 + 0x12]\n 34043: a4 = u8 [a0 + 0x13]\n 34046: a1 = a1 << 0x8\n 34049: a1 = a1 | a2\n 34052: a3 = a3 << 0x10\n 34055: a4 = a4 << 0x18\n 34058: a3 = a3 | a4\n 34061: a1 = a1 | a3\n 34064: a2 = u8 [a0 + 0x15]\n 34067: a3 = u8 [a0 + 0x14]\n 34070: a4 = u8 [a0 + 0x16]\n 34073: a5 = u8 [a0 + 0x17]\n 34076: a2 = a2 << 0x8\n 34079: a2 = a2 | a3\n 34082: a4 = a4 << 0x10\n 34085: a5 = a5 << 0x18\n 34088: a4 = a4 | a5\n 34091: a2 = a2 | a4\n 34094: a2 = a2 << 0x20\n 34097: t1 = a2 | a1\n 34100: a1 = u8 [a0 + 0x1]\n 34103: a2 = u8 [a0]\n 34105: a3 = u8 [a0 + 0x2]\n 34108: a4 = u8 [a0 + 0x3]\n 34111: a1 = a1 << 0x8\n 34114: a1 = a1 | a2\n 34117: a3 = a3 << 0x10\n 34120: a4 = a4 << 0x18\n 34123: a3 = a3 | a4\n 34126: a1 = a1 | a3\n 34129: a2 = u8 [a0 + 0x5]\n 34132: a3 = u8 [a0 + 0x4]\n 34135: a4 = u8 [a0 + 0x6]\n 34138: a5 = u8 [a0 + 0x7]\n 34141: a2 = a2 << 0x8\n 34144: a2 = a2 | a3\n 34147: a4 = a4 << 0x10\n 34150: a5 = a5 << 0x18\n 34153: a4 = a4 | a5\n 34156: a2 = a2 | a4\n 34159: a2 = a2 << 0x20\n 34162: t0 = a2 | a1\n 34165: a1 = u8 [a0 + 0x19]\n 34168: a2 = u8 [a0 + 0x18]\n 34171: a3 = u8 [a0 + 0x1a]\n 34174: a4 = u8 [a0 + 0x1b]\n 34177: a1 = a1 << 0x8\n 34180: a1 = a1 | a2\n 34183: a3 = a3 << 0x10\n 34186: a4 = a4 << 0x18\n 34189: a3 = a3 | a4\n 34192: a1 = a1 | a3\n 34195: a2 = u8 [a0 + 0x1d]\n 34198: a3 = u8 [a0 + 0x1c]\n 34201: a4 = u8 [a0 + 0x1e]\n 34204: a5 = u8 [a0 + 0x1f]\n 34207: a2 = a2 << 0x8\n 34210: a2 = a2 | a3\n 34213: a4 = a4 << 0x10\n 34216: a5 = a5 << 0x18\n 34219: a4 = a4 | a5\n 34222: a2 = a2 | a4\n 34225: a2 = a2 << 0x20\n 34228: a5 = a2 | a1\n 34231: a1 = u8 [a0 + 0x9]\n 34234: a2 = u8 [a0 + 0x8]\n 34237: a3 = u8 [a0 + 0xa]\n 34240: a4 = u8 [a0 + 0xb]\n 34243: a1 = a1 << 0x8\n 34246: a1 = a1 | a2\n 34249: a3 = a3 << 0x10\n 34252: a4 = a4 << 0x18\n 34255: a3 = a3 | a4\n 34258: a1 = a1 | a3\n 34261: a2 = u8 [a0 + 0xd]\n 34264: a3 = u8 [a0 + 0xc]\n 34267: a4 = u8 [a0 + 0xe]\n 34270: a0 = u8 [a0 + 0xf]\n 34273: a2 = a2 << 0x8\n 34276: a2 = a2 | a3\n 34279: a4 = a4 << 0x10\n 34282: a0 = a0 << 0x18\n 34285: a0 = a0 | a4\n 34288: a0 = a0 | a2\n 34291: a0 = a0 << 0x20\n 34294: a0 = a0 | a1\n 34297: u64 [sp + 0x8] = a0\n 34300: s1 = reverse a0\n 34302: u64 [sp + 0x10] = a5\n 34305: a1 = reverse a5\n 34307: u64 [sp + 0x20] = t0\n 34310: a2 = reverse t0\n 34312: u64 [sp + 0x18] = t1\n 34315: a0 = reverse t1\n 34317: u64 [sp + 0xb0] = a0\n 34321: u64 [sp + 0xa0] = a2\n 34325: a0 = a0 | a2\n 34328: u64 [sp + 0xb8] = a1\n 34332: a1 = a1 | s1\n 34335: a1 = a1 | a0\n 34338: a1 = a1 >> 0x20\n 34341: a0 = a0 | s1\n 34344: a0 = a0 << 0x20\n 34347: a0 = a0 | a1\n 34350: jump @523 if a0 != 0\n      : @486 (gas: 4)\n 34354: a0 = i32 [sp + 0xb8]\n 34358: a1 = 0x20\n 34361: u64 [sp + 0xa8] = a0\n 34365: ra = 414, jump @0\n      : @487 [@dyn 207] (gas: 44)\n 34372: u8 [a0 + 31] = 0\n 34375: u8 [a0 + 30] = 0\n 34378: u8 [a0 + 29] = 0\n 34381: u8 [a0 + 28] = 0\n 34384: u8 [a0 + 27] = 0\n 34387: u8 [a0 + 26] = 0\n 34390: u8 [a0 + 25] = 0\n 34393: u8 [a0 + 24] = 0\n 34396: u8 [a0 + 23] = 0\n 34399: u8 [a0 + 22] = 0\n 34402: u8 [a0 + 21] = 0\n 34405: u8 [a0 + 20] = 0\n 34408: u8 [a0 + 19] = 0\n 34411: u8 [a0 + 18] = 0\n 34414: u8 [a0 + 17] = 0\n 34417: u8 [a0 + 16] = 0\n 34420: u8 [a0 + 15] = 0\n 34423: u8 [a0 + 14] = 0\n 34426: u8 [a0 + 13] = 0\n 34429: u8 [a0 + 12] = 0\n 34432: u8 [a0 + 11] = 0\n 34435: u8 [a0 + 10] = 0\n 34438: u8 [a0 + 9] = 0\n 34441: u8 [a0 + 8] = 0\n 34444: u8 [a0 + 7] = 0\n 34447: u8 [a0 + 6] = 0\n 34450: u8 [a0 + 5] = 0\n 34453: u8 [a0 + 3] = 0x42\n 34457: u8 [a0 + 2] = 0x24\n 34461: u8 [a0 + 1] = 0x35\n 34465: u8 [a0 + 0] = 0x65\n 34468: a3 = u64 [sp + 0xa0]\n 34472: a3 = a3 | s1\n 34475: a1 = 0x100000000\n 34485: u64 [sp + 0x50] = a1\n 34488: a1 = 0xfffffffc\n 34498: a2 = u64 [sp + 0xb8]\n 34502: a1 = a2 <u a1\n 34505: a2 = u64 [sp + 0xb0]\n 34509: a1 = 0 if a2 != 0\n 34511: u64 [sp + 0xa0] = a3\n 34515: a1 = 0 if a3 != 0\n 34517: u8 [a0 + 4] = 0\n 34520: jump @523 if a1 == 0\n      : @488 (gas: 13)\n 34524: a0 = 0xffffffff\n 34534: s1 = u64 [sp + 0x70]\n 34537: s1 = s1 & a0\n 34540: a0 = u64 [sp + 0x78]\n 34543: a0 = a0 & 0xffffffffffffffff\n 34546: u64 [sp + 0x78] = a0\n 34549: a0 = u64 [sp + 0x80]\n 34553: a0 = a0 & 0xffffffffffffffff\n 34556: u64 [sp + 0x80] = a0\n 34560: a0 = u64 [sp + 0xa8]\n 34564: i32 a0 = a0 + 0x4\n 34567: a1 = 0x20\n 34570: ra = 416, jump @0\n      : @489 [@dyn 208] (gas: 64)\n 34577: a1 = reverse s1\n 34579: a2 = u64 [sp + 0x78]\n 34582: a2 = reverse a2\n 34584: a3 = u64 [sp + 0x80]\n 34588: a3 = reverse a3\n 34590: a4 = a3 >> 0x38\n 34593: u8 [a0 + 0x1f] = a4\n 34596: a4 = a3 >> 0x30\n 34599: u8 [a0 + 0x1e] = a4\n 34602: a4 = a3 >> 0x28\n 34605: u8 [a0 + 0x1d] = a4\n 34608: a4 = a3 >> 0x20\n 34611: u8 [a0 + 0x1c] = a4\n 34614: a4 = a3 >> 0x18\n 34617: u8 [a0 + 0x1b] = a4\n 34620: a4 = a3 >> 0x10\n 34623: u8 [a0 + 0x1a] = a4\n 34626: a4 = a3 >> 0x8\n 34629: u8 [a0 + 0x19] = a4\n 34632: u8 [a0 + 0x18] = a3\n 34635: u8 [a0 + 0x10] = a2\n 34638: u8 [a0 + 11] = 0\n 34641: u8 [a0 + 10] = 0\n 34644: u8 [a0 + 9] = 0\n 34647: u8 [a0 + 7] = 0\n 34650: u8 [a0 + 6] = 0\n 34653: u8 [a0 + 5] = 0\n 34656: u8 [a0 + 4] = 0\n 34659: u8 [a0 + 3] = 0\n 34662: u8 [a0 + 2] = 0\n 34665: u8 [a0 + 1] = 0\n 34668: u8 [a0 + 0] = 0\n 34670: a3 = a2 >> 0x38\n 34673: u8 [a0 + 0x17] = a3\n 34676: a3 = a2 >> 0x30\n 34679: u8 [a0 + 0x16] = a3\n 34682: a3 = a2 >> 0x28\n 34685: u8 [a0 + 0x15] = a3\n 34688: a3 = a2 >> 0x20\n 34691: u8 [a0 + 0x14] = a3\n 34694: a3 = a2 >> 0x18\n 34697: u8 [a0 + 0x13] = a3\n 34700: a3 = a2 >> 0x10\n 34703: u8 [a0 + 0x12] = a3\n 34706: a2 = a2 >> 0x8\n 34709: u8 [a0 + 0x11] = a2\n 34712: u8 [a0 + 0x8] = a1\n 34715: a2 = a1 >> 0x38\n 34718: u8 [a0 + 0xf] = a2\n 34721: a2 = a1 >> 0x30\n 34724: u8 [a0 + 0xe] = a2\n 34727: a2 = a1 >> 0x28\n 34730: u8 [a0 + 0xd] = a2\n 34733: a1 = a1 >> 0x20\n 34736: a2 = u64 [sp + 0x50]\n 34739: a2 = a2 + 0xffffffffffffffdc\n 34742: a3 = u64 [sp + 0xb8]\n 34746: a2 = a3 <u a2\n 34749: a3 = u64 [sp + 0xb0]\n 34753: a2 = 0 if a3 != 0\n 34755: a3 = u64 [sp + 0xa0]\n 34759: a2 = 0 if a3 != 0\n 34761: u8 [a0 + 0xc] = a1\n 34764: jump @523 if a2 == 0\n      : @490 (gas: 19)\n 34768: a0 = u64 [sp + 0x58]\n 34771: a0 = reverse a0\n 34773: a1 = a0 >> 0x20\n 34776: a2 = u64 [sp + 0x60]\n 34779: a2 = reverse a2\n 34781: a3 = a2 << 0x20\n 34784: a1 = a1 | a3\n 34787: u64 [sp + 0x80] = a1\n 34791: a0 = a0 << 0x20\n 34794: a1 = u64 [sp + 0x68]\n 34797: a1 = reverse a1\n 34799: a1 = a1 >> 0x20\n 34802: a0 = a0 | a1\n 34805: u64 [sp + 0x78] = a0\n 34808: s1 = a2 >> 0x20\n 34811: a0 = u64 [sp + 0xa8]\n 34815: i32 a0 = a0 + 0x24\n 34818: a1 = 0x20\n 34821: ra = 418, jump @0\n      : @491 [@dyn 209] (gas: 64)\n 34828: a1 = reverse s1\n 34830: a2 = u64 [sp + 0x80]\n 34834: a2 = reverse a2\n 34836: a3 = u64 [sp + 0x78]\n 34839: a3 = reverse a3\n 34841: a4 = a3 >> 0x38\n 34844: u8 [a0 + 0x1f] = a4\n 34847: a4 = a3 >> 0x30\n 34850: u8 [a0 + 0x1e] = a4\n 34853: a4 = a3 >> 0x28\n 34856: u8 [a0 + 0x1d] = a4\n 34859: a4 = a3 >> 0x20\n 34862: u8 [a0 + 0x1c] = a4\n 34865: a4 = a3 >> 0x18\n 34868: u8 [a0 + 0x1b] = a4\n 34871: a4 = a3 >> 0x10\n 34874: u8 [a0 + 0x1a] = a4\n 34877: a4 = a3 >> 0x8\n 34880: u8 [a0 + 0x19] = a4\n 34883: u8 [a0 + 0x18] = a3\n 34886: u8 [a0 + 0x10] = a2\n 34889: u8 [a0 + 11] = 0\n 34892: u8 [a0 + 10] = 0\n 34895: u8 [a0 + 9] = 0\n 34898: u8 [a0 + 7] = 0\n 34901: u8 [a0 + 6] = 0\n 34904: u8 [a0 + 5] = 0\n 34907: u8 [a0 + 4] = 0\n 34910: u8 [a0 + 3] = 0\n 34913: u8 [a0 + 2] = 0\n 34916: u8 [a0 + 1] = 0\n 34919: u8 [a0 + 0] = 0\n 34921: a3 = a2 >> 0x38\n 34924: u8 [a0 + 0x17] = a3\n 34927: a3 = a2 >> 0x30\n 34930: u8 [a0 + 0x16] = a3\n 34933: a3 = a2 >> 0x28\n 34936: u8 [a0 + 0x15] = a3\n 34939: a3 = a2 >> 0x20\n 34942: u8 [a0 + 0x14] = a3\n 34945: a3 = a2 >> 0x18\n 34948: u8 [a0 + 0x13] = a3\n 34951: a3 = a2 >> 0x10\n 34954: u8 [a0 + 0x12] = a3\n 34957: a2 = a2 >> 0x8\n 34960: u8 [a0 + 0x11] = a2\n 34963: u8 [a0 + 0x8] = a1\n 34966: a2 = a1 >> 0x38\n 34969: u8 [a0 + 0xf] = a2\n 34972: a2 = a1 >> 0x30\n 34975: u8 [a0 + 0xe] = a2\n 34978: a2 = a1 >> 0x28\n 34981: u8 [a0 + 0xd] = a2\n 34984: a1 = a1 >> 0x20\n 34987: s1 = 0x100000000\n 34997: a2 = 0xffffffbc\n 35007: a3 = u64 [sp + 0xb8]\n 35011: a2 = a3 <u a2\n 35014: a3 = u64 [sp + 0xb0]\n 35018: a2 = 0 if a3 != 0\n 35020: a3 = u64 [sp + 0xa0]\n 35024: a2 = 0 if a3 != 0\n 35026: u8 [a0 + 0xc] = a1\n 35029: jump @523 if a2 == 0\n      : @492 (gas: 4)\n 35033: a0 = u64 [sp + 0xa8]\n 35037: i32 a0 = a0 + 0x44\n 35040: a1 = 0x20\n 35043: ra = 420, jump @0\n      : @493 [@dyn 210] (gas: 54)\n 35050: a1 = u64 [sp + 0x40]\n 35053: a1 = a1 >> 0x28\n 35056: a2 = u64 [sp + 0x48]\n 35059: a2 = a2 << 0x18\n 35062: a1 = a1 | a2\n 35065: a2 = u64 [sp + 0x90]\n 35069: a1 = a1 & a2\n 35072: u8 [a0 + 23] = 0\n 35075: u8 [a0 + 22] = 0\n 35078: u8 [a0 + 21] = 0\n 35081: u8 [a0 + 20] = 0\n 35084: u8 [a0 + 19] = 0\n 35087: u8 [a0 + 18] = 0\n 35090: u8 [a0 + 17] = 0\n 35093: u8 [a0 + 16] = 0\n 35096: u8 [a0 + 15] = 0\n 35099: u8 [a0 + 14] = 0\n 35102: u8 [a0 + 13] = 0\n 35105: u8 [a0 + 12] = 0\n 35108: u8 [a0 + 11] = 0\n 35111: u8 [a0 + 10] = 0\n 35114: u8 [a0 + 9] = 0\n 35117: u8 [a0 + 8] = 0\n 35120: u8 [a0 + 7] = 0\n 35123: u8 [a0 + 6] = 0\n 35126: u8 [a0 + 5] = 0\n 35129: u8 [a0 + 4] = 0\n 35132: u8 [a0 + 3] = 0\n 35135: u8 [a0 + 2] = 0\n 35138: u8 [a0 + 1] = 0\n 35141: u8 [a0 + 0] = 0\n 35143: u8 [a0 + 0x18] = a1\n 35146: a2 = a1 >> 0x38\n 35149: u8 [a0 + 0x1f] = a2\n 35152: a2 = a1 >> 0x30\n 35155: u8 [a0 + 0x1e] = a2\n 35158: a2 = a1 >> 0x28\n 35161: u8 [a0 + 0x1d] = a2\n 35164: a2 = a1 >> 0x20\n 35167: u8 [a0 + 0x1c] = a2\n 35170: a2 = a1 >> 0x18\n 35173: u8 [a0 + 0x1b] = a2\n 35176: a2 = a1 >> 0x10\n 35179: u8 [a0 + 0x1a] = a2\n 35182: a1 = a1 >> 0x8\n 35185: a2 = s1 + 0xffffffffffffff9c\n 35188: a3 = u64 [sp + 0xb8]\n 35192: a2 = a3 <u a2\n 35195: a3 = u64 [sp + 0xb0]\n 35199: a2 = 0 if a3 != 0\n 35201: a3 = u64 [sp + 0xa0]\n 35205: a2 = 0 if a3 != 0\n 35207: u8 [a0 + 0x19] = a1\n 35210: jump @523 if a2 == 0\n      : @494 (gas: 4)\n 35214: s1 = u64 [sp + 0xa8]\n 35218: i32 a0 = s1 + 0x64\n 35221: a1 = 0x20\n 35224: ra = 422, jump @0\n      : @495 [@dyn 211] (gas: 46)\n 35231: u8 [a0 + 31] = 0x1\n 35235: u8 [a0 + 30] = 0\n 35238: u8 [a0 + 29] = 0\n 35241: u8 [a0 + 28] = 0\n 35244: u8 [a0 + 27] = 0\n 35247: u8 [a0 + 26] = 0\n 35250: u8 [a0 + 25] = 0\n 35253: u8 [a0 + 24] = 0\n 35256: u8 [a0 + 23] = 0\n 35259: u8 [a0 + 22] = 0\n 35262: u8 [a0 + 21] = 0\n 35265: u8 [a0 + 20] = 0\n 35268: u8 [a0 + 19] = 0\n 35271: u8 [a0 + 18] = 0\n 35274: u8 [a0 + 17] = 0\n 35277: u8 [a0 + 16] = 0\n 35280: u8 [a0 + 15] = 0\n 35283: u8 [a0 + 14] = 0\n 35286: u8 [a0 + 13] = 0\n 35289: u8 [a0 + 12] = 0\n 35292: u8 [a0 + 11] = 0\n 35295: u8 [a0 + 10] = 0\n 35298: u8 [a0 + 9] = 0\n 35301: u8 [a0 + 8] = 0\n 35304: u8 [a0 + 7] = 0\n 35307: u8 [a0 + 6] = 0\n 35310: u8 [a0 + 5] = 0\n 35313: u8 [a0 + 4] = 0\n 35316: u8 [a0 + 3] = 0\n 35319: u8 [a0 + 2] = 0\n 35322: u8 [a0 + 1] = 0\n 35325: u8 [a0 + 0] = 0\n 35327: ecalli 9 // 'ref_time_left'\n 35329: a0 = u64 [sp + 0x28]\n 35332: u64 [sp + 0x468] = a0\n 35336: a0 = u64 [sp + 0x38]\n 35339: u64 [sp + 0x460] = a0\n 35343: a0 = u64 [sp + 0x30]\n 35346: u32 [sp + 0x470] = a0\n 35350: u64 [sp + 1176] = 0\n 35354: u64 [sp + 1168] = 0\n 35358: u64 [sp + 1160] = 0\n 35362: u64 [sp + 1152] = 0\n 35366: a1 = 0x84\n 35370: a0 = s1\n 35372: ra = 424, jump @0\n      : @496 [@dyn 212] (gas: 4)\n 35379: u64 [sp + 0xb8] = a0\n 35383: a0 = s1\n 35385: a1 = 0\n 35387: ra = 426, jump @0\n      : @497 [@dyn 213] (gas: 31)\n 35394: u32 [sp + 1184] = 0\n 35398: u64 [sp + 1240] = 0xffffffffffffffff\n 35403: u64 [sp + 1232] = 0xffffffffffffffff\n 35408: u64 [sp + 1224] = 0xffffffffffffffff\n 35413: u64 [sp + 1216] = 0xffffffffffffffff\n 35418: a1 = sp + 0x460\n 35422: a1 = a1 << 0x20\n 35425: a1 = a1 >> 0x20\n 35428: s1 = u64 [sp + 0x88]\n 35432: s1 = s1 | a1\n 35435: a1 = sp + 0x480\n 35439: a1 = a1 << 0x20\n 35442: a1 = a1 >> 0x20\n 35445: a2 = sp + 0x4c0\n 35449: a2 = a2 << 0x20\n 35452: a3 = a2 | a1\n 35455: a1 = u64 [sp + 0xb8]\n 35459: a1 = a1 << 0x20\n 35462: a1 = a1 >> 0x20\n 35465: a4 = u64 [sp + 0x98]\n 35469: a4 = a4 | a1\n 35472: a0 = a0 << 0x20\n 35475: a0 = a0 >> 0x20\n 35478: a1 = sp + 0x4a0\n 35482: a1 = a1 << 0x20\n 35485: a5 = a1 | a0\n 35488: a1 = 0xffffffffffffffff\n 35491: a2 = 0xffffffffffffffff\n 35494: a0 = s1\n 35496: ecalli 1 // 'call'\n 35498: fallthrough\n      : @498 (gas: 1)\n 35499: jump @501 if a0 != 0\n      : @499 (gas: 4)\n 35503: ecalli 11 // 'return_data_size'\n 35505: a0 = 0x40\n 35508: a1 = 0x20\n 35511: ra = 428, jump @0\n      : @500 [@dyn 214] (gas: 112)\n 35518: a3 = u64 [sp + 0x10]\n 35521: u8 [a0 + 0x18] = a3\n 35524: a2 = u64 [sp + 0x18]\n 35527: a1 = a2 >> 0x38\n 35530: u8 [a0 + 0x17] = a1\n 35533: a1 = a2 >> 0x30\n 35536: u8 [a0 + 0x16] = a1\n 35539: a1 = a2 >> 0x28\n 35542: u8 [a0 + 0x15] = a1\n 35545: a1 = a2 >> 0x20\n 35548: u8 [a0 + 0x14] = a1\n 35551: a1 = a2 >> 0x18\n 35554: u8 [a0 + 0x13] = a1\n 35557: a1 = a2 >> 0x10\n 35560: u8 [a0 + 0x12] = a1\n 35563: a1 = a2 >> 0x8\n 35566: u8 [a0 + 0x11] = a1\n 35569: u8 [a0 + 0x10] = a2\n 35572: a2 = u64 [sp + 0x8]\n 35575: a1 = a2 >> 0x38\n 35578: u8 [a0 + 0xf] = a1\n 35581: a1 = a2 >> 0x30\n 35584: u8 [a0 + 0xe] = a1\n 35587: a1 = a2 >> 0x28\n 35590: u8 [a0 + 0xd] = a1\n 35593: a1 = a2 >> 0x20\n 35596: u8 [a0 + 0xc] = a1\n 35599: a1 = a2 >> 0x18\n 35602: u8 [a0 + 0xb] = a1\n 35605: a1 = a2 >> 0x10\n 35608: u8 [a0 + 0xa] = a1\n 35611: a1 = a2 >> 0x8\n 35614: u8 [a0 + 0x9] = a1\n 35617: u8 [a0 + 0x8] = a2\n 35620: a2 = u64 [sp + 0x20]\n 35623: a1 = a2 >> 0x38\n 35626: u8 [a0 + 0x7] = a1\n 35629: a1 = a2 >> 0x30\n 35632: u8 [a0 + 0x6] = a1\n 35635: a1 = a2 >> 0x28\n 35638: u8 [a0 + 0x5] = a1\n 35641: a1 = a2 >> 0x20\n 35644: u8 [a0 + 0x4] = a1\n 35647: a1 = a2 >> 0x18\n 35650: u8 [a0 + 0x3] = a1\n 35653: a1 = a2 >> 0x10\n 35656: u8 [a0 + 0x2] = a1\n 35659: a1 = a2 >> 0x8\n 35662: u8 [a0 + 0x1] = a1\n 35665: u8 [a0] = a2\n 35667: a1 = a3 >> 0x38\n 35670: u8 [a0 + 0x1f] = a1\n 35673: a1 = a3 >> 0x30\n 35676: u8 [a0 + 0x1e] = a1\n 35679: a1 = a3 >> 0x28\n 35682: u8 [a0 + 0x1d] = a1\n 35685: a1 = a3 >> 0x20\n 35688: u8 [a0 + 0x1c] = a1\n 35691: a1 = a3 >> 0x18\n 35694: u8 [a0 + 0x1b] = a1\n 35697: a1 = a3 >> 0x10\n 35700: u8 [a0 + 0x1a] = a1\n 35703: a1 = a3 >> 0x8\n 35706: u8 [a0 + 0x19] = a1\n 35709: a0 = u64 [sp + 0xc8]\n 35713: u64 [sp + 0x518] = a0\n 35717: a0 = u64 [sp + 0xd0]\n 35721: u64 [sp + 0x510] = a0\n 35725: a0 = u64 [sp + 0xd8]\n 35729: u64 [sp + 0x508] = a0\n 35733: s1 = u64 [sp + 0xc0]\n 35737: u64 [sp + 0x500] = s1\n 35741: u64 [sp + 1336] = 0\n 35745: u64 [sp + 1328] = 0\n 35749: u64 [sp + 1320] = 0\n 35753: u64 [sp + 1312] = 0\n 35757: u32 [sp + 1248] = 0x20\n 35762: i32 a1 = sp + 0x500\n 35766: i32 a3 = sp + 0x520\n 35770: i32 a4 = sp + 0x4e0\n 35774: a2 = 0xffffffffffffffff\n 35777: a0 = 0\n 35779: ecalli 7 // 'get_storage'\n 35781: a0 = u64 [sp + 0x520]\n 35785: a1 = u64 [sp + 0x528]\n 35789: a2 = u64 [sp + 0x530]\n 35793: a3 = u64 [sp + 0x538]\n 35797: a4 = 0xff00ffffffffffff\n 35807: a2 = a2 & a4\n 35810: a4 = u64 [sp + 0xc8]\n 35814: u64 [sp + 0x518] = a4\n 35818: a4 = u64 [sp + 0xd0]\n 35822: u64 [sp + 0x510] = a4\n 35826: a4 = u64 [sp + 0xd8]\n 35830: u64 [sp + 0x508] = a4\n 35834: u64 [sp + 0x500] = s1\n 35838: u64 [sp + 0x538] = a3\n 35842: u64 [sp + 0x530] = a2\n 35846: u64 [sp + 0x528] = a1\n 35850: u64 [sp + 0x520] = a0\n 35854: i32 a1 = sp + 0x500\n 35858: i32 a3 = sp + 0x520\n 35862: a2 = 0xffffffffffffffff\n 35865: a4 = 0x20\n 35868: a0 = 0\n 35870: ecalli 14 // 'set_storage'\n 35872: sp = s0 + 0xfffffffffffffaa0\n 35876: ra = u64 [sp + 0x558]\n 35880: s0 = u64 [sp + 0x550]\n 35884: s1 = u64 [sp + 0x548]\n 35888: sp = sp + 0x560\n 35892: ret\n      : @501 (gas: 1)\n 35894: ra = 430, jump @259\n      : @502 [@dyn 215] (gas: 3)\n 35900: a0 = 0x40\n 35903: a1 = 0x20\n 35906: ra = 432, jump @0\n      : @503 [@dyn 216] (gas: 103)\n 35913: a1 = u8 [a0 + 0x11]\n 35916: a2 = u8 [a0 + 0x10]\n 35919: a3 = u8 [a0 + 0x12]\n 35922: a4 = u8 [a0 + 0x13]\n 35925: a1 = a1 << 0x8\n 35928: a1 = a1 | a2\n 35931: a3 = a3 << 0x10\n 35934: a4 = a4 << 0x18\n 35937: a3 = a3 | a4\n 35940: a1 = a1 | a3\n 35943: a2 = u8 [a0 + 0x15]\n 35946: a3 = u8 [a0 + 0x14]\n 35949: a4 = u8 [a0 + 0x16]\n 35952: a5 = u8 [a0 + 0x17]\n 35955: a2 = a2 << 0x8\n 35958: a2 = a2 | a3\n 35961: a4 = a4 << 0x10\n 35964: a5 = a5 << 0x18\n 35967: a4 = a4 | a5\n 35970: a2 = a2 | a4\n 35973: a2 = a2 << 0x20\n 35976: t0 = a2 | a1\n 35979: a2 = u8 [a0 + 0x1]\n 35982: a3 = u8 [a0]\n 35984: a4 = u8 [a0 + 0x2]\n 35987: a5 = u8 [a0 + 0x3]\n 35990: a2 = a2 << 0x8\n 35993: a2 = a2 | a3\n 35996: a4 = a4 << 0x10\n 35999: a5 = a5 << 0x18\n 36002: a4 = a4 | a5\n 36005: a2 = a2 | a4\n 36008: a3 = u8 [a0 + 0x5]\n 36011: a4 = u8 [a0 + 0x4]\n 36014: a5 = u8 [a0 + 0x6]\n 36017: s1 = u8 [a0 + 0x7]\n 36020: a3 = a3 << 0x8\n 36023: a3 = a3 | a4\n 36026: a5 = a5 << 0x10\n 36029: s1 = s1 << 0x18\n 36032: a5 = a5 | s1\n 36035: a3 = a3 | a5\n 36038: a3 = a3 << 0x20\n 36041: a2 = a2 | a3\n 36044: a3 = u8 [a0 + 0x19]\n 36047: a4 = u8 [a0 + 0x18]\n 36050: a5 = u8 [a0 + 0x1a]\n 36053: s1 = u8 [a0 + 0x1b]\n 36056: a3 = a3 << 0x8\n 36059: a3 = a3 | a4\n 36062: a5 = a5 << 0x10\n 36065: s1 = s1 << 0x18\n 36068: a5 = a5 | s1\n 36071: a3 = a3 | a5\n 36074: a4 = u8 [a0 + 0x1d]\n 36077: a5 = u8 [a0 + 0x1c]\n 36080: s1 = u8 [a0 + 0x1e]\n 36083: a1 = u8 [a0 + 0x1f]\n 36086: a4 = a4 << 0x8\n 36089: a4 = a4 | a5\n 36092: s1 = s1 << 0x10\n 36095: a1 = a1 << 0x18\n 36098: a1 = a1 | s1\n 36101: a1 = a1 | a4\n 36104: a1 = a1 << 0x20\n 36107: a3 = a3 | a1\n 36110: a1 = u8 [a0 + 0x9]\n 36113: a4 = u8 [a0 + 0x8]\n 36116: a5 = u8 [a0 + 0xa]\n 36119: s1 = u8 [a0 + 0xb]\n 36122: a1 = a1 << 0x8\n 36125: a1 = a1 | a4\n 36128: a5 = a5 << 0x10\n 36131: s1 = s1 << 0x18\n 36134: a5 = a5 | s1\n 36137: a1 = a1 | a5\n 36140: a4 = u8 [a0 + 0xd]\n 36143: a5 = u8 [a0 + 0xc]\n 36146: s1 = u8 [a0 + 0xe]\n 36149: a0 = u8 [a0 + 0xf]\n 36152: a4 = a4 << 0x8\n 36155: a4 = a4 | a5\n 36158: s1 = s1 << 0x10\n 36161: a0 = a0 << 0x18\n 36164: a0 = a0 | s1\n 36167: a0 = a0 | a4\n 36170: a0 = a0 << 0x20\n 36173: a0 = a0 | a1\n 36176: s1 = reverse a0\n 36178: a1 = reverse a3\n 36180: a2 = reverse a2\n 36182: a0 = reverse t0\n 36184: u64 [sp + 0xd8] = a0\n 36188: u64 [sp + 0xd0] = a2\n 36192: a0 = a0 | a2\n 36195: a2 = a1\n 36197: a1 = a1 | s1\n 36200: a1 = a1 | a0\n 36203: a1 = a1 >> 0x20\n 36206: a0 = a0 | s1\n 36209: a0 = a0 << 0x20\n 36212: a0 = a0 | a1\n 36215: jump @523 if a0 != 0\n      : @504 (gas: 5)\n 36219: u64 [sp + 0xc8] = a2\n 36223: i32 a0 = a2 + 0\n 36225: a1 = 0x20\n 36228: u64 [sp + 0xc0] = a0\n 36232: ra = 434, jump @0\n      : @505 [@dyn 217] (gas: 50)\n 36239: u8 [a0 + 31] = 0\n 36242: u8 [a0 + 30] = 0\n 36245: u8 [a0 + 29] = 0\n 36248: u8 [a0 + 28] = 0\n 36251: u8 [a0 + 27] = 0\n 36254: u8 [a0 + 26] = 0\n 36257: u8 [a0 + 25] = 0\n 36260: u8 [a0 + 24] = 0\n 36263: u8 [a0 + 23] = 0\n 36266: u8 [a0 + 22] = 0\n 36269: u8 [a0 + 21] = 0\n 36272: u8 [a0 + 20] = 0\n 36275: u8 [a0 + 19] = 0\n 36278: u8 [a0 + 18] = 0\n 36281: u8 [a0 + 17] = 0\n 36284: u8 [a0 + 16] = 0\n 36287: u8 [a0 + 15] = 0\n 36290: u8 [a0 + 14] = 0\n 36293: u8 [a0 + 13] = 0\n 36296: u8 [a0 + 12] = 0\n 36299: u8 [a0 + 11] = 0\n 36302: u8 [a0 + 10] = 0\n 36305: u8 [a0 + 9] = 0\n 36308: u8 [a0 + 8] = 0\n 36311: u8 [a0 + 7] = 0\n 36314: u8 [a0 + 6] = 0\n 36317: u8 [a0 + 5] = 0\n 36320: u8 [a0 + 4] = 0\n 36323: u8 [a0 + 3] = 0xa0\n 36328: u8 [a0 + 2] = 0x79\n 36332: u8 [a0 + 1] = 0xc3\n 36337: u8 [a0 + 0] = 0x8\n 36340: a1 = u64 [sp + 0xc8]\n 36344: a0 = a1 + 0x4\n 36347: a1 = a0 <u a1\n 36350: a3 = u64 [sp + 0xd8]\n 36354: a2 = a3 + a1\n 36357: a3 = a2 <u a3\n 36360: a3 = a1 if a1 == 0\n 36363: a3 = a3 + s1\n 36366: a1 = a3 <u s1\n 36369: a4 = u64 [sp + 0xd0]\n 36373: a4 = a4 + a1\n 36376: u64 [sp + 0x268] = a2\n 36380: u64 [sp + 0x260] = a0\n 36384: u64 [sp + 0x270] = a3\n 36388: a0 = sp + 0x280\n 36392: a1 = sp + 0x260\n 36396: u64 [sp + 0x278] = a4\n 36400: ra = 436, jump @251\n      : @506 [@dyn 218] (gas: 5)\n 36406: a0 = u64 [sp + 0x288]\n 36410: t0 = u64 [sp + 0x298]\n 36414: t1 = u64 [sp + 0x280]\n 36418: a3 = u64 [sp + 0x290]\n 36422: jump @522\n      : @507 (gas: 3)\n 36425: a0 = 0x40\n 36428: a1 = 0x20\n 36431: ra = 438, jump @0\n      : @508 [@dyn 219] (gas: 103)\n 36438: a1 = u8 [a0 + 0x11]\n 36441: a2 = u8 [a0 + 0x10]\n 36444: a3 = u8 [a0 + 0x12]\n 36447: a4 = u8 [a0 + 0x13]\n 36450: a1 = a1 << 0x8\n 36453: a1 = a1 | a2\n 36456: a3 = a3 << 0x10\n 36459: a4 = a4 << 0x18\n 36462: a3 = a3 | a4\n 36465: a1 = a1 | a3\n 36468: a2 = u8 [a0 + 0x15]\n 36471: a3 = u8 [a0 + 0x14]\n 36474: a4 = u8 [a0 + 0x16]\n 36477: a5 = u8 [a0 + 0x17]\n 36480: a2 = a2 << 0x8\n 36483: a2 = a2 | a3\n 36486: a4 = a4 << 0x10\n 36489: a5 = a5 << 0x18\n 36492: a4 = a4 | a5\n 36495: a2 = a2 | a4\n 36498: a2 = a2 << 0x20\n 36501: t0 = a2 | a1\n 36504: a2 = u8 [a0 + 0x1]\n 36507: a3 = u8 [a0]\n 36509: a4 = u8 [a0 + 0x2]\n 36512: a5 = u8 [a0 + 0x3]\n 36515: a2 = a2 << 0x8\n 36518: a2 = a2 | a3\n 36521: a4 = a4 << 0x10\n 36524: a5 = a5 << 0x18\n 36527: a4 = a4 | a5\n 36530: a2 = a2 | a4\n 36533: a3 = u8 [a0 + 0x5]\n 36536: a4 = u8 [a0 + 0x4]\n 36539: a5 = u8 [a0 + 0x6]\n 36542: s1 = u8 [a0 + 0x7]\n 36545: a3 = a3 << 0x8\n 36548: a3 = a3 | a4\n 36551: a5 = a5 << 0x10\n 36554: s1 = s1 << 0x18\n 36557: a5 = a5 | s1\n 36560: a3 = a3 | a5\n 36563: a3 = a3 << 0x20\n 36566: a2 = a2 | a3\n 36569: a3 = u8 [a0 + 0x19]\n 36572: a4 = u8 [a0 + 0x18]\n 36575: a5 = u8 [a0 + 0x1a]\n 36578: s1 = u8 [a0 + 0x1b]\n 36581: a3 = a3 << 0x8\n 36584: a3 = a3 | a4\n 36587: a5 = a5 << 0x10\n 36590: s1 = s1 << 0x18\n 36593: a5 = a5 | s1\n 36596: a3 = a3 | a5\n 36599: a4 = u8 [a0 + 0x1d]\n 36602: a5 = u8 [a0 + 0x1c]\n 36605: s1 = u8 [a0 + 0x1e]\n 36608: a1 = u8 [a0 + 0x1f]\n 36611: a4 = a4 << 0x8\n 36614: a4 = a4 | a5\n 36617: s1 = s1 << 0x10\n 36620: a1 = a1 << 0x18\n 36623: a1 = a1 | s1\n 36626: a1 = a1 | a4\n 36629: a1 = a1 << 0x20\n 36632: a3 = a3 | a1\n 36635: a1 = u8 [a0 + 0x9]\n 36638: a4 = u8 [a0 + 0x8]\n 36641: a5 = u8 [a0 + 0xa]\n 36644: s1 = u8 [a0 + 0xb]\n 36647: a1 = a1 << 0x8\n 36650: a1 = a1 | a4\n 36653: a5 = a5 << 0x10\n 36656: s1 = s1 << 0x18\n 36659: a5 = a5 | s1\n 36662: a1 = a1 | a5\n 36665: a4 = u8 [a0 + 0xd]\n 36668: a5 = u8 [a0 + 0xc]\n 36671: s1 = u8 [a0 + 0xe]\n 36674: a0 = u8 [a0 + 0xf]\n 36677: a4 = a4 << 0x8\n 36680: a4 = a4 | a5\n 36683: s1 = s1 << 0x10\n 36686: a0 = a0 << 0x18\n 36689: a0 = a0 | s1\n 36692: a0 = a0 | a4\n 36695: a0 = a0 << 0x20\n 36698: a0 = a0 | a1\n 36701: s1 = reverse a0\n 36703: a1 = reverse a3\n 36705: a2 = reverse a2\n 36707: a0 = reverse t0\n 36709: u64 [sp + 0xd8] = a0\n 36713: u64 [sp + 0xd0] = a2\n 36717: a0 = a0 | a2\n 36720: a2 = a1\n 36722: a1 = a1 | s1\n 36725: a1 = a1 | a0\n 36728: a1 = a1 >> 0x20\n 36731: a0 = a0 | s1\n 36734: a0 = a0 << 0x20\n 36737: a0 = a0 | a1\n 36740: jump @523 if a0 != 0\n      : @509 (gas: 5)\n 36744: u64 [sp + 0xc8] = a2\n 36748: i32 a0 = a2 + 0\n 36750: a1 = 0x20\n 36753: u64 [sp + 0xc0] = a0\n 36757: ra = 440, jump @0\n      : @510 [@dyn 220] (gas: 50)\n 36764: u8 [a0 + 31] = 0\n 36767: u8 [a0 + 30] = 0\n 36770: u8 [a0 + 29] = 0\n 36773: u8 [a0 + 28] = 0\n 36776: u8 [a0 + 27] = 0\n 36779: u8 [a0 + 26] = 0\n 36782: u8 [a0 + 25] = 0\n 36785: u8 [a0 + 24] = 0\n 36788: u8 [a0 + 23] = 0\n 36791: u8 [a0 + 22] = 0\n 36794: u8 [a0 + 21] = 0\n 36797: u8 [a0 + 20] = 0\n 36800: u8 [a0 + 19] = 0\n 36803: u8 [a0 + 18] = 0\n 36806: u8 [a0 + 17] = 0\n 36809: u8 [a0 + 16] = 0\n 36812: u8 [a0 + 15] = 0\n 36815: u8 [a0 + 14] = 0\n 36818: u8 [a0 + 13] = 0\n 36821: u8 [a0 + 12] = 0\n 36824: u8 [a0 + 11] = 0\n 36827: u8 [a0 + 10] = 0\n 36830: u8 [a0 + 9] = 0\n 36833: u8 [a0 + 8] = 0\n 36836: u8 [a0 + 7] = 0\n 36839: u8 [a0 + 6] = 0\n 36842: u8 [a0 + 5] = 0\n 36845: u8 [a0 + 4] = 0\n 36848: u8 [a0 + 3] = 0xa0\n 36853: u8 [a0 + 2] = 0x79\n 36857: u8 [a0 + 1] = 0xc3\n 36862: u8 [a0 + 0] = 0x8\n 36865: a1 = u64 [sp + 0xc8]\n 36869: a0 = a1 + 0x4\n 36872: a1 = a0 <u a1\n 36875: a3 = u64 [sp + 0xd8]\n 36879: a2 = a3 + a1\n 36882: a3 = a2 <u a3\n 36885: a3 = a1 if a1 == 0\n 36888: a3 = a3 + s1\n 36891: a1 = a3 <u s1\n 36894: a4 = u64 [sp + 0xd0]\n 36898: a4 = a4 + a1\n 36901: u64 [sp + 0xe8] = a2\n 36905: u64 [sp + 0xe0] = a0\n 36909: u64 [sp + 0xf0] = a3\n 36913: a0 = sp + 0x100\n 36917: a1 = sp + 0xe0\n 36921: u64 [sp + 0xf8] = a4\n 36925: ra = 442, jump @401\n      : @511 [@dyn 221] (gas: 5)\n 36931: a0 = u64 [sp + 0x108]\n 36935: t0 = u64 [sp + 0x118]\n 36939: t1 = u64 [sp + 0x100]\n 36943: a3 = u64 [sp + 0x110]\n 36947: jump @522\n      : @512 (gas: 3)\n 36950: a0 = 0x40\n 36953: a1 = 0x20\n 36956: ra = 444, jump @0\n      : @513 [@dyn 222] (gas: 103)\n 36963: a1 = u8 [a0 + 0x11]\n 36966: a2 = u8 [a0 + 0x10]\n 36969: a3 = u8 [a0 + 0x12]\n 36972: a4 = u8 [a0 + 0x13]\n 36975: a1 = a1 << 0x8\n 36978: a1 = a1 | a2\n 36981: a3 = a3 << 0x10\n 36984: a4 = a4 << 0x18\n 36987: a3 = a3 | a4\n 36990: a1 = a1 | a3\n 36993: a2 = u8 [a0 + 0x15]\n 36996: a3 = u8 [a0 + 0x14]\n 36999: a4 = u8 [a0 + 0x16]\n 37002: a5 = u8 [a0 + 0x17]\n 37005: a2 = a2 << 0x8\n 37008: a2 = a2 | a3\n 37011: a4 = a4 << 0x10\n 37014: a5 = a5 << 0x18\n 37017: a4 = a4 | a5\n 37020: a2 = a2 | a4\n 37023: a2 = a2 << 0x20\n 37026: t0 = a2 | a1\n 37029: a2 = u8 [a0 + 0x1]\n 37032: a3 = u8 [a0]\n 37034: a4 = u8 [a0 + 0x2]\n 37037: a5 = u8 [a0 + 0x3]\n 37040: a2 = a2 << 0x8\n 37043: a2 = a2 | a3\n 37046: a4 = a4 << 0x10\n 37049: a5 = a5 << 0x18\n 37052: a4 = a4 | a5\n 37055: a2 = a2 | a4\n 37058: a3 = u8 [a0 + 0x5]\n 37061: a4 = u8 [a0 + 0x4]\n 37064: a5 = u8 [a0 + 0x6]\n 37067: s1 = u8 [a0 + 0x7]\n 37070: a3 = a3 << 0x8\n 37073: a3 = a3 | a4\n 37076: a5 = a5 << 0x10\n 37079: s1 = s1 << 0x18\n 37082: a5 = a5 | s1\n 37085: a3 = a3 | a5\n 37088: a3 = a3 << 0x20\n 37091: a2 = a2 | a3\n 37094: a3 = u8 [a0 + 0x19]\n 37097: a4 = u8 [a0 + 0x18]\n 37100: a5 = u8 [a0 + 0x1a]\n 37103: s1 = u8 [a0 + 0x1b]\n 37106: a3 = a3 << 0x8\n 37109: a3 = a3 | a4\n 37112: a5 = a5 << 0x10\n 37115: s1 = s1 << 0x18\n 37118: a5 = a5 | s1\n 37121: a3 = a3 | a5\n 37124: a4 = u8 [a0 + 0x1d]\n 37127: a5 = u8 [a0 + 0x1c]\n 37130: s1 = u8 [a0 + 0x1e]\n 37133: a1 = u8 [a0 + 0x1f]\n 37136: a4 = a4 << 0x8\n 37139: a4 = a4 | a5\n 37142: s1 = s1 << 0x10\n 37145: a1 = a1 << 0x18\n 37148: a1 = a1 | s1\n 37151: a1 = a1 | a4\n 37154: a1 = a1 << 0x20\n 37157: a3 = a3 | a1\n 37160: a1 = u8 [a0 + 0x9]\n 37163: a4 = u8 [a0 + 0x8]\n 37166: a5 = u8 [a0 + 0xa]\n 37169: s1 = u8 [a0 + 0xb]\n 37172: a1 = a1 << 0x8\n 37175: a1 = a1 | a4\n 37178: a5 = a5 << 0x10\n 37181: s1 = s1 << 0x18\n 37184: a5 = a5 | s1\n 37187: a1 = a1 | a5\n 37190: a4 = u8 [a0 + 0xd]\n 37193: a5 = u8 [a0 + 0xc]\n 37196: s1 = u8 [a0 + 0xe]\n 37199: a0 = u8 [a0 + 0xf]\n 37202: a4 = a4 << 0x8\n 37205: a4 = a4 | a5\n 37208: s1 = s1 << 0x10\n 37211: a0 = a0 << 0x18\n 37214: a0 = a0 | s1\n 37217: a0 = a0 | a4\n 37220: a0 = a0 << 0x20\n 37223: a0 = a0 | a1\n 37226: s1 = reverse a0\n 37228: a1 = reverse a3\n 37230: a2 = reverse a2\n 37232: a0 = reverse t0\n 37234: u64 [sp + 0xd8] = a0\n 37238: u64 [sp + 0xd0] = a2\n 37242: a0 = a0 | a2\n 37245: a2 = a1\n 37247: a1 = a1 | s1\n 37250: a1 = a1 | a0\n 37253: a1 = a1 >> 0x20\n 37256: a0 = a0 | s1\n 37259: a0 = a0 << 0x20\n 37262: a0 = a0 | a1\n 37265: jump @523 if a0 != 0\n      : @514 (gas: 5)\n 37269: u64 [sp + 0xc8] = a2\n 37273: i32 a0 = a2 + 0\n 37275: a1 = 0x20\n 37278: u64 [sp + 0xc0] = a0\n 37282: ra = 446, jump @0\n      : @515 [@dyn 223] (gas: 50)\n 37289: u8 [a0 + 31] = 0\n 37292: u8 [a0 + 30] = 0\n 37295: u8 [a0 + 29] = 0\n 37298: u8 [a0 + 28] = 0\n 37301: u8 [a0 + 27] = 0\n 37304: u8 [a0 + 26] = 0\n 37307: u8 [a0 + 25] = 0\n 37310: u8 [a0 + 24] = 0\n 37313: u8 [a0 + 23] = 0\n 37316: u8 [a0 + 22] = 0\n 37319: u8 [a0 + 21] = 0\n 37322: u8 [a0 + 20] = 0\n 37325: u8 [a0 + 19] = 0\n 37328: u8 [a0 + 18] = 0\n 37331: u8 [a0 + 17] = 0\n 37334: u8 [a0 + 16] = 0\n 37337: u8 [a0 + 15] = 0\n 37340: u8 [a0 + 14] = 0\n 37343: u8 [a0 + 13] = 0\n 37346: u8 [a0 + 12] = 0\n 37349: u8 [a0 + 11] = 0\n 37352: u8 [a0 + 10] = 0\n 37355: u8 [a0 + 9] = 0\n 37358: u8 [a0 + 8] = 0\n 37361: u8 [a0 + 7] = 0\n 37364: u8 [a0 + 6] = 0\n 37367: u8 [a0 + 5] = 0\n 37370: u8 [a0 + 4] = 0\n 37373: u8 [a0 + 3] = 0xa0\n 37378: u8 [a0 + 2] = 0x79\n 37382: u8 [a0 + 1] = 0xc3\n 37387: u8 [a0 + 0] = 0x8\n 37390: a1 = u64 [sp + 0xc8]\n 37394: a0 = a1 + 0x4\n 37397: a1 = a0 <u a1\n 37400: a3 = u64 [sp + 0xd8]\n 37404: a2 = a3 + a1\n 37407: a3 = a2 <u a3\n 37410: a3 = a1 if a1 == 0\n 37413: a3 = a3 + s1\n 37416: a1 = a3 <u s1\n 37419: a4 = u64 [sp + 0xd0]\n 37423: a4 = a4 + a1\n 37426: u64 [sp + 0x128] = a2\n 37430: u64 [sp + 0x120] = a0\n 37434: u64 [sp + 0x130] = a3\n 37438: a0 = sp + 0x140\n 37442: a1 = sp + 0x120\n 37446: u64 [sp + 0x138] = a4\n 37450: ra = 448, jump @409\n      : @516 [@dyn 224] (gas: 5)\n 37456: a0 = u64 [sp + 0x148]\n 37460: t0 = u64 [sp + 0x158]\n 37464: t1 = u64 [sp + 0x140]\n 37468: a3 = u64 [sp + 0x150]\n 37472: jump @522\n      : @517 (gas: 3)\n 37475: a0 = 0x40\n 37478: a1 = 0x20\n 37481: ra = 450, jump @0\n      : @518 [@dyn 225] (gas: 103)\n 37488: a1 = u8 [a0 + 0x11]\n 37491: a2 = u8 [a0 + 0x10]\n 37494: a3 = u8 [a0 + 0x12]\n 37497: a4 = u8 [a0 + 0x13]\n 37500: a1 = a1 << 0x8\n 37503: a1 = a1 | a2\n 37506: a3 = a3 << 0x10\n 37509: a4 = a4 << 0x18\n 37512: a3 = a3 | a4\n 37515: a1 = a1 | a3\n 37518: a2 = u8 [a0 + 0x15]\n 37521: a3 = u8 [a0 + 0x14]\n 37524: a4 = u8 [a0 + 0x16]\n 37527: a5 = u8 [a0 + 0x17]\n 37530: a2 = a2 << 0x8\n 37533: a2 = a2 | a3\n 37536: a4 = a4 << 0x10\n 37539: a5 = a5 << 0x18\n 37542: a4 = a4 | a5\n 37545: a2 = a2 | a4\n 37548: a2 = a2 << 0x20\n 37551: t0 = a2 | a1\n 37554: a2 = u8 [a0 + 0x1]\n 37557: a3 = u8 [a0]\n 37559: a4 = u8 [a0 + 0x2]\n 37562: a5 = u8 [a0 + 0x3]\n 37565: a2 = a2 << 0x8\n 37568: a2 = a2 | a3\n 37571: a4 = a4 << 0x10\n 37574: a5 = a5 << 0x18\n 37577: a4 = a4 | a5\n 37580: a2 = a2 | a4\n 37583: a3 = u8 [a0 + 0x5]\n 37586: a4 = u8 [a0 + 0x4]\n 37589: a5 = u8 [a0 + 0x6]\n 37592: s1 = u8 [a0 + 0x7]\n 37595: a3 = a3 << 0x8\n 37598: a3 = a3 | a4\n 37601: a5 = a5 << 0x10\n 37604: s1 = s1 << 0x18\n 37607: a5 = a5 | s1\n 37610: a3 = a3 | a5\n 37613: a3 = a3 << 0x20\n 37616: a2 = a2 | a3\n 37619: a3 = u8 [a0 + 0x19]\n 37622: a4 = u8 [a0 + 0x18]\n 37625: a5 = u8 [a0 + 0x1a]\n 37628: s1 = u8 [a0 + 0x1b]\n 37631: a3 = a3 << 0x8\n 37634: a3 = a3 | a4\n 37637: a5 = a5 << 0x10\n 37640: s1 = s1 << 0x18\n 37643: a5 = a5 | s1\n 37646: a3 = a3 | a5\n 37649: a4 = u8 [a0 + 0x1d]\n 37652: a5 = u8 [a0 + 0x1c]\n 37655: s1 = u8 [a0 + 0x1e]\n 37658: a1 = u8 [a0 + 0x1f]\n 37661: a4 = a4 << 0x8\n 37664: a4 = a4 | a5\n 37667: s1 = s1 << 0x10\n 37670: a1 = a1 << 0x18\n 37673: a1 = a1 | s1\n 37676: a1 = a1 | a4\n 37679: a1 = a1 << 0x20\n 37682: a3 = a3 | a1\n 37685: a1 = u8 [a0 + 0x9]\n 37688: a4 = u8 [a0 + 0x8]\n 37691: a5 = u8 [a0 + 0xa]\n 37694: s1 = u8 [a0 + 0xb]\n 37697: a1 = a1 << 0x8\n 37700: a1 = a1 | a4\n 37703: a5 = a5 << 0x10\n 37706: s1 = s1 << 0x18\n 37709: a5 = a5 | s1\n 37712: a1 = a1 | a5\n 37715: a4 = u8 [a0 + 0xd]\n 37718: a5 = u8 [a0 + 0xc]\n 37721: s1 = u8 [a0 + 0xe]\n 37724: a0 = u8 [a0 + 0xf]\n 37727: a4 = a4 << 0x8\n 37730: a4 = a4 | a5\n 37733: s1 = s1 << 0x10\n 37736: a0 = a0 << 0x18\n 37739: a0 = a0 | s1\n 37742: a0 = a0 | a4\n 37745: a0 = a0 << 0x20\n 37748: a0 = a0 | a1\n 37751: s1 = reverse a0\n 37753: a1 = reverse a3\n 37755: a2 = reverse a2\n 37757: a0 = reverse t0\n 37759: u64 [sp + 0xd8] = a0\n 37763: u64 [sp + 0xd0] = a2\n 37767: a0 = a0 | a2\n 37770: a2 = a1\n 37772: a1 = a1 | s1\n 37775: a1 = a1 | a0\n 37778: a1 = a1 >> 0x20\n 37781: a0 = a0 | s1\n 37784: a0 = a0 << 0x20\n 37787: a0 = a0 | a1\n 37790: jump @523 if a0 != 0\n      : @519 (gas: 5)\n 37794: u64 [sp + 0xc8] = a2\n 37798: i32 a0 = a2 + 0\n 37800: a1 = 0x20\n 37803: u64 [sp + 0xc0] = a0\n 37807: ra = 452, jump @0\n      : @520 [@dyn 226] (gas: 50)\n 37814: u8 [a0 + 31] = 0\n 37817: u8 [a0 + 30] = 0\n 37820: u8 [a0 + 29] = 0\n 37823: u8 [a0 + 28] = 0\n 37826: u8 [a0 + 27] = 0\n 37829: u8 [a0 + 26] = 0\n 37832: u8 [a0 + 25] = 0\n 37835: u8 [a0 + 24] = 0\n 37838: u8 [a0 + 23] = 0\n 37841: u8 [a0 + 22] = 0\n 37844: u8 [a0 + 21] = 0\n 37847: u8 [a0 + 20] = 0\n 37850: u8 [a0 + 19] = 0\n 37853: u8 [a0 + 18] = 0\n 37856: u8 [a0 + 17] = 0\n 37859: u8 [a0 + 16] = 0\n 37862: u8 [a0 + 15] = 0\n 37865: u8 [a0 + 14] = 0\n 37868: u8 [a0 + 13] = 0\n 37871: u8 [a0 + 12] = 0\n 37874: u8 [a0 + 11] = 0\n 37877: u8 [a0 + 10] = 0\n 37880: u8 [a0 + 9] = 0\n 37883: u8 [a0 + 8] = 0\n 37886: u8 [a0 + 7] = 0\n 37889: u8 [a0 + 6] = 0\n 37892: u8 [a0 + 5] = 0\n 37895: u8 [a0 + 4] = 0\n 37898: u8 [a0 + 3] = 0xa0\n 37903: u8 [a0 + 2] = 0x79\n 37907: u8 [a0 + 1] = 0xc3\n 37912: u8 [a0 + 0] = 0x8\n 37915: a1 = u64 [sp + 0xc8]\n 37919: a0 = a1 + 0x4\n 37922: a1 = a0 <u a1\n 37925: a3 = u64 [sp + 0xd8]\n 37929: a2 = a3 + a1\n 37932: a3 = a2 <u a3\n 37935: a3 = a1 if a1 == 0\n 37938: a3 = a3 + s1\n 37941: a1 = a3 <u s1\n 37944: a4 = u64 [sp + 0xd0]\n 37948: a4 = a4 + a1\n 37951: u64 [sp + 0x1a8] = a2\n 37955: u64 [sp + 0x1a0] = a0\n 37959: u64 [sp + 0x1b0] = a3\n 37963: a0 = sp + 0x1c0\n 37967: a1 = sp + 0x1a0\n 37971: u64 [sp + 0x1b8] = a4\n 37975: ra = 454, jump @275\n      : @521 [@dyn 227] (gas: 5)\n 37981: a0 = u64 [sp + 0x1c8]\n 37985: t0 = u64 [sp + 0x1d8]\n 37989: t1 = u64 [sp + 0x1c0]\n 37993: a3 = u64 [sp + 0x1d0]\n 37997: fallthrough\n      : @522 (gas: 26)\n 37998: a1 = u64 [sp + 0xd8]\n 38002: a4 = a0 ^ a1\n 38005: a5 = a0 <u a1\n 38008: t2 = a1\n 38010: a2 = u64 [sp + 0xc8]\n 38014: a1 = t1 <u a2\n 38017: a5 = a1 if a4 == 0\n 38020: a4 = a3 - s1\n 38023: a3 = a3 <u s1\n 38026: s1 = u64 [sp + 0xd0]\n 38030: s1 = t0 - s1\n 38033: s1 = s1 - a3\n 38036: a3 = a4 <u a5\n 38039: s1 = s1 - a3\n 38042: a4 = a4 - a5\n 38045: a0 = a0 - t2\n 38048: a1 = a0 - a1\n 38051: a0 = t1 - a2\n 38054: a1 = a1 | s1\n 38057: a2 = a0 | a4\n 38060: a2 = a2 | a1\n 38063: a1 = a1 | a4\n 38066: a2 = a2 >> 0x20\n 38069: a1 = a1 << 0x20\n 38072: a1 = a1 | a2\n 38075: jump @531 if a1 == 0\n      : @523 (gas: 1)\n 38079: trap\n      : @524 (gas: 4)\n 38080: a0 = 0\n 38082: a1 = 0\n 38084: ra = 0x1c8\n 38088: jump @0\n      : @525 (gas: 2)\n 38092: a1 = 0\n 38094: ra = 456, jump @0\n      : @526 [@dyn 228] (gas: 5)\n 38101: i32 a1 = a0 + 0\n 38103: a0 = 0x1\n 38106: a2 = 0\n 38108: ecalli 12 // 'seal_return'\n 38110: fallthrough\n      : @527 (gas: 8)\n 38111: u64 [sp + 400] = 0\n 38115: u64 [sp + 392] = 0\n 38119: u64 [sp + 384] = 0\n 38123: a0 = 0x4e487b7100000000\n 38133: a1 = sp + 0x180\n 38137: u64 [sp + 0x198] = a0\n 38141: a0 = 0\n 38143: ra = 458, jump @8\n      : @528 [@dyn 229] (gas: 7)\n 38150: u64 [sp + 376] = 0\n 38154: u64 [sp + 368] = 0\n 38158: u64 [sp + 352] = 0x41\n 38163: a0 = 0x4\n 38166: a1 = sp + 0x160\n 38170: u64 [sp + 360] = 0\n 38174: ra = 460, jump @8\n      : @529 [@dyn 230] (gas: 3)\n 38181: a1 = 0x24\n 38184: a0 = 0\n 38186: ra = 462, jump @0\n      : @530 [@dyn 231] (gas: 5)\n 38193: i32 a1 = a0 + 0\n 38195: a0 = 0x1\n 38198: a2 = 0x24\n 38201: ecalli 12 // 'seal_return'\n 38203: fallthrough\n      : @531 (gas: 4)\n 38204: i32 s1 = a0 + 0\n 38206: a0 = u64 [sp + 0xc0]\n 38210: a1 = s1\n 38212: ra = 464, jump @0\n      : @532 [@dyn 232] (gas: 7)\n 38219: i32 a1 = a0 + 0\n 38221: a0 = 0x1\n 38224: a2 = s1\n 38226: ecalli 12 // 'seal_return'\n 38228: a0 = 0\n 38230: ra = 0x1d2\n 38234: jump @10\n      : @533 [export #0: 'call'] (gas: 2)\n 38238: a0 = 0\n 38240: ra = 466, jump @10\n      : @534 [@dyn 233] [export #1: 'deploy'] (gas: 2)\n 38247: a0 = 0x1\n 38250: ra = 468, jump @10\n      : @535 [@dyn 234] (gas: 27)\n 38257: sp = sp + 0xffffffffffffff80\n 38260: u64 [sp + 0x78] = ra\n 38263: u64 [sp + 0x70] = s0\n 38266: u64 [sp + 0x68] = s1\n 38269: s0 = sp + 0x80\n 38273: sp = sp & 0xfffffffffffffff0\n 38276: t0 = u64 [a1]\n 38278: t1 = u64 [a1 + 0x8]\n 38281: t2 = u64 [a1 + 0x10]\n 38284: a1 = u64 [a1 + 0x18]\n 38287: a3 = u64 [a2]\n 38289: a4 = u64 [a2 + 0x8]\n 38292: a5 = u64 [a2 + 0x10]\n 38295: a2 = u64 [a2 + 0x18]\n 38298: s1 = a0\n 38300: u64 [sp + 0x18] = a2\n 38303: u64 [sp + 0x10] = a5\n 38306: u64 [sp + 0x8] = a4\n 38309: u64 [sp] = a3\n 38311: u64 [sp + 0x38] = a1\n 38314: u64 [sp + 0x30] = t2\n 38317: u64 [sp + 0x28] = t1\n 38320: a0 = sp + 0x40\n 38323: a1 = sp + 0x20\n 38326: a2 = sp\n 38328: u64 [sp + 0x20] = t0\n 38331: ra = 470, jump @142\n      : @536 [@dyn 235] (gas: 14)\n 38337: a0 = u64 [sp + 0x50]\n 38340: a1 = u64 [sp + 0x58]\n 38343: a2 = u64 [sp + 0x40]\n 38346: a3 = u64 [sp + 0x48]\n 38349: u64 [s1 + 0x10] = a0\n 38352: u64 [s1 + 0x18] = a1\n 38355: u64 [s1] = a2\n 38357: u64 [s1 + 0x8] = a3\n 38360: sp = s0 + 0xffffffffffffff80\n 38363: ra = u64 [sp + 0x78]\n 38366: s0 = u64 [sp + 0x70]\n 38369: s1 = u64 [sp + 0x68]\n 38372: sp = sp + 0x80\n 38376: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"acceptListing(uint256)": "b0eceb7e",
							"createListing(uint8,uint8)": "15a6f5cf",
							"getAllListings()": "ae73ccec",
							"inventory()": "15d52a5c",
							"listings(uint256)": "de74e57b",
							"owner()": "8da5cb5b"
						}
					},
					"irOptimized": "/// @use-src 0:\"CardTrading.sol\"\nobject \"CardTrading_207\" {\n    code {\n        {\n            /// @src 0:340:2199  \"contract CardTrading {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := copy_arguments_for_constructor_object_CardTrading()\n            constructor_CardTrading(_1)\n            let _2 := allocate_unbounded()\n            codecopy(_2, dataoffset(\"CardTrading_207_deployed\"), datasize(\"CardTrading_207_deployed\"))\n            return(_2, datasize(\"CardTrading_207_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function cleanup_address(value) -> cleaned\n        {\n            cleaned := cleanup_uint160(value)\n        }\n        function validator_revert_address(value)\n        {\n            if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n        }\n        function abi_decode_address_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_address(value)\n        }\n        function abi_decode_tuple_address_fromMemory(headStart, dataEnd) -> value0\n        {\n            if slt(sub(dataEnd, headStart), 32)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := 0\n            value0 := abi_decode_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_CardTrading() -> ret_param\n        {\n            let programSize := datasize(\"CardTrading_207\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param := abi_decode_tuple_address_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_contract_IInventoryManager(value)\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_contract_IInventoryManager_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_contract_IInventoryManager(value)\n        }\n        function prepare_store_contract_IInventoryManager(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_contract_IInventoryManager_to_contract_IInventoryManager(slot, value)\n        {\n            let convertedValue := convert_contract_IInventoryManager_to_contract_IInventoryManager(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_contract_IInventoryManager(convertedValue)))\n        }\n        function convert_uint160_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function prepare_store_address(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_address_to_address(slot, value)\n        {\n            let convertedValue := convert_address_to_address(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n        }\n        function shift_right_unsigned(value) -> newValue\n        { newValue := shr(0, value) }\n        function cleanup_from_storage_contract_IInventoryManager(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function extract_from_storage_value_offset_contract_IInventoryManager(slot_value) -> value\n        {\n            value := cleanup_from_storage_contract_IInventoryManager(shift_right_unsigned(slot_value))\n        }\n        function read_from_storage_split_offset_contract_IInventoryManager(slot) -> value\n        {\n            value := extract_from_storage_value_offset_contract_IInventoryManager(sload(slot))\n        }\n        function convert_contract_IInventoryManager_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function convert_contract_CardTrading_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n        { revert(0, 0) }\n        function shift_left_224(value) -> newValue\n        { newValue := shl(224, value) }\n        function abi_decode_fromMemory(headStart, dataEnd)\n        {\n            if slt(sub(dataEnd, headStart), 0)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n        }\n        function abi_encode_address(value, pos)\n        {\n            mstore(pos, cleanup_address(value))\n        }\n        function abi_encode_tuple_address(headStart, value0) -> tail\n        {\n            tail := add(headStart, 32)\n            abi_encode_address(value0, add(headStart, 0))\n        }\n        /// @ast-id 76 @src 0:606:1051  \"constructor(address inventoryAddress) {...\"\n        function constructor_CardTrading(var_inventoryAddress)\n        {\n            /// @src 0:685:701  \"inventoryAddress\"\n            let _1 := var_inventoryAddress\n            let expr := _1\n            /// @src 0:667:702  \"IInventoryManager(inventoryAddress)\"\n            let expr_address := convert_address_to_contract_IInventoryManager(expr)\n            /// @src 0:655:702  \"inventory = IInventoryManager(inventoryAddress)\"\n            update_storage_value_offset_contract_IInventoryManager_to_contract_IInventoryManager(0x01, expr_address)\n            /// @src 0:721:731  \"msg.sender\"\n            let expr_1 := caller()\n            /// @src 0:713:731  \"owner = msg.sender\"\n            update_storage_value_offset_address_to_address(0x02, expr_1)\n            /// @src 0:827:836  \"inventory\"\n            let _address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n            let expr_63_address := _address\n            /// @src 0:827:855  \"inventory.setTradingContract\"\n            let expr_64_address := convert_contract_IInventoryManager_to_address(expr_63_address)\n            let expr_functionSelector := 0x5be6f2c7\n            /// @src 0:864:868  \"this\"\n            let expr_67_address := address()\n            /// @src 0:856:869  \"address(this)\"\n            let expr_2 := convert_contract_CardTrading_to_address(expr_67_address)\n            /// @src 0:827:870  \"inventory.setTradingContract(address(this))\"\n            if iszero(extcodesize(expr_64_address))\n            {\n                revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            }\n            let _2 := allocate_unbounded()\n            mstore(_2, shift_left_224(expr_functionSelector))\n            let _3 := abi_encode_tuple_address(add(_2, 4), expr_2)\n            let trySuccessCondition := call(gas(), expr_64_address, 0, _2, sub(_3, _2), _2, 0)\n            if trySuccessCondition\n            {\n                let _4 := 0\n                if gt(_4, returndatasize()) { _4 := returndatasize() }\n                finalize_allocation(_2, _4)\n                abi_decode_fromMemory(_2, add(_2, _4))\n            }\n            /// @src 0:823:1044  \"try inventory.setTradingContract(address(this)) {...\"\n            switch iszero(trySuccessCondition)\n            case 0 { }\n            default {\n                let _5 := 1\n                if _5 { }\n            }\n        }\n    }\n    /// @use-src 0:\"CardTrading.sol\"\n    object \"CardTrading_207_deployed\" {\n        code {\n            {\n                /// @src 0:340:2199  \"contract CardTrading {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_224_unsigned(calldataload(0))\n                    switch selector\n                    case 0x15a6f5cf { external_fun_createListing() }\n                    case 0x15d52a5c { external_fun_inventory() }\n                    case 0x8da5cb5b { external_fun_owner() }\n                    case 0xae73ccec { external_fun_getAllListings() }\n                    case 0xb0eceb7e { external_fun_acceptListing() }\n                    case 0xde74e57b { external_fun_listings() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_224_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_uint8(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function validator_revert_uint8(value)\n            {\n                if iszero(eq(value, cleanup_uint8(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint8(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint8(value)\n            }\n            function abi_decode_uint8t_uint8(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint8(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint8(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_createListing()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_uint8t_uint8(4, calldatasize())\n                fun_createListing(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_contract_IInventoryManager(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_contract_IInventoryManager(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_contract_IInventoryManager(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_contract_IInventoryManager(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_contract_IInventoryManager(sload(slot), offset)\n            }\n            /// @ast-id 45 @src 0:536:570  \"IInventoryManager public inventory\"\n            function getter_fun_inventory() -> ret_address\n            {\n                let slot := 1\n                let offset := 0\n                ret_address := read_from_storage_split_dynamic_contract_IInventoryManager(slot, offset)\n            }\n            /// @src 0:340:2199  \"contract CardTrading {...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_contract_IInventoryManager_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function abi_encode_contract_IInventoryManager_to_address(value, pos)\n            {\n                mstore(pos, convert_contract_IInventoryManager_to_address(value))\n            }\n            function abi_encode_contract_IInventoryManager(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_contract_IInventoryManager_to_address(value0, add(headStart, 0))\n            }\n            function external_fun_inventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_inventory()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_contract_IInventoryManager(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 47 @src 0:577:597  \"address public owner\"\n            function getter_fun_owner() -> ret\n            {\n                let slot := 2\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:340:2199  \"contract CardTrading {...\"\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_owner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_owner()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_array_struct_Listing_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_struct_Listing_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_struct_Listing_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_address_to_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_uint8_to_uint8(value, pos)\n            {\n                mstore(pos, cleanup_uint8(value))\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_struct_Listing(value, pos)\n            {\n                let memberValue0 := mload(add(value, 0x00))\n                abi_encode_address_to_address(memberValue0, add(pos, 0x00))\n                let memberValue0_1 := mload(add(value, 0x20))\n                abi_encode_uint8_to_uint8(memberValue0_1, add(pos, 0x20))\n                let memberValue0_2 := mload(add(value, 0x40))\n                abi_encode_uint8_to_uint8(memberValue0_2, add(pos, 0x40))\n                let memberValue0_3 := mload(add(value, 0x60))\n                abi_encode_bool(memberValue0_3, add(pos, 0x60))\n            }\n            function abi_encodeUpdatedPos_struct_Listing(value0, pos) -> updatedPos\n            {\n                abi_encode_struct_Listing(value0, pos)\n                updatedPos := add(pos, 0x80)\n            }\n            function array_nextElement_array_struct_Listing_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_struct_Listing_dyn(value, pos) -> end\n            {\n                let length := array_length_array_struct_Listing_dyn(value)\n                pos := array_storeLengthForEncoding_array_struct_Listing_dyn(pos, length)\n                let baseRef := array_dataslot_array_struct_Listing_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_struct_Listing(elementValue0, pos)\n                    srcPtr := array_nextElement_array_struct_Listing_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encode_array_struct_Listing_memory_ptr_dyn_memory_ptr(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_struct_Listing_dyn(value0, tail)\n            }\n            function external_fun_getAllListings()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_getAllListings()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_struct_Listing_memory_ptr_dyn_memory_ptr(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function external_fun_acceptListing()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_acceptListing(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_struct_Listing_storage_dyn(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_struct_Listing_storage_dyn(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_struct_Listing__dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Listing_storage_dyn(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Listing_storage_dyn(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(160, value) }\n            function cleanup_from_storage_uint8(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_uint8(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint8(shift_right_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_t_uint8(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint8(sload(slot))\n            }\n            function shift_right_168_unsigned(value) -> newValue\n            { newValue := shr(168, value) }\n            function extract_from_storage_value_offset_t_uint8(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint8(shift_right_168_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint8(slot) -> value\n            {\n                value := extract_from_storage_value_offset_t_uint8(sload(slot))\n            }\n            function shift_right_176_unsigned(value) -> newValue\n            { newValue := shr(176, value) }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_176_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            /// @ast-id 42 @src 0:504:529  \"Listing[] public listings\"\n            function getter_fun_listings(key) -> ret, ret_1, ret_2, ret_3\n            {\n                let slot := 0\n                let offset := 0\n                if iszero(lt(key, array_length_array_struct_Listing_storage_dyn(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_struct_Listing__dyn(slot, key)\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_t_uint8(add(slot, 0))\n                ret_2 := read_from_storage_split_offset_uint8(add(slot, 0))\n                ret_3 := read_from_storage_split_offset_bool(add(slot, 0))\n            }\n            /// @src 0:340:2199  \"contract CardTrading {...\"\n            function abi_encode_uint8_to_uint8_fromStack(value, pos)\n            {\n                mstore(pos, cleanup_uint8(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_address_uint8_uint8_bool(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint8_to_uint8_fromStack(value1, add(headStart, 32))\n                abi_encode_uint8_to_uint8_fromStack(value2, add(headStart, 64))\n                abi_encode_bool_to_bool(value3, add(headStart, 96))\n            }\n            function external_fun_listings()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3 := getter_fun_listings(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint8_uint8_bool(memPos, ret, ret_1, ret_2, ret_3)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint8(value) -> converted\n            {\n                converted := cleanup_uint8(identity(cleanup_t_rational_by(value)))\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid ID\")\n            }\n            function abi_encode_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 10)\n                store_literal_in_memory_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_87f3(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(tail)\n            }\n            function require_helper_stringliteral_87f3(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_87f3(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function extract_from_storage_value_offset_contract_IInventoryManager(slot_value) -> value\n            {\n                value := cleanup_from_storage_contract_IInventoryManager(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_contract_IInventoryManager(slot) -> value\n            {\n                value := extract_from_storage_value_offset_contract_IInventoryManager(sload(slot))\n            }\n            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            { revert(0, 0) }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function shift_left_224(value) -> newValue\n            { newValue := shl(224, value) }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_bool_fromMemory(offset, end) -> value\n            {\n                value := mload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_bool_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n            }\n            function convert_uint8_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint8(value)))\n            }\n            function abi_encode_uint8(value, pos)\n            {\n                mstore(pos, convert_uint8_to_uint256(value))\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function abi_encode_rational_by(value, pos)\n            {\n                mstore(pos, convert_rational_by_to_uint256(value))\n            }\n            function abi_encode_address_uint8_rational_by(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 96)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint8(value1, add(headStart, 32))\n                abi_encode_rational_by(value2, add(headStart, 64))\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function store_literal_in_memory_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05(memPtr)\n            {\n                mstore(add(memPtr, 0), \"No card\")\n            }\n            function abi_encode_stringliteral_ec62(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 7)\n                store_literal_in_memory_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_ec62(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_ec62(tail)\n            }\n            function require_helper_stringliteral_ec62(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_ec62(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_array_array_struct_Listing_storage_dyn_storage_to_array_struct_Listing__dyn_ptr(value) -> converted\n            { converted := value }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function allocate_memory_struct_struct_Listing_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function write_to_memory_uint8(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint8(value))\n            }\n            function write_to_memory_bool(memPtr, value)\n            {\n                mstore(memPtr, cleanup_bool(value))\n            }\n            function array_dataslot_array_struct_Listing_storage_dyn_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_struct_Listing_storage_dyn_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_struct_Listing__dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Listing_storage_dyn_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Listing_storage_dyn_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function panic_error_0x00()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x00)\n                revert(0, 0x24)\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function read_from_memoryt_uint8(ptr) -> returnValue\n            {\n                let value := cleanup_uint8(mload(ptr))\n                returnValue := value\n            }\n            function shift_left_160(value) -> newValue\n            { newValue := shl(160, value) }\n            function update_byte_slice_shift_20(value, toInsert) -> result\n            {\n                let mask := shl(160, 255)\n                toInsert := shift_left_160(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint8_to_uint8(value) -> converted\n            {\n                converted := cleanup_uint8(identity(cleanup_uint8(value)))\n            }\n            function prepare_store_uint8(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint8_to_uint8(slot, value)\n            {\n                let convertedValue := convert_uint8_to_uint8(value)\n                sstore(slot, update_byte_slice_shift_20(sload(slot), prepare_store_uint8(convertedValue)))\n            }\n            function shift_left_168(value) -> newValue\n            { newValue := shl(168, value) }\n            function update_byte_slice_shift_21(value, toInsert) -> result\n            {\n                let mask := shl(168, 255)\n                toInsert := shift_left_168(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_t_uint8_to_t_uint8(slot, value)\n            {\n                let convertedValue := convert_uint8_to_uint8(value)\n                sstore(slot, update_byte_slice_shift_21(sload(slot), prepare_store_uint8(convertedValue)))\n            }\n            function read_from_memoryt_bool(ptr) -> returnValue\n            {\n                let value := cleanup_bool(mload(ptr))\n                returnValue := value\n            }\n            function shift_left_176(value) -> newValue\n            { newValue := shl(176, value) }\n            function update_byte_slice_shift_22(value, toInsert) -> result\n            {\n                let mask := shl(176, 255)\n                toInsert := shift_left_176(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_22(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function copy_struct_to_storage_from_struct_Listing_to_struct_Listing(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 0)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint8(memberSrcPtr_1)\n                update_storage_value_offset_uint8_to_uint8(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 0)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_uint8(memberSrcPtr_2)\n                update_storage_value_offset_t_uint8_to_t_uint8(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 0)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_bool(memberSrcPtr_3)\n                update_storage_value_offset_bool_to_bool(memberSlot_3, memberValue_3)\n            }\n            function update_storage_value_struct_Listing_to_struct_Listing(slot, offset, value)\n            {\n                if offset { panic_error_0x00() }\n                copy_struct_to_storage_from_struct_Listing_to_struct_Listing(slot, value)\n            }\n            function array_push_from_struct_Listing_to_array_struct_Listing_storage_dyn_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_struct_Listing__dyn_ptr(array, oldLen)\n                update_storage_value_struct_Listing_to_struct_Listing(slot, offset, value0)\n            }\n            /// @ast-id 118 @src 0:1059:1477  \"function createListing(uint8 offerCardId, uint8 requestCardId) external {...\"\n            function fun_createListing(var_offerCardId, var_requestCardId)\n            {\n                /// @src 0:1150:1161  \"offerCardId\"\n                let _1 := var_offerCardId\n                let expr := _1\n                /// @src 0:1164:1166  \"17\"\n                let expr_1 := 0x11\n                /// @src 0:1150:1166  \"offerCardId < 17\"\n                let expr_2 := lt(cleanup_uint8(expr), convert_rational_by_to_uint8(expr_1))\n                /// @src 0:1150:1188  \"offerCardId < 17 && requestCardId < 17\"\n                let expr_3 := expr_2\n                if expr_3\n                {\n                    /// @src 0:1170:1183  \"requestCardId\"\n                    let _2 := var_requestCardId\n                    let expr_4 := _2\n                    /// @src 0:1186:1188  \"17\"\n                    let expr_5 := 0x11\n                    /// @src 0:1170:1188  \"requestCardId < 17\"\n                    let expr_6 := lt(cleanup_uint8(expr_4), convert_rational_by_to_uint8(expr_5))\n                    /// @src 0:1150:1188  \"offerCardId < 17 && requestCardId < 17\"\n                    expr_3 := expr_6\n                }\n                /// @src 0:1142:1203  \"require(offerCardId < 17 && requestCardId < 17, \\\"Invalid ID\\\")\"\n                require_helper_stringliteral_87f3(expr_3)\n                /// @src 0:1222:1231  \"inventory\"\n                let _3_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_95_address := _3_address\n                /// @src 0:1222:1239  \"inventory.hasCard\"\n                let expr_96_address := convert_contract_IInventoryManager_to_address(expr_95_address)\n                let expr_functionSelector := 0x4dca8ce6\n                /// @src 0:1240:1250  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 0:1252:1263  \"offerCardId\"\n                let _3 := var_offerCardId\n                let expr_8 := _3\n                /// @src 0:1265:1266  \"1\"\n                let expr_9 := 0x01\n                /// @src 0:1222:1267  \"inventory.hasCard(msg.sender, offerCardId, 1)\"\n                let _4 := allocate_unbounded()\n                mstore(_4, shift_left_224(expr_functionSelector))\n                let _5 := abi_encode_address_uint8_rational_by(add(_4, 4), expr_7, expr_8, expr_9)\n                let _6 := staticcall(gas(), expr_96_address, _4, sub(_5, _4), _4, 32)\n                if iszero(_6) { revert_forward() }\n                let expr_10\n                if _6\n                {\n                    let _7 := 32\n                    if gt(_7, returndatasize()) { _7 := returndatasize() }\n                    finalize_allocation(_4, _7)\n                    expr_10 := abi_decode_bool_fromMemory(_4, add(_4, _7))\n                }\n                /// @src 0:1214:1279  \"require(inventory.hasCard(msg.sender, offerCardId, 1), \\\"No card\\\")\"\n                require_helper_stringliteral_ec62(expr_10)\n                /// @src 0:1292:1300  \"listings\"\n                let _9_slot := 0x00\n                let expr_105_slot := _9_slot\n                /// @src 0:1292:1305  \"listings.push\"\n                let expr_self_slot := convert_array_array_struct_Listing_storage_dyn_storage_to_array_struct_Listing__dyn_ptr(expr_105_slot)\n                /// @src 0:1337:1347  \"msg.sender\"\n                let expr_11 := caller()\n                /// @src 0:1375:1386  \"offerCardId\"\n                let _8 := var_offerCardId\n                let expr_12 := _8\n                /// @src 0:1416:1429  \"requestCardId\"\n                let _9 := var_requestCardId\n                let expr_13 := _9\n                /// @src 0:1452:1456  \"true\"\n                let expr_14 := 0x01\n                /// @src 0:1306:1468  \"Listing({...\"\n                let expr_mpos := allocate_memory_struct_struct_Listing_storage_ptr()\n                write_to_memory_address(add(expr_mpos, 0), expr_11)\n                write_to_memory_uint8(add(expr_mpos, 32), expr_12)\n                write_to_memory_uint8(add(expr_mpos, 64), expr_13)\n                write_to_memory_bool(add(expr_mpos, 96), expr_14)\n                /// @src 0:1292:1469  \"listings.push(Listing({...\"\n                array_push_from_struct_Listing_to_array_struct_Listing_storage_dyn_ptr(expr_self_slot, expr_mpos)\n            }\n            /// @src 0:340:2199  \"contract CardTrading {...\"\n            function zero_value_for_split_array_struct_Listing_dyn() -> ret\n            { ret := 96 }\n            function array_allocation_size_array_struct_Listing_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_array_struct_Listing_dyn(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_struct_Listing_dyn(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function allocate_memory_struct_struct_Listing() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function read_from_storage_reference_type_struct_Listing(slot) -> value\n            {\n                value := allocate_memory_struct_struct_Listing()\n                let memberValue := read_from_storage_split_offset_address(add(slot, 0))\n                write_to_memory_address(add(value, 0), memberValue)\n                let memberValue_1 := read_from_storage_split_offset_t_uint8(add(slot, 0))\n                write_to_memory_uint8(add(value, 32), memberValue_1)\n                let memberValue_2 := read_from_storage_split_offset_uint8(add(slot, 0))\n                write_to_memory_uint8(add(value, 64), memberValue_2)\n                let memberValue_3 := read_from_storage_split_offset_bool(add(slot, 0))\n                write_to_memory_bool(add(value, 96), memberValue_3)\n            }\n            function convert_struct_Listing_storage_to_struct_Listing(value) -> converted\n            {\n                converted := read_from_storage_reference_type_struct_Listing(value)\n            }\n            function copy_array_from_storage_to_memory_array_struct_Listing__dyn(slot) -> memPtr\n            {\n                let length := array_length_array_struct_Listing_storage_dyn(slot)\n                memPtr := allocate_memory_array_array_struct_Listing_dyn(length)\n                let mpos := memPtr\n                mpos := add(mpos, 0x20)\n                let spos := array_dataslot_array_struct_Listing_storage_dyn(slot)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, convert_struct_Listing_storage_to_struct_Listing(spos))\n                    mpos := add(mpos, 0x20)\n                    spos := add(spos, 1)\n                }\n            }\n            function convert_array_array_struct_Listing_storage_dyn_to_array_struct_Listing_dyn(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_struct_Listing__dyn(value)\n            }\n            /// @ast-id 206 @src 0:2095:2196  \"function getAllListings() external view returns (Listing[] memory) {...\"\n            function fun_getAllListings() -> var_mpos\n            {\n                /// @src 0:2144:2160  \"Listing[] memory\"\n                let zero_array_struct_Listing_dyn_mpos := zero_value_for_split_array_struct_Listing_dyn()\n                var_mpos := zero_array_struct_Listing_dyn_mpos\n                /// @src 0:2180:2188  \"listings\"\n                let _13_slot := 0x00\n                let expr_203_slot := _13_slot\n                /// @src 0:2173:2188  \"return listings\"\n                var_mpos := convert_array_array_struct_Listing_storage_dyn_to_array_struct_Listing_dyn(expr_203_slot)\n                leave\n            }\n            /// @src 0:340:2199  \"contract CardTrading {...\"\n            function convert_struct_Listing_storage_to_struct_Listing_ptr(value) -> converted\n            { converted := value }\n            function store_literal_in_memory_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Inactive\")\n            }\n            function abi_encode_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 8)\n                store_literal_in_memory_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_8ab6(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(tail)\n            }\n            function require_helper_stringliteral_8ab6(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8ab6(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Own listing\")\n            }\n            function abi_encode_stringliteral_5a8b(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 11)\n                store_literal_in_memory_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_5a8b(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_5a8b(tail)\n            }\n            function require_helper_stringliteral_5a8b(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_5a8b(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function abi_decode_fromMemory(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function abi_encode_address_address_uint8_rational_by(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_address(value1, add(headStart, 32))\n                abi_encode_uint8(value2, add(headStart, 64))\n                abi_encode_rational_by(value3, add(headStart, 96))\n            }\n            /// @ast-id 196 @src 0:1485:2087  \"function acceptListing(uint listingId) external {...\"\n            function fun_acceptListing(var_listingId)\n            {\n                /// @src 0:1552:1561  \"listingId\"\n                let _1 := var_listingId\n                let expr := _1\n                /// @src 0:1564:1572  \"listings\"\n                let _15_slot := 0x00\n                let expr_125_slot := _15_slot\n                /// @src 0:1564:1579  \"listings.length\"\n                let expr_1 := array_length_array_struct_Listing_storage_dyn(expr_125_slot)\n                /// @src 0:1552:1579  \"listingId < listings.length\"\n                let expr_2 := lt(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 0:1544:1594  \"require(listingId < listings.length, \\\"Invalid ID\\\")\"\n                require_helper_stringliteral_87f3(expr_2)\n                /// @src 0:1631:1639  \"listings\"\n                let _16_slot := 0x00\n                let expr_134_slot := _16_slot\n                /// @src 0:1640:1649  \"listingId\"\n                let _2 := var_listingId\n                let expr_3 := _2\n                /// @src 0:1631:1650  \"listings[listingId]\"\n                let _3, _4 := storage_array_index_access_struct_Listing__dyn(expr_134_slot, expr_3)\n                let _20_slot := _3\n                let expr_slot := _20_slot\n                /// @src 0:1605:1650  \"Listing storage listing = listings[listingId]\"\n                let var_listing_slot := convert_struct_Listing_storage_to_struct_Listing_ptr(expr_slot)\n                /// @src 0:1669:1676  \"listing\"\n                let _21_slot := var_listing_slot\n                let expr_139_slot := _21_slot\n                /// @src 0:1669:1683  \"listing.active\"\n                let _5 := add(expr_139_slot, 0)\n                let _6 := read_from_storage_split_offset_bool(_5)\n                let expr_4 := _6\n                /// @src 0:1661:1696  \"require(listing.active, \\\"Inactive\\\")\"\n                require_helper_stringliteral_8ab6(expr_4)\n                /// @src 0:1715:1725  \"msg.sender\"\n                let expr_5 := caller()\n                /// @src 0:1729:1736  \"listing\"\n                let _24_slot := var_listing_slot\n                let expr_147_slot := _24_slot\n                /// @src 0:1729:1743  \"listing.seller\"\n                let _7 := add(expr_147_slot, 0)\n                let _8 := read_from_storage_split_offset_address(_7)\n                let expr_6 := _8\n                /// @src 0:1715:1743  \"msg.sender != listing.seller\"\n                let expr_7 := iszero(eq(cleanup_address(expr_5), cleanup_address(expr_6)))\n                /// @src 0:1707:1759  \"require(msg.sender != listing.seller, \\\"Own listing\\\")\"\n                require_helper_stringliteral_5a8b(expr_7)\n                /// @src 0:1778:1787  \"inventory\"\n                let _27_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_154_address := _27_address\n                /// @src 0:1778:1795  \"inventory.hasCard\"\n                let expr_155_address := convert_contract_IInventoryManager_to_address(expr_154_address)\n                let expr_155_functionSelector := 0x4dca8ce6\n                /// @src 0:1796:1806  \"msg.sender\"\n                let expr_8 := caller()\n                /// @src 0:1808:1815  \"listing\"\n                let _28_slot := var_listing_slot\n                let expr_158_slot := _28_slot\n                /// @src 0:1808:1829  \"listing.requestCardId\"\n                let _9 := add(expr_158_slot, 0)\n                let _10 := read_from_storage_split_offset_uint8(_9)\n                let expr_9 := _10\n                /// @src 0:1831:1832  \"1\"\n                let expr_10 := 0x01\n                /// @src 0:1778:1833  \"inventory.hasCard(msg.sender, listing.requestCardId, 1)\"\n                let _11 := allocate_unbounded()\n                mstore(_11, shift_left_224(expr_155_functionSelector))\n                let _12 := abi_encode_address_uint8_rational_by(add(_11, 4), expr_8, expr_9, expr_10)\n                let _13 := staticcall(gas(), expr_155_address, _11, sub(_12, _11), _11, 32)\n                if iszero(_13) { revert_forward() }\n                let expr_11\n                if _13\n                {\n                    let _14 := 32\n                    if gt(_14, returndatasize()) { _14 := returndatasize() }\n                    finalize_allocation(_11, _14)\n                    expr_11 := abi_decode_bool_fromMemory(_11, add(_11, _14))\n                }\n                /// @src 0:1770:1845  \"require(inventory.hasCard(msg.sender, listing.requestCardId, 1), \\\"No card\\\")\"\n                require_helper_stringliteral_ec62(expr_11)\n                /// @src 0:1881:1890  \"inventory\"\n                let _35_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_address := _35_address\n                /// @src 0:1881:1904  \"inventory.transferCards\"\n                let expr_167_address := convert_contract_IInventoryManager_to_address(expr_address)\n                let expr_167_functionSelector := 0x65352442\n                /// @src 0:1905:1915  \"msg.sender\"\n                let expr_12 := caller()\n                /// @src 0:1917:1924  \"listing\"\n                let _36_slot := var_listing_slot\n                let expr_170_slot := _36_slot\n                /// @src 0:1917:1931  \"listing.seller\"\n                let _15 := add(expr_170_slot, 0)\n                let _16 := read_from_storage_split_offset_address(_15)\n                let expr_13 := _16\n                /// @src 0:1933:1940  \"listing\"\n                let _39_slot := var_listing_slot\n                let expr_172_slot := _39_slot\n                /// @src 0:1933:1954  \"listing.requestCardId\"\n                let _17 := add(expr_172_slot, 0)\n                let _18 := read_from_storage_split_offset_uint8(_17)\n                let expr_14 := _18\n                /// @src 0:1956:1957  \"1\"\n                let expr_15 := 0x01\n                /// @src 0:1881:1958  \"inventory.transferCards(msg.sender, listing.seller, listing.requestCardId, 1)\"\n                if iszero(extcodesize(expr_167_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _19 := allocate_unbounded()\n                mstore(_19, shift_left_224(expr_167_functionSelector))\n                let _20 := abi_encode_address_address_uint8_rational_by(add(_19, 4), expr_12, expr_13, expr_14, expr_15)\n                let _21 := call(gas(), expr_167_address, 0, _19, sub(_20, _19), _19, 0)\n                if iszero(_21) { revert_forward() }\n                if _21\n                {\n                    let _22 := 0\n                    if gt(_22, returndatasize()) { _22 := returndatasize() }\n                    finalize_allocation(_19, _22)\n                    abi_decode_fromMemory(_19, add(_19, _22))\n                }\n                /// @src 0:1969:1978  \"inventory\"\n                let _address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_177_address := _address\n                /// @src 0:1969:1992  \"inventory.transferCards\"\n                let expr_179_address := convert_contract_IInventoryManager_to_address(expr_177_address)\n                let expr_179_functionSelector := 0x65352442\n                /// @src 0:1993:2000  \"listing\"\n                let _47_slot := var_listing_slot\n                let expr_180_slot := _47_slot\n                /// @src 0:1993:2007  \"listing.seller\"\n                let _23 := add(expr_180_slot, 0)\n                let _24 := read_from_storage_split_offset_address(_23)\n                let expr_16 := _24\n                /// @src 0:2009:2019  \"msg.sender\"\n                let expr_17 := caller()\n                /// @src 0:2021:2028  \"listing\"\n                let _50_slot := var_listing_slot\n                let expr_184_slot := _50_slot\n                /// @src 0:2021:2040  \"listing.offerCardId\"\n                let _25 := add(expr_184_slot, 0)\n                let _26 := read_from_storage_split_offset_t_uint8(_25)\n                let expr_18 := _26\n                /// @src 0:2042:2043  \"1\"\n                let expr_19 := 0x01\n                /// @src 0:1969:2044  \"inventory.transferCards(listing.seller, msg.sender, listing.offerCardId, 1)\"\n                if iszero(extcodesize(expr_179_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _27 := allocate_unbounded()\n                mstore(_27, shift_left_224(expr_179_functionSelector))\n                let _28 := abi_encode_address_address_uint8_rational_by(add(_27, 4), expr_16, expr_17, expr_18, expr_19)\n                let _29 := call(gas(), expr_179_address, 0, _27, sub(_28, _27), _27, 0)\n                if iszero(_29) { revert_forward() }\n                if _29\n                {\n                    let _30 := 0\n                    if gt(_30, returndatasize()) { _30 := returndatasize() }\n                    finalize_allocation(_27, _30)\n                    abi_decode_fromMemory(_27, add(_27, _30))\n                }\n                /// @src 0:2074:2079  \"false\"\n                let expr_20 := 0x00\n                /// @src 0:2057:2064  \"listing\"\n                let _slot := var_listing_slot\n                let expr_189_slot := _slot\n                /// @src 0:2057:2071  \"listing.active\"\n                let _31 := add(expr_189_slot, 0)\n                /// @src 0:2057:2079  \"listing.active = false\"\n                update_storage_value_offset_bool_to_bool(_31, expr_20)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122015525b1987d6e35e723564c0b6aa685825daf0efcaba68a4908adbaedf300f2364736f6c634300081c0033\"\n    }\n}\n",
					"hash": "91508692270d89ed75e4ceb229e68aeef5f4d3babc122d7c91a24db58cd04af1",
					"factoryDependencies": {}
				},
				"IInventoryManager": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "hasCard",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								}
							],
							"name": "setTradingContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferCards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hasCard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTradingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CardTrading.sol\":\"IInventoryManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"CardTrading.sol\":{\"keccak256\":\"0x6dbd80fbe747ec484237e8a7a052e57fa9d776b000c64188c007c531f24f4b23\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://125991e81bafb04d65fe3ecc8b5842429b4ef62c9675027ec547d7f7b070c798\",\"dweb:/ipfs/QmczAG6Je1sdeSzrEHWKK3CxGVTT6qAoU2VsjFjKhrtYDL\"]}},\"version\":1}",
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"evm": {
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"hasCard(address,uint256,uint256)": "4dca8ce6",
							"setTradingContract(address)": "5be6f2c7",
							"transferCards(address,address,uint256,uint256)": "65352442"
						}
					},
					"irOptimized": ""
				}
			}
		},
		"sources": {
			"CardTrading.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "CardTrading.sol",
					"exportedSymbols": {
						"CardTrading": [
							207
						],
						"IInventoryManager": [
							29
						]
					},
					"id": 208,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IInventoryManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 29,
							"linearizedBaseContracts": [
								29
							],
							"name": "IInventoryManager",
							"nameLocation": "70:17:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "65352442",
									"id": 12,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferCards",
									"nameLocation": "104:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "126:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "118:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "118:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "140:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "132:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "132:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "149:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "144:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "144:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "162:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "157:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "157:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "117:52:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "178:0:0"
									},
									"scope": 29,
									"src": "95:84:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4dca8ce6",
									"id": 23,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasCard",
									"nameLocation": "194:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "210:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "202:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "202:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "221:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "216:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 15,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "216:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "234:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "229:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "229:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "201:40:0"
									},
									"returnParameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "265:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 20,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "265:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "264:6:0"
									},
									"scope": 29,
									"src": "185:86:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "5be6f2c7",
									"id": 28,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTradingContract",
									"nameLocation": "286:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "313:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "305:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 24,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "305:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "304:19:0"
									},
									"returnParameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "332:0:0"
									},
									"scope": 29,
									"src": "277:56:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 208,
							"src": "60:276:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CardTrading",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 207,
							"linearizedBaseContracts": [
								207
							],
							"name": "CardTrading",
							"nameLocation": "349:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "CardTrading.Listing",
									"id": 38,
									"members": [
										{
											"constant": false,
											"id": 31,
											"mutability": "mutable",
											"name": "seller",
											"nameLocation": "402:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 38,
											"src": "394:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 30,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "394:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 33,
											"mutability": "mutable",
											"name": "offerCardId",
											"nameLocation": "425:11:0",
											"nodeType": "VariableDeclaration",
											"scope": 38,
											"src": "419:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 32,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "419:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 35,
											"mutability": "mutable",
											"name": "requestCardId",
											"nameLocation": "453:13:0",
											"nodeType": "VariableDeclaration",
											"scope": 38,
											"src": "447:19:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 34,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "447:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 37,
											"mutability": "mutable",
											"name": "active",
											"nameLocation": "482:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 38,
											"src": "477:11:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 36,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "477:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Listing",
									"nameLocation": "375:7:0",
									"nodeType": "StructDefinition",
									"scope": 207,
									"src": "368:128:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "de74e57b",
									"id": 42,
									"mutability": "mutable",
									"name": "listings",
									"nameLocation": "521:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 207,
									"src": "504:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
										"typeString": "struct CardTrading.Listing[]"
									},
									"typeName": {
										"baseType": {
											"id": 40,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 39,
												"name": "Listing",
												"nameLocations": [
													"504:7:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "504:7:0"
											},
											"referencedDeclaration": 38,
											"src": "504:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
												"typeString": "struct CardTrading.Listing"
											}
										},
										"id": 41,
										"nodeType": "ArrayTypeName",
										"src": "504:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage_ptr",
											"typeString": "struct CardTrading.Listing[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "15d52a5c",
									"id": 45,
									"mutability": "mutable",
									"name": "inventory",
									"nameLocation": "561:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 207,
									"src": "536:34:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IInventoryManager_$29",
										"typeString": "contract IInventoryManager"
									},
									"typeName": {
										"id": 44,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 43,
											"name": "IInventoryManager",
											"nameLocations": [
												"536:17:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 29,
											"src": "536:17:0"
										},
										"referencedDeclaration": 29,
										"src": "536:17:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IInventoryManager_$29",
											"typeString": "contract IInventoryManager"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 47,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "592:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 207,
									"src": "577:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 46,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "577:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 75,
										"nodeType": "Block",
										"src": "644:407:0",
										"statements": [
											{
												"expression": {
													"id": 56,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 52,
														"name": "inventory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 45,
														"src": "655:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IInventoryManager_$29",
															"typeString": "contract IInventoryManager"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 54,
																"name": "inventoryAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 49,
																"src": "685:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 53,
															"name": "IInventoryManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "667:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IInventoryManager_$29_$",
																"typeString": "type(contract IInventoryManager)"
															}
														},
														"id": 55,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "667:35:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IInventoryManager_$29",
															"typeString": "contract IInventoryManager"
														}
													},
													"src": "655:47:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IInventoryManager_$29",
														"typeString": "contract IInventoryManager"
													}
												},
												"id": 57,
												"nodeType": "ExpressionStatement",
												"src": "655:47:0"
											},
											{
												"expression": {
													"id": 61,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 58,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 47,
														"src": "713:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 59,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "721:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 60,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "725:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "721:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "713:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 62,
												"nodeType": "ExpressionStatement",
												"src": "713:18:0"
											},
											{
												"clauses": [
													{
														"block": {
															"id": 70,
															"nodeType": "Block",
															"src": "871:83:0",
															"statements": []
														},
														"errorName": "",
														"id": 71,
														"nodeType": "TryCatchClause",
														"src": "871:83:0"
													},
													{
														"block": {
															"id": 72,
															"nodeType": "Block",
															"src": "961:83:0",
															"statements": []
														},
														"errorName": "",
														"id": 73,
														"nodeType": "TryCatchClause",
														"src": "955:89:0"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 67,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "864:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_CardTrading_$207",
																		"typeString": "contract CardTrading"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_CardTrading_$207",
																		"typeString": "contract CardTrading"
																	}
																],
																"id": 66,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "856:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 65,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "856:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 68,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "856:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 63,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "827:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInventoryManager_$29",
																"typeString": "contract IInventoryManager"
															}
														},
														"id": 64,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "837:18:0",
														"memberName": "setTradingContract",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 28,
														"src": "827:28:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address) external"
														}
													},
													"id": 69,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "827:43:0",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 74,
												"nodeType": "TryStatement",
												"src": "823:221:0"
											}
										]
									},
									"id": 76,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "inventoryAddress",
												"nameLocation": "626:16:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "618:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "618:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "617:26:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "644:0:0"
									},
									"scope": 207,
									"src": "606:445:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 117,
										"nodeType": "Block",
										"src": "1131:346:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 90,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 86,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 84,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 78,
																	"src": "1150:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "3137",
																	"id": 85,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1164:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_17_by_1",
																		"typeString": "int_const 17"
																	},
																	"value": "17"
																},
																"src": "1150:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 89,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 87,
																	"name": "requestCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 80,
																	"src": "1170:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "3137",
																	"id": 88,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1186:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_17_by_1",
																		"typeString": "int_const 17"
																	},
																	"value": "17"
																},
																"src": "1170:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1150:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c6964204944",
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1190:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															},
															"value": "Invalid ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															}
														],
														"id": 83,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1142:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 92,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1142:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 93,
												"nodeType": "ExpressionStatement",
												"src": "1142:61:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 97,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1240:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 98,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1244:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1240:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 99,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 78,
																	"src": "1252:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"hexValue": "31",
																	"id": 100,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1265:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	}
																],
																"expression": {
																	"id": 95,
																	"name": "inventory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 45,
																	"src": "1222:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IInventoryManager_$29",
																		"typeString": "contract IInventoryManager"
																	}
																},
																"id": 96,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1232:7:0",
																"memberName": "hasCard",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 23,
																"src": "1222:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,uint256) view external returns (bool)"
																}
															},
															"id": 101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1222:45:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2063617264",
															"id": 102,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1269:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															},
															"value": "No card"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															}
														],
														"id": 94,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1214:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1214:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "1214:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 109,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1337:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 110,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1341:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1337:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 111,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 78,
																	"src": "1375:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 112,
																	"name": "requestCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 80,
																	"src": "1416:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"hexValue": "74727565",
																	"id": 113,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1452:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 108,
																"name": "Listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 38,
																"src": "1306:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_struct$_Listing_$38_storage_ptr_$",
																	"typeString": "type(struct CardTrading.Listing storage pointer)"
																}
															},
															"id": 114,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "structConstructorCall",
															"lValueRequested": false,
															"nameLocations": [
																"1329:6:0",
																"1362:11:0",
																"1401:13:0",
																"1444:6:0"
															],
															"names": [
																"seller",
																"offerCardId",
																"requestCardId",
																"active"
															],
															"nodeType": "FunctionCall",
															"src": "1306:162:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$38_memory_ptr",
																"typeString": "struct CardTrading.Listing memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Listing_$38_memory_ptr",
																"typeString": "struct CardTrading.Listing memory"
															}
														],
														"expression": {
															"id": 105,
															"name": "listings",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 42,
															"src": "1292:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
																"typeString": "struct CardTrading.Listing storage ref[] storage ref"
															}
														},
														"id": 107,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1301:4:0",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "1292:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Listing_$38_storage_$dyn_storage_ptr_$_t_struct$_Listing_$38_storage_$returns$__$attached_to$_t_array$_t_struct$_Listing_$38_storage_$dyn_storage_ptr_$",
															"typeString": "function (struct CardTrading.Listing storage ref[] storage pointer,struct CardTrading.Listing storage ref)"
														}
													},
													"id": 115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1292:177:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 116,
												"nodeType": "ExpressionStatement",
												"src": "1292:177:0"
											}
										]
									},
									"functionSelector": "15a6f5cf",
									"id": 118,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createListing",
									"nameLocation": "1068:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "offerCardId",
												"nameLocation": "1088:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "1082:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 77,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1082:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "requestCardId",
												"nameLocation": "1107:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "1101:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 79,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1101:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:40:0"
									},
									"returnParameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1131:0:0"
									},
									"scope": 207,
									"src": "1059:418:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 195,
										"nodeType": "Block",
										"src": "1533:554:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 127,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 124,
																"name": "listingId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 120,
																"src": "1552:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 125,
																	"name": "listings",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 42,
																	"src": "1564:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
																		"typeString": "struct CardTrading.Listing storage ref[] storage ref"
																	}
																},
																"id": 126,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1573:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "1564:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1552:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c6964204944",
															"id": 128,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1581:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															},
															"value": "Invalid ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															}
														],
														"id": 123,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1544:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1544:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 130,
												"nodeType": "ExpressionStatement",
												"src": "1544:50:0"
											},
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "listing",
														"nameLocation": "1621:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 195,
														"src": "1605:23:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
															"typeString": "struct CardTrading.Listing"
														},
														"typeName": {
															"id": 132,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 131,
																"name": "Listing",
																"nameLocations": [
																	"1605:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 38,
																"src": "1605:7:0"
															},
															"referencedDeclaration": 38,
															"src": "1605:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																"typeString": "struct CardTrading.Listing"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 137,
												"initialValue": {
													"baseExpression": {
														"id": 134,
														"name": "listings",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 42,
														"src": "1631:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
															"typeString": "struct CardTrading.Listing storage ref[] storage ref"
														}
													},
													"id": 136,
													"indexExpression": {
														"id": 135,
														"name": "listingId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "1640:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1631:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Listing_$38_storage",
														"typeString": "struct CardTrading.Listing storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1605:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 139,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "1669:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 140,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1677:6:0",
															"memberName": "active",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 37,
															"src": "1669:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e616374697665",
															"id": 141,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1685:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646",
																"typeString": "literal_string \"Inactive\""
															},
															"value": "Inactive"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646",
																"typeString": "literal_string \"Inactive\""
															}
														],
														"id": 138,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1661:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1661:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 143,
												"nodeType": "ExpressionStatement",
												"src": "1661:35:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 145,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1715:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 146,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1719:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1715:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 147,
																	"name": "listing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "1729:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																		"typeString": "struct CardTrading.Listing storage pointer"
																	}
																},
																"id": 148,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1737:6:0",
																"memberName": "seller",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 31,
																"src": "1729:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1715:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e206c697374696e67",
															"id": 150,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1745:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226",
																"typeString": "literal_string \"Own listing\""
															},
															"value": "Own listing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226",
																"typeString": "literal_string \"Own listing\""
															}
														],
														"id": 144,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1707:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1707:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 152,
												"nodeType": "ExpressionStatement",
												"src": "1707:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 156,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1796:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1800:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1796:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"expression": {
																		"id": 158,
																		"name": "listing",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 133,
																		"src": "1808:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																			"typeString": "struct CardTrading.Listing storage pointer"
																		}
																	},
																	"id": 159,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1816:13:0",
																	"memberName": "requestCardId",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 35,
																	"src": "1808:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"hexValue": "31",
																	"id": 160,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1831:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	}
																],
																"expression": {
																	"id": 154,
																	"name": "inventory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 45,
																	"src": "1778:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IInventoryManager_$29",
																		"typeString": "contract IInventoryManager"
																	}
																},
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1788:7:0",
																"memberName": "hasCard",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 23,
																"src": "1778:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,uint256) view external returns (bool)"
																}
															},
															"id": 161,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1778:55:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2063617264",
															"id": 162,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1835:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															},
															"value": "No card"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															}
														],
														"id": 153,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1770:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1770:75:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 164,
												"nodeType": "ExpressionStatement",
												"src": "1770:75:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 168,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1905:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1909:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1905:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 170,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "1917:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 171,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1925:6:0",
															"memberName": "seller",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 31,
															"src": "1917:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 172,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "1933:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 173,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1941:13:0",
															"memberName": "requestCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 35,
															"src": "1933:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"hexValue": "31",
															"id": 174,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"expression": {
															"id": 165,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "1881:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInventoryManager_$29",
																"typeString": "contract IInventoryManager"
															}
														},
														"id": 167,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1891:13:0",
														"memberName": "transferCards",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 12,
														"src": "1881:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256) external"
														}
													},
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1881:77:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 176,
												"nodeType": "ExpressionStatement",
												"src": "1881:77:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 180,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "1993:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 181,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2001:6:0",
															"memberName": "seller",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 31,
															"src": "1993:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 182,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2009:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 183,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2013:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2009:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 184,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "2021:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 185,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2029:11:0",
															"memberName": "offerCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 33,
															"src": "2021:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"hexValue": "31",
															"id": 186,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2042:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"expression": {
															"id": 177,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "1969:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInventoryManager_$29",
																"typeString": "contract IInventoryManager"
															}
														},
														"id": 179,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1979:13:0",
														"memberName": "transferCards",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 12,
														"src": "1969:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256) external"
														}
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1969:75:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 188,
												"nodeType": "ExpressionStatement",
												"src": "1969:75:0"
											},
											{
												"expression": {
													"id": 193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 189,
															"name": "listing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "2057:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
																"typeString": "struct CardTrading.Listing storage pointer"
															}
														},
														"id": 191,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2065:6:0",
														"memberName": "active",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 37,
														"src": "2057:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 192,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2074:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2057:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 194,
												"nodeType": "ExpressionStatement",
												"src": "2057:22:0"
											}
										]
									},
									"functionSelector": "b0eceb7e",
									"id": 196,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "acceptListing",
									"nameLocation": "1494:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "listingId",
												"nameLocation": "1513:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 196,
												"src": "1508:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 119,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1508:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1507:16:0"
									},
									"returnParameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1533:0:0"
									},
									"scope": 207,
									"src": "1485:602:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 205,
										"nodeType": "Block",
										"src": "2162:34:0",
										"statements": [
											{
												"expression": {
													"id": 203,
													"name": "listings",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 42,
													"src": "2180:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage",
														"typeString": "struct CardTrading.Listing storage ref[] storage ref"
													}
												},
												"functionReturnParameters": 202,
												"id": 204,
												"nodeType": "Return",
												"src": "2173:15:0"
											}
										]
									},
									"functionSelector": "ae73ccec",
									"id": 206,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAllListings",
									"nameLocation": "2104:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2118:2:0"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "2144:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Listing_$38_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct CardTrading.Listing[]"
												},
												"typeName": {
													"baseType": {
														"id": 199,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 198,
															"name": "Listing",
															"nameLocations": [
																"2144:7:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 38,
															"src": "2144:7:0"
														},
														"referencedDeclaration": 38,
														"src": "2144:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Listing_$38_storage_ptr",
															"typeString": "struct CardTrading.Listing"
														}
													},
													"id": 200,
													"nodeType": "ArrayTypeName",
													"src": "2144:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Listing_$38_storage_$dyn_storage_ptr",
														"typeString": "struct CardTrading.Listing[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2143:18:0"
									},
									"scope": 207,
									"src": "2095:101:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 208,
							"src": "340:1859:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:2168:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}