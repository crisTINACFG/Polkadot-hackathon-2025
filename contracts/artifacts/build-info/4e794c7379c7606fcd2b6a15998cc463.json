{
	"id": "4e794c7379c7606fcd2b6a15998cc463",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"CardTrading.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IInventoryManager {\r\n    function addCard(address to, uint cardId) external;\r\n    function transferCards(address from, address to, uint cardId, uint amount) external;\r\n    function hasCard(address user, uint cardId, uint amount) external view returns (bool);\r\n}\r\n\r\ncontract CardTrading {\r\n    struct Listing {\r\n        address seller;\r\n        uint offerCardId;\r\n        uint requestCardId;\r\n        bool active;\r\n    }\r\n\r\n    Listing[] public listings;\r\n\r\n    IInventoryManager public inventory;\r\n\r\n    constructor(address inventoryAddress) {\r\n        inventory = IInventoryManager(inventoryAddress);\r\n    }\r\n\r\n    function createListing(uint offerCardId, uint requestCardId) external {\r\n        require(offerCardId < 9 && requestCardId < 9, \"Invalid card ID\");\r\n        require(inventory.hasCard(msg.sender, offerCardId, 1), \"You don't have the offered card\");\r\n\r\n        listings.push(Listing({\r\n            seller: msg.sender,\r\n            offerCardId: offerCardId,\r\n            requestCardId: requestCardId,\r\n            active: true\r\n        }));\r\n    }\r\n\r\n    function acceptListing(uint listingId) external {\r\n        require(listingId < listings.length, \"Invalid listing ID\");\r\n        Listing storage listing = listings[listingId];\r\n        require(listing.active, \"Listing inactive\");\r\n        require(msg.sender != listing.seller, \"Can't accept your own listing\");\r\n\r\n        require(inventory.hasCard(msg.sender, listing.requestCardId, 1), \"You don't have the requested card\");\r\n\r\n        // Swap cards\r\n        inventory.transferCards(msg.sender, listing.seller, listing.requestCardId, 1);\r\n        inventory.transferCards(listing.seller, msg.sender, listing.offerCardId, 1);\r\n\r\n        listing.active = false;\r\n    }\r\n\r\n    function getAllListings() external view returns (Listing[] memory) {\r\n        return listings;\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"CardTrading.sol": {
				"CardTrading": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "inventoryAddress",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "listingId",
									"type": "uint256"
								}
							],
							"name": "acceptListing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "offerCardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestCardId",
									"type": "uint256"
								}
							],
							"name": "createListing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllListings",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "seller",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "offerCardId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "requestCardId",
											"type": "uint256"
										},
										{
											"internalType": "bool",
											"name": "active",
											"type": "bool"
										}
									],
									"internalType": "struct CardTrading.Listing[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "inventory",
							"outputs": [
								{
									"internalType": "contract IInventoryManager",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "listings",
							"outputs": [
								{
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "offerCardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestCardId",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inventoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"acceptListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestCardId\",\"type\":\"uint256\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllListings\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestCardId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct CardTrading.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"contract IInventoryManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestCardId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CardTrading.sol\":\"CardTrading\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"CardTrading.sol\":{\"keccak256\":\"0x946b78733ad545939303cf108ef80a070316dffa98a519150fa17c3802ec9ee0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fdbb3194e0551eb1c3a9b0aa8f38f55c292d48581e7a11677f69427317396a6\",\"dweb:/ipfs/QmTzbc6rcWV5TJGy5Ka5nFrSGRroL4RN9B2aUDh2heRPdc\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 44,
								"contract": "CardTrading.sol:CardTrading",
								"label": "listings",
								"offset": 0,
								"slot": "0",
								"type": "t_array(t_struct(Listing)40_storage)dyn_storage"
							},
							{
								"astId": 47,
								"contract": "CardTrading.sol:CardTrading",
								"label": "inventory",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IInventoryManager)31"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_struct(Listing)40_storage)dyn_storage": {
								"base": "t_struct(Listing)40_storage",
								"encoding": "dynamic_array",
								"label": "struct CardTrading.Listing[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IInventoryManager)31": {
								"encoding": "inplace",
								"label": "contract IInventoryManager",
								"numberOfBytes": "20"
							},
							"t_struct(Listing)40_storage": {
								"encoding": "inplace",
								"label": "struct CardTrading.Listing",
								"members": [
									{
										"astId": 33,
										"contract": "CardTrading.sol:CardTrading",
										"label": "seller",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 35,
										"contract": "CardTrading.sol:CardTrading",
										"label": "offerCardId",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 37,
										"contract": "CardTrading.sol:CardTrading",
										"label": "requestCardId",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 39,
										"contract": "CardTrading.sol:CardTrading",
										"label": "active",
										"offset": 0,
										"slot": "3",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "128"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 11997\n// Code size = 37685 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 3 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @29\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffff20\n   342: u64 [sp + 0xd8] = ra\n   346: u64 [sp + 0xd0] = s0\n   350: u64 [sp + 0xc8] = s1\n   354: s0 = sp + 0xe0\n   358: sp = sp & 0xffffffffffffffe0\n   361: a0 = 0x40\n   364: a1 = 0x20\n   367: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   372: u8 [a0 + 31] = 0x80\n   377: u8 [a0 + 30] = 0\n   380: u8 [a0 + 29] = 0\n   383: u8 [a0 + 28] = 0\n   386: u8 [a0 + 27] = 0\n   389: u8 [a0 + 26] = 0\n   392: u8 [a0 + 25] = 0\n   395: u8 [a0 + 24] = 0\n   398: u8 [a0 + 23] = 0\n   401: u8 [a0 + 22] = 0\n   404: u8 [a0 + 21] = 0\n   407: u8 [a0 + 20] = 0\n   410: u8 [a0 + 19] = 0\n   413: u8 [a0 + 18] = 0\n   416: u8 [a0 + 17] = 0\n   419: u8 [a0 + 16] = 0\n   422: u8 [a0 + 15] = 0\n   425: u8 [a0 + 14] = 0\n   428: u8 [a0 + 13] = 0\n   431: u8 [a0 + 12] = 0\n   434: u8 [a0 + 11] = 0\n   437: u8 [a0 + 10] = 0\n   440: u8 [a0 + 9] = 0\n   443: u8 [a0 + 8] = 0\n   446: u8 [a0 + 7] = 0\n   449: u8 [a0 + 6] = 0\n   452: u8 [a0 + 5] = 0\n   455: u8 [a0 + 4] = 0\n   458: u8 [a0 + 3] = 0\n   461: u8 [a0 + 2] = 0\n   464: u8 [a0 + 1] = 0\n   467: u8 [a0 + 0] = 0\n   469: u64 [sp + 88] = 0\n   472: u64 [sp + 64] = 0\n   475: u64 [sp + 72] = 0\n   478: u64 [sp + 80] = 0\n   481: i32 a0 = sp + 0x40\n   484: ecalli 14 // 'value_transferred'\n   486: fallthrough\n      : @16 (gas: 8)\n   487: a0 = u64 [sp + 0x50]\n   490: a1 = u64 [sp + 0x58]\n   493: a2 = u64 [sp + 0x48]\n   496: a3 = u64 [sp + 0x40]\n   499: a1 = a1 | a2\n   502: a0 = a0 | a3\n   505: a0 = a0 | a1\n   508: jump @21 if a0 != 0\n      : @17 (gas: 20)\n   512: a0 = sp + 0x20\n   515: ra = 0xa\n   518: sp = sp + 0xffffffffffffff90\n   521: u64 [sp + 0x68] = ra\n   524: u64 [sp + 0x60] = s0\n   527: u64 [sp + 0x58] = s1\n   530: s0 = sp + 0x70\n   533: sp = sp & 0xfffffffffffffff0\n   536: s1 = i32 [0x20004]\n   541: u64 [sp + 0x8] = a0\n   544: a0 = s1 << 0x20\n   547: a0 = a0 >> 0x20\n   550: u64 [sp + 40] = 0\n   553: u64 [sp + 32] = 0\n   556: u64 [sp + 0x10] = a0\n   559: a0 = sp + 0x30\n   562: a1 = sp + 0x10\n   565: u64 [sp + 24] = 0\n   568: ra = 0x32\n   571: jump @46\n      : @18 [@dyn 5] (gas: 43)\n   574: a0 = u64 [sp + 0x20]\n   577: u64 [sp + 0x18] = a0\n   580: a0 = u64 [sp + 0x28]\n   583: u64 [sp + 0x10] = a0\n   586: s1 = u32 [sp + 0x30]\n   589: u64 [sp + 152] = 0\n   593: u64 [sp + 144] = 0\n   597: u64 [sp + 136] = 0\n   601: u64 [sp + 128] = 0x1\n   606: u64 [sp + 184] = 0\n   610: u64 [sp + 176] = 0\n   614: u64 [sp + 168] = 0\n   618: u64 [sp + 160] = 0\n   622: u32 [sp + 96] = 0x20\n   626: i32 a1 = sp + 0x80\n   630: i32 a3 = sp + 0xa0\n   634: i32 a4 = sp + 0x60\n   637: a2 = 0xffffffffffffffff\n   640: a0 = 0\n   642: ecalli 6 // 'get_storage'\n   644: a0 = u32 [sp + 0xb4]\n   648: a0 = a0 << 0x20\n   651: a1 = u64 [sp + 0xb8]\n   655: a0 = a0 | s1\n   658: u64 [sp + 152] = 0\n   662: u64 [sp + 144] = 0\n   666: u64 [sp + 136] = 0\n   670: u64 [sp + 128] = 0x1\n   675: u64 [sp + 0xb8] = a1\n   679: u64 [sp + 0xb0] = a0\n   683: a0 = u64 [sp + 0x10]\n   686: u64 [sp + 0xa8] = a0\n   690: a0 = u64 [sp + 0x18]\n   693: u64 [sp + 0xa0] = a0\n   697: i32 a1 = sp + 0x80\n   701: i32 a3 = sp + 0xa0\n   705: a2 = 0xffffffffffffffff\n   708: a4 = 0x20\n   711: a0 = 0\n   713: ecalli 13 // 'set_storage'\n   715: a0 = 0x40\n   718: a1 = 0x20\n   721: ra = 12, jump @0\n      : @19 [@dyn 6] (gas: 100)\n   726: a1 = u8 [a0 + 0x11]\n   729: a2 = u8 [a0 + 0x10]\n   732: a3 = u8 [a0 + 0x12]\n   735: a4 = u8 [a0 + 0x13]\n   738: a1 = a1 << 0x8\n   741: a1 = a1 | a2\n   744: a3 = a3 << 0x10\n   747: a4 = a4 << 0x18\n   750: a3 = a3 | a4\n   753: a1 = a1 | a3\n   756: a2 = u8 [a0 + 0x15]\n   759: a3 = u8 [a0 + 0x14]\n   762: a4 = u8 [a0 + 0x16]\n   765: a5 = u8 [a0 + 0x17]\n   768: a2 = a2 << 0x8\n   771: a2 = a2 | a3\n   774: a4 = a4 << 0x10\n   777: a5 = a5 << 0x18\n   780: a4 = a4 | a5\n   783: a2 = a2 | a4\n   786: a2 = a2 << 0x20\n   789: t0 = a2 | a1\n   792: a2 = u8 [a0 + 0x1]\n   795: a3 = u8 [a0]\n   797: a4 = u8 [a0 + 0x2]\n   800: a5 = u8 [a0 + 0x3]\n   803: a2 = a2 << 0x8\n   806: a2 = a2 | a3\n   809: a4 = a4 << 0x10\n   812: a5 = a5 << 0x18\n   815: a4 = a4 | a5\n   818: a2 = a2 | a4\n   821: a3 = u8 [a0 + 0x5]\n   824: a4 = u8 [a0 + 0x4]\n   827: a5 = u8 [a0 + 0x6]\n   830: s1 = u8 [a0 + 0x7]\n   833: a3 = a3 << 0x8\n   836: a3 = a3 | a4\n   839: a5 = a5 << 0x10\n   842: s1 = s1 << 0x18\n   845: a5 = a5 | s1\n   848: a3 = a3 | a5\n   851: a3 = a3 << 0x20\n   854: a2 = a2 | a3\n   857: a3 = u8 [a0 + 0x19]\n   860: a4 = u8 [a0 + 0x18]\n   863: a5 = u8 [a0 + 0x1a]\n   866: s1 = u8 [a0 + 0x1b]\n   869: a3 = a3 << 0x8\n   872: a3 = a3 | a4\n   875: a5 = a5 << 0x10\n   878: s1 = s1 << 0x18\n   881: a5 = a5 | s1\n   884: a3 = a3 | a5\n   887: a4 = u8 [a0 + 0x1d]\n   890: a5 = u8 [a0 + 0x1c]\n   893: s1 = u8 [a0 + 0x1e]\n   896: a1 = u8 [a0 + 0x1f]\n   899: a4 = a4 << 0x8\n   902: a4 = a4 | a5\n   905: s1 = s1 << 0x10\n   908: a1 = a1 << 0x18\n   911: a1 = a1 | s1\n   914: a1 = a1 | a4\n   917: a1 = a1 << 0x20\n   920: a3 = a3 | a1\n   923: a1 = u8 [a0 + 0x9]\n   926: a4 = u8 [a0 + 0x8]\n   929: a5 = u8 [a0 + 0xa]\n   932: s1 = u8 [a0 + 0xb]\n   935: a1 = a1 << 0x8\n   938: a1 = a1 | a4\n   941: a5 = a5 << 0x10\n   944: s1 = s1 << 0x18\n   947: a5 = a5 | s1\n   950: a1 = a1 | a5\n   953: a4 = u8 [a0 + 0xd]\n   956: a5 = u8 [a0 + 0xc]\n   959: s1 = u8 [a0 + 0xe]\n   962: a0 = u8 [a0 + 0xf]\n   965: a4 = a4 << 0x8\n   968: a4 = a4 | a5\n   971: s1 = s1 << 0x10\n   974: a0 = a0 << 0x18\n   977: a0 = a0 | s1\n   980: a0 = a0 | a4\n   983: a0 = a0 << 0x20\n   986: a0 = a0 | a1\n   989: a0 = reverse a0\n   991: s1 = reverse a3\n   993: a1 = reverse a2\n   995: a2 = reverse t0\n   997: a1 = a1 | a2\n  1000: a2 = s1 | a0\n  1003: a2 = a2 | a1\n  1006: a2 = a2 >> 0x20\n  1009: a0 = a0 | a1\n  1012: a0 = a0 << 0x20\n  1015: a0 = a0 | a2\n  1018: jump @23 if a0 == 0\n      : @20 (gas: 1)\n  1021: trap\n      : @21 (gas: 3)\n  1022: a0 = 0\n  1024: a1 = 0\n  1026: ra = 14, jump @0\n      : @22 [@dyn 7] (gas: 5)\n  1031: i32 a1 = a0 + 0\n  1033: a0 = 0x1\n  1036: a2 = 0\n  1038: ecalli 11 // 'seal_return'\n  1040: fallthrough\n      : @23 (gas: 4)\n  1041: i32 s1 = s1 + 0\n  1043: a0 = s1\n  1045: a1 = 0\n  1047: ra = 16, jump @0\n      : @24 [@dyn 8] (gas: 5)\n  1052: i32 a0 = a0 + 0\n  1054: a1 = 0\n  1056: a2 = 0\n  1058: ecalli 1 // 'call_data_copy'\n  1060: fallthrough\n      : @25 (gas: 2)\n  1061: a1 = i32 [0x20008]\n  1066: jump @27 if a1 == 0\n      : @26 (gas: 4)\n  1069: a0 = 0x30010\n  1074: i32 a0 = a0 + 0\n  1076: ecalli 12 // 'set_immutable_data'\n  1078: fallthrough\n      : @27 (gas: 3)\n  1079: a0 = s1\n  1081: a1 = 0\n  1083: ra = 18, jump @0\n      : @28 [@dyn 9] (gas: 6)\n  1088: i32 a1 = a0 + 0\n  1090: a0 = 0\n  1092: a2 = 0\n  1094: ra = 0x14\n  1097: ecalli 11 // 'seal_return'\n  1099: fallthrough\n      : @29 [@dyn 10] (gas: 8)\n  1100: sp = sp + 0xffffffffffffffc0\n  1103: u64 [sp + 0x38] = ra\n  1106: u64 [sp + 0x30] = s0\n  1109: s0 = sp + 0x40\n  1112: sp = sp & 0xffffffffffffffe0\n  1115: a0 = 0x40\n  1118: a1 = 0x20\n  1121: ra = 22, jump @0\n      : @30 [@dyn 11] (gas: 34)\n  1126: u8 [a0 + 31] = 0x80\n  1131: u8 [a0 + 30] = 0\n  1134: u8 [a0 + 29] = 0\n  1137: u8 [a0 + 28] = 0\n  1140: u8 [a0 + 27] = 0\n  1143: u8 [a0 + 26] = 0\n  1146: u8 [a0 + 25] = 0\n  1149: u8 [a0 + 24] = 0\n  1152: u8 [a0 + 23] = 0\n  1155: u8 [a0 + 22] = 0\n  1158: u8 [a0 + 21] = 0\n  1161: u8 [a0 + 20] = 0\n  1164: u8 [a0 + 19] = 0\n  1167: u8 [a0 + 18] = 0\n  1170: u8 [a0 + 17] = 0\n  1173: u8 [a0 + 16] = 0\n  1176: u8 [a0 + 15] = 0\n  1179: u8 [a0 + 14] = 0\n  1182: u8 [a0 + 13] = 0\n  1185: u8 [a0 + 12] = 0\n  1188: u8 [a0 + 11] = 0\n  1191: u8 [a0 + 10] = 0\n  1194: u8 [a0 + 9] = 0\n  1197: u8 [a0 + 8] = 0\n  1200: u8 [a0 + 7] = 0\n  1203: u8 [a0 + 3] = 0\n  1206: u8 [a0 + 2] = 0\n  1209: u8 [a0 + 1] = 0\n  1212: u8 [a0 + 0] = 0\n  1214: a1 = i32 [0x20004]\n  1219: u8 [a0 + 6] = 0\n  1222: u8 [a0 + 5] = 0\n  1225: u8 [a0 + 4] = 0\n  1228: jump @40 if a1 <u 4\n      : @31 (gas: 4)\n  1233: i32 a0 = sp + 0\n  1235: a1 = 0\n  1237: ecalli 2 // 'call_data_load'\n  1239: fallthrough\n      : @32 (gas: 2)\n  1240: a0 = i32 [sp + 0x1c]\n  1243: jump @37 if a0 <=s 2968316797\n      : @33 (gas: 1)\n  1250: jump @41 if a0 == 2968316798\n      : @34 (gas: 1)\n  1258: jump @42 if a0 == 3732202875\n      : @35 (gas: 1)\n  1266: jump @40 if a0 != 366291548\n      : @36 (gas: 14)\n  1273: ra = 0x18\n  1276: sp = sp + 0xffffffffffffff60\n  1280: u64 [sp + 0x98] = ra\n  1284: u64 [sp + 0x90] = s0\n  1288: u64 [sp + 0x88] = s1\n  1292: s0 = sp + 0xa0\n  1296: sp = sp & 0xffffffffffffffe0\n  1299: u64 [sp + 56] = 0\n  1302: u64 [sp + 48] = 0\n  1305: u64 [sp + 40] = 0\n  1308: u64 [sp + 32] = 0\n  1311: i32 a0 = sp + 0x20\n  1314: ecalli 14 // 'value_transferred'\n  1316: jump @67\n      : @37 [@dyn 12] (gas: 1)\n  1319: jump @43 if a0 == 2811306921\n      : @38 (gas: 1)\n  1327: jump @40 if a0 != 2926824684\n      : @39 (gas: 14)\n  1334: ra = 0x1a\n  1337: sp = sp + 0xfffffffffffffee0\n  1341: u64 [sp + 0x118] = ra\n  1345: u64 [sp + 0x110] = s0\n  1349: u64 [sp + 0x108] = s1\n  1353: s0 = sp + 0x120\n  1357: sp = sp & 0xffffffffffffffe0\n  1360: u64 [sp + 248] = 0\n  1364: u64 [sp + 240] = 0\n  1368: u64 [sp + 232] = 0\n  1372: u64 [sp + 224] = 0\n  1376: i32 a0 = sp + 0xe0\n  1380: ecalli 14 // 'value_transferred'\n  1382: jump @130\n      : @40 [@dyn 13] (gas: 7)\n  1385: ra = 0x1c\n  1388: sp = sp + 0xfffffffffffffff8\n  1391: u64 [sp] = ra\n  1393: a0 = 0\n  1395: a1 = 0\n  1397: ra = 0xbc\n  1401: jump @0\n      : @41 [@dyn 14] (gas: 1)\n  1404: ra = 30, jump @148\n      : @42 [@dyn 15] (gas: 14)\n  1409: ra = 0x20\n  1412: sp = sp + 0xfffffffffffffe60\n  1416: u64 [sp + 0x198] = ra\n  1420: u64 [sp + 0x190] = s0\n  1424: u64 [sp + 0x188] = s1\n  1428: s0 = sp + 0x1a0\n  1432: sp = sp & 0xffffffffffffffe0\n  1435: u64 [sp + 344] = 0\n  1439: u64 [sp + 336] = 0\n  1443: u64 [sp + 328] = 0\n  1447: u64 [sp + 320] = 0\n  1451: i32 a0 = sp + 0x140\n  1455: ecalli 14 // 'value_transferred'\n  1457: jump @183\n      : @43 [@dyn 16] (gas: 14)\n  1460: ra = 0x22\n  1463: sp = sp + 0xffffffffffffff40\n  1467: u64 [sp + 0xb8] = ra\n  1471: u64 [sp + 0xb0] = s0\n  1475: u64 [sp + 0xa8] = s1\n  1479: s0 = sp + 0xc0\n  1483: sp = sp & 0xffffffffffffffe0\n  1486: u64 [sp + 120] = 0\n  1489: u64 [sp + 112] = 0\n  1492: u64 [sp + 104] = 0\n  1495: u64 [sp + 96] = 0\n  1498: i32 a0 = sp + 0x60\n  1501: ecalli 14 // 'value_transferred'\n  1503: jump @78\n      : @44 [@dyn 17] (gas: 7)\n  1506: sp = sp + 0xfffffffffffffff0\n  1509: u64 [sp + 0x8] = ra\n  1512: u64 [sp] = s0\n  1514: s0 = a0\n  1516: a0 = 0x40\n  1519: a1 = 0x20\n  1522: ra = 36, jump @0\n      : @45 [@dyn 18] (gas: 100)\n  1527: a1 = u8 [a0 + 0x1]\n  1530: a2 = u8 [a0]\n  1532: a3 = u8 [a0 + 0x2]\n  1535: a4 = u8 [a0 + 0x3]\n  1538: a1 = a1 << 0x8\n  1541: a1 = a1 | a2\n  1544: a3 = a3 << 0x10\n  1547: a4 = a4 << 0x18\n  1550: a3 = a3 | a4\n  1553: a1 = a1 | a3\n  1556: a2 = u8 [a0 + 0x5]\n  1559: a3 = u8 [a0 + 0x4]\n  1562: a4 = u8 [a0 + 0x6]\n  1565: a5 = u8 [a0 + 0x7]\n  1568: a2 = a2 << 0x8\n  1571: a2 = a2 | a3\n  1574: a4 = a4 << 0x10\n  1577: a5 = a5 << 0x18\n  1580: a4 = a4 | a5\n  1583: a2 = a2 | a4\n  1586: a2 = a2 << 0x20\n  1589: t0 = a2 | a1\n  1592: a2 = u8 [a0 + 0x9]\n  1595: a3 = u8 [a0 + 0x8]\n  1598: a4 = u8 [a0 + 0xa]\n  1601: a5 = u8 [a0 + 0xb]\n  1604: a2 = a2 << 0x8\n  1607: a2 = a2 | a3\n  1610: a4 = a4 << 0x10\n  1613: a5 = a5 << 0x18\n  1616: a4 = a4 | a5\n  1619: a2 = a2 | a4\n  1622: a3 = u8 [a0 + 0xd]\n  1625: a4 = u8 [a0 + 0xc]\n  1628: a5 = u8 [a0 + 0xe]\n  1631: a1 = u8 [a0 + 0xf]\n  1634: a3 = a3 << 0x8\n  1637: a3 = a3 | a4\n  1640: a5 = a5 << 0x10\n  1643: a1 = a1 << 0x18\n  1646: a1 = a1 | a5\n  1649: a1 = a1 | a3\n  1652: a1 = a1 << 0x20\n  1655: t1 = a1 | a2\n  1658: a1 = u8 [a0 + 0x11]\n  1661: a3 = u8 [a0 + 0x10]\n  1664: a4 = u8 [a0 + 0x12]\n  1667: a5 = u8 [a0 + 0x13]\n  1670: a1 = a1 << 0x8\n  1673: a1 = a1 | a3\n  1676: a4 = a4 << 0x10\n  1679: a5 = a5 << 0x18\n  1682: a4 = a4 | a5\n  1685: a1 = a1 | a4\n  1688: a3 = u8 [a0 + 0x15]\n  1691: a4 = u8 [a0 + 0x14]\n  1694: a5 = u8 [a0 + 0x16]\n  1697: a2 = u8 [a0 + 0x17]\n  1700: a3 = a3 << 0x8\n  1703: a3 = a3 | a4\n  1706: a5 = a5 << 0x10\n  1709: a2 = a2 << 0x18\n  1712: a2 = a2 | a5\n  1715: a2 = a2 | a3\n  1718: a2 = a2 << 0x20\n  1721: a3 = a2 | a1\n  1724: a1 = u8 [a0 + 0x19]\n  1727: a2 = u8 [a0 + 0x18]\n  1730: a4 = u8 [a0 + 0x1a]\n  1733: a5 = u8 [a0 + 0x1b]\n  1736: a1 = a1 << 0x8\n  1739: a1 = a1 | a2\n  1742: a4 = a4 << 0x10\n  1745: a5 = a5 << 0x18\n  1748: a4 = a4 | a5\n  1751: a1 = a1 | a4\n  1754: a2 = u8 [a0 + 0x1d]\n  1757: a4 = u8 [a0 + 0x1c]\n  1760: a5 = u8 [a0 + 0x1e]\n  1763: a0 = u8 [a0 + 0x1f]\n  1766: a2 = a2 << 0x8\n  1769: a2 = a2 | a4\n  1772: a5 = a5 << 0x10\n  1775: a0 = a0 << 0x18\n  1778: a0 = a0 | a5\n  1781: a0 = a0 | a2\n  1784: a0 = a0 << 0x20\n  1787: a0 = a0 | a1\n  1790: a0 = reverse a0\n  1792: a1 = reverse a3\n  1794: a2 = reverse t1\n  1796: a3 = reverse t0\n  1798: u64 [s0 + 0x18] = a3\n  1801: u64 [s0 + 0x10] = a2\n  1804: u64 [s0 + 0x8] = a1\n  1807: u64 [s0] = a0\n  1809: ra = u64 [sp + 0x8]\n  1812: s0 = u64 [sp]\n  1814: sp = sp + 0x10\n  1817: ret\n      : @46 (gas: 18)\n  1819: sp = sp + 0xffffffffffffff60\n  1823: u64 [sp + 0x98] = ra\n  1827: u64 [sp + 0x90] = s0\n  1831: u64 [sp + 0x88] = s1\n  1835: s0 = sp + 0xa0\n  1839: sp = sp & 0xfffffffffffffff0\n  1842: a2 = u64 [a1 + 0x18]\n  1845: u64 [sp + 0x30] = a2\n  1848: a2 = u64 [a1 + 0x10]\n  1851: u64 [sp + 0x28] = a2\n  1854: a2 = u64 [a1 + 0x8]\n  1857: u64 [sp + 0x20] = a2\n  1860: a1 = u64 [a1]\n  1862: u64 [sp + 0x18] = a1\n  1865: u64 [sp + 0x38] = a0\n  1868: a0 = 0x40\n  1871: a1 = 0x20\n  1874: ra = 38, jump @0\n      : @47 [@dyn 19] (gas: 130)\n  1879: a1 = u8 [a0 + 0x19]\n  1882: a2 = u8 [a0 + 0x18]\n  1885: a3 = u8 [a0 + 0x1a]\n  1888: a4 = u8 [a0 + 0x1b]\n  1891: a1 = a1 << 0x8\n  1894: a1 = a1 | a2\n  1897: a3 = a3 << 0x10\n  1900: a4 = a4 << 0x18\n  1903: a3 = a3 | a4\n  1906: a1 = a1 | a3\n  1909: a2 = u8 [a0 + 0x1d]\n  1912: a3 = u8 [a0 + 0x1c]\n  1915: a4 = u8 [a0 + 0x1e]\n  1918: a5 = u8 [a0 + 0x1f]\n  1921: a2 = a2 << 0x8\n  1924: a2 = a2 | a3\n  1927: a4 = a4 << 0x10\n  1930: a5 = a5 << 0x18\n  1933: a4 = a4 | a5\n  1936: a2 = a2 | a4\n  1939: a2 = a2 << 0x20\n  1942: t0 = a2 | a1\n  1945: a2 = u8 [a0 + 0x11]\n  1948: a3 = u8 [a0 + 0x10]\n  1951: a4 = u8 [a0 + 0x12]\n  1954: a5 = u8 [a0 + 0x13]\n  1957: a2 = a2 << 0x8\n  1960: a2 = a2 | a3\n  1963: a4 = a4 << 0x10\n  1966: a5 = a5 << 0x18\n  1969: a4 = a4 | a5\n  1972: a2 = a2 | a4\n  1975: a3 = u8 [a0 + 0x15]\n  1978: a4 = u8 [a0 + 0x14]\n  1981: a5 = u8 [a0 + 0x16]\n  1984: s1 = u8 [a0 + 0x17]\n  1987: a3 = a3 << 0x8\n  1990: a3 = a3 | a4\n  1993: a5 = a5 << 0x10\n  1996: s1 = s1 << 0x18\n  1999: a5 = a5 | s1\n  2002: a3 = a3 | a5\n  2005: a3 = a3 << 0x20\n  2008: a2 = a2 | a3\n  2011: a3 = u8 [a0 + 0x9]\n  2014: a4 = u8 [a0 + 0x8]\n  2017: a5 = u8 [a0 + 0xa]\n  2020: s1 = u8 [a0 + 0xb]\n  2023: a3 = a3 << 0x8\n  2026: a3 = a3 | a4\n  2029: a5 = a5 << 0x10\n  2032: s1 = s1 << 0x18\n  2035: a5 = a5 | s1\n  2038: a3 = a3 | a5\n  2041: a4 = u8 [a0 + 0xd]\n  2044: a5 = u8 [a0 + 0xc]\n  2047: s1 = u8 [a0 + 0xe]\n  2050: a1 = u8 [a0 + 0xf]\n  2053: a4 = a4 << 0x8\n  2056: a4 = a4 | a5\n  2059: s1 = s1 << 0x10\n  2062: a1 = a1 << 0x18\n  2065: a1 = a1 | s1\n  2068: a1 = a1 | a4\n  2071: a1 = a1 << 0x20\n  2074: a3 = a3 | a1\n  2077: a1 = u8 [a0 + 0x1]\n  2080: a4 = u8 [a0]\n  2082: a5 = u8 [a0 + 0x2]\n  2085: s1 = u8 [a0 + 0x3]\n  2088: a1 = a1 << 0x8\n  2091: a1 = a1 | a4\n  2094: a5 = a5 << 0x10\n  2097: s1 = s1 << 0x18\n  2100: a5 = a5 | s1\n  2103: a1 = a1 | a5\n  2106: a4 = u8 [a0 + 0x5]\n  2109: a5 = u8 [a0 + 0x4]\n  2112: s1 = u8 [a0 + 0x6]\n  2115: a0 = u8 [a0 + 0x7]\n  2118: a4 = a4 << 0x8\n  2121: a4 = a4 | a5\n  2124: s1 = s1 << 0x10\n  2127: a0 = a0 << 0x18\n  2130: a0 = a0 | s1\n  2133: a0 = a0 | a4\n  2136: a0 = a0 << 0x20\n  2139: a0 = a0 | a1\n  2142: t1 = reverse a0\n  2144: t2 = reverse a3\n  2146: s1 = reverse a2\n  2148: a5 = reverse t0\n  2150: a1 = u64 [sp + 0x18]\n  2153: a0 = a1 + 0x1f\n  2156: a1 = a0 <u a1\n  2159: a3 = u64 [sp + 0x20]\n  2162: a2 = a3 + a1\n  2165: a3 = a2 <u a3\n  2168: a3 = a1 if a1 == 0\n  2171: a1 = u64 [sp + 0x28]\n  2174: a3 = a3 + a1\n  2177: a1 = a3 <u a1\n  2180: a4 = u64 [sp + 0x30]\n  2183: a1 = a1 + a4\n  2186: a0 = a0 & 0xffffffffffffffe0\n  2189: a0 = a0 + a5\n  2192: u64 [sp + 0x28] = a5\n  2195: u64 [sp + 0x10] = a0\n  2198: a4 = a0 <u a5\n  2201: a2 = a2 + s1\n  2204: a5 = a2 + a4\n  2207: a2 = a5 ^ s1\n  2210: u64 [sp + 0x30] = s1\n  2213: a0 = a5 <u s1\n  2216: a0 = a4 if a2 == 0\n  2219: a3 = a3 + t2\n  2222: a4 = a3 + a0\n  2225: s1 = a4 <u a3\n  2228: a2 = a3 <u t2\n  2231: a1 = a1 + t1\n  2234: a1 = a1 + a2\n  2237: s1 = s1 + a1\n  2240: a1 = a4 >u 0\n  2242: a2 = s1 >u 0\n  2244: a2 = a1 if s1 == 0\n  2247: a1 = a4 | s1\n  2250: u64 [sp + 0x8] = a5\n  2253: a3 = a5 >u 0\n  2255: a3 = a2 if a1 != 0\n  2258: jump @51 if a3 != 0\n      : @48 (gas: 8)\n  2262: a1 = a4 <u t2\n  2265: a2 = s1 ^ t1\n  2268: a3 = s1 <u t1\n  2271: a3 = a1 if a2 == 0\n  2274: a1 = a4 ^ t2\n  2277: a1 = a1 | a2\n  2280: a0 = a3 if a1 != 0\n  2283: jump @51 if a0 != 0\n      : @49 (gas: 6)\n  2287: a0 = 0x40\n  2290: a1 = 0x20\n  2293: u64 [sp + 0x20] = t2\n  2296: u64 [sp + 0x18] = t1\n  2299: u64 [sp] = a4\n  2301: ra = 40, jump @0\n      : @50 [@dyn 20] (gas: 82)\n  2306: a1 = reverse s1\n  2308: a2 = u64 [sp]\n  2310: a2 = reverse a2\n  2312: a3 = u64 [sp + 0x8]\n  2315: a3 = reverse a3\n  2317: a4 = u64 [sp + 0x10]\n  2320: a4 = reverse a4\n  2322: u8 [a0 + 0x18] = a4\n  2325: a5 = a4 >> 0x38\n  2328: u8 [a0 + 0x1f] = a5\n  2331: a5 = a4 >> 0x30\n  2334: u8 [a0 + 0x1e] = a5\n  2337: a5 = a4 >> 0x28\n  2340: u8 [a0 + 0x1d] = a5\n  2343: a5 = a4 >> 0x20\n  2346: u8 [a0 + 0x1c] = a5\n  2349: a5 = a4 >> 0x18\n  2352: u8 [a0 + 0x1b] = a5\n  2355: a5 = a4 >> 0x10\n  2358: u8 [a0 + 0x1a] = a5\n  2361: a4 = a4 >> 0x8\n  2364: u8 [a0 + 0x19] = a4\n  2367: u8 [a0 + 0x10] = a3\n  2370: a4 = a3 >> 0x38\n  2373: u8 [a0 + 0x17] = a4\n  2376: a4 = a3 >> 0x30\n  2379: u8 [a0 + 0x16] = a4\n  2382: a4 = a3 >> 0x28\n  2385: u8 [a0 + 0x15] = a4\n  2388: a4 = a3 >> 0x20\n  2391: u8 [a0 + 0x14] = a4\n  2394: a4 = a3 >> 0x18\n  2397: u8 [a0 + 0x13] = a4\n  2400: a4 = a3 >> 0x10\n  2403: u8 [a0 + 0x12] = a4\n  2406: a3 = a3 >> 0x8\n  2409: u8 [a0 + 0x11] = a3\n  2412: u8 [a0 + 0x8] = a2\n  2415: a3 = a2 >> 0x38\n  2418: u8 [a0 + 0xf] = a3\n  2421: a3 = a2 >> 0x30\n  2424: u8 [a0 + 0xe] = a3\n  2427: a3 = a2 >> 0x28\n  2430: u8 [a0 + 0xd] = a3\n  2433: a3 = a2 >> 0x20\n  2436: u8 [a0 + 0xc] = a3\n  2439: a3 = a2 >> 0x18\n  2442: u8 [a0 + 0xb] = a3\n  2445: a3 = a2 >> 0x10\n  2448: u8 [a0 + 0xa] = a3\n  2451: a2 = a2 >> 0x8\n  2454: u8 [a0 + 0x9] = a2\n  2457: u8 [a0] = a1\n  2459: a2 = a1 >> 0x38\n  2462: u8 [a0 + 0x7] = a2\n  2465: a2 = a1 >> 0x30\n  2468: u8 [a0 + 0x6] = a2\n  2471: a2 = a1 >> 0x28\n  2474: u8 [a0 + 0x5] = a2\n  2477: a2 = a1 >> 0x20\n  2480: u8 [a0 + 0x4] = a2\n  2483: a2 = a1 >> 0x18\n  2486: u8 [a0 + 0x3] = a2\n  2489: a2 = a1 >> 0x10\n  2492: u8 [a0 + 0x2] = a2\n  2495: a1 = a1 >> 0x8\n  2498: u8 [a0 + 0x1] = a1\n  2501: a0 = u64 [sp + 0x38]\n  2504: a1 = u64 [sp + 0x28]\n  2507: u64 [a0] = a1\n  2509: a1 = u64 [sp + 0x18]\n  2512: u64 [a0 + 0x18] = a1\n  2515: a1 = u64 [sp + 0x30]\n  2518: u64 [a0 + 0x8] = a1\n  2521: a1 = u64 [sp + 0x20]\n  2524: u64 [a0 + 0x10] = a1\n  2527: sp = s0 + 0xffffffffffffff60\n  2531: ra = u64 [sp + 0x98]\n  2535: s0 = u64 [sp + 0x90]\n  2539: s1 = u64 [sp + 0x88]\n  2543: sp = sp + 0xa0\n  2547: ret\n      : @51 (gas: 8)\n  2549: u64 [sp + 112] = 0\n  2552: u64 [sp + 104] = 0\n  2555: u64 [sp + 96] = 0\n  2558: a0 = 0x4e487b7100000000\n  2568: a1 = sp + 0x60\n  2571: u64 [sp + 0x78] = a0\n  2574: a0 = 0\n  2576: ra = 42, jump @8\n      : @52 [@dyn 21] (gas: 7)\n  2581: u64 [sp + 88] = 0\n  2584: u64 [sp + 80] = 0\n  2587: u64 [sp + 64] = 0x41\n  2591: a0 = 0x4\n  2594: a1 = sp + 0x40\n  2597: u64 [sp + 72] = 0\n  2600: ra = 44, jump @8\n      : @53 [@dyn 22] (gas: 3)\n  2605: a1 = 0x24\n  2608: a0 = 0\n  2610: ra = 46, jump @0\n      : @54 [@dyn 23] (gas: 6)\n  2615: i32 a1 = a0 + 0\n  2617: a0 = 0x1\n  2620: a2 = 0x24\n  2623: ra = 0x30\n  2626: ecalli 11 // 'seal_return'\n  2628: fallthrough\n      : @55 [@dyn 24] (gas: 8)\n  2629: a2 = u32 [a1 + 0x10]\n  2632: a3 = u64 [a1 + 0x8]\n  2635: a1 = u64 [a1]\n  2637: u64 [a0 + 24] = 0\n  2640: u64 [a0 + 0x10] = a2\n  2643: u64 [a0 + 0x8] = a3\n  2646: u64 [a0] = a1\n  2648: ret\n      : @56 [@dyn 25] (gas: 12)\n  2650: a1 = u64 [sp + 0x48]\n  2653: a2 = u64 [sp + 0x40]\n  2656: a3 = u64 [sp + 0x38]\n  2659: a0 = u64 [sp + 0x30]\n  2662: a1 = a1 | a3\n  2665: a3 = a0 | a2\n  2668: a3 = a3 | a1\n  2671: a3 = a3 >> 0x20\n  2674: a1 = a1 | a2\n  2677: a1 = a1 << 0x20\n  2680: a1 = a1 | a3\n  2683: jump @63 if a1 != 0\n      : @57 (gas: 4)\n  2687: i32 a0 = a0 + 0\n  2689: u64 [sp] = a0\n  2691: a1 = s1\n  2693: ra = 52, jump @0\n      : @58 [@dyn 26] (gas: 5)\n  2698: i32 a0 = a0 + 0\n  2700: a1 = s1\n  2702: a2 = 0\n  2704: ecalli 1 // 'call_data_copy'\n  2706: fallthrough\n      : @59 (gas: 1)\n  2707: jump @64 if s1 <=u 31\n      : @60 (gas: 3)\n  2712: a1 = 0x20\n  2715: a0 = u64 [sp]\n  2717: ra = 54, jump @0\n      : @61 [@dyn 27] (gas: 54)\n  2722: a1 = u8 [a0 + 0x9]\n  2725: a2 = u8 [a0 + 0x8]\n  2728: a3 = u8 [a0 + 0xa]\n  2731: a4 = u8 [a0 + 0xb]\n  2734: a1 = a1 << 0x8\n  2737: a1 = a1 | a2\n  2740: a3 = a3 << 0x10\n  2743: a4 = a4 << 0x18\n  2746: a3 = a3 | a4\n  2749: a1 = a1 | a3\n  2752: a2 = u8 [a0 + 0xd]\n  2755: a3 = u8 [a0 + 0xc]\n  2758: a4 = u8 [a0 + 0xe]\n  2761: a5 = u8 [a0 + 0xf]\n  2764: a2 = a2 << 0x8\n  2767: a2 = a2 | a3\n  2770: a4 = a4 << 0x10\n  2773: a5 = a5 << 0x18\n  2776: a4 = a4 | a5\n  2779: a2 = a2 | a4\n  2782: a2 = a2 << 0x20\n  2785: a2 = a2 | a1\n  2788: a1 = u8 [a0 + 0x1]\n  2791: a3 = u8 [a0]\n  2793: a4 = u8 [a0 + 0x2]\n  2796: a5 = u8 [a0 + 0x3]\n  2799: a1 = a1 << 0x8\n  2802: a1 = a1 | a3\n  2805: a4 = a4 << 0x10\n  2808: a5 = a5 << 0x18\n  2811: a4 = a4 | a5\n  2814: a1 = a1 | a4\n  2817: a3 = u8 [a0 + 0x5]\n  2820: a4 = u8 [a0 + 0x4]\n  2823: a5 = u8 [a0 + 0x6]\n  2826: s1 = u8 [a0 + 0x7]\n  2829: a3 = a3 << 0x8\n  2832: a3 = a3 | a4\n  2835: a5 = a5 << 0x10\n  2838: s1 = s1 << 0x18\n  2841: a5 = a5 | s1\n  2844: a3 = a3 | a5\n  2847: a3 = a3 << 0x20\n  2850: a1 = a1 | a3\n  2853: t0 = reverse a1\n  2855: a2 = reverse a2\n  2857: a3 = 0x100000000\n  2867: a3 = a3 ^ a2\n  2870: a3 = a3 | t0\n  2873: a4 = a2 >> 0x20\n  2876: a4 = a4 <u 0x1\n  2879: a4 = 0 if t0 != 0\n  2881: a4 = 0 if a3 == 0\n  2883: jump @64 if a4 == 0\n      : @62 (gas: 57)\n  2887: a3 = u8 [a0 + 0x19]\n  2890: a4 = u8 [a0 + 0x18]\n  2893: a5 = u8 [a0 + 0x1a]\n  2896: s1 = u8 [a0 + 0x1b]\n  2899: a3 = a3 << 0x8\n  2902: a3 = a3 | a4\n  2905: a5 = a5 << 0x10\n  2908: s1 = s1 << 0x18\n  2911: a5 = a5 | s1\n  2914: a3 = a3 | a5\n  2917: a4 = u8 [a0 + 0x1d]\n  2920: a5 = u8 [a0 + 0x1c]\n  2923: s1 = u8 [a0 + 0x1e]\n  2926: a1 = u8 [a0 + 0x1f]\n  2929: a4 = a4 << 0x8\n  2932: a4 = a4 | a5\n  2935: s1 = s1 << 0x10\n  2938: a1 = a1 << 0x18\n  2941: a1 = a1 | s1\n  2944: a1 = a1 | a4\n  2947: a1 = a1 << 0x20\n  2950: a3 = a3 | a1\n  2953: a1 = u8 [a0 + 0x11]\n  2956: a4 = u8 [a0 + 0x10]\n  2959: a5 = u8 [a0 + 0x12]\n  2962: s1 = u8 [a0 + 0x13]\n  2965: a1 = a1 << 0x8\n  2968: a1 = a1 | a4\n  2971: a5 = a5 << 0x10\n  2974: s1 = s1 << 0x18\n  2977: a5 = a5 | s1\n  2980: a1 = a1 | a5\n  2983: a4 = u8 [a0 + 0x15]\n  2986: a5 = u8 [a0 + 0x14]\n  2989: s1 = u8 [a0 + 0x16]\n  2992: a0 = u8 [a0 + 0x17]\n  2995: a4 = a4 << 0x8\n  2998: a4 = a4 | a5\n  3001: s1 = s1 << 0x10\n  3004: a0 = a0 << 0x18\n  3007: a0 = a0 | s1\n  3010: a0 = a0 | a4\n  3013: a0 = a0 << 0x20\n  3016: a0 = a0 | a1\n  3019: a0 = reverse a0\n  3021: a1 = reverse a3\n  3023: a3 = u64 [sp + 0x8]\n  3026: u64 [a3] = a1\n  3028: u64 [a3 + 0x8] = a0\n  3031: u64 [a3 + 0x10] = a2\n  3034: u64 [a3 + 0x18] = t0\n  3037: sp = s0 + 0xffffffffffffff90\n  3040: ra = u64 [sp + 0x68]\n  3043: s0 = u64 [sp + 0x60]\n  3046: s1 = u64 [sp + 0x58]\n  3049: sp = sp + 0x70\n  3052: ret\n      : @63 (gas: 1)\n  3054: trap\n      : @64 (gas: 3)\n  3055: a0 = 0\n  3057: a1 = 0\n  3059: ra = 56, jump @0\n      : @65 [@dyn 28] (gas: 6)\n  3064: i32 a1 = a0 + 0\n  3066: a0 = 0x1\n  3069: a2 = 0\n  3071: ra = 0x3a\n  3074: ecalli 11 // 'seal_return'\n  3076: fallthrough\n      : @66 [@dyn 29] (gas: 9)\n  3077: a2 = u64 [a1 + 0x18]\n  3080: a3 = u64 [a1 + 0x10]\n  3083: a4 = u64 [a1 + 0x8]\n  3086: a1 = u64 [a1]\n  3088: u64 [a0 + 0x18] = a2\n  3091: u64 [a0 + 0x10] = a3\n  3094: u64 [a0 + 0x8] = a4\n  3097: u64 [a0] = a1\n  3099: ret\n      : @67 (gas: 8)\n  3101: a0 = u64 [sp + 0x30]\n  3104: a1 = u64 [sp + 0x38]\n  3107: a2 = u64 [sp + 0x28]\n  3110: a3 = u64 [sp + 0x20]\n  3113: a1 = a1 | a2\n  3116: a0 = a0 | a3\n  3119: a0 = a0 | a1\n  3122: jump @72 if a0 != 0\n      : @68 (gas: 2)\n  3126: a0 = i32 [0x20004]\n  3131: jump @72 if a0 <=u 3\n      : @69 (gas: 24)\n  3136: u64 [sp + 88] = 0\n  3139: u64 [sp + 80] = 0\n  3142: u64 [sp + 72] = 0\n  3145: u64 [sp + 64] = 0x1\n  3149: u64 [sp + 120] = 0\n  3152: u64 [sp + 112] = 0\n  3155: u64 [sp + 104] = 0\n  3158: u64 [sp + 96] = 0\n  3161: u32 [sp + 128] = 0x20\n  3166: i32 a1 = sp + 0x40\n  3169: i32 a3 = sp + 0x60\n  3172: i32 a4 = sp + 0x80\n  3176: a2 = 0xffffffffffffffff\n  3179: a0 = 0\n  3181: ecalli 6 // 'get_storage'\n  3183: a0 = u64 [sp + 0x70]\n  3186: u64 [sp + 0x8] = a0\n  3189: a0 = u64 [sp + 0x68]\n  3192: u64 [sp + 0x10] = a0\n  3195: a0 = u64 [sp + 0x60]\n  3198: u64 [sp + 0x18] = a0\n  3201: a0 = 0x40\n  3204: a1 = 0x20\n  3207: ra = 60, jump @0\n      : @70 [@dyn 30] (gas: 100)\n  3212: a1 = u8 [a0 + 0x11]\n  3215: a2 = u8 [a0 + 0x10]\n  3218: a3 = u8 [a0 + 0x12]\n  3221: a4 = u8 [a0 + 0x13]\n  3224: a1 = a1 << 0x8\n  3227: a1 = a1 | a2\n  3230: a3 = a3 << 0x10\n  3233: a4 = a4 << 0x18\n  3236: a3 = a3 | a4\n  3239: a1 = a1 | a3\n  3242: a2 = u8 [a0 + 0x15]\n  3245: a3 = u8 [a0 + 0x14]\n  3248: a4 = u8 [a0 + 0x16]\n  3251: a5 = u8 [a0 + 0x17]\n  3254: a2 = a2 << 0x8\n  3257: a2 = a2 | a3\n  3260: a4 = a4 << 0x10\n  3263: a5 = a5 << 0x18\n  3266: a4 = a4 | a5\n  3269: a2 = a2 | a4\n  3272: a2 = a2 << 0x20\n  3275: t0 = a2 | a1\n  3278: a2 = u8 [a0 + 0x1]\n  3281: a3 = u8 [a0]\n  3283: a4 = u8 [a0 + 0x2]\n  3286: a5 = u8 [a0 + 0x3]\n  3289: a2 = a2 << 0x8\n  3292: a2 = a2 | a3\n  3295: a4 = a4 << 0x10\n  3298: a5 = a5 << 0x18\n  3301: a4 = a4 | a5\n  3304: a2 = a2 | a4\n  3307: a3 = u8 [a0 + 0x5]\n  3310: a4 = u8 [a0 + 0x4]\n  3313: a5 = u8 [a0 + 0x6]\n  3316: s1 = u8 [a0 + 0x7]\n  3319: a3 = a3 << 0x8\n  3322: a3 = a3 | a4\n  3325: a5 = a5 << 0x10\n  3328: s1 = s1 << 0x18\n  3331: a5 = a5 | s1\n  3334: a3 = a3 | a5\n  3337: a3 = a3 << 0x20\n  3340: a2 = a2 | a3\n  3343: a3 = u8 [a0 + 0x19]\n  3346: a4 = u8 [a0 + 0x18]\n  3349: a5 = u8 [a0 + 0x1a]\n  3352: s1 = u8 [a0 + 0x1b]\n  3355: a3 = a3 << 0x8\n  3358: a3 = a3 | a4\n  3361: a5 = a5 << 0x10\n  3364: s1 = s1 << 0x18\n  3367: a5 = a5 | s1\n  3370: a3 = a3 | a5\n  3373: a4 = u8 [a0 + 0x1d]\n  3376: a5 = u8 [a0 + 0x1c]\n  3379: s1 = u8 [a0 + 0x1e]\n  3382: a1 = u8 [a0 + 0x1f]\n  3385: a4 = a4 << 0x8\n  3388: a4 = a4 | a5\n  3391: s1 = s1 << 0x10\n  3394: a1 = a1 << 0x18\n  3397: a1 = a1 | s1\n  3400: a1 = a1 | a4\n  3403: a1 = a1 << 0x20\n  3406: a3 = a3 | a1\n  3409: a1 = u8 [a0 + 0x9]\n  3412: a4 = u8 [a0 + 0x8]\n  3415: a5 = u8 [a0 + 0xa]\n  3418: s1 = u8 [a0 + 0xb]\n  3421: a1 = a1 << 0x8\n  3424: a1 = a1 | a4\n  3427: a5 = a5 << 0x10\n  3430: s1 = s1 << 0x18\n  3433: a5 = a5 | s1\n  3436: a1 = a1 | a5\n  3439: a4 = u8 [a0 + 0xd]\n  3442: a5 = u8 [a0 + 0xc]\n  3445: s1 = u8 [a0 + 0xe]\n  3448: a0 = u8 [a0 + 0xf]\n  3451: a4 = a4 << 0x8\n  3454: a4 = a4 | a5\n  3457: s1 = s1 << 0x10\n  3460: a0 = a0 << 0x18\n  3463: a0 = a0 | s1\n  3466: a0 = a0 | a4\n  3469: a0 = a0 << 0x20\n  3472: a0 = a0 | a1\n  3475: a1 = reverse a0\n  3477: a0 = reverse a3\n  3479: a2 = reverse a2\n  3481: a3 = reverse t0\n  3483: a2 = a2 | a3\n  3486: a3 = a0 | a1\n  3489: a3 = a3 | a2\n  3492: a3 = a3 >> 0x20\n  3495: a1 = a1 | a2\n  3498: a1 = a1 << 0x20\n  3501: a1 = a1 | a3\n  3504: jump @74 if a1 == 0\n      : @71 (gas: 1)\n  3507: trap\n      : @72 (gas: 3)\n  3508: a0 = 0\n  3510: a1 = 0\n  3512: ra = 62, jump @0\n      : @73 [@dyn 31] (gas: 5)\n  3517: i32 a1 = a0 + 0\n  3519: a0 = 0x1\n  3522: a2 = 0\n  3524: ecalli 11 // 'seal_return'\n  3526: fallthrough\n      : @74 (gas: 7)\n  3527: a1 = u64 [sp + 0x8]\n  3530: a1 = a1 << 0x20\n  3533: s1 = a1 >> 0x20\n  3536: i32 a0 = a0 + 0\n  3538: u64 [sp + 0x8] = a0\n  3541: a1 = 0x20\n  3544: ra = 64, jump @0\n      : @75 [@dyn 32] (gas: 58)\n  3549: a1 = reverse s1\n  3551: a2 = u64 [sp + 0x10]\n  3554: a2 = reverse a2\n  3556: a3 = u64 [sp + 0x18]\n  3559: a3 = reverse a3\n  3561: a4 = a3 >> 0x38\n  3564: u8 [a0 + 0x1f] = a4\n  3567: a4 = a3 >> 0x30\n  3570: u8 [a0 + 0x1e] = a4\n  3573: a4 = a3 >> 0x28\n  3576: u8 [a0 + 0x1d] = a4\n  3579: a4 = a3 >> 0x20\n  3582: u8 [a0 + 0x1c] = a4\n  3585: a4 = a3 >> 0x18\n  3588: u8 [a0 + 0x1b] = a4\n  3591: a4 = a3 >> 0x10\n  3594: u8 [a0 + 0x1a] = a4\n  3597: a4 = a3 >> 0x8\n  3600: u8 [a0 + 0x19] = a4\n  3603: u8 [a0 + 0x18] = a3\n  3606: u8 [a0 + 0x10] = a2\n  3609: u8 [a0 + 11] = 0\n  3612: u8 [a0 + 10] = 0\n  3615: u8 [a0 + 9] = 0\n  3618: u8 [a0 + 7] = 0\n  3621: u8 [a0 + 6] = 0\n  3624: u8 [a0 + 5] = 0\n  3627: u8 [a0 + 4] = 0\n  3630: u8 [a0 + 3] = 0\n  3633: u8 [a0 + 2] = 0\n  3636: u8 [a0 + 1] = 0\n  3639: u8 [a0 + 0] = 0\n  3641: a3 = a2 >> 0x38\n  3644: u8 [a0 + 0x17] = a3\n  3647: a3 = a2 >> 0x30\n  3650: u8 [a0 + 0x16] = a3\n  3653: a3 = a2 >> 0x28\n  3656: u8 [a0 + 0x15] = a3\n  3659: a3 = a2 >> 0x20\n  3662: u8 [a0 + 0x14] = a3\n  3665: a3 = a2 >> 0x18\n  3668: u8 [a0 + 0x13] = a3\n  3671: a3 = a2 >> 0x10\n  3674: u8 [a0 + 0x12] = a3\n  3677: a2 = a2 >> 0x8\n  3680: u8 [a0 + 0x11] = a2\n  3683: u8 [a0 + 0x8] = a1\n  3686: a2 = a1 >> 0x38\n  3689: u8 [a0 + 0xf] = a2\n  3692: a2 = a1 >> 0x30\n  3695: u8 [a0 + 0xe] = a2\n  3698: a2 = a1 >> 0x28\n  3701: u8 [a0 + 0xd] = a2\n  3704: a1 = a1 >> 0x20\n  3707: u8 [a0 + 0xc] = a1\n  3710: a1 = 0x20\n  3713: a0 = u64 [sp + 0x8]\n  3716: ra = 66, jump @0\n      : @76 [@dyn 33] (gas: 6)\n  3721: i32 a1 = a0 + 0\n  3723: a2 = 0x20\n  3726: a0 = 0\n  3728: ra = 0x44\n  3731: ecalli 11 // 'seal_return'\n  3733: fallthrough\n      : @77 [@dyn 34] (gas: 9)\n  3734: a2 = u64 [a1 + 0x18]\n  3737: a3 = u64 [a1 + 0x10]\n  3740: a4 = u64 [a1 + 0x8]\n  3743: a1 = u64 [a1]\n  3745: u64 [a0 + 0x18] = a2\n  3748: u64 [a0 + 0x10] = a3\n  3751: u64 [a0 + 0x8] = a4\n  3754: u64 [a0] = a1\n  3756: ret\n      : @78 (gas: 8)\n  3758: a0 = u64 [sp + 0x70]\n  3761: a1 = u64 [sp + 0x78]\n  3764: a2 = u64 [sp + 0x68]\n  3767: a3 = u64 [sp + 0x60]\n  3770: a1 = a1 | a2\n  3773: a0 = a0 | a3\n  3776: a0 = a0 | a1\n  3779: jump @84 if a0 != 0\n      : @79 (gas: 2)\n  3783: a0 = i32 [0x20004]\n  3788: jump @84 if a0 <=u 67\n      : @80 (gas: 31)\n  3793: i32 a0 = sp + 0x80\n  3797: a1 = 0x4\n  3800: ecalli 2 // 'call_data_load'\n  3802: a0 = u64 [sp + 0x80]\n  3806: u64 [sp + 0x18] = a0\n  3809: a0 = u64 [sp + 0x88]\n  3813: u64 [sp + 0x10] = a0\n  3816: a0 = u64 [sp + 0x90]\n  3820: u64 [sp + 0x8] = a0\n  3823: s1 = u64 [sp + 0x98]\n  3827: i32 a0 = sp + 0x80\n  3831: a1 = 0x24\n  3834: ecalli 2 // 'call_data_load'\n  3836: a0 = u64 [sp + 0x80]\n  3840: a1 = u64 [sp + 0x88]\n  3844: a2 = u64 [sp + 0x90]\n  3848: a3 = u64 [sp + 0x98]\n  3852: u64 [sp + 0x38] = a3\n  3855: u64 [sp + 0x30] = a2\n  3858: u64 [sp + 0x28] = a1\n  3861: u64 [sp + 0x20] = a0\n  3864: u64 [sp + 0x58] = s1\n  3867: a0 = u64 [sp + 0x8]\n  3870: u64 [sp + 0x50] = a0\n  3873: a0 = u64 [sp + 0x10]\n  3876: u64 [sp + 0x48] = a0\n  3879: a0 = sp + 0x40\n  3882: a1 = sp + 0x20\n  3885: a2 = u64 [sp + 0x18]\n  3888: u64 [sp + 0x40] = a2\n  3891: ra = 70, jump @259\n      : @81 [@dyn 35] (gas: 3)\n  3896: a0 = 0x40\n  3899: a1 = 0x20\n  3902: ra = 72, jump @0\n      : @82 [@dyn 36] (gas: 100)\n  3907: a1 = u8 [a0 + 0x11]\n  3910: a2 = u8 [a0 + 0x10]\n  3913: a3 = u8 [a0 + 0x12]\n  3916: a4 = u8 [a0 + 0x13]\n  3919: a1 = a1 << 0x8\n  3922: a1 = a1 | a2\n  3925: a3 = a3 << 0x10\n  3928: a4 = a4 << 0x18\n  3931: a3 = a3 | a4\n  3934: a1 = a1 | a3\n  3937: a2 = u8 [a0 + 0x15]\n  3940: a3 = u8 [a0 + 0x14]\n  3943: a4 = u8 [a0 + 0x16]\n  3946: a5 = u8 [a0 + 0x17]\n  3949: a2 = a2 << 0x8\n  3952: a2 = a2 | a3\n  3955: a4 = a4 << 0x10\n  3958: a5 = a5 << 0x18\n  3961: a4 = a4 | a5\n  3964: a2 = a2 | a4\n  3967: a2 = a2 << 0x20\n  3970: t0 = a2 | a1\n  3973: a2 = u8 [a0 + 0x1]\n  3976: a3 = u8 [a0]\n  3978: a4 = u8 [a0 + 0x2]\n  3981: a5 = u8 [a0 + 0x3]\n  3984: a2 = a2 << 0x8\n  3987: a2 = a2 | a3\n  3990: a4 = a4 << 0x10\n  3993: a5 = a5 << 0x18\n  3996: a4 = a4 | a5\n  3999: a2 = a2 | a4\n  4002: a3 = u8 [a0 + 0x5]\n  4005: a4 = u8 [a0 + 0x4]\n  4008: a5 = u8 [a0 + 0x6]\n  4011: s1 = u8 [a0 + 0x7]\n  4014: a3 = a3 << 0x8\n  4017: a3 = a3 | a4\n  4020: a5 = a5 << 0x10\n  4023: s1 = s1 << 0x18\n  4026: a5 = a5 | s1\n  4029: a3 = a3 | a5\n  4032: a3 = a3 << 0x20\n  4035: a2 = a2 | a3\n  4038: a3 = u8 [a0 + 0x19]\n  4041: a4 = u8 [a0 + 0x18]\n  4044: a5 = u8 [a0 + 0x1a]\n  4047: s1 = u8 [a0 + 0x1b]\n  4050: a3 = a3 << 0x8\n  4053: a3 = a3 | a4\n  4056: a5 = a5 << 0x10\n  4059: s1 = s1 << 0x18\n  4062: a5 = a5 | s1\n  4065: a3 = a3 | a5\n  4068: a4 = u8 [a0 + 0x1d]\n  4071: a5 = u8 [a0 + 0x1c]\n  4074: s1 = u8 [a0 + 0x1e]\n  4077: a1 = u8 [a0 + 0x1f]\n  4080: a4 = a4 << 0x8\n  4083: a4 = a4 | a5\n  4086: s1 = s1 << 0x10\n  4089: a1 = a1 << 0x18\n  4092: a1 = a1 | s1\n  4095: a1 = a1 | a4\n  4098: a1 = a1 << 0x20\n  4101: a3 = a3 | a1\n  4104: a1 = u8 [a0 + 0x9]\n  4107: a4 = u8 [a0 + 0x8]\n  4110: a5 = u8 [a0 + 0xa]\n  4113: s1 = u8 [a0 + 0xb]\n  4116: a1 = a1 << 0x8\n  4119: a1 = a1 | a4\n  4122: a5 = a5 << 0x10\n  4125: s1 = s1 << 0x18\n  4128: a5 = a5 | s1\n  4131: a1 = a1 | a5\n  4134: a4 = u8 [a0 + 0xd]\n  4137: a5 = u8 [a0 + 0xc]\n  4140: s1 = u8 [a0 + 0xe]\n  4143: a0 = u8 [a0 + 0xf]\n  4146: a4 = a4 << 0x8\n  4149: a4 = a4 | a5\n  4152: s1 = s1 << 0x10\n  4155: a0 = a0 << 0x18\n  4158: a0 = a0 | s1\n  4161: a0 = a0 | a4\n  4164: a0 = a0 << 0x20\n  4167: a0 = a0 | a1\n  4170: a1 = reverse a0\n  4172: a0 = reverse a3\n  4174: a2 = reverse a2\n  4176: a3 = reverse t0\n  4178: a2 = a2 | a3\n  4181: a3 = a0 | a1\n  4184: a3 = a3 | a2\n  4187: a3 = a3 >> 0x20\n  4190: a1 = a1 | a2\n  4193: a1 = a1 << 0x20\n  4196: a1 = a1 | a3\n  4199: jump @86 if a1 == 0\n      : @83 (gas: 1)\n  4202: trap\n      : @84 (gas: 3)\n  4203: a0 = 0\n  4205: a1 = 0\n  4207: ra = 74, jump @0\n      : @85 [@dyn 37] (gas: 7)\n  4212: i32 a1 = a0 + 0\n  4214: a0 = 0x1\n  4217: a2 = 0\n  4219: ecalli 11 // 'seal_return'\n  4221: i32 a0 = a0 + 0\n  4223: ra = 0x4c\n  4226: jump @0\n      : @86 (gas: 2)\n  4229: i32 a0 = a0 + 0\n  4231: ra = 76, jump @0\n      : @87 [@dyn 38] (gas: 6)\n  4236: i32 a1 = a0 + 0\n  4238: a0 = 0\n  4240: a2 = 0\n  4242: ra = 0x4e\n  4245: ecalli 11 // 'seal_return'\n  4247: fallthrough\n      : @88 [@dyn 39] (gas: 12)\n  4248: a2 = u64 [a1 + 0x10]\n  4251: a3 = u64 [a1 + 0x18]\n  4254: a4 = u64 [a1 + 0x8]\n  4257: a1 = u64 [a1]\n  4259: a3 = a3 | a4\n  4262: a4 = a1 | a2\n  4265: a4 = a4 | a3\n  4268: a4 = a4 >> 0x20\n  4271: a2 = a2 | a3\n  4274: a2 = a2 << 0x20\n  4277: a2 = a2 | a4\n  4280: jump @91 if a2 != 0\n      : @89 (gas: 7)\n  4284: sp = sp + 0xfffffffffffffff0\n  4287: u64 [sp + 0x8] = ra\n  4290: u64 [sp] = s0\n  4292: s0 = a0\n  4294: i32 a0 = a1 + 0\n  4296: a1 = 0x20\n  4299: ra = 80, jump @0\n      : @90 [@dyn 40] (gas: 100)\n  4304: a1 = u8 [a0 + 0x1]\n  4307: a2 = u8 [a0]\n  4309: a3 = u8 [a0 + 0x2]\n  4312: a4 = u8 [a0 + 0x3]\n  4315: a1 = a1 << 0x8\n  4318: a1 = a1 | a2\n  4321: a3 = a3 << 0x10\n  4324: a4 = a4 << 0x18\n  4327: a3 = a3 | a4\n  4330: a1 = a1 | a3\n  4333: a2 = u8 [a0 + 0x5]\n  4336: a3 = u8 [a0 + 0x4]\n  4339: a4 = u8 [a0 + 0x6]\n  4342: a5 = u8 [a0 + 0x7]\n  4345: a2 = a2 << 0x8\n  4348: a2 = a2 | a3\n  4351: a4 = a4 << 0x10\n  4354: a5 = a5 << 0x18\n  4357: a4 = a4 | a5\n  4360: a2 = a2 | a4\n  4363: a2 = a2 << 0x20\n  4366: t0 = a2 | a1\n  4369: a2 = u8 [a0 + 0x9]\n  4372: a3 = u8 [a0 + 0x8]\n  4375: a4 = u8 [a0 + 0xa]\n  4378: a5 = u8 [a0 + 0xb]\n  4381: a2 = a2 << 0x8\n  4384: a2 = a2 | a3\n  4387: a4 = a4 << 0x10\n  4390: a5 = a5 << 0x18\n  4393: a4 = a4 | a5\n  4396: a2 = a2 | a4\n  4399: a3 = u8 [a0 + 0xd]\n  4402: a4 = u8 [a0 + 0xc]\n  4405: a5 = u8 [a0 + 0xe]\n  4408: a1 = u8 [a0 + 0xf]\n  4411: a3 = a3 << 0x8\n  4414: a3 = a3 | a4\n  4417: a5 = a5 << 0x10\n  4420: a1 = a1 << 0x18\n  4423: a1 = a1 | a5\n  4426: a1 = a1 | a3\n  4429: a1 = a1 << 0x20\n  4432: t1 = a1 | a2\n  4435: a1 = u8 [a0 + 0x11]\n  4438: a3 = u8 [a0 + 0x10]\n  4441: a4 = u8 [a0 + 0x12]\n  4444: a5 = u8 [a0 + 0x13]\n  4447: a1 = a1 << 0x8\n  4450: a1 = a1 | a3\n  4453: a4 = a4 << 0x10\n  4456: a5 = a5 << 0x18\n  4459: a4 = a4 | a5\n  4462: a1 = a1 | a4\n  4465: a3 = u8 [a0 + 0x15]\n  4468: a4 = u8 [a0 + 0x14]\n  4471: a5 = u8 [a0 + 0x16]\n  4474: a2 = u8 [a0 + 0x17]\n  4477: a3 = a3 << 0x8\n  4480: a3 = a3 | a4\n  4483: a5 = a5 << 0x10\n  4486: a2 = a2 << 0x18\n  4489: a2 = a2 | a5\n  4492: a2 = a2 | a3\n  4495: a2 = a2 << 0x20\n  4498: a3 = a2 | a1\n  4501: a1 = u8 [a0 + 0x19]\n  4504: a2 = u8 [a0 + 0x18]\n  4507: a4 = u8 [a0 + 0x1a]\n  4510: a5 = u8 [a0 + 0x1b]\n  4513: a1 = a1 << 0x8\n  4516: a1 = a1 | a2\n  4519: a4 = a4 << 0x10\n  4522: a5 = a5 << 0x18\n  4525: a4 = a4 | a5\n  4528: a1 = a1 | a4\n  4531: a2 = u8 [a0 + 0x1d]\n  4534: a4 = u8 [a0 + 0x1c]\n  4537: a5 = u8 [a0 + 0x1e]\n  4540: a0 = u8 [a0 + 0x1f]\n  4543: a2 = a2 << 0x8\n  4546: a2 = a2 | a4\n  4549: a5 = a5 << 0x10\n  4552: a0 = a0 << 0x18\n  4555: a0 = a0 | a5\n  4558: a0 = a0 | a2\n  4561: a0 = a0 << 0x20\n  4564: a0 = a0 | a1\n  4567: a0 = reverse a0\n  4569: a1 = reverse a3\n  4571: a2 = reverse t1\n  4573: a3 = reverse t0\n  4575: u64 [s0 + 0x18] = a3\n  4578: u64 [s0 + 0x10] = a2\n  4581: u64 [s0 + 0x8] = a1\n  4584: u64 [s0] = a0\n  4586: ra = u64 [sp + 0x8]\n  4589: s0 = u64 [sp]\n  4591: sp = sp + 0x10\n  4594: ret\n      : @91 (gas: 1)\n  4596: trap\n      : @92 (gas: 20)\n  4597: sp = sp + 0xffffffffffffffb0\n  4600: u64 [sp + 0x48] = ra\n  4603: u64 [sp + 0x40] = s0\n  4606: u64 [sp + 0x38] = s1\n  4609: a4 = u64 [a1 + 0x10]\n  4612: a3 = u64 [a1 + 0x18]\n  4615: a5 = u64 [a1 + 0x8]\n  4618: s0 = u64 [a1]\n  4620: u64 [sp + 0x28] = a3\n  4623: u64 [sp + 0x20] = a5\n  4626: a1 = a5 | a3\n  4629: a3 = s0 | a4\n  4632: a3 = a3 | a1\n  4635: a3 = a3 >> 0x20\n  4638: u64 [sp + 0x30] = a4\n  4641: a1 = a1 | a4\n  4644: a1 = a1 << 0x20\n  4647: a1 = a1 | a3\n  4650: u64 [sp + 0x18] = a0\n  4653: jump @95 if a1 != 0\n      : @93 (gas: 10)\n  4657: a0 = u64 [a2 + 0x18]\n  4660: u64 [sp] = a0\n  4662: s1 = u64 [a2 + 0x10]\n  4665: a0 = u64 [a2 + 0x8]\n  4668: u64 [sp + 0x8] = a0\n  4671: a0 = u64 [a2]\n  4673: u64 [sp + 0x10] = a0\n  4676: i32 a0 = s0 + 0\n  4678: a1 = 0x20\n  4681: ra = 82, jump @0\n      : @94 [@dyn 41] (gas: 88)\n  4686: a1 = u64 [sp]\n  4688: a1 = reverse a1\n  4690: a2 = reverse s1\n  4692: a3 = u64 [sp + 0x8]\n  4695: a3 = reverse a3\n  4697: a4 = u64 [sp + 0x10]\n  4700: a4 = reverse a4\n  4702: a5 = a4 >> 0x38\n  4705: u8 [a0 + 0x1f] = a5\n  4708: a5 = a4 >> 0x30\n  4711: u8 [a0 + 0x1e] = a5\n  4714: a5 = a4 >> 0x28\n  4717: u8 [a0 + 0x1d] = a5\n  4720: a5 = a4 >> 0x20\n  4723: u8 [a0 + 0x1c] = a5\n  4726: a5 = a4 >> 0x18\n  4729: u8 [a0 + 0x1b] = a5\n  4732: a5 = a4 >> 0x10\n  4735: u8 [a0 + 0x1a] = a5\n  4738: a5 = a4 >> 0x8\n  4741: u8 [a0 + 0x19] = a5\n  4744: u8 [a0 + 0x18] = a4\n  4747: u8 [a0 + 0x10] = a3\n  4750: a4 = a3 >> 0x38\n  4753: u8 [a0 + 0x17] = a4\n  4756: a4 = a3 >> 0x30\n  4759: u8 [a0 + 0x16] = a4\n  4762: a4 = a3 >> 0x28\n  4765: u8 [a0 + 0x15] = a4\n  4768: a4 = a3 >> 0x20\n  4771: u8 [a0 + 0x14] = a4\n  4774: a4 = a3 >> 0x18\n  4777: u8 [a0 + 0x13] = a4\n  4780: a4 = a3 >> 0x10\n  4783: u8 [a0 + 0x12] = a4\n  4786: a3 = a3 >> 0x8\n  4789: u8 [a0 + 0x11] = a3\n  4792: u8 [a0 + 0x8] = a2\n  4795: a3 = a2 >> 0x38\n  4798: u8 [a0 + 0xf] = a3\n  4801: a3 = a2 >> 0x30\n  4804: u8 [a0 + 0xe] = a3\n  4807: a3 = a2 >> 0x28\n  4810: u8 [a0 + 0xd] = a3\n  4813: a3 = a2 >> 0x20\n  4816: u8 [a0 + 0xc] = a3\n  4819: a3 = a2 >> 0x18\n  4822: u8 [a0 + 0xb] = a3\n  4825: a3 = a2 >> 0x10\n  4828: u8 [a0 + 0xa] = a3\n  4831: a2 = a2 >> 0x8\n  4834: u8 [a0 + 0x9] = a2\n  4837: u8 [a0] = a1\n  4839: a2 = a1 >> 0x38\n  4842: u8 [a0 + 0x7] = a2\n  4845: a2 = a1 >> 0x30\n  4848: u8 [a0 + 0x6] = a2\n  4851: a2 = a1 >> 0x28\n  4854: u8 [a0 + 0x5] = a2\n  4857: a2 = a1 >> 0x20\n  4860: u8 [a0 + 0x4] = a2\n  4863: a2 = a1 >> 0x18\n  4866: u8 [a0 + 0x3] = a2\n  4869: a2 = a1 >> 0x10\n  4872: u8 [a0 + 0x2] = a2\n  4875: a1 = a1 >> 0x8\n  4878: u8 [a0 + 0x1] = a1\n  4881: a0 = s0 + 0x20\n  4884: a1 = a0 <u s0\n  4887: a3 = u64 [sp + 0x20]\n  4890: a2 = a3 + a1\n  4893: a3 = a2 <u a3\n  4896: a3 = a1 if a1 == 0\n  4899: a1 = u64 [sp + 0x30]\n  4902: a3 = a3 + a1\n  4905: a1 = a3 <u a1\n  4908: a4 = u64 [sp + 0x28]\n  4911: a1 = a1 + a4\n  4914: a4 = u64 [sp + 0x18]\n  4917: u64 [a4] = a0\n  4919: u64 [a4 + 0x8] = a2\n  4922: u64 [a4 + 0x10] = a3\n  4925: u64 [a4 + 0x18] = a1\n  4928: ra = u64 [sp + 0x48]\n  4931: s0 = u64 [sp + 0x40]\n  4934: s1 = u64 [sp + 0x38]\n  4937: sp = sp + 0x50\n  4940: ret\n      : @95 (gas: 1)\n  4942: trap\n      : @96 (gas: 19)\n  4943: sp = sp + 0xfffffffffffffeb8\n  4947: u64 [sp + 0x140] = ra\n  4951: u64 [sp + 0x138] = s0\n  4955: u64 [sp + 0x130] = s1\n  4959: a4 = u64 [a0 + 0x10]\n  4962: a5 = u64 [a0 + 0x18]\n  4965: a2 = u64 [a0 + 0x8]\n  4968: a3 = u64 [a0]\n  4970: u64 [sp + 0x120] = a2\n  4974: u64 [sp + 0xe8] = a5\n  4978: a0 = a2 | a5\n  4981: a2 = a3 | a4\n  4984: a2 = a2 | a0\n  4987: a2 = a2 >> 0x20\n  4990: u64 [sp + 0xf0] = a4\n  4994: a0 = a0 | a4\n  4997: a0 = a0 << 0x20\n  5000: a0 = a0 | a2\n  5003: jump @113 if a0 != 0\n      : @97 (gas: 11)\n  5007: a0 = u64 [a1 + 0x18]\n  5010: u64 [sp + 0xf8] = a0\n  5014: s1 = u64 [a1 + 0x10]\n  5017: s0 = u64 [a1 + 0x8]\n  5020: a0 = u64 [a1]\n  5022: u64 [sp + 0x128] = a0\n  5026: i32 a0 = a3 + 0\n  5028: a1 = 0x20\n  5031: u64 [sp + 0x108] = a0\n  5035: u64 [sp + 0x118] = a3\n  5039: ra = 84, jump @0\n      : @98 [@dyn 42] (gas: 12)\n  5044: a3 = u64 [sp + 0x128]\n  5048: a1 = a3 | s1\n  5051: u64 [sp + 0x110] = s0\n  5055: a2 = u64 [sp + 0xf8]\n  5059: a2 = a2 | s0\n  5062: a1 = a1 | a2\n  5065: a1 = a1 >> 0x20\n  5068: u64 [sp + 0xe0] = s1\n  5072: a2 = a2 | s1\n  5075: a2 = a2 << 0x20\n  5078: a1 = a1 | a2\n  5081: jump @113 if a1 != 0\n      : @99 (gas: 42)\n  5085: a1 = u8 [a0 + 0xc]\n  5088: u64 [sp + 0xd8] = a1\n  5092: a1 = u8 [a0 + 0xd]\n  5095: u64 [sp + 0xd0] = a1\n  5099: a1 = u8 [a0 + 0xe]\n  5102: u64 [sp + 0xc8] = a1\n  5106: a1 = u8 [a0 + 0xf]\n  5109: u64 [sp + 0xc0] = a1\n  5113: a1 = u8 [a0 + 0x10]\n  5116: u64 [sp + 0xb8] = a1\n  5120: a1 = u8 [a0 + 0x11]\n  5123: u64 [sp + 0xb0] = a1\n  5127: a1 = u8 [a0 + 0x12]\n  5130: u64 [sp + 0xa8] = a1\n  5134: a1 = u8 [a0 + 0x13]\n  5137: u64 [sp + 0xa0] = a1\n  5141: a1 = u8 [a0 + 0x14]\n  5144: u64 [sp + 0x98] = a1\n  5148: a1 = u8 [a0 + 0x15]\n  5151: u64 [sp + 0x90] = a1\n  5155: a1 = u8 [a0 + 0x16]\n  5158: u64 [sp + 0x88] = a1\n  5162: a1 = u8 [a0 + 0x17]\n  5165: u64 [sp + 0x80] = a1\n  5169: a1 = u8 [a0 + 0x18]\n  5172: u64 [sp + 0x78] = a1\n  5175: a1 = u8 [a0 + 0x19]\n  5178: u64 [sp + 0x70] = a1\n  5181: a1 = u8 [a0 + 0x1a]\n  5184: u64 [sp + 0x68] = a1\n  5187: a1 = u8 [a0 + 0x1b]\n  5190: u64 [sp + 0x60] = a1\n  5193: a1 = u8 [a0 + 0x1c]\n  5196: u64 [sp + 0x58] = a1\n  5199: a1 = u8 [a0 + 0x1d]\n  5202: u64 [sp + 0x50] = a1\n  5205: s0 = u8 [a0 + 0x1e]\n  5208: s1 = u8 [a0 + 0x1f]\n  5211: i32 a0 = a3 + 0\n  5213: a1 = 0x20\n  5216: u64 [sp + 0x100] = a0\n  5220: ra = 86, jump @0\n      : @100 [@dyn 43] (gas: 61)\n  5225: u8 [a0 + 0x1f] = s1\n  5228: u8 [a0 + 0x1e] = s0\n  5231: a1 = u64 [sp + 0x50]\n  5234: u8 [a0 + 0x1d] = a1\n  5237: a1 = u64 [sp + 0x58]\n  5240: u8 [a0 + 0x1c] = a1\n  5243: a1 = u64 [sp + 0x60]\n  5246: u8 [a0 + 0x1b] = a1\n  5249: a1 = u64 [sp + 0x68]\n  5252: u8 [a0 + 0x1a] = a1\n  5255: a1 = u64 [sp + 0x70]\n  5258: u8 [a0 + 0x19] = a1\n  5261: a1 = u64 [sp + 0x78]\n  5264: u8 [a0 + 0x18] = a1\n  5267: a1 = u64 [sp + 0x80]\n  5271: u8 [a0 + 0x17] = a1\n  5274: a1 = u64 [sp + 0x88]\n  5278: u8 [a0 + 0x16] = a1\n  5281: a1 = u64 [sp + 0x90]\n  5285: u8 [a0 + 0x15] = a1\n  5288: a1 = u64 [sp + 0x98]\n  5292: u8 [a0 + 0x14] = a1\n  5295: a1 = u64 [sp + 0xa0]\n  5299: u8 [a0 + 0x13] = a1\n  5302: a1 = u64 [sp + 0xa8]\n  5306: u8 [a0 + 0x12] = a1\n  5309: a1 = u64 [sp + 0xb0]\n  5313: u8 [a0 + 0x11] = a1\n  5316: a1 = u64 [sp + 0xb8]\n  5320: u8 [a0 + 0x10] = a1\n  5323: a1 = u64 [sp + 0xc0]\n  5327: u8 [a0 + 0xf] = a1\n  5330: a1 = u64 [sp + 0xc8]\n  5334: u8 [a0 + 0xe] = a1\n  5337: a1 = u64 [sp + 0xd0]\n  5341: u8 [a0 + 0xd] = a1\n  5344: a1 = u64 [sp + 0xd8]\n  5348: u8 [a0 + 0xc] = a1\n  5351: u8 [a0 + 11] = 0\n  5354: u8 [a0 + 10] = 0\n  5357: u8 [a0 + 9] = 0\n  5360: u8 [a0 + 8] = 0\n  5363: u8 [a0 + 7] = 0\n  5366: u8 [a0 + 6] = 0\n  5369: u8 [a0 + 5] = 0\n  5372: u8 [a0 + 4] = 0\n  5375: u8 [a0 + 3] = 0\n  5378: u8 [a0 + 2] = 0\n  5381: u8 [a0 + 1] = 0\n  5384: a1 = u64 [sp + 0xf0]\n  5388: a3 = u64 [sp + 0xe8]\n  5392: a3 = a3 | a1\n  5395: s0 = 0xffffffe0\n  5405: a1 = u64 [sp + 0x118]\n  5409: a1 = a1 <u s0\n  5412: a2 = u64 [sp + 0x120]\n  5416: a1 = 0 if a2 != 0\n  5418: u64 [sp + 0xf0] = a3\n  5422: a1 = 0 if a3 != 0\n  5424: u8 [a0 + 0] = 0\n  5426: jump @113 if a1 == 0\n      : @101 (gas: 4)\n  5430: a0 = u64 [sp + 0x108]\n  5434: i32 a0 = a0 + 0x20\n  5437: a1 = 0x20\n  5440: ra = 88, jump @0\n      : @102 [@dyn 44] (gas: 10)\n  5445: a1 = u64 [sp + 0xf8]\n  5449: a3 = u64 [sp + 0xe0]\n  5453: a3 = a3 | a1\n  5456: a1 = u64 [sp + 0x128]\n  5460: a1 = a1 <u s0\n  5463: a2 = u64 [sp + 0x110]\n  5467: a1 = 0 if a2 != 0\n  5469: u64 [sp + 0xf8] = a3\n  5473: a1 = 0 if a3 != 0\n  5475: jump @113 if a1 == 0\n      : @103 (gas: 66)\n  5479: a1 = u8 [a0]\n  5481: u64 [sp + 0xe8] = a1\n  5485: a1 = u8 [a0 + 0x1]\n  5488: u64 [sp + 0xe0] = a1\n  5492: a1 = u8 [a0 + 0x2]\n  5495: u64 [sp + 0xd8] = a1\n  5499: a1 = u8 [a0 + 0x3]\n  5502: u64 [sp + 0xd0] = a1\n  5506: a1 = u8 [a0 + 0x4]\n  5509: u64 [sp + 0xc8] = a1\n  5513: a1 = u8 [a0 + 0x5]\n  5516: u64 [sp + 0xc0] = a1\n  5520: a1 = u8 [a0 + 0x6]\n  5523: u64 [sp + 0xb8] = a1\n  5527: a1 = u8 [a0 + 0x7]\n  5530: u64 [sp + 0xb0] = a1\n  5534: a1 = u8 [a0 + 0x8]\n  5537: u64 [sp + 0xa8] = a1\n  5541: a1 = u8 [a0 + 0x9]\n  5544: u64 [sp + 0xa0] = a1\n  5548: a1 = u8 [a0 + 0xa]\n  5551: u64 [sp + 0x98] = a1\n  5555: a1 = u8 [a0 + 0xb]\n  5558: u64 [sp + 0x90] = a1\n  5562: a1 = u8 [a0 + 0xc]\n  5565: u64 [sp + 0x88] = a1\n  5569: a1 = u8 [a0 + 0xd]\n  5572: u64 [sp + 0x80] = a1\n  5576: a1 = u8 [a0 + 0xe]\n  5579: u64 [sp + 0x78] = a1\n  5582: a1 = u8 [a0 + 0xf]\n  5585: u64 [sp + 0x70] = a1\n  5588: a1 = u8 [a0 + 0x10]\n  5591: u64 [sp + 0x68] = a1\n  5594: a1 = u8 [a0 + 0x11]\n  5597: u64 [sp + 0x60] = a1\n  5600: a1 = u8 [a0 + 0x12]\n  5603: u64 [sp + 0x58] = a1\n  5606: a1 = u8 [a0 + 0x13]\n  5609: u64 [sp + 0x50] = a1\n  5612: a1 = u8 [a0 + 0x14]\n  5615: u64 [sp + 0x48] = a1\n  5618: a1 = u8 [a0 + 0x15]\n  5621: u64 [sp + 0x40] = a1\n  5624: a1 = u8 [a0 + 0x16]\n  5627: u64 [sp + 0x38] = a1\n  5630: a1 = u8 [a0 + 0x17]\n  5633: u64 [sp + 0x30] = a1\n  5636: a1 = u8 [a0 + 0x18]\n  5639: u64 [sp + 0x28] = a1\n  5642: a1 = u8 [a0 + 0x19]\n  5645: u64 [sp + 0x20] = a1\n  5648: a1 = u8 [a0 + 0x1a]\n  5651: u64 [sp + 0x18] = a1\n  5654: a1 = u8 [a0 + 0x1b]\n  5657: u64 [sp + 0x10] = a1\n  5660: a1 = u8 [a0 + 0x1c]\n  5663: u64 [sp + 0x8] = a1\n  5666: a1 = u8 [a0 + 0x1d]\n  5669: u64 [sp] = a1\n  5671: s0 = u8 [a0 + 0x1e]\n  5674: s1 = u8 [a0 + 0x1f]\n  5677: a0 = u64 [sp + 0x100]\n  5681: i32 a0 = a0 + 0x20\n  5684: a1 = 0x20\n  5687: ra = 90, jump @0\n      : @104 [@dyn 45] (gas: 70)\n  5692: u8 [a0 + 0x1f] = s1\n  5695: u8 [a0 + 0x1e] = s0\n  5698: a1 = u64 [sp]\n  5700: u8 [a0 + 0x1d] = a1\n  5703: a1 = u64 [sp + 0x8]\n  5706: u8 [a0 + 0x1c] = a1\n  5709: a1 = u64 [sp + 0x10]\n  5712: u8 [a0 + 0x1b] = a1\n  5715: a1 = u64 [sp + 0x18]\n  5718: u8 [a0 + 0x1a] = a1\n  5721: a1 = u64 [sp + 0x20]\n  5724: u8 [a0 + 0x19] = a1\n  5727: a1 = u64 [sp + 0x28]\n  5730: u8 [a0 + 0x18] = a1\n  5733: a1 = u64 [sp + 0x30]\n  5736: u8 [a0 + 0x17] = a1\n  5739: a1 = u64 [sp + 0x38]\n  5742: u8 [a0 + 0x16] = a1\n  5745: a1 = u64 [sp + 0x40]\n  5748: u8 [a0 + 0x15] = a1\n  5751: a1 = u64 [sp + 0x48]\n  5754: u8 [a0 + 0x14] = a1\n  5757: a1 = u64 [sp + 0x50]\n  5760: u8 [a0 + 0x13] = a1\n  5763: a1 = u64 [sp + 0x58]\n  5766: u8 [a0 + 0x12] = a1\n  5769: a1 = u64 [sp + 0x60]\n  5772: u8 [a0 + 0x11] = a1\n  5775: a1 = u64 [sp + 0x68]\n  5778: u8 [a0 + 0x10] = a1\n  5781: a1 = u64 [sp + 0x70]\n  5784: u8 [a0 + 0xf] = a1\n  5787: a1 = u64 [sp + 0x78]\n  5790: u8 [a0 + 0xe] = a1\n  5793: a1 = u64 [sp + 0x80]\n  5797: u8 [a0 + 0xd] = a1\n  5800: a1 = u64 [sp + 0x88]\n  5804: u8 [a0 + 0xc] = a1\n  5807: a1 = u64 [sp + 0x90]\n  5811: u8 [a0 + 0xb] = a1\n  5814: a1 = u64 [sp + 0x98]\n  5818: u8 [a0 + 0xa] = a1\n  5821: a1 = u64 [sp + 0xa0]\n  5825: u8 [a0 + 0x9] = a1\n  5828: a1 = u64 [sp + 0xa8]\n  5832: u8 [a0 + 0x8] = a1\n  5835: a1 = u64 [sp + 0xb0]\n  5839: u8 [a0 + 0x7] = a1\n  5842: a1 = u64 [sp + 0xb8]\n  5846: u8 [a0 + 0x6] = a1\n  5849: a1 = u64 [sp + 0xc0]\n  5853: u8 [a0 + 0x5] = a1\n  5856: a1 = u64 [sp + 0xc8]\n  5860: u8 [a0 + 0x4] = a1\n  5863: a1 = u64 [sp + 0xd0]\n  5867: u8 [a0 + 0x3] = a1\n  5870: a1 = u64 [sp + 0xd8]\n  5874: u8 [a0 + 0x2] = a1\n  5877: a1 = u64 [sp + 0xe0]\n  5881: u8 [a0 + 0x1] = a1\n  5884: s0 = 0xffffffc0\n  5894: a1 = u64 [sp + 0x118]\n  5898: a1 = a1 <u s0\n  5901: a2 = u64 [sp + 0x120]\n  5905: a1 = 0 if a2 != 0\n  5907: a2 = u64 [sp + 0xf0]\n  5911: a1 = 0 if a2 != 0\n  5913: a2 = u64 [sp + 0xe8]\n  5917: u8 [a0] = a2\n  5919: jump @113 if a1 == 0\n      : @105 (gas: 4)\n  5923: a0 = u64 [sp + 0x108]\n  5927: i32 a0 = a0 + 0x40\n  5930: a1 = 0x20\n  5933: ra = 92, jump @0\n      : @106 [@dyn 46] (gas: 7)\n  5938: a1 = u64 [sp + 0x128]\n  5942: a1 = a1 <u s0\n  5945: a2 = u64 [sp + 0x110]\n  5949: a1 = 0 if a2 != 0\n  5951: a2 = u64 [sp + 0xf8]\n  5955: a1 = 0 if a2 != 0\n  5957: jump @113 if a1 == 0\n      : @107 (gas: 66)\n  5961: a1 = u8 [a0]\n  5963: u64 [sp + 0xe8] = a1\n  5967: a1 = u8 [a0 + 0x1]\n  5970: u64 [sp + 0xe0] = a1\n  5974: a1 = u8 [a0 + 0x2]\n  5977: u64 [sp + 0xd8] = a1\n  5981: a1 = u8 [a0 + 0x3]\n  5984: u64 [sp + 0xd0] = a1\n  5988: a1 = u8 [a0 + 0x4]\n  5991: u64 [sp + 0xc8] = a1\n  5995: a1 = u8 [a0 + 0x5]\n  5998: u64 [sp + 0xc0] = a1\n  6002: a1 = u8 [a0 + 0x6]\n  6005: u64 [sp + 0xb8] = a1\n  6009: a1 = u8 [a0 + 0x7]\n  6012: u64 [sp + 0xb0] = a1\n  6016: a1 = u8 [a0 + 0x8]\n  6019: u64 [sp + 0xa8] = a1\n  6023: a1 = u8 [a0 + 0x9]\n  6026: u64 [sp + 0xa0] = a1\n  6030: a1 = u8 [a0 + 0xa]\n  6033: u64 [sp + 0x98] = a1\n  6037: a1 = u8 [a0 + 0xb]\n  6040: u64 [sp + 0x90] = a1\n  6044: a1 = u8 [a0 + 0xc]\n  6047: u64 [sp + 0x88] = a1\n  6051: a1 = u8 [a0 + 0xd]\n  6054: u64 [sp + 0x80] = a1\n  6058: a1 = u8 [a0 + 0xe]\n  6061: u64 [sp + 0x78] = a1\n  6064: a1 = u8 [a0 + 0xf]\n  6067: u64 [sp + 0x70] = a1\n  6070: a1 = u8 [a0 + 0x10]\n  6073: u64 [sp + 0x68] = a1\n  6076: a1 = u8 [a0 + 0x11]\n  6079: u64 [sp + 0x60] = a1\n  6082: a1 = u8 [a0 + 0x12]\n  6085: u64 [sp + 0x58] = a1\n  6088: a1 = u8 [a0 + 0x13]\n  6091: u64 [sp + 0x50] = a1\n  6094: a1 = u8 [a0 + 0x14]\n  6097: u64 [sp + 0x48] = a1\n  6100: a1 = u8 [a0 + 0x15]\n  6103: u64 [sp + 0x40] = a1\n  6106: a1 = u8 [a0 + 0x16]\n  6109: u64 [sp + 0x38] = a1\n  6112: a1 = u8 [a0 + 0x17]\n  6115: u64 [sp + 0x30] = a1\n  6118: a1 = u8 [a0 + 0x18]\n  6121: u64 [sp + 0x28] = a1\n  6124: a1 = u8 [a0 + 0x19]\n  6127: u64 [sp + 0x20] = a1\n  6130: a1 = u8 [a0 + 0x1a]\n  6133: u64 [sp + 0x18] = a1\n  6136: a1 = u8 [a0 + 0x1b]\n  6139: u64 [sp + 0x10] = a1\n  6142: a1 = u8 [a0 + 0x1c]\n  6145: u64 [sp + 0x8] = a1\n  6148: a1 = u8 [a0 + 0x1d]\n  6151: u64 [sp] = a1\n  6153: s0 = u8 [a0 + 0x1e]\n  6156: s1 = u8 [a0 + 0x1f]\n  6159: a0 = u64 [sp + 0x100]\n  6163: i32 a0 = a0 + 0x40\n  6166: a1 = 0x20\n  6169: ra = 94, jump @0\n      : @108 [@dyn 47] (gas: 70)\n  6174: u8 [a0 + 0x1f] = s1\n  6177: u8 [a0 + 0x1e] = s0\n  6180: a1 = u64 [sp]\n  6182: u8 [a0 + 0x1d] = a1\n  6185: a1 = u64 [sp + 0x8]\n  6188: u8 [a0 + 0x1c] = a1\n  6191: a1 = u64 [sp + 0x10]\n  6194: u8 [a0 + 0x1b] = a1\n  6197: a1 = u64 [sp + 0x18]\n  6200: u8 [a0 + 0x1a] = a1\n  6203: a1 = u64 [sp + 0x20]\n  6206: u8 [a0 + 0x19] = a1\n  6209: a1 = u64 [sp + 0x28]\n  6212: u8 [a0 + 0x18] = a1\n  6215: a1 = u64 [sp + 0x30]\n  6218: u8 [a0 + 0x17] = a1\n  6221: a1 = u64 [sp + 0x38]\n  6224: u8 [a0 + 0x16] = a1\n  6227: a1 = u64 [sp + 0x40]\n  6230: u8 [a0 + 0x15] = a1\n  6233: a1 = u64 [sp + 0x48]\n  6236: u8 [a0 + 0x14] = a1\n  6239: a1 = u64 [sp + 0x50]\n  6242: u8 [a0 + 0x13] = a1\n  6245: a1 = u64 [sp + 0x58]\n  6248: u8 [a0 + 0x12] = a1\n  6251: a1 = u64 [sp + 0x60]\n  6254: u8 [a0 + 0x11] = a1\n  6257: a1 = u64 [sp + 0x68]\n  6260: u8 [a0 + 0x10] = a1\n  6263: a1 = u64 [sp + 0x70]\n  6266: u8 [a0 + 0xf] = a1\n  6269: a1 = u64 [sp + 0x78]\n  6272: u8 [a0 + 0xe] = a1\n  6275: a1 = u64 [sp + 0x80]\n  6279: u8 [a0 + 0xd] = a1\n  6282: a1 = u64 [sp + 0x88]\n  6286: u8 [a0 + 0xc] = a1\n  6289: a1 = u64 [sp + 0x90]\n  6293: u8 [a0 + 0xb] = a1\n  6296: a1 = u64 [sp + 0x98]\n  6300: u8 [a0 + 0xa] = a1\n  6303: a1 = u64 [sp + 0xa0]\n  6307: u8 [a0 + 0x9] = a1\n  6310: a1 = u64 [sp + 0xa8]\n  6314: u8 [a0 + 0x8] = a1\n  6317: a1 = u64 [sp + 0xb0]\n  6321: u8 [a0 + 0x7] = a1\n  6324: a1 = u64 [sp + 0xb8]\n  6328: u8 [a0 + 0x6] = a1\n  6331: a1 = u64 [sp + 0xc0]\n  6335: u8 [a0 + 0x5] = a1\n  6338: a1 = u64 [sp + 0xc8]\n  6342: u8 [a0 + 0x4] = a1\n  6345: a1 = u64 [sp + 0xd0]\n  6349: u8 [a0 + 0x3] = a1\n  6352: a1 = u64 [sp + 0xd8]\n  6356: u8 [a0 + 0x2] = a1\n  6359: a1 = u64 [sp + 0xe0]\n  6363: u8 [a0 + 0x1] = a1\n  6366: s0 = 0xffffffa0\n  6376: a1 = u64 [sp + 0x118]\n  6380: a1 = a1 <u s0\n  6383: a2 = u64 [sp + 0x120]\n  6387: a1 = 0 if a2 != 0\n  6389: a2 = u64 [sp + 0xf0]\n  6393: a1 = 0 if a2 != 0\n  6395: a2 = u64 [sp + 0xe8]\n  6399: u8 [a0] = a2\n  6401: jump @113 if a1 == 0\n      : @109 (gas: 4)\n  6405: a0 = u64 [sp + 0x108]\n  6409: i32 a0 = a0 + 0x60\n  6412: a1 = 0x20\n  6415: ra = 96, jump @0\n      : @110 [@dyn 48] (gas: 7)\n  6420: a1 = u64 [sp + 0x128]\n  6424: a1 = a1 <u s0\n  6427: a2 = u64 [sp + 0x110]\n  6431: a1 = 0 if a2 != 0\n  6433: a2 = u64 [sp + 0xf8]\n  6437: a1 = 0 if a2 != 0\n  6439: jump @113 if a1 == 0\n      : @111 (gas: 94)\n  6443: a1 = u8 [a0 + 0x1d]\n  6446: a2 = u8 [a0 + 0x1c]\n  6449: a3 = u8 [a0 + 0x1e]\n  6452: a4 = u8 [a0 + 0x1f]\n  6455: a1 = a1 << 0x8\n  6458: a1 = a1 | a2\n  6461: a3 = a3 << 0x10\n  6464: a4 = a4 << 0x18\n  6467: a3 = a3 | a4\n  6470: a1 = a1 | a3\n  6473: a2 = u8 [a0 + 0xd]\n  6476: a3 = u8 [a0 + 0xc]\n  6479: a4 = u8 [a0 + 0xe]\n  6482: a5 = u8 [a0 + 0xf]\n  6485: a2 = a2 << 0x8\n  6488: a2 = a2 | a3\n  6491: a4 = a4 << 0x10\n  6494: a5 = a5 << 0x18\n  6497: a4 = a4 | a5\n  6500: a2 = a2 | a4\n  6503: a1 = a1 | a2\n  6506: a1 = a1 << 0x20\n  6509: a2 = u8 [a0 + 0x9]\n  6512: a3 = u8 [a0 + 0x8]\n  6515: a4 = u8 [a0 + 0xa]\n  6518: a5 = u8 [a0 + 0xb]\n  6521: a2 = a2 << 0x8\n  6524: a2 = a2 | a3\n  6527: a4 = a4 << 0x10\n  6530: a5 = a5 << 0x18\n  6533: a4 = a4 | a5\n  6536: a2 = a2 | a4\n  6539: a3 = u8 [a0 + 0x19]\n  6542: a4 = u8 [a0 + 0x18]\n  6545: a5 = u8 [a0 + 0x1a]\n  6548: s1 = u8 [a0 + 0x1b]\n  6551: a3 = a3 << 0x8\n  6554: a3 = a3 | a4\n  6557: a5 = a5 << 0x10\n  6560: s1 = s1 << 0x18\n  6563: a5 = a5 | s1\n  6566: a3 = a3 | a5\n  6569: a2 = a2 | a3\n  6572: a1 = a1 | a2\n  6575: a2 = u8 [a0 + 0x15]\n  6578: a3 = u8 [a0 + 0x14]\n  6581: a4 = u8 [a0 + 0x16]\n  6584: a5 = u8 [a0 + 0x17]\n  6587: a2 = a2 << 0x8\n  6590: a2 = a2 | a3\n  6593: a4 = a4 << 0x10\n  6596: a5 = a5 << 0x18\n  6599: a4 = a4 | a5\n  6602: a2 = a2 | a4\n  6605: a3 = u8 [a0 + 0x5]\n  6608: a4 = u8 [a0 + 0x4]\n  6611: a5 = u8 [a0 + 0x6]\n  6614: s1 = u8 [a0 + 0x7]\n  6617: a3 = a3 << 0x8\n  6620: a3 = a3 | a4\n  6623: a5 = a5 << 0x10\n  6626: s1 = s1 << 0x18\n  6629: a5 = a5 | s1\n  6632: a3 = a3 | a5\n  6635: a2 = a2 | a3\n  6638: a3 = u8 [a0 + 0x1]\n  6641: a4 = u8 [a0]\n  6643: a5 = u8 [a0 + 0x2]\n  6646: s1 = u8 [a0 + 0x3]\n  6649: a3 = a3 << 0x8\n  6652: a3 = a3 | a4\n  6655: a5 = a5 << 0x10\n  6658: s1 = s1 << 0x18\n  6661: a4 = u8 [a0 + 0x11]\n  6664: a5 = a5 | s1\n  6667: a3 = a3 | a5\n  6670: a5 = u8 [a0 + 0x10]\n  6673: a4 = a4 << 0x8\n  6676: s1 = u8 [a0 + 0x12]\n  6679: a0 = u8 [a0 + 0x13]\n  6682: a4 = a4 | a5\n  6685: a2 = a2 << 0x20\n  6688: s1 = s1 << 0x10\n  6691: a0 = a0 << 0x18\n  6694: a0 = a0 | s1\n  6697: a0 = a0 | a4\n  6700: a0 = a0 | a3\n  6703: a0 = a0 | a2\n  6706: a0 = a0 | a1\n  6709: s0 = a0 >u 0\n  6711: a0 = u64 [sp + 0x100]\n  6715: i32 a0 = a0 + 0x60\n  6718: a1 = 0x20\n  6721: ra = 98, jump @0\n      : @112 [@dyn 49] (gas: 37)\n  6726: u8 [a0 + 30] = 0\n  6729: u8 [a0 + 29] = 0\n  6732: u8 [a0 + 28] = 0\n  6735: u8 [a0 + 27] = 0\n  6738: u8 [a0 + 26] = 0\n  6741: u8 [a0 + 25] = 0\n  6744: u8 [a0 + 24] = 0\n  6747: u8 [a0 + 23] = 0\n  6750: u8 [a0 + 22] = 0\n  6753: u8 [a0 + 21] = 0\n  6756: u8 [a0 + 20] = 0\n  6759: u8 [a0 + 19] = 0\n  6762: u8 [a0 + 18] = 0\n  6765: u8 [a0 + 17] = 0\n  6768: u8 [a0 + 16] = 0\n  6771: u8 [a0 + 15] = 0\n  6774: u8 [a0 + 14] = 0\n  6777: u8 [a0 + 13] = 0\n  6780: u8 [a0 + 12] = 0\n  6783: u8 [a0 + 11] = 0\n  6786: u8 [a0 + 10] = 0\n  6789: u8 [a0 + 9] = 0\n  6792: u8 [a0 + 8] = 0\n  6795: u8 [a0 + 7] = 0\n  6798: u8 [a0 + 6] = 0\n  6801: u8 [a0 + 5] = 0\n  6804: u8 [a0 + 4] = 0\n  6807: u8 [a0 + 3] = 0\n  6810: u8 [a0 + 2] = 0\n  6813: u8 [a0 + 1] = 0\n  6816: u8 [a0 + 0] = 0\n  6818: u8 [a0 + 0x1f] = s0\n  6821: ra = u64 [sp + 0x140]\n  6825: s0 = u64 [sp + 0x138]\n  6829: s1 = u64 [sp + 0x130]\n  6833: sp = sp + 0x148\n  6837: ret\n      : @113 (gas: 1)\n  6839: trap\n      : @114 (gas: 22)\n  6840: sp = sp + 0xffffffffffffff20\n  6844: u64 [sp + 0xd8] = ra\n  6848: u64 [sp + 0xd0] = s0\n  6852: u64 [sp + 0xc8] = s1\n  6856: s0 = sp + 0xe0\n  6860: sp = sp & 0xfffffffffffffff0\n  6863: a3 = u64 [a1 + 0x18]\n  6866: a4 = u64 [a1 + 0x10]\n  6869: a5 = u64 [a1 + 0x8]\n  6872: s1 = u64 [a1]\n  6874: u64 [sp + 0x78] = a3\n  6877: u64 [sp + 0x68] = a5\n  6880: a1 = a5 | a3\n  6883: a3 = s1 | a4\n  6886: a3 = a3 | a1\n  6889: a3 = a3 >> 0x20\n  6892: u64 [sp + 0x70] = a4\n  6895: a1 = a1 | a4\n  6898: a1 = a1 << 0x20\n  6901: a1 = a1 | a3\n  6904: u64 [sp + 0x10] = a0\n  6907: jump @129 if a1 != 0\n      : @115 (gas: 13)\n  6911: a0 = u64 [a2 + 0x18]\n  6914: u64 [sp + 0x60] = a0\n  6917: a0 = u64 [a2 + 0x10]\n  6920: u64 [sp + 0x48] = a0\n  6923: a0 = u64 [a2 + 0x8]\n  6926: u64 [sp + 0x40] = a0\n  6929: a0 = u64 [a2]\n  6931: u64 [sp + 0x50] = a0\n  6934: u64 [sp + 0x58] = s1\n  6937: i32 a0 = s1 + 0\n  6939: a1 = 0x20\n  6942: s1 = 0x20\n  6945: ra = 100, jump @0\n      : @116 [@dyn 50] (gas: 44)\n  6950: a3 = u64 [sp + 0x50]\n  6953: u8 [a0 + 0x1f] = s1\n  6956: a4 = u64 [sp + 0x48]\n  6959: a1 = a3 | a4\n  6962: a2 = u64 [sp + 0x60]\n  6965: a5 = u64 [sp + 0x40]\n  6968: a2 = a2 | a5\n  6971: a1 = a1 | a2\n  6974: a1 = a1 >> 0x20\n  6977: a2 = a2 | a4\n  6980: a2 = a2 << 0x20\n  6983: a1 = a1 | a2\n  6986: u8 [a0 + 30] = 0\n  6989: u8 [a0 + 29] = 0\n  6992: u8 [a0 + 28] = 0\n  6995: u8 [a0 + 27] = 0\n  6998: u8 [a0 + 26] = 0\n  7001: u8 [a0 + 25] = 0\n  7004: u8 [a0 + 24] = 0\n  7007: u8 [a0 + 23] = 0\n  7010: u8 [a0 + 22] = 0\n  7013: u8 [a0 + 21] = 0\n  7016: u8 [a0 + 20] = 0\n  7019: u8 [a0 + 19] = 0\n  7022: u8 [a0 + 18] = 0\n  7025: u8 [a0 + 17] = 0\n  7028: u8 [a0 + 16] = 0\n  7031: u8 [a0 + 15] = 0\n  7034: u8 [a0 + 14] = 0\n  7037: u8 [a0 + 13] = 0\n  7040: u8 [a0 + 12] = 0\n  7043: u8 [a0 + 11] = 0\n  7046: u8 [a0 + 10] = 0\n  7049: u8 [a0 + 9] = 0\n  7052: u8 [a0 + 8] = 0\n  7055: u8 [a0 + 7] = 0\n  7058: u8 [a0 + 6] = 0\n  7061: u8 [a0 + 5] = 0\n  7064: u8 [a0 + 4] = 0\n  7067: u8 [a0 + 3] = 0\n  7070: u8 [a0 + 2] = 0\n  7073: u8 [a0 + 1] = 0\n  7076: u8 [a0 + 0] = 0\n  7078: jump @129 if a1 != 0\n      : @117 (gas: 18)\n  7082: a0 = u64 [sp + 0x58]\n  7085: a1 = a0 + 0x20\n  7088: u64 [sp + 0x30] = a1\n  7091: a0 = a1 <u a0\n  7094: a1 = u64 [sp + 0x68]\n  7097: a2 = a1 + a0\n  7100: u64 [sp + 0x38] = a2\n  7103: a1 = a2 <u a1\n  7106: a1 = a0 if a0 == 0\n  7109: a0 = u64 [sp + 0x70]\n  7112: s1 = a0 + a1\n  7115: a0 = s1 <u a0\n  7118: a1 = u64 [sp + 0x78]\n  7121: a0 = a0 + a1\n  7124: u64 [sp + 0x28] = a0\n  7127: i32 a0 = a3 + 0\n  7129: a1 = 0x20\n  7132: ra = 102, jump @0\n      : @118 [@dyn 51] (gas: 11)\n  7137: t0 = u64 [sp + 0x30]\n  7140: a1 = t0 | s1\n  7143: a2 = u64 [sp + 0x38]\n  7146: a3 = u64 [sp + 0x28]\n  7149: a2 = a2 | a3\n  7152: a1 = a1 | a2\n  7155: a1 = a1 >> 0x20\n  7158: a2 = a2 | s1\n  7161: a2 = a2 << 0x20\n  7164: a1 = a1 | a2\n  7167: jump @129 if a1 != 0\n      : @119 (gas: 94)\n  7171: a1 = u8 [a0 + 0x19]\n  7174: a2 = u8 [a0 + 0x18]\n  7177: a3 = u8 [a0 + 0x1a]\n  7180: a4 = u8 [a0 + 0x1b]\n  7183: a1 = a1 << 0x8\n  7186: a1 = a1 | a2\n  7189: a3 = a3 << 0x10\n  7192: a4 = a4 << 0x18\n  7195: a3 = a3 | a4\n  7198: a1 = a1 | a3\n  7201: a2 = u8 [a0 + 0x1d]\n  7204: a3 = u8 [a0 + 0x1c]\n  7207: a4 = u8 [a0 + 0x1e]\n  7210: a5 = u8 [a0 + 0x1f]\n  7213: a2 = a2 << 0x8\n  7216: a2 = a2 | a3\n  7219: a4 = a4 << 0x10\n  7222: a5 = a5 << 0x18\n  7225: a4 = a4 | a5\n  7228: a2 = a2 | a4\n  7231: a2 = a2 << 0x20\n  7234: a1 = a1 | a2\n  7237: u64 [sp + 0x38] = a1\n  7240: a1 = u8 [a0 + 0x11]\n  7243: a2 = u8 [a0 + 0x10]\n  7246: a3 = u8 [a0 + 0x12]\n  7249: a4 = u8 [a0 + 0x13]\n  7252: a1 = a1 << 0x8\n  7255: a1 = a1 | a2\n  7258: a3 = a3 << 0x10\n  7261: a4 = a4 << 0x18\n  7264: a3 = a3 | a4\n  7267: a1 = a1 | a3\n  7270: a2 = u8 [a0 + 0x15]\n  7273: a3 = u8 [a0 + 0x14]\n  7276: a4 = u8 [a0 + 0x16]\n  7279: a5 = u8 [a0 + 0x17]\n  7282: a2 = a2 << 0x8\n  7285: a2 = a2 | a3\n  7288: a4 = a4 << 0x10\n  7291: a5 = a5 << 0x18\n  7294: a4 = a4 | a5\n  7297: a2 = a2 | a4\n  7300: a2 = a2 << 0x20\n  7303: a1 = a1 | a2\n  7306: u64 [sp + 0x28] = a1\n  7309: a1 = u8 [a0 + 0x9]\n  7312: a2 = u8 [a0 + 0x8]\n  7315: a3 = u8 [a0 + 0xa]\n  7318: a4 = u8 [a0 + 0xb]\n  7321: a1 = a1 << 0x8\n  7324: a1 = a1 | a2\n  7327: a3 = a3 << 0x10\n  7330: a4 = a4 << 0x18\n  7333: a3 = a3 | a4\n  7336: a1 = a1 | a3\n  7339: a2 = u8 [a0 + 0xd]\n  7342: a3 = u8 [a0 + 0xc]\n  7345: a4 = u8 [a0 + 0xe]\n  7348: a5 = u8 [a0 + 0xf]\n  7351: a2 = a2 << 0x8\n  7354: a2 = a2 | a3\n  7357: a4 = a4 << 0x10\n  7360: a5 = a5 << 0x18\n  7363: a4 = a4 | a5\n  7366: a2 = a2 | a4\n  7369: a2 = a2 << 0x20\n  7372: a1 = a1 | a2\n  7375: u64 [sp + 0x20] = a1\n  7378: a1 = u8 [a0 + 0x1]\n  7381: a2 = u8 [a0]\n  7383: a3 = u8 [a0 + 0x2]\n  7386: a4 = u8 [a0 + 0x3]\n  7389: a1 = a1 << 0x8\n  7392: a1 = a1 | a2\n  7395: a3 = a3 << 0x10\n  7398: a4 = a4 << 0x18\n  7401: a3 = a3 | a4\n  7404: a1 = a1 | a3\n  7407: a2 = u8 [a0 + 0x5]\n  7410: a3 = u8 [a0 + 0x4]\n  7413: a4 = u8 [a0 + 0x6]\n  7416: a0 = u8 [a0 + 0x7]\n  7419: a2 = a2 << 0x8\n  7422: a2 = a2 | a3\n  7425: a4 = a4 << 0x10\n  7428: a0 = a0 << 0x18\n  7431: a0 = a0 | a4\n  7434: a0 = a0 | a2\n  7437: a0 = a0 << 0x20\n  7440: s1 = a0 | a1\n  7443: i32 a0 = t0 + 0\n  7445: a1 = 0x20\n  7448: ra = 104, jump @0\n      : @120 [@dyn 52] (gas: 81)\n  7453: a3 = s1\n  7455: s1 = u64 [sp + 0x20]\n  7458: a4 = u64 [sp + 0x28]\n  7461: t2 = u64 [sp + 0x38]\n  7464: u8 [a0 + 0x10] = a4\n  7467: a1 = s1 >> 0x38\n  7470: u8 [a0 + 0xf] = a1\n  7473: a1 = s1 >> 0x30\n  7476: u8 [a0 + 0xe] = a1\n  7479: a1 = s1 >> 0x28\n  7482: u8 [a0 + 0xd] = a1\n  7485: a1 = s1 >> 0x20\n  7488: u8 [a0 + 0xc] = a1\n  7491: a1 = s1 >> 0x18\n  7494: u8 [a0 + 0xb] = a1\n  7497: a1 = s1 >> 0x10\n  7500: u8 [a0 + 0xa] = a1\n  7503: a1 = s1 >> 0x8\n  7506: u8 [a0 + 0x9] = a1\n  7509: u8 [a0 + 0x8] = s1\n  7512: a1 = a3 >> 0x38\n  7515: u8 [a0 + 0x7] = a1\n  7518: a1 = a3 >> 0x30\n  7521: u8 [a0 + 0x6] = a1\n  7524: a1 = a3 >> 0x28\n  7527: u8 [a0 + 0x5] = a1\n  7530: a1 = a3 >> 0x20\n  7533: u8 [a0 + 0x4] = a1\n  7536: a1 = a3 >> 0x18\n  7539: u8 [a0 + 0x3] = a1\n  7542: a1 = a3 >> 0x10\n  7545: u8 [a0 + 0x2] = a1\n  7548: a1 = a3 >> 0x8\n  7551: u8 [a0 + 0x1] = a1\n  7554: u8 [a0] = a3\n  7556: u8 [a0 + 0x18] = t2\n  7559: a1 = a4 >> 0x38\n  7562: u8 [a0 + 0x17] = a1\n  7565: a1 = a4 >> 0x30\n  7568: u8 [a0 + 0x16] = a1\n  7571: a1 = a4 >> 0x28\n  7574: u8 [a0 + 0x15] = a1\n  7577: a1 = a4 >> 0x20\n  7580: u8 [a0 + 0x14] = a1\n  7583: a1 = a4 >> 0x18\n  7586: u8 [a0 + 0x13] = a1\n  7589: a1 = a4 >> 0x10\n  7592: u8 [a0 + 0x12] = a1\n  7595: a1 = a4 >> 0x8\n  7598: u8 [a0 + 0x11] = a1\n  7601: a1 = t2 >> 0x38\n  7604: u8 [a0 + 0x1f] = a1\n  7607: a1 = t2 >> 0x30\n  7610: u8 [a0 + 0x1e] = a1\n  7613: a1 = t2 >> 0x28\n  7616: u8 [a0 + 0x1d] = a1\n  7619: a1 = t2 >> 0x20\n  7622: u8 [a0 + 0x1c] = a1\n  7625: a1 = t2 >> 0x18\n  7628: u8 [a0 + 0x1b] = a1\n  7631: a1 = t2 >> 0x10\n  7634: u8 [a0 + 0x1a] = a1\n  7637: a1 = t2 >> 0x8\n  7640: u8 [a0 + 0x19] = a1\n  7643: a0 = u64 [sp + 0x58]\n  7646: t0 = a0 + 0x40\n  7649: a0 = t0 <u a0\n  7652: a1 = u64 [sp + 0x68]\n  7655: t1 = a1 + a0\n  7658: a1 = t1 <u a1\n  7661: a1 = a0 if a0 == 0\n  7664: a0 = a3 | a4\n  7667: a2 = s1 | t2\n  7670: a0 = a0 | a2\n  7673: a5 = u64 [sp + 0x70]\n  7676: a2 = a5 + a1\n  7679: a1 = a2 <u a5\n  7682: a5 = u64 [sp + 0x78]\n  7685: a1 = a1 + a5\n  7688: u64 [sp + 0x78] = a1\n  7691: jump @127 if a0 == 0\n      : @121 (gas: 162)\n  7695: u64 [sp + 0x68] = a2\n  7698: u64 [sp + 0x70] = t1\n  7701: u64 [sp + 0x58] = t0\n  7704: a5 = reverse a3\n  7706: a3 = reverse s1\n  7708: u64 [sp + 0x20] = a3\n  7711: a2 = reverse a4\n  7713: a0 = reverse t2\n  7715: t0 = 0x1\n  7718: a1 = a0\n  7720: a1 = t0 if a2 == 0\n  7723: a4 = maxu(a0, t0)\n  7726: a4 = a1 if a2 != 0\n  7729: a1 = a3 >u 0\n  7731: s1 = a5\n  7733: a5 = a5 >u 0\n  7735: a5 = a1 if s1 == 0\n  7738: u64 [sp + 0x30] = s1\n  7741: a0 = t0 if a5 == 0\n  7744: s1 = s1 | a3\n  7747: a0 = a4 if s1 == 0\n  7750: a1 = a2\n  7752: a1 = 0 if a5 == 0\n  7754: a1 = a2 if s1 == 0\n  7757: t2 = a1\n  7759: a1 = 0xffffffe0\n  7769: a3 = u64 [sp + 0x50]\n  7772: t0 = a1 <u a3\n  7775: a5 = a3\n  7777: a4 = u64 [sp + 0x40]\n  7780: a3 = a4 >u 0\n  7782: a3 = t0 if a4 == 0\n  7785: a2 = a4\n  7787: s1 = u64 [sp + 0x48]\n  7790: a4 = -s1\n  7792: ra = a4 - a3\n  7795: t1 = ra >u 0\n  7797: a3 = a4 <u a3\n  7800: a4 = s1 >u 0\n  7802: s1 = u64 [sp + 0x60]\n  7805: a4 = a4 + s1\n  7808: s1 = -a4\n  7810: s1 = s1 - a3\n  7813: a4 = s1 >u 0\n  7815: a4 = t1 if s1 == 0\n  7818: a5 = a1 - a5\n  7821: a3 = -a2\n  7823: a2 = a3 - t0\n  7826: u64 [sp + 0x38] = a1\n  7829: t1 = a1 <u a5\n  7832: a3 = a2 >u 0\n  7834: a3 = t1 if a2 == 0\n  7837: a1 = ra | s1\n  7840: a3 = a4 if a1 != 0\n  7843: a5 = 0 if a3 != 0\n  7845: a4 = a5 + 0x1f\n  7848: a1 = a4 <u a5\n  7851: a2 = 0 if a3 != 0\n  7853: a5 = a2 + a1\n  7856: t1 = a5 <u a2\n  7859: t1 = a1 if a1 == 0\n  7862: ra = 0 if a3 != 0\n  7864: a1 = ra + t1\n  7867: u64 [sp] = a1\n  7869: a1 = a1 << 0x3b\n  7872: a2 = a5 >> 0x5\n  7875: a2 = a2 | a1\n  7878: a5 = a5 << 0x3b\n  7881: a4 = a4 >> 0x5\n  7884: a5 = a5 | a4\n  7887: u64 [sp + 0x28] = a5\n  7890: a1 = a0 <u 0x1\n  7893: t0 = t2\n  7895: t2 = t2 - a1\n  7898: t1 = a0 + 0xffffffffffffffff\n  7901: a1 = a2\n  7903: u64 [sp + 0x18] = a2\n  7906: a2 = t2 ^ a2\n  7909: a1 = t2 <u a1\n  7912: a4 = t1 <u a5\n  7915: a4 = a1 if a2 != 0\n  7918: u64 [sp + 0x8] = a4\n  7921: a4 = u64 [sp + 0x20]\n  7924: a1 = a4\n  7926: a2 = u64 [sp + 0x30]\n  7929: a1 = 0 if a2 == 0\n  7931: a1 = a4 if a2 == 0\n  7934: a0 = a0 | t0\n  7937: a0 = a0 <u 0x1\n  7940: a4 = a1 <u a0\n  7943: t0 = a2 - a4\n  7946: a5 = a1 - a0\n  7949: s1 = 0 if a3 != 0\n  7951: a3 = u64 [sp]\n  7953: a0 = a3 <u ra\n  7956: ra = u64 [sp + 0x60]\n  7959: a0 = a0 + s1\n  7962: a3 = a3 >> 0x5\n  7965: a4 = a0 << 0x3b\n  7968: a3 = a3 | a4\n  7971: a2 = a0 >> 0x5\n  7974: a1 = a5 <u a3\n  7977: s1 = t0 ^ a2\n  7980: a4 = t0 <u a2\n  7983: a0 = t0\n  7985: a4 = a1 if s1 == 0\n  7988: a1 = a5 ^ a3\n  7991: a1 = a1 | s1\n  7994: t0 = u64 [sp + 0x40]\n  7997: s1 = u64 [sp + 0x8]\n  8000: a4 = s1 if a1 == 0\n  8003: a0 = a2 if a4 == 0\n  8006: u64 [sp + 0x30] = a0\n  8009: a5 = a3 if a4 == 0\n  8012: a0 = u64 [sp + 0x18]\n  8015: t2 = a0 if a4 == 0\n  8018: a0 = u64 [sp + 0x28]\n  8021: t1 = a0 if a4 == 0\n  8024: a0 = t1 >> 0x3b\n  8027: a1 = t2 << 0x5\n  8030: a0 = a0 | a1\n  8033: t1 = t1 << 0x5\n  8036: a0 = a0 + t0\n  8039: s1 = u64 [sp + 0x50]\n  8042: t1 = t1 + s1\n  8045: u64 [sp + 0x28] = t1\n  8048: a1 = t1 <u s1\n  8051: t1 = a0 + a1\n  8054: a3 = t1 ^ t0\n  8057: a4 = t1 <u t0\n  8060: a4 = a1 if a3 == 0\n  8063: a1 = t2 >> 0x3b\n  8066: a3 = a5 << 0x5\n  8069: a1 = a1 | a3\n  8072: a2 = a5 >> 0x3b\n  8075: t2 = u64 [sp + 0x30]\n  8078: t2 = t2 << 0x5\n  8081: a2 = t2 | a2\n  8084: a2 = a2 + ra\n  8087: a0 = u64 [sp + 0x48]\n  8090: a1 = a1 + a0\n  8093: a3 = a1 <u a0\n  8096: a2 = a2 + a3\n  8099: a4 = a4 + a1\n  8102: a1 = a4 <u a1\n  8105: a1 = a1 + a2\n  8108: a3 = u64 [sp + 0x28]\n  8111: a2 = a3 + 0x20\n  8114: u64 [sp + 0x30] = a2\n  8117: a2 = a2 <u a3\n  8120: a5 = a0\n  8122: a3 = s1\n  8124: a0 = t1 + a2\n  8127: u64 [sp + 0x28] = a0\n  8130: a0 = a0 <u t1\n  8133: a0 = a2 if a2 == 0\n  8136: a0 = a0 + a4\n  8139: u64 [sp + 0x20] = a0\n  8142: a0 = a0 <u a4\n  8145: a0 = a0 + a1\n  8148: u64 [sp + 0x18] = a0\n  8151: fallthrough\n      : @122 (gas: 6)\n  8152: a0 = a5 | ra\n  8155: a1 = u64 [sp + 0x38]\n  8158: a1 = a3 <u a1\n  8161: a1 = 0 if t0 != 0\n  8163: a1 = 0 if a0 != 0\n  8165: jump @129 if a1 == 0\n      : @123 (gas: 15)\n  8169: a0 = a3 + 0x20\n  8172: u64 [sp + 0x48] = a0\n  8175: a0 = a0 <u a3\n  8178: a1 = t0 + a0\n  8181: u64 [sp + 0x50] = a1\n  8184: s1 = a1 <u t0\n  8187: s1 = a0 if a0 == 0\n  8190: s1 = s1 + a5\n  8193: u64 [sp + 0x40] = s1\n  8196: a0 = s1 <u a5\n  8199: ra = ra + a0\n  8202: u64 [sp + 0x60] = ra\n  8205: i32 a0 = a3 + 0x20\n  8208: a1 = 0x20\n  8211: ra = 106, jump @0\n      : @124 [@dyn 53] (gas: 107)\n  8216: a1 = u8 [a0 + 0x1]\n  8219: a2 = u8 [a0]\n  8221: a3 = u8 [a0 + 0x2]\n  8224: a4 = u8 [a0 + 0x3]\n  8227: a1 = a1 << 0x8\n  8230: a1 = a1 | a2\n  8233: a3 = a3 << 0x10\n  8236: a4 = a4 << 0x18\n  8239: a3 = a3 | a4\n  8242: a1 = a1 | a3\n  8245: a2 = u8 [a0 + 0x5]\n  8248: a3 = u8 [a0 + 0x4]\n  8251: a4 = u8 [a0 + 0x6]\n  8254: a5 = u8 [a0 + 0x7]\n  8257: a2 = a2 << 0x8\n  8260: a2 = a2 | a3\n  8263: a4 = a4 << 0x10\n  8266: a5 = a5 << 0x18\n  8269: a4 = a4 | a5\n  8272: a2 = a2 | a4\n  8275: a2 = a2 << 0x20\n  8278: t0 = a2 | a1\n  8281: a2 = u8 [a0 + 0x9]\n  8284: a3 = u8 [a0 + 0x8]\n  8287: a4 = u8 [a0 + 0xa]\n  8290: a5 = u8 [a0 + 0xb]\n  8293: a2 = a2 << 0x8\n  8296: a2 = a2 | a3\n  8299: a4 = a4 << 0x10\n  8302: a5 = a5 << 0x18\n  8305: a4 = a4 | a5\n  8308: a2 = a2 | a4\n  8311: a3 = u8 [a0 + 0xd]\n  8314: a4 = u8 [a0 + 0xc]\n  8317: a5 = u8 [a0 + 0xe]\n  8320: a1 = u8 [a0 + 0xf]\n  8323: a3 = a3 << 0x8\n  8326: a3 = a3 | a4\n  8329: a5 = a5 << 0x10\n  8332: a1 = a1 << 0x18\n  8335: a1 = a1 | a5\n  8338: a1 = a1 | a3\n  8341: a1 = a1 << 0x20\n  8344: a2 = a2 | a1\n  8347: a1 = u8 [a0 + 0x11]\n  8350: a3 = u8 [a0 + 0x10]\n  8353: a4 = u8 [a0 + 0x12]\n  8356: a5 = u8 [a0 + 0x13]\n  8359: a1 = a1 << 0x8\n  8362: a1 = a1 | a3\n  8365: a4 = a4 << 0x10\n  8368: a5 = a5 << 0x18\n  8371: a4 = a4 | a5\n  8374: a1 = a1 | a4\n  8377: a3 = u8 [a0 + 0x15]\n  8380: a4 = u8 [a0 + 0x14]\n  8383: a5 = u8 [a0 + 0x16]\n  8386: s1 = u8 [a0 + 0x17]\n  8389: a3 = a3 << 0x8\n  8392: a3 = a3 | a4\n  8395: a5 = a5 << 0x10\n  8398: s1 = s1 << 0x18\n  8401: a5 = a5 | s1\n  8404: a3 = a3 | a5\n  8407: a3 = a3 << 0x20\n  8410: a3 = a3 | a1\n  8413: a1 = u8 [a0 + 0x19]\n  8416: a4 = u8 [a0 + 0x18]\n  8419: a5 = u8 [a0 + 0x1a]\n  8422: s1 = u8 [a0 + 0x1b]\n  8425: a1 = a1 << 0x8\n  8428: a1 = a1 | a4\n  8431: a5 = a5 << 0x10\n  8434: s1 = s1 << 0x18\n  8437: a5 = a5 | s1\n  8440: a1 = a1 | a5\n  8443: a4 = u8 [a0 + 0x1d]\n  8446: a5 = u8 [a0 + 0x1c]\n  8449: s1 = u8 [a0 + 0x1e]\n  8452: a0 = u8 [a0 + 0x1f]\n  8455: a4 = a4 << 0x8\n  8458: a4 = a4 | a5\n  8461: s1 = s1 << 0x10\n  8464: a0 = a0 << 0x18\n  8467: a0 = a0 | s1\n  8470: a0 = a0 | a4\n  8473: a0 = a0 << 0x20\n  8476: a0 = a0 | a1\n  8479: a4 = reverse a0\n  8481: a0 = reverse a3\n  8483: a1 = reverse a2\n  8485: a2 = reverse t0\n  8487: a3 = u64 [sp + 0x78]\n  8490: u64 [sp + 0x98] = a3\n  8494: a3 = u64 [sp + 0x68]\n  8497: u64 [sp + 0x90] = a3\n  8501: a3 = u64 [sp + 0x70]\n  8504: u64 [sp + 0x88] = a3\n  8508: s1 = u64 [sp + 0x58]\n  8511: u64 [sp + 0x80] = s1\n  8515: u64 [sp + 0xb8] = a2\n  8519: u64 [sp + 0xb0] = a1\n  8523: u64 [sp + 0xa8] = a0\n  8527: a0 = sp + 0xa0\n  8531: a1 = sp + 0x80\n  8535: u64 [sp + 0xa0] = a4\n  8539: ra = 108, jump @96\n      : @125 [@dyn 54] (gas: 33)\n  8544: ra = u64 [sp + 0x60]\n  8547: t2 = s1 + 0x80\n  8551: a2 = t2 <u s1\n  8554: a0 = u64 [sp + 0x70]\n  8557: a1 = a0 + a2\n  8560: a3 = a1 <u a0\n  8563: a3 = a2 if a2 == 0\n  8566: a0 = u64 [sp + 0x68]\n  8569: a2 = a0 + a3\n  8572: t0 = a2 <u a0\n  8575: a4 = u64 [sp + 0x20]\n  8578: a0 = u64 [sp + 0x40]\n  8581: a4 = a4 ^ a0\n  8584: a5 = u64 [sp + 0x30]\n  8587: a3 = u64 [sp + 0x48]\n  8590: a5 = a5 ^ a3\n  8593: t1 = a5 | a4\n  8596: a5 = u64 [sp + 0x18]\n  8599: a5 = ra ^ a5\n  8602: s1 = u64 [sp + 0x28]\n  8605: a4 = u64 [sp + 0x50]\n  8608: s1 = s1 ^ a4\n  8611: a5 = a5 | s1\n  8614: s1 = t1 | a5\n  8617: a5 = u64 [sp + 0x78]\n  8620: a5 = a5 + t0\n  8623: u64 [sp + 0x78] = a5\n  8626: t0 = a4\n  8628: a5 = a0\n  8630: u64 [sp + 0x58] = t2\n  8633: u64 [sp + 0x70] = a1\n  8636: u64 [sp + 0x68] = a2\n  8639: jump @122 if s1 != 0\n      : @126 (gas: 1)\n  8643: jump @128\n      : @127 (gas: 3)\n  8645: t2 = t0\n  8647: a1 = t1\n  8649: fallthrough\n      : @128 (gas: 12)\n  8650: a3 = u64 [sp + 0x10]\n  8653: u64 [a3] = t2\n  8655: u64 [a3 + 0x8] = a1\n  8658: u64 [a3 + 0x10] = a2\n  8661: a0 = u64 [sp + 0x78]\n  8664: u64 [a3 + 0x18] = a0\n  8667: sp = s0 + 0xffffffffffffff20\n  8671: ra = u64 [sp + 0xd8]\n  8675: s0 = u64 [sp + 0xd0]\n  8679: s1 = u64 [sp + 0xc8]\n  8683: sp = sp + 0xe0\n  8687: ret\n      : @129 (gas: 1)\n  8689: trap\n      : @130 (gas: 8)\n  8690: a0 = u64 [sp + 0xf0]\n  8694: a1 = u64 [sp + 0xf8]\n  8698: a2 = u64 [sp + 0xe8]\n  8702: a3 = u64 [sp + 0xe0]\n  8706: a1 = a1 | a2\n  8709: a0 = a0 | a3\n  8712: a0 = a0 | a1\n  8715: jump @138 if a0 != 0\n      : @131 (gas: 2)\n  8719: a0 = i32 [0x20004]\n  8724: jump @138 if a0 <=u 3\n      : @132 (gas: 52)\n  8729: u64 [sp + 184] = 0\n  8733: u64 [sp + 176] = 0\n  8737: u64 [sp + 168] = 0\n  8741: a0 = sp + 0xc0\n  8745: a1 = sp + 0xa0\n  8749: u64 [sp + 160] = 0\n  8753: ra = 0x6e\n  8756: sp = sp + 0xfffffffffffffe40\n  8760: u64 [sp + 0x1b8] = ra\n  8764: u64 [sp + 0x1b0] = s0\n  8768: u64 [sp + 0x1a8] = s1\n  8772: s0 = sp + 0x1c0\n  8776: sp = sp & 0xffffffffffffffe0\n  8779: u64 [sp + 0x18] = a0\n  8782: a3 = u64 [a1 + 0x18]\n  8785: u64 [sp + 0x88] = a3\n  8789: a2 = u64 [a1 + 0x10]\n  8792: u64 [sp + 0x90] = a2\n  8796: a0 = u64 [a1 + 0x8]\n  8799: u64 [sp + 0x98] = a0\n  8803: s1 = u64 [a1]\n  8805: u64 [sp + 0x158] = a3\n  8809: u64 [sp + 0x150] = a2\n  8813: u64 [sp + 0x148] = a0\n  8817: u64 [sp + 0x140] = s1\n  8821: u64 [sp + 408] = 0\n  8825: u64 [sp + 400] = 0\n  8829: u64 [sp + 392] = 0\n  8833: u64 [sp + 384] = 0\n  8837: u32 [sp + 352] = 0x20\n  8842: i32 a1 = sp + 0x140\n  8846: i32 a3 = sp + 0x180\n  8850: i32 a4 = sp + 0x160\n  8854: a2 = 0xffffffffffffffff\n  8857: a0 = 0\n  8859: ecalli 6 // 'get_storage'\n  8861: a0 = u64 [sp + 0x198]\n  8865: u64 [sp + 0xb8] = a0\n  8869: a3 = u64 [sp + 0x190]\n  8873: u64 [sp + 0xa0] = a3\n  8877: a1 = u64 [sp + 0x188]\n  8881: u64 [sp + 0xb0] = a1\n  8885: a2 = u64 [sp + 0x180]\n  8889: u64 [sp + 0xa8] = a2\n  8893: u64 [sp + 0x118] = a0\n  8897: u64 [sp + 0x110] = a3\n  8901: u64 [sp + 0x108] = a1\n  8905: a0 = sp + 0x120\n  8909: a1 = sp + 0x100\n  8913: u64 [sp + 0x100] = a2\n  8917: ra = 0x136\n  8921: jump @316\n      : @133 [@dyn 55] (gas: 11)\n  8924: a0 = u64 [sp + 0xc0]\n  8928: u64 [sp + 0x38] = a0\n  8931: a0 = u64 [sp + 0xc8]\n  8935: u64 [sp + 0x30] = a0\n  8938: a0 = u64 [sp + 0xd0]\n  8942: u64 [sp + 0x28] = a0\n  8945: a0 = u64 [sp + 0xd8]\n  8949: u64 [sp + 0x20] = a0\n  8952: a0 = 0x40\n  8955: a1 = 0x20\n  8958: ra = 112, jump @0\n      : @134 [@dyn 56] (gas: 111)\n  8963: a1 = u8 [a0 + 0x1]\n  8966: a2 = u8 [a0]\n  8968: a3 = u8 [a0 + 0x2]\n  8971: a4 = u8 [a0 + 0x3]\n  8974: a1 = a1 << 0x8\n  8977: a1 = a1 | a2\n  8980: a3 = a3 << 0x10\n  8983: a4 = a4 << 0x18\n  8986: a3 = a3 | a4\n  8989: a1 = a1 | a3\n  8992: a2 = u8 [a0 + 0x5]\n  8995: a3 = u8 [a0 + 0x4]\n  8998: a4 = u8 [a0 + 0x6]\n  9001: a5 = u8 [a0 + 0x7]\n  9004: a2 = a2 << 0x8\n  9007: a2 = a2 | a3\n  9010: a4 = a4 << 0x10\n  9013: a5 = a5 << 0x18\n  9016: a4 = a4 | a5\n  9019: a2 = a2 | a4\n  9022: a2 = a2 << 0x20\n  9025: t0 = a2 | a1\n  9028: a2 = u8 [a0 + 0x9]\n  9031: a3 = u8 [a0 + 0x8]\n  9034: a4 = u8 [a0 + 0xa]\n  9037: a5 = u8 [a0 + 0xb]\n  9040: a2 = a2 << 0x8\n  9043: a2 = a2 | a3\n  9046: a4 = a4 << 0x10\n  9049: a5 = a5 << 0x18\n  9052: a4 = a4 | a5\n  9055: a2 = a2 | a4\n  9058: a3 = u8 [a0 + 0xd]\n  9061: a4 = u8 [a0 + 0xc]\n  9064: a5 = u8 [a0 + 0xe]\n  9067: s1 = u8 [a0 + 0xf]\n  9070: a3 = a3 << 0x8\n  9073: a3 = a3 | a4\n  9076: a5 = a5 << 0x10\n  9079: s1 = s1 << 0x18\n  9082: a5 = a5 | s1\n  9085: a3 = a3 | a5\n  9088: a3 = a3 << 0x20\n  9091: a2 = a2 | a3\n  9094: a3 = u8 [a0 + 0x11]\n  9097: a4 = u8 [a0 + 0x10]\n  9100: a5 = u8 [a0 + 0x12]\n  9103: s1 = u8 [a0 + 0x13]\n  9106: a3 = a3 << 0x8\n  9109: a3 = a3 | a4\n  9112: a5 = a5 << 0x10\n  9115: s1 = s1 << 0x18\n  9118: a5 = a5 | s1\n  9121: a3 = a3 | a5\n  9124: a4 = u8 [a0 + 0x15]\n  9127: a5 = u8 [a0 + 0x14]\n  9130: s1 = u8 [a0 + 0x16]\n  9133: a1 = u8 [a0 + 0x17]\n  9136: a4 = a4 << 0x8\n  9139: a4 = a4 | a5\n  9142: s1 = s1 << 0x10\n  9145: a1 = a1 << 0x18\n  9148: a1 = a1 | s1\n  9151: a1 = a1 | a4\n  9154: a1 = a1 << 0x20\n  9157: a3 = a3 | a1\n  9160: a1 = u8 [a0 + 0x19]\n  9163: a4 = u8 [a0 + 0x18]\n  9166: a5 = u8 [a0 + 0x1a]\n  9169: s1 = u8 [a0 + 0x1b]\n  9172: a1 = a1 << 0x8\n  9175: a1 = a1 | a4\n  9178: a5 = a5 << 0x10\n  9181: s1 = s1 << 0x18\n  9184: a5 = a5 | s1\n  9187: a1 = a1 | a5\n  9190: a4 = u8 [a0 + 0x1d]\n  9193: a5 = u8 [a0 + 0x1c]\n  9196: s1 = u8 [a0 + 0x1e]\n  9199: a0 = u8 [a0 + 0x1f]\n  9202: a4 = a4 << 0x8\n  9205: a4 = a4 | a5\n  9208: s1 = s1 << 0x10\n  9211: a0 = a0 << 0x18\n  9214: a0 = a0 | s1\n  9217: a0 = a0 | a4\n  9220: a0 = a0 << 0x20\n  9223: a0 = a0 | a1\n  9226: a4 = reverse a0\n  9228: u64 [sp + 0x8] = a4\n  9231: a3 = reverse a3\n  9233: u64 [sp + 0x10] = a3\n  9236: a1 = reverse a2\n  9238: u64 [sp + 0x18] = a1\n  9241: s1 = reverse t0\n  9243: a0 = u64 [sp + 0x20]\n  9246: u64 [sp + 0x58] = a0\n  9249: a0 = u64 [sp + 0x28]\n  9252: u64 [sp + 0x50] = a0\n  9255: a0 = u64 [sp + 0x30]\n  9258: u64 [sp + 0x48] = a0\n  9261: a0 = u64 [sp + 0x38]\n  9264: u64 [sp + 0x40] = a0\n  9267: u64 [sp + 0x78] = s1\n  9270: u64 [sp + 0x70] = a1\n  9273: u64 [sp + 0x68] = a3\n  9276: a0 = sp + 0x80\n  9280: a1 = sp + 0x60\n  9283: a2 = sp + 0x40\n  9286: u64 [sp + 0x60] = a4\n  9289: ra = 114, jump @114\n      : @135 [@dyn 57] (gas: 12)\n  9294: a4 = u64 [sp + 0x10]\n  9297: a2 = u64 [sp + 0x8]\n  9300: u64 [sp + 0x38] = s1\n  9303: a0 = a4 | s1\n  9306: s1 = u64 [sp + 0x18]\n  9309: a1 = a2 | s1\n  9312: a1 = a1 | a0\n  9315: a1 = a1 >> 0x20\n  9318: a0 = a0 | s1\n  9321: a0 = a0 << 0x20\n  9324: a0 = a0 | a1\n  9327: jump @137 if a0 != 0\n      : @136 (gas: 29)\n  9330: a0 = u64 [sp + 0x88]\n  9334: a1 = u64 [sp + 0x98]\n  9338: u64 [sp + 0x30] = a1\n  9341: t1 = u64 [sp + 0x80]\n  9345: a1 = u64 [sp + 0x90]\n  9349: t2 = a0 ^ a4\n  9352: a5 = a0 <u a4\n  9355: ra = t1 <u a2\n  9358: a5 = ra if t2 == 0\n  9361: a3 = a1 - s1\n  9364: t2 = a3 - a5\n  9367: t0 = a3 <u a5\n  9370: a3 = a1 <u s1\n  9373: a1 = u64 [sp + 0x38]\n  9376: a5 = u64 [sp + 0x30]\n  9379: a5 = a5 - a1\n  9382: a5 = a5 - a3\n  9385: a5 = a5 - t0\n  9388: a0 = a0 - a4\n  9391: a0 = a0 - ra\n  9394: s1 = t1 - a2\n  9397: a0 = a0 | a5\n  9400: a1 = s1 | t2\n  9403: a1 = a1 | a0\n  9406: a0 = a0 | t2\n  9409: a1 = a1 >> 0x20\n  9412: a0 = a0 << 0x20\n  9415: a0 = a0 | a1\n  9418: jump @140 if a0 == 0\n      : @137 (gas: 1)\n  9421: trap\n      : @138 (gas: 3)\n  9422: a0 = 0\n  9424: a1 = 0\n  9426: ra = 116, jump @0\n      : @139 [@dyn 58] (gas: 5)\n  9431: i32 a1 = a0 + 0\n  9433: a0 = 0x1\n  9436: a2 = 0\n  9438: ecalli 11 // 'seal_return'\n  9440: fallthrough\n      : @140 (gas: 4)\n  9441: i32 a0 = a2 + 0\n  9443: i32 s1 = s1 + 0\n  9445: a1 = s1\n  9447: ra = 118, jump @0\n      : @141 [@dyn 59] (gas: 6)\n  9452: i32 a1 = a0 + 0\n  9454: a0 = 0\n  9456: a2 = s1\n  9458: ra = 0x78\n  9461: ecalli 11 // 'seal_return'\n  9463: fallthrough\n      : @142 [@dyn 60] (gas: 52)\n  9464: sp = sp + 0xffffffffffffff80\n  9467: u64 [sp + 0x78] = ra\n  9470: u64 [sp + 0x70] = s0\n  9473: u64 [sp + 0x68] = s1\n  9476: s0 = sp + 0x80\n  9480: sp = sp & 0xffffffffffffffe0\n  9483: t2 = u64 [a1 + 0x10]\n  9486: a5 = u64 [a1 + 0x8]\n  9489: t0 = u64 [a2 + 0x8]\n  9492: s1 = u64 [a1]\n  9494: u64 [sp + 0x10] = s1\n  9497: a4 = u64 [a2]\n  9499: u64 [sp + 0x18] = a4\n  9502: ra = u64 [a2 + 0x10]\n  9505: a3 = t0 ^ a5\n  9508: u64 [sp + 0x38] = a3\n  9511: a3 = t0 <u a5\n  9514: a4 = a4 <u s1\n  9517: t1 = u64 [sp + 0x38]\n  9520: a3 = a4 if t1 == 0\n  9523: t1 = a4\n  9525: a1 = u64 [a1 + 0x18]\n  9528: u64 [sp + 0x38] = a1\n  9531: a1 = u64 [a2 + 0x18]\n  9534: u64 [sp + 0x20] = a1\n  9537: a1 = ra - t2\n  9540: a2 = a1 - a3\n  9543: u64 [sp + 0x28] = a2\n  9546: a2 = a1 <u a3\n  9549: u64 [sp + 0x30] = t2\n  9552: a3 = ra <u t2\n  9555: a1 = u64 [sp + 0x38]\n  9558: a4 = u64 [sp + 0x20]\n  9561: a1 = a4 - a1\n  9564: a1 = a1 - a3\n  9567: t2 = a1 - a2\n  9570: s1 = t0 - a5\n  9573: a2 = s1 - t1\n  9576: t0 = u64 [sp + 0x10]\n  9579: a1 = u64 [sp + 0x18]\n  9582: a3 = a1 - t0\n  9585: a4 = a2 >u 0\n  9587: a3 = a3 <u 0x20\n  9590: a3 = a3 ^ 0x1\n  9593: a3 = a4 if a2 != 0\n  9596: a2 = t2 >s 0\n  9598: a1 = u64 [sp + 0x28]\n  9601: a4 = a1 >u 0\n  9603: a4 = a2 if t2 != 0\n  9606: a1 = a1 | t2\n  9609: a3 = a4 if a1 != 0\n  9612: jump @146 if a3 == 0\n      : @143 (gas: 11)\n  9615: s1 = a0\n  9617: a2 = u64 [sp + 0x30]\n  9620: a0 = t0 | a2\n  9623: a1 = u64 [sp + 0x38]\n  9626: a1 = a1 | a5\n  9629: a0 = a0 | a1\n  9632: a0 = a0 >> 0x20\n  9635: a1 = a1 | a2\n  9638: a1 = a1 << 0x20\n  9641: a0 = a0 | a1\n  9644: jump @145 if a0 != 0\n      : @144 (gas: 17)\n  9647: i32 a1 = t0 + 0\n  9649: i32 a0 = sp + 0x40\n  9652: ecalli 2 // 'call_data_load'\n  9654: a0 = u64 [sp + 0x58]\n  9657: a1 = u64 [sp + 0x50]\n  9660: a2 = u64 [sp + 0x48]\n  9663: a3 = u64 [sp + 0x40]\n  9666: u64 [s1 + 0x18] = a0\n  9669: u64 [s1 + 0x10] = a1\n  9672: u64 [s1 + 0x8] = a2\n  9675: u64 [s1] = a3\n  9677: sp = s0 + 0xffffffffffffff80\n  9680: ra = u64 [sp + 0x78]\n  9683: s0 = u64 [sp + 0x70]\n  9686: s1 = u64 [sp + 0x68]\n  9689: sp = sp + 0x80\n  9693: ret\n      : @145 (gas: 1)\n  9695: trap\n      : @146 (gas: 3)\n  9696: a0 = 0\n  9698: a1 = 0\n  9700: ra = 122, jump @0\n      : @147 [@dyn 61] (gas: 6)\n  9705: i32 a1 = a0 + 0\n  9707: a0 = 0x1\n  9710: a2 = 0\n  9712: ra = 0x7c\n  9715: ecalli 11 // 'seal_return'\n  9717: fallthrough\n      : @148 [@dyn 62] (gas: 12)\n  9718: sp = sp + 0xffffffffffffff80\n  9721: u64 [sp + 0x78] = ra\n  9724: u64 [sp + 0x70] = s0\n  9727: s0 = sp + 0x80\n  9731: sp = sp & 0xffffffffffffffe0\n  9734: u64 [sp + 56] = 0\n  9737: u64 [sp + 48] = 0\n  9740: u64 [sp + 40] = 0\n  9743: u64 [sp + 32] = 0\n  9746: i32 a0 = sp + 0x20\n  9749: ecalli 14 // 'value_transferred'\n  9751: fallthrough\n      : @149 (gas: 8)\n  9752: a0 = u64 [sp + 0x30]\n  9755: a1 = u64 [sp + 0x38]\n  9758: a2 = u64 [sp + 0x28]\n  9761: a3 = u64 [sp + 0x20]\n  9764: a1 = a1 | a2\n  9767: a0 = a0 | a3\n  9770: a0 = a0 | a1\n  9773: jump @155 if a0 != 0\n      : @150 (gas: 2)\n  9777: a0 = i32 [0x20004]\n  9782: jump @155 if a0 <=u 35\n      : @151 (gas: 42)\n  9787: i32 a0 = sp + 0x40\n  9790: a1 = 0x4\n  9793: ecalli 2 // 'call_data_load'\n  9795: a1 = u64 [sp + 0x40]\n  9798: a0 = u64 [sp + 0x48]\n  9801: a2 = u64 [sp + 0x50]\n  9804: a3 = u64 [sp + 0x58]\n  9807: u64 [sp + 0x18] = a3\n  9810: u64 [sp + 0x10] = a2\n  9813: u64 [sp + 0x8] = a0\n  9816: a0 = sp\n  9818: u64 [sp] = a1\n  9820: ra = 0x7e\n  9823: sp = sp + 0xfffffffffffffa80\n  9827: u64 [sp + 0x578] = ra\n  9831: u64 [sp + 0x570] = s0\n  9835: u64 [sp + 0x568] = s1\n  9839: s0 = sp + 0x580\n  9843: sp = sp & 0xffffffffffffffe0\n  9846: a1 = u64 [a0]\n  9848: u64 [sp + 0xf0] = a1\n  9852: a1 = u64 [a0 + 0x8]\n  9855: u64 [sp + 0xe8] = a1\n  9859: a1 = u64 [a0 + 0x10]\n  9862: u64 [sp + 0xf8] = a1\n  9866: s1 = u64 [a0 + 0x18]\n  9869: u64 [sp + 1336] = 0\n  9873: u64 [sp + 1328] = 0\n  9877: u64 [sp + 1320] = 0\n  9881: u64 [sp + 1312] = 0\n  9885: u64 [sp + 1368] = 0\n  9889: u64 [sp + 1360] = 0\n  9893: u64 [sp + 1352] = 0\n  9897: u64 [sp + 1344] = 0\n  9901: u32 [sp + 1280] = 0x20\n  9906: i32 a1 = sp + 0x520\n  9910: i32 a3 = sp + 0x540\n  9914: i32 a4 = sp + 0x500\n  9918: a2 = 0xffffffffffffffff\n  9921: a0 = 0\n  9923: ecalli 6 // 'get_storage'\n  9925: jump @387\n      : @152 [@dyn 63] (gas: 3)\n  9928: a0 = 0x40\n  9931: a1 = 0x20\n  9934: ra = 128, jump @0\n      : @153 [@dyn 64] (gas: 100)\n  9940: a1 = u8 [a0 + 0x11]\n  9943: a2 = u8 [a0 + 0x10]\n  9946: a3 = u8 [a0 + 0x12]\n  9949: a4 = u8 [a0 + 0x13]\n  9952: a1 = a1 << 0x8\n  9955: a1 = a1 | a2\n  9958: a3 = a3 << 0x10\n  9961: a4 = a4 << 0x18\n  9964: a3 = a3 | a4\n  9967: a1 = a1 | a3\n  9970: a2 = u8 [a0 + 0x15]\n  9973: a3 = u8 [a0 + 0x14]\n  9976: a4 = u8 [a0 + 0x16]\n  9979: a5 = u8 [a0 + 0x17]\n  9982: a2 = a2 << 0x8\n  9985: a2 = a2 | a3\n  9988: a4 = a4 << 0x10\n  9991: a5 = a5 << 0x18\n  9994: a4 = a4 | a5\n  9997: a2 = a2 | a4\n 10000: a2 = a2 << 0x20\n 10003: t0 = a2 | a1\n 10006: a2 = u8 [a0 + 0x1]\n 10009: a3 = u8 [a0]\n 10011: a4 = u8 [a0 + 0x2]\n 10014: a5 = u8 [a0 + 0x3]\n 10017: a2 = a2 << 0x8\n 10020: a2 = a2 | a3\n 10023: a4 = a4 << 0x10\n 10026: a5 = a5 << 0x18\n 10029: a4 = a4 | a5\n 10032: a2 = a2 | a4\n 10035: a3 = u8 [a0 + 0x5]\n 10038: a4 = u8 [a0 + 0x4]\n 10041: a5 = u8 [a0 + 0x6]\n 10044: a1 = u8 [a0 + 0x7]\n 10047: a3 = a3 << 0x8\n 10050: a3 = a3 | a4\n 10053: a5 = a5 << 0x10\n 10056: a1 = a1 << 0x18\n 10059: a1 = a1 | a5\n 10062: a1 = a1 | a3\n 10065: a1 = a1 << 0x20\n 10068: t1 = a1 | a2\n 10071: a1 = u8 [a0 + 0x19]\n 10074: a3 = u8 [a0 + 0x18]\n 10077: a4 = u8 [a0 + 0x1a]\n 10080: a5 = u8 [a0 + 0x1b]\n 10083: a1 = a1 << 0x8\n 10086: a1 = a1 | a3\n 10089: a4 = a4 << 0x10\n 10092: a5 = a5 << 0x18\n 10095: a4 = a4 | a5\n 10098: a1 = a1 | a4\n 10101: a3 = u8 [a0 + 0x1d]\n 10104: a4 = u8 [a0 + 0x1c]\n 10107: a5 = u8 [a0 + 0x1e]\n 10110: a2 = u8 [a0 + 0x1f]\n 10113: a3 = a3 << 0x8\n 10116: a3 = a3 | a4\n 10119: a5 = a5 << 0x10\n 10122: a2 = a2 << 0x18\n 10125: a2 = a2 | a5\n 10128: a2 = a2 | a3\n 10131: a2 = a2 << 0x20\n 10134: a3 = a2 | a1\n 10137: a1 = u8 [a0 + 0x9]\n 10140: a2 = u8 [a0 + 0x8]\n 10143: a4 = u8 [a0 + 0xa]\n 10146: a5 = u8 [a0 + 0xb]\n 10149: a1 = a1 << 0x8\n 10152: a1 = a1 | a2\n 10155: a4 = a4 << 0x10\n 10158: a5 = a5 << 0x18\n 10161: a4 = a4 | a5\n 10164: a1 = a1 | a4\n 10167: a2 = u8 [a0 + 0xd]\n 10170: a4 = u8 [a0 + 0xc]\n 10173: a5 = u8 [a0 + 0xe]\n 10176: a0 = u8 [a0 + 0xf]\n 10179: a2 = a2 << 0x8\n 10182: a2 = a2 | a4\n 10185: a5 = a5 << 0x10\n 10188: a0 = a0 << 0x18\n 10191: a0 = a0 | a5\n 10194: a0 = a0 | a2\n 10197: a0 = a0 << 0x20\n 10200: a0 = a0 | a1\n 10203: a1 = reverse a0\n 10205: a0 = reverse a3\n 10207: a2 = reverse t1\n 10209: a3 = reverse t0\n 10211: a2 = a2 | a3\n 10214: a3 = a0 | a1\n 10217: a3 = a3 | a2\n 10220: a3 = a3 >> 0x20\n 10223: a1 = a1 | a2\n 10226: a1 = a1 << 0x20\n 10229: a1 = a1 | a3\n 10232: jump @157 if a1 == 0\n      : @154 (gas: 1)\n 10235: trap\n      : @155 (gas: 3)\n 10236: a0 = 0\n 10238: a1 = 0\n 10240: ra = 130, jump @0\n      : @156 [@dyn 65] (gas: 7)\n 10246: i32 a1 = a0 + 0\n 10248: a0 = 0x1\n 10251: a2 = 0\n 10253: ecalli 11 // 'seal_return'\n 10255: i32 a0 = a0 + 0\n 10257: ra = 0x84\n 10261: jump @0\n      : @157 (gas: 2)\n 10264: i32 a0 = a0 + 0\n 10266: ra = 132, jump @0\n      : @158 [@dyn 66] (gas: 6)\n 10272: i32 a1 = a0 + 0\n 10274: a0 = 0\n 10276: a2 = 0\n 10278: ra = 0x86\n 10282: ecalli 11 // 'seal_return'\n 10284: fallthrough\n      : @159 [@dyn 67] (gas: 13)\n 10285: sp = sp + 0xffffffffffffffb0\n 10288: u64 [sp + 0x48] = ra\n 10291: u64 [sp + 0x40] = s0\n 10294: s0 = sp + 0x50\n 10297: sp = sp & 0xfffffffffffffff0\n 10300: u64 [sp + 48] = 0\n 10303: u64 [sp + 40] = 0\n 10306: u64 [sp + 32] = 0\n 10309: a0 = 0x4e487b7100000000\n 10319: a1 = sp + 0x20\n 10322: u64 [sp + 0x38] = a0\n 10325: a0 = 0\n 10327: ra = 136, jump @8\n      : @160 [@dyn 68] (gas: 7)\n 10333: u64 [sp + 24] = 0\n 10336: u64 [sp + 16] = 0\n 10339: u64 [sp + 0] = 0x32\n 10342: a0 = 0x4\n 10345: a1 = sp\n 10347: u64 [sp + 8] = 0\n 10350: ra = 138, jump @8\n      : @161 [@dyn 69] (gas: 3)\n 10356: a1 = 0x24\n 10359: a0 = 0\n 10361: ra = 140, jump @0\n      : @162 [@dyn 70] (gas: 6)\n 10367: i32 a1 = a0 + 0\n 10369: a0 = 0x1\n 10372: a2 = 0x24\n 10375: ra = 0x8e\n 10379: ecalli 11 // 'seal_return'\n 10381: fallthrough\n      : @163 [@dyn 71] (gas: 40)\n 10382: sp = sp + 0xffffffffffffffa0\n 10385: u64 [sp + 0x58] = ra\n 10388: u64 [sp + 0x50] = s0\n 10391: u64 [sp + 0x48] = s1\n 10394: s0 = sp + 0x60\n 10397: sp = sp & 0xffffffffffffffe0\n 10400: s1 = a0\n 10402: a0 = u64 [a1 + 0x18]\n 10405: a2 = u64 [a1 + 0x10]\n 10408: a3 = u64 [a1 + 0x8]\n 10411: a1 = u64 [a1]\n 10413: u64 [sp + 0x18] = a0\n 10416: u64 [sp + 0x10] = a2\n 10419: u64 [sp + 0x8] = a3\n 10422: u64 [sp] = a1\n 10424: u64 [sp + 56] = 0\n 10427: u64 [sp + 48] = 0\n 10430: u64 [sp + 40] = 0\n 10433: u64 [sp + 32] = 0\n 10436: u32 [sp + 64] = 0x20\n 10440: i32 a1 = sp + 0\n 10442: i32 a3 = sp + 0x20\n 10445: i32 a4 = sp + 0x40\n 10448: a2 = 0xffffffffffffffff\n 10451: a0 = 0\n 10453: ecalli 6 // 'get_storage'\n 10455: a0 = u64 [sp + 0x38]\n 10458: a1 = u64 [sp + 0x30]\n 10461: a2 = u64 [sp + 0x28]\n 10464: a3 = u64 [sp + 0x20]\n 10467: u64 [s1 + 0x18] = a0\n 10470: u64 [s1 + 0x10] = a1\n 10473: u64 [s1 + 0x8] = a2\n 10476: u64 [s1] = a3\n 10478: sp = s0 + 0xffffffffffffffa0\n 10481: ra = u64 [sp + 0x58]\n 10484: s0 = u64 [sp + 0x50]\n 10487: s1 = u64 [sp + 0x48]\n 10490: sp = sp + 0x60\n 10493: ret\n      : @164 (gas: 38)\n 10495: sp = sp + 0xfffffffffffffee0\n 10499: u64 [sp + 0x118] = ra\n 10503: u64 [sp + 0x110] = s0\n 10507: u64 [sp + 0x108] = s1\n 10511: s0 = sp + 0x120\n 10515: sp = sp & 0xffffffffffffffe0\n 10518: u64 [sp + 0x40] = a0\n 10521: a0 = u64 [a2]\n 10523: u64 [sp + 0x50] = a0\n 10526: a0 = u64 [a2 + 0x8]\n 10529: u64 [sp + 0x58] = a0\n 10532: a0 = u64 [a2 + 0x10]\n 10535: u64 [sp + 0x48] = a0\n 10538: s1 = u64 [a2 + 0x18]\n 10541: a4 = u64 [a1 + 0x18]\n 10544: a3 = u64 [a1 + 0x10]\n 10547: a2 = u64 [a1 + 0x8]\n 10550: a0 = u64 [a1]\n 10552: u64 [sp + 0x18] = a4\n 10555: u64 [sp + 0xb8] = a4\n 10559: u64 [sp + 0x20] = a3\n 10562: u64 [sp + 0xb0] = a3\n 10566: u64 [sp + 0x28] = a2\n 10569: u64 [sp + 0xa8] = a2\n 10573: u64 [sp + 0x30] = a0\n 10576: u64 [sp + 0xa0] = a0\n 10580: u64 [sp + 248] = 0\n 10584: u64 [sp + 240] = 0\n 10588: u64 [sp + 232] = 0\n 10592: u64 [sp + 224] = 0\n 10596: u32 [sp + 192] = 0x20\n 10601: i32 a1 = sp + 0xa0\n 10605: i32 a3 = sp + 0xe0\n 10609: i32 a4 = sp + 0xc0\n 10613: a2 = 0xffffffffffffffff\n 10616: a0 = 0\n 10618: ecalli 6 // 'get_storage'\n 10620: fallthrough\n      : @165 (gas: 20)\n 10621: a0 = u64 [sp + 0xf8]\n 10625: t0 = u64 [sp + 0xe0]\n 10629: a2 = u64 [sp + 0xf0]\n 10633: a3 = u64 [sp + 0xe8]\n 10637: a4 = a0 ^ s1\n 10640: u64 [sp + 0x38] = s1\n 10643: a0 = s1 <u a0\n 10646: s1 = u64 [sp + 0x48]\n 10649: a5 = s1 <u a2\n 10652: a5 = a0 if a4 != 0\n 10655: a1 = u64 [sp + 0x58]\n 10658: a0 = a3 ^ a1\n 10661: a3 = a1 <u a3\n 10664: a1 = u64 [sp + 0x50]\n 10667: a1 = a1 <u t0\n 10670: a1 = a3 if a0 != 0\n 10673: a0 = a2 ^ s1\n 10676: a0 = a0 | a4\n 10679: a1 = a5 if a0 != 0\n 10682: jump @169 if a1 == 0\n      : @166 (gas: 3)\n 10686: a1 = 0x20\n 10689: a0 = 0\n 10691: ra = 144, jump @0\n      : @167 [@dyn 72] (gas: 71)\n 10697: a1 = u64 [sp + 0x18]\n 10700: a1 = reverse a1\n 10702: a2 = u64 [sp + 0x20]\n 10705: a2 = reverse a2\n 10707: a3 = u64 [sp + 0x28]\n 10710: a3 = reverse a3\n 10712: a4 = u64 [sp + 0x30]\n 10715: a4 = reverse a4\n 10717: a5 = a4 >> 0x38\n 10720: u8 [a0 + 0x1f] = a5\n 10723: a5 = a4 >> 0x30\n 10726: u8 [a0 + 0x1e] = a5\n 10729: a5 = a4 >> 0x28\n 10732: u8 [a0 + 0x1d] = a5\n 10735: a5 = a4 >> 0x20\n 10738: u8 [a0 + 0x1c] = a5\n 10741: a5 = a4 >> 0x18\n 10744: u8 [a0 + 0x1b] = a5\n 10747: a5 = a4 >> 0x10\n 10750: u8 [a0 + 0x1a] = a5\n 10753: a5 = a4 >> 0x8\n 10756: u8 [a0 + 0x19] = a5\n 10759: u8 [a0 + 0x18] = a4\n 10762: u8 [a0 + 0x10] = a3\n 10765: a4 = a3 >> 0x38\n 10768: u8 [a0 + 0x17] = a4\n 10771: a4 = a3 >> 0x30\n 10774: u8 [a0 + 0x16] = a4\n 10777: a4 = a3 >> 0x28\n 10780: u8 [a0 + 0x15] = a4\n 10783: a4 = a3 >> 0x20\n 10786: u8 [a0 + 0x14] = a4\n 10789: a4 = a3 >> 0x18\n 10792: u8 [a0 + 0x13] = a4\n 10795: a4 = a3 >> 0x10\n 10798: u8 [a0 + 0x12] = a4\n 10801: a3 = a3 >> 0x8\n 10804: u8 [a0 + 0x11] = a3\n 10807: u8 [a0 + 0x8] = a2\n 10810: a3 = a2 >> 0x38\n 10813: u8 [a0 + 0xf] = a3\n 10816: a3 = a2 >> 0x30\n 10819: u8 [a0 + 0xe] = a3\n 10822: a3 = a2 >> 0x28\n 10825: u8 [a0 + 0xd] = a3\n 10828: a3 = a2 >> 0x20\n 10831: u8 [a0 + 0xc] = a3\n 10834: a3 = a2 >> 0x18\n 10837: u8 [a0 + 0xb] = a3\n 10840: a3 = a2 >> 0x10\n 10843: u8 [a0 + 0xa] = a3\n 10846: a2 = a2 >> 0x8\n 10849: u8 [a0 + 0x9] = a2\n 10852: u8 [a0] = a1\n 10854: a2 = a1 >> 0x38\n 10857: u8 [a0 + 0x7] = a2\n 10860: a2 = a1 >> 0x30\n 10863: u8 [a0 + 0x6] = a2\n 10866: a2 = a1 >> 0x28\n 10869: u8 [a0 + 0x5] = a2\n 10872: a2 = a1 >> 0x20\n 10875: u8 [a0 + 0x4] = a2\n 10878: a2 = a1 >> 0x18\n 10881: u8 [a0 + 0x3] = a2\n 10884: a2 = a1 >> 0x10\n 10887: u8 [a0 + 0x2] = a2\n 10890: a1 = a1 >> 0x8\n 10893: u8 [a0 + 0x1] = a1\n 10896: a1 = 0x20\n 10899: a0 = 0\n 10901: ra = 146, jump @0\n      : @168 [@dyn 73] (gas: 55)\n 10907: i32 a0 = a0 + 0\n 10909: i32 a2 = sp + 0xe0\n 10913: a1 = 0x20\n 10916: ecalli 7 // 'hash_keccak_256'\n 10918: a0 = u64 [sp + 0xe0]\n 10922: a1 = u64 [sp + 0xe8]\n 10926: a2 = u64 [sp + 0xf8]\n 10930: a3 = u64 [sp + 0xf0]\n 10934: t0 = reverse a0\n 10936: a1 = reverse a1\n 10938: a2 = reverse a2\n 10940: a3 = reverse a3\n 10942: s1 = u64 [sp + 0x48]\n 10945: a4 = s1 >> 0x3e\n 10948: a5 = u64 [sp + 0x38]\n 10951: a5 = a5 << 0x2\n 10954: t1 = a5 | a4\n 10957: a5 = u64 [sp + 0x58]\n 10960: a4 = a5 >> 0x3e\n 10963: a0 = s1 << 0x2\n 10966: t2 = a0 | a4\n 10969: a4 = u64 [sp + 0x50]\n 10972: a0 = a4 >> 0x3e\n 10975: s1 = a5 << 0x2\n 10978: a5 = s1 | a0\n 10981: s1 = a4 << 0x2\n 10984: a5 = a5 + a3\n 10987: s1 = s1 + a2\n 10990: a2 = s1 <u a2\n 10993: a5 = a5 + a2\n 10996: a4 = a5 ^ a3\n 10999: a3 = a5 <u a3\n 11002: a3 = a2 if a4 == 0\n 11005: a0 = a1 + t2\n 11008: a3 = a3 + a0\n 11011: a2 = a3 <u a0\n 11014: t0 = t0 + t1\n 11017: a0 = a0 <u a1\n 11020: a0 = a0 + t0\n 11023: a0 = a0 + a2\n 11026: a1 = u64 [sp + 0x40]\n 11029: u64 [a1 + 56] = 0\n 11032: u64 [a1 + 48] = 0\n 11035: u64 [a1 + 40] = 0\n 11038: u64 [a1 + 32] = 0\n 11041: u64 [a1] = s1\n 11043: u64 [a1 + 0x8] = a5\n 11046: u64 [a1 + 0x10] = a3\n 11049: u64 [a1 + 0x18] = a0\n 11052: sp = s0 + 0xfffffffffffffee0\n 11056: ra = u64 [sp + 0x118]\n 11060: s0 = u64 [sp + 0x110]\n 11064: s1 = u64 [sp + 0x108]\n 11068: sp = sp + 0x120\n 11072: ret\n      : @169 (gas: 8)\n 11074: u64 [sp + 144] = 0\n 11078: u64 [sp + 136] = 0\n 11082: u64 [sp + 128] = 0\n 11086: a0 = 0x4e487b7100000000\n 11096: a1 = sp + 0x80\n 11100: u64 [sp + 0x98] = a0\n 11104: a0 = 0\n 11106: ra = 148, jump @8\n      : @170 [@dyn 74] (gas: 7)\n 11112: u64 [sp + 120] = 0\n 11115: u64 [sp + 112] = 0\n 11118: u64 [sp + 96] = 0x32\n 11122: a0 = 0x4\n 11125: a1 = sp + 0x60\n 11128: u64 [sp + 104] = 0\n 11131: ra = 150, jump @8\n      : @171 [@dyn 75] (gas: 3)\n 11137: a1 = 0x24\n 11140: a0 = 0\n 11142: ra = 152, jump @0\n      : @172 [@dyn 76] (gas: 6)\n 11148: i32 a1 = a0 + 0\n 11150: a0 = 0x1\n 11153: a2 = 0x24\n 11156: ra = 0x9a\n 11160: ecalli 11 // 'seal_return'\n 11162: fallthrough\n      : @173 [@dyn 77] (gas: 9)\n 11163: a2 = u64 [a1 + 0x18]\n 11166: a3 = u64 [a1 + 0x10]\n 11169: a4 = u64 [a1 + 0x8]\n 11172: a1 = u64 [a1]\n 11174: u64 [a0 + 0x18] = a2\n 11177: u64 [a0 + 0x10] = a3\n 11180: u64 [a0 + 0x8] = a4\n 11183: u64 [a0] = a1\n 11185: ret\n      : @174 (gas: 19)\n 11187: t1 = u64 [sp + 0x70]\n 11190: t0 = u64 [sp + 0x68]\n 11193: a0 = u64 [sp + 0x138]\n 11197: a1 = u64 [sp + 0x120]\n 11201: t2 = u64 [sp + 0x130]\n 11205: a3 = u64 [sp + 0x128]\n 11209: a4 = a0 ^ t0\n 11212: a0 = t0 <u a0\n 11215: a2 = u64 [sp + 0x78]\n 11218: a5 = a2 <u t2\n 11221: a5 = a0 if a4 != 0\n 11224: a0 = a3 ^ s1\n 11227: a3 = s1 <u a3\n 11230: a1 = t1 <u a1\n 11233: a1 = a3 if a0 != 0\n 11236: a0 = t2 ^ a2\n 11239: a0 = a0 | a4\n 11242: a1 = a5 if a0 != 0\n 11245: jump @177 if a1 == 0\n      : @175 (gas: 12)\n 11249: u64 [sp + 0x80] = t1\n 11253: u64 [sp + 184] = 0\n 11257: u64 [sp + 176] = 0\n 11261: u64 [sp + 168] = 0\n 11265: u64 [sp + 160] = 0\n 11269: u64 [sp + 0x88] = s1\n 11273: u64 [sp + 0x90] = a2\n 11277: a0 = sp + 0xc0\n 11281: a1 = sp + 0xa0\n 11285: a2 = sp + 0x80\n 11289: u64 [sp + 0x98] = t0\n 11293: ra = 156, jump @164\n      : @176 [@dyn 78] (gas: 157)\n 11299: a0 = u64 [sp + 0xd8]\n 11303: u64 [sp + 0x78] = a0\n 11306: a3 = u64 [sp + 0xd0]\n 11310: u64 [sp + 0x68] = a3\n 11313: a1 = u64 [sp + 0xc8]\n 11317: u64 [sp + 0x70] = a1\n 11320: s1 = u64 [sp + 0xc0]\n 11324: u64 [sp + 0x118] = a0\n 11328: u64 [sp + 0x110] = a3\n 11332: u64 [sp + 0x108] = a1\n 11336: u64 [sp + 0x100] = s1\n 11340: u64 [sp + 312] = 0\n 11344: u64 [sp + 304] = 0\n 11348: u64 [sp + 296] = 0\n 11352: u64 [sp + 288] = 0\n 11356: u32 [sp + 320] = 0x20\n 11361: i32 a1 = sp + 0x100\n 11365: i32 a3 = sp + 0x120\n 11369: i32 a4 = sp + 0x140\n 11373: a2 = 0xffffffffffffffff\n 11376: a0 = 0\n 11378: ecalli 6 // 'get_storage'\n 11380: a0 = s1 + 0x1\n 11383: a1 = a0 <u 0x1\n 11386: a2 = u64 [sp + 0x70]\n 11389: a1 = a1 + a2\n 11392: a2 = a0 | a1\n 11395: a2 = a2 <u 0x1\n 11398: a3 = u64 [sp + 0x68]\n 11401: a2 = a2 + a3\n 11404: a3 = a2 <u a3\n 11407: a4 = u64 [sp + 0x78]\n 11410: a3 = a3 + a4\n 11413: u64 [sp + 0x118] = a3\n 11417: u64 [sp + 0x110] = a2\n 11421: a2 = u64 [sp + 0x120]\n 11425: u64 [sp + 0x60] = a2\n 11428: u64 [sp + 0x108] = a1\n 11432: a1 = u64 [sp + 0x128]\n 11436: u64 [sp + 0x58] = a1\n 11439: u64 [sp + 0x100] = a0\n 11443: a0 = u32 [sp + 0x130]\n 11447: u64 [sp + 0x50] = a0\n 11450: u64 [sp + 312] = 0\n 11454: u64 [sp + 304] = 0\n 11458: u64 [sp + 296] = 0\n 11462: u64 [sp + 288] = 0\n 11466: u32 [sp + 320] = 0x20\n 11471: i32 a1 = sp + 0x100\n 11475: i32 a3 = sp + 0x120\n 11479: i32 a4 = sp + 0x140\n 11483: a2 = 0xffffffffffffffff\n 11486: a0 = 0\n 11488: ecalli 6 // 'get_storage'\n 11490: a0 = s1 + 0x2\n 11493: a1 = a0 <u s1\n 11496: a3 = u64 [sp + 0x70]\n 11499: a2 = a3 + a1\n 11502: a3 = a2 <u a3\n 11505: a3 = a1 if a1 == 0\n 11508: a1 = u64 [sp + 0x68]\n 11511: a3 = a3 + a1\n 11514: a1 = a3 <u a1\n 11517: a4 = u64 [sp + 0x78]\n 11520: a1 = a1 + a4\n 11523: u64 [sp + 0x118] = a1\n 11527: a1 = u64 [sp + 0x120]\n 11531: u64 [sp + 0x48] = a1\n 11534: u64 [sp + 0x110] = a3\n 11538: a1 = u64 [sp + 0x128]\n 11542: u64 [sp + 0x40] = a1\n 11545: u64 [sp + 0x108] = a2\n 11549: a1 = u64 [sp + 0x130]\n 11553: u64 [sp + 0x38] = a1\n 11556: u64 [sp + 0x100] = a0\n 11560: a0 = u64 [sp + 0x138]\n 11564: u64 [sp + 0x30] = a0\n 11567: u64 [sp + 312] = 0\n 11571: u64 [sp + 304] = 0\n 11575: u64 [sp + 296] = 0\n 11579: u64 [sp + 288] = 0\n 11583: u32 [sp + 320] = 0x20\n 11588: i32 a1 = sp + 0x100\n 11592: i32 a3 = sp + 0x120\n 11596: i32 a4 = sp + 0x140\n 11600: a2 = 0xffffffffffffffff\n 11603: a0 = 0\n 11605: ecalli 6 // 'get_storage'\n 11607: a0 = u64 [sp + 0x120]\n 11611: u64 [sp + 0x10] = a0\n 11614: a0 = u64 [sp + 0x128]\n 11618: u64 [sp + 0x20] = a0\n 11621: a0 = u64 [sp + 0x130]\n 11625: u64 [sp + 0x18] = a0\n 11628: a0 = u64 [sp + 0x138]\n 11632: u64 [sp + 0x8] = a0\n 11635: a0 = s1 + 0x3\n 11638: a1 = a0 <u s1\n 11641: a3 = u64 [sp + 0x70]\n 11644: a2 = a3 + a1\n 11647: a3 = a2 <u a3\n 11650: a3 = a1 if a1 == 0\n 11653: a1 = u64 [sp + 0x68]\n 11656: a3 = a3 + a1\n 11659: a1 = a3 <u a1\n 11662: a4 = u64 [sp + 0x78]\n 11665: a1 = a1 + a4\n 11668: u64 [sp + 0x118] = a1\n 11672: u64 [sp + 0x110] = a3\n 11676: u64 [sp + 0x108] = a2\n 11680: u64 [sp + 0x100] = a0\n 11684: u64 [sp + 312] = 0\n 11688: u64 [sp + 304] = 0\n 11692: u64 [sp + 296] = 0\n 11696: u64 [sp + 288] = 0\n 11700: u32 [sp + 320] = 0x20\n 11705: i32 a1 = sp + 0x100\n 11709: i32 a3 = sp + 0x120\n 11713: i32 a4 = sp + 0x140\n 11717: a2 = 0xffffffffffffffff\n 11720: a0 = 0\n 11722: ecalli 6 // 'get_storage'\n 11724: a0 = u8 [sp + 0x120]\n 11728: a1 = u64 [sp + 0x28]\n 11731: u64 [a1 + 0x60] = a0\n 11734: a0 = u64 [sp + 0x8]\n 11737: u64 [a1 + 0x58] = a0\n 11740: a0 = u64 [sp + 0x18]\n 11743: u64 [a1 + 0x50] = a0\n 11746: a0 = u64 [sp + 0x20]\n 11749: u64 [a1 + 0x48] = a0\n 11752: a0 = u64 [sp + 0x10]\n 11755: u64 [a1 + 0x40] = a0\n 11758: a0 = u64 [sp + 0x30]\n 11761: u64 [a1 + 0x38] = a0\n 11764: a0 = u64 [sp + 0x38]\n 11767: u64 [a1 + 0x30] = a0\n 11770: a0 = u64 [sp + 0x40]\n 11773: u64 [a1 + 0x28] = a0\n 11776: a0 = u64 [sp + 0x48]\n 11779: u64 [a1 + 0x20] = a0\n 11782: a0 = u64 [sp + 0x50]\n 11785: u64 [a1 + 0x10] = a0\n 11788: a0 = u64 [sp + 0x58]\n 11791: u64 [a1 + 0x8] = a0\n 11794: a0 = u64 [sp + 0x60]\n 11797: u64 [a1] = a0\n 11799: u64 [a1 + 120] = 0\n 11802: u64 [a1 + 112] = 0\n 11805: u64 [a1 + 104] = 0\n 11808: u64 [a1 + 24] = 0\n 11811: sp = s0 + 0xfffffffffffffea0\n 11815: ra = u64 [sp + 0x158]\n 11819: s0 = u64 [sp + 0x150]\n 11823: s1 = u64 [sp + 0x148]\n 11827: sp = sp + 0x160\n 11831: ret\n      : @177 (gas: 2)\n 11833: a0 = 0\n 11835: ra = 158, jump @0\n      : @178 [@dyn 79] (gas: 6)\n 11841: i32 a1 = a0 + 0\n 11843: a0 = 0x1\n 11846: a2 = 0\n 11848: ra = 0xa0\n 11852: ecalli 11 // 'seal_return'\n 11854: fallthrough\n      : @179 [@dyn 80] (gas: 12)\n 11855: a2 = u64 [a1 + 0x10]\n 11858: a3 = u64 [a1 + 0x18]\n 11861: a4 = u64 [a1 + 0x8]\n 11864: a1 = u64 [a1]\n 11866: a3 = a3 | a4\n 11869: a4 = a1 | a2\n 11872: a4 = a4 | a3\n 11875: a4 = a4 >> 0x20\n 11878: a2 = a2 | a3\n 11881: a2 = a2 << 0x20\n 11884: a2 = a2 | a4\n 11887: jump @182 if a2 != 0\n      : @180 (gas: 13)\n 11891: sp = sp + 0xffffffffffffffe0\n 11894: u64 [sp + 0x18] = ra\n 11897: u64 [sp + 0x10] = s0\n 11900: u64 [sp + 0x8] = s1\n 11903: a2 = u64 [a0 + 0x10]\n 11906: a3 = u64 [a0 + 0x8]\n 11909: u64 [sp] = a3\n 11911: s1 = u64 [a0]\n 11913: a2 = a2 << 0x20\n 11916: s0 = a2 >> 0x20\n 11919: i32 a0 = a1 + 0\n 11921: a1 = 0x20\n 11924: ra = 162, jump @0\n      : @181 [@dyn 81] (gas: 59)\n 11930: a1 = reverse s0\n 11932: a2 = u64 [sp]\n 11934: a2 = reverse a2\n 11936: a3 = reverse s1\n 11938: a4 = a3 >> 0x38\n 11941: u8 [a0 + 0x1f] = a4\n 11944: a4 = a3 >> 0x30\n 11947: u8 [a0 + 0x1e] = a4\n 11950: a4 = a3 >> 0x28\n 11953: u8 [a0 + 0x1d] = a4\n 11956: a4 = a3 >> 0x20\n 11959: u8 [a0 + 0x1c] = a4\n 11962: a4 = a3 >> 0x18\n 11965: u8 [a0 + 0x1b] = a4\n 11968: a4 = a3 >> 0x10\n 11971: u8 [a0 + 0x1a] = a4\n 11974: a4 = a3 >> 0x8\n 11977: u8 [a0 + 0x19] = a4\n 11980: u8 [a0 + 0x18] = a3\n 11983: u8 [a0 + 0x10] = a2\n 11986: u8 [a0 + 11] = 0\n 11989: u8 [a0 + 10] = 0\n 11992: u8 [a0 + 9] = 0\n 11995: u8 [a0 + 7] = 0\n 11998: u8 [a0 + 6] = 0\n 12001: u8 [a0 + 5] = 0\n 12004: u8 [a0 + 4] = 0\n 12007: u8 [a0 + 3] = 0\n 12010: u8 [a0 + 2] = 0\n 12013: u8 [a0 + 1] = 0\n 12016: u8 [a0 + 0] = 0\n 12018: a3 = a2 >> 0x38\n 12021: u8 [a0 + 0x17] = a3\n 12024: a3 = a2 >> 0x30\n 12027: u8 [a0 + 0x16] = a3\n 12030: a3 = a2 >> 0x28\n 12033: u8 [a0 + 0x15] = a3\n 12036: a3 = a2 >> 0x20\n 12039: u8 [a0 + 0x14] = a3\n 12042: a3 = a2 >> 0x18\n 12045: u8 [a0 + 0x13] = a3\n 12048: a3 = a2 >> 0x10\n 12051: u8 [a0 + 0x12] = a3\n 12054: a2 = a2 >> 0x8\n 12057: u8 [a0 + 0x11] = a2\n 12060: u8 [a0 + 0x8] = a1\n 12063: a2 = a1 >> 0x38\n 12066: u8 [a0 + 0xf] = a2\n 12069: a2 = a1 >> 0x30\n 12072: u8 [a0 + 0xe] = a2\n 12075: a2 = a1 >> 0x28\n 12078: u8 [a0 + 0xd] = a2\n 12081: a1 = a1 >> 0x20\n 12084: u8 [a0 + 0xc] = a1\n 12087: ra = u64 [sp + 0x18]\n 12090: s0 = u64 [sp + 0x10]\n 12093: s1 = u64 [sp + 0x8]\n 12096: sp = sp + 0x20\n 12099: ret\n      : @182 (gas: 1)\n 12101: trap\n      : @183 (gas: 8)\n 12102: a0 = u64 [sp + 0x150]\n 12106: a1 = u64 [sp + 0x158]\n 12110: a2 = u64 [sp + 0x148]\n 12114: a3 = u64 [sp + 0x140]\n 12118: a1 = a1 | a2\n 12121: a0 = a0 | a3\n 12124: a0 = a0 | a1\n 12127: jump @195 if a0 != 0\n      : @184 (gas: 2)\n 12131: a0 = i32 [0x20004]\n 12136: jump @195 if a0 <=u 35\n      : @185 (gas: 44)\n 12141: i32 a0 = sp + 0x160\n 12145: a1 = 0x4\n 12148: ecalli 2 // 'call_data_load'\n 12150: a2 = u64 [sp + 0x160]\n 12154: a0 = u64 [sp + 0x168]\n 12158: a1 = u64 [sp + 0x170]\n 12162: a3 = u64 [sp + 0x178]\n 12166: u64 [sp + 0xb8] = a3\n 12170: u64 [sp + 0xb0] = a1\n 12174: u64 [sp + 0xa8] = a0\n 12178: a0 = sp + 0xc0\n 12182: a1 = sp + 0xa0\n 12186: u64 [sp + 0xa0] = a2\n 12190: ra = 0xa4\n 12194: sp = sp + 0xfffffffffffffea0\n 12198: u64 [sp + 0x158] = ra\n 12202: u64 [sp + 0x150] = s0\n 12206: u64 [sp + 0x148] = s1\n 12210: s0 = sp + 0x160\n 12214: sp = sp & 0xffffffffffffffe0\n 12217: u64 [sp + 0x28] = a0\n 12220: a0 = u64 [a1]\n 12222: u64 [sp + 0x70] = a0\n 12225: s1 = u64 [a1 + 0x8]\n 12228: a0 = u64 [a1 + 0x10]\n 12231: u64 [sp + 0x78] = a0\n 12234: a0 = u64 [a1 + 0x18]\n 12237: u64 [sp + 0x68] = a0\n 12240: u64 [sp + 280] = 0\n 12244: u64 [sp + 272] = 0\n 12248: u64 [sp + 264] = 0\n 12252: u64 [sp + 256] = 0\n 12256: u64 [sp + 312] = 0\n 12260: u64 [sp + 304] = 0\n 12264: u64 [sp + 296] = 0\n 12268: u64 [sp + 288] = 0\n 12272: u32 [sp + 320] = 0x20\n 12277: i32 a1 = sp + 0x100\n 12281: i32 a3 = sp + 0x120\n 12285: i32 a4 = sp + 0x140\n 12289: a2 = 0xffffffffffffffff\n 12292: a0 = 0\n 12294: ecalli 6 // 'get_storage'\n 12296: jump @174\n      : @186 [@dyn 82] (gas: 33)\n 12299: a0 = u64 [sp + 0x138]\n 12303: u64 [sp + 0x30] = a0\n 12306: a0 = u64 [sp + 0x130]\n 12310: u64 [sp + 0x20] = a0\n 12313: a0 = u64 [sp + 0x128]\n 12317: u64 [sp + 0x28] = a0\n 12320: a0 = u64 [sp + 0x120]\n 12324: u64 [sp + 0x18] = a0\n 12327: a0 = u64 [sp + 0x118]\n 12331: u64 [sp + 0x38] = a0\n 12334: a0 = u64 [sp + 0x110]\n 12338: u64 [sp + 0x40] = a0\n 12341: a0 = u64 [sp + 0x108]\n 12345: u64 [sp + 0x48] = a0\n 12348: a0 = u64 [sp + 0x100]\n 12352: u64 [sp + 0x50] = a0\n 12355: a0 = u64 [sp + 0xf8]\n 12359: u64 [sp + 0x58] = a0\n 12362: a0 = u64 [sp + 0xf0]\n 12366: u64 [sp + 0x60] = a0\n 12369: a0 = u64 [sp + 0xe8]\n 12373: u64 [sp + 0x68] = a0\n 12376: a0 = u64 [sp + 0xe0]\n 12380: u64 [sp + 0x70] = a0\n 12383: a0 = u64 [sp + 0xd0]\n 12387: u64 [sp + 0x88] = a0\n 12391: a0 = u64 [sp + 0xc8]\n 12395: u64 [sp + 0x90] = a0\n 12399: a0 = u64 [sp + 0xc0]\n 12403: u64 [sp + 0x98] = a0\n 12407: a0 = 0x40\n 12410: a1 = 0x20\n 12413: ra = 166, jump @0\n      : @187 [@dyn 83] (gas: 100)\n 12419: a1 = u8 [a0 + 0x11]\n 12422: a2 = u8 [a0 + 0x10]\n 12425: a3 = u8 [a0 + 0x12]\n 12428: a4 = u8 [a0 + 0x13]\n 12431: a1 = a1 << 0x8\n 12434: a1 = a1 | a2\n 12437: a3 = a3 << 0x10\n 12440: a4 = a4 << 0x18\n 12443: a3 = a3 | a4\n 12446: a1 = a1 | a3\n 12449: a2 = u8 [a0 + 0x15]\n 12452: a3 = u8 [a0 + 0x14]\n 12455: a4 = u8 [a0 + 0x16]\n 12458: a5 = u8 [a0 + 0x17]\n 12461: a2 = a2 << 0x8\n 12464: a2 = a2 | a3\n 12467: a4 = a4 << 0x10\n 12470: a5 = a5 << 0x18\n 12473: a4 = a4 | a5\n 12476: a2 = a2 | a4\n 12479: a2 = a2 << 0x20\n 12482: t0 = a2 | a1\n 12485: a2 = u8 [a0 + 0x1]\n 12488: a3 = u8 [a0]\n 12490: a4 = u8 [a0 + 0x2]\n 12493: a5 = u8 [a0 + 0x3]\n 12496: a2 = a2 << 0x8\n 12499: a2 = a2 | a3\n 12502: a4 = a4 << 0x10\n 12505: a5 = a5 << 0x18\n 12508: a4 = a4 | a5\n 12511: a2 = a2 | a4\n 12514: a3 = u8 [a0 + 0x5]\n 12517: a4 = u8 [a0 + 0x4]\n 12520: a5 = u8 [a0 + 0x6]\n 12523: s1 = u8 [a0 + 0x7]\n 12526: a3 = a3 << 0x8\n 12529: a3 = a3 | a4\n 12532: a5 = a5 << 0x10\n 12535: s1 = s1 << 0x18\n 12538: a5 = a5 | s1\n 12541: a3 = a3 | a5\n 12544: a3 = a3 << 0x20\n 12547: a2 = a2 | a3\n 12550: a3 = u8 [a0 + 0x19]\n 12553: a4 = u8 [a0 + 0x18]\n 12556: a5 = u8 [a0 + 0x1a]\n 12559: s1 = u8 [a0 + 0x1b]\n 12562: a3 = a3 << 0x8\n 12565: a3 = a3 | a4\n 12568: a5 = a5 << 0x10\n 12571: s1 = s1 << 0x18\n 12574: a5 = a5 | s1\n 12577: a3 = a3 | a5\n 12580: a4 = u8 [a0 + 0x1d]\n 12583: a5 = u8 [a0 + 0x1c]\n 12586: s1 = u8 [a0 + 0x1e]\n 12589: a1 = u8 [a0 + 0x1f]\n 12592: a4 = a4 << 0x8\n 12595: a4 = a4 | a5\n 12598: s1 = s1 << 0x10\n 12601: a1 = a1 << 0x18\n 12604: a1 = a1 | s1\n 12607: a1 = a1 | a4\n 12610: a1 = a1 << 0x20\n 12613: a3 = a3 | a1\n 12616: a1 = u8 [a0 + 0x9]\n 12619: a4 = u8 [a0 + 0x8]\n 12622: a5 = u8 [a0 + 0xa]\n 12625: s1 = u8 [a0 + 0xb]\n 12628: a1 = a1 << 0x8\n 12631: a1 = a1 | a4\n 12634: a5 = a5 << 0x10\n 12637: s1 = s1 << 0x18\n 12640: a5 = a5 | s1\n 12643: a1 = a1 | a5\n 12646: a4 = u8 [a0 + 0xd]\n 12649: a5 = u8 [a0 + 0xc]\n 12652: s1 = u8 [a0 + 0xe]\n 12655: a0 = u8 [a0 + 0xf]\n 12658: a4 = a4 << 0x8\n 12661: a4 = a4 | a5\n 12664: s1 = s1 << 0x10\n 12667: a0 = a0 << 0x18\n 12670: a0 = a0 | s1\n 12673: a0 = a0 | a4\n 12676: a0 = a0 << 0x20\n 12679: a0 = a0 | a1\n 12682: s1 = reverse a0\n 12684: a3 = reverse a3\n 12686: a4 = reverse a2\n 12688: a2 = reverse t0\n 12690: a0 = a2 | a4\n 12693: a1 = a3 | s1\n 12696: a1 = a1 | a0\n 12699: a1 = a1 >> 0x20\n 12702: a0 = a0 | s1\n 12705: a0 = a0 << 0x20\n 12708: a0 = a0 | a1\n 12711: jump @194 if a0 != 0\n      : @188 (gas: 11)\n 12715: a0 = u64 [sp + 0x88]\n 12719: a0 = a0 << 0x20\n 12722: a0 = a0 >> 0x20\n 12725: u64 [sp + 0x10] = a0\n 12728: i32 a0 = a3 + 0\n 12730: a1 = 0x20\n 12733: u64 [sp + 0x8] = a0\n 12736: u64 [sp + 0x80] = a3\n 12740: u64 [sp + 0x78] = a2\n 12743: u64 [sp + 0x88] = a4\n 12747: ra = 168, jump @0\n      : @189 [@dyn 84] (gas: 66)\n 12753: a1 = u64 [sp + 0x10]\n 12756: a1 = reverse a1\n 12758: a2 = u64 [sp + 0x90]\n 12762: a2 = reverse a2\n 12764: a3 = u64 [sp + 0x98]\n 12768: a3 = reverse a3\n 12770: a4 = a3 >> 0x38\n 12773: u8 [a0 + 0x1f] = a4\n 12776: a4 = a3 >> 0x30\n 12779: u8 [a0 + 0x1e] = a4\n 12782: a4 = a3 >> 0x28\n 12785: u8 [a0 + 0x1d] = a4\n 12788: a4 = a3 >> 0x20\n 12791: u8 [a0 + 0x1c] = a4\n 12794: a4 = a3 >> 0x18\n 12797: u8 [a0 + 0x1b] = a4\n 12800: a4 = a3 >> 0x10\n 12803: u8 [a0 + 0x1a] = a4\n 12806: a4 = a3 >> 0x8\n 12809: u8 [a0 + 0x19] = a4\n 12812: u8 [a0 + 0x18] = a3\n 12815: u8 [a0 + 0x10] = a2\n 12818: u8 [a0 + 11] = 0\n 12821: u8 [a0 + 10] = 0\n 12824: u8 [a0 + 9] = 0\n 12827: u8 [a0 + 7] = 0\n 12830: u8 [a0 + 6] = 0\n 12833: u8 [a0 + 5] = 0\n 12836: u8 [a0 + 4] = 0\n 12839: u8 [a0 + 3] = 0\n 12842: u8 [a0 + 2] = 0\n 12845: u8 [a0 + 1] = 0\n 12848: u8 [a0 + 0] = 0\n 12850: a3 = a2 >> 0x38\n 12853: u8 [a0 + 0x17] = a3\n 12856: a3 = a2 >> 0x30\n 12859: u8 [a0 + 0x16] = a3\n 12862: a3 = a2 >> 0x28\n 12865: u8 [a0 + 0x15] = a3\n 12868: a3 = a2 >> 0x20\n 12871: u8 [a0 + 0x14] = a3\n 12874: a3 = a2 >> 0x18\n 12877: u8 [a0 + 0x13] = a3\n 12880: a3 = a2 >> 0x10\n 12883: u8 [a0 + 0x12] = a3\n 12886: a2 = a2 >> 0x8\n 12889: u8 [a0 + 0x11] = a2\n 12892: u8 [a0 + 0x8] = a1\n 12895: a2 = a1 >> 0x38\n 12898: u8 [a0 + 0xf] = a2\n 12901: a2 = a1 >> 0x30\n 12904: u8 [a0 + 0xe] = a2\n 12907: a2 = a1 >> 0x28\n 12910: u8 [a0 + 0xd] = a2\n 12913: a1 = a1 >> 0x20\n 12916: a2 = u64 [sp + 0x88]\n 12920: s1 = s1 | a2\n 12923: a4 = 0x100000000\n 12933: a2 = 0xffffffe0\n 12943: a3 = u64 [sp + 0x80]\n 12947: a2 = a3 <u a2\n 12950: a3 = u64 [sp + 0x78]\n 12953: a2 = 0 if a3 != 0\n 12955: a2 = 0 if s1 != 0\n 12957: u8 [a0 + 0xc] = a1\n 12960: jump @194 if a2 == 0\n      : @190 (gas: 5)\n 12964: a0 = u64 [sp + 0x8]\n 12967: i32 a0 = a0 + 0x20\n 12970: a1 = 0x20\n 12973: u64 [sp + 0x98] = a4\n 12977: ra = 170, jump @0\n      : @191 [@dyn 85] (gas: 76)\n 12983: a1 = u64 [sp + 0x58]\n 12986: a1 = reverse a1\n 12988: a2 = u64 [sp + 0x60]\n 12991: a2 = reverse a2\n 12993: a3 = u64 [sp + 0x68]\n 12996: a3 = reverse a3\n 12998: a4 = u64 [sp + 0x70]\n 13001: a4 = reverse a4\n 13003: a5 = a4 >> 0x38\n 13006: u8 [a0 + 0x1f] = a5\n 13009: a5 = a4 >> 0x30\n 13012: u8 [a0 + 0x1e] = a5\n 13015: a5 = a4 >> 0x28\n 13018: u8 [a0 + 0x1d] = a5\n 13021: a5 = a4 >> 0x20\n 13024: u8 [a0 + 0x1c] = a5\n 13027: a5 = a4 >> 0x18\n 13030: u8 [a0 + 0x1b] = a5\n 13033: a5 = a4 >> 0x10\n 13036: u8 [a0 + 0x1a] = a5\n 13039: a5 = a4 >> 0x8\n 13042: u8 [a0 + 0x19] = a5\n 13045: u8 [a0 + 0x18] = a4\n 13048: u8 [a0 + 0x10] = a3\n 13051: a4 = a3 >> 0x38\n 13054: u8 [a0 + 0x17] = a4\n 13057: a4 = a3 >> 0x30\n 13060: u8 [a0 + 0x16] = a4\n 13063: a4 = a3 >> 0x28\n 13066: u8 [a0 + 0x15] = a4\n 13069: a4 = a3 >> 0x20\n 13072: u8 [a0 + 0x14] = a4\n 13075: a4 = a3 >> 0x18\n 13078: u8 [a0 + 0x13] = a4\n 13081: a4 = a3 >> 0x10\n 13084: u8 [a0 + 0x12] = a4\n 13087: a4 = u64 [sp + 0x78]\n 13090: a3 = a3 >> 0x8\n 13093: u8 [a0 + 0x11] = a3\n 13096: u8 [a0 + 0x8] = a2\n 13099: a3 = a2 >> 0x38\n 13102: u8 [a0 + 0xf] = a3\n 13105: a3 = a2 >> 0x30\n 13108: u8 [a0 + 0xe] = a3\n 13111: a3 = a2 >> 0x28\n 13114: u8 [a0 + 0xd] = a3\n 13117: a3 = a2 >> 0x20\n 13120: u8 [a0 + 0xc] = a3\n 13123: a3 = a2 >> 0x18\n 13126: u8 [a0 + 0xb] = a3\n 13129: a3 = a2 >> 0x10\n 13132: u8 [a0 + 0xa] = a3\n 13135: a3 = u64 [sp + 0x80]\n 13139: a2 = a2 >> 0x8\n 13142: u8 [a0 + 0x9] = a2\n 13145: u8 [a0] = a1\n 13147: a2 = a1 >> 0x38\n 13150: u8 [a0 + 0x7] = a2\n 13153: a2 = a1 >> 0x30\n 13156: u8 [a0 + 0x6] = a2\n 13159: a2 = a1 >> 0x28\n 13162: u8 [a0 + 0x5] = a2\n 13165: a2 = a1 >> 0x20\n 13168: u8 [a0 + 0x4] = a2\n 13171: a2 = a1 >> 0x18\n 13174: u8 [a0 + 0x3] = a2\n 13177: a2 = a1 >> 0x10\n 13180: u8 [a0 + 0x2] = a2\n 13183: a1 = a1 >> 0x8\n 13186: a2 = u64 [sp + 0x98]\n 13190: a2 = a2 + 0xffffffffffffffc0\n 13193: a2 = a3 <u a2\n 13196: a2 = 0 if a4 != 0\n 13198: a2 = 0 if s1 != 0\n 13200: u8 [a0 + 0x1] = a1\n 13203: jump @194 if a2 == 0\n      : @192 (gas: 6)\n 13207: a5 = s1\n 13209: s1 = u64 [sp + 0x8]\n 13212: i32 a0 = s1 + 0x40\n 13215: a1 = 0x20\n 13218: u64 [sp + 0x98] = a5\n 13222: ra = 172, jump @0\n      : @193 [@dyn 86] (gas: 76)\n 13228: a1 = u64 [sp + 0x38]\n 13231: a1 = reverse a1\n 13233: a2 = u64 [sp + 0x40]\n 13236: a2 = reverse a2\n 13238: a3 = u64 [sp + 0x48]\n 13241: a3 = reverse a3\n 13243: a4 = u64 [sp + 0x50]\n 13246: a4 = reverse a4\n 13248: a5 = a4 >> 0x38\n 13251: u8 [a0 + 0x1f] = a5\n 13254: a5 = a4 >> 0x30\n 13257: u8 [a0 + 0x1e] = a5\n 13260: a5 = a4 >> 0x28\n 13263: u8 [a0 + 0x1d] = a5\n 13266: a5 = a4 >> 0x20\n 13269: u8 [a0 + 0x1c] = a5\n 13272: a5 = a4 >> 0x18\n 13275: u8 [a0 + 0x1b] = a5\n 13278: a5 = a4 >> 0x10\n 13281: u8 [a0 + 0x1a] = a5\n 13284: a5 = a4 >> 0x8\n 13287: u8 [a0 + 0x19] = a5\n 13290: u8 [a0 + 0x18] = a4\n 13293: u8 [a0 + 0x10] = a3\n 13296: a4 = a3 >> 0x38\n 13299: u8 [a0 + 0x17] = a4\n 13302: a4 = a3 >> 0x30\n 13305: u8 [a0 + 0x16] = a4\n 13308: a4 = a3 >> 0x28\n 13311: u8 [a0 + 0x15] = a4\n 13314: a4 = a3 >> 0x20\n 13317: u8 [a0 + 0x14] = a4\n 13320: a4 = a3 >> 0x18\n 13323: u8 [a0 + 0x13] = a4\n 13326: a4 = a3 >> 0x10\n 13329: u8 [a0 + 0x12] = a4\n 13332: a3 = a3 >> 0x8\n 13335: u8 [a0 + 0x11] = a3\n 13338: u8 [a0 + 0x8] = a2\n 13341: a3 = a2 >> 0x38\n 13344: u8 [a0 + 0xf] = a3\n 13347: a3 = a2 >> 0x30\n 13350: u8 [a0 + 0xe] = a3\n 13353: a3 = a2 >> 0x28\n 13356: u8 [a0 + 0xd] = a3\n 13359: a3 = a2 >> 0x20\n 13362: u8 [a0 + 0xc] = a3\n 13365: a3 = a2 >> 0x18\n 13368: u8 [a0 + 0xb] = a3\n 13371: a3 = a2 >> 0x10\n 13374: u8 [a0 + 0xa] = a3\n 13377: a2 = a2 >> 0x8\n 13380: u8 [a0 + 0x9] = a2\n 13383: u8 [a0] = a1\n 13385: a2 = a1 >> 0x38\n 13388: u8 [a0 + 0x7] = a2\n 13391: a2 = a1 >> 0x30\n 13394: u8 [a0 + 0x6] = a2\n 13397: a2 = a1 >> 0x28\n 13400: u8 [a0 + 0x5] = a2\n 13403: a2 = a1 >> 0x20\n 13406: u8 [a0 + 0x4] = a2\n 13409: a2 = a1 >> 0x18\n 13412: u8 [a0 + 0x3] = a2\n 13415: a2 = a1 >> 0x10\n 13418: u8 [a0 + 0x2] = a2\n 13421: a1 = a1 >> 0x8\n 13424: a2 = 0xffffffa0\n 13434: a3 = u64 [sp + 0x80]\n 13438: a2 = a3 <u a2\n 13441: a3 = u64 [sp + 0x78]\n 13444: a2 = 0 if a3 != 0\n 13446: a3 = u64 [sp + 0x98]\n 13450: a2 = 0 if a3 != 0\n 13452: u8 [a0 + 0x1] = a1\n 13455: jump @197 if a2 != 0\n      : @194 (gas: 1)\n 13458: trap\n      : @195 (gas: 3)\n 13459: a0 = 0\n 13461: a1 = 0\n 13463: ra = 174, jump @0\n      : @196 [@dyn 87] (gas: 5)\n 13469: i32 a1 = a0 + 0\n 13471: a0 = 0x1\n 13474: a2 = 0\n 13476: ecalli 11 // 'seal_return'\n 13478: fallthrough\n      : @197 (gas: 12)\n 13479: a0 = u64 [sp + 0x20]\n 13482: a1 = u64 [sp + 0x18]\n 13485: a0 = a0 | a1\n 13488: a1 = u64 [sp + 0x30]\n 13491: a2 = u64 [sp + 0x28]\n 13494: a1 = a1 | a2\n 13497: a0 = a0 | a1\n 13500: a0 = a0 >u 0\n 13502: u64 [sp + 0x98] = a0\n 13506: i32 a0 = s1 + 0x60\n 13509: a1 = 0x20\n 13512: ra = 176, jump @0\n      : @198 [@dyn 88] (gas: 36)\n 13518: u8 [a0 + 30] = 0\n 13521: u8 [a0 + 29] = 0\n 13524: u8 [a0 + 28] = 0\n 13527: u8 [a0 + 27] = 0\n 13530: u8 [a0 + 26] = 0\n 13533: u8 [a0 + 25] = 0\n 13536: u8 [a0 + 24] = 0\n 13539: u8 [a0 + 23] = 0\n 13542: u8 [a0 + 22] = 0\n 13545: u8 [a0 + 21] = 0\n 13548: u8 [a0 + 20] = 0\n 13551: u8 [a0 + 19] = 0\n 13554: u8 [a0 + 18] = 0\n 13557: u8 [a0 + 17] = 0\n 13560: u8 [a0 + 16] = 0\n 13563: u8 [a0 + 15] = 0\n 13566: u8 [a0 + 14] = 0\n 13569: u8 [a0 + 13] = 0\n 13572: u8 [a0 + 12] = 0\n 13575: u8 [a0 + 11] = 0\n 13578: u8 [a0 + 10] = 0\n 13581: u8 [a0 + 9] = 0\n 13584: u8 [a0 + 8] = 0\n 13587: u8 [a0 + 7] = 0\n 13590: u8 [a0 + 6] = 0\n 13593: u8 [a0 + 5] = 0\n 13596: u8 [a0 + 4] = 0\n 13599: u8 [a0 + 3] = 0\n 13602: u8 [a0 + 2] = 0\n 13605: u8 [a0 + 1] = 0\n 13608: u8 [a0 + 0] = 0\n 13610: a1 = u64 [sp + 0x98]\n 13614: u8 [a0 + 0x1f] = a1\n 13617: a1 = 0x80\n 13621: a0 = s1\n 13623: ra = 178, jump @0\n      : @199 [@dyn 89] (gas: 6)\n 13629: i32 a1 = a0 + 0\n 13631: a2 = 0x80\n 13635: a0 = 0\n 13637: ra = 0xb4\n 13641: ecalli 11 // 'seal_return'\n 13643: fallthrough\n      : @200 [@dyn 90] (gas: 9)\n 13644: a2 = u64 [a1 + 0x18]\n 13647: a3 = u64 [a1 + 0x10]\n 13650: a4 = u64 [a1 + 0x8]\n 13653: a1 = u64 [a1]\n 13655: u64 [a0 + 0x18] = a2\n 13658: u64 [a0 + 0x10] = a3\n 13661: u64 [a0 + 0x8] = a4\n 13664: u64 [a0] = a1\n 13666: ret\n      : @201 (gas: 17)\n 13668: sp = sp + 0xffffffffffffffa0\n 13671: u64 [sp + 0x58] = ra\n 13674: u64 [sp + 0x50] = s0\n 13677: u64 [sp + 0x48] = s1\n 13680: a3 = u64 [a1 + 0x18]\n 13683: a4 = u64 [a1 + 0x10]\n 13686: a5 = u64 [a1 + 0x8]\n 13689: s1 = u64 [a1]\n 13691: a1 = a5 | a3\n 13694: a2 = s1 | a4\n 13697: a2 = a2 | a1\n 13700: a2 = a2 >> 0x20\n 13703: a1 = a1 | a4\n 13706: a1 = a1 << 0x20\n 13709: a1 = a1 | a2\n 13712: u64 [sp + 0x28] = a0\n 13715: jump @208 if a1 != 0\n      : @202 (gas: 19)\n 13719: a0 = s1 + 0x20\n 13722: u64 [sp + 0x30] = a0\n 13725: a0 = a0 <u s1\n 13728: a1 = a5 + a0\n 13731: u64 [sp + 0x40] = a1\n 13734: u64 [sp + 0x8] = a5\n 13737: s0 = a1 <u a5\n 13740: s0 = a0 if a0 == 0\n 13743: s0 = s0 + a4\n 13746: u64 [sp + 0x10] = a4\n 13749: a0 = s0 <u a4\n 13752: u64 [sp + 0x18] = a3\n 13755: a0 = a0 + a3\n 13758: u64 [sp + 0x38] = a0\n 13761: u64 [sp] = s1\n 13763: i32 a0 = s1 + 0\n 13765: a1 = 0x20\n 13768: s1 = 0x20\n 13771: ra = 182, jump @0\n      : @203 [@dyn 91] (gas: 45)\n 13777: u8 [a0 + 0x1f] = s1\n 13780: a1 = u64 [sp + 0x30]\n 13783: s1 = a1\n 13785: a1 = a1 | s0\n 13788: a2 = u64 [sp + 0x40]\n 13791: a4 = u64 [sp + 0x38]\n 13794: a2 = a2 | a4\n 13797: a1 = a1 | a2\n 13800: a1 = a1 >> 0x20\n 13803: u64 [sp + 0x20] = s0\n 13806: a2 = a2 | s0\n 13809: a2 = a2 << 0x20\n 13812: a1 = a1 | a2\n 13815: u8 [a0 + 30] = 0\n 13818: u8 [a0 + 29] = 0\n 13821: u8 [a0 + 28] = 0\n 13824: u8 [a0 + 27] = 0\n 13827: u8 [a0 + 26] = 0\n 13830: u8 [a0 + 25] = 0\n 13833: u8 [a0 + 24] = 0\n 13836: u8 [a0 + 23] = 0\n 13839: u8 [a0 + 22] = 0\n 13842: u8 [a0 + 21] = 0\n 13845: u8 [a0 + 20] = 0\n 13848: u8 [a0 + 19] = 0\n 13851: u8 [a0 + 18] = 0\n 13854: u8 [a0 + 17] = 0\n 13857: u8 [a0 + 16] = 0\n 13860: u8 [a0 + 15] = 0\n 13863: u8 [a0 + 14] = 0\n 13866: u8 [a0 + 13] = 0\n 13869: u8 [a0 + 12] = 0\n 13872: u8 [a0 + 11] = 0\n 13875: u8 [a0 + 10] = 0\n 13878: u8 [a0 + 9] = 0\n 13881: u8 [a0 + 8] = 0\n 13884: u8 [a0 + 7] = 0\n 13887: u8 [a0 + 6] = 0\n 13890: u8 [a0 + 5] = 0\n 13893: u8 [a0 + 4] = 0\n 13896: u8 [a0 + 3] = 0\n 13899: u8 [a0 + 2] = 0\n 13902: u8 [a0 + 1] = 0\n 13905: u8 [a0 + 0] = 0\n 13907: jump @208 if a1 != 0\n      : @204 (gas: 4)\n 13911: i32 s0 = s1 + 0\n 13913: a1 = 0x20\n 13916: a0 = s0\n 13918: ra = 184, jump @0\n      : @205 [@dyn 92] (gas: 41)\n 13924: u8 [a0 + 31] = 0xf\n 13928: u8 [a0 + 30] = 0\n 13931: u8 [a0 + 29] = 0\n 13934: u8 [a0 + 28] = 0\n 13937: u8 [a0 + 27] = 0\n 13940: u8 [a0 + 26] = 0\n 13943: u8 [a0 + 25] = 0\n 13946: u8 [a0 + 24] = 0\n 13949: u8 [a0 + 23] = 0\n 13952: u8 [a0 + 22] = 0\n 13955: u8 [a0 + 21] = 0\n 13958: u8 [a0 + 20] = 0\n 13961: u8 [a0 + 19] = 0\n 13964: u8 [a0 + 18] = 0\n 13967: u8 [a0 + 17] = 0\n 13970: u8 [a0 + 16] = 0\n 13973: u8 [a0 + 15] = 0\n 13976: u8 [a0 + 14] = 0\n 13979: u8 [a0 + 13] = 0\n 13982: u8 [a0 + 12] = 0\n 13985: u8 [a0 + 11] = 0\n 13988: u8 [a0 + 10] = 0\n 13991: u8 [a0 + 9] = 0\n 13994: u8 [a0 + 8] = 0\n 13997: u8 [a0 + 7] = 0\n 14000: u8 [a0 + 6] = 0\n 14003: u8 [a0 + 5] = 0\n 14006: u8 [a0 + 4] = 0\n 14009: u8 [a0 + 3] = 0\n 14012: u8 [a0 + 2] = 0\n 14015: u8 [a0 + 1] = 0\n 14018: a1 = u64 [sp + 0x20]\n 14021: a2 = u64 [sp + 0x38]\n 14024: a1 = a1 | a2\n 14027: a2 = 0xffffffe0\n 14037: a2 = s1 <u a2\n 14040: a3 = u64 [sp + 0x40]\n 14043: a2 = 0 if a3 != 0\n 14045: a2 = 0 if a1 != 0\n 14047: u8 [a0 + 0] = 0\n 14049: jump @208 if a2 == 0\n      : @206 (gas: 3)\n 14053: i32 a0 = s0 + 0x20\n 14056: a1 = 0x20\n 14059: ra = 186, jump @0\n      : @207 [@dyn 93] (gas: 55)\n 14065: u8 [a0 + 31] = 0\n 14068: u8 [a0 + 30] = 0\n 14071: u8 [a0 + 29] = 0\n 14074: u8 [a0 + 28] = 0\n 14077: u8 [a0 + 27] = 0\n 14080: u8 [a0 + 26] = 0\n 14083: u8 [a0 + 25] = 0\n 14086: u8 [a0 + 24] = 0\n 14089: u8 [a0 + 23] = 0\n 14092: u8 [a0 + 22] = 0\n 14095: u8 [a0 + 21] = 0\n 14098: u8 [a0 + 20] = 0\n 14101: u8 [a0 + 19] = 0\n 14104: u8 [a0 + 18] = 0\n 14107: u8 [a0 + 17] = 0\n 14110: u8 [a0 + 16] = 0\n 14113: u8 [a0 + 15] = 0\n 14116: u8 [a0 + 14] = 0x44\n 14120: u8 [a0 + 13] = 0x49\n 14124: a5 = 0x20\n 14127: u8 [a0 + 0xc] = a5\n 14130: u8 [a0 + 11] = 0x64\n 14134: u8 [a0 + 10] = 0x72\n 14138: u8 [a0 + 9] = 0x61\n 14142: u8 [a0 + 8] = 0x63\n 14146: u8 [a0 + 0x7] = a5\n 14149: u8 [a0 + 6] = 0x64\n 14153: u8 [a0 + 5] = 0x69\n 14157: u8 [a0 + 4] = 0x6c\n 14161: u8 [a0 + 3] = 0x61\n 14165: u8 [a0 + 2] = 0x76\n 14169: u8 [a0 + 1] = 0x6e\n 14173: u8 [a0 + 0] = 0x49\n 14176: a1 = u64 [sp]\n 14178: a0 = a1 + 0x60\n 14181: a1 = a0 <u a1\n 14184: a3 = u64 [sp + 0x8]\n 14187: a2 = a3 + a1\n 14190: a3 = a2 <u a3\n 14193: a3 = a1 if a1 == 0\n 14196: a1 = u64 [sp + 0x10]\n 14199: a3 = a3 + a1\n 14202: a1 = a3 <u a1\n 14205: a4 = u64 [sp + 0x18]\n 14208: a1 = a1 + a4\n 14211: a4 = u64 [sp + 0x28]\n 14214: u64 [a4] = a0\n 14216: u64 [a4 + 0x8] = a2\n 14219: u64 [a4 + 0x10] = a3\n 14222: u64 [a4 + 0x18] = a1\n 14225: ra = u64 [sp + 0x58]\n 14228: s0 = u64 [sp + 0x50]\n 14231: s1 = u64 [sp + 0x48]\n 14234: sp = sp + 0x60\n 14237: ret\n      : @208 (gas: 1)\n 14239: trap\n      : @209 [@dyn 94] (gas: 6)\n 14240: i32 a1 = a0 + 0\n 14242: a0 = 0x1\n 14245: a2 = 0\n 14247: ra = 0xbe\n 14251: ecalli 11 // 'seal_return'\n 14253: fallthrough\n      : @210 [@dyn 95] (gas: 7)\n 14254: a1 = u64 [a1]\n 14256: a1 = a1 << 0x20\n 14259: u64 [a0 + 0x18] = a1\n 14262: u64 [a0 + 16] = 0\n 14265: u64 [a0 + 8] = 0\n 14268: u64 [a0 + 0] = 0\n 14270: ret\n      : @211 (gas: 9)\n 14272: sp = sp + 0xffffffffffffffc0\n 14275: u64 [sp + 0x38] = ra\n 14278: u64 [sp + 0x30] = s0\n 14281: u64 [sp + 0x28] = s1\n 14284: s0 = sp + 0x40\n 14287: sp = sp & 0xffffffffffffffe0\n 14290: a0 = 0x40\n 14293: a1 = 0x20\n 14296: ra = 192, jump @0\n      : @212 [@dyn 96] (gas: 97)\n 14302: a1 = u8 [a0 + 0x11]\n 14305: a2 = u8 [a0 + 0x10]\n 14308: a3 = u8 [a0 + 0x12]\n 14311: a4 = u8 [a0 + 0x13]\n 14314: a1 = a1 << 0x8\n 14317: a1 = a1 | a2\n 14320: a3 = a3 << 0x10\n 14323: a4 = a4 << 0x18\n 14326: a3 = a3 | a4\n 14329: a1 = a1 | a3\n 14332: a2 = u8 [a0 + 0x15]\n 14335: a3 = u8 [a0 + 0x14]\n 14338: a4 = u8 [a0 + 0x16]\n 14341: a5 = u8 [a0 + 0x17]\n 14344: a2 = a2 << 0x8\n 14347: a2 = a2 | a3\n 14350: a4 = a4 << 0x10\n 14353: a5 = a5 << 0x18\n 14356: a4 = a4 | a5\n 14359: a2 = a2 | a4\n 14362: a2 = a2 << 0x20\n 14365: t0 = a2 | a1\n 14368: a2 = u8 [a0 + 0x1]\n 14371: a3 = u8 [a0]\n 14373: a4 = u8 [a0 + 0x2]\n 14376: a5 = u8 [a0 + 0x3]\n 14379: a2 = a2 << 0x8\n 14382: a2 = a2 | a3\n 14385: a4 = a4 << 0x10\n 14388: a5 = a5 << 0x18\n 14391: a4 = a4 | a5\n 14394: a2 = a2 | a4\n 14397: a3 = u8 [a0 + 0x5]\n 14400: a4 = u8 [a0 + 0x4]\n 14403: a5 = u8 [a0 + 0x6]\n 14406: s1 = u8 [a0 + 0x7]\n 14409: a3 = a3 << 0x8\n 14412: a3 = a3 | a4\n 14415: a5 = a5 << 0x10\n 14418: s1 = s1 << 0x18\n 14421: a5 = a5 | s1\n 14424: a3 = a3 | a5\n 14427: a3 = a3 << 0x20\n 14430: a2 = a2 | a3\n 14433: a3 = u8 [a0 + 0x19]\n 14436: a4 = u8 [a0 + 0x18]\n 14439: a5 = u8 [a0 + 0x1a]\n 14442: s1 = u8 [a0 + 0x1b]\n 14445: a3 = a3 << 0x8\n 14448: a3 = a3 | a4\n 14451: a5 = a5 << 0x10\n 14454: s1 = s1 << 0x18\n 14457: a5 = a5 | s1\n 14460: a3 = a3 | a5\n 14463: a4 = u8 [a0 + 0x1d]\n 14466: a5 = u8 [a0 + 0x1c]\n 14469: s1 = u8 [a0 + 0x1e]\n 14472: a1 = u8 [a0 + 0x1f]\n 14475: a4 = a4 << 0x8\n 14478: a4 = a4 | a5\n 14481: s1 = s1 << 0x10\n 14484: a1 = a1 << 0x18\n 14487: a1 = a1 | s1\n 14490: a1 = a1 | a4\n 14493: a1 = a1 << 0x20\n 14496: a3 = a3 | a1\n 14499: a1 = u8 [a0 + 0x9]\n 14502: a4 = u8 [a0 + 0x8]\n 14505: a5 = u8 [a0 + 0xa]\n 14508: s1 = u8 [a0 + 0xb]\n 14511: a1 = a1 << 0x8\n 14514: a1 = a1 | a4\n 14517: a5 = a5 << 0x10\n 14520: s1 = s1 << 0x18\n 14523: a5 = a5 | s1\n 14526: a1 = a1 | a5\n 14529: a4 = u8 [a0 + 0xd]\n 14532: a5 = u8 [a0 + 0xc]\n 14535: s1 = u8 [a0 + 0xe]\n 14538: a0 = u8 [a0 + 0xf]\n 14541: a4 = a4 << 0x8\n 14544: a4 = a4 | a5\n 14547: s1 = s1 << 0x10\n 14550: a0 = a0 << 0x18\n 14553: a0 = a0 | s1\n 14556: a0 = a0 | a4\n 14559: a0 = a0 << 0x20\n 14562: a0 = a0 | a1\n 14565: s1 = reverse a0\n 14567: a0 = reverse a3\n 14569: u64 [sp + 0x8] = a0\n 14572: a0 = reverse a2\n 14574: u64 [sp + 0x18] = a0\n 14577: a0 = reverse t0\n 14579: u64 [sp + 0x10] = a0\n 14582: ecalli 10 // 'return_data_size'\n 14584: fallthrough\n      : @213 (gas: 11)\n 14585: a3 = u64 [sp + 0x8]\n 14588: a1 = u64 [sp + 0x18]\n 14591: a2 = u64 [sp + 0x10]\n 14594: a1 = a1 | a2\n 14597: a2 = a3 | s1\n 14600: a2 = a2 | a1\n 14603: a2 = a2 >> 0x20\n 14606: a1 = a1 | s1\n 14609: a1 = a1 << 0x20\n 14612: a1 = a1 | a2\n 14615: jump @220 if a1 != 0\n      : @214 (gas: 3)\n 14618: s1 = a0\n 14620: a0 = a0 >> 0x20\n 14623: jump @220 if a0 != 0\n      : @215 (gas: 5)\n 14626: i32 a0 = a3 + 0\n 14628: i32 a1 = s1 + 0\n 14630: u64 [sp + 0x18] = a1\n 14633: u64 [sp + 0x10] = a0\n 14636: ra = 194, jump @0\n      : @216 [@dyn 97] (gas: 6)\n 14642: u32 [sp + 0x20] = s1\n 14645: i32 a0 = a0 + 0\n 14647: i32 a1 = sp + 0x20\n 14650: a2 = 0\n 14652: ecalli 9 // 'return_data_copy'\n 14654: fallthrough\n      : @217 (gas: 3)\n 14655: a0 = i32 [sp + 0x20]\n 14658: a1 = u64 [sp + 0x18]\n 14661: jump @220 if a0 <u a1\n      : @218 (gas: 2)\n 14664: ecalli 10 // 'return_data_size'\n 14666: fallthrough\n      : @219 (gas: 2)\n 14667: a1 = a0 >> 0x20\n 14670: jump @221 if a1 == 0\n      : @220 (gas: 1)\n 14673: trap\n      : @221 (gas: 4)\n 14674: i32 s1 = a0 + 0\n 14676: a0 = u64 [sp + 0x10]\n 14679: a1 = s1\n 14681: ra = 196, jump @0\n      : @222 [@dyn 98] (gas: 6)\n 14687: i32 a1 = a0 + 0\n 14689: a0 = 0x1\n 14692: a2 = s1\n 14694: ra = 0xc6\n 14698: ecalli 11 // 'seal_return'\n 14700: fallthrough\n      : @223 [@dyn 99] (gas: 12)\n 14701: a1 = u64 [a0 + 0x10]\n 14704: a2 = u64 [a0 + 0x18]\n 14707: a3 = u64 [a0 + 0x8]\n 14710: a0 = u64 [a0]\n 14712: a2 = a2 | a3\n 14715: a3 = a0 | a1\n 14718: a3 = a3 | a2\n 14721: a3 = a3 >> 0x20\n 14724: a1 = a1 | a2\n 14727: a1 = a1 << 0x20\n 14730: a1 = a1 | a3\n 14733: jump @226 if a1 != 0\n      : @224 (gas: 7)\n 14737: sp = sp + 0xfffffffffffffff0\n 14740: u64 [sp + 0x8] = ra\n 14743: u64 [sp] = s0\n 14745: i32 a0 = a0 + 0\n 14747: a1 = 0x20\n 14750: s0 = 0x20\n 14753: ra = 200, jump @0\n      : @225 [@dyn 100] (gas: 42)\n 14759: u8 [a0 + 31] = 0\n 14762: u8 [a0 + 30] = 0x64\n 14766: u8 [a0 + 29] = 0x72\n 14770: t0 = 0x61\n 14773: u8 [a0 + 0x1c] = t0\n 14776: u8 [a0 + 27] = 0x63\n 14780: u8 [a0 + 0x1a] = s0\n 14783: u8 [a0 + 25] = 0x64\n 14787: u8 [a0 + 24] = 0x65\n 14791: u8 [a0 + 23] = 0x72\n 14795: u8 [a0 + 22] = 0x65\n 14799: u8 [a0 + 21] = 0x66\n 14803: u8 [a0 + 20] = 0x66\n 14807: a3 = 0x6f\n 14810: u8 [a0 + 0x13] = a3\n 14813: u8 [a0 + 0x12] = s0\n 14816: u8 [a0 + 17] = 0x65\n 14820: a5 = 0x68\n 14823: u8 [a0 + 0x10] = a5\n 14826: u8 [a0 + 15] = 0x74\n 14830: u8 [a0 + 0xe] = s0\n 14833: u8 [a0 + 13] = 0x65\n 14837: a4 = 0x76\n 14840: u8 [a0 + 0xc] = a4\n 14843: u8 [a0 + 0xb] = t0\n 14846: u8 [a0 + 0xa] = a5\n 14849: u8 [a0 + 0x9] = s0\n 14852: u8 [a0 + 8] = 0x74\n 14856: u8 [a0 + 7] = 0x27\n 14860: a2 = 0x6e\n 14863: u8 [a0 + 0x6] = a2\n 14866: u8 [a0 + 0x5] = a3\n 14869: u8 [a0 + 4] = 0x64\n 14873: u8 [a0 + 0x3] = s0\n 14876: u8 [a0 + 2] = 0x75\n 14880: u8 [a0 + 0x1] = a3\n 14883: a1 = 0x59\n 14886: u8 [a0] = a1\n 14888: ra = u64 [sp + 0x8]\n 14891: s0 = u64 [sp]\n 14893: sp = sp + 0x10\n 14896: ret\n      : @226 (gas: 1)\n 14898: trap\n      : @227 (gas: 17)\n 14899: sp = sp + 0xffffffffffffffa0\n 14902: u64 [sp + 0x58] = ra\n 14905: u64 [sp + 0x50] = s0\n 14908: u64 [sp + 0x48] = s1\n 14911: a3 = u64 [a1 + 0x18]\n 14914: a4 = u64 [a1 + 0x10]\n 14917: a5 = u64 [a1 + 0x8]\n 14920: s1 = u64 [a1]\n 14922: a1 = a5 | a3\n 14925: a2 = s1 | a4\n 14928: a2 = a2 | a1\n 14931: a2 = a2 >> 0x20\n 14934: a1 = a1 | a4\n 14937: a1 = a1 << 0x20\n 14940: a1 = a1 | a2\n 14943: u64 [sp + 0x28] = a0\n 14946: jump @234 if a1 != 0\n      : @228 (gas: 19)\n 14950: a0 = s1 + 0x20\n 14953: u64 [sp + 0x30] = a0\n 14956: a0 = a0 <u s1\n 14959: a1 = a5 + a0\n 14962: u64 [sp + 0x40] = a1\n 14965: u64 [sp + 0x8] = a5\n 14968: s0 = a1 <u a5\n 14971: s0 = a0 if a0 == 0\n 14974: s0 = s0 + a4\n 14977: u64 [sp + 0x10] = a4\n 14980: a0 = s0 <u a4\n 14983: u64 [sp + 0x18] = a3\n 14986: a0 = a0 + a3\n 14989: u64 [sp + 0x38] = a0\n 14992: u64 [sp] = s1\n 14994: i32 a0 = s1 + 0\n 14996: a1 = 0x20\n 14999: s1 = 0x20\n 15002: ra = 202, jump @0\n      : @229 [@dyn 101] (gas: 45)\n 15008: u8 [a0 + 0x1f] = s1\n 15011: a1 = u64 [sp + 0x30]\n 15014: s1 = a1\n 15016: a1 = a1 | s0\n 15019: a2 = u64 [sp + 0x40]\n 15022: a4 = u64 [sp + 0x38]\n 15025: a2 = a2 | a4\n 15028: a1 = a1 | a2\n 15031: a1 = a1 >> 0x20\n 15034: u64 [sp + 0x20] = s0\n 15037: a2 = a2 | s0\n 15040: a2 = a2 << 0x20\n 15043: a1 = a1 | a2\n 15046: u8 [a0 + 30] = 0\n 15049: u8 [a0 + 29] = 0\n 15052: u8 [a0 + 28] = 0\n 15055: u8 [a0 + 27] = 0\n 15058: u8 [a0 + 26] = 0\n 15061: u8 [a0 + 25] = 0\n 15064: u8 [a0 + 24] = 0\n 15067: u8 [a0 + 23] = 0\n 15070: u8 [a0 + 22] = 0\n 15073: u8 [a0 + 21] = 0\n 15076: u8 [a0 + 20] = 0\n 15079: u8 [a0 + 19] = 0\n 15082: u8 [a0 + 18] = 0\n 15085: u8 [a0 + 17] = 0\n 15088: u8 [a0 + 16] = 0\n 15091: u8 [a0 + 15] = 0\n 15094: u8 [a0 + 14] = 0\n 15097: u8 [a0 + 13] = 0\n 15100: u8 [a0 + 12] = 0\n 15103: u8 [a0 + 11] = 0\n 15106: u8 [a0 + 10] = 0\n 15109: u8 [a0 + 9] = 0\n 15112: u8 [a0 + 8] = 0\n 15115: u8 [a0 + 7] = 0\n 15118: u8 [a0 + 6] = 0\n 15121: u8 [a0 + 5] = 0\n 15124: u8 [a0 + 4] = 0\n 15127: u8 [a0 + 3] = 0\n 15130: u8 [a0 + 2] = 0\n 15133: u8 [a0 + 1] = 0\n 15136: u8 [a0 + 0] = 0\n 15138: jump @234 if a1 != 0\n      : @230 (gas: 4)\n 15142: i32 s0 = s1 + 0\n 15144: a1 = 0x20\n 15147: a0 = s0\n 15149: ra = 204, jump @0\n      : @231 [@dyn 102] (gas: 41)\n 15155: u8 [a0 + 31] = 0x1f\n 15159: u8 [a0 + 30] = 0\n 15162: u8 [a0 + 29] = 0\n 15165: u8 [a0 + 28] = 0\n 15168: u8 [a0 + 27] = 0\n 15171: u8 [a0 + 26] = 0\n 15174: u8 [a0 + 25] = 0\n 15177: u8 [a0 + 24] = 0\n 15180: u8 [a0 + 23] = 0\n 15183: u8 [a0 + 22] = 0\n 15186: u8 [a0 + 21] = 0\n 15189: u8 [a0 + 20] = 0\n 15192: u8 [a0 + 19] = 0\n 15195: u8 [a0 + 18] = 0\n 15198: u8 [a0 + 17] = 0\n 15201: u8 [a0 + 16] = 0\n 15204: u8 [a0 + 15] = 0\n 15207: u8 [a0 + 14] = 0\n 15210: u8 [a0 + 13] = 0\n 15213: u8 [a0 + 12] = 0\n 15216: u8 [a0 + 11] = 0\n 15219: u8 [a0 + 10] = 0\n 15222: u8 [a0 + 9] = 0\n 15225: u8 [a0 + 8] = 0\n 15228: u8 [a0 + 7] = 0\n 15231: u8 [a0 + 6] = 0\n 15234: u8 [a0 + 5] = 0\n 15237: u8 [a0 + 4] = 0\n 15240: u8 [a0 + 3] = 0\n 15243: u8 [a0 + 2] = 0\n 15246: u8 [a0 + 1] = 0\n 15249: a1 = u64 [sp + 0x20]\n 15252: a2 = u64 [sp + 0x38]\n 15255: a1 = a1 | a2\n 15258: a2 = 0xffffffe0\n 15268: a2 = s1 <u a2\n 15271: a3 = u64 [sp + 0x40]\n 15274: a2 = 0 if a3 != 0\n 15276: a2 = 0 if a1 != 0\n 15278: u8 [a0 + 0] = 0\n 15280: jump @234 if a2 == 0\n      : @232 (gas: 3)\n 15284: i32 a0 = s0 + 0x20\n 15287: a1 = 0x20\n 15290: ra = 206, jump @0\n      : @233 [@dyn 103] (gas: 54)\n 15296: u8 [a0 + 27] = 0x63\n 15300: u8 [a0 + 29] = 0x72\n 15304: u8 [a0 + 23] = 0x72\n 15308: u8 [a0 + 21] = 0x66\n 15312: u8 [a0 + 20] = 0x66\n 15316: u8 [a0 + 24] = 0x65\n 15320: u8 [a0 + 22] = 0x65\n 15324: u8 [a0 + 17] = 0x65\n 15328: u8 [a0 + 13] = 0x65\n 15332: u8 [a0 + 12] = 0x76\n 15336: u8 [a0 + 28] = 0x61\n 15340: u8 [a0 + 11] = 0x61\n 15344: u8 [a0 + 16] = 0x68\n 15348: u8 [a0 + 10] = 0x68\n 15352: u8 [a0 + 15] = 0x74\n 15356: u8 [a0 + 8] = 0x74\n 15360: u8 [a0 + 7] = 0x27\n 15364: u8 [a0 + 6] = 0x6e\n 15368: u8 [a0 + 30] = 0x64\n 15372: u8 [a0 + 25] = 0x64\n 15376: u8 [a0 + 4] = 0x64\n 15380: u8 [a0 + 31] = 0\n 15383: u8 [a0 + 26] = 0x20\n 15387: u8 [a0 + 18] = 0x20\n 15391: u8 [a0 + 14] = 0x20\n 15395: u8 [a0 + 9] = 0x20\n 15399: u8 [a0 + 3] = 0x20\n 15403: u8 [a0 + 2] = 0x75\n 15407: u8 [a0 + 19] = 0x6f\n 15411: u8 [a0 + 5] = 0x6f\n 15415: u8 [a0 + 1] = 0x6f\n 15419: u8 [a0 + 0] = 0x59\n 15422: a1 = u64 [sp]\n 15424: a0 = a1 + 0x60\n 15427: a1 = a0 <u a1\n 15430: a3 = u64 [sp + 0x8]\n 15433: a2 = a3 + a1\n 15436: a3 = a2 <u a3\n 15439: a3 = a1 if a1 == 0\n 15442: a1 = u64 [sp + 0x10]\n 15445: a3 = a3 + a1\n 15448: a1 = a3 <u a1\n 15451: a4 = u64 [sp + 0x18]\n 15454: a1 = a1 + a4\n 15457: a4 = u64 [sp + 0x28]\n 15460: u64 [a4] = a0\n 15462: u64 [a4 + 0x8] = a2\n 15465: u64 [a4 + 0x10] = a3\n 15468: u64 [a4 + 0x18] = a1\n 15471: ra = u64 [sp + 0x58]\n 15474: s0 = u64 [sp + 0x50]\n 15477: s1 = u64 [sp + 0x48]\n 15480: sp = sp + 0x60\n 15483: ret\n      : @234 (gas: 1)\n 15485: trap\n      : @235 (gas: 22)\n 15486: sp = sp + 0xfffffffffffffee0\n 15490: u64 [sp + 0x118] = ra\n 15494: u64 [sp + 0x110] = s0\n 15498: u64 [sp + 0x108] = s1\n 15502: s0 = sp + 0x120\n 15506: sp = sp & 0xffffffffffffffe0\n 15509: a4 = u64 [a1 + 0x10]\n 15512: a5 = u64 [a1 + 0x18]\n 15515: a2 = u64 [a1 + 0x8]\n 15518: a3 = u64 [a1]\n 15520: u64 [sp + 0x70] = a2\n 15523: u64 [sp + 0x58] = a5\n 15526: a1 = a2 | a5\n 15529: u64 [sp + 0x80] = a3\n 15533: a2 = a3 | a4\n 15536: a2 = a2 | a1\n 15539: a2 = a2 >> 0x20\n 15542: u64 [sp + 0x60] = a4\n 15545: a1 = a1 | a4\n 15548: a1 = a1 << 0x20\n 15551: a1 = a1 | a2\n 15554: jump @247 if a1 != 0\n      : @236 (gas: 12)\n 15558: a1 = u64 [a0 + 0x18]\n 15561: u64 [sp + 0x78] = a1\n 15564: a1 = u64 [a0 + 0x10]\n 15567: u64 [sp + 0x98] = a1\n 15571: a1 = u64 [a0 + 0x8]\n 15574: u64 [sp + 0x90] = a1\n 15578: a0 = u64 [a0]\n 15580: u64 [sp + 0x88] = a0\n 15584: a0 = i32 [sp + 0x80]\n 15588: a1 = 0x20\n 15591: u64 [sp + 0x68] = a0\n 15594: ra = 208, jump @0\n      : @237 [@dyn 104] (gas: 105)\n 15600: a1 = u8 [a0 + 0x11]\n 15603: a2 = u8 [a0 + 0x10]\n 15606: a3 = u8 [a0 + 0x12]\n 15609: a4 = u8 [a0 + 0x13]\n 15612: a1 = a1 << 0x8\n 15615: a1 = a1 | a2\n 15618: a3 = a3 << 0x10\n 15621: a4 = a4 << 0x18\n 15624: a3 = a3 | a4\n 15627: a1 = a1 | a3\n 15630: a2 = u8 [a0 + 0x15]\n 15633: a3 = u8 [a0 + 0x14]\n 15636: a4 = u8 [a0 + 0x16]\n 15639: a5 = u8 [a0 + 0x17]\n 15642: a2 = a2 << 0x8\n 15645: a2 = a2 | a3\n 15648: a4 = a4 << 0x10\n 15651: a5 = a5 << 0x18\n 15654: a4 = a4 | a5\n 15657: a2 = a2 | a4\n 15660: a2 = a2 << 0x20\n 15663: a1 = a1 | a2\n 15666: a2 = u8 [a0 + 0x19]\n 15669: a3 = u8 [a0 + 0x18]\n 15672: a4 = u8 [a0 + 0x1a]\n 15675: a5 = u8 [a0 + 0x1b]\n 15678: a2 = a2 << 0x8\n 15681: a2 = a2 | a3\n 15684: a4 = a4 << 0x10\n 15687: a5 = a5 << 0x18\n 15690: a4 = a4 | a5\n 15693: a2 = a2 | a4\n 15696: a3 = u8 [a0 + 0x1d]\n 15699: a4 = u8 [a0 + 0x1c]\n 15702: a5 = u8 [a0 + 0x1e]\n 15705: s1 = u8 [a0 + 0x1f]\n 15708: a3 = a3 << 0x8\n 15711: a3 = a3 | a4\n 15714: a5 = a5 << 0x10\n 15717: s1 = s1 << 0x18\n 15720: a5 = a5 | s1\n 15723: a3 = a3 | a5\n 15726: a3 = a3 << 0x20\n 15729: a2 = a2 | a3\n 15732: a3 = u8 [a0 + 0xd]\n 15735: a4 = u8 [a0 + 0xc]\n 15738: a5 = u8 [a0 + 0xe]\n 15741: a0 = u8 [a0 + 0xf]\n 15744: a3 = a3 << 0x8\n 15747: a3 = a3 | a4\n 15750: a5 = a5 << 0x10\n 15753: a0 = a0 << 0x18\n 15756: a0 = a0 | a5\n 15759: a0 = a0 | a3\n 15762: a2 = reverse a2\n 15764: u64 [sp + 0x50] = a2\n 15767: a1 = reverse a1\n 15769: u64 [sp + 0x48] = a1\n 15772: s1 = reverse a0\n 15774: s1 = s1 >> 0x20\n 15777: u64 [sp + 0x40] = s1\n 15780: s1 = u64 [sp + 0x78]\n 15783: u64 [sp + 0xd8] = s1\n 15787: a0 = u64 [sp + 0x98]\n 15791: u64 [sp + 0xd0] = a0\n 15795: a0 = u64 [sp + 0x90]\n 15799: u64 [sp + 0xc8] = a0\n 15803: a0 = u64 [sp + 0x88]\n 15807: u64 [sp + 0xc0] = a0\n 15811: u64 [sp + 248] = 0\n 15815: u64 [sp + 240] = 0\n 15819: u64 [sp + 232] = 0\n 15823: u64 [sp + 224] = 0\n 15827: u32 [sp + 160] = 0x20\n 15832: i32 a1 = sp + 0xc0\n 15836: i32 a3 = sp + 0xe0\n 15840: i32 a4 = sp + 0xa0\n 15844: a2 = 0xffffffffffffffff\n 15847: a0 = 0\n 15849: ecalli 6 // 'get_storage'\n 15851: a0 = u32 [sp + 0xf4]\n 15855: a0 = a0 << 0x20\n 15858: a1 = u64 [sp + 0xf8]\n 15862: a2 = u64 [sp + 0x40]\n 15865: a0 = a0 | a2\n 15868: u64 [sp + 0xd8] = s1\n 15872: a2 = u64 [sp + 0x98]\n 15876: u64 [sp + 0xd0] = a2\n 15880: a2 = u64 [sp + 0x90]\n 15884: u64 [sp + 0xc8] = a2\n 15888: a2 = u64 [sp + 0x88]\n 15892: u64 [sp + 0xc0] = a2\n 15896: u64 [sp + 0xf8] = a1\n 15900: u64 [sp + 0xf0] = a0\n 15904: a0 = u64 [sp + 0x48]\n 15907: u64 [sp + 0xe8] = a0\n 15911: a0 = u64 [sp + 0x50]\n 15914: u64 [sp + 0xe0] = a0\n 15918: i32 a1 = sp + 0xc0\n 15922: i32 a3 = sp + 0xe0\n 15926: a2 = 0xffffffffffffffff\n 15929: a4 = 0x20\n 15932: a0 = 0\n 15934: ecalli 13 // 'set_storage'\n 15936: fallthrough\n      : @238 (gas: 13)\n 15937: a0 = u64 [sp + 0x60]\n 15940: a2 = u64 [sp + 0x58]\n 15943: a2 = a2 | a0\n 15946: a0 = 0x100000000\n 15956: u64 [sp + 0x40] = a0\n 15959: a0 = 0xffffffe0\n 15969: a1 = u64 [sp + 0x80]\n 15973: a0 = a1 <u a0\n 15976: a1 = u64 [sp + 0x70]\n 15979: a0 = 0 if a1 != 0\n 15981: u64 [sp + 0x60] = a2\n 15984: a0 = 0 if a2 != 0\n 15986: jump @247 if a0 == 0\n      : @239 (gas: 20)\n 15990: a0 = u64 [sp + 0x88]\n 15994: a2 = a0 + 0x1\n 15997: u64 [sp + 0x48] = a2\n 16000: a0 = a2 <u 0x1\n 16003: a1 = u64 [sp + 0x90]\n 16007: a0 = a0 + a1\n 16010: u64 [sp + 0x58] = a0\n 16013: a0 = a0 | a2\n 16016: a0 = a0 <u 0x1\n 16019: a1 = u64 [sp + 0x98]\n 16023: a0 = a0 + a1\n 16026: u64 [sp + 0x50] = a0\n 16029: a0 = a0 <u a1\n 16032: a1 = u64 [sp + 0x78]\n 16035: a0 = a0 + a1\n 16038: u64 [sp + 0x38] = a0\n 16041: a0 = u64 [sp + 0x68]\n 16044: i32 a0 = a0 + 0x20\n 16047: a1 = 0x20\n 16050: ra = 210, jump @0\n      : @240 [@dyn 105] (gas: 137)\n 16056: a1 = u8 [a0 + 0x1]\n 16059: a2 = u8 [a0]\n 16061: a3 = u8 [a0 + 0x2]\n 16064: a4 = u8 [a0 + 0x3]\n 16067: a1 = a1 << 0x8\n 16070: a1 = a1 | a2\n 16073: a3 = a3 << 0x10\n 16076: a4 = a4 << 0x18\n 16079: a3 = a3 | a4\n 16082: a1 = a1 | a3\n 16085: a2 = u8 [a0 + 0x5]\n 16088: a3 = u8 [a0 + 0x4]\n 16091: a4 = u8 [a0 + 0x6]\n 16094: a5 = u8 [a0 + 0x7]\n 16097: a2 = a2 << 0x8\n 16100: a2 = a2 | a3\n 16103: a4 = a4 << 0x10\n 16106: a5 = a5 << 0x18\n 16109: a4 = a4 | a5\n 16112: a2 = a2 | a4\n 16115: a2 = a2 << 0x20\n 16118: t0 = a2 | a1\n 16121: a2 = u8 [a0 + 0x9]\n 16124: a3 = u8 [a0 + 0x8]\n 16127: a4 = u8 [a0 + 0xa]\n 16130: a5 = u8 [a0 + 0xb]\n 16133: a2 = a2 << 0x8\n 16136: a2 = a2 | a3\n 16139: a4 = a4 << 0x10\n 16142: a5 = a5 << 0x18\n 16145: a4 = a4 | a5\n 16148: a2 = a2 | a4\n 16151: a3 = u8 [a0 + 0xd]\n 16154: a4 = u8 [a0 + 0xc]\n 16157: a5 = u8 [a0 + 0xe]\n 16160: s1 = u8 [a0 + 0xf]\n 16163: a3 = a3 << 0x8\n 16166: a3 = a3 | a4\n 16169: a5 = a5 << 0x10\n 16172: s1 = s1 << 0x18\n 16175: a5 = a5 | s1\n 16178: a3 = a3 | a5\n 16181: a3 = a3 << 0x20\n 16184: a2 = a2 | a3\n 16187: a3 = u8 [a0 + 0x11]\n 16190: a4 = u8 [a0 + 0x10]\n 16193: a5 = u8 [a0 + 0x12]\n 16196: s1 = u8 [a0 + 0x13]\n 16199: a3 = a3 << 0x8\n 16202: a3 = a3 | a4\n 16205: a5 = a5 << 0x10\n 16208: s1 = s1 << 0x18\n 16211: a5 = a5 | s1\n 16214: a3 = a3 | a5\n 16217: a4 = u8 [a0 + 0x15]\n 16220: a5 = u8 [a0 + 0x14]\n 16223: s1 = u8 [a0 + 0x16]\n 16226: a1 = u8 [a0 + 0x17]\n 16229: a4 = a4 << 0x8\n 16232: a4 = a4 | a5\n 16235: s1 = s1 << 0x10\n 16238: a1 = a1 << 0x18\n 16241: a1 = a1 | s1\n 16244: a1 = a1 | a4\n 16247: a1 = a1 << 0x20\n 16250: a3 = a3 | a1\n 16253: a1 = u8 [a0 + 0x19]\n 16256: a4 = u8 [a0 + 0x18]\n 16259: a5 = u8 [a0 + 0x1a]\n 16262: s1 = u8 [a0 + 0x1b]\n 16265: a1 = a1 << 0x8\n 16268: a1 = a1 | a4\n 16271: a5 = a5 << 0x10\n 16274: s1 = s1 << 0x18\n 16277: a5 = a5 | s1\n 16280: a1 = a1 | a5\n 16283: a4 = u8 [a0 + 0x1d]\n 16286: a5 = u8 [a0 + 0x1c]\n 16289: s1 = u8 [a0 + 0x1e]\n 16292: a0 = u8 [a0 + 0x1f]\n 16295: a4 = a4 << 0x8\n 16298: a4 = a4 | a5\n 16301: s1 = s1 << 0x10\n 16304: a0 = a0 << 0x18\n 16307: a0 = a0 | s1\n 16310: a0 = a0 | a4\n 16313: a0 = a0 << 0x20\n 16316: a0 = a0 | a1\n 16319: u32 [sp + 160] = 0x20\n 16324: a0 = reverse a0\n 16326: u64 [sp + 0x30] = a0\n 16329: a0 = reverse a3\n 16331: u64 [sp + 0x28] = a0\n 16334: a0 = reverse a2\n 16336: u64 [sp + 0x20] = a0\n 16339: a0 = reverse t0\n 16341: u64 [sp + 0x18] = a0\n 16344: a0 = u64 [sp + 0x50]\n 16347: u64 [sp + 0xd0] = a0\n 16351: a0 = u64 [sp + 0x58]\n 16354: u64 [sp + 0xc8] = a0\n 16358: a0 = u64 [sp + 0x48]\n 16361: u64 [sp + 0xc0] = a0\n 16365: s1 = u64 [sp + 0x38]\n 16368: u64 [sp + 0xd8] = s1\n 16372: u64 [sp + 248] = 0\n 16376: u64 [sp + 240] = 0\n 16380: u64 [sp + 232] = 0\n 16384: u64 [sp + 224] = 0\n 16388: i32 a1 = sp + 0xc0\n 16392: i32 a3 = sp + 0xe0\n 16396: i32 a4 = sp + 0xa0\n 16400: a2 = 0xffffffffffffffff\n 16403: a0 = 0\n 16405: ecalli 6 // 'get_storage'\n 16407: u64 [sp + 0xd8] = s1\n 16411: a0 = u64 [sp + 0x50]\n 16414: u64 [sp + 0xd0] = a0\n 16418: a0 = u64 [sp + 0x58]\n 16421: u64 [sp + 0xc8] = a0\n 16425: a0 = u64 [sp + 0x48]\n 16428: u64 [sp + 0xc0] = a0\n 16432: a0 = u64 [sp + 0x18]\n 16435: u64 [sp + 0xf8] = a0\n 16439: a0 = u64 [sp + 0x20]\n 16442: u64 [sp + 0xf0] = a0\n 16446: a0 = u64 [sp + 0x28]\n 16449: u64 [sp + 0xe8] = a0\n 16453: a0 = u64 [sp + 0x30]\n 16456: u64 [sp + 0xe0] = a0\n 16460: i32 a1 = sp + 0xc0\n 16464: i32 a3 = sp + 0xe0\n 16468: a2 = 0xffffffffffffffff\n 16471: a4 = 0x20\n 16474: a0 = 0\n 16476: ecalli 13 // 'set_storage'\n 16478: fallthrough\n      : @241 (gas: 9)\n 16479: a0 = u64 [sp + 0x40]\n 16482: a0 = a0 + 0xffffffffffffffc0\n 16485: a1 = u64 [sp + 0x80]\n 16489: a0 = a1 <u a0\n 16492: a1 = u64 [sp + 0x70]\n 16495: a0 = 0 if a1 != 0\n 16497: a1 = u64 [sp + 0x60]\n 16500: a0 = 0 if a1 != 0\n 16502: jump @247 if a0 == 0\n      : @242 (gas: 20)\n 16506: a0 = u64 [sp + 0x88]\n 16510: a1 = a0 + 0x2\n 16513: u64 [sp + 0x48] = a1\n 16516: a0 = a1 <u a0\n 16519: a1 = u64 [sp + 0x90]\n 16523: a2 = a1 + a0\n 16526: u64 [sp + 0x58] = a2\n 16529: a1 = a2 <u a1\n 16532: a1 = a0 if a0 == 0\n 16535: a0 = u64 [sp + 0x98]\n 16539: a1 = a1 + a0\n 16542: u64 [sp + 0x50] = a1\n 16545: a0 = a1 <u a0\n 16548: a1 = u64 [sp + 0x78]\n 16551: a0 = a0 + a1\n 16554: u64 [sp + 0x40] = a0\n 16557: a0 = u64 [sp + 0x68]\n 16560: i32 a0 = a0 + 0x40\n 16563: a1 = 0x20\n 16566: ra = 212, jump @0\n      : @243 [@dyn 106] (gas: 137)\n 16572: a1 = u8 [a0 + 0x1]\n 16575: a2 = u8 [a0]\n 16577: a3 = u8 [a0 + 0x2]\n 16580: a4 = u8 [a0 + 0x3]\n 16583: a1 = a1 << 0x8\n 16586: a1 = a1 | a2\n 16589: a3 = a3 << 0x10\n 16592: a4 = a4 << 0x18\n 16595: a3 = a3 | a4\n 16598: a1 = a1 | a3\n 16601: a2 = u8 [a0 + 0x5]\n 16604: a3 = u8 [a0 + 0x4]\n 16607: a4 = u8 [a0 + 0x6]\n 16610: a5 = u8 [a0 + 0x7]\n 16613: a2 = a2 << 0x8\n 16616: a2 = a2 | a3\n 16619: a4 = a4 << 0x10\n 16622: a5 = a5 << 0x18\n 16625: a4 = a4 | a5\n 16628: a2 = a2 | a4\n 16631: a2 = a2 << 0x20\n 16634: t0 = a2 | a1\n 16637: a2 = u8 [a0 + 0x9]\n 16640: a3 = u8 [a0 + 0x8]\n 16643: a4 = u8 [a0 + 0xa]\n 16646: a5 = u8 [a0 + 0xb]\n 16649: a2 = a2 << 0x8\n 16652: a2 = a2 | a3\n 16655: a4 = a4 << 0x10\n 16658: a5 = a5 << 0x18\n 16661: a4 = a4 | a5\n 16664: a2 = a2 | a4\n 16667: a3 = u8 [a0 + 0xd]\n 16670: a4 = u8 [a0 + 0xc]\n 16673: a5 = u8 [a0 + 0xe]\n 16676: s1 = u8 [a0 + 0xf]\n 16679: a3 = a3 << 0x8\n 16682: a3 = a3 | a4\n 16685: a5 = a5 << 0x10\n 16688: s1 = s1 << 0x18\n 16691: a5 = a5 | s1\n 16694: a3 = a3 | a5\n 16697: a3 = a3 << 0x20\n 16700: a2 = a2 | a3\n 16703: a3 = u8 [a0 + 0x11]\n 16706: a4 = u8 [a0 + 0x10]\n 16709: a5 = u8 [a0 + 0x12]\n 16712: s1 = u8 [a0 + 0x13]\n 16715: a3 = a3 << 0x8\n 16718: a3 = a3 | a4\n 16721: a5 = a5 << 0x10\n 16724: s1 = s1 << 0x18\n 16727: a5 = a5 | s1\n 16730: a3 = a3 | a5\n 16733: a4 = u8 [a0 + 0x15]\n 16736: a5 = u8 [a0 + 0x14]\n 16739: s1 = u8 [a0 + 0x16]\n 16742: a1 = u8 [a0 + 0x17]\n 16745: a4 = a4 << 0x8\n 16748: a4 = a4 | a5\n 16751: s1 = s1 << 0x10\n 16754: a1 = a1 << 0x18\n 16757: a1 = a1 | s1\n 16760: a1 = a1 | a4\n 16763: a1 = a1 << 0x20\n 16766: a3 = a3 | a1\n 16769: a1 = u8 [a0 + 0x19]\n 16772: a4 = u8 [a0 + 0x18]\n 16775: a5 = u8 [a0 + 0x1a]\n 16778: s1 = u8 [a0 + 0x1b]\n 16781: a1 = a1 << 0x8\n 16784: a1 = a1 | a4\n 16787: a5 = a5 << 0x10\n 16790: s1 = s1 << 0x18\n 16793: a5 = a5 | s1\n 16796: a1 = a1 | a5\n 16799: a4 = u8 [a0 + 0x1d]\n 16802: a5 = u8 [a0 + 0x1c]\n 16805: s1 = u8 [a0 + 0x1e]\n 16808: a0 = u8 [a0 + 0x1f]\n 16811: a4 = a4 << 0x8\n 16814: a4 = a4 | a5\n 16817: s1 = s1 << 0x10\n 16820: a0 = a0 << 0x18\n 16823: a0 = a0 | s1\n 16826: a0 = a0 | a4\n 16829: a0 = a0 << 0x20\n 16832: a0 = a0 | a1\n 16835: a0 = reverse a0\n 16837: u64 [sp + 0x38] = a0\n 16840: a0 = reverse a3\n 16842: u64 [sp + 0x30] = a0\n 16845: a0 = reverse a2\n 16847: u64 [sp + 0x28] = a0\n 16850: a0 = reverse t0\n 16852: u64 [sp + 0x20] = a0\n 16855: a0 = u64 [sp + 0x50]\n 16858: u64 [sp + 0xd0] = a0\n 16862: a0 = u64 [sp + 0x58]\n 16865: u64 [sp + 0xc8] = a0\n 16869: a0 = u64 [sp + 0x48]\n 16872: u64 [sp + 0xc0] = a0\n 16876: s1 = u64 [sp + 0x40]\n 16879: u64 [sp + 0xd8] = s1\n 16883: u64 [sp + 248] = 0\n 16887: u64 [sp + 240] = 0\n 16891: u64 [sp + 232] = 0\n 16895: u64 [sp + 224] = 0\n 16899: u32 [sp + 160] = 0x20\n 16904: i32 a1 = sp + 0xc0\n 16908: i32 a3 = sp + 0xe0\n 16912: i32 a4 = sp + 0xa0\n 16916: a2 = 0xffffffffffffffff\n 16919: a0 = 0\n 16921: ecalli 6 // 'get_storage'\n 16923: u64 [sp + 0xd8] = s1\n 16927: a0 = u64 [sp + 0x50]\n 16930: u64 [sp + 0xd0] = a0\n 16934: a0 = u64 [sp + 0x58]\n 16937: u64 [sp + 0xc8] = a0\n 16941: a0 = u64 [sp + 0x48]\n 16944: u64 [sp + 0xc0] = a0\n 16948: a0 = u64 [sp + 0x20]\n 16951: u64 [sp + 0xf8] = a0\n 16955: a0 = u64 [sp + 0x28]\n 16958: u64 [sp + 0xf0] = a0\n 16962: a0 = u64 [sp + 0x30]\n 16965: u64 [sp + 0xe8] = a0\n 16969: a0 = u64 [sp + 0x38]\n 16972: u64 [sp + 0xe0] = a0\n 16976: i32 a1 = sp + 0xc0\n 16980: i32 a3 = sp + 0xe0\n 16984: a2 = 0xffffffffffffffff\n 16987: a4 = 0x20\n 16990: a0 = 0\n 16992: ecalli 13 // 'set_storage'\n 16994: fallthrough\n      : @244 (gas: 8)\n 16995: a0 = 0xffffffa0\n 17005: a1 = u64 [sp + 0x80]\n 17009: a0 = a1 <u a0\n 17012: a1 = u64 [sp + 0x70]\n 17015: a0 = 0 if a1 != 0\n 17017: a1 = u64 [sp + 0x60]\n 17020: a0 = 0 if a1 != 0\n 17022: jump @247 if a0 == 0\n      : @245 (gas: 20)\n 17026: a0 = u64 [sp + 0x88]\n 17030: a1 = a0 + 0x3\n 17033: u64 [sp + 0x80] = a1\n 17037: a0 = a1 <u a0\n 17040: a1 = u64 [sp + 0x90]\n 17044: a2 = a1 + a0\n 17047: u64 [sp + 0x88] = a2\n 17051: a1 = a2 <u a1\n 17054: a1 = a0 if a0 == 0\n 17057: a0 = u64 [sp + 0x98]\n 17061: a1 = a1 + a0\n 17064: u64 [sp + 0x90] = a1\n 17068: a0 = a1 <u a0\n 17071: a1 = u64 [sp + 0x78]\n 17074: a0 = a0 + a1\n 17077: u64 [sp + 0x98] = a0\n 17081: a0 = u64 [sp + 0x68]\n 17084: i32 a0 = a0 + 0x60\n 17087: a1 = 0x20\n 17090: ra = 214, jump @0\n      : @246 [@dyn 107] (gas: 140)\n 17096: a1 = u8 [a0 + 0x11]\n 17099: a2 = u8 [a0 + 0x10]\n 17102: a3 = u8 [a0 + 0x12]\n 17105: a4 = u8 [a0 + 0x13]\n 17108: a1 = a1 << 0x8\n 17111: a1 = a1 | a2\n 17114: a3 = a3 << 0x10\n 17117: a4 = a4 << 0x18\n 17120: a3 = a3 | a4\n 17123: t0 = a3 | a1\n 17126: a1 = u8 [a0 + 0x1]\n 17129: a2 = u8 [a0]\n 17131: a3 = u8 [a0 + 0x2]\n 17134: a4 = u8 [a0 + 0x3]\n 17137: a1 = a1 << 0x8\n 17140: a1 = a1 | a2\n 17143: a3 = a3 << 0x10\n 17146: a4 = a4 << 0x18\n 17149: a2 = a4 | a3\n 17152: t1 = a2 | a1\n 17155: a1 = u8 [a0 + 0x15]\n 17158: a3 = u8 [a0 + 0x14]\n 17161: a4 = u8 [a0 + 0x16]\n 17164: a5 = u8 [a0 + 0x17]\n 17167: a1 = a1 << 0x8\n 17170: a1 = a1 | a3\n 17173: a4 = a4 << 0x10\n 17176: a5 = a5 << 0x18\n 17179: a3 = a5 | a4\n 17182: t2 = a3 | a1\n 17185: a1 = u8 [a0 + 0x5]\n 17188: a4 = u8 [a0 + 0x4]\n 17191: a5 = u8 [a0 + 0x6]\n 17194: s1 = u8 [a0 + 0x7]\n 17197: a1 = a1 << 0x8\n 17200: a1 = a1 | a4\n 17203: a5 = a5 << 0x10\n 17206: s1 = s1 << 0x18\n 17209: a4 = s1 | a5\n 17212: ra = a4 | a1\n 17215: a1 = u8 [a0 + 0x19]\n 17218: a5 = u8 [a0 + 0x18]\n 17221: s1 = u8 [a0 + 0x1a]\n 17224: a2 = u8 [a0 + 0x1b]\n 17227: a1 = a1 << 0x8\n 17230: a1 = a1 | a5\n 17233: s1 = s1 << 0x10\n 17236: a2 = a2 << 0x18\n 17239: a2 = a2 | s1\n 17242: a5 = a2 | a1\n 17245: a1 = u8 [a0 + 0x9]\n 17248: a2 = u8 [a0 + 0x8]\n 17251: s1 = u8 [a0 + 0xa]\n 17254: a3 = u8 [a0 + 0xb]\n 17257: a1 = a1 << 0x8\n 17260: a1 = a1 | a2\n 17263: s1 = s1 << 0x10\n 17266: a3 = a3 << 0x18\n 17269: a3 = a3 | s1\n 17272: a1 = a1 | a3\n 17275: a2 = u8 [a0 + 0x1d]\n 17278: a3 = u8 [a0 + 0x1c]\n 17281: s1 = u8 [a0 + 0x1e]\n 17284: a4 = u8 [a0 + 0x1f]\n 17287: a2 = a2 << 0x8\n 17290: a2 = a2 | a3\n 17293: s1 = s1 << 0x10\n 17296: a4 = a4 << 0x18\n 17299: a4 = a4 | s1\n 17302: a2 = a2 | a4\n 17305: a3 = u8 [a0 + 0xd]\n 17308: a4 = u8 [a0 + 0xc]\n 17311: s1 = u8 [a0 + 0xe]\n 17314: a0 = u8 [a0 + 0xf]\n 17317: a3 = a3 << 0x8\n 17320: a3 = a3 | a4\n 17323: s1 = s1 << 0x10\n 17326: a0 = a0 << 0x18\n 17329: a0 = a0 | s1\n 17332: a0 = a0 | a3\n 17335: a0 = a0 | a2\n 17338: a1 = a1 | a5\n 17341: a0 = a0 << 0x20\n 17344: a0 = a0 | a1\n 17347: a1 = ra | t2\n 17350: a2 = t1 | t0\n 17353: a1 = a1 << 0x20\n 17356: a1 = a1 | a2\n 17359: a0 = a0 | a1\n 17362: u32 [sp + 160] = 0x20\n 17367: a0 = a0 >u 0\n 17369: u64 [sp + 0x78] = a0\n 17372: a0 = u64 [sp + 0x90]\n 17376: u64 [sp + 0xd0] = a0\n 17380: a0 = u64 [sp + 0x88]\n 17384: u64 [sp + 0xc8] = a0\n 17388: a0 = u64 [sp + 0x80]\n 17392: u64 [sp + 0xc0] = a0\n 17396: s1 = u64 [sp + 0x98]\n 17400: u64 [sp + 0xd8] = s1\n 17404: u64 [sp + 248] = 0\n 17408: u64 [sp + 240] = 0\n 17412: u64 [sp + 232] = 0\n 17416: u64 [sp + 224] = 0\n 17420: i32 a1 = sp + 0xc0\n 17424: i32 a3 = sp + 0xe0\n 17428: i32 a4 = sp + 0xa0\n 17432: a2 = 0xffffffffffffffff\n 17435: a0 = 0\n 17437: ecalli 6 // 'get_storage'\n 17439: a0 = u64 [sp + 0xe0]\n 17443: a1 = u64 [sp + 0xe8]\n 17447: a2 = u64 [sp + 0xf0]\n 17451: a3 = u64 [sp + 0xf8]\n 17455: a0 = a0 & 0xffffffffffffff00\n 17459: a4 = u64 [sp + 0x78]\n 17462: a0 = a0 | a4\n 17465: u64 [sp + 0xd8] = s1\n 17469: a4 = u64 [sp + 0x90]\n 17473: u64 [sp + 0xd0] = a4\n 17477: a4 = u64 [sp + 0x88]\n 17481: u64 [sp + 0xc8] = a4\n 17485: a4 = u64 [sp + 0x80]\n 17489: u64 [sp + 0xc0] = a4\n 17493: u64 [sp + 0xf8] = a3\n 17497: u64 [sp + 0xf0] = a2\n 17501: u64 [sp + 0xe8] = a1\n 17505: u64 [sp + 0xe0] = a0\n 17509: i32 a1 = sp + 0xc0\n 17513: i32 a3 = sp + 0xe0\n 17517: a2 = 0xffffffffffffffff\n 17520: a4 = 0x20\n 17523: a0 = 0\n 17525: ecalli 13 // 'set_storage'\n 17527: sp = s0 + 0xfffffffffffffee0\n 17531: ra = u64 [sp + 0x118]\n 17535: s0 = u64 [sp + 0x110]\n 17539: s1 = u64 [sp + 0x108]\n 17543: sp = sp + 0x120\n 17547: ret\n      : @247 (gas: 1)\n 17549: trap\n      : @248 (gas: 7)\n 17550: a3 = u64 [sp + 0x1f8]\n 17554: s1 = u64 [sp + 0x1f0]\n 17558: a2 = u64 [sp + 0x1e8]\n 17562: a0 = s1 | a3\n 17565: a1 = a2 <u 0x1\n 17568: a1 = 0 if a0 != 0\n 17570: jump @253 if a1 == 0\n      : @249 (gas: 49)\n 17574: a0 = u64 [sp + 0x1e0]\n 17578: u64 [sp + 0x18] = a0\n 17581: a0 = a0 + 0x1\n 17584: a1 = a0 <u 0x1\n 17587: a1 = a1 + a2\n 17590: u64 [sp + 0x1e0] = a0\n 17594: a0 = a0 | a1\n 17597: u64 [sp + 0x1e8] = a1\n 17601: a0 = a0 <u 0x1\n 17604: a0 = a0 + s1\n 17607: u64 [sp + 0x1f0] = a0\n 17611: a0 = a0 <u s1\n 17614: a0 = a0 + a3\n 17617: u64 [sp + 0x1f8] = a0\n 17621: a0 = u64 [sp + 0x50]\n 17624: u64 [sp + 0x1c8] = a0\n 17628: a0 = u64 [sp + 0x58]\n 17631: u64 [sp + 0x1c0] = a0\n 17635: a0 = u64 [sp + 0x48]\n 17638: u64 [sp + 0x1d0] = a0\n 17642: a0 = u64 [sp + 0x40]\n 17645: u64 [sp + 0x1d8] = a0\n 17649: i32 a1 = sp + 0x1c0\n 17653: u64 [sp + 0x10] = a3\n 17656: i32 a3 = sp + 0x1e0\n 17660: u64 [sp + 0x8] = a2\n 17663: a2 = 0xffffffffffffffff\n 17666: a4 = 0x20\n 17669: a0 = 0\n 17671: ecalli 13 // 'set_storage'\n 17673: a0 = u64 [sp + 0x10]\n 17676: u64 [sp + 0x138] = a0\n 17680: u64 [sp + 0x130] = s1\n 17684: a0 = u64 [sp + 0x8]\n 17687: u64 [sp + 0x128] = a0\n 17691: a0 = u64 [sp + 0x18]\n 17694: u64 [sp + 0x120] = a0\n 17698: a0 = u64 [sp + 0x40]\n 17701: u64 [sp + 0x158] = a0\n 17705: a0 = u64 [sp + 0x48]\n 17708: u64 [sp + 0x150] = a0\n 17712: a0 = u64 [sp + 0x50]\n 17715: u64 [sp + 0x148] = a0\n 17719: a0 = sp + 0x160\n 17723: a1 = sp + 0x140\n 17727: a2 = sp + 0x120\n 17731: a3 = u64 [sp + 0x58]\n 17734: u64 [sp + 0x140] = a3\n 17738: ra = 216, jump @164\n      : @250 [@dyn 108] (gas: 8)\n 17744: a0 = u64 [sp + 0x198]\n 17748: a1 = u64 [sp + 0x190]\n 17752: a2 = u64 [sp + 0x188]\n 17756: a3 = u64 [sp + 0x180]\n 17760: a0 = a0 | a2\n 17763: a1 = a1 | a3\n 17766: a0 = a0 | a1\n 17769: jump @255 if a0 != 0\n      : @251 (gas: 19)\n 17773: a2 = u64 [sp + 0x178]\n 17777: a0 = u64 [sp + 0x170]\n 17781: a1 = u64 [sp + 0x168]\n 17785: a3 = u64 [sp + 0x160]\n 17789: a4 = u64 [sp + 0x20]\n 17792: u64 [sp + 0xa0] = a4\n 17796: u64 [sp + 0xc0] = a3\n 17800: a3 = u64 [sp + 0x28]\n 17803: u64 [sp + 0xa8] = a3\n 17807: u64 [sp + 0xc8] = a1\n 17811: a1 = u64 [sp + 0x30]\n 17814: u64 [sp + 0xb0] = a1\n 17818: u64 [sp + 0xd0] = a0\n 17822: a0 = u64 [sp + 0x38]\n 17825: u64 [sp + 0xb8] = a0\n 17829: a0 = sp + 0xc0\n 17833: a1 = sp + 0xa0\n 17837: u64 [sp + 0xd8] = a2\n 17841: ra = 218, jump @235\n      : @252 [@dyn 109] (gas: 6)\n 17847: sp = s0 + 0xfffffffffffffde0\n 17851: ra = u64 [sp + 0x218]\n 17855: s0 = u64 [sp + 0x210]\n 17859: s1 = u64 [sp + 0x208]\n 17863: sp = sp + 0x220\n 17867: ret\n      : @253 (gas: 8)\n 17869: u64 [sp + 144] = 0\n 17873: u64 [sp + 136] = 0\n 17877: u64 [sp + 128] = 0\n 17881: a0 = 0x4e487b7100000000\n 17891: a1 = sp + 0x80\n 17895: u64 [sp + 0x98] = a0\n 17899: a0 = 0\n 17901: ra = 220, jump @8\n      : @254 [@dyn 110] (gas: 8)\n 17907: u64 [sp + 120] = 0\n 17910: u64 [sp + 112] = 0\n 17913: u64 [sp + 96] = 0x41\n 17917: a0 = 0x4\n 17920: a1 = sp + 0x60\n 17923: u64 [sp + 104] = 0\n 17926: ra = 0xe0\n 17930: jump @8\n      : @255 (gas: 8)\n 17933: u64 [sp + 272] = 0\n 17937: u64 [sp + 264] = 0\n 17941: u64 [sp + 256] = 0\n 17945: a0 = 0x4e487b7100000000\n 17955: a1 = sp + 0x100\n 17959: u64 [sp + 0x118] = a0\n 17963: a0 = 0\n 17965: ra = 222, jump @8\n      : @256 [@dyn 111] (gas: 7)\n 17971: u64 [sp + 248] = 0\n 17975: u64 [sp + 240] = 0\n 17979: u64 [sp + 232] = 0\n 17983: a0 = 0x4\n 17986: a1 = sp + 0xe0\n 17990: u64 [sp + 224] = 0\n 17994: ra = 224, jump @8\n      : @257 [@dyn 112] (gas: 3)\n 18000: a1 = 0x24\n 18003: a0 = 0\n 18005: ra = 226, jump @0\n      : @258 [@dyn 113] (gas: 6)\n 18011: i32 a1 = a0 + 0\n 18013: a0 = 0x1\n 18016: a2 = 0x24\n 18019: ra = 0xe4\n 18023: ecalli 11 // 'seal_return'\n 18025: fallthrough\n      : @259 [@dyn 114] (gas: 21)\n 18026: sp = sp + 0xfffffffffffffd20\n 18030: u64 [sp + 0x2d8] = ra\n 18034: u64 [sp + 0x2d0] = s0\n 18038: u64 [sp + 0x2c8] = s1\n 18042: s0 = sp + 0x2e0\n 18046: sp = sp & 0xffffffffffffffe0\n 18049: a2 = u64 [a0 + 0x18]\n 18052: a3 = u64 [a0 + 0x10]\n 18055: s1 = u64 [a0]\n 18057: a0 = u64 [a0 + 0x8]\n 18060: a4 = a2 >u 0\n 18062: a5 = a3 >u 0\n 18064: a5 = a4 if a2 != 0\n 18067: a4 = a0 >u 0\n 18069: u64 [sp + 0x50] = s1\n 18072: s1 = s1 <u 0x9\n 18075: s1 = s1 ^ 0x1\n 18078: s1 = a4 if a0 != 0\n 18081: a2 = a2 | a3\n 18084: s1 = a5 if a2 != 0\n 18087: jump @294 if s1 != 0\n      : @260 (gas: 10)\n 18091: a0 = u64 [a1 + 0x18]\n 18094: a3 = u64 [a1]\n 18096: a2 = u64 [a1 + 0x8]\n 18099: a1 = u64 [a1 + 0x10]\n 18102: u64 [sp + 0x10] = a3\n 18105: a3 = a3 <u 0x9\n 18108: a3 = 0 if a2 != 0\n 18110: a0 = a0 | a1\n 18113: a3 = 0 if a0 != 0\n 18115: jump @294 if a3 == 0\n      : @261 (gas: 32)\n 18119: u64 [sp + 664] = 0\n 18123: u64 [sp + 656] = 0\n 18127: u64 [sp + 648] = 0\n 18131: u64 [sp + 640] = 0x1\n 18136: u64 [sp + 696] = 0\n 18140: u64 [sp + 688] = 0\n 18144: u64 [sp + 680] = 0\n 18148: u64 [sp + 672] = 0\n 18152: u32 [sp + 704] = 0x20\n 18157: i32 a1 = sp + 0x280\n 18161: i32 a3 = sp + 0x2a0\n 18165: i32 a4 = sp + 0x2c0\n 18169: a2 = 0xffffffffffffffff\n 18172: a0 = 0\n 18174: ecalli 6 // 'get_storage'\n 18176: a0 = u64 [sp + 0x2b0]\n 18180: u64 [sp + 0x28] = a0\n 18183: a0 = u64 [sp + 0x2a8]\n 18187: u64 [sp + 0x20] = a0\n 18190: a0 = u64 [sp + 0x2a0]\n 18194: u64 [sp + 0x30] = a0\n 18197: i32 a0 = sp + 0x1c0\n 18201: ecalli 4 // 'caller'\n 18203: a0 = i32 [sp + 0x1d0]\n 18207: u64 [sp + 0x48] = a0\n 18210: a0 = u64 [sp + 0x1c0]\n 18214: u64 [sp + 0x40] = a0\n 18217: a0 = u64 [sp + 0x1c8]\n 18221: u64 [sp + 0x38] = a0\n 18224: a0 = 0x40\n 18227: a1 = 0x20\n 18230: ra = 230, jump @0\n      : @262 [@dyn 115] (gas: 102)\n 18236: a1 = u8 [a0 + 0x11]\n 18239: a2 = u8 [a0 + 0x10]\n 18242: a3 = u8 [a0 + 0x12]\n 18245: a4 = u8 [a0 + 0x13]\n 18248: a1 = a1 << 0x8\n 18251: a1 = a1 | a2\n 18254: a3 = a3 << 0x10\n 18257: a4 = a4 << 0x18\n 18260: a3 = a3 | a4\n 18263: a1 = a1 | a3\n 18266: a2 = u8 [a0 + 0x15]\n 18269: a3 = u8 [a0 + 0x14]\n 18272: a4 = u8 [a0 + 0x16]\n 18275: a5 = u8 [a0 + 0x17]\n 18278: a2 = a2 << 0x8\n 18281: a2 = a2 | a3\n 18284: a4 = a4 << 0x10\n 18287: a5 = a5 << 0x18\n 18290: a4 = a4 | a5\n 18293: a2 = a2 | a4\n 18296: a2 = a2 << 0x20\n 18299: t0 = a2 | a1\n 18302: a2 = u8 [a0 + 0x1]\n 18305: a3 = u8 [a0]\n 18307: a4 = u8 [a0 + 0x2]\n 18310: a5 = u8 [a0 + 0x3]\n 18313: a2 = a2 << 0x8\n 18316: a2 = a2 | a3\n 18319: a4 = a4 << 0x10\n 18322: a5 = a5 << 0x18\n 18325: a4 = a4 | a5\n 18328: a2 = a2 | a4\n 18331: a3 = u8 [a0 + 0x5]\n 18334: a4 = u8 [a0 + 0x4]\n 18337: a5 = u8 [a0 + 0x6]\n 18340: s1 = u8 [a0 + 0x7]\n 18343: a3 = a3 << 0x8\n 18346: a3 = a3 | a4\n 18349: a5 = a5 << 0x10\n 18352: s1 = s1 << 0x18\n 18355: a5 = a5 | s1\n 18358: a3 = a3 | a5\n 18361: a3 = a3 << 0x20\n 18364: a2 = a2 | a3\n 18367: a3 = u8 [a0 + 0x19]\n 18370: a4 = u8 [a0 + 0x18]\n 18373: a5 = u8 [a0 + 0x1a]\n 18376: s1 = u8 [a0 + 0x1b]\n 18379: a3 = a3 << 0x8\n 18382: a3 = a3 | a4\n 18385: a5 = a5 << 0x10\n 18388: s1 = s1 << 0x18\n 18391: a5 = a5 | s1\n 18394: a3 = a3 | a5\n 18397: a4 = u8 [a0 + 0x1d]\n 18400: a5 = u8 [a0 + 0x1c]\n 18403: s1 = u8 [a0 + 0x1e]\n 18406: a1 = u8 [a0 + 0x1f]\n 18409: a4 = a4 << 0x8\n 18412: a4 = a4 | a5\n 18415: s1 = s1 << 0x10\n 18418: a1 = a1 << 0x18\n 18421: a1 = a1 | s1\n 18424: a1 = a1 | a4\n 18427: a1 = a1 << 0x20\n 18430: a3 = a3 | a1\n 18433: a1 = u8 [a0 + 0x9]\n 18436: a4 = u8 [a0 + 0x8]\n 18439: a5 = u8 [a0 + 0xa]\n 18442: s1 = u8 [a0 + 0xb]\n 18445: a1 = a1 << 0x8\n 18448: a1 = a1 | a4\n 18451: a5 = a5 << 0x10\n 18454: s1 = s1 << 0x18\n 18457: a5 = a5 | s1\n 18460: a1 = a1 | a5\n 18463: a4 = u8 [a0 + 0xd]\n 18466: a5 = u8 [a0 + 0xc]\n 18469: s1 = u8 [a0 + 0xe]\n 18472: a0 = u8 [a0 + 0xf]\n 18475: a4 = a4 << 0x8\n 18478: a4 = a4 | a5\n 18481: s1 = s1 << 0x10\n 18484: a0 = a0 << 0x18\n 18487: a0 = a0 | s1\n 18490: a0 = a0 | a4\n 18493: a0 = a0 << 0x20\n 18496: a0 = a0 | a1\n 18499: s1 = reverse a0\n 18501: a3 = reverse a3\n 18503: a1 = reverse a2\n 18505: a0 = reverse t0\n 18507: u64 [sp + 0x78] = a0\n 18510: u64 [sp + 0x60] = a1\n 18513: a0 = a0 | a1\n 18516: a1 = a3 | s1\n 18519: a1 = a1 | a0\n 18522: a1 = a1 >> 0x20\n 18525: a0 = a0 | s1\n 18528: a0 = a0 << 0x20\n 18531: a0 = a0 | a1\n 18534: jump @306 if a0 != 0\n      : @263 (gas: 5)\n 18538: i32 a0 = a3 + 0\n 18540: a1 = 0x20\n 18543: u64 [sp + 0x68] = a0\n 18546: u64 [sp + 0x70] = a3\n 18549: ra = 232, jump @0\n      : @264 [@dyn 116] (gas: 43)\n 18555: u8 [a0 + 31] = 0\n 18558: u8 [a0 + 30] = 0\n 18561: u8 [a0 + 29] = 0\n 18564: u8 [a0 + 28] = 0\n 18567: u8 [a0 + 27] = 0\n 18570: u8 [a0 + 26] = 0\n 18573: u8 [a0 + 25] = 0\n 18576: u8 [a0 + 24] = 0\n 18579: u8 [a0 + 23] = 0\n 18582: u8 [a0 + 22] = 0\n 18585: u8 [a0 + 21] = 0\n 18588: u8 [a0 + 20] = 0\n 18591: u8 [a0 + 19] = 0\n 18594: u8 [a0 + 18] = 0\n 18597: u8 [a0 + 17] = 0\n 18600: u8 [a0 + 16] = 0\n 18603: u8 [a0 + 15] = 0\n 18606: u8 [a0 + 14] = 0\n 18609: u8 [a0 + 13] = 0\n 18612: u8 [a0 + 12] = 0\n 18615: u8 [a0 + 11] = 0\n 18618: u8 [a0 + 10] = 0\n 18621: u8 [a0 + 9] = 0\n 18624: u8 [a0 + 8] = 0\n 18627: u8 [a0 + 7] = 0\n 18630: u8 [a0 + 6] = 0\n 18633: u8 [a0 + 5] = 0\n 18636: u8 [a0 + 3] = 0xe6\n 18641: u8 [a0 + 2] = 0x8c\n 18646: u8 [a0 + 1] = 0xca\n 18651: u8 [a0 + 0] = 0x4d\n 18654: u64 [sp + 0x18] = s1\n 18657: a3 = u64 [sp + 0x60]\n 18660: a3 = a3 | s1\n 18663: a1 = 0xfffffffc\n 18673: a2 = u64 [sp + 0x70]\n 18676: a1 = a2 <u a1\n 18679: a2 = u64 [sp + 0x78]\n 18682: a1 = 0 if a2 != 0\n 18684: u64 [sp + 0x58] = a3\n 18687: a1 = 0 if a3 != 0\n 18689: u8 [a0 + 4] = 0\n 18692: jump @306 if a1 == 0\n      : @265 (gas: 19)\n 18696: a0 = u64 [sp + 0x38]\n 18699: a0 = reverse a0\n 18701: a1 = a0 >> 0x20\n 18704: a2 = u64 [sp + 0x40]\n 18707: a2 = reverse a2\n 18709: a3 = a2 << 0x20\n 18712: a1 = a1 | a3\n 18715: u64 [sp + 0x40] = a1\n 18718: a0 = a0 << 0x20\n 18721: a1 = u64 [sp + 0x48]\n 18724: a1 = reverse a1\n 18726: a1 = a1 >> 0x20\n 18729: a0 = a0 | a1\n 18732: u64 [sp + 0x48] = a0\n 18735: s1 = a2 >> 0x20\n 18738: a0 = u64 [sp + 0x68]\n 18741: i32 a0 = a0 + 0x4\n 18744: a1 = 0x20\n 18747: ra = 234, jump @0\n      : @266 [@dyn 117] (gas: 64)\n 18753: a1 = reverse s1\n 18755: a2 = u64 [sp + 0x40]\n 18758: a2 = reverse a2\n 18760: a3 = u64 [sp + 0x48]\n 18763: a3 = reverse a3\n 18765: a4 = a3 >> 0x38\n 18768: u8 [a0 + 0x1f] = a4\n 18771: a4 = a3 >> 0x30\n 18774: u8 [a0 + 0x1e] = a4\n 18777: a4 = a3 >> 0x28\n 18780: u8 [a0 + 0x1d] = a4\n 18783: a4 = a3 >> 0x20\n 18786: u8 [a0 + 0x1c] = a4\n 18789: a4 = a3 >> 0x18\n 18792: u8 [a0 + 0x1b] = a4\n 18795: a4 = a3 >> 0x10\n 18798: u8 [a0 + 0x1a] = a4\n 18801: a4 = a3 >> 0x8\n 18804: u8 [a0 + 0x19] = a4\n 18807: u8 [a0 + 0x18] = a3\n 18810: u8 [a0 + 0x10] = a2\n 18813: u8 [a0 + 11] = 0\n 18816: u8 [a0 + 10] = 0\n 18819: u8 [a0 + 9] = 0\n 18822: u8 [a0 + 7] = 0\n 18825: u8 [a0 + 6] = 0\n 18828: u8 [a0 + 5] = 0\n 18831: u8 [a0 + 4] = 0\n 18834: u8 [a0 + 3] = 0\n 18837: u8 [a0 + 2] = 0\n 18840: u8 [a0 + 1] = 0\n 18843: u8 [a0 + 0] = 0\n 18845: a3 = a2 >> 0x38\n 18848: u8 [a0 + 0x17] = a3\n 18851: a3 = a2 >> 0x30\n 18854: u8 [a0 + 0x16] = a3\n 18857: a3 = a2 >> 0x28\n 18860: u8 [a0 + 0x15] = a3\n 18863: a3 = a2 >> 0x20\n 18866: u8 [a0 + 0x14] = a3\n 18869: a3 = a2 >> 0x18\n 18872: u8 [a0 + 0x13] = a3\n 18875: a3 = a2 >> 0x10\n 18878: u8 [a0 + 0x12] = a3\n 18881: a2 = a2 >> 0x8\n 18884: u8 [a0 + 0x11] = a2\n 18887: u8 [a0 + 0x8] = a1\n 18890: a2 = a1 >> 0x38\n 18893: u8 [a0 + 0xf] = a2\n 18896: a2 = a1 >> 0x30\n 18899: u8 [a0 + 0xe] = a2\n 18902: a2 = a1 >> 0x28\n 18905: u8 [a0 + 0xd] = a2\n 18908: a1 = a1 >> 0x20\n 18911: s1 = 0x100000000\n 18921: a2 = 0xffffffdc\n 18931: a3 = u64 [sp + 0x70]\n 18934: a2 = a3 <u a2\n 18937: a3 = u64 [sp + 0x78]\n 18940: a2 = 0 if a3 != 0\n 18942: a3 = u64 [sp + 0x58]\n 18945: a2 = 0 if a3 != 0\n 18947: u8 [a0 + 0xc] = a1\n 18950: jump @306 if a2 == 0\n      : @267 (gas: 4)\n 18954: a0 = u64 [sp + 0x68]\n 18957: i32 a0 = a0 + 0x24\n 18960: a1 = 0x20\n 18963: ra = 236, jump @0\n      : @268 [@dyn 118] (gas: 43)\n 18969: a2 = u64 [sp + 0x50]\n 18972: a1 = a2 << 0x38\n 18975: u8 [a0 + 0x1f] = a2\n 18978: u8 [a0 + 30] = 0\n 18981: u8 [a0 + 29] = 0\n 18984: u8 [a0 + 28] = 0\n 18987: u8 [a0 + 27] = 0\n 18990: u8 [a0 + 26] = 0\n 18993: u8 [a0 + 25] = 0\n 18996: u64 [sp + 0x48] = a1\n 18999: u8 [a0 + 0x18] = a1\n 19002: u8 [a0 + 23] = 0\n 19005: u8 [a0 + 22] = 0\n 19008: u8 [a0 + 21] = 0\n 19011: u8 [a0 + 20] = 0\n 19014: u8 [a0 + 19] = 0\n 19017: u8 [a0 + 18] = 0\n 19020: u8 [a0 + 17] = 0\n 19023: u8 [a0 + 16] = 0\n 19026: u8 [a0 + 15] = 0\n 19029: u8 [a0 + 14] = 0\n 19032: u8 [a0 + 13] = 0\n 19035: u8 [a0 + 12] = 0\n 19038: u8 [a0 + 11] = 0\n 19041: u8 [a0 + 10] = 0\n 19044: u8 [a0 + 9] = 0\n 19047: u8 [a0 + 8] = 0\n 19050: u8 [a0 + 7] = 0\n 19053: u8 [a0 + 6] = 0\n 19056: u8 [a0 + 5] = 0\n 19059: u8 [a0 + 4] = 0\n 19062: u8 [a0 + 3] = 0\n 19065: u8 [a0 + 2] = 0\n 19068: u8 [a0 + 1] = 0\n 19071: a1 = s1 + 0xffffffffffffffbc\n 19074: a2 = u64 [sp + 0x70]\n 19077: a1 = a2 <u a1\n 19080: a2 = u64 [sp + 0x78]\n 19083: a1 = 0 if a2 != 0\n 19085: a2 = u64 [sp + 0x58]\n 19088: a1 = 0 if a2 != 0\n 19090: u8 [a0 + 0] = 0\n 19092: jump @306 if a1 == 0\n      : @269 (gas: 4)\n 19096: s1 = u64 [sp + 0x68]\n 19099: i32 a0 = s1 + 0x44\n 19102: a1 = 0x20\n 19105: ra = 238, jump @0\n      : @270 [@dyn 119] (gas: 56)\n 19111: u8 [a0 + 31] = 0x1\n 19115: u8 [a0 + 30] = 0\n 19118: u8 [a0 + 29] = 0\n 19121: u8 [a0 + 28] = 0\n 19124: u8 [a0 + 27] = 0\n 19127: u8 [a0 + 26] = 0\n 19130: u8 [a0 + 25] = 0\n 19133: u8 [a0 + 24] = 0\n 19136: u8 [a0 + 23] = 0\n 19139: u8 [a0 + 22] = 0\n 19142: u8 [a0 + 21] = 0\n 19145: u8 [a0 + 20] = 0\n 19148: u8 [a0 + 19] = 0\n 19151: u8 [a0 + 18] = 0\n 19154: u8 [a0 + 17] = 0\n 19157: u8 [a0 + 16] = 0\n 19160: u8 [a0 + 15] = 0\n 19163: u8 [a0 + 14] = 0\n 19166: u8 [a0 + 13] = 0\n 19169: u8 [a0 + 12] = 0\n 19172: u8 [a0 + 11] = 0\n 19175: u8 [a0 + 10] = 0\n 19178: u8 [a0 + 9] = 0\n 19181: u8 [a0 + 8] = 0\n 19184: u8 [a0 + 7] = 0\n 19187: u8 [a0 + 6] = 0\n 19190: u8 [a0 + 5] = 0\n 19193: u8 [a0 + 4] = 0\n 19196: u8 [a0 + 3] = 0\n 19199: u8 [a0 + 2] = 0\n 19202: u8 [a0 + 1] = 0\n 19205: u8 [a0 + 0] = 0\n 19207: ecalli 8 // 'ref_time_left'\n 19209: a0 = u64 [sp + 0x20]\n 19212: a0 = reverse a0\n 19214: a1 = a0 << 0x20\n 19217: a2 = u64 [sp + 0x28]\n 19220: a2 = reverse a2\n 19222: a2 = a2 >> 0x20\n 19225: a1 = a1 | a2\n 19228: a2 = u64 [sp + 0x30]\n 19231: a2 = reverse a2\n 19233: a3 = a2 << 0x20\n 19236: a0 = a0 >> 0x20\n 19239: a0 = a0 | a3\n 19242: a2 = a2 >> 0x20\n 19245: u64 [sp + 0x1e8] = a0\n 19249: u64 [sp + 0x1e0] = a1\n 19253: u32 [sp + 0x1f0] = a2\n 19257: u64 [sp + 536] = 0\n 19261: u64 [sp + 528] = 0\n 19265: u64 [sp + 520] = 0\n 19269: u64 [sp + 512] = 0\n 19273: a1 = 0x64\n 19276: a0 = s1\n 19278: ra = 240, jump @0\n      : @271 [@dyn 120] (gas: 4)\n 19284: u64 [sp + 0x58] = a0\n 19287: a1 = 0x20\n 19290: a0 = s1\n 19292: ra = 242, jump @0\n      : @272 [@dyn 121] (gas: 31)\n 19298: u32 [sp + 544] = 0x20\n 19303: u64 [sp + 600] = 0\n 19307: u64 [sp + 592] = 0\n 19311: u64 [sp + 584] = 0\n 19315: u64 [sp + 576] = 0\n 19319: a1 = sp + 0x1e0\n 19323: a1 = a1 << 0x20\n 19326: a1 = a1 >> 0x20\n 19329: a2 = 0x1800000000\n 19339: s1 = a1 | a2\n 19342: a1 = sp + 0x200\n 19346: a1 = a1 << 0x20\n 19349: a1 = a1 >> 0x20\n 19352: a2 = sp + 0x240\n 19356: a2 = a2 << 0x20\n 19359: a3 = a2 | a1\n 19362: a1 = u64 [sp + 0x58]\n 19365: a1 = a1 << 0x20\n 19368: a1 = a1 >> 0x20\n 19371: a2 = 0x6400000000\n 19381: a4 = a1 | a2\n 19384: a0 = a0 << 0x20\n 19387: a0 = a0 >> 0x20\n 19390: a1 = sp + 0x220\n 19394: a1 = a1 << 0x20\n 19397: a5 = a1 | a0\n 19400: a1 = 0xffffffffffffffff\n 19403: a2 = 0xffffffffffffffff\n 19406: a0 = s1\n 19408: ecalli 0 // 'call'\n 19409: fallthrough\n      : @273 (gas: 1)\n 19410: jump @299 if a0 != 0\n      : @274 (gas: 2)\n 19414: ecalli 10 // 'return_data_size'\n 19416: fallthrough\n      : @275 (gas: 2)\n 19417: a1 = 0x20\n 19420: jump @277 if a0 >=u a1\n      : @276 (gas: 3)\n 19423: ecalli 10 // 'return_data_size'\n 19425: a1 = a0\n 19427: fallthrough\n      : @277 (gas: 28)\n 19428: a4 = 0\n 19430: a3 = u64 [sp + 0x60]\n 19433: a2 = u64 [sp + 0x70]\n 19436: s1 = u64 [sp + 0x78]\n 19439: a0 = a1 + 0x1f\n 19442: u64 [sp + 0x70] = a1\n 19445: a1 = a0 <u a1\n 19448: u64 [sp + 120] = 0\n 19451: a1 = a1 & 0x1\n 19454: a0 = a0 & 0xffffffffffffffe0\n 19457: a2 = a2 + a0\n 19460: u64 [sp + 0x60] = a2\n 19463: a0 = a2 <u a0\n 19466: s1 = s1 + a1\n 19469: s1 = s1 + a0\n 19472: a2 = s1 ^ a1\n 19475: a1 = s1 <u a1\n 19478: a1 = a0 if a2 == 0\n 19481: a0 = u64 [sp + 0x18]\n 19484: a1 = a1 + a0\n 19487: a0 = a1 <u a0\n 19490: a0 = a0 + a3\n 19493: u64 [sp + 0x58] = a1\n 19496: u64 [sp + 0x50] = a0\n 19499: a0 = a0 | a1\n 19502: a1 = s1 <u 0x1\n 19505: a1 = 0 if a0 != 0\n 19507: jump @309 if a1 == 0\n      : @278 (gas: 3)\n 19511: a0 = 0x40\n 19514: a1 = 0x20\n 19517: ra = 244, jump @0\n      : @279 [@dyn 122] (gas: 79)\n 19523: a1 = u64 [sp + 0x50]\n 19526: a1 = reverse a1\n 19528: a2 = u64 [sp + 0x58]\n 19531: a2 = reverse a2\n 19533: a3 = reverse s1\n 19535: a4 = u64 [sp + 0x60]\n 19538: a4 = reverse a4\n 19540: u8 [a0 + 0x18] = a4\n 19543: a5 = a4 >> 0x38\n 19546: u8 [a0 + 0x1f] = a5\n 19549: a5 = a4 >> 0x30\n 19552: u8 [a0 + 0x1e] = a5\n 19555: a5 = a4 >> 0x28\n 19558: u8 [a0 + 0x1d] = a5\n 19561: a5 = a4 >> 0x20\n 19564: u8 [a0 + 0x1c] = a5\n 19567: a5 = a4 >> 0x18\n 19570: u8 [a0 + 0x1b] = a5\n 19573: a5 = a4 >> 0x10\n 19576: u8 [a0 + 0x1a] = a5\n 19579: a4 = a4 >> 0x8\n 19582: u8 [a0 + 0x19] = a4\n 19585: u8 [a0 + 0x10] = a3\n 19588: a4 = a3 >> 0x38\n 19591: u8 [a0 + 0x17] = a4\n 19594: a4 = a3 >> 0x30\n 19597: u8 [a0 + 0x16] = a4\n 19600: a4 = a3 >> 0x28\n 19603: u8 [a0 + 0x15] = a4\n 19606: a4 = a3 >> 0x20\n 19609: u8 [a0 + 0x14] = a4\n 19612: a4 = a3 >> 0x18\n 19615: u8 [a0 + 0x13] = a4\n 19618: a4 = a3 >> 0x10\n 19621: u8 [a0 + 0x12] = a4\n 19624: a3 = a3 >> 0x8\n 19627: u8 [a0 + 0x11] = a3\n 19630: u8 [a0 + 0x8] = a2\n 19633: a3 = a2 >> 0x38\n 19636: u8 [a0 + 0xf] = a3\n 19639: a3 = a2 >> 0x30\n 19642: u8 [a0 + 0xe] = a3\n 19645: a3 = a2 >> 0x28\n 19648: u8 [a0 + 0xd] = a3\n 19651: a3 = a2 >> 0x20\n 19654: u8 [a0 + 0xc] = a3\n 19657: a3 = a2 >> 0x18\n 19660: u8 [a0 + 0xb] = a3\n 19663: a3 = a2 >> 0x10\n 19666: u8 [a0 + 0xa] = a3\n 19669: a2 = a2 >> 0x8\n 19672: u8 [a0 + 0x9] = a2\n 19675: u8 [a0] = a1\n 19677: a2 = a1 >> 0x38\n 19680: u8 [a0 + 0x7] = a2\n 19683: a2 = a1 >> 0x30\n 19686: u8 [a0 + 0x6] = a2\n 19689: a2 = a1 >> 0x28\n 19692: u8 [a0 + 0x5] = a2\n 19695: a2 = a1 >> 0x20\n 19698: u8 [a0 + 0x4] = a2\n 19701: a2 = a1 >> 0x18\n 19704: u8 [a0 + 0x3] = a2\n 19707: a2 = a1 >> 0x10\n 19710: u8 [a0 + 0x2] = a2\n 19713: a1 = a1 >> 0x8\n 19716: a5 = u64 [sp + 0x78]\n 19719: a2 = a5 >u 0\n 19721: a3 = u64 [sp + 0x70]\n 19724: a3 = a3 <u 0x20\n 19727: a3 = a3 ^ 0x1\n 19730: a3 = a2 if a5 != 0\n 19733: a2 = a5 >u 0\n 19735: a4 = a5 >u 0\n 19737: a4 = a2 if a5 == 0\n 19740: a2 = a5 | a5\n 19743: a4 = a3 if a2 == 0\n 19746: u8 [a0 + 0x1] = a1\n 19749: jump @307 if a4 == 0\n      : @280 (gas: 3)\n 19753: a1 = 0x20\n 19756: a0 = u64 [sp + 0x68]\n 19759: ra = 246, jump @0\n      : @281 [@dyn 123] (gas: 96)\n 19765: a1 = u8 [a0 + 0x9]\n 19768: a2 = u8 [a0 + 0x8]\n 19771: a3 = u8 [a0 + 0xa]\n 19774: a4 = u8 [a0 + 0xb]\n 19777: a1 = a1 << 0x8\n 19780: a1 = a1 | a2\n 19783: a3 = a3 << 0x10\n 19786: a4 = a4 << 0x18\n 19789: a3 = a3 | a4\n 19792: a1 = a1 | a3\n 19795: a2 = u8 [a0 + 0xd]\n 19798: a3 = u8 [a0 + 0xc]\n 19801: a4 = u8 [a0 + 0xe]\n 19804: a5 = u8 [a0 + 0xf]\n 19807: a2 = a2 << 0x8\n 19810: a2 = a2 | a3\n 19813: a4 = a4 << 0x10\n 19816: a5 = a5 << 0x18\n 19819: a4 = a4 | a5\n 19822: a2 = a2 | a4\n 19825: a2 = a2 << 0x20\n 19828: t0 = a2 | a1\n 19831: a2 = u8 [a0 + 0x1]\n 19834: a3 = u8 [a0]\n 19836: a4 = u8 [a0 + 0x2]\n 19839: a5 = u8 [a0 + 0x3]\n 19842: a2 = a2 << 0x8\n 19845: a2 = a2 | a3\n 19848: a4 = a4 << 0x10\n 19851: a5 = a5 << 0x18\n 19854: a4 = a4 | a5\n 19857: a2 = a2 | a4\n 19860: a3 = u8 [a0 + 0x5]\n 19863: a4 = u8 [a0 + 0x4]\n 19866: a5 = u8 [a0 + 0x6]\n 19869: s1 = u8 [a0 + 0x7]\n 19872: a3 = a3 << 0x8\n 19875: a3 = a3 | a4\n 19878: a5 = a5 << 0x10\n 19881: s1 = s1 << 0x18\n 19884: a5 = a5 | s1\n 19887: a3 = a3 | a5\n 19890: a3 = a3 << 0x20\n 19893: a2 = a2 | a3\n 19896: a3 = u8 [a0 + 0x19]\n 19899: a4 = u8 [a0 + 0x18]\n 19902: a5 = u8 [a0 + 0x1a]\n 19905: s1 = u8 [a0 + 0x1b]\n 19908: a3 = a3 << 0x8\n 19911: a3 = a3 | a4\n 19914: a5 = a5 << 0x10\n 19917: s1 = s1 << 0x18\n 19920: a5 = a5 | s1\n 19923: a3 = a3 | a5\n 19926: a4 = u8 [a0 + 0x1d]\n 19929: a5 = u8 [a0 + 0x1c]\n 19932: s1 = u8 [a0 + 0x1e]\n 19935: a1 = u8 [a0 + 0x1f]\n 19938: a4 = a4 << 0x8\n 19941: a4 = a4 | a5\n 19944: s1 = s1 << 0x10\n 19947: a1 = a1 << 0x18\n 19950: a1 = a1 | s1\n 19953: a1 = a1 | a4\n 19956: a1 = a1 << 0x20\n 19959: a3 = a3 | a1\n 19962: a1 = u8 [a0 + 0x11]\n 19965: a4 = u8 [a0 + 0x10]\n 19968: a5 = u8 [a0 + 0x12]\n 19971: s1 = u8 [a0 + 0x13]\n 19974: a1 = a1 << 0x8\n 19977: a1 = a1 | a4\n 19980: a5 = a5 << 0x10\n 19983: s1 = s1 << 0x18\n 19986: a5 = a5 | s1\n 19989: a1 = a1 | a5\n 19992: a4 = u8 [a0 + 0x15]\n 19995: a5 = u8 [a0 + 0x14]\n 19998: s1 = u8 [a0 + 0x16]\n 20001: a0 = u8 [a0 + 0x17]\n 20004: a4 = a4 << 0x8\n 20007: a4 = a4 | a5\n 20010: s1 = s1 << 0x10\n 20013: a0 = a0 << 0x18\n 20016: a0 = a0 | s1\n 20019: a0 = a0 | a4\n 20022: a0 = a0 << 0x20\n 20025: a0 = a0 | a1\n 20028: a1 = reverse a0\n 20030: a4 = reverse a3\n 20032: a4 = a4 <u 0x2\n 20035: a4 = 0 if a1 != 0\n 20037: a1 = t0 | a2\n 20040: a1 = reverse a1\n 20042: a4 = 0 if a1 != 0\n 20044: jump @307 if a4 == 0\n      : @282 (gas: 4)\n 20048: a0 = a0 | a2\n 20051: a1 = t0 | a3\n 20054: a0 = a0 | a1\n 20057: jump @300 if a0 == 0\n      : @283 (gas: 14)\n 20061: i32 a0 = sp + 0x260\n 20065: ecalli 4 // 'caller'\n 20067: a0 = u32 [sp + 0x270]\n 20071: u64 [sp + 0x68] = a0\n 20074: a0 = u64 [sp + 0x268]\n 20078: u64 [sp + 0x50] = a0\n 20081: s1 = u64 [sp + 0x260]\n 20085: u64 [sp + 408] = 0\n 20089: u64 [sp + 400] = 0\n 20093: u64 [sp + 384] = 0x80\n 20099: a0 = sp + 0x1a0\n 20103: a1 = sp + 0x180\n 20107: u64 [sp + 392] = 0\n 20111: ra = 248, jump @46\n      : @284 [@dyn 124] (gas: 16)\n 20117: a2 = u64 [sp + 0x1b8]\n 20121: a3 = u64 [sp + 0x1b0]\n 20125: a0 = u64 [sp + 0x1a8]\n 20129: a1 = u64 [sp + 0x1a0]\n 20133: u64 [sp + 0x70] = a0\n 20136: u64 [sp + 0x58] = a2\n 20139: a0 = a0 | a2\n 20142: u64 [sp + 0x78] = a1\n 20145: a1 = a1 | a3\n 20148: a1 = a1 | a0\n 20151: a1 = a1 >> 0x20\n 20154: u64 [sp + 0x60] = a3\n 20157: a0 = a0 | a3\n 20160: a0 = a0 << 0x20\n 20163: a0 = a0 | a1\n 20166: jump @306 if a0 != 0\n      : @285 (gas: 17)\n 20170: a0 = reverse s1\n 20172: a0 = a0 << 0x20\n 20175: a1 = u64 [sp + 0x50]\n 20178: a1 = reverse a1\n 20180: a2 = a1 >> 0x20\n 20183: a0 = a0 | a2\n 20186: u64 [sp + 0x50] = a0\n 20189: a1 = a1 << 0x20\n 20192: a0 = u64 [sp + 0x68]\n 20195: a0 = reverse a0\n 20197: a0 = a0 >> 0x20\n 20200: a0 = a0 | a1\n 20203: u64 [sp + 0x40] = a0\n 20206: a0 = i32 [sp + 0x78]\n 20209: a1 = 0x20\n 20212: u64 [sp + 0x68] = a0\n 20215: ra = 250, jump @0\n      : @286 [@dyn 125] (gas: 65)\n 20221: a1 = u64 [sp + 0x40]\n 20224: a1 = reverse a1\n 20226: a2 = u64 [sp + 0x50]\n 20229: a2 = reverse a2\n 20231: a3 = s1 >> 0x18\n 20234: u8 [a0 + 0xf] = a3\n 20237: a3 = s1 >> 0x10\n 20240: u8 [a0 + 0xe] = a3\n 20243: a3 = s1 >> 0x8\n 20246: u8 [a0 + 0xd] = a3\n 20249: u8 [a0 + 0xc] = s1\n 20252: u8 [a0 + 11] = 0\n 20255: u8 [a0 + 10] = 0\n 20258: u8 [a0 + 9] = 0\n 20261: u8 [a0 + 8] = 0\n 20264: u8 [a0 + 7] = 0\n 20267: u8 [a0 + 6] = 0\n 20270: u8 [a0 + 5] = 0\n 20273: u8 [a0 + 4] = 0\n 20276: u8 [a0 + 3] = 0\n 20279: u8 [a0 + 2] = 0\n 20282: u8 [a0 + 1] = 0\n 20285: u8 [a0 + 0] = 0\n 20287: u8 [a0 + 0x10] = a2\n 20290: u8 [a0 + 0x18] = a1\n 20293: a3 = a2 >> 0x38\n 20296: u8 [a0 + 0x17] = a3\n 20299: a3 = a2 >> 0x30\n 20302: u8 [a0 + 0x16] = a3\n 20305: a3 = a2 >> 0x28\n 20308: u8 [a0 + 0x15] = a3\n 20311: a3 = a2 >> 0x20\n 20314: u8 [a0 + 0x14] = a3\n 20317: a3 = a2 >> 0x18\n 20320: u8 [a0 + 0x13] = a3\n 20323: a3 = a2 >> 0x10\n 20326: u8 [a0 + 0x12] = a3\n 20329: a2 = a2 >> 0x8\n 20332: u8 [a0 + 0x11] = a2\n 20335: a2 = a1 >> 0x38\n 20338: u8 [a0 + 0x1f] = a2\n 20341: a2 = a1 >> 0x30\n 20344: u8 [a0 + 0x1e] = a2\n 20347: a2 = a1 >> 0x28\n 20350: u8 [a0 + 0x1d] = a2\n 20353: a2 = a1 >> 0x20\n 20356: u8 [a0 + 0x1c] = a2\n 20359: a2 = a1 >> 0x18\n 20362: u8 [a0 + 0x1b] = a2\n 20365: a2 = a1 >> 0x10\n 20368: u8 [a0 + 0x1a] = a2\n 20371: a1 = a1 >> 0x8\n 20374: a2 = u64 [sp + 0x58]\n 20377: a4 = u64 [sp + 0x60]\n 20380: a4 = a4 | a2\n 20383: s1 = 0x100000000\n 20393: a2 = 0xffffffe0\n 20403: a3 = u64 [sp + 0x78]\n 20406: a2 = a3 <u a2\n 20409: a3 = u64 [sp + 0x70]\n 20412: a2 = 0 if a3 != 0\n 20414: u64 [sp + 0x50] = a4\n 20417: a2 = 0 if a4 != 0\n 20419: u8 [a0 + 0x19] = a1\n 20422: jump @306 if a2 == 0\n      : @287 (gas: 4)\n 20426: a0 = u64 [sp + 0x68]\n 20429: i32 a0 = a0 + 0x20\n 20432: a1 = 0x20\n 20435: ra = 252, jump @0\n      : @288 [@dyn 126] (gas: 48)\n 20441: u8 [a0 + 23] = 0\n 20444: u8 [a0 + 22] = 0\n 20447: u8 [a0 + 21] = 0\n 20450: u8 [a0 + 20] = 0\n 20453: u8 [a0 + 19] = 0\n 20456: u8 [a0 + 18] = 0\n 20459: u8 [a0 + 17] = 0\n 20462: u8 [a0 + 16] = 0\n 20465: u8 [a0 + 15] = 0\n 20468: u8 [a0 + 14] = 0\n 20471: u8 [a0 + 13] = 0\n 20474: u8 [a0 + 12] = 0\n 20477: u8 [a0 + 11] = 0\n 20480: u8 [a0 + 10] = 0\n 20483: u8 [a0 + 9] = 0\n 20486: u8 [a0 + 8] = 0\n 20489: u8 [a0 + 7] = 0\n 20492: u8 [a0 + 6] = 0\n 20495: u8 [a0 + 5] = 0\n 20498: u8 [a0 + 4] = 0\n 20501: u8 [a0 + 3] = 0\n 20504: u8 [a0 + 2] = 0\n 20507: u8 [a0 + 1] = 0\n 20510: u8 [a0 + 0] = 0\n 20512: a2 = u64 [sp + 0x48]\n 20515: u8 [a0 + 0x18] = a2\n 20518: a1 = a2 >> 0x38\n 20521: u8 [a0 + 0x1f] = a1\n 20524: a1 = a2 >> 0x30\n 20527: u8 [a0 + 0x1e] = a1\n 20530: a1 = a2 >> 0x28\n 20533: u8 [a0 + 0x1d] = a1\n 20536: a1 = a2 >> 0x20\n 20539: u8 [a0 + 0x1c] = a1\n 20542: a1 = a2 >> 0x18\n 20545: u8 [a0 + 0x1b] = a1\n 20548: a1 = a2 >> 0x10\n 20551: u8 [a0 + 0x1a] = a1\n 20554: a1 = a2 >> 0x8\n 20557: a2 = s1 + 0xffffffffffffffc0\n 20560: a3 = u64 [sp + 0x78]\n 20563: a2 = a3 <u a2\n 20566: a3 = u64 [sp + 0x70]\n 20569: a2 = 0 if a3 != 0\n 20571: a3 = u64 [sp + 0x50]\n 20574: a2 = 0 if a3 != 0\n 20576: u8 [a0 + 0x19] = a1\n 20579: jump @306 if a2 == 0\n      : @289 (gas: 4)\n 20583: a0 = u64 [sp + 0x68]\n 20586: i32 a0 = a0 + 0x40\n 20589: a1 = 0x20\n 20592: ra = 254, jump @0\n      : @290 [@dyn 127] (gas: 42)\n 20598: a1 = u64 [sp + 0x10]\n 20601: u8 [a0 + 0x1f] = a1\n 20604: s1 = 0x1\n 20607: a1 = 0xffffffa0\n 20617: a2 = u64 [sp + 0x78]\n 20620: a1 = a2 <u a1\n 20623: a2 = u64 [sp + 0x70]\n 20626: a1 = 0 if a2 != 0\n 20628: a2 = u64 [sp + 0x50]\n 20631: a1 = 0 if a2 != 0\n 20633: u8 [a0 + 30] = 0\n 20636: u8 [a0 + 29] = 0\n 20639: u8 [a0 + 28] = 0\n 20642: u8 [a0 + 27] = 0\n 20645: u8 [a0 + 26] = 0\n 20648: u8 [a0 + 25] = 0\n 20651: u8 [a0 + 24] = 0\n 20654: u8 [a0 + 23] = 0\n 20657: u8 [a0 + 22] = 0\n 20660: u8 [a0 + 21] = 0\n 20663: u8 [a0 + 20] = 0\n 20666: u8 [a0 + 19] = 0\n 20669: u8 [a0 + 18] = 0\n 20672: u8 [a0 + 17] = 0\n 20675: u8 [a0 + 16] = 0\n 20678: u8 [a0 + 15] = 0\n 20681: u8 [a0 + 14] = 0\n 20684: u8 [a0 + 13] = 0\n 20687: u8 [a0 + 12] = 0\n 20690: u8 [a0 + 11] = 0\n 20693: u8 [a0 + 10] = 0\n 20696: u8 [a0 + 9] = 0\n 20699: u8 [a0 + 8] = 0\n 20702: u8 [a0 + 7] = 0\n 20705: u8 [a0 + 6] = 0\n 20708: u8 [a0 + 5] = 0\n 20711: u8 [a0 + 4] = 0\n 20714: u8 [a0 + 3] = 0\n 20717: u8 [a0 + 2] = 0\n 20720: u8 [a0 + 1] = 0\n 20723: u8 [a0 + 0] = 0\n 20725: jump @306 if a1 == 0\n      : @291 (gas: 4)\n 20729: a0 = u64 [sp + 0x68]\n 20732: i32 a0 = a0 + 0x60\n 20735: a1 = 0x20\n 20738: ra = 256, jump @0\n      : @292 [@dyn 128] (gas: 85)\n 20744: u8 [a0 + 0x1f] = s1\n 20747: u8 [a0 + 30] = 0\n 20750: u8 [a0 + 29] = 0\n 20753: u8 [a0 + 28] = 0\n 20756: u8 [a0 + 27] = 0\n 20759: u8 [a0 + 26] = 0\n 20762: u8 [a0 + 25] = 0\n 20765: u8 [a0 + 24] = 0\n 20768: u8 [a0 + 23] = 0\n 20771: u8 [a0 + 22] = 0\n 20774: u8 [a0 + 21] = 0\n 20777: u8 [a0 + 20] = 0\n 20780: u8 [a0 + 19] = 0\n 20783: u8 [a0 + 18] = 0\n 20786: u8 [a0 + 17] = 0\n 20789: u8 [a0 + 16] = 0\n 20792: u8 [a0 + 15] = 0\n 20795: u8 [a0 + 14] = 0\n 20798: u8 [a0 + 13] = 0\n 20801: u8 [a0 + 12] = 0\n 20804: u8 [a0 + 11] = 0\n 20807: u8 [a0 + 10] = 0\n 20810: u8 [a0 + 9] = 0\n 20813: u8 [a0 + 8] = 0\n 20816: u8 [a0 + 7] = 0\n 20819: u8 [a0 + 6] = 0\n 20822: u8 [a0 + 5] = 0\n 20825: u8 [a0 + 4] = 0\n 20828: u8 [a0 + 3] = 0\n 20831: u8 [a0 + 2] = 0\n 20834: u8 [a0 + 1] = 0\n 20837: u8 [a0 + 0] = 0\n 20839: a0 = u64 [sp + 0x58]\n 20842: u64 [sp + 0x158] = a0\n 20846: a0 = u64 [sp + 0x60]\n 20849: u64 [sp + 0x150] = a0\n 20853: a0 = u64 [sp + 0x70]\n 20856: u64 [sp + 0x148] = a0\n 20860: a0 = u64 [sp + 0x78]\n 20863: u64 [sp + 0x140] = a0\n 20867: u64 [sp + 376] = 0\n 20871: u64 [sp + 368] = 0\n 20875: u64 [sp + 360] = 0\n 20879: a0 = sp + 0x160\n 20883: a1 = sp + 0x140\n 20887: u64 [sp + 352] = 0\n 20891: ra = 0x102\n 20895: sp = sp + 0xfffffffffffffde0\n 20899: u64 [sp + 0x218] = ra\n 20903: u64 [sp + 0x210] = s0\n 20907: u64 [sp + 0x208] = s1\n 20911: s0 = sp + 0x220\n 20915: sp = sp & 0xffffffffffffffe0\n 20918: a2 = u64 [a1 + 0x18]\n 20921: u64 [sp + 0x38] = a2\n 20924: a2 = u64 [a1 + 0x10]\n 20927: u64 [sp + 0x30] = a2\n 20930: a2 = u64 [a1 + 0x8]\n 20933: u64 [sp + 0x28] = a2\n 20936: a1 = u64 [a1]\n 20938: u64 [sp + 0x20] = a1\n 20941: a3 = u64 [a0 + 0x18]\n 20944: a2 = u64 [a0 + 0x10]\n 20947: a1 = u64 [a0 + 0x8]\n 20950: a0 = u64 [a0]\n 20952: u64 [sp + 0x40] = a3\n 20955: u64 [sp + 0x1d8] = a3\n 20959: u64 [sp + 0x48] = a2\n 20962: u64 [sp + 0x1d0] = a2\n 20966: u64 [sp + 0x50] = a1\n 20969: u64 [sp + 0x1c8] = a1\n 20973: u64 [sp + 0x58] = a0\n 20976: u64 [sp + 0x1c0] = a0\n 20980: u64 [sp + 504] = 0\n 20984: u64 [sp + 496] = 0\n 20988: u64 [sp + 488] = 0\n 20992: u64 [sp + 480] = 0\n 20996: u32 [sp + 416] = 0x20\n 21001: i32 a1 = sp + 0x1c0\n 21005: i32 a3 = sp + 0x1e0\n 21009: i32 a4 = sp + 0x1a0\n 21013: a2 = 0xffffffffffffffff\n 21016: a0 = 0\n 21018: ecalli 6 // 'get_storage'\n 21020: jump @248\n      : @293 [@dyn 129] (gas: 6)\n 21023: sp = s0 + 0xfffffffffffffd20\n 21027: ra = u64 [sp + 0x2d8]\n 21031: s0 = u64 [sp + 0x2d0]\n 21035: s1 = u64 [sp + 0x2c8]\n 21039: sp = sp + 0x2e0\n 21043: ret\n      : @294 (gas: 3)\n 21045: a0 = 0x40\n 21048: a1 = 0x20\n 21051: ra = 260, jump @0\n      : @295 [@dyn 130] (gas: 103)\n 21057: a1 = u8 [a0 + 0x11]\n 21060: a2 = u8 [a0 + 0x10]\n 21063: a3 = u8 [a0 + 0x12]\n 21066: a4 = u8 [a0 + 0x13]\n 21069: a1 = a1 << 0x8\n 21072: a1 = a1 | a2\n 21075: a3 = a3 << 0x10\n 21078: a4 = a4 << 0x18\n 21081: a3 = a3 | a4\n 21084: a1 = a1 | a3\n 21087: a2 = u8 [a0 + 0x15]\n 21090: a3 = u8 [a0 + 0x14]\n 21093: a4 = u8 [a0 + 0x16]\n 21096: a5 = u8 [a0 + 0x17]\n 21099: a2 = a2 << 0x8\n 21102: a2 = a2 | a3\n 21105: a4 = a4 << 0x10\n 21108: a5 = a5 << 0x18\n 21111: a4 = a4 | a5\n 21114: a2 = a2 | a4\n 21117: a2 = a2 << 0x20\n 21120: t0 = a2 | a1\n 21123: a2 = u8 [a0 + 0x1]\n 21126: a3 = u8 [a0]\n 21128: a4 = u8 [a0 + 0x2]\n 21131: a5 = u8 [a0 + 0x3]\n 21134: a2 = a2 << 0x8\n 21137: a2 = a2 | a3\n 21140: a4 = a4 << 0x10\n 21143: a5 = a5 << 0x18\n 21146: a4 = a4 | a5\n 21149: a2 = a2 | a4\n 21152: a3 = u8 [a0 + 0x5]\n 21155: a4 = u8 [a0 + 0x4]\n 21158: a5 = u8 [a0 + 0x6]\n 21161: s1 = u8 [a0 + 0x7]\n 21164: a3 = a3 << 0x8\n 21167: a3 = a3 | a4\n 21170: a5 = a5 << 0x10\n 21173: s1 = s1 << 0x18\n 21176: a5 = a5 | s1\n 21179: a3 = a3 | a5\n 21182: a3 = a3 << 0x20\n 21185: a2 = a2 | a3\n 21188: a3 = u8 [a0 + 0x19]\n 21191: a4 = u8 [a0 + 0x18]\n 21194: a5 = u8 [a0 + 0x1a]\n 21197: s1 = u8 [a0 + 0x1b]\n 21200: a3 = a3 << 0x8\n 21203: a3 = a3 | a4\n 21206: a5 = a5 << 0x10\n 21209: s1 = s1 << 0x18\n 21212: a5 = a5 | s1\n 21215: a3 = a3 | a5\n 21218: a4 = u8 [a0 + 0x1d]\n 21221: a5 = u8 [a0 + 0x1c]\n 21224: s1 = u8 [a0 + 0x1e]\n 21227: a1 = u8 [a0 + 0x1f]\n 21230: a4 = a4 << 0x8\n 21233: a4 = a4 | a5\n 21236: s1 = s1 << 0x10\n 21239: a1 = a1 << 0x18\n 21242: a1 = a1 | s1\n 21245: a1 = a1 | a4\n 21248: a1 = a1 << 0x20\n 21251: a3 = a3 | a1\n 21254: a1 = u8 [a0 + 0x9]\n 21257: a4 = u8 [a0 + 0x8]\n 21260: a5 = u8 [a0 + 0xa]\n 21263: s1 = u8 [a0 + 0xb]\n 21266: a1 = a1 << 0x8\n 21269: a1 = a1 | a4\n 21272: a5 = a5 << 0x10\n 21275: s1 = s1 << 0x18\n 21278: a5 = a5 | s1\n 21281: a1 = a1 | a5\n 21284: a4 = u8 [a0 + 0xd]\n 21287: a5 = u8 [a0 + 0xc]\n 21290: s1 = u8 [a0 + 0xe]\n 21293: a0 = u8 [a0 + 0xf]\n 21296: a4 = a4 << 0x8\n 21299: a4 = a4 | a5\n 21302: s1 = s1 << 0x10\n 21305: a0 = a0 << 0x18\n 21308: a0 = a0 | s1\n 21311: a0 = a0 | a4\n 21314: a0 = a0 << 0x20\n 21317: a0 = a0 | a1\n 21320: s1 = reverse a0\n 21322: a1 = reverse a3\n 21324: a2 = reverse a2\n 21326: a0 = reverse t0\n 21328: u64 [sp + 0x78] = a0\n 21331: u64 [sp + 0x70] = a2\n 21334: a0 = a0 | a2\n 21337: a2 = a1\n 21339: a1 = a1 | s1\n 21342: a1 = a1 | a0\n 21345: a1 = a1 >> 0x20\n 21348: a0 = a0 | s1\n 21351: a0 = a0 << 0x20\n 21354: a0 = a0 | a1\n 21357: jump @306 if a0 != 0\n      : @296 (gas: 5)\n 21361: u64 [sp + 0x68] = a2\n 21364: i32 a0 = a2 + 0\n 21366: a1 = 0x20\n 21369: u64 [sp + 0x60] = a0\n 21372: ra = 262, jump @0\n      : @297 [@dyn 131] (gas: 50)\n 21378: u8 [a0 + 31] = 0\n 21381: u8 [a0 + 30] = 0\n 21384: u8 [a0 + 29] = 0\n 21387: u8 [a0 + 28] = 0\n 21390: u8 [a0 + 27] = 0\n 21393: u8 [a0 + 26] = 0\n 21396: u8 [a0 + 25] = 0\n 21399: u8 [a0 + 24] = 0\n 21402: u8 [a0 + 23] = 0\n 21405: u8 [a0 + 22] = 0\n 21408: u8 [a0 + 21] = 0\n 21411: u8 [a0 + 20] = 0\n 21414: u8 [a0 + 19] = 0\n 21417: u8 [a0 + 18] = 0\n 21420: u8 [a0 + 17] = 0\n 21423: u8 [a0 + 16] = 0\n 21426: u8 [a0 + 15] = 0\n 21429: u8 [a0 + 14] = 0\n 21432: u8 [a0 + 13] = 0\n 21435: u8 [a0 + 12] = 0\n 21438: u8 [a0 + 11] = 0\n 21441: u8 [a0 + 10] = 0\n 21444: u8 [a0 + 9] = 0\n 21447: u8 [a0 + 8] = 0\n 21450: u8 [a0 + 7] = 0\n 21453: u8 [a0 + 6] = 0\n 21456: u8 [a0 + 5] = 0\n 21459: u8 [a0 + 4] = 0\n 21462: u8 [a0 + 3] = 0xa0\n 21467: u8 [a0 + 2] = 0x79\n 21471: u8 [a0 + 1] = 0xc3\n 21476: u8 [a0 + 0] = 0x8\n 21479: a1 = u64 [sp + 0x68]\n 21482: a0 = a1 + 0x4\n 21485: a1 = a0 <u a1\n 21488: a3 = u64 [sp + 0x78]\n 21491: a2 = a3 + a1\n 21494: a3 = a2 <u a3\n 21497: a3 = a1 if a1 == 0\n 21500: a3 = a3 + s1\n 21503: a1 = a3 <u s1\n 21506: a4 = u64 [sp + 0x70]\n 21509: a4 = a4 + a1\n 21512: u64 [sp + 0x88] = a2\n 21516: u64 [sp + 0x80] = a0\n 21520: u64 [sp + 0x90] = a3\n 21524: a0 = sp + 0xa0\n 21528: a1 = sp + 0x80\n 21532: u64 [sp + 0x98] = a4\n 21536: ra = 264, jump @201\n      : @298 [@dyn 132] (gas: 5)\n 21542: a0 = u64 [sp + 0xa8]\n 21546: t0 = u64 [sp + 0xb8]\n 21550: t1 = u64 [sp + 0xa0]\n 21554: a3 = u64 [sp + 0xb0]\n 21558: jump @305\n      : @299 (gas: 1)\n 21561: ra = 266, jump @211\n      : @300 [@dyn 133] (gas: 3)\n 21567: a0 = 0x40\n 21570: a1 = 0x20\n 21573: ra = 268, jump @0\n      : @301 [@dyn 134] (gas: 103)\n 21579: a1 = u8 [a0 + 0x11]\n 21582: a2 = u8 [a0 + 0x10]\n 21585: a3 = u8 [a0 + 0x12]\n 21588: a4 = u8 [a0 + 0x13]\n 21591: a1 = a1 << 0x8\n 21594: a1 = a1 | a2\n 21597: a3 = a3 << 0x10\n 21600: a4 = a4 << 0x18\n 21603: a3 = a3 | a4\n 21606: a1 = a1 | a3\n 21609: a2 = u8 [a0 + 0x15]\n 21612: a3 = u8 [a0 + 0x14]\n 21615: a4 = u8 [a0 + 0x16]\n 21618: a5 = u8 [a0 + 0x17]\n 21621: a2 = a2 << 0x8\n 21624: a2 = a2 | a3\n 21627: a4 = a4 << 0x10\n 21630: a5 = a5 << 0x18\n 21633: a4 = a4 | a5\n 21636: a2 = a2 | a4\n 21639: a2 = a2 << 0x20\n 21642: t0 = a2 | a1\n 21645: a2 = u8 [a0 + 0x1]\n 21648: a3 = u8 [a0]\n 21650: a4 = u8 [a0 + 0x2]\n 21653: a5 = u8 [a0 + 0x3]\n 21656: a2 = a2 << 0x8\n 21659: a2 = a2 | a3\n 21662: a4 = a4 << 0x10\n 21665: a5 = a5 << 0x18\n 21668: a4 = a4 | a5\n 21671: a2 = a2 | a4\n 21674: a3 = u8 [a0 + 0x5]\n 21677: a4 = u8 [a0 + 0x4]\n 21680: a5 = u8 [a0 + 0x6]\n 21683: s1 = u8 [a0 + 0x7]\n 21686: a3 = a3 << 0x8\n 21689: a3 = a3 | a4\n 21692: a5 = a5 << 0x10\n 21695: s1 = s1 << 0x18\n 21698: a5 = a5 | s1\n 21701: a3 = a3 | a5\n 21704: a3 = a3 << 0x20\n 21707: a2 = a2 | a3\n 21710: a3 = u8 [a0 + 0x19]\n 21713: a4 = u8 [a0 + 0x18]\n 21716: a5 = u8 [a0 + 0x1a]\n 21719: s1 = u8 [a0 + 0x1b]\n 21722: a3 = a3 << 0x8\n 21725: a3 = a3 | a4\n 21728: a5 = a5 << 0x10\n 21731: s1 = s1 << 0x18\n 21734: a5 = a5 | s1\n 21737: a3 = a3 | a5\n 21740: a4 = u8 [a0 + 0x1d]\n 21743: a5 = u8 [a0 + 0x1c]\n 21746: s1 = u8 [a0 + 0x1e]\n 21749: a1 = u8 [a0 + 0x1f]\n 21752: a4 = a4 << 0x8\n 21755: a4 = a4 | a5\n 21758: s1 = s1 << 0x10\n 21761: a1 = a1 << 0x18\n 21764: a1 = a1 | s1\n 21767: a1 = a1 | a4\n 21770: a1 = a1 << 0x20\n 21773: a3 = a3 | a1\n 21776: a1 = u8 [a0 + 0x9]\n 21779: a4 = u8 [a0 + 0x8]\n 21782: a5 = u8 [a0 + 0xa]\n 21785: s1 = u8 [a0 + 0xb]\n 21788: a1 = a1 << 0x8\n 21791: a1 = a1 | a4\n 21794: a5 = a5 << 0x10\n 21797: s1 = s1 << 0x18\n 21800: a5 = a5 | s1\n 21803: a1 = a1 | a5\n 21806: a4 = u8 [a0 + 0xd]\n 21809: a5 = u8 [a0 + 0xc]\n 21812: s1 = u8 [a0 + 0xe]\n 21815: a0 = u8 [a0 + 0xf]\n 21818: a4 = a4 << 0x8\n 21821: a4 = a4 | a5\n 21824: s1 = s1 << 0x10\n 21827: a0 = a0 << 0x18\n 21830: a0 = a0 | s1\n 21833: a0 = a0 | a4\n 21836: a0 = a0 << 0x20\n 21839: a0 = a0 | a1\n 21842: s1 = reverse a0\n 21844: a1 = reverse a3\n 21846: a2 = reverse a2\n 21848: a0 = reverse t0\n 21850: u64 [sp + 0x78] = a0\n 21853: u64 [sp + 0x70] = a2\n 21856: a0 = a0 | a2\n 21859: a2 = a1\n 21861: a1 = a1 | s1\n 21864: a1 = a1 | a0\n 21867: a1 = a1 >> 0x20\n 21870: a0 = a0 | s1\n 21873: a0 = a0 << 0x20\n 21876: a0 = a0 | a1\n 21879: jump @306 if a0 != 0\n      : @302 (gas: 5)\n 21883: u64 [sp + 0x68] = a2\n 21886: i32 a0 = a2 + 0\n 21888: a1 = 0x20\n 21891: u64 [sp + 0x60] = a0\n 21894: ra = 270, jump @0\n      : @303 [@dyn 135] (gas: 50)\n 21900: u8 [a0 + 31] = 0\n 21903: u8 [a0 + 30] = 0\n 21906: u8 [a0 + 29] = 0\n 21909: u8 [a0 + 28] = 0\n 21912: u8 [a0 + 27] = 0\n 21915: u8 [a0 + 26] = 0\n 21918: u8 [a0 + 25] = 0\n 21921: u8 [a0 + 24] = 0\n 21924: u8 [a0 + 23] = 0\n 21927: u8 [a0 + 22] = 0\n 21930: u8 [a0 + 21] = 0\n 21933: u8 [a0 + 20] = 0\n 21936: u8 [a0 + 19] = 0\n 21939: u8 [a0 + 18] = 0\n 21942: u8 [a0 + 17] = 0\n 21945: u8 [a0 + 16] = 0\n 21948: u8 [a0 + 15] = 0\n 21951: u8 [a0 + 14] = 0\n 21954: u8 [a0 + 13] = 0\n 21957: u8 [a0 + 12] = 0\n 21960: u8 [a0 + 11] = 0\n 21963: u8 [a0 + 10] = 0\n 21966: u8 [a0 + 9] = 0\n 21969: u8 [a0 + 8] = 0\n 21972: u8 [a0 + 7] = 0\n 21975: u8 [a0 + 6] = 0\n 21978: u8 [a0 + 5] = 0\n 21981: u8 [a0 + 4] = 0\n 21984: u8 [a0 + 3] = 0xa0\n 21989: u8 [a0 + 2] = 0x79\n 21993: u8 [a0 + 1] = 0xc3\n 21998: u8 [a0 + 0] = 0x8\n 22001: a1 = u64 [sp + 0x68]\n 22004: a0 = a1 + 0x4\n 22007: a1 = a0 <u a1\n 22010: a3 = u64 [sp + 0x78]\n 22013: a2 = a3 + a1\n 22016: a3 = a2 <u a3\n 22019: a3 = a1 if a1 == 0\n 22022: a3 = a3 + s1\n 22025: a1 = a3 <u s1\n 22028: a4 = u64 [sp + 0x70]\n 22031: a4 = a4 + a1\n 22034: u64 [sp + 0x108] = a2\n 22038: u64 [sp + 0x100] = a0\n 22042: u64 [sp + 0x110] = a3\n 22046: a0 = sp + 0x120\n 22050: a1 = sp + 0x100\n 22054: u64 [sp + 0x118] = a4\n 22058: ra = 272, jump @227\n      : @304 [@dyn 136] (gas: 5)\n 22064: a0 = u64 [sp + 0x128]\n 22068: t0 = u64 [sp + 0x138]\n 22072: t1 = u64 [sp + 0x120]\n 22076: a3 = u64 [sp + 0x130]\n 22080: fallthrough\n      : @305 (gas: 26)\n 22081: a1 = u64 [sp + 0x78]\n 22084: a4 = a0 ^ a1\n 22087: a5 = a0 <u a1\n 22090: t2 = a1\n 22092: a2 = u64 [sp + 0x68]\n 22095: a1 = t1 <u a2\n 22098: a5 = a1 if a4 == 0\n 22101: a4 = a3 - s1\n 22104: a3 = a3 <u s1\n 22107: s1 = u64 [sp + 0x70]\n 22110: s1 = t0 - s1\n 22113: s1 = s1 - a3\n 22116: a3 = a4 <u a5\n 22119: s1 = s1 - a3\n 22122: a4 = a4 - a5\n 22125: a0 = a0 - t2\n 22128: a1 = a0 - a1\n 22131: a0 = t1 - a2\n 22134: a1 = a1 | s1\n 22137: a2 = a0 | a4\n 22140: a2 = a2 | a1\n 22143: a1 = a1 | a4\n 22146: a2 = a2 >> 0x20\n 22149: a1 = a1 << 0x20\n 22152: a1 = a1 | a2\n 22155: jump @313 if a1 == 0\n      : @306 (gas: 1)\n 22158: trap\n      : @307 (gas: 3)\n 22159: a0 = 0\n 22161: a1 = 0\n 22163: ra = 274, jump @0\n      : @308 [@dyn 137] (gas: 5)\n 22169: i32 a1 = a0 + 0\n 22171: a0 = 0x1\n 22174: a2 = 0\n 22176: ecalli 11 // 'seal_return'\n 22178: fallthrough\n      : @309 (gas: 8)\n 22179: u64 [sp + 240] = 0\n 22183: u64 [sp + 232] = 0\n 22187: u64 [sp + 224] = 0\n 22191: a0 = 0x4e487b7100000000\n 22201: a1 = sp + 0xe0\n 22205: u64 [sp + 0xf8] = a0\n 22209: a0 = 0\n 22211: ra = 276, jump @8\n      : @310 [@dyn 138] (gas: 7)\n 22217: u64 [sp + 216] = 0\n 22221: u64 [sp + 208] = 0\n 22225: u64 [sp + 192] = 0x41\n 22230: a0 = 0x4\n 22233: a1 = sp + 0xc0\n 22237: u64 [sp + 200] = 0\n 22241: ra = 278, jump @8\n      : @311 [@dyn 139] (gas: 3)\n 22247: a1 = 0x24\n 22250: a0 = 0\n 22252: ra = 280, jump @0\n      : @312 [@dyn 140] (gas: 5)\n 22258: i32 a1 = a0 + 0\n 22260: a0 = 0x1\n 22263: a2 = 0x24\n 22266: ecalli 11 // 'seal_return'\n 22268: fallthrough\n      : @313 (gas: 4)\n 22269: i32 s1 = a0 + 0\n 22271: a0 = u64 [sp + 0x60]\n 22274: a1 = s1\n 22276: ra = 282, jump @0\n      : @314 [@dyn 141] (gas: 6)\n 22282: i32 a1 = a0 + 0\n 22284: a0 = 0x1\n 22287: a2 = s1\n 22289: ra = 0x11c\n 22293: ecalli 11 // 'seal_return'\n 22295: fallthrough\n      : @315 [@dyn 142] (gas: 6)\n 22296: u64 [a0 + 24] = 0\n 22299: u64 [a0 + 16] = 0\n 22302: u64 [a0 + 8] = 0\n 22305: a1 = 0x60\n 22308: u64 [a0] = a1\n 22310: ret\n      : @316 (gas: 14)\n 22312: sp = sp + 0xffffffffffffff10\n 22316: u64 [sp + 0xe8] = ra\n 22320: u64 [sp + 0xe0] = s0\n 22324: u64 [sp + 0xd8] = s1\n 22328: s0 = sp + 0xf0\n 22332: sp = sp & 0xfffffffffffffff0\n 22335: a2 = u64 [a1 + 0x18]\n 22338: a4 = u64 [a1 + 0x10]\n 22341: a5 = u64 [a1 + 0x8]\n 22344: s1 = a4 | a2\n 22347: a3 = a5 <u 0x1\n 22350: a3 = 0 if s1 != 0\n 22352: u64 [sp + 0x48] = a0\n 22355: jump @322 if a3 == 0\n      : @317 (gas: 30)\n 22359: s1 = u64 [a1]\n 22361: a0 = a4 >> 0x3b\n 22364: u64 [sp + 0x20] = a2\n 22367: a1 = a2 << 0x5\n 22370: a0 = a0 | a1\n 22373: a1 = a5 >> 0x3b\n 22376: u64 [sp + 0x28] = a4\n 22379: a2 = a4 << 0x5\n 22382: a1 = a1 | a2\n 22385: a2 = s1 >> 0x3b\n 22388: u64 [sp + 0x10] = a5\n 22391: a3 = a5 << 0x5\n 22394: a2 = a2 | a3\n 22397: u64 [sp + 0x18] = s1\n 22400: a3 = s1 << 0x5\n 22403: a4 = a3 + 0x20\n 22406: a3 = a4 <u a3\n 22409: a5 = a2 + a3\n 22412: a2 = a5 <u a2\n 22415: a2 = a3 if a3 == 0\n 22418: a2 = a2 + a1\n 22421: a1 = a2 <u a1\n 22424: a3 = a0 + a1\n 22427: u64 [sp + 0x90] = a4\n 22431: u64 [sp + 0x98] = a5\n 22435: u64 [sp + 0xa0] = a2\n 22439: a0 = sp + 0xb0\n 22443: a1 = sp + 0x90\n 22447: u64 [sp + 0xa8] = a3\n 22451: ra = 286, jump @46\n      : @318 [@dyn 143] (gas: 15)\n 22457: a0 = u64 [sp + 0xc8]\n 22461: a2 = u64 [sp + 0xc0]\n 22465: a1 = u64 [sp + 0xb8]\n 22469: a3 = u64 [sp + 0xb0]\n 22473: u64 [sp + 0x38] = a0\n 22476: u64 [sp + 0x30] = a1\n 22479: a0 = a0 | a1\n 22482: a1 = a3 | a2\n 22485: a1 = a1 | a0\n 22488: a1 = a1 >> 0x20\n 22491: u64 [sp + 0x40] = a2\n 22494: a0 = a0 | a2\n 22497: a0 = a0 << 0x20\n 22500: a0 = a0 | a1\n 22503: jump @321 if a0 != 0\n      : @319 (gas: 4)\n 22507: i32 a0 = a3 + 0\n 22509: a1 = 0x20\n 22512: u64 [sp + 0x8] = a3\n 22515: ra = 288, jump @0\n      : @320 [@dyn 144] (gas: 83)\n 22521: a1 = u64 [sp + 0x20]\n 22524: a1 = reverse a1\n 22526: a2 = u64 [sp + 0x28]\n 22529: a2 = reverse a2\n 22531: a3 = u64 [sp + 0x10]\n 22534: a3 = reverse a3\n 22536: a4 = u64 [sp + 0x18]\n 22539: a4 = reverse a4\n 22541: a5 = a4 >> 0x38\n 22544: u8 [a0 + 0x1f] = a5\n 22547: a5 = a4 >> 0x30\n 22550: u8 [a0 + 0x1e] = a5\n 22553: a5 = a4 >> 0x28\n 22556: u8 [a0 + 0x1d] = a5\n 22559: a5 = a4 >> 0x20\n 22562: u8 [a0 + 0x1c] = a5\n 22565: a5 = a4 >> 0x18\n 22568: u8 [a0 + 0x1b] = a5\n 22571: a5 = a4 >> 0x10\n 22574: u8 [a0 + 0x1a] = a5\n 22577: a5 = a4 >> 0x8\n 22580: u8 [a0 + 0x19] = a5\n 22583: u8 [a0 + 0x18] = a4\n 22586: u8 [a0 + 0x10] = a3\n 22589: a4 = a3 >> 0x38\n 22592: u8 [a0 + 0x17] = a4\n 22595: a4 = a3 >> 0x30\n 22598: u8 [a0 + 0x16] = a4\n 22601: a4 = a3 >> 0x28\n 22604: u8 [a0 + 0x15] = a4\n 22607: a4 = a3 >> 0x20\n 22610: u8 [a0 + 0x14] = a4\n 22613: a4 = a3 >> 0x18\n 22616: u8 [a0 + 0x13] = a4\n 22619: a4 = a3 >> 0x10\n 22622: u8 [a0 + 0x12] = a4\n 22625: a3 = a3 >> 0x8\n 22628: u8 [a0 + 0x11] = a3\n 22631: u8 [a0 + 0x8] = a2\n 22634: a3 = a2 >> 0x38\n 22637: u8 [a0 + 0xf] = a3\n 22640: a3 = a2 >> 0x30\n 22643: u8 [a0 + 0xe] = a3\n 22646: a3 = a2 >> 0x28\n 22649: u8 [a0 + 0xd] = a3\n 22652: a3 = a2 >> 0x20\n 22655: u8 [a0 + 0xc] = a3\n 22658: a3 = a2 >> 0x18\n 22661: u8 [a0 + 0xb] = a3\n 22664: a3 = a2 >> 0x10\n 22667: u8 [a0 + 0xa] = a3\n 22670: a2 = a2 >> 0x8\n 22673: u8 [a0 + 0x9] = a2\n 22676: u8 [a0] = a1\n 22678: a2 = a1 >> 0x38\n 22681: u8 [a0 + 0x7] = a2\n 22684: a2 = a1 >> 0x30\n 22687: u8 [a0 + 0x6] = a2\n 22690: a2 = a1 >> 0x28\n 22693: u8 [a0 + 0x5] = a2\n 22696: a2 = a1 >> 0x20\n 22699: u8 [a0 + 0x4] = a2\n 22702: a2 = a1 >> 0x18\n 22705: u8 [a0 + 0x3] = a2\n 22708: a2 = a1 >> 0x10\n 22711: u8 [a0 + 0x2] = a2\n 22714: a1 = a1 >> 0x8\n 22717: u8 [a0 + 0x1] = a1\n 22720: a0 = u64 [sp + 0x48]\n 22723: a1 = u64 [sp + 0x8]\n 22726: u64 [a0] = a1\n 22728: a1 = u64 [sp + 0x38]\n 22731: u64 [a0 + 0x18] = a1\n 22734: a1 = u64 [sp + 0x30]\n 22737: u64 [a0 + 0x8] = a1\n 22740: a1 = u64 [sp + 0x40]\n 22743: u64 [a0 + 0x10] = a1\n 22746: sp = s0 + 0xffffffffffffff10\n 22750: ra = u64 [sp + 0xe8]\n 22754: s0 = u64 [sp + 0xe0]\n 22758: s1 = u64 [sp + 0xd8]\n 22762: sp = sp + 0xf0\n 22766: ret\n      : @321 (gas: 1)\n 22768: trap\n      : @322 (gas: 8)\n 22769: u64 [sp + 128] = 0\n 22773: u64 [sp + 120] = 0\n 22776: u64 [sp + 112] = 0\n 22779: a0 = 0x4e487b7100000000\n 22789: a1 = sp + 0x70\n 22792: u64 [sp + 0x88] = a0\n 22796: a0 = 0\n 22798: ra = 290, jump @8\n      : @323 [@dyn 145] (gas: 7)\n 22804: u64 [sp + 104] = 0\n 22807: u64 [sp + 96] = 0\n 22810: u64 [sp + 80] = 0x41\n 22814: a0 = 0x4\n 22817: a1 = sp + 0x50\n 22820: u64 [sp + 88] = 0\n 22823: ra = 292, jump @8\n      : @324 [@dyn 146] (gas: 3)\n 22829: a1 = 0x24\n 22832: a0 = 0\n 22834: ra = 294, jump @0\n      : @325 [@dyn 147] (gas: 6)\n 22840: i32 a1 = a0 + 0\n 22842: a0 = 0x1\n 22845: a2 = 0x24\n 22848: ra = 0x128\n 22852: ecalli 11 // 'seal_return'\n 22854: fallthrough\n      : @326 [@dyn 148] (gas: 14)\n 22855: sp = sp + 0xffffffffffffffa0\n 22858: u64 [sp + 0x58] = ra\n 22861: u64 [sp + 0x50] = s0\n 22864: u64 [sp + 0x48] = s1\n 22867: s0 = sp + 0x60\n 22870: sp = sp & 0xfffffffffffffff0\n 22873: s1 = a0\n 22875: u64 [sp + 24] = 0\n 22878: u64 [sp + 16] = 0\n 22881: u64 [sp + 0] = 0x80\n 22885: a0 = sp + 0x20\n 22888: a1 = sp\n 22890: u64 [sp + 8] = 0\n 22893: ra = 298, jump @46\n      : @327 [@dyn 149] (gas: 14)\n 22899: a0 = u64 [sp + 0x30]\n 22902: a1 = u64 [sp + 0x38]\n 22905: a2 = u64 [sp + 0x20]\n 22908: a3 = u64 [sp + 0x28]\n 22911: u64 [s1 + 0x10] = a0\n 22914: u64 [s1 + 0x18] = a1\n 22917: u64 [s1] = a2\n 22919: u64 [s1 + 0x8] = a3\n 22922: sp = s0 + 0xffffffffffffffa0\n 22925: ra = u64 [sp + 0x58]\n 22928: s0 = u64 [sp + 0x50]\n 22931: s1 = u64 [sp + 0x48]\n 22934: sp = sp + 0x60\n 22937: ret\n      : @328 [@dyn 150] (gas: 27)\n 22939: a0 = u64 [sp + 0xb8]\n 22943: u64 [sp + 0x48] = a0\n 22946: s1 = u64 [sp + 0xb0]\n 22950: a0 = u64 [sp + 0xa8]\n 22954: u64 [sp + 0x70] = a0\n 22957: a0 = u64 [sp + 0xa0]\n 22961: u64 [sp + 0x78] = a0\n 22964: a0 = u64 [sp + 0x60]\n 22967: u64 [sp + 0xd8] = a0\n 22971: a0 = u64 [sp + 0x68]\n 22974: u64 [sp + 0xd0] = a0\n 22978: a0 = u64 [sp + 0x58]\n 22981: u64 [sp + 0xc8] = a0\n 22985: a0 = u64 [sp + 0x50]\n 22988: u64 [sp + 0xc0] = a0\n 22992: u64 [sp + 248] = 0\n 22996: u64 [sp + 240] = 0\n 23000: u64 [sp + 232] = 0\n 23004: u64 [sp + 224] = 0\n 23008: u32 [sp + 256] = 0x20\n 23013: i32 a1 = sp + 0xc0\n 23017: i32 a3 = sp + 0xe0\n 23021: i32 a4 = sp + 0x100\n 23025: a2 = 0xffffffffffffffff\n 23028: a0 = 0\n 23030: ecalli 6 // 'get_storage'\n 23032: fallthrough\n      : @329 (gas: 12)\n 23033: a0 = u64 [sp + 0x48]\n 23036: a1 = u64 [sp + 0x70]\n 23039: a0 = a0 | a1\n 23042: a1 = u64 [sp + 0x78]\n 23045: a1 = a1 | s1\n 23048: a1 = a1 | a0\n 23051: a1 = a1 >> 0x20\n 23054: u64 [sp + 0x38] = s1\n 23057: a0 = a0 | s1\n 23060: a0 = a0 << 0x20\n 23063: a0 = a0 | a1\n 23066: jump @341 if a0 != 0\n      : @330 (gas: 11)\n 23070: a0 = u64 [sp + 0xf0]\n 23074: a1 = u64 [sp + 0xe8]\n 23078: u64 [sp + 0x28] = a1\n 23081: a1 = u64 [sp + 0xe0]\n 23085: u64 [sp + 0x30] = a1\n 23088: a0 = a0 << 0x20\n 23091: s1 = a0 >> 0x20\n 23094: a0 = i32 [sp + 0x78]\n 23097: a1 = 0x20\n 23100: u64 [sp + 0x40] = a0\n 23103: ra = 302, jump @0\n      : @331 [@dyn 151] (gas: 83)\n 23109: a1 = reverse s1\n 23111: a2 = u64 [sp + 0x28]\n 23114: a2 = reverse a2\n 23116: a3 = u64 [sp + 0x30]\n 23119: a3 = reverse a3\n 23121: a4 = a3 >> 0x38\n 23124: u8 [a0 + 0x1f] = a4\n 23127: a4 = a3 >> 0x30\n 23130: u8 [a0 + 0x1e] = a4\n 23133: a4 = a3 >> 0x28\n 23136: u8 [a0 + 0x1d] = a4\n 23139: a4 = a3 >> 0x20\n 23142: u8 [a0 + 0x1c] = a4\n 23145: a4 = a3 >> 0x18\n 23148: u8 [a0 + 0x1b] = a4\n 23151: a4 = a3 >> 0x10\n 23154: u8 [a0 + 0x1a] = a4\n 23157: a4 = a3 >> 0x8\n 23160: u8 [a0 + 0x19] = a4\n 23163: u8 [a0 + 0x18] = a3\n 23166: u8 [a0 + 0x10] = a2\n 23169: u8 [a0 + 11] = 0\n 23172: u8 [a0 + 10] = 0\n 23175: u8 [a0 + 9] = 0\n 23178: u8 [a0 + 7] = 0\n 23181: u8 [a0 + 6] = 0\n 23184: u8 [a0 + 5] = 0\n 23187: u8 [a0 + 4] = 0\n 23190: u8 [a0 + 3] = 0\n 23193: u8 [a0 + 2] = 0\n 23196: u8 [a0 + 1] = 0\n 23199: u8 [a0 + 0] = 0\n 23201: a3 = a2 >> 0x38\n 23204: u8 [a0 + 0x17] = a3\n 23207: a3 = a2 >> 0x30\n 23210: u8 [a0 + 0x16] = a3\n 23213: a3 = a2 >> 0x28\n 23216: u8 [a0 + 0x15] = a3\n 23219: a3 = a2 >> 0x20\n 23222: u8 [a0 + 0x14] = a3\n 23225: a3 = a2 >> 0x18\n 23228: u8 [a0 + 0x13] = a3\n 23231: a3 = a2 >> 0x10\n 23234: u8 [a0 + 0x12] = a3\n 23237: a2 = a2 >> 0x8\n 23240: u8 [a0 + 0x11] = a2\n 23243: u8 [a0 + 0x8] = a1\n 23246: a2 = a1 >> 0x38\n 23249: u8 [a0 + 0xf] = a2\n 23252: a2 = a1 >> 0x30\n 23255: u8 [a0 + 0xe] = a2\n 23258: a2 = a1 >> 0x28\n 23261: u8 [a0 + 0xd] = a2\n 23264: a1 = a1 >> 0x20\n 23267: u8 [a0 + 0xc] = a1\n 23270: a0 = u64 [sp + 0x50]\n 23273: a0 = a0 + 0x1\n 23276: a1 = a0 <u 0x1\n 23279: a2 = u64 [sp + 0x58]\n 23282: a1 = a1 + a2\n 23285: a2 = a0 | a1\n 23288: a2 = a2 <u 0x1\n 23291: a3 = u64 [sp + 0x68]\n 23294: a2 = a2 + a3\n 23297: a3 = a2 <u a3\n 23300: a4 = u64 [sp + 0x60]\n 23303: a3 = a3 + a4\n 23306: u64 [sp + 0xd8] = a3\n 23310: u64 [sp + 0xd0] = a2\n 23314: u64 [sp + 0xc8] = a1\n 23318: u64 [sp + 0xc0] = a0\n 23322: u64 [sp + 248] = 0\n 23326: u64 [sp + 240] = 0\n 23330: u64 [sp + 232] = 0\n 23334: u64 [sp + 224] = 0\n 23338: u32 [sp + 256] = 0x20\n 23343: i32 a1 = sp + 0xc0\n 23347: i32 a3 = sp + 0xe0\n 23351: i32 a4 = sp + 0x100\n 23355: a2 = 0xffffffffffffffff\n 23358: a0 = 0\n 23360: ecalli 6 // 'get_storage'\n 23362: fallthrough\n      : @332 (gas: 13)\n 23363: a0 = u64 [sp + 0x48]\n 23366: a2 = u64 [sp + 0x38]\n 23369: a2 = a2 | a0\n 23372: a0 = 0x100000000\n 23382: u64 [sp + 0x28] = a0\n 23385: a0 = 0xffffffe0\n 23395: a1 = u64 [sp + 0x78]\n 23398: a0 = a1 <u a0\n 23401: a1 = u64 [sp + 0x70]\n 23404: a0 = 0 if a1 != 0\n 23406: u64 [sp + 0x30] = a2\n 23409: a0 = 0 if a2 != 0\n 23411: jump @341 if a0 == 0\n      : @333 (gas: 11)\n 23415: s1 = u64 [sp + 0xf8]\n 23419: a0 = u64 [sp + 0xf0]\n 23423: u64 [sp + 0x8] = a0\n 23426: a0 = u64 [sp + 0xe8]\n 23430: u64 [sp + 0x10] = a0\n 23433: a0 = u64 [sp + 0xe0]\n 23437: u64 [sp + 0x18] = a0\n 23440: a0 = u64 [sp + 0x40]\n 23443: i32 a0 = a0 + 0x20\n 23446: a1 = 0x20\n 23449: ra = 304, jump @0\n      : @334 [@dyn 152] (gas: 95)\n 23455: a1 = reverse s1\n 23457: a2 = u64 [sp + 0x8]\n 23460: a2 = reverse a2\n 23462: a3 = u64 [sp + 0x10]\n 23465: a3 = reverse a3\n 23467: a4 = u64 [sp + 0x18]\n 23470: a4 = reverse a4\n 23472: a5 = a4 >> 0x38\n 23475: u8 [a0 + 0x1f] = a5\n 23478: a5 = a4 >> 0x30\n 23481: u8 [a0 + 0x1e] = a5\n 23484: a5 = a4 >> 0x28\n 23487: u8 [a0 + 0x1d] = a5\n 23490: a5 = a4 >> 0x20\n 23493: u8 [a0 + 0x1c] = a5\n 23496: a5 = a4 >> 0x18\n 23499: u8 [a0 + 0x1b] = a5\n 23502: a5 = a4 >> 0x10\n 23505: u8 [a0 + 0x1a] = a5\n 23508: a5 = a4 >> 0x8\n 23511: u8 [a0 + 0x19] = a5\n 23514: u8 [a0 + 0x18] = a4\n 23517: u8 [a0 + 0x10] = a3\n 23520: a4 = a3 >> 0x38\n 23523: u8 [a0 + 0x17] = a4\n 23526: a4 = a3 >> 0x30\n 23529: u8 [a0 + 0x16] = a4\n 23532: a4 = a3 >> 0x28\n 23535: u8 [a0 + 0x15] = a4\n 23538: a4 = a3 >> 0x20\n 23541: u8 [a0 + 0x14] = a4\n 23544: a4 = a3 >> 0x18\n 23547: u8 [a0 + 0x13] = a4\n 23550: a4 = a3 >> 0x10\n 23553: u8 [a0 + 0x12] = a4\n 23556: a3 = a3 >> 0x8\n 23559: u8 [a0 + 0x11] = a3\n 23562: u8 [a0 + 0x8] = a2\n 23565: a3 = a2 >> 0x38\n 23568: u8 [a0 + 0xf] = a3\n 23571: a3 = a2 >> 0x30\n 23574: u8 [a0 + 0xe] = a3\n 23577: a3 = a2 >> 0x28\n 23580: u8 [a0 + 0xd] = a3\n 23583: a3 = a2 >> 0x20\n 23586: u8 [a0 + 0xc] = a3\n 23589: a3 = a2 >> 0x18\n 23592: u8 [a0 + 0xb] = a3\n 23595: a3 = a2 >> 0x10\n 23598: u8 [a0 + 0xa] = a3\n 23601: a2 = a2 >> 0x8\n 23604: u8 [a0 + 0x9] = a2\n 23607: u8 [a0] = a1\n 23609: a2 = a1 >> 0x38\n 23612: u8 [a0 + 0x7] = a2\n 23615: a2 = a1 >> 0x30\n 23618: u8 [a0 + 0x6] = a2\n 23621: a2 = a1 >> 0x28\n 23624: u8 [a0 + 0x5] = a2\n 23627: a2 = a1 >> 0x20\n 23630: u8 [a0 + 0x4] = a2\n 23633: a2 = a1 >> 0x18\n 23636: u8 [a0 + 0x3] = a2\n 23639: a2 = a1 >> 0x10\n 23642: u8 [a0 + 0x2] = a2\n 23645: a1 = a1 >> 0x8\n 23648: u8 [a0 + 0x1] = a1\n 23651: a1 = u64 [sp + 0x50]\n 23654: a0 = a1 + 0x2\n 23657: a1 = a0 <u a1\n 23660: a3 = u64 [sp + 0x58]\n 23663: a2 = a3 + a1\n 23666: a3 = a2 <u a3\n 23669: a3 = a1 if a1 == 0\n 23672: a1 = u64 [sp + 0x68]\n 23675: a3 = a3 + a1\n 23678: a1 = a3 <u a1\n 23681: a4 = u64 [sp + 0x60]\n 23684: a1 = a1 + a4\n 23687: u64 [sp + 0xd8] = a1\n 23691: u64 [sp + 0xd0] = a3\n 23695: u64 [sp + 0xc8] = a2\n 23699: u64 [sp + 0xc0] = a0\n 23703: u64 [sp + 248] = 0\n 23707: u64 [sp + 240] = 0\n 23711: u64 [sp + 232] = 0\n 23715: u64 [sp + 224] = 0\n 23719: u32 [sp + 256] = 0x20\n 23724: i32 a1 = sp + 0xc0\n 23728: i32 a3 = sp + 0xe0\n 23732: i32 a4 = sp + 0x100\n 23736: a2 = 0xffffffffffffffff\n 23739: a0 = 0\n 23741: ecalli 6 // 'get_storage'\n 23743: fallthrough\n      : @335 (gas: 9)\n 23744: a0 = u64 [sp + 0x28]\n 23747: a0 = a0 + 0xffffffffffffffc0\n 23750: a1 = u64 [sp + 0x78]\n 23753: a0 = a1 <u a0\n 23756: a1 = u64 [sp + 0x70]\n 23759: a0 = 0 if a1 != 0\n 23761: a1 = u64 [sp + 0x30]\n 23764: a0 = 0 if a1 != 0\n 23766: jump @341 if a0 == 0\n      : @336 (gas: 11)\n 23770: s1 = u64 [sp + 0xf8]\n 23774: a0 = u64 [sp + 0xf0]\n 23778: u64 [sp + 0x10] = a0\n 23781: a0 = u64 [sp + 0xe8]\n 23785: u64 [sp + 0x18] = a0\n 23788: a0 = u64 [sp + 0xe0]\n 23792: u64 [sp + 0x28] = a0\n 23795: a0 = u64 [sp + 0x40]\n 23798: i32 a0 = a0 + 0x40\n 23801: a1 = 0x20\n 23804: ra = 306, jump @0\n      : @337 [@dyn 153] (gas: 95)\n 23810: a1 = reverse s1\n 23812: a2 = u64 [sp + 0x10]\n 23815: a2 = reverse a2\n 23817: a3 = u64 [sp + 0x18]\n 23820: a3 = reverse a3\n 23822: a4 = u64 [sp + 0x28]\n 23825: a4 = reverse a4\n 23827: a5 = a4 >> 0x38\n 23830: u8 [a0 + 0x1f] = a5\n 23833: a5 = a4 >> 0x30\n 23836: u8 [a0 + 0x1e] = a5\n 23839: a5 = a4 >> 0x28\n 23842: u8 [a0 + 0x1d] = a5\n 23845: a5 = a4 >> 0x20\n 23848: u8 [a0 + 0x1c] = a5\n 23851: a5 = a4 >> 0x18\n 23854: u8 [a0 + 0x1b] = a5\n 23857: a5 = a4 >> 0x10\n 23860: u8 [a0 + 0x1a] = a5\n 23863: a5 = a4 >> 0x8\n 23866: u8 [a0 + 0x19] = a5\n 23869: u8 [a0 + 0x18] = a4\n 23872: u8 [a0 + 0x10] = a3\n 23875: a4 = a3 >> 0x38\n 23878: u8 [a0 + 0x17] = a4\n 23881: a4 = a3 >> 0x30\n 23884: u8 [a0 + 0x16] = a4\n 23887: a4 = a3 >> 0x28\n 23890: u8 [a0 + 0x15] = a4\n 23893: a4 = a3 >> 0x20\n 23896: u8 [a0 + 0x14] = a4\n 23899: a4 = a3 >> 0x18\n 23902: u8 [a0 + 0x13] = a4\n 23905: a4 = a3 >> 0x10\n 23908: u8 [a0 + 0x12] = a4\n 23911: a3 = a3 >> 0x8\n 23914: u8 [a0 + 0x11] = a3\n 23917: u8 [a0 + 0x8] = a2\n 23920: a3 = a2 >> 0x38\n 23923: u8 [a0 + 0xf] = a3\n 23926: a3 = a2 >> 0x30\n 23929: u8 [a0 + 0xe] = a3\n 23932: a3 = a2 >> 0x28\n 23935: u8 [a0 + 0xd] = a3\n 23938: a3 = a2 >> 0x20\n 23941: u8 [a0 + 0xc] = a3\n 23944: a3 = a2 >> 0x18\n 23947: u8 [a0 + 0xb] = a3\n 23950: a3 = a2 >> 0x10\n 23953: u8 [a0 + 0xa] = a3\n 23956: a2 = a2 >> 0x8\n 23959: u8 [a0 + 0x9] = a2\n 23962: u8 [a0] = a1\n 23964: a2 = a1 >> 0x38\n 23967: u8 [a0 + 0x7] = a2\n 23970: a2 = a1 >> 0x30\n 23973: u8 [a0 + 0x6] = a2\n 23976: a2 = a1 >> 0x28\n 23979: u8 [a0 + 0x5] = a2\n 23982: a2 = a1 >> 0x20\n 23985: u8 [a0 + 0x4] = a2\n 23988: a2 = a1 >> 0x18\n 23991: u8 [a0 + 0x3] = a2\n 23994: a2 = a1 >> 0x10\n 23997: u8 [a0 + 0x2] = a2\n 24000: a1 = a1 >> 0x8\n 24003: u8 [a0 + 0x1] = a1\n 24006: a1 = u64 [sp + 0x50]\n 24009: a0 = a1 + 0x3\n 24012: a1 = a0 <u a1\n 24015: a3 = u64 [sp + 0x58]\n 24018: a2 = a3 + a1\n 24021: a3 = a2 <u a3\n 24024: a3 = a1 if a1 == 0\n 24027: a1 = u64 [sp + 0x68]\n 24030: a3 = a3 + a1\n 24033: a1 = a3 <u a1\n 24036: a4 = u64 [sp + 0x60]\n 24039: a1 = a1 + a4\n 24042: u64 [sp + 0xd8] = a1\n 24046: u64 [sp + 0xd0] = a3\n 24050: u64 [sp + 0xc8] = a2\n 24054: u64 [sp + 0xc0] = a0\n 24058: u64 [sp + 248] = 0\n 24062: u64 [sp + 240] = 0\n 24066: u64 [sp + 232] = 0\n 24070: u64 [sp + 224] = 0\n 24074: u32 [sp + 256] = 0x20\n 24079: i32 a1 = sp + 0xc0\n 24083: i32 a3 = sp + 0xe0\n 24087: i32 a4 = sp + 0x100\n 24091: a2 = 0xffffffffffffffff\n 24094: a0 = 0\n 24096: ecalli 6 // 'get_storage'\n 24098: fallthrough\n      : @338 (gas: 8)\n 24099: a0 = 0xffffffa0\n 24109: a1 = u64 [sp + 0x78]\n 24112: a0 = a1 <u a0\n 24115: a1 = u64 [sp + 0x70]\n 24118: a0 = 0 if a1 != 0\n 24120: a1 = u64 [sp + 0x30]\n 24123: a0 = 0 if a1 != 0\n 24125: jump @341 if a0 == 0\n      : @339 (gas: 7)\n 24129: a0 = u64 [sp + 0xe0]\n 24133: a0 = a0 & 0xff\n 24137: s1 = a0 >u 0\n 24139: a0 = u64 [sp + 0x40]\n 24142: i32 a0 = a0 + 0x60\n 24145: a1 = 0x20\n 24148: ra = 308, jump @0\n      : @340 [@dyn 154] (gas: 47)\n 24154: u8 [a0 + 0x1f] = s1\n 24157: u8 [a0 + 30] = 0\n 24160: u8 [a0 + 29] = 0\n 24163: u8 [a0 + 28] = 0\n 24166: u8 [a0 + 27] = 0\n 24169: u8 [a0 + 26] = 0\n 24172: u8 [a0 + 25] = 0\n 24175: u8 [a0 + 24] = 0\n 24178: u8 [a0 + 23] = 0\n 24181: u8 [a0 + 22] = 0\n 24184: u8 [a0 + 21] = 0\n 24187: u8 [a0 + 20] = 0\n 24190: u8 [a0 + 19] = 0\n 24193: u8 [a0 + 18] = 0\n 24196: u8 [a0 + 17] = 0\n 24199: u8 [a0 + 16] = 0\n 24202: u8 [a0 + 15] = 0\n 24205: u8 [a0 + 14] = 0\n 24208: u8 [a0 + 13] = 0\n 24211: u8 [a0 + 12] = 0\n 24214: u8 [a0 + 11] = 0\n 24217: u8 [a0 + 10] = 0\n 24220: u8 [a0 + 9] = 0\n 24223: u8 [a0 + 8] = 0\n 24226: u8 [a0 + 7] = 0\n 24229: u8 [a0 + 6] = 0\n 24232: u8 [a0 + 5] = 0\n 24235: u8 [a0 + 4] = 0\n 24238: u8 [a0 + 3] = 0\n 24241: u8 [a0 + 2] = 0\n 24244: u8 [a0 + 1] = 0\n 24247: u8 [a0 + 0] = 0\n 24249: a0 = u64 [sp + 0x20]\n 24252: a1 = u64 [sp + 0x78]\n 24255: u64 [a0] = a1\n 24257: a1 = u64 [sp + 0x48]\n 24260: u64 [a0 + 0x18] = a1\n 24263: a1 = u64 [sp + 0x70]\n 24266: u64 [a0 + 0x8] = a1\n 24269: a1 = u64 [sp + 0x38]\n 24272: u64 [a0 + 0x10] = a1\n 24275: sp = s0 + 0xfffffffffffffee0\n 24279: ra = u64 [sp + 0x118]\n 24283: s0 = u64 [sp + 0x110]\n 24287: s1 = u64 [sp + 0x108]\n 24291: sp = sp + 0x120\n 24295: ret\n      : @341 (gas: 1)\n 24297: trap\n      : @342 [@dyn 155] (gas: 11)\n 24298: a0 = u64 [sp + 0x138]\n 24302: u64 [sp + 0x38] = a0\n 24305: a0 = u64 [sp + 0x130]\n 24309: u64 [sp + 0x30] = a0\n 24312: a0 = u64 [sp + 0x128]\n 24316: u64 [sp + 0x28] = a0\n 24319: a0 = u64 [sp + 0x120]\n 24323: u64 [sp + 0x20] = a0\n 24326: a1 = 0x20\n 24329: a0 = 0\n 24331: ra = 312, jump @0\n      : @343 [@dyn 156] (gas: 70)\n 24337: a1 = u64 [sp + 0x88]\n 24341: a1 = reverse a1\n 24343: a2 = u64 [sp + 0x90]\n 24347: a2 = reverse a2\n 24349: a3 = u64 [sp + 0x98]\n 24353: a3 = reverse a3\n 24355: a4 = reverse s1\n 24357: a5 = a4 >> 0x38\n 24360: u8 [a0 + 0x1f] = a5\n 24363: a5 = a4 >> 0x30\n 24366: u8 [a0 + 0x1e] = a5\n 24369: a5 = a4 >> 0x28\n 24372: u8 [a0 + 0x1d] = a5\n 24375: a5 = a4 >> 0x20\n 24378: u8 [a0 + 0x1c] = a5\n 24381: a5 = a4 >> 0x18\n 24384: u8 [a0 + 0x1b] = a5\n 24387: a5 = a4 >> 0x10\n 24390: u8 [a0 + 0x1a] = a5\n 24393: a5 = a4 >> 0x8\n 24396: u8 [a0 + 0x19] = a5\n 24399: u8 [a0 + 0x18] = a4\n 24402: a4 = a3 >> 0x38\n 24405: u8 [a0 + 0x17] = a4\n 24408: a4 = a3 >> 0x30\n 24411: u8 [a0 + 0x16] = a4\n 24414: a4 = a3 >> 0x28\n 24417: u8 [a0 + 0x15] = a4\n 24420: a4 = a3 >> 0x20\n 24423: u8 [a0 + 0x14] = a4\n 24426: a4 = a3 >> 0x18\n 24429: u8 [a0 + 0x13] = a4\n 24432: a4 = a3 >> 0x10\n 24435: u8 [a0 + 0x12] = a4\n 24438: a4 = a3 >> 0x8\n 24441: u8 [a0 + 0x11] = a4\n 24444: u8 [a0 + 0x10] = a3\n 24447: a3 = a2 >> 0x38\n 24450: u8 [a0 + 0xf] = a3\n 24453: a3 = a2 >> 0x30\n 24456: u8 [a0 + 0xe] = a3\n 24459: a3 = a2 >> 0x28\n 24462: u8 [a0 + 0xd] = a3\n 24465: a3 = a2 >> 0x20\n 24468: u8 [a0 + 0xc] = a3\n 24471: a3 = a2 >> 0x18\n 24474: u8 [a0 + 0xb] = a3\n 24477: a3 = a2 >> 0x10\n 24480: u8 [a0 + 0xa] = a3\n 24483: a3 = a2 >> 0x8\n 24486: u8 [a0 + 0x9] = a3\n 24489: u8 [a0 + 0x8] = a2\n 24492: a2 = a1 >> 0x38\n 24495: u8 [a0 + 0x7] = a2\n 24498: a2 = a1 >> 0x30\n 24501: u8 [a0 + 0x6] = a2\n 24504: a2 = a1 >> 0x28\n 24507: u8 [a0 + 0x5] = a2\n 24510: a2 = a1 >> 0x20\n 24513: u8 [a0 + 0x4] = a2\n 24516: a2 = a1 >> 0x18\n 24519: u8 [a0 + 0x3] = a2\n 24522: a2 = a1 >> 0x10\n 24525: u8 [a0 + 0x2] = a2\n 24528: a2 = a1 >> 0x8\n 24531: u8 [a0 + 0x1] = a2\n 24534: u8 [a0] = a1\n 24536: a1 = 0x20\n 24539: a0 = 0\n 24541: ra = 314, jump @0\n      : @344 [@dyn 157] (gas: 5)\n 24547: i32 a0 = a0 + 0\n 24549: i32 a2 = sp + 0x180\n 24553: a1 = 0x20\n 24556: ecalli 7 // 'hash_keccak_256'\n 24558: fallthrough\n      : @345 (gas: 8)\n 24559: a0 = u64 [sp + 0xb8]\n 24563: a2 = u64 [sp + 0xb0]\n 24567: a0 = a0 | a2\n 24570: a1 = u64 [sp + 0xa0]\n 24574: a2 = u64 [sp + 0xa8]\n 24578: a1 = a1 | a2\n 24581: a0 = a0 | a1\n 24584: jump @351 if a0 == 0\n      : @346 (gas: 143)\n 24588: a1 = u64 [sp + 0x20]\n 24591: a2 = a1 + 0x20\n 24594: a0 = a2 <u a1\n 24597: t0 = a1\n 24599: a1 = u64 [sp + 0x28]\n 24602: a5 = a1 + a0\n 24605: t2 = a5 <u a1\n 24608: s1 = a1\n 24610: t2 = a0 if a0 == 0\n 24613: ra = u64 [sp + 0x30]\n 24616: t2 = t2 + ra\n 24619: t1 = t2 <u ra\n 24622: a0 = u64 [sp + 0x38]\n 24625: t1 = t1 + a0\n 24628: a0 = t2 >u 0\n 24630: a1 = t1 >u 0\n 24632: a1 = a0 if t1 == 0\n 24635: a0 = 0x100000000\n 24645: u64 [sp + 0x90] = a2\n 24649: a4 = a2\n 24651: a4 = a0 if a1 == 0\n 24654: a3 = a2\n 24656: u64 [sp + 0x88] = a5\n 24660: a3 = a0 if a5 == 0\n 24663: a0 = maxu(a2, a0)\n 24666: a0 = a3 if a5 != 0\n 24669: a3 = t2 | t1\n 24672: a0 = a4 if a3 != 0\n 24675: a2 = a5\n 24677: a2 = 0 if a1 == 0\n 24679: a2 = a5 if a3 == 0\n 24682: a3 = s1 ^ 0xffffffffffffffff\n 24685: a1 = a3 + a2\n 24688: a2 = t0 ^ 0xffffffffffffffff\n 24691: a0 = a0 + a2\n 24694: a2 = a0 <u a2\n 24697: a1 = a1 + a2\n 24700: a4 = a1 ^ a3\n 24703: t0 = a1 <u a3\n 24706: t0 = a2 if a4 == 0\n 24709: u64 [sp + 0x80] = t2\n 24713: a3 = t2\n 24715: u64 [sp + 0x98] = t1\n 24719: a3 = 0 if t1 == 0\n 24721: a3 = t2 if t1 == 0\n 24724: ra = ra ^ 0xffffffffffffffff\n 24727: t1 = ra + a3\n 24730: t0 = t0 + t1\n 24733: a2 = t0 << 0x3b\n 24736: s1 = a1 >> 0x5\n 24739: a2 = a2 | s1\n 24742: u64 [sp + 0x70] = a2\n 24745: a1 = a1 << 0x3b\n 24748: a0 = a0 >> 0x5\n 24751: s1 = a0 | a1\n 24754: u64 [sp + 0x78] = s1\n 24757: a4 = u64 [sp + 0xa8]\n 24761: a0 = a4 <u 0x1\n 24764: a3 = u64 [sp + 0xb0]\n 24768: a5 = a3 - a0\n 24771: t2 = a4 + 0xffffffffffffffff\n 24774: a0 = a5 ^ a2\n 24777: a1 = a5 <u a2\n 24780: a2 = t2 <u s1\n 24783: a2 = a1 if a0 != 0\n 24786: a0 = a4 | a3\n 24789: a0 = a0 <u 0x1\n 24792: a4 = u64 [sp + 0xa0]\n 24796: a1 = a4 <u a0\n 24799: a3 = u64 [sp + 0xb8]\n 24803: a1 = a3 - a1\n 24806: a0 = a4 - a0\n 24809: a3 = t1 <u ra\n 24812: a4 = u64 [sp + 0x38]\n 24815: ra = a4 ^ 0xffffffffffffffff\n 24818: a4 = u64 [sp + 0x98]\n 24822: ra = ra + a4\n 24825: a3 = a3 + ra\n 24828: s1 = t0 <u t1\n 24831: s1 = s1 + a3\n 24834: t0 = t0 >> 0x5\n 24837: a3 = s1 << 0x3b\n 24840: ra = t0 | a3\n 24843: s1 = s1 >> 0x5\n 24846: t0 = a0 <u ra\n 24849: t1 = a1 ^ s1\n 24852: a3 = a1 <u s1\n 24855: a3 = t0 if t1 == 0\n 24858: a4 = a0 ^ ra\n 24861: a4 = a4 | t1\n 24864: a3 = a2 if a4 == 0\n 24867: a1 = s1 if a3 == 0\n 24870: a0 = ra if a3 == 0\n 24873: a2 = u64 [sp + 0x70]\n 24876: a5 = a2 if a3 == 0\n 24879: a2 = u64 [sp + 0x190]\n 24883: a4 = u64 [sp + 0x78]\n 24886: t2 = a4 if a3 == 0\n 24889: a3 = t2 >> 0x3b\n 24892: a4 = a5 << 0x5\n 24895: t0 = a4 | a3\n 24898: a5 = a5 >> 0x3b\n 24901: a4 = a0 << 0x5\n 24904: a3 = a4 | a5\n 24907: a5 = u64 [sp + 0x180]\n 24911: a0 = a0 >> 0x3b\n 24914: a1 = a1 << 0x5\n 24917: a0 = a0 | a1\n 24920: a1 = u64 [sp + 0x188]\n 24924: a4 = u64 [sp + 0x98]\n 24928: a0 = a0 + a4\n 24931: s1 = u64 [sp + 0x198]\n 24935: a5 = reverse a5\n 24937: t1 = reverse a1\n 24939: ra = reverse a2\n 24941: a4 = reverse s1\n 24943: t2 = t2 << 0x5\n 24946: a1 = u64 [sp + 0x80]\n 24950: s1 = a1 + a3\n 24953: a1 = s1 <u a1\n 24956: a0 = a0 + a1\n 24959: a2 = u64 [sp + 0x88]\n 24963: a3 = a2 + t0\n 24966: a1 = u64 [sp + 0x90]\n 24970: t2 = t2 + a1\n 24973: u64 [sp + 0x58] = t2\n 24976: a1 = t2 <u a1\n 24979: a3 = a3 + a1\n 24982: t0 = a3 ^ a2\n 24985: u64 [sp + 0x50] = a3\n 24988: a3 = a3 <u a2\n 24991: a3 = a1 if t0 == 0\n 24994: a3 = a3 + s1\n 24997: u64 [sp + 0x48] = a3\n 25000: a1 = a3 <u s1\n 25003: a0 = a0 + a1\n 25006: u64 [sp + 0x40] = a0\n 25009: t0 = u64 [sp + 0x20]\n 25012: a1 = u64 [sp + 0x28]\n 25015: a2 = u64 [sp + 0x30]\n 25018: a0 = u64 [sp + 0x38]\n 25021: u64 [sp + 0xb8] = a0\n 25025: fallthrough\n      : @347 (gas: 47)\n 25026: a0 = a2\n 25028: a3 = t0 + 0x20\n 25031: u64 [sp + 0xa0] = a3\n 25035: a2 = a3 <u t0\n 25038: a3 = a1 + a2\n 25041: u64 [sp + 0xb0] = a3\n 25045: s1 = a3 <u a1\n 25048: s1 = a2 if a2 == 0\n 25051: s1 = s1 + a0\n 25054: u64 [sp + 0xa8] = s1\n 25058: a0 = s1 <u a0\n 25061: s1 = u64 [sp + 0xb8]\n 25065: s1 = s1 + a0\n 25068: u64 [sp + 0x80] = a4\n 25072: u64 [sp + 0xc0] = a4\n 25076: u64 [sp + 0x88] = ra\n 25080: u64 [sp + 0xc8] = ra\n 25084: u64 [sp + 0x90] = t1\n 25088: u64 [sp + 0xd0] = t1\n 25092: a0 = sp + 0xe0\n 25096: a1 = sp + 0xc0\n 25100: u64 [sp + 0x98] = a5\n 25104: u64 [sp + 0xd8] = a5\n 25108: ra = 0x13c\n 25112: sp = sp + 0xfffffffffffffee0\n 25116: u64 [sp + 0x118] = ra\n 25120: u64 [sp + 0x110] = s0\n 25124: u64 [sp + 0x108] = s1\n 25128: s0 = sp + 0x120\n 25132: sp = sp & 0xffffffffffffffe0\n 25135: a2 = u64 [a1]\n 25137: u64 [sp + 0x50] = a2\n 25140: a2 = u64 [a1 + 0x8]\n 25143: u64 [sp + 0x58] = a2\n 25146: a2 = u64 [a1 + 0x10]\n 25149: u64 [sp + 0x68] = a2\n 25152: a1 = u64 [a1 + 0x18]\n 25155: u64 [sp + 0x60] = a1\n 25158: u64 [sp + 0x20] = a0\n 25161: u64 [sp + 152] = 0\n 25165: u64 [sp + 144] = 0\n 25169: u64 [sp + 128] = 0x80\n 25175: a0 = sp + 0xa0\n 25179: a1 = sp + 0x80\n 25183: u64 [sp + 136] = 0\n 25187: ra = 0x12c\n 25191: jump @46\n      : @348 [@dyn 158] (gas: 12)\n 25194: a2 = u64 [sp + 0xa0]\n 25198: a3 = u64 [sp + 0xa8]\n 25202: a0 = a2 | a3\n 25205: u64 [sp + 0xb8] = s1\n 25209: a1 = u64 [sp + 0xb0]\n 25213: a1 = a1 | s1\n 25216: a0 = a0 | a1\n 25219: a0 = a0 >> 0x20\n 25222: a1 = a1 | a3\n 25225: a1 = a1 << 0x20\n 25228: a0 = a0 | a1\n 25231: jump @352 if a0 != 0\n      : @349 (gas: 12)\n 25235: a0 = u64 [sp + 0xf8]\n 25239: u64 [sp + 0x70] = a0\n 25242: a0 = u64 [sp + 0xf0]\n 25246: u64 [sp + 0x78] = a0\n 25249: a0 = u64 [sp + 0xe8]\n 25253: u64 [sp + 0x68] = a0\n 25256: a0 = u64 [sp + 0xe0]\n 25260: u64 [sp + 0x60] = a0\n 25263: i32 a0 = a2 + 0\n 25265: a1 = 0x20\n 25268: s1 = a2\n 25270: ra = 318, jump @0\n      : @350 [@dyn 159] (gas: 99)\n 25276: t0 = s1\n 25278: a1 = u64 [sp + 0x60]\n 25281: a1 = reverse a1\n 25283: a2 = a1 >> 0x38\n 25286: u8 [a0 + 0x1f] = a2\n 25289: a2 = a1 >> 0x30\n 25292: u8 [a0 + 0x1e] = a2\n 25295: a2 = a1 >> 0x28\n 25298: u8 [a0 + 0x1d] = a2\n 25301: a2 = a1 >> 0x20\n 25304: u8 [a0 + 0x1c] = a2\n 25307: a2 = a1 >> 0x18\n 25310: u8 [a0 + 0x1b] = a2\n 25313: a2 = a1 >> 0x10\n 25316: u8 [a0 + 0x1a] = a2\n 25319: a2 = a1 >> 0x8\n 25322: u8 [a0 + 0x19] = a2\n 25325: a2 = u64 [sp + 0x68]\n 25328: a2 = reverse a2\n 25330: u8 [a0 + 0x18] = a1\n 25333: a1 = a2 >> 0x38\n 25336: u8 [a0 + 0x17] = a1\n 25339: a1 = a2 >> 0x30\n 25342: u8 [a0 + 0x16] = a1\n 25345: a1 = a2 >> 0x28\n 25348: u8 [a0 + 0x15] = a1\n 25351: a1 = a2 >> 0x20\n 25354: u8 [a0 + 0x14] = a1\n 25357: a1 = a2 >> 0x18\n 25360: u8 [a0 + 0x13] = a1\n 25363: a1 = a2 >> 0x10\n 25366: u8 [a0 + 0x12] = a1\n 25369: a1 = u64 [sp + 0x70]\n 25372: a1 = reverse a1\n 25374: a3 = u64 [sp + 0x78]\n 25377: a3 = reverse a3\n 25379: u8 [a0 + 0x10] = a2\n 25382: a2 = a2 >> 0x8\n 25385: u8 [a0 + 0x11] = a2\n 25388: u8 [a0 + 0x8] = a3\n 25391: a2 = a3 >> 0x38\n 25394: u8 [a0 + 0xf] = a2\n 25397: a2 = a3 >> 0x30\n 25400: u8 [a0 + 0xe] = a2\n 25403: a2 = a3 >> 0x28\n 25406: u8 [a0 + 0xd] = a2\n 25409: a2 = a3 >> 0x20\n 25412: u8 [a0 + 0xc] = a2\n 25415: a2 = a3 >> 0x18\n 25418: u8 [a0 + 0xb] = a2\n 25421: a2 = a3 >> 0x10\n 25424: u8 [a0 + 0xa] = a2\n 25427: a3 = a3 >> 0x8\n 25430: u8 [a0 + 0x9] = a3\n 25433: u8 [a0] = a1\n 25435: a2 = a1 >> 0x38\n 25438: u8 [a0 + 0x7] = a2\n 25441: a2 = a1 >> 0x30\n 25444: u8 [a0 + 0x6] = a2\n 25447: a2 = a1 >> 0x28\n 25450: u8 [a0 + 0x5] = a2\n 25453: a2 = a1 >> 0x20\n 25456: u8 [a0 + 0x4] = a2\n 25459: a2 = a1 >> 0x18\n 25462: u8 [a0 + 0x3] = a2\n 25465: a2 = a1 >> 0x10\n 25468: u8 [a0 + 0x2] = a2\n 25471: a1 = a1 >> 0x8\n 25474: u8 [a0 + 0x1] = a1\n 25477: a1 = u64 [sp + 0x80]\n 25481: t1 = a1 + 0x4\n 25484: a1 = t1 <u a1\n 25487: a3 = u64 [sp + 0x88]\n 25491: a0 = a3 + a1\n 25494: a3 = a0 <u a3\n 25497: a3 = a1 if a1 == 0\n 25500: a1 = u64 [sp + 0x58]\n 25503: a1 = a1 ^ s1\n 25506: a4 = u64 [sp + 0x48]\n 25509: a2 = u64 [sp + 0xa8]\n 25513: a4 = a4 ^ a2\n 25516: t2 = a1 | a4\n 25519: a4 = u64 [sp + 0x50]\n 25522: a1 = u64 [sp + 0xb0]\n 25526: a4 = a4 ^ a1\n 25529: a5 = u64 [sp + 0x40]\n 25532: s1 = u64 [sp + 0xb8]\n 25536: a5 = a5 ^ s1\n 25539: a4 = a4 | a5\n 25542: s1 = t2 | a4\n 25545: a4 = u64 [sp + 0x90]\n 25549: a3 = a3 + a4\n 25552: a4 = a3 <u a4\n 25555: a5 = u64 [sp + 0x98]\n 25559: a5 = a5 + a4\n 25562: a4 = t1\n 25564: ra = a0\n 25566: t1 = a3\n 25568: jump @347 if s1 != 0\n      : @351 (gas: 15)\n 25572: a0 = u64 [sp + 0x18]\n 25575: a1 = u64 [sp + 0x20]\n 25578: u64 [a0] = a1\n 25580: a1 = u64 [sp + 0x28]\n 25583: u64 [a0 + 0x8] = a1\n 25586: a1 = u64 [sp + 0x30]\n 25589: u64 [a0 + 0x10] = a1\n 25592: a1 = u64 [sp + 0x38]\n 25595: u64 [a0 + 0x18] = a1\n 25598: sp = s0 + 0xfffffffffffffe40\n 25602: ra = u64 [sp + 0x1b8]\n 25606: s0 = u64 [sp + 0x1b0]\n 25610: s1 = u64 [sp + 0x1a8]\n 25614: sp = sp + 0x1c0\n 25618: ret\n      : @352 (gas: 1)\n 25620: trap\n      : @353 (gas: 17)\n 25621: sp = sp + 0xffffffffffffffa0\n 25624: u64 [sp + 0x58] = ra\n 25627: u64 [sp + 0x50] = s0\n 25630: u64 [sp + 0x48] = s1\n 25633: a3 = u64 [a1 + 0x18]\n 25636: a4 = u64 [a1 + 0x10]\n 25639: a5 = u64 [a1 + 0x8]\n 25642: s1 = u64 [a1]\n 25644: a1 = a5 | a3\n 25647: a2 = s1 | a4\n 25650: a2 = a2 | a1\n 25653: a2 = a2 >> 0x20\n 25656: a1 = a1 | a4\n 25659: a1 = a1 << 0x20\n 25662: a1 = a1 | a2\n 25665: u64 [sp + 0x28] = a0\n 25668: jump @360 if a1 != 0\n      : @354 (gas: 19)\n 25672: a0 = s1 + 0x20\n 25675: u64 [sp + 0x30] = a0\n 25678: a0 = a0 <u s1\n 25681: a1 = a5 + a0\n 25684: u64 [sp + 0x40] = a1\n 25687: u64 [sp + 0x8] = a5\n 25690: s0 = a1 <u a5\n 25693: s0 = a0 if a0 == 0\n 25696: s0 = s0 + a4\n 25699: u64 [sp + 0x10] = a4\n 25702: a0 = s0 <u a4\n 25705: u64 [sp + 0x18] = a3\n 25708: a0 = a0 + a3\n 25711: u64 [sp + 0x38] = a0\n 25714: u64 [sp] = s1\n 25716: i32 a0 = s1 + 0\n 25718: a1 = 0x20\n 25721: s1 = 0x20\n 25724: ra = 320, jump @0\n      : @355 [@dyn 160] (gas: 45)\n 25730: u8 [a0 + 0x1f] = s1\n 25733: a1 = u64 [sp + 0x30]\n 25736: s1 = a1\n 25738: a1 = a1 | s0\n 25741: a2 = u64 [sp + 0x40]\n 25744: a4 = u64 [sp + 0x38]\n 25747: a2 = a2 | a4\n 25750: a1 = a1 | a2\n 25753: a1 = a1 >> 0x20\n 25756: u64 [sp + 0x20] = s0\n 25759: a2 = a2 | s0\n 25762: a2 = a2 << 0x20\n 25765: a1 = a1 | a2\n 25768: u8 [a0 + 30] = 0\n 25771: u8 [a0 + 29] = 0\n 25774: u8 [a0 + 28] = 0\n 25777: u8 [a0 + 27] = 0\n 25780: u8 [a0 + 26] = 0\n 25783: u8 [a0 + 25] = 0\n 25786: u8 [a0 + 24] = 0\n 25789: u8 [a0 + 23] = 0\n 25792: u8 [a0 + 22] = 0\n 25795: u8 [a0 + 21] = 0\n 25798: u8 [a0 + 20] = 0\n 25801: u8 [a0 + 19] = 0\n 25804: u8 [a0 + 18] = 0\n 25807: u8 [a0 + 17] = 0\n 25810: u8 [a0 + 16] = 0\n 25813: u8 [a0 + 15] = 0\n 25816: u8 [a0 + 14] = 0\n 25819: u8 [a0 + 13] = 0\n 25822: u8 [a0 + 12] = 0\n 25825: u8 [a0 + 11] = 0\n 25828: u8 [a0 + 10] = 0\n 25831: u8 [a0 + 9] = 0\n 25834: u8 [a0 + 8] = 0\n 25837: u8 [a0 + 7] = 0\n 25840: u8 [a0 + 6] = 0\n 25843: u8 [a0 + 5] = 0\n 25846: u8 [a0 + 4] = 0\n 25849: u8 [a0 + 3] = 0\n 25852: u8 [a0 + 2] = 0\n 25855: u8 [a0 + 1] = 0\n 25858: u8 [a0 + 0] = 0\n 25860: jump @360 if a1 != 0\n      : @356 (gas: 4)\n 25864: i32 s0 = s1 + 0\n 25866: a1 = 0x20\n 25869: a0 = s0\n 25871: ra = 322, jump @0\n      : @357 [@dyn 161] (gas: 41)\n 25877: u8 [a0 + 31] = 0x12\n 25881: u8 [a0 + 30] = 0\n 25884: u8 [a0 + 29] = 0\n 25887: u8 [a0 + 28] = 0\n 25890: u8 [a0 + 27] = 0\n 25893: u8 [a0 + 26] = 0\n 25896: u8 [a0 + 25] = 0\n 25899: u8 [a0 + 24] = 0\n 25902: u8 [a0 + 23] = 0\n 25905: u8 [a0 + 22] = 0\n 25908: u8 [a0 + 21] = 0\n 25911: u8 [a0 + 20] = 0\n 25914: u8 [a0 + 19] = 0\n 25917: u8 [a0 + 18] = 0\n 25920: u8 [a0 + 17] = 0\n 25923: u8 [a0 + 16] = 0\n 25926: u8 [a0 + 15] = 0\n 25929: u8 [a0 + 14] = 0\n 25932: u8 [a0 + 13] = 0\n 25935: u8 [a0 + 12] = 0\n 25938: u8 [a0 + 11] = 0\n 25941: u8 [a0 + 10] = 0\n 25944: u8 [a0 + 9] = 0\n 25947: u8 [a0 + 8] = 0\n 25950: u8 [a0 + 7] = 0\n 25953: u8 [a0 + 6] = 0\n 25956: u8 [a0 + 5] = 0\n 25959: u8 [a0 + 4] = 0\n 25962: u8 [a0 + 3] = 0\n 25965: u8 [a0 + 2] = 0\n 25968: u8 [a0 + 1] = 0\n 25971: a1 = u64 [sp + 0x20]\n 25974: a2 = u64 [sp + 0x38]\n 25977: a1 = a1 | a2\n 25980: a2 = 0xffffffe0\n 25990: a2 = s1 <u a2\n 25993: a3 = u64 [sp + 0x40]\n 25996: a2 = 0 if a3 != 0\n 25998: a2 = 0 if a1 != 0\n 26000: u8 [a0 + 0] = 0\n 26002: jump @360 if a2 == 0\n      : @358 (gas: 3)\n 26006: i32 a0 = s0 + 0x20\n 26009: a1 = 0x20\n 26012: ra = 324, jump @0\n      : @359 [@dyn 162] (gas: 55)\n 26018: u8 [a0 + 31] = 0\n 26021: u8 [a0 + 30] = 0\n 26024: u8 [a0 + 29] = 0\n 26027: u8 [a0 + 28] = 0\n 26030: u8 [a0 + 27] = 0\n 26033: u8 [a0 + 26] = 0\n 26036: u8 [a0 + 25] = 0\n 26039: u8 [a0 + 24] = 0\n 26042: u8 [a0 + 23] = 0\n 26045: u8 [a0 + 22] = 0\n 26048: u8 [a0 + 21] = 0\n 26051: u8 [a0 + 20] = 0\n 26054: u8 [a0 + 19] = 0\n 26057: u8 [a0 + 18] = 0\n 26060: u8 [a0 + 17] = 0x44\n 26064: u8 [a0 + 16] = 0x49\n 26068: u8 [a0 + 15] = 0x20\n 26072: u8 [a0 + 14] = 0x67\n 26076: u8 [a0 + 13] = 0x6e\n 26080: u8 [a0 + 12] = 0x69\n 26084: u8 [a0 + 11] = 0x74\n 26088: u8 [a0 + 10] = 0x73\n 26092: u8 [a0 + 9] = 0x69\n 26096: u8 [a0 + 8] = 0x6c\n 26100: u8 [a0 + 7] = 0x20\n 26104: a5 = 0x64\n 26107: u8 [a0 + 0x6] = a5\n 26110: u8 [a0 + 5] = 0x69\n 26114: u8 [a0 + 4] = 0x6c\n 26118: u8 [a0 + 3] = 0x61\n 26122: u8 [a0 + 2] = 0x76\n 26126: u8 [a0 + 1] = 0x6e\n 26130: u8 [a0 + 0] = 0x49\n 26133: a1 = u64 [sp]\n 26135: a0 = a1 + 0x60\n 26138: a1 = a0 <u a1\n 26141: a3 = u64 [sp + 0x8]\n 26144: a2 = a3 + a1\n 26147: a3 = a2 <u a3\n 26150: a3 = a1 if a1 == 0\n 26153: a1 = u64 [sp + 0x10]\n 26156: a3 = a3 + a1\n 26159: a1 = a3 <u a1\n 26162: a4 = u64 [sp + 0x18]\n 26165: a1 = a1 + a4\n 26168: a4 = u64 [sp + 0x28]\n 26171: u64 [a4] = a0\n 26173: u64 [a4 + 0x8] = a2\n 26176: u64 [a4 + 0x10] = a3\n 26179: u64 [a4 + 0x18] = a1\n 26182: ra = u64 [sp + 0x58]\n 26185: s0 = u64 [sp + 0x50]\n 26188: s1 = u64 [sp + 0x48]\n 26191: sp = sp + 0x60\n 26194: ret\n      : @360 (gas: 1)\n 26196: trap\n      : @361 (gas: 17)\n 26197: sp = sp + 0xffffffffffffffa0\n 26200: u64 [sp + 0x58] = ra\n 26203: u64 [sp + 0x50] = s0\n 26206: u64 [sp + 0x48] = s1\n 26209: a3 = u64 [a1 + 0x18]\n 26212: a4 = u64 [a1 + 0x10]\n 26215: a5 = u64 [a1 + 0x8]\n 26218: s1 = u64 [a1]\n 26220: a1 = a5 | a3\n 26223: a2 = s1 | a4\n 26226: a2 = a2 | a1\n 26229: a2 = a2 >> 0x20\n 26232: a1 = a1 | a4\n 26235: a1 = a1 << 0x20\n 26238: a1 = a1 | a2\n 26241: u64 [sp + 0x28] = a0\n 26244: jump @368 if a1 != 0\n      : @362 (gas: 19)\n 26248: a0 = s1 + 0x20\n 26251: u64 [sp + 0x30] = a0\n 26254: a0 = a0 <u s1\n 26257: a1 = a5 + a0\n 26260: u64 [sp + 0x40] = a1\n 26263: u64 [sp + 0x8] = a5\n 26266: s0 = a1 <u a5\n 26269: s0 = a0 if a0 == 0\n 26272: s0 = s0 + a4\n 26275: u64 [sp + 0x10] = a4\n 26278: a0 = s0 <u a4\n 26281: u64 [sp + 0x18] = a3\n 26284: a0 = a0 + a3\n 26287: u64 [sp + 0x38] = a0\n 26290: u64 [sp] = s1\n 26292: i32 a0 = s1 + 0\n 26294: a1 = 0x20\n 26297: s1 = 0x20\n 26300: ra = 326, jump @0\n      : @363 [@dyn 163] (gas: 45)\n 26306: u8 [a0 + 0x1f] = s1\n 26309: a1 = u64 [sp + 0x30]\n 26312: s1 = a1\n 26314: a1 = a1 | s0\n 26317: a2 = u64 [sp + 0x40]\n 26320: a4 = u64 [sp + 0x38]\n 26323: a2 = a2 | a4\n 26326: a1 = a1 | a2\n 26329: a1 = a1 >> 0x20\n 26332: u64 [sp + 0x20] = s0\n 26335: a2 = a2 | s0\n 26338: a2 = a2 << 0x20\n 26341: a1 = a1 | a2\n 26344: u8 [a0 + 30] = 0\n 26347: u8 [a0 + 29] = 0\n 26350: u8 [a0 + 28] = 0\n 26353: u8 [a0 + 27] = 0\n 26356: u8 [a0 + 26] = 0\n 26359: u8 [a0 + 25] = 0\n 26362: u8 [a0 + 24] = 0\n 26365: u8 [a0 + 23] = 0\n 26368: u8 [a0 + 22] = 0\n 26371: u8 [a0 + 21] = 0\n 26374: u8 [a0 + 20] = 0\n 26377: u8 [a0 + 19] = 0\n 26380: u8 [a0 + 18] = 0\n 26383: u8 [a0 + 17] = 0\n 26386: u8 [a0 + 16] = 0\n 26389: u8 [a0 + 15] = 0\n 26392: u8 [a0 + 14] = 0\n 26395: u8 [a0 + 13] = 0\n 26398: u8 [a0 + 12] = 0\n 26401: u8 [a0 + 11] = 0\n 26404: u8 [a0 + 10] = 0\n 26407: u8 [a0 + 9] = 0\n 26410: u8 [a0 + 8] = 0\n 26413: u8 [a0 + 7] = 0\n 26416: u8 [a0 + 6] = 0\n 26419: u8 [a0 + 5] = 0\n 26422: u8 [a0 + 4] = 0\n 26425: u8 [a0 + 3] = 0\n 26428: u8 [a0 + 2] = 0\n 26431: u8 [a0 + 1] = 0\n 26434: u8 [a0 + 0] = 0\n 26436: jump @368 if a1 != 0\n      : @364 (gas: 4)\n 26440: i32 s0 = s1 + 0\n 26442: a1 = 0x20\n 26445: a0 = s0\n 26447: ra = 328, jump @0\n      : @365 [@dyn 164] (gas: 41)\n 26453: u8 [a0 + 31] = 0x10\n 26457: u8 [a0 + 30] = 0\n 26460: u8 [a0 + 29] = 0\n 26463: u8 [a0 + 28] = 0\n 26466: u8 [a0 + 27] = 0\n 26469: u8 [a0 + 26] = 0\n 26472: u8 [a0 + 25] = 0\n 26475: u8 [a0 + 24] = 0\n 26478: u8 [a0 + 23] = 0\n 26481: u8 [a0 + 22] = 0\n 26484: u8 [a0 + 21] = 0\n 26487: u8 [a0 + 20] = 0\n 26490: u8 [a0 + 19] = 0\n 26493: u8 [a0 + 18] = 0\n 26496: u8 [a0 + 17] = 0\n 26499: u8 [a0 + 16] = 0\n 26502: u8 [a0 + 15] = 0\n 26505: u8 [a0 + 14] = 0\n 26508: u8 [a0 + 13] = 0\n 26511: u8 [a0 + 12] = 0\n 26514: u8 [a0 + 11] = 0\n 26517: u8 [a0 + 10] = 0\n 26520: u8 [a0 + 9] = 0\n 26523: u8 [a0 + 8] = 0\n 26526: u8 [a0 + 7] = 0\n 26529: u8 [a0 + 6] = 0\n 26532: u8 [a0 + 5] = 0\n 26535: u8 [a0 + 4] = 0\n 26538: u8 [a0 + 3] = 0\n 26541: u8 [a0 + 2] = 0\n 26544: u8 [a0 + 1] = 0\n 26547: a1 = u64 [sp + 0x20]\n 26550: a2 = u64 [sp + 0x38]\n 26553: a1 = a1 | a2\n 26556: a2 = 0xffffffe0\n 26566: a2 = s1 <u a2\n 26569: a3 = u64 [sp + 0x40]\n 26572: a2 = 0 if a3 != 0\n 26574: a2 = 0 if a1 != 0\n 26576: u8 [a0 + 0] = 0\n 26578: jump @368 if a2 == 0\n      : @366 (gas: 3)\n 26582: i32 a0 = s0 + 0x20\n 26585: a1 = 0x20\n 26588: ra = 330, jump @0\n      : @367 [@dyn 165] (gas: 54)\n 26594: u8 [a0 + 31] = 0\n 26597: u8 [a0 + 30] = 0\n 26600: u8 [a0 + 29] = 0\n 26603: u8 [a0 + 28] = 0\n 26606: u8 [a0 + 27] = 0\n 26609: u8 [a0 + 26] = 0\n 26612: u8 [a0 + 25] = 0\n 26615: u8 [a0 + 24] = 0\n 26618: u8 [a0 + 23] = 0\n 26621: u8 [a0 + 22] = 0\n 26624: u8 [a0 + 21] = 0\n 26627: u8 [a0 + 20] = 0\n 26630: u8 [a0 + 19] = 0\n 26633: u8 [a0 + 18] = 0\n 26636: u8 [a0 + 17] = 0\n 26639: u8 [a0 + 16] = 0\n 26642: u8 [a0 + 15] = 0x65\n 26646: u8 [a0 + 14] = 0x76\n 26650: u8 [a0 + 13] = 0x69\n 26654: u8 [a0 + 12] = 0x74\n 26658: u8 [a0 + 11] = 0x63\n 26662: u8 [a0 + 10] = 0x61\n 26666: u8 [a0 + 9] = 0x6e\n 26670: u8 [a0 + 8] = 0x69\n 26674: u8 [a0 + 7] = 0x20\n 26678: u8 [a0 + 6] = 0x67\n 26682: u8 [a0 + 5] = 0x6e\n 26686: u8 [a0 + 4] = 0x69\n 26690: u8 [a0 + 3] = 0x74\n 26694: u8 [a0 + 2] = 0x73\n 26698: u8 [a0 + 1] = 0x69\n 26702: u8 [a0 + 0] = 0x4c\n 26705: a1 = u64 [sp]\n 26707: a0 = a1 + 0x60\n 26710: a1 = a0 <u a1\n 26713: a3 = u64 [sp + 0x8]\n 26716: a2 = a3 + a1\n 26719: a3 = a2 <u a3\n 26722: a3 = a1 if a1 == 0\n 26725: a1 = u64 [sp + 0x10]\n 26728: a3 = a3 + a1\n 26731: a1 = a3 <u a1\n 26734: a4 = u64 [sp + 0x18]\n 26737: a1 = a1 + a4\n 26740: a4 = u64 [sp + 0x28]\n 26743: u64 [a4] = a0\n 26745: u64 [a4 + 0x8] = a2\n 26748: u64 [a4 + 0x10] = a3\n 26751: u64 [a4 + 0x18] = a1\n 26754: ra = u64 [sp + 0x58]\n 26757: s0 = u64 [sp + 0x50]\n 26760: s1 = u64 [sp + 0x48]\n 26763: sp = sp + 0x60\n 26766: ret\n      : @368 (gas: 1)\n 26768: trap\n      : @369 (gas: 17)\n 26769: sp = sp + 0xffffffffffffffa0\n 26772: u64 [sp + 0x58] = ra\n 26775: u64 [sp + 0x50] = s0\n 26778: u64 [sp + 0x48] = s1\n 26781: a3 = u64 [a1 + 0x18]\n 26784: a4 = u64 [a1 + 0x10]\n 26787: a5 = u64 [a1 + 0x8]\n 26790: s1 = u64 [a1]\n 26792: a1 = a5 | a3\n 26795: a2 = s1 | a4\n 26798: a2 = a2 | a1\n 26801: a2 = a2 >> 0x20\n 26804: a1 = a1 | a4\n 26807: a1 = a1 << 0x20\n 26810: a1 = a1 | a2\n 26813: u64 [sp + 0x28] = a0\n 26816: jump @376 if a1 != 0\n      : @370 (gas: 19)\n 26820: a0 = s1 + 0x20\n 26823: u64 [sp + 0x30] = a0\n 26826: a0 = a0 <u s1\n 26829: a1 = a5 + a0\n 26832: u64 [sp + 0x40] = a1\n 26835: u64 [sp + 0x8] = a5\n 26838: s0 = a1 <u a5\n 26841: s0 = a0 if a0 == 0\n 26844: s0 = s0 + a4\n 26847: u64 [sp + 0x10] = a4\n 26850: a0 = s0 <u a4\n 26853: u64 [sp + 0x18] = a3\n 26856: a0 = a0 + a3\n 26859: u64 [sp + 0x38] = a0\n 26862: u64 [sp] = s1\n 26864: i32 a0 = s1 + 0\n 26866: a1 = 0x20\n 26869: s1 = 0x20\n 26872: ra = 332, jump @0\n      : @371 [@dyn 166] (gas: 45)\n 26878: u8 [a0 + 0x1f] = s1\n 26881: a1 = u64 [sp + 0x30]\n 26884: s1 = a1\n 26886: a1 = a1 | s0\n 26889: a2 = u64 [sp + 0x40]\n 26892: a4 = u64 [sp + 0x38]\n 26895: a2 = a2 | a4\n 26898: a1 = a1 | a2\n 26901: a1 = a1 >> 0x20\n 26904: u64 [sp + 0x20] = s0\n 26907: a2 = a2 | s0\n 26910: a2 = a2 << 0x20\n 26913: a1 = a1 | a2\n 26916: u8 [a0 + 30] = 0\n 26919: u8 [a0 + 29] = 0\n 26922: u8 [a0 + 28] = 0\n 26925: u8 [a0 + 27] = 0\n 26928: u8 [a0 + 26] = 0\n 26931: u8 [a0 + 25] = 0\n 26934: u8 [a0 + 24] = 0\n 26937: u8 [a0 + 23] = 0\n 26940: u8 [a0 + 22] = 0\n 26943: u8 [a0 + 21] = 0\n 26946: u8 [a0 + 20] = 0\n 26949: u8 [a0 + 19] = 0\n 26952: u8 [a0 + 18] = 0\n 26955: u8 [a0 + 17] = 0\n 26958: u8 [a0 + 16] = 0\n 26961: u8 [a0 + 15] = 0\n 26964: u8 [a0 + 14] = 0\n 26967: u8 [a0 + 13] = 0\n 26970: u8 [a0 + 12] = 0\n 26973: u8 [a0 + 11] = 0\n 26976: u8 [a0 + 10] = 0\n 26979: u8 [a0 + 9] = 0\n 26982: u8 [a0 + 8] = 0\n 26985: u8 [a0 + 7] = 0\n 26988: u8 [a0 + 6] = 0\n 26991: u8 [a0 + 5] = 0\n 26994: u8 [a0 + 4] = 0\n 26997: u8 [a0 + 3] = 0\n 27000: u8 [a0 + 2] = 0\n 27003: u8 [a0 + 1] = 0\n 27006: u8 [a0 + 0] = 0\n 27008: jump @376 if a1 != 0\n      : @372 (gas: 4)\n 27012: i32 s0 = s1 + 0\n 27014: a1 = 0x20\n 27017: a0 = s0\n 27019: ra = 334, jump @0\n      : @373 [@dyn 167] (gas: 41)\n 27025: u8 [a0 + 31] = 0x1d\n 27029: u8 [a0 + 30] = 0\n 27032: u8 [a0 + 29] = 0\n 27035: u8 [a0 + 28] = 0\n 27038: u8 [a0 + 27] = 0\n 27041: u8 [a0 + 26] = 0\n 27044: u8 [a0 + 25] = 0\n 27047: u8 [a0 + 24] = 0\n 27050: u8 [a0 + 23] = 0\n 27053: u8 [a0 + 22] = 0\n 27056: u8 [a0 + 21] = 0\n 27059: u8 [a0 + 20] = 0\n 27062: u8 [a0 + 19] = 0\n 27065: u8 [a0 + 18] = 0\n 27068: u8 [a0 + 17] = 0\n 27071: u8 [a0 + 16] = 0\n 27074: u8 [a0 + 15] = 0\n 27077: u8 [a0 + 14] = 0\n 27080: u8 [a0 + 13] = 0\n 27083: u8 [a0 + 12] = 0\n 27086: u8 [a0 + 11] = 0\n 27089: u8 [a0 + 10] = 0\n 27092: u8 [a0 + 9] = 0\n 27095: u8 [a0 + 8] = 0\n 27098: u8 [a0 + 7] = 0\n 27101: u8 [a0 + 6] = 0\n 27104: u8 [a0 + 5] = 0\n 27107: u8 [a0 + 4] = 0\n 27110: u8 [a0 + 3] = 0\n 27113: u8 [a0 + 2] = 0\n 27116: u8 [a0 + 1] = 0\n 27119: a1 = u64 [sp + 0x20]\n 27122: a2 = u64 [sp + 0x38]\n 27125: a1 = a1 | a2\n 27128: a2 = 0xffffffe0\n 27138: a2 = s1 <u a2\n 27141: a3 = u64 [sp + 0x40]\n 27144: a2 = 0 if a3 != 0\n 27146: a2 = 0 if a1 != 0\n 27148: u8 [a0 + 0] = 0\n 27150: jump @376 if a2 == 0\n      : @374 (gas: 3)\n 27154: i32 a0 = s0 + 0x20\n 27157: a1 = 0x20\n 27160: ra = 336, jump @0\n      : @375 [@dyn 168] (gas: 55)\n 27166: u8 [a0 + 31] = 0\n 27169: u8 [a0 + 30] = 0\n 27172: u8 [a0 + 29] = 0\n 27175: u8 [a0 + 28] = 0x67\n 27179: u8 [a0 + 27] = 0x6e\n 27183: u8 [a0 + 26] = 0x69\n 27187: u8 [a0 + 25] = 0x74\n 27191: u8 [a0 + 24] = 0x73\n 27195: u8 [a0 + 23] = 0x69\n 27199: u8 [a0 + 22] = 0x6c\n 27203: a5 = 0x20\n 27206: u8 [a0 + 0x15] = a5\n 27209: u8 [a0 + 20] = 0x6e\n 27213: u8 [a0 + 19] = 0x77\n 27217: u8 [a0 + 18] = 0x6f\n 27221: u8 [a0 + 0x11] = a5\n 27224: u8 [a0 + 16] = 0x72\n 27228: u8 [a0 + 15] = 0x75\n 27232: u8 [a0 + 14] = 0x6f\n 27236: u8 [a0 + 13] = 0x79\n 27240: u8 [a0 + 0xc] = a5\n 27243: u8 [a0 + 11] = 0x74\n 27247: u8 [a0 + 10] = 0x70\n 27251: u8 [a0 + 9] = 0x65\n 27255: u8 [a0 + 8] = 0x63\n 27259: u8 [a0 + 7] = 0x63\n 27263: u8 [a0 + 6] = 0x61\n 27267: u8 [a0 + 0x5] = a5\n 27270: u8 [a0 + 4] = 0x74\n 27274: u8 [a0 + 3] = 0x27\n 27278: u8 [a0 + 2] = 0x6e\n 27282: u8 [a0 + 1] = 0x61\n 27286: u8 [a0 + 0] = 0x43\n 27289: a1 = u64 [sp]\n 27291: a0 = a1 + 0x60\n 27294: a1 = a0 <u a1\n 27297: a3 = u64 [sp + 0x8]\n 27300: a2 = a3 + a1\n 27303: a3 = a2 <u a3\n 27306: a3 = a1 if a1 == 0\n 27309: a1 = u64 [sp + 0x10]\n 27312: a3 = a3 + a1\n 27315: a1 = a3 <u a1\n 27318: a4 = u64 [sp + 0x18]\n 27321: a1 = a1 + a4\n 27324: a4 = u64 [sp + 0x28]\n 27327: u64 [a4] = a0\n 27329: u64 [a4 + 0x8] = a2\n 27332: u64 [a4 + 0x10] = a3\n 27335: u64 [a4 + 0x18] = a1\n 27338: ra = u64 [sp + 0x58]\n 27341: s0 = u64 [sp + 0x50]\n 27344: s1 = u64 [sp + 0x48]\n 27347: sp = sp + 0x60\n 27350: ret\n      : @376 (gas: 1)\n 27352: trap\n      : @377 (gas: 17)\n 27353: sp = sp + 0xffffffffffffffa0\n 27356: u64 [sp + 0x58] = ra\n 27359: u64 [sp + 0x50] = s0\n 27362: u64 [sp + 0x48] = s1\n 27365: a3 = u64 [a1 + 0x18]\n 27368: a4 = u64 [a1 + 0x10]\n 27371: a5 = u64 [a1 + 0x8]\n 27374: s1 = u64 [a1]\n 27376: a1 = a5 | a3\n 27379: a2 = s1 | a4\n 27382: a2 = a2 | a1\n 27385: a2 = a2 >> 0x20\n 27388: a1 = a1 | a4\n 27391: a1 = a1 << 0x20\n 27394: a1 = a1 | a2\n 27397: u64 [sp + 0x20] = a0\n 27400: jump @386 if a1 != 0\n      : @378 (gas: 19)\n 27404: a0 = s1 + 0x20\n 27407: u64 [sp + 0x40] = a0\n 27410: a0 = a0 <u s1\n 27413: a1 = a5 + a0\n 27416: u64 [sp + 0x38] = a1\n 27419: u64 [sp + 0x8] = a5\n 27422: s0 = a1 <u a5\n 27425: s0 = a0 if a0 == 0\n 27428: s0 = s0 + a4\n 27431: u64 [sp + 0x10] = a4\n 27434: a0 = s0 <u a4\n 27437: u64 [sp + 0x18] = a3\n 27440: a0 = a0 + a3\n 27443: u64 [sp + 0x30] = a0\n 27446: u64 [sp] = s1\n 27448: i32 a0 = s1 + 0\n 27450: a1 = 0x20\n 27453: s1 = 0x20\n 27456: ra = 338, jump @0\n      : @379 [@dyn 169] (gas: 43)\n 27462: u8 [a0 + 0x1f] = s1\n 27465: a1 = u64 [sp + 0x40]\n 27468: a1 = a1 | s0\n 27471: a2 = u64 [sp + 0x38]\n 27474: a3 = u64 [sp + 0x30]\n 27477: a2 = a2 | a3\n 27480: a1 = a1 | a2\n 27483: a1 = a1 >> 0x20\n 27486: a2 = a2 | s0\n 27489: a2 = a2 << 0x20\n 27492: a1 = a1 | a2\n 27495: u8 [a0 + 30] = 0\n 27498: u8 [a0 + 29] = 0\n 27501: u8 [a0 + 28] = 0\n 27504: u8 [a0 + 27] = 0\n 27507: u8 [a0 + 26] = 0\n 27510: u8 [a0 + 25] = 0\n 27513: u8 [a0 + 24] = 0\n 27516: u8 [a0 + 23] = 0\n 27519: u8 [a0 + 22] = 0\n 27522: u8 [a0 + 21] = 0\n 27525: u8 [a0 + 20] = 0\n 27528: u8 [a0 + 19] = 0\n 27531: u8 [a0 + 18] = 0\n 27534: u8 [a0 + 17] = 0\n 27537: u8 [a0 + 16] = 0\n 27540: u8 [a0 + 15] = 0\n 27543: u8 [a0 + 14] = 0\n 27546: u8 [a0 + 13] = 0\n 27549: u8 [a0 + 12] = 0\n 27552: u8 [a0 + 11] = 0\n 27555: u8 [a0 + 10] = 0\n 27558: u8 [a0 + 9] = 0\n 27561: u8 [a0 + 8] = 0\n 27564: u8 [a0 + 7] = 0\n 27567: u8 [a0 + 6] = 0\n 27570: u8 [a0 + 5] = 0\n 27573: u8 [a0 + 4] = 0\n 27576: u8 [a0 + 3] = 0\n 27579: u8 [a0 + 2] = 0\n 27582: u8 [a0 + 1] = 0\n 27585: u8 [a0 + 0] = 0\n 27587: jump @386 if a1 != 0\n      : @380 (gas: 6)\n 27591: s1 = s0\n 27593: s0 = u64 [sp + 0x40]\n 27596: i32 a0 = s0 + 0\n 27598: a1 = 0x20\n 27601: u64 [sp + 0x28] = a0\n 27604: ra = 340, jump @0\n      : @381 [@dyn 170] (gas: 42)\n 27610: u8 [a0 + 31] = 0x21\n 27614: u8 [a0 + 30] = 0\n 27617: u8 [a0 + 29] = 0\n 27620: u8 [a0 + 28] = 0\n 27623: u8 [a0 + 27] = 0\n 27626: u8 [a0 + 26] = 0\n 27629: u8 [a0 + 25] = 0\n 27632: u8 [a0 + 24] = 0\n 27635: u8 [a0 + 23] = 0\n 27638: u8 [a0 + 22] = 0\n 27641: u8 [a0 + 21] = 0\n 27644: u8 [a0 + 20] = 0\n 27647: u8 [a0 + 19] = 0\n 27650: u8 [a0 + 18] = 0\n 27653: u8 [a0 + 17] = 0\n 27656: u8 [a0 + 16] = 0\n 27659: u8 [a0 + 15] = 0\n 27662: u8 [a0 + 14] = 0\n 27665: u8 [a0 + 13] = 0\n 27668: u8 [a0 + 12] = 0\n 27671: u8 [a0 + 11] = 0\n 27674: u8 [a0 + 10] = 0\n 27677: u8 [a0 + 9] = 0\n 27680: u8 [a0 + 8] = 0\n 27683: u8 [a0 + 7] = 0\n 27686: u8 [a0 + 6] = 0\n 27689: u8 [a0 + 5] = 0\n 27692: u8 [a0 + 4] = 0\n 27695: u8 [a0 + 3] = 0\n 27698: u8 [a0 + 2] = 0\n 27701: u8 [a0 + 1] = 0\n 27704: a1 = u64 [sp + 0x30]\n 27707: a2 = s1 | a1\n 27710: s1 = 0x100000000\n 27720: a1 = 0xffffffe0\n 27730: a1 = s0 <u a1\n 27733: s0 = a2\n 27735: a2 = u64 [sp + 0x38]\n 27738: a1 = 0 if a2 != 0\n 27740: a1 = 0 if s0 != 0\n 27742: u8 [a0 + 0] = 0\n 27744: jump @386 if a1 == 0\n      : @382 (gas: 4)\n 27748: a0 = u64 [sp + 0x28]\n 27751: i32 a0 = a0 + 0x20\n 27754: a1 = 0x20\n 27757: ra = 342, jump @0\n      : @383 [@dyn 171] (gas: 40)\n 27763: u8 [a0 + 29] = 0x63\n 27767: u8 [a0 + 24] = 0x73\n 27771: u8 [a0 + 21] = 0x71\n 27775: u8 [a0 + 31] = 0x72\n 27779: u8 [a0 + 19] = 0x72\n 27783: u8 [a0 + 26] = 0x65\n 27787: u8 [a0 + 23] = 0x65\n 27791: u8 [a0 + 20] = 0x65\n 27795: u8 [a0 + 17] = 0x65\n 27799: u8 [a0 + 13] = 0x65\n 27803: u8 [a0 + 12] = 0x76\n 27807: u8 [a0 + 30] = 0x61\n 27811: u8 [a0 + 11] = 0x61\n 27815: u8 [a0 + 16] = 0x68\n 27819: u8 [a0 + 10] = 0x68\n 27823: u8 [a0 + 25] = 0x74\n 27827: u8 [a0 + 15] = 0x74\n 27831: u8 [a0 + 8] = 0x74\n 27835: u8 [a0 + 7] = 0x27\n 27839: u8 [a0 + 6] = 0x6e\n 27843: u8 [a0 + 28] = 0x20\n 27847: u8 [a0 + 18] = 0x20\n 27851: u8 [a0 + 14] = 0x20\n 27855: u8 [a0 + 9] = 0x20\n 27859: u8 [a0 + 3] = 0x20\n 27863: u8 [a0 + 22] = 0x75\n 27867: u8 [a0 + 2] = 0x75\n 27871: u8 [a0 + 5] = 0x6f\n 27875: u8 [a0 + 1] = 0x6f\n 27879: u8 [a0 + 0] = 0x59\n 27882: a1 = s1 + 0xffffffffffffffc0\n 27885: a2 = u64 [sp + 0x40]\n 27888: a1 = a2 <u a1\n 27891: a2 = u64 [sp + 0x38]\n 27894: a1 = 0 if a2 != 0\n 27896: a1 = 0 if s0 != 0\n 27898: s0 = 0x64\n 27901: u8 [a0 + 0x1b] = s0\n 27904: u8 [a0 + 0x4] = s0\n 27907: jump @386 if a1 == 0\n      : @384 (gas: 4)\n 27911: a0 = u64 [sp + 0x28]\n 27914: i32 a0 = a0 + 0x40\n 27917: a1 = 0x20\n 27920: ra = 344, jump @0\n      : @385 [@dyn 172] (gas: 54)\n 27926: u8 [a0 + 31] = 0\n 27929: u8 [a0 + 30] = 0\n 27932: u8 [a0 + 29] = 0\n 27935: u8 [a0 + 28] = 0\n 27938: u8 [a0 + 27] = 0\n 27941: u8 [a0 + 26] = 0\n 27944: u8 [a0 + 25] = 0\n 27947: u8 [a0 + 24] = 0\n 27950: u8 [a0 + 23] = 0\n 27953: u8 [a0 + 22] = 0\n 27956: u8 [a0 + 21] = 0\n 27959: u8 [a0 + 20] = 0\n 27962: u8 [a0 + 19] = 0\n 27965: u8 [a0 + 18] = 0\n 27968: u8 [a0 + 17] = 0\n 27971: u8 [a0 + 16] = 0\n 27974: u8 [a0 + 15] = 0\n 27977: u8 [a0 + 14] = 0\n 27980: u8 [a0 + 13] = 0\n 27983: u8 [a0 + 12] = 0\n 27986: u8 [a0 + 11] = 0\n 27989: u8 [a0 + 10] = 0\n 27992: u8 [a0 + 9] = 0\n 27995: u8 [a0 + 8] = 0\n 27998: u8 [a0 + 7] = 0\n 28001: u8 [a0 + 6] = 0\n 28004: u8 [a0 + 5] = 0\n 28007: u8 [a0 + 4] = 0\n 28010: u8 [a0 + 3] = 0\n 28013: u8 [a0 + 2] = 0\n 28016: u8 [a0 + 1] = 0\n 28019: u8 [a0] = s0\n 28021: a1 = u64 [sp]\n 28023: a0 = a1 + 0x80\n 28027: a1 = a0 <u a1\n 28030: a3 = u64 [sp + 0x8]\n 28033: a2 = a3 + a1\n 28036: a3 = a2 <u a3\n 28039: a3 = a1 if a1 == 0\n 28042: a1 = u64 [sp + 0x10]\n 28045: a3 = a3 + a1\n 28048: a1 = a3 <u a1\n 28051: a4 = u64 [sp + 0x18]\n 28054: a1 = a1 + a4\n 28057: a4 = u64 [sp + 0x20]\n 28060: u64 [a4] = a0\n 28062: u64 [a4 + 0x8] = a2\n 28065: u64 [a4 + 0x10] = a3\n 28068: u64 [a4 + 0x18] = a1\n 28071: ra = u64 [sp + 0x58]\n 28074: s0 = u64 [sp + 0x50]\n 28077: s1 = u64 [sp + 0x48]\n 28080: sp = sp + 0x60\n 28083: ret\n      : @386 (gas: 1)\n 28085: trap\n      : @387 (gas: 19)\n 28086: t1 = u64 [sp + 0xf0]\n 28090: t0 = u64 [sp + 0xe8]\n 28094: a0 = u64 [sp + 0x558]\n 28098: a1 = u64 [sp + 0x540]\n 28102: t2 = u64 [sp + 0x550]\n 28106: a3 = u64 [sp + 0x548]\n 28110: a4 = a0 ^ s1\n 28113: a0 = s1 <u a0\n 28116: a2 = u64 [sp + 0xf8]\n 28120: a5 = a2 <u t2\n 28123: a5 = a0 if a4 != 0\n 28126: a0 = a3 ^ t0\n 28129: a3 = t0 <u a3\n 28132: a1 = t1 <u a1\n 28135: a1 = a3 if a0 != 0\n 28138: a0 = t2 ^ a2\n 28141: a0 = a0 | a4\n 28144: a1 = a5 if a0 != 0\n 28147: jump @389 if a1 != 0\n      : @388 (gas: 1)\n 28150: jump @472\n      : @389 (gas: 12)\n 28153: u64 [sp + 0x200] = t1\n 28157: u64 [sp + 568] = 0\n 28161: u64 [sp + 560] = 0\n 28165: u64 [sp + 552] = 0\n 28169: u64 [sp + 544] = 0\n 28173: u64 [sp + 0x208] = t0\n 28177: u64 [sp + 0x210] = a2\n 28181: a0 = sp + 0x240\n 28185: a1 = sp + 0x220\n 28189: a2 = sp + 0x200\n 28193: u64 [sp + 0x218] = s1\n 28197: ra = 346, jump @164\n      : @390 [@dyn 173] (gas: 36)\n 28203: a0 = u64 [sp + 0x240]\n 28207: a4 = u64 [sp + 0x258]\n 28211: a1 = u64 [sp + 0x248]\n 28215: a5 = u64 [sp + 0x250]\n 28219: a2 = a0 + 0x3\n 28222: u64 [sp + 0xf0] = a0\n 28226: a0 = a2 <u a0\n 28229: a3 = a1 + a0\n 28232: u64 [sp + 0xe8] = a1\n 28236: a1 = a3 <u a1\n 28239: a1 = a0 if a0 == 0\n 28242: a1 = a1 + a5\n 28245: u64 [sp + 0xd0] = a5\n 28249: a0 = a1 <u a5\n 28252: u64 [sp + 0xf8] = a4\n 28256: a0 = a0 + a4\n 28259: u64 [sp + 0xb0] = a3\n 28263: u64 [sp + 0x528] = a3\n 28267: u64 [sp + 0x20] = a2\n 28270: u64 [sp + 0x520] = a2\n 28274: u64 [sp + 0xa8] = a1\n 28278: u64 [sp + 0x530] = a1\n 28282: u64 [sp + 0xa0] = a0\n 28286: u64 [sp + 0x538] = a0\n 28290: u64 [sp + 1368] = 0\n 28294: u64 [sp + 1360] = 0\n 28298: u64 [sp + 1352] = 0\n 28302: u64 [sp + 1344] = 0\n 28306: u32 [sp + 1280] = 0x20\n 28311: i32 a1 = sp + 0x520\n 28315: i32 a3 = sp + 0x540\n 28319: i32 a4 = sp + 0x500\n 28323: a2 = 0xffffffffffffffff\n 28326: a0 = 0\n 28328: ecalli 6 // 'get_storage'\n 28330: fallthrough\n      : @391 (gas: 2)\n 28331: a0 = u8 [sp + 0x540]\n 28335: jump @393 if a0 != 0\n      : @392 (gas: 1)\n 28338: jump @477\n      : @393 (gas: 37)\n 28341: i32 a0 = sp + 0x2c0\n 28345: ecalli 4 // 'caller'\n 28347: a0 = u64 [sp + 0x2c8]\n 28351: a1 = u64 [sp + 0x2c0]\n 28355: a2 = i32 [sp + 0x2d0]\n 28359: a0 = reverse a0\n 28361: a3 = a0 >> 0x20\n 28364: s1 = reverse a1\n 28366: a1 = s1 << 0x20\n 28369: a1 = a1 | a3\n 28372: u64 [sp + 0xe0] = a1\n 28376: a0 = a0 << 0x20\n 28379: a1 = reverse a2\n 28381: a1 = a1 >> 0x20\n 28384: a0 = a0 | a1\n 28387: u64 [sp + 0xd8] = a0\n 28391: s1 = s1 >> 0x20\n 28394: a0 = u64 [sp + 0xf8]\n 28398: u64 [sp + 0x538] = a0\n 28402: a0 = u64 [sp + 0xd0]\n 28406: u64 [sp + 0x530] = a0\n 28410: a0 = u64 [sp + 0xe8]\n 28414: u64 [sp + 0x528] = a0\n 28418: a0 = u64 [sp + 0xf0]\n 28422: u64 [sp + 0x520] = a0\n 28426: u64 [sp + 1368] = 0\n 28430: u64 [sp + 1360] = 0\n 28434: u64 [sp + 1352] = 0\n 28438: u64 [sp + 1344] = 0\n 28442: u32 [sp + 1280] = 0x20\n 28447: i32 a1 = sp + 0x520\n 28451: i32 a3 = sp + 0x540\n 28455: i32 a4 = sp + 0x500\n 28459: a2 = 0xffffffffffffffff\n 28462: a0 = 0\n 28464: ecalli 6 // 'get_storage'\n 28466: fallthrough\n      : @394 (gas: 11)\n 28467: a0 = u32 [sp + 0x550]\n 28471: a1 = u64 [sp + 0x540]\n 28475: a2 = u64 [sp + 0x548]\n 28479: a0 = a0 ^ s1\n 28482: a3 = u64 [sp + 0xd8]\n 28486: a1 = a1 ^ a3\n 28489: a0 = a0 | a1\n 28492: a1 = u64 [sp + 0xe0]\n 28496: a1 = a1 ^ a2\n 28499: a0 = a0 | a1\n 28502: jump @396 if a0 != 0\n      : @395 (gas: 1)\n 28505: jump @482\n      : @396 (gas: 72)\n 28508: u64 [sp + 1336] = 0\n 28512: u64 [sp + 1328] = 0\n 28516: u64 [sp + 1320] = 0\n 28520: u64 [sp + 1312] = 0x1\n 28525: u64 [sp + 1368] = 0\n 28529: u64 [sp + 1360] = 0\n 28533: u64 [sp + 1352] = 0\n 28537: u64 [sp + 1344] = 0\n 28541: s1 = 0x20\n 28544: u32 [sp + 0x500] = s1\n 28548: i32 a1 = sp + 0x520\n 28552: i32 a3 = sp + 0x540\n 28556: i32 a4 = sp + 0x500\n 28560: a2 = 0xffffffffffffffff\n 28563: a0 = 0\n 28565: ecalli 6 // 'get_storage'\n 28567: a0 = u64 [sp + 0x550]\n 28571: u64 [sp + 0x58] = a0\n 28574: a0 = u64 [sp + 0x548]\n 28578: u64 [sp + 0x50] = a0\n 28581: a0 = u64 [sp + 0x540]\n 28585: u64 [sp + 0x60] = a0\n 28588: i32 a0 = sp + 0x2e0\n 28592: ecalli 4 // 'caller'\n 28594: a0 = i32 [sp + 0x2f0]\n 28598: u64 [sp + 0x98] = a0\n 28602: a0 = u64 [sp + 0x2e0]\n 28606: u64 [sp + 0x90] = a0\n 28610: a0 = u64 [sp + 0xf0]\n 28614: a2 = a0 + 0x2\n 28617: a0 = a2 <u a0\n 28620: a1 = u64 [sp + 0xe8]\n 28624: a3 = a1 + a0\n 28627: a1 = a3 <u a1\n 28630: a1 = a0 if a0 == 0\n 28633: a0 = u64 [sp + 0x2e8]\n 28637: u64 [sp + 0x88] = a0\n 28641: a0 = u64 [sp + 0xd0]\n 28645: a1 = a1 + a0\n 28648: u32 [sp + 0x500] = s1\n 28652: a0 = a1 <u a0\n 28655: a4 = u64 [sp + 0xf8]\n 28659: a0 = a0 + a4\n 28662: u64 [sp + 0x30] = a0\n 28665: u64 [sp + 0x538] = a0\n 28669: u64 [sp + 0x38] = a1\n 28672: u64 [sp + 0x530] = a1\n 28676: u64 [sp + 0x40] = a3\n 28679: u64 [sp + 0x528] = a3\n 28683: u64 [sp + 0x48] = a2\n 28686: u64 [sp + 0x520] = a2\n 28690: u64 [sp + 1368] = 0\n 28694: u64 [sp + 1360] = 0\n 28698: u64 [sp + 1352] = 0\n 28702: u64 [sp + 1344] = 0\n 28706: i32 a1 = sp + 0x520\n 28710: i32 a3 = sp + 0x540\n 28714: i32 a4 = sp + 0x500\n 28718: a2 = 0xffffffffffffffff\n 28721: a0 = 0\n 28723: ecalli 6 // 'get_storage'\n 28725: a0 = u64 [sp + 0x558]\n 28729: u64 [sp + 0x68] = a0\n 28732: a0 = u64 [sp + 0x550]\n 28736: u64 [sp + 0x70] = a0\n 28739: a0 = u64 [sp + 0x548]\n 28743: u64 [sp + 0x78] = a0\n 28746: a0 = u64 [sp + 0x540]\n 28750: u64 [sp + 0x80] = a0\n 28754: a0 = 0x40\n 28757: a1 = 0x20\n 28760: ra = 348, jump @0\n      : @397 [@dyn 174] (gas: 102)\n 28766: a1 = u8 [a0 + 0x11]\n 28769: a2 = u8 [a0 + 0x10]\n 28772: a3 = u8 [a0 + 0x12]\n 28775: a4 = u8 [a0 + 0x13]\n 28778: a1 = a1 << 0x8\n 28781: a1 = a1 | a2\n 28784: a3 = a3 << 0x10\n 28787: a4 = a4 << 0x18\n 28790: a3 = a3 | a4\n 28793: a1 = a1 | a3\n 28796: a2 = u8 [a0 + 0x15]\n 28799: a3 = u8 [a0 + 0x14]\n 28802: a4 = u8 [a0 + 0x16]\n 28805: a5 = u8 [a0 + 0x17]\n 28808: a2 = a2 << 0x8\n 28811: a2 = a2 | a3\n 28814: a4 = a4 << 0x10\n 28817: a5 = a5 << 0x18\n 28820: a4 = a4 | a5\n 28823: a2 = a2 | a4\n 28826: a2 = a2 << 0x20\n 28829: t0 = a2 | a1\n 28832: a2 = u8 [a0 + 0x1]\n 28835: a3 = u8 [a0]\n 28837: a4 = u8 [a0 + 0x2]\n 28840: a5 = u8 [a0 + 0x3]\n 28843: a2 = a2 << 0x8\n 28846: a2 = a2 | a3\n 28849: a4 = a4 << 0x10\n 28852: a5 = a5 << 0x18\n 28855: a4 = a4 | a5\n 28858: a2 = a2 | a4\n 28861: a3 = u8 [a0 + 0x5]\n 28864: a4 = u8 [a0 + 0x4]\n 28867: a5 = u8 [a0 + 0x6]\n 28870: s1 = u8 [a0 + 0x7]\n 28873: a3 = a3 << 0x8\n 28876: a3 = a3 | a4\n 28879: a5 = a5 << 0x10\n 28882: s1 = s1 << 0x18\n 28885: a5 = a5 | s1\n 28888: a3 = a3 | a5\n 28891: a3 = a3 << 0x20\n 28894: a2 = a2 | a3\n 28897: a3 = u8 [a0 + 0x19]\n 28900: a4 = u8 [a0 + 0x18]\n 28903: a5 = u8 [a0 + 0x1a]\n 28906: s1 = u8 [a0 + 0x1b]\n 28909: a3 = a3 << 0x8\n 28912: a3 = a3 | a4\n 28915: a5 = a5 << 0x10\n 28918: s1 = s1 << 0x18\n 28921: a5 = a5 | s1\n 28924: a3 = a3 | a5\n 28927: a4 = u8 [a0 + 0x1d]\n 28930: a5 = u8 [a0 + 0x1c]\n 28933: s1 = u8 [a0 + 0x1e]\n 28936: a1 = u8 [a0 + 0x1f]\n 28939: a4 = a4 << 0x8\n 28942: a4 = a4 | a5\n 28945: s1 = s1 << 0x10\n 28948: a1 = a1 << 0x18\n 28951: a1 = a1 | s1\n 28954: a1 = a1 | a4\n 28957: a1 = a1 << 0x20\n 28960: a3 = a3 | a1\n 28963: a1 = u8 [a0 + 0x9]\n 28966: a4 = u8 [a0 + 0x8]\n 28969: a5 = u8 [a0 + 0xa]\n 28972: s1 = u8 [a0 + 0xb]\n 28975: a1 = a1 << 0x8\n 28978: a1 = a1 | a4\n 28981: a5 = a5 << 0x10\n 28984: s1 = s1 << 0x18\n 28987: a5 = a5 | s1\n 28990: a1 = a1 | a5\n 28993: a4 = u8 [a0 + 0xd]\n 28996: a5 = u8 [a0 + 0xc]\n 28999: s1 = u8 [a0 + 0xe]\n 29002: a0 = u8 [a0 + 0xf]\n 29005: a4 = a4 << 0x8\n 29008: a4 = a4 | a5\n 29011: s1 = s1 << 0x10\n 29014: a0 = a0 << 0x18\n 29017: a0 = a0 | s1\n 29020: a0 = a0 | a4\n 29023: a0 = a0 << 0x20\n 29026: a0 = a0 | a1\n 29029: s1 = reverse a0\n 29031: a3 = reverse a3\n 29033: a1 = reverse a2\n 29035: a0 = reverse t0\n 29037: u64 [sp + 0xe0] = a0\n 29041: u64 [sp + 0xc0] = a1\n 29045: a0 = a0 | a1\n 29048: a1 = a3 | s1\n 29051: a1 = a1 | a0\n 29054: a1 = a1 >> 0x20\n 29057: a0 = a0 | s1\n 29060: a0 = a0 << 0x20\n 29063: a0 = a0 | a1\n 29066: jump @399 if a0 == 0\n      : @398 (gas: 1)\n 29069: jump @493\n      : @399 (gas: 5)\n 29072: i32 a0 = a3 + 0\n 29074: a1 = 0x20\n 29077: u64 [sp + 0xc8] = a0\n 29081: u64 [sp + 0xd8] = a3\n 29085: ra = 350, jump @0\n      : @400 [@dyn 175] (gas: 43)\n 29091: u8 [a0 + 31] = 0\n 29094: u8 [a0 + 30] = 0\n 29097: u8 [a0 + 29] = 0\n 29100: u8 [a0 + 28] = 0\n 29103: u8 [a0 + 27] = 0\n 29106: u8 [a0 + 26] = 0\n 29109: u8 [a0 + 25] = 0\n 29112: u8 [a0 + 24] = 0\n 29115: u8 [a0 + 23] = 0\n 29118: u8 [a0 + 22] = 0\n 29121: u8 [a0 + 21] = 0\n 29124: u8 [a0 + 20] = 0\n 29127: u8 [a0 + 19] = 0\n 29130: u8 [a0 + 18] = 0\n 29133: u8 [a0 + 17] = 0\n 29136: u8 [a0 + 16] = 0\n 29139: u8 [a0 + 15] = 0\n 29142: u8 [a0 + 14] = 0\n 29145: u8 [a0 + 13] = 0\n 29148: u8 [a0 + 12] = 0\n 29151: u8 [a0 + 11] = 0\n 29154: u8 [a0 + 10] = 0\n 29157: u8 [a0 + 9] = 0\n 29160: u8 [a0 + 8] = 0\n 29163: u8 [a0 + 7] = 0\n 29166: u8 [a0 + 6] = 0\n 29169: u8 [a0 + 5] = 0\n 29172: u8 [a0 + 3] = 0xe6\n 29177: u8 [a0 + 2] = 0x8c\n 29182: u8 [a0 + 1] = 0xca\n 29187: u8 [a0 + 0] = 0x4d\n 29190: u64 [sp + 0x28] = s1\n 29193: a3 = u64 [sp + 0xc0]\n 29197: a3 = a3 | s1\n 29200: a1 = 0xfffffffc\n 29210: a2 = u64 [sp + 0xd8]\n 29214: a1 = a2 <u a1\n 29217: a2 = u64 [sp + 0xe0]\n 29221: a1 = 0 if a2 != 0\n 29223: u64 [sp + 0xb8] = a3\n 29227: a1 = 0 if a3 != 0\n 29229: u8 [a0 + 4] = 0\n 29232: jump @402 if a1 != 0\n      : @401 (gas: 1)\n 29235: jump @493\n      : @402 (gas: 19)\n 29238: a0 = u64 [sp + 0x88]\n 29242: a0 = reverse a0\n 29244: a1 = a0 >> 0x20\n 29247: a2 = u64 [sp + 0x90]\n 29251: a2 = reverse a2\n 29253: a3 = a2 << 0x20\n 29256: a1 = a1 | a3\n 29259: u64 [sp + 0x90] = a1\n 29263: a0 = a0 << 0x20\n 29266: a1 = u64 [sp + 0x98]\n 29270: a1 = reverse a1\n 29272: a1 = a1 >> 0x20\n 29275: a0 = a0 | a1\n 29278: u64 [sp + 0x98] = a0\n 29282: s1 = a2 >> 0x20\n 29285: a0 = u64 [sp + 0xc8]\n 29289: i32 a0 = a0 + 0x4\n 29292: a1 = 0x20\n 29295: ra = 352, jump @0\n      : @403 [@dyn 176] (gas: 64)\n 29301: a1 = reverse s1\n 29303: a2 = u64 [sp + 0x90]\n 29307: a2 = reverse a2\n 29309: a3 = u64 [sp + 0x98]\n 29313: a3 = reverse a3\n 29315: a4 = a3 >> 0x38\n 29318: u8 [a0 + 0x1f] = a4\n 29321: a4 = a3 >> 0x30\n 29324: u8 [a0 + 0x1e] = a4\n 29327: a4 = a3 >> 0x28\n 29330: u8 [a0 + 0x1d] = a4\n 29333: a4 = a3 >> 0x20\n 29336: u8 [a0 + 0x1c] = a4\n 29339: a4 = a3 >> 0x18\n 29342: u8 [a0 + 0x1b] = a4\n 29345: a4 = a3 >> 0x10\n 29348: u8 [a0 + 0x1a] = a4\n 29351: a4 = a3 >> 0x8\n 29354: u8 [a0 + 0x19] = a4\n 29357: u8 [a0 + 0x18] = a3\n 29360: u8 [a0 + 0x10] = a2\n 29363: u8 [a0 + 11] = 0\n 29366: u8 [a0 + 10] = 0\n 29369: u8 [a0 + 9] = 0\n 29372: u8 [a0 + 7] = 0\n 29375: u8 [a0 + 6] = 0\n 29378: u8 [a0 + 5] = 0\n 29381: u8 [a0 + 4] = 0\n 29384: u8 [a0 + 3] = 0\n 29387: u8 [a0 + 2] = 0\n 29390: u8 [a0 + 1] = 0\n 29393: u8 [a0 + 0] = 0\n 29395: a3 = a2 >> 0x38\n 29398: u8 [a0 + 0x17] = a3\n 29401: a3 = a2 >> 0x30\n 29404: u8 [a0 + 0x16] = a3\n 29407: a3 = a2 >> 0x28\n 29410: u8 [a0 + 0x15] = a3\n 29413: a3 = a2 >> 0x20\n 29416: u8 [a0 + 0x14] = a3\n 29419: a3 = a2 >> 0x18\n 29422: u8 [a0 + 0x13] = a3\n 29425: a3 = a2 >> 0x10\n 29428: u8 [a0 + 0x12] = a3\n 29431: a2 = a2 >> 0x8\n 29434: u8 [a0 + 0x11] = a2\n 29437: u8 [a0 + 0x8] = a1\n 29440: a2 = a1 >> 0x38\n 29443: u8 [a0 + 0xf] = a2\n 29446: a2 = a1 >> 0x30\n 29449: u8 [a0 + 0xe] = a2\n 29452: a2 = a1 >> 0x28\n 29455: u8 [a0 + 0xd] = a2\n 29458: a1 = a1 >> 0x20\n 29461: s1 = 0x100000000\n 29471: a2 = 0xffffffdc\n 29481: a3 = u64 [sp + 0xd8]\n 29485: a2 = a3 <u a2\n 29488: a3 = u64 [sp + 0xe0]\n 29492: a2 = 0 if a3 != 0\n 29494: a3 = u64 [sp + 0xb8]\n 29498: a2 = 0 if a3 != 0\n 29500: u8 [a0 + 0xc] = a1\n 29503: jump @405 if a2 != 0\n      : @404 (gas: 1)\n 29506: jump @493\n      : @405 (gas: 4)\n 29509: a0 = u64 [sp + 0xc8]\n 29513: i32 a0 = a0 + 0x24\n 29516: a1 = 0x20\n 29519: ra = 354, jump @0\n      : @406 [@dyn 177] (gas: 76)\n 29525: a1 = u64 [sp + 0x68]\n 29528: a1 = reverse a1\n 29530: a2 = u64 [sp + 0x70]\n 29533: a2 = reverse a2\n 29535: a3 = u64 [sp + 0x78]\n 29538: a3 = reverse a3\n 29540: a4 = u64 [sp + 0x80]\n 29544: a4 = reverse a4\n 29546: a5 = a4 >> 0x38\n 29549: u8 [a0 + 0x1f] = a5\n 29552: a5 = a4 >> 0x30\n 29555: u8 [a0 + 0x1e] = a5\n 29558: a5 = a4 >> 0x28\n 29561: u8 [a0 + 0x1d] = a5\n 29564: a5 = a4 >> 0x20\n 29567: u8 [a0 + 0x1c] = a5\n 29570: a5 = a4 >> 0x18\n 29573: u8 [a0 + 0x1b] = a5\n 29576: a5 = a4 >> 0x10\n 29579: u8 [a0 + 0x1a] = a5\n 29582: a5 = a4 >> 0x8\n 29585: u8 [a0 + 0x19] = a5\n 29588: u8 [a0 + 0x18] = a4\n 29591: u8 [a0 + 0x10] = a3\n 29594: a4 = a3 >> 0x38\n 29597: u8 [a0 + 0x17] = a4\n 29600: a4 = a3 >> 0x30\n 29603: u8 [a0 + 0x16] = a4\n 29606: a4 = a3 >> 0x28\n 29609: u8 [a0 + 0x15] = a4\n 29612: a4 = a3 >> 0x20\n 29615: u8 [a0 + 0x14] = a4\n 29618: a4 = a3 >> 0x18\n 29621: u8 [a0 + 0x13] = a4\n 29624: a4 = a3 >> 0x10\n 29627: u8 [a0 + 0x12] = a4\n 29630: a3 = a3 >> 0x8\n 29633: u8 [a0 + 0x11] = a3\n 29636: u8 [a0 + 0x8] = a2\n 29639: a3 = a2 >> 0x38\n 29642: u8 [a0 + 0xf] = a3\n 29645: a3 = a2 >> 0x30\n 29648: u8 [a0 + 0xe] = a3\n 29651: a3 = a2 >> 0x28\n 29654: u8 [a0 + 0xd] = a3\n 29657: a3 = a2 >> 0x20\n 29660: u8 [a0 + 0xc] = a3\n 29663: a3 = a2 >> 0x18\n 29666: u8 [a0 + 0xb] = a3\n 29669: a3 = a2 >> 0x10\n 29672: u8 [a0 + 0xa] = a3\n 29675: a2 = a2 >> 0x8\n 29678: u8 [a0 + 0x9] = a2\n 29681: u8 [a0] = a1\n 29683: a2 = a1 >> 0x38\n 29686: u8 [a0 + 0x7] = a2\n 29689: a2 = a1 >> 0x30\n 29692: u8 [a0 + 0x6] = a2\n 29695: a2 = a1 >> 0x28\n 29698: u8 [a0 + 0x5] = a2\n 29701: a2 = a1 >> 0x20\n 29704: u8 [a0 + 0x4] = a2\n 29707: a2 = a1 >> 0x18\n 29710: u8 [a0 + 0x3] = a2\n 29713: a2 = a1 >> 0x10\n 29716: u8 [a0 + 0x2] = a2\n 29719: a1 = a1 >> 0x8\n 29722: a2 = s1 + 0xffffffffffffffbc\n 29725: a3 = u64 [sp + 0xd8]\n 29729: a2 = a3 <u a2\n 29732: a3 = u64 [sp + 0xe0]\n 29736: a2 = 0 if a3 != 0\n 29738: a3 = u64 [sp + 0xb8]\n 29742: a2 = 0 if a3 != 0\n 29744: u8 [a0 + 0x1] = a1\n 29747: jump @408 if a2 != 0\n      : @407 (gas: 1)\n 29750: jump @493\n      : @408 (gas: 4)\n 29753: s1 = u64 [sp + 0xc8]\n 29757: i32 a0 = s1 + 0x44\n 29760: a1 = 0x20\n 29763: ra = 356, jump @0\n      : @409 [@dyn 178] (gas: 56)\n 29769: u8 [a0 + 31] = 0x1\n 29773: u8 [a0 + 30] = 0\n 29776: u8 [a0 + 29] = 0\n 29779: u8 [a0 + 28] = 0\n 29782: u8 [a0 + 27] = 0\n 29785: u8 [a0 + 26] = 0\n 29788: u8 [a0 + 25] = 0\n 29791: u8 [a0 + 24] = 0\n 29794: u8 [a0 + 23] = 0\n 29797: u8 [a0 + 22] = 0\n 29800: u8 [a0 + 21] = 0\n 29803: u8 [a0 + 20] = 0\n 29806: u8 [a0 + 19] = 0\n 29809: u8 [a0 + 18] = 0\n 29812: u8 [a0 + 17] = 0\n 29815: u8 [a0 + 16] = 0\n 29818: u8 [a0 + 15] = 0\n 29821: u8 [a0 + 14] = 0\n 29824: u8 [a0 + 13] = 0\n 29827: u8 [a0 + 12] = 0\n 29830: u8 [a0 + 11] = 0\n 29833: u8 [a0 + 10] = 0\n 29836: u8 [a0 + 9] = 0\n 29839: u8 [a0 + 8] = 0\n 29842: u8 [a0 + 7] = 0\n 29845: u8 [a0 + 6] = 0\n 29848: u8 [a0 + 5] = 0\n 29851: u8 [a0 + 4] = 0\n 29854: u8 [a0 + 3] = 0\n 29857: u8 [a0 + 2] = 0\n 29860: u8 [a0 + 1] = 0\n 29863: u8 [a0 + 0] = 0\n 29865: ecalli 8 // 'ref_time_left'\n 29867: a0 = u64 [sp + 0x50]\n 29870: a0 = reverse a0\n 29872: a1 = a0 << 0x20\n 29875: a2 = u64 [sp + 0x58]\n 29878: a2 = reverse a2\n 29880: a2 = a2 >> 0x20\n 29883: a1 = a1 | a2\n 29886: a2 = u64 [sp + 0x60]\n 29889: a2 = reverse a2\n 29891: a3 = a2 << 0x20\n 29894: a0 = a0 >> 0x20\n 29897: a0 = a0 | a3\n 29900: a2 = a2 >> 0x20\n 29903: u64 [sp + 0x308] = a0\n 29907: u64 [sp + 0x300] = a1\n 29911: u32 [sp + 0x310] = a2\n 29915: u64 [sp + 824] = 0\n 29919: u64 [sp + 816] = 0\n 29923: u64 [sp + 808] = 0\n 29927: u64 [sp + 800] = 0\n 29931: a1 = 0x64\n 29934: a0 = s1\n 29936: ra = 358, jump @0\n      : @410 [@dyn 179] (gas: 4)\n 29942: u64 [sp + 0xb8] = a0\n 29946: a1 = 0x20\n 29949: a0 = s1\n 29951: ra = 360, jump @0\n      : @411 [@dyn 180] (gas: 31)\n 29957: u32 [sp + 832] = 0x20\n 29962: u64 [sp + 888] = 0\n 29966: u64 [sp + 880] = 0\n 29970: u64 [sp + 872] = 0\n 29974: u64 [sp + 864] = 0\n 29978: a1 = sp + 0x300\n 29982: a1 = a1 << 0x20\n 29985: a1 = a1 >> 0x20\n 29988: a2 = 0x1800000000\n 29998: s1 = a1 | a2\n 30001: a1 = sp + 0x320\n 30005: a1 = a1 << 0x20\n 30008: a1 = a1 >> 0x20\n 30011: a2 = sp + 0x360\n 30015: a2 = a2 << 0x20\n 30018: a3 = a2 | a1\n 30021: a1 = u64 [sp + 0xb8]\n 30025: a1 = a1 << 0x20\n 30028: a1 = a1 >> 0x20\n 30031: a2 = 0x6400000000\n 30041: a4 = a1 | a2\n 30044: a0 = a0 << 0x20\n 30047: a0 = a0 >> 0x20\n 30050: a1 = sp + 0x340\n 30054: a1 = a1 << 0x20\n 30057: a5 = a1 | a0\n 30060: a1 = 0xffffffffffffffff\n 30063: a2 = 0xffffffffffffffff\n 30066: a0 = s1\n 30068: ecalli 0 // 'call'\n 30069: fallthrough\n      : @412 (gas: 1)\n 30070: jump @414 if a0 == 0\n      : @413 (gas: 1)\n 30073: jump @471\n      : @414 (gas: 2)\n 30076: ecalli 10 // 'return_data_size'\n 30078: fallthrough\n      : @415 (gas: 2)\n 30079: a1 = 0x20\n 30082: jump @417 if a0 >=u a1\n      : @416 (gas: 3)\n 30085: ecalli 10 // 'return_data_size'\n 30087: a1 = a0\n 30089: fallthrough\n      : @417 (gas: 28)\n 30090: a4 = 0\n 30092: a3 = u64 [sp + 0xc0]\n 30096: a2 = u64 [sp + 0xd8]\n 30100: s1 = u64 [sp + 0xe0]\n 30104: a0 = a1 + 0x1f\n 30107: u64 [sp + 0xd8] = a1\n 30111: a1 = a0 <u a1\n 30114: u64 [sp + 224] = 0\n 30118: a1 = a1 & 0x1\n 30121: a0 = a0 & 0xffffffffffffffe0\n 30124: a2 = a2 + a0\n 30127: u64 [sp + 0xc0] = a2\n 30131: a0 = a2 <u a0\n 30134: s1 = s1 + a1\n 30137: s1 = s1 + a0\n 30140: a2 = s1 ^ a1\n 30143: a1 = s1 <u a1\n 30146: a1 = a0 if a2 == 0\n 30149: a0 = u64 [sp + 0x28]\n 30152: a1 = a1 + a0\n 30155: a0 = a1 <u a0\n 30158: a0 = a0 + a3\n 30161: u64 [sp + 0xb8] = a1\n 30165: u64 [sp + 0x98] = a0\n 30169: a0 = a0 | a1\n 30172: a1 = s1 <u 0x1\n 30175: a1 = 0 if a0 != 0\n 30177: jump @419 if a1 != 0\n      : @418 (gas: 1)\n 30180: jump @497\n      : @419 (gas: 3)\n 30183: a0 = 0x40\n 30186: a1 = 0x20\n 30189: ra = 362, jump @0\n      : @420 [@dyn 181] (gas: 79)\n 30195: a1 = u64 [sp + 0x98]\n 30199: a1 = reverse a1\n 30201: a2 = u64 [sp + 0xb8]\n 30205: a2 = reverse a2\n 30207: a3 = reverse s1\n 30209: a4 = u64 [sp + 0xc0]\n 30213: a4 = reverse a4\n 30215: u8 [a0 + 0x18] = a4\n 30218: a5 = a4 >> 0x38\n 30221: u8 [a0 + 0x1f] = a5\n 30224: a5 = a4 >> 0x30\n 30227: u8 [a0 + 0x1e] = a5\n 30230: a5 = a4 >> 0x28\n 30233: u8 [a0 + 0x1d] = a5\n 30236: a5 = a4 >> 0x20\n 30239: u8 [a0 + 0x1c] = a5\n 30242: a5 = a4 >> 0x18\n 30245: u8 [a0 + 0x1b] = a5\n 30248: a5 = a4 >> 0x10\n 30251: u8 [a0 + 0x1a] = a5\n 30254: a4 = a4 >> 0x8\n 30257: u8 [a0 + 0x19] = a4\n 30260: u8 [a0 + 0x10] = a3\n 30263: a4 = a3 >> 0x38\n 30266: u8 [a0 + 0x17] = a4\n 30269: a4 = a3 >> 0x30\n 30272: u8 [a0 + 0x16] = a4\n 30275: a4 = a3 >> 0x28\n 30278: u8 [a0 + 0x15] = a4\n 30281: a4 = a3 >> 0x20\n 30284: u8 [a0 + 0x14] = a4\n 30287: a4 = a3 >> 0x18\n 30290: u8 [a0 + 0x13] = a4\n 30293: a4 = a3 >> 0x10\n 30296: u8 [a0 + 0x12] = a4\n 30299: a3 = a3 >> 0x8\n 30302: u8 [a0 + 0x11] = a3\n 30305: u8 [a0 + 0x8] = a2\n 30308: a3 = a2 >> 0x38\n 30311: u8 [a0 + 0xf] = a3\n 30314: a3 = a2 >> 0x30\n 30317: u8 [a0 + 0xe] = a3\n 30320: a3 = a2 >> 0x28\n 30323: u8 [a0 + 0xd] = a3\n 30326: a3 = a2 >> 0x20\n 30329: u8 [a0 + 0xc] = a3\n 30332: a3 = a2 >> 0x18\n 30335: u8 [a0 + 0xb] = a3\n 30338: a3 = a2 >> 0x10\n 30341: u8 [a0 + 0xa] = a3\n 30344: a2 = a2 >> 0x8\n 30347: u8 [a0 + 0x9] = a2\n 30350: u8 [a0] = a1\n 30352: a2 = a1 >> 0x38\n 30355: u8 [a0 + 0x7] = a2\n 30358: a2 = a1 >> 0x30\n 30361: u8 [a0 + 0x6] = a2\n 30364: a2 = a1 >> 0x28\n 30367: u8 [a0 + 0x5] = a2\n 30370: a2 = a1 >> 0x20\n 30373: u8 [a0 + 0x4] = a2\n 30376: a2 = a1 >> 0x18\n 30379: u8 [a0 + 0x3] = a2\n 30382: a2 = a1 >> 0x10\n 30385: u8 [a0 + 0x2] = a2\n 30388: a1 = a1 >> 0x8\n 30391: a5 = u64 [sp + 0xe0]\n 30395: a2 = a5 >u 0\n 30397: a3 = u64 [sp + 0xd8]\n 30401: a3 = a3 <u 0x20\n 30404: a3 = a3 ^ 0x1\n 30407: a3 = a2 if a5 != 0\n 30410: a2 = a5 >u 0\n 30412: a4 = a5 >u 0\n 30414: a4 = a2 if a5 == 0\n 30417: a2 = a5 | a5\n 30420: a4 = a3 if a2 == 0\n 30423: u8 [a0 + 0x1] = a1\n 30426: jump @422 if a4 != 0\n      : @421 (gas: 1)\n 30429: jump @494\n      : @422 (gas: 3)\n 30432: a1 = 0x20\n 30435: a0 = u64 [sp + 0xc8]\n 30439: ra = 364, jump @0\n      : @423 [@dyn 182] (gas: 96)\n 30445: a1 = u8 [a0 + 0x9]\n 30448: a2 = u8 [a0 + 0x8]\n 30451: a3 = u8 [a0 + 0xa]\n 30454: a4 = u8 [a0 + 0xb]\n 30457: a1 = a1 << 0x8\n 30460: a1 = a1 | a2\n 30463: a3 = a3 << 0x10\n 30466: a4 = a4 << 0x18\n 30469: a3 = a3 | a4\n 30472: a1 = a1 | a3\n 30475: a2 = u8 [a0 + 0xd]\n 30478: a3 = u8 [a0 + 0xc]\n 30481: a4 = u8 [a0 + 0xe]\n 30484: a5 = u8 [a0 + 0xf]\n 30487: a2 = a2 << 0x8\n 30490: a2 = a2 | a3\n 30493: a4 = a4 << 0x10\n 30496: a5 = a5 << 0x18\n 30499: a4 = a4 | a5\n 30502: a2 = a2 | a4\n 30505: a2 = a2 << 0x20\n 30508: t0 = a2 | a1\n 30511: a2 = u8 [a0 + 0x1]\n 30514: a3 = u8 [a0]\n 30516: a4 = u8 [a0 + 0x2]\n 30519: a5 = u8 [a0 + 0x3]\n 30522: a2 = a2 << 0x8\n 30525: a2 = a2 | a3\n 30528: a4 = a4 << 0x10\n 30531: a5 = a5 << 0x18\n 30534: a4 = a4 | a5\n 30537: a2 = a2 | a4\n 30540: a3 = u8 [a0 + 0x5]\n 30543: a4 = u8 [a0 + 0x4]\n 30546: a5 = u8 [a0 + 0x6]\n 30549: s1 = u8 [a0 + 0x7]\n 30552: a3 = a3 << 0x8\n 30555: a3 = a3 | a4\n 30558: a5 = a5 << 0x10\n 30561: s1 = s1 << 0x18\n 30564: a5 = a5 | s1\n 30567: a3 = a3 | a5\n 30570: a3 = a3 << 0x20\n 30573: a2 = a2 | a3\n 30576: a3 = u8 [a0 + 0x19]\n 30579: a4 = u8 [a0 + 0x18]\n 30582: a5 = u8 [a0 + 0x1a]\n 30585: s1 = u8 [a0 + 0x1b]\n 30588: a3 = a3 << 0x8\n 30591: a3 = a3 | a4\n 30594: a5 = a5 << 0x10\n 30597: s1 = s1 << 0x18\n 30600: a5 = a5 | s1\n 30603: a3 = a3 | a5\n 30606: a4 = u8 [a0 + 0x1d]\n 30609: a5 = u8 [a0 + 0x1c]\n 30612: s1 = u8 [a0 + 0x1e]\n 30615: a1 = u8 [a0 + 0x1f]\n 30618: a4 = a4 << 0x8\n 30621: a4 = a4 | a5\n 30624: s1 = s1 << 0x10\n 30627: a1 = a1 << 0x18\n 30630: a1 = a1 | s1\n 30633: a1 = a1 | a4\n 30636: a1 = a1 << 0x20\n 30639: a3 = a3 | a1\n 30642: a1 = u8 [a0 + 0x11]\n 30645: a4 = u8 [a0 + 0x10]\n 30648: a5 = u8 [a0 + 0x12]\n 30651: s1 = u8 [a0 + 0x13]\n 30654: a1 = a1 << 0x8\n 30657: a1 = a1 | a4\n 30660: a5 = a5 << 0x10\n 30663: s1 = s1 << 0x18\n 30666: a5 = a5 | s1\n 30669: a1 = a1 | a5\n 30672: a4 = u8 [a0 + 0x15]\n 30675: a5 = u8 [a0 + 0x14]\n 30678: s1 = u8 [a0 + 0x16]\n 30681: a0 = u8 [a0 + 0x17]\n 30684: a4 = a4 << 0x8\n 30687: a4 = a4 | a5\n 30690: s1 = s1 << 0x10\n 30693: a0 = a0 << 0x18\n 30696: a0 = a0 | s1\n 30699: a0 = a0 | a4\n 30702: a0 = a0 << 0x20\n 30705: a0 = a0 | a1\n 30708: a1 = reverse a0\n 30710: a4 = reverse a3\n 30712: a4 = a4 <u 0x2\n 30715: a4 = 0 if a1 != 0\n 30717: a1 = t0 | a2\n 30720: a1 = reverse a1\n 30722: a4 = 0 if a1 != 0\n 30724: jump @425 if a4 != 0\n      : @424 (gas: 1)\n 30727: jump @494\n      : @425 (gas: 4)\n 30730: a0 = a0 | a2\n 30733: a1 = t0 | a3\n 30736: a0 = a0 | a1\n 30739: jump @427 if a0 != 0\n      : @426 (gas: 1)\n 30742: jump @487\n      : @427 (gas: 104)\n 30745: u64 [sp + 1336] = 0\n 30749: u64 [sp + 1328] = 0\n 30753: u64 [sp + 1320] = 0\n 30757: u64 [sp + 1312] = 0x1\n 30762: u64 [sp + 1368] = 0\n 30766: u64 [sp + 1360] = 0\n 30770: u64 [sp + 1352] = 0\n 30774: u64 [sp + 1344] = 0\n 30778: s1 = 0x20\n 30781: u32 [sp + 0x500] = s1\n 30785: i32 a1 = sp + 0x520\n 30789: i32 a3 = sp + 0x540\n 30793: i32 a4 = sp + 0x500\n 30797: a2 = 0xffffffffffffffff\n 30800: a0 = 0\n 30802: ecalli 6 // 'get_storage'\n 30804: a0 = u64 [sp + 0x540]\n 30808: u64 [sp + 0xe0] = a0\n 30812: a0 = u64 [sp + 0x550]\n 30816: u64 [sp + 0xd8] = a0\n 30820: a0 = u64 [sp + 0x548]\n 30824: u64 [sp + 0xc8] = a0\n 30828: i32 a0 = sp + 0x380\n 30832: ecalli 4 // 'caller'\n 30834: a0 = i32 [sp + 0x390]\n 30838: u64 [sp + 0xb8] = a0\n 30842: a0 = u64 [sp + 0x380]\n 30846: u64 [sp + 0x98] = a0\n 30850: a0 = u64 [sp + 0x388]\n 30854: u64 [sp + 0x90] = a0\n 30858: a0 = u64 [sp + 0xf8]\n 30862: u64 [sp + 0x538] = a0\n 30866: a0 = u64 [sp + 0xd0]\n 30870: u64 [sp + 0x530] = a0\n 30874: a0 = u64 [sp + 0xe8]\n 30878: u64 [sp + 0x528] = a0\n 30882: a0 = u64 [sp + 0xf0]\n 30886: u64 [sp + 0x520] = a0\n 30890: u64 [sp + 1368] = 0\n 30894: u64 [sp + 1360] = 0\n 30898: u64 [sp + 1352] = 0\n 30902: u64 [sp + 1344] = 0\n 30906: u32 [sp + 0x500] = s1\n 30910: i32 a1 = sp + 0x520\n 30914: i32 a3 = sp + 0x540\n 30918: i32 a4 = sp + 0x500\n 30922: a2 = 0xffffffffffffffff\n 30925: a0 = 0\n 30927: ecalli 6 // 'get_storage'\n 30929: a0 = u64 [sp + 0x548]\n 30933: u64 [sp + 0x80] = a0\n 30937: a0 = u64 [sp + 0x540]\n 30941: u64 [sp + 0x88] = a0\n 30945: a0 = u32 [sp + 0x550]\n 30949: u64 [sp + 0x78] = a0\n 30952: a0 = u64 [sp + 0x30]\n 30955: u64 [sp + 0x538] = a0\n 30959: a0 = u64 [sp + 0x38]\n 30962: u64 [sp + 0x530] = a0\n 30966: a0 = u64 [sp + 0x40]\n 30969: u64 [sp + 0x528] = a0\n 30973: a0 = u64 [sp + 0x48]\n 30976: u64 [sp + 0x520] = a0\n 30980: u64 [sp + 1368] = 0\n 30984: u64 [sp + 1360] = 0\n 30988: u64 [sp + 1352] = 0\n 30992: u64 [sp + 1344] = 0\n 30996: u32 [sp + 0x500] = s1\n 31000: i32 a1 = sp + 0x520\n 31004: i32 a3 = sp + 0x540\n 31008: i32 a4 = sp + 0x500\n 31012: a2 = 0xffffffffffffffff\n 31015: a0 = 0\n 31017: ecalli 6 // 'get_storage'\n 31019: a0 = u64 [sp + 0x558]\n 31023: u64 [sp + 0x50] = a0\n 31026: a0 = u64 [sp + 0x550]\n 31030: u64 [sp + 0x58] = a0\n 31033: a0 = u64 [sp + 0x548]\n 31037: u64 [sp + 0x60] = a0\n 31040: a0 = u64 [sp + 0x540]\n 31044: u64 [sp + 0x68] = a0\n 31047: a0 = u64 [sp + 0xc8]\n 31051: a0 = reverse a0\n 31053: a1 = a0 << 0x20\n 31056: a2 = u64 [sp + 0xd8]\n 31060: a2 = reverse a2\n 31062: a2 = a2 >> 0x20\n 31065: a3 = a2 | a1\n 31068: a0 = a0 >> 0x20\n 31071: a1 = u64 [sp + 0xe0]\n 31075: a1 = reverse a1\n 31077: a2 = a1 << 0x20\n 31080: a0 = a0 | a2\n 31083: a1 = a1 >> 0x20\n 31086: u64 [sp + 0x38] = a0\n 31089: u64 [sp + 0x3a8] = a0\n 31093: u64 [sp + 0x48] = a3\n 31096: u64 [sp + 0x3a0] = a3\n 31100: u64 [sp + 0x40] = a1\n 31103: u32 [sp + 0x3b0] = a1\n 31107: i32 a0 = sp + 0x3a0\n 31111: ecalli 5 // 'code_size'\n 31113: fallthrough\n      : @428 (gas: 1)\n 31114: jump @430 if a0 != 0\n      : @429 (gas: 1)\n 31117: jump @495\n      : @430 (gas: 3)\n 31120: a0 = 0x40\n 31123: a1 = 0x20\n 31126: ra = 366, jump @0\n      : @431 [@dyn 183] (gas: 107)\n 31132: a1 = u8 [a0 + 0x11]\n 31135: a2 = u8 [a0 + 0x10]\n 31138: a3 = u8 [a0 + 0x12]\n 31141: a4 = u8 [a0 + 0x13]\n 31144: a1 = a1 << 0x8\n 31147: a1 = a1 | a2\n 31150: a3 = a3 << 0x10\n 31153: a4 = a4 << 0x18\n 31156: a3 = a3 | a4\n 31159: a1 = a1 | a3\n 31162: a2 = u8 [a0 + 0x15]\n 31165: a3 = u8 [a0 + 0x14]\n 31168: a4 = u8 [a0 + 0x16]\n 31171: a5 = u8 [a0 + 0x17]\n 31174: a2 = a2 << 0x8\n 31177: a2 = a2 | a3\n 31180: a4 = a4 << 0x10\n 31183: a5 = a5 << 0x18\n 31186: a4 = a4 | a5\n 31189: a2 = a2 | a4\n 31192: a2 = a2 << 0x20\n 31195: t1 = a2 | a1\n 31198: a1 = u8 [a0 + 0x1]\n 31201: a2 = u8 [a0]\n 31203: a3 = u8 [a0 + 0x2]\n 31206: a4 = u8 [a0 + 0x3]\n 31209: a1 = a1 << 0x8\n 31212: a1 = a1 | a2\n 31215: a3 = a3 << 0x10\n 31218: a4 = a4 << 0x18\n 31221: a3 = a3 | a4\n 31224: a1 = a1 | a3\n 31227: a2 = u8 [a0 + 0x5]\n 31230: a3 = u8 [a0 + 0x4]\n 31233: a4 = u8 [a0 + 0x6]\n 31236: a5 = u8 [a0 + 0x7]\n 31239: a2 = a2 << 0x8\n 31242: a2 = a2 | a3\n 31245: a4 = a4 << 0x10\n 31248: a5 = a5 << 0x18\n 31251: a4 = a4 | a5\n 31254: a2 = a2 | a4\n 31257: a2 = a2 << 0x20\n 31260: t0 = a2 | a1\n 31263: a1 = u8 [a0 + 0x19]\n 31266: a2 = u8 [a0 + 0x18]\n 31269: a3 = u8 [a0 + 0x1a]\n 31272: a4 = u8 [a0 + 0x1b]\n 31275: a1 = a1 << 0x8\n 31278: a1 = a1 | a2\n 31281: a3 = a3 << 0x10\n 31284: a4 = a4 << 0x18\n 31287: a3 = a3 | a4\n 31290: a1 = a1 | a3\n 31293: a2 = u8 [a0 + 0x1d]\n 31296: a3 = u8 [a0 + 0x1c]\n 31299: a4 = u8 [a0 + 0x1e]\n 31302: a5 = u8 [a0 + 0x1f]\n 31305: a2 = a2 << 0x8\n 31308: a2 = a2 | a3\n 31311: a4 = a4 << 0x10\n 31314: a5 = a5 << 0x18\n 31317: a4 = a4 | a5\n 31320: a2 = a2 | a4\n 31323: a2 = a2 << 0x20\n 31326: a5 = a2 | a1\n 31329: a1 = u8 [a0 + 0x9]\n 31332: a2 = u8 [a0 + 0x8]\n 31335: a3 = u8 [a0 + 0xa]\n 31338: a4 = u8 [a0 + 0xb]\n 31341: a1 = a1 << 0x8\n 31344: a1 = a1 | a2\n 31347: a3 = a3 << 0x10\n 31350: a4 = a4 << 0x18\n 31353: a3 = a3 | a4\n 31356: a1 = a1 | a3\n 31359: a2 = u8 [a0 + 0xd]\n 31362: a3 = u8 [a0 + 0xc]\n 31365: a4 = u8 [a0 + 0xe]\n 31368: a0 = u8 [a0 + 0xf]\n 31371: a2 = a2 << 0x8\n 31374: a2 = a2 | a3\n 31377: a4 = a4 << 0x10\n 31380: a0 = a0 << 0x18\n 31383: a0 = a0 | a4\n 31386: a0 = a0 | a2\n 31389: a0 = a0 << 0x20\n 31392: a0 = a0 | a1\n 31395: u64 [sp + 0x10] = a0\n 31398: s1 = reverse a0\n 31400: u64 [sp + 0x18] = a5\n 31403: a1 = reverse a5\n 31405: u64 [sp + 0x30] = t0\n 31408: a2 = reverse t0\n 31410: u64 [sp + 0x28] = t1\n 31413: a0 = reverse t1\n 31415: u64 [sp + 0xd8] = a0\n 31419: u64 [sp + 0xc0] = a2\n 31423: a0 = a0 | a2\n 31426: u64 [sp + 0xe0] = a1\n 31430: a1 = a1 | s1\n 31433: a1 = a1 | a0\n 31436: a1 = a1 >> 0x20\n 31439: a0 = a0 | s1\n 31442: a0 = a0 << 0x20\n 31445: a0 = a0 | a1\n 31448: jump @433 if a0 == 0\n      : @432 (gas: 1)\n 31451: jump @493\n      : @433 (gas: 4)\n 31454: a0 = i32 [sp + 0xe0]\n 31458: a1 = 0x20\n 31461: u64 [sp + 0xc8] = a0\n 31465: ra = 368, jump @0\n      : @434 [@dyn 184] (gas: 44)\n 31471: u8 [a0 + 31] = 0\n 31474: u8 [a0 + 30] = 0\n 31477: u8 [a0 + 29] = 0\n 31480: u8 [a0 + 28] = 0\n 31483: u8 [a0 + 27] = 0\n 31486: u8 [a0 + 26] = 0\n 31489: u8 [a0 + 25] = 0\n 31492: u8 [a0 + 24] = 0\n 31495: u8 [a0 + 23] = 0\n 31498: u8 [a0 + 22] = 0\n 31501: u8 [a0 + 21] = 0\n 31504: u8 [a0 + 20] = 0\n 31507: u8 [a0 + 19] = 0\n 31510: u8 [a0 + 18] = 0\n 31513: u8 [a0 + 17] = 0\n 31516: u8 [a0 + 16] = 0\n 31519: u8 [a0 + 15] = 0\n 31522: u8 [a0 + 14] = 0\n 31525: u8 [a0 + 13] = 0\n 31528: u8 [a0 + 12] = 0\n 31531: u8 [a0 + 11] = 0\n 31534: u8 [a0 + 10] = 0\n 31537: u8 [a0 + 9] = 0\n 31540: u8 [a0 + 8] = 0\n 31543: u8 [a0 + 7] = 0\n 31546: u8 [a0 + 6] = 0\n 31549: u8 [a0 + 5] = 0\n 31552: u8 [a0 + 3] = 0x42\n 31556: u8 [a0 + 2] = 0x24\n 31560: u8 [a0 + 1] = 0x35\n 31564: u8 [a0 + 0] = 0x65\n 31567: a3 = u64 [sp + 0xc0]\n 31571: a3 = a3 | s1\n 31574: a1 = 0x100000000\n 31584: u64 [sp + 0x70] = a1\n 31587: a1 = 0xfffffffc\n 31597: a2 = u64 [sp + 0xe0]\n 31601: a1 = a2 <u a1\n 31604: a2 = u64 [sp + 0xd8]\n 31608: a1 = 0 if a2 != 0\n 31610: u64 [sp + 0xc0] = a3\n 31614: a1 = 0 if a3 != 0\n 31616: u8 [a0 + 4] = 0\n 31619: jump @436 if a1 != 0\n      : @435 (gas: 1)\n 31622: jump @493\n      : @436 (gas: 19)\n 31625: a0 = u64 [sp + 0x90]\n 31629: a0 = reverse a0\n 31631: a1 = a0 >> 0x20\n 31634: a2 = u64 [sp + 0x98]\n 31638: a2 = reverse a2\n 31640: a3 = a2 << 0x20\n 31643: a1 = a1 | a3\n 31646: u64 [sp + 0x98] = a1\n 31650: a0 = a0 << 0x20\n 31653: a1 = u64 [sp + 0xb8]\n 31657: a1 = reverse a1\n 31659: a1 = a1 >> 0x20\n 31662: a0 = a0 | a1\n 31665: u64 [sp + 0xb8] = a0\n 31669: s1 = a2 >> 0x20\n 31672: a0 = u64 [sp + 0xc8]\n 31676: i32 a0 = a0 + 0x4\n 31679: a1 = 0x20\n 31682: ra = 370, jump @0\n      : @437 [@dyn 185] (gas: 64)\n 31688: a1 = reverse s1\n 31690: a2 = u64 [sp + 0x98]\n 31694: a2 = reverse a2\n 31696: a3 = u64 [sp + 0xb8]\n 31700: a3 = reverse a3\n 31702: a4 = a3 >> 0x38\n 31705: u8 [a0 + 0x1f] = a4\n 31708: a4 = a3 >> 0x30\n 31711: u8 [a0 + 0x1e] = a4\n 31714: a4 = a3 >> 0x28\n 31717: u8 [a0 + 0x1d] = a4\n 31720: a4 = a3 >> 0x20\n 31723: u8 [a0 + 0x1c] = a4\n 31726: a4 = a3 >> 0x18\n 31729: u8 [a0 + 0x1b] = a4\n 31732: a4 = a3 >> 0x10\n 31735: u8 [a0 + 0x1a] = a4\n 31738: a4 = a3 >> 0x8\n 31741: u8 [a0 + 0x19] = a4\n 31744: u8 [a0 + 0x18] = a3\n 31747: u8 [a0 + 0x10] = a2\n 31750: u8 [a0 + 11] = 0\n 31753: u8 [a0 + 10] = 0\n 31756: u8 [a0 + 9] = 0\n 31759: u8 [a0 + 7] = 0\n 31762: u8 [a0 + 6] = 0\n 31765: u8 [a0 + 5] = 0\n 31768: u8 [a0 + 4] = 0\n 31771: u8 [a0 + 3] = 0\n 31774: u8 [a0 + 2] = 0\n 31777: u8 [a0 + 1] = 0\n 31780: u8 [a0 + 0] = 0\n 31782: a3 = a2 >> 0x38\n 31785: u8 [a0 + 0x17] = a3\n 31788: a3 = a2 >> 0x30\n 31791: u8 [a0 + 0x16] = a3\n 31794: a3 = a2 >> 0x28\n 31797: u8 [a0 + 0x15] = a3\n 31800: a3 = a2 >> 0x20\n 31803: u8 [a0 + 0x14] = a3\n 31806: a3 = a2 >> 0x18\n 31809: u8 [a0 + 0x13] = a3\n 31812: a3 = a2 >> 0x10\n 31815: u8 [a0 + 0x12] = a3\n 31818: a2 = a2 >> 0x8\n 31821: u8 [a0 + 0x11] = a2\n 31824: u8 [a0 + 0x8] = a1\n 31827: a2 = a1 >> 0x38\n 31830: u8 [a0 + 0xf] = a2\n 31833: a2 = a1 >> 0x30\n 31836: u8 [a0 + 0xe] = a2\n 31839: a2 = a1 >> 0x28\n 31842: u8 [a0 + 0xd] = a2\n 31845: a1 = a1 >> 0x20\n 31848: a2 = u64 [sp + 0x70]\n 31851: a2 = a2 + 0xffffffffffffffdc\n 31854: a3 = u64 [sp + 0xe0]\n 31858: a2 = a3 <u a2\n 31861: a3 = u64 [sp + 0xd8]\n 31865: a2 = 0 if a3 != 0\n 31867: a3 = u64 [sp + 0xc0]\n 31871: a2 = 0 if a3 != 0\n 31873: u8 [a0 + 0xc] = a1\n 31876: jump @439 if a2 != 0\n      : @438 (gas: 1)\n 31879: jump @493\n      : @439 (gas: 4)\n 31882: a0 = u64 [sp + 0xc8]\n 31886: i32 a0 = a0 + 0x24\n 31889: a1 = 0x20\n 31892: ra = 372, jump @0\n      : @440 [@dyn 186] (gas: 65)\n 31898: a1 = u64 [sp + 0x78]\n 31901: a1 = reverse a1\n 31903: a2 = u64 [sp + 0x80]\n 31907: a2 = reverse a2\n 31909: a3 = u64 [sp + 0x88]\n 31913: a3 = reverse a3\n 31915: a4 = a3 >> 0x38\n 31918: u8 [a0 + 0x1f] = a4\n 31921: a4 = a3 >> 0x30\n 31924: u8 [a0 + 0x1e] = a4\n 31927: a4 = a3 >> 0x28\n 31930: u8 [a0 + 0x1d] = a4\n 31933: a4 = a3 >> 0x20\n 31936: u8 [a0 + 0x1c] = a4\n 31939: a4 = a3 >> 0x18\n 31942: u8 [a0 + 0x1b] = a4\n 31945: a4 = a3 >> 0x10\n 31948: u8 [a0 + 0x1a] = a4\n 31951: a4 = a3 >> 0x8\n 31954: u8 [a0 + 0x19] = a4\n 31957: u8 [a0 + 0x18] = a3\n 31960: u8 [a0 + 0x10] = a2\n 31963: u8 [a0 + 11] = 0\n 31966: u8 [a0 + 10] = 0\n 31969: u8 [a0 + 9] = 0\n 31972: u8 [a0 + 7] = 0\n 31975: u8 [a0 + 6] = 0\n 31978: u8 [a0 + 5] = 0\n 31981: u8 [a0 + 4] = 0\n 31984: u8 [a0 + 3] = 0\n 31987: u8 [a0 + 2] = 0\n 31990: u8 [a0 + 1] = 0\n 31993: u8 [a0 + 0] = 0\n 31995: a3 = a2 >> 0x38\n 31998: u8 [a0 + 0x17] = a3\n 32001: a3 = a2 >> 0x30\n 32004: u8 [a0 + 0x16] = a3\n 32007: a3 = a2 >> 0x28\n 32010: u8 [a0 + 0x15] = a3\n 32013: a3 = a2 >> 0x20\n 32016: u8 [a0 + 0x14] = a3\n 32019: a3 = a2 >> 0x18\n 32022: u8 [a0 + 0x13] = a3\n 32025: a3 = a2 >> 0x10\n 32028: u8 [a0 + 0x12] = a3\n 32031: a2 = a2 >> 0x8\n 32034: u8 [a0 + 0x11] = a2\n 32037: u8 [a0 + 0x8] = a1\n 32040: a2 = a1 >> 0x38\n 32043: u8 [a0 + 0xf] = a2\n 32046: a2 = a1 >> 0x30\n 32049: u8 [a0 + 0xe] = a2\n 32052: a2 = a1 >> 0x28\n 32055: u8 [a0 + 0xd] = a2\n 32058: a1 = a1 >> 0x20\n 32061: s1 = 0x100000000\n 32071: a2 = 0xffffffbc\n 32081: a3 = u64 [sp + 0xe0]\n 32085: a2 = a3 <u a2\n 32088: a3 = u64 [sp + 0xd8]\n 32092: a2 = 0 if a3 != 0\n 32094: a3 = u64 [sp + 0xc0]\n 32098: a2 = 0 if a3 != 0\n 32100: u8 [a0 + 0xc] = a1\n 32103: jump @442 if a2 != 0\n      : @441 (gas: 1)\n 32106: jump @493\n      : @442 (gas: 4)\n 32109: a0 = u64 [sp + 0xc8]\n 32113: i32 a0 = a0 + 0x44\n 32116: a1 = 0x20\n 32119: ra = 374, jump @0\n      : @443 [@dyn 187] (gas: 76)\n 32125: a1 = u64 [sp + 0x50]\n 32128: a1 = reverse a1\n 32130: a2 = u64 [sp + 0x58]\n 32133: a2 = reverse a2\n 32135: a3 = u64 [sp + 0x60]\n 32138: a3 = reverse a3\n 32140: a4 = u64 [sp + 0x68]\n 32143: a4 = reverse a4\n 32145: a5 = a4 >> 0x38\n 32148: u8 [a0 + 0x1f] = a5\n 32151: a5 = a4 >> 0x30\n 32154: u8 [a0 + 0x1e] = a5\n 32157: a5 = a4 >> 0x28\n 32160: u8 [a0 + 0x1d] = a5\n 32163: a5 = a4 >> 0x20\n 32166: u8 [a0 + 0x1c] = a5\n 32169: a5 = a4 >> 0x18\n 32172: u8 [a0 + 0x1b] = a5\n 32175: a5 = a4 >> 0x10\n 32178: u8 [a0 + 0x1a] = a5\n 32181: a5 = a4 >> 0x8\n 32184: u8 [a0 + 0x19] = a5\n 32187: u8 [a0 + 0x18] = a4\n 32190: u8 [a0 + 0x10] = a3\n 32193: a4 = a3 >> 0x38\n 32196: u8 [a0 + 0x17] = a4\n 32199: a4 = a3 >> 0x30\n 32202: u8 [a0 + 0x16] = a4\n 32205: a4 = a3 >> 0x28\n 32208: u8 [a0 + 0x15] = a4\n 32211: a4 = a3 >> 0x20\n 32214: u8 [a0 + 0x14] = a4\n 32217: a4 = a3 >> 0x18\n 32220: u8 [a0 + 0x13] = a4\n 32223: a4 = a3 >> 0x10\n 32226: u8 [a0 + 0x12] = a4\n 32229: a3 = a3 >> 0x8\n 32232: u8 [a0 + 0x11] = a3\n 32235: u8 [a0 + 0x8] = a2\n 32238: a3 = a2 >> 0x38\n 32241: u8 [a0 + 0xf] = a3\n 32244: a3 = a2 >> 0x30\n 32247: u8 [a0 + 0xe] = a3\n 32250: a3 = a2 >> 0x28\n 32253: u8 [a0 + 0xd] = a3\n 32256: a3 = a2 >> 0x20\n 32259: u8 [a0 + 0xc] = a3\n 32262: a3 = a2 >> 0x18\n 32265: u8 [a0 + 0xb] = a3\n 32268: a3 = a2 >> 0x10\n 32271: u8 [a0 + 0xa] = a3\n 32274: a2 = a2 >> 0x8\n 32277: u8 [a0 + 0x9] = a2\n 32280: u8 [a0] = a1\n 32282: a2 = a1 >> 0x38\n 32285: u8 [a0 + 0x7] = a2\n 32288: a2 = a1 >> 0x30\n 32291: u8 [a0 + 0x6] = a2\n 32294: a2 = a1 >> 0x28\n 32297: u8 [a0 + 0x5] = a2\n 32300: a2 = a1 >> 0x20\n 32303: u8 [a0 + 0x4] = a2\n 32306: a2 = a1 >> 0x18\n 32309: u8 [a0 + 0x3] = a2\n 32312: a2 = a1 >> 0x10\n 32315: u8 [a0 + 0x2] = a2\n 32318: a1 = a1 >> 0x8\n 32321: a2 = s1 + 0xffffffffffffff9c\n 32324: a3 = u64 [sp + 0xe0]\n 32328: a2 = a3 <u a2\n 32331: a3 = u64 [sp + 0xd8]\n 32335: a2 = 0 if a3 != 0\n 32337: a3 = u64 [sp + 0xc0]\n 32341: a2 = 0 if a3 != 0\n 32343: u8 [a0 + 0x1] = a1\n 32346: jump @445 if a2 != 0\n      : @444 (gas: 1)\n 32349: jump @493\n      : @445 (gas: 8)\n 32352: a0 = 0x8400000000\n 32362: u64 [sp + 0xd8] = a0\n 32366: a0 = 0x800000000\n 32376: u64 [sp + 0xc0] = a0\n 32380: s1 = u64 [sp + 0xc8]\n 32384: i32 a0 = s1 + 0x64\n 32387: a1 = 0x20\n 32390: ra = 376, jump @0\n      : @446 [@dyn 188] (gas: 46)\n 32396: u8 [a0 + 31] = 0x1\n 32400: u8 [a0 + 30] = 0\n 32403: u8 [a0 + 29] = 0\n 32406: u8 [a0 + 28] = 0\n 32409: u8 [a0 + 27] = 0\n 32412: u8 [a0 + 26] = 0\n 32415: u8 [a0 + 25] = 0\n 32418: u8 [a0 + 24] = 0\n 32421: u8 [a0 + 23] = 0\n 32424: u8 [a0 + 22] = 0\n 32427: u8 [a0 + 21] = 0\n 32430: u8 [a0 + 20] = 0\n 32433: u8 [a0 + 19] = 0\n 32436: u8 [a0 + 18] = 0\n 32439: u8 [a0 + 17] = 0\n 32442: u8 [a0 + 16] = 0\n 32445: u8 [a0 + 15] = 0\n 32448: u8 [a0 + 14] = 0\n 32451: u8 [a0 + 13] = 0\n 32454: u8 [a0 + 12] = 0\n 32457: u8 [a0 + 11] = 0\n 32460: u8 [a0 + 10] = 0\n 32463: u8 [a0 + 9] = 0\n 32466: u8 [a0 + 8] = 0\n 32469: u8 [a0 + 7] = 0\n 32472: u8 [a0 + 6] = 0\n 32475: u8 [a0 + 5] = 0\n 32478: u8 [a0 + 4] = 0\n 32481: u8 [a0 + 3] = 0\n 32484: u8 [a0 + 2] = 0\n 32487: u8 [a0 + 1] = 0\n 32490: u8 [a0 + 0] = 0\n 32492: ecalli 8 // 'ref_time_left'\n 32494: a0 = u64 [sp + 0x38]\n 32497: u64 [sp + 0x3c8] = a0\n 32501: a0 = u64 [sp + 0x48]\n 32504: u64 [sp + 0x3c0] = a0\n 32508: a0 = u64 [sp + 0x40]\n 32511: u32 [sp + 0x3d0] = a0\n 32515: u64 [sp + 1016] = 0\n 32519: u64 [sp + 1008] = 0\n 32523: u64 [sp + 1000] = 0\n 32527: u64 [sp + 992] = 0\n 32531: a1 = 0x84\n 32535: a0 = s1\n 32537: ra = 378, jump @0\n      : @447 [@dyn 189] (gas: 4)\n 32543: u64 [sp + 0xe0] = a0\n 32547: a0 = s1\n 32549: a1 = 0\n 32551: ra = 380, jump @0\n      : @448 [@dyn 190] (gas: 31)\n 32557: u32 [sp + 1024] = 0\n 32561: u64 [sp + 1080] = 0xffffffffffffffff\n 32566: u64 [sp + 1072] = 0xffffffffffffffff\n 32571: u64 [sp + 1064] = 0xffffffffffffffff\n 32576: u64 [sp + 1056] = 0xffffffffffffffff\n 32581: a1 = sp + 0x3c0\n 32585: a1 = a1 << 0x20\n 32588: a1 = a1 >> 0x20\n 32591: s1 = u64 [sp + 0xc0]\n 32595: s1 = s1 | a1\n 32598: a1 = sp + 0x3e0\n 32602: a1 = a1 << 0x20\n 32605: a1 = a1 >> 0x20\n 32608: a2 = sp + 0x420\n 32612: a2 = a2 << 0x20\n 32615: a3 = a2 | a1\n 32618: a1 = u64 [sp + 0xe0]\n 32622: a1 = a1 << 0x20\n 32625: a1 = a1 >> 0x20\n 32628: a4 = u64 [sp + 0xd8]\n 32632: a4 = a4 | a1\n 32635: a0 = a0 << 0x20\n 32638: a0 = a0 >> 0x20\n 32641: a1 = sp + 0x400\n 32645: a1 = a1 << 0x20\n 32648: a5 = a1 | a0\n 32651: a1 = 0xffffffffffffffff\n 32654: a2 = 0xffffffffffffffff\n 32657: a0 = s1\n 32659: ecalli 0 // 'call'\n 32660: fallthrough\n      : @449 (gas: 1)\n 32661: jump @471 if a0 != 0\n      : @450 (gas: 4)\n 32665: ecalli 10 // 'return_data_size'\n 32667: a0 = 0x40\n 32670: a1 = 0x20\n 32673: ra = 382, jump @0\n      : @451 [@dyn 191] (gas: 174)\n 32679: a3 = u64 [sp + 0x18]\n 32682: u8 [a0 + 0x18] = a3\n 32685: a2 = u64 [sp + 0x28]\n 32688: a1 = a2 >> 0x38\n 32691: u8 [a0 + 0x17] = a1\n 32694: a1 = a2 >> 0x30\n 32697: u8 [a0 + 0x16] = a1\n 32700: a1 = a2 >> 0x28\n 32703: u8 [a0 + 0x15] = a1\n 32706: a1 = a2 >> 0x20\n 32709: u8 [a0 + 0x14] = a1\n 32712: a1 = a2 >> 0x18\n 32715: u8 [a0 + 0x13] = a1\n 32718: a1 = a2 >> 0x10\n 32721: u8 [a0 + 0x12] = a1\n 32724: a1 = a2 >> 0x8\n 32727: u8 [a0 + 0x11] = a1\n 32730: u8 [a0 + 0x10] = a2\n 32733: a2 = u64 [sp + 0x10]\n 32736: a1 = a2 >> 0x38\n 32739: u8 [a0 + 0xf] = a1\n 32742: a1 = a2 >> 0x30\n 32745: u8 [a0 + 0xe] = a1\n 32748: a1 = a2 >> 0x28\n 32751: u8 [a0 + 0xd] = a1\n 32754: a1 = a2 >> 0x20\n 32757: u8 [a0 + 0xc] = a1\n 32760: a1 = a2 >> 0x18\n 32763: u8 [a0 + 0xb] = a1\n 32766: a1 = a2 >> 0x10\n 32769: u8 [a0 + 0xa] = a1\n 32772: a1 = a2 >> 0x8\n 32775: u8 [a0 + 0x9] = a1\n 32778: u8 [a0 + 0x8] = a2\n 32781: a2 = u64 [sp + 0x30]\n 32784: a1 = a2 >> 0x38\n 32787: u8 [a0 + 0x7] = a1\n 32790: a1 = a2 >> 0x30\n 32793: u8 [a0 + 0x6] = a1\n 32796: a1 = a2 >> 0x28\n 32799: u8 [a0 + 0x5] = a1\n 32802: a1 = a2 >> 0x20\n 32805: u8 [a0 + 0x4] = a1\n 32808: a1 = a2 >> 0x18\n 32811: u8 [a0 + 0x3] = a1\n 32814: a1 = a2 >> 0x10\n 32817: u8 [a0 + 0x2] = a1\n 32820: a1 = a2 >> 0x8\n 32823: u8 [a0 + 0x1] = a1\n 32826: u8 [a0] = a2\n 32828: a1 = a3 >> 0x38\n 32831: u8 [a0 + 0x1f] = a1\n 32834: a1 = a3 >> 0x30\n 32837: u8 [a0 + 0x1e] = a1\n 32840: a1 = a3 >> 0x28\n 32843: u8 [a0 + 0x1d] = a1\n 32846: a1 = a3 >> 0x20\n 32849: u8 [a0 + 0x1c] = a1\n 32852: a1 = a3 >> 0x18\n 32855: u8 [a0 + 0x1b] = a1\n 32858: a1 = a3 >> 0x10\n 32861: u8 [a0 + 0x1a] = a1\n 32864: a1 = a3 >> 0x8\n 32867: u8 [a0 + 0x19] = a1\n 32870: u64 [sp + 1336] = 0\n 32874: u64 [sp + 1328] = 0\n 32878: u64 [sp + 1320] = 0\n 32882: u64 [sp + 1312] = 0x1\n 32887: u64 [sp + 1368] = 0\n 32891: u64 [sp + 1360] = 0\n 32895: u64 [sp + 1352] = 0\n 32899: u64 [sp + 1344] = 0\n 32903: u32 [sp + 1280] = 0x20\n 32908: i32 a1 = sp + 0x520\n 32912: i32 a3 = sp + 0x540\n 32916: i32 a4 = sp + 0x500\n 32920: a2 = 0xffffffffffffffff\n 32923: a0 = 0\n 32925: ecalli 6 // 'get_storage'\n 32927: a0 = u64 [sp + 0x540]\n 32931: u64 [sp + 0xe0] = a0\n 32935: a0 = u64 [sp + 0x550]\n 32939: u64 [sp + 0xc8] = a0\n 32943: a0 = u64 [sp + 0x548]\n 32947: u64 [sp + 0xb8] = a0\n 32951: a0 = u64 [sp + 0xf8]\n 32955: u64 [sp + 0x538] = a0\n 32959: s1 = u64 [sp + 0xd0]\n 32963: u64 [sp + 0x530] = s1\n 32967: a0 = u64 [sp + 0xe8]\n 32971: u64 [sp + 0x528] = a0\n 32975: a0 = u64 [sp + 0xf0]\n 32979: u64 [sp + 0x520] = a0\n 32983: u64 [sp + 1368] = 0\n 32987: u64 [sp + 1360] = 0\n 32991: u64 [sp + 1352] = 0\n 32995: u64 [sp + 1344] = 0\n 32999: u32 [sp + 1280] = 0x20\n 33004: i32 a1 = sp + 0x520\n 33008: i32 a3 = sp + 0x540\n 33012: i32 a4 = sp + 0x500\n 33016: a2 = 0xffffffffffffffff\n 33019: a0 = 0\n 33021: ecalli 6 // 'get_storage'\n 33023: a0 = u64 [sp + 0x540]\n 33027: u64 [sp + 0x98] = a0\n 33031: a0 = u64 [sp + 0x548]\n 33035: u64 [sp + 0x90] = a0\n 33039: a0 = u64 [sp + 0x550]\n 33043: u64 [sp + 0x88] = a0\n 33047: i32 a0 = sp + 0x440\n 33051: ecalli 4 // 'caller'\n 33053: a0 = i32 [sp + 0x450]\n 33057: u64 [sp + 0x80] = a0\n 33061: a0 = u64 [sp + 0x440]\n 33065: u64 [sp + 0x78] = a0\n 33068: a0 = u64 [sp + 0x448]\n 33072: u64 [sp + 0x70] = a0\n 33075: a0 = u64 [sp + 0xf0]\n 33079: a0 = a0 + 0x1\n 33082: a1 = a0 <u 0x1\n 33085: a2 = u64 [sp + 0xe8]\n 33089: a1 = a1 + a2\n 33092: a2 = a0 | a1\n 33095: a2 = a2 <u 0x1\n 33098: a2 = a2 + s1\n 33101: a3 = a2 <u s1\n 33104: a4 = u64 [sp + 0xf8]\n 33108: a3 = a3 + a4\n 33111: u64 [sp + 0x538] = a3\n 33115: u64 [sp + 0x530] = a2\n 33119: u64 [sp + 0x528] = a1\n 33123: u64 [sp + 0x520] = a0\n 33127: u64 [sp + 1368] = 0\n 33131: u64 [sp + 1360] = 0\n 33135: u64 [sp + 1352] = 0\n 33139: u64 [sp + 1344] = 0\n 33143: u32 [sp + 1280] = 0x20\n 33148: i32 a1 = sp + 0x520\n 33152: i32 a3 = sp + 0x540\n 33156: i32 a4 = sp + 0x500\n 33160: a2 = 0xffffffffffffffff\n 33163: a0 = 0\n 33165: ecalli 6 // 'get_storage'\n 33167: a0 = u64 [sp + 0x558]\n 33171: u64 [sp + 0x50] = a0\n 33174: a0 = u64 [sp + 0x550]\n 33178: u64 [sp + 0x58] = a0\n 33181: a0 = u64 [sp + 0x548]\n 33185: u64 [sp + 0x60] = a0\n 33188: a0 = u64 [sp + 0x540]\n 33192: u64 [sp + 0x68] = a0\n 33195: a0 = u64 [sp + 0xb8]\n 33199: a0 = reverse a0\n 33201: a1 = a0 << 0x20\n 33204: a2 = u64 [sp + 0xc8]\n 33208: a2 = reverse a2\n 33210: a2 = a2 >> 0x20\n 33213: a3 = a2 | a1\n 33216: a0 = a0 >> 0x20\n 33219: a1 = u64 [sp + 0xe0]\n 33223: a1 = reverse a1\n 33225: a2 = a1 << 0x20\n 33228: a0 = a0 | a2\n 33231: a1 = a1 >> 0x20\n 33234: u64 [sp + 0x38] = a0\n 33237: u64 [sp + 0x468] = a0\n 33241: u64 [sp + 0x48] = a3\n 33244: u64 [sp + 0x460] = a3\n 33248: u64 [sp + 0x40] = a1\n 33251: u32 [sp + 0x470] = a1\n 33255: i32 a0 = sp + 0x460\n 33259: ecalli 5 // 'code_size'\n 33261: fallthrough\n      : @452 (gas: 1)\n 33262: jump @454 if a0 != 0\n      : @453 (gas: 1)\n 33265: jump @495\n      : @454 (gas: 3)\n 33268: a0 = 0x40\n 33271: a1 = 0x20\n 33274: ra = 384, jump @0\n      : @455 [@dyn 192] (gas: 107)\n 33281: a1 = u8 [a0 + 0x11]\n 33284: a2 = u8 [a0 + 0x10]\n 33287: a3 = u8 [a0 + 0x12]\n 33290: a4 = u8 [a0 + 0x13]\n 33293: a1 = a1 << 0x8\n 33296: a1 = a1 | a2\n 33299: a3 = a3 << 0x10\n 33302: a4 = a4 << 0x18\n 33305: a3 = a3 | a4\n 33308: a1 = a1 | a3\n 33311: a2 = u8 [a0 + 0x15]\n 33314: a3 = u8 [a0 + 0x14]\n 33317: a4 = u8 [a0 + 0x16]\n 33320: a5 = u8 [a0 + 0x17]\n 33323: a2 = a2 << 0x8\n 33326: a2 = a2 | a3\n 33329: a4 = a4 << 0x10\n 33332: a5 = a5 << 0x18\n 33335: a4 = a4 | a5\n 33338: a2 = a2 | a4\n 33341: a2 = a2 << 0x20\n 33344: t1 = a2 | a1\n 33347: a1 = u8 [a0 + 0x1]\n 33350: a2 = u8 [a0]\n 33352: a3 = u8 [a0 + 0x2]\n 33355: a4 = u8 [a0 + 0x3]\n 33358: a1 = a1 << 0x8\n 33361: a1 = a1 | a2\n 33364: a3 = a3 << 0x10\n 33367: a4 = a4 << 0x18\n 33370: a3 = a3 | a4\n 33373: a1 = a1 | a3\n 33376: a2 = u8 [a0 + 0x5]\n 33379: a3 = u8 [a0 + 0x4]\n 33382: a4 = u8 [a0 + 0x6]\n 33385: a5 = u8 [a0 + 0x7]\n 33388: a2 = a2 << 0x8\n 33391: a2 = a2 | a3\n 33394: a4 = a4 << 0x10\n 33397: a5 = a5 << 0x18\n 33400: a4 = a4 | a5\n 33403: a2 = a2 | a4\n 33406: a2 = a2 << 0x20\n 33409: t0 = a2 | a1\n 33412: a1 = u8 [a0 + 0x19]\n 33415: a2 = u8 [a0 + 0x18]\n 33418: a3 = u8 [a0 + 0x1a]\n 33421: a4 = u8 [a0 + 0x1b]\n 33424: a1 = a1 << 0x8\n 33427: a1 = a1 | a2\n 33430: a3 = a3 << 0x10\n 33433: a4 = a4 << 0x18\n 33436: a3 = a3 | a4\n 33439: a1 = a1 | a3\n 33442: a2 = u8 [a0 + 0x1d]\n 33445: a3 = u8 [a0 + 0x1c]\n 33448: a4 = u8 [a0 + 0x1e]\n 33451: a5 = u8 [a0 + 0x1f]\n 33454: a2 = a2 << 0x8\n 33457: a2 = a2 | a3\n 33460: a4 = a4 << 0x10\n 33463: a5 = a5 << 0x18\n 33466: a4 = a4 | a5\n 33469: a2 = a2 | a4\n 33472: a2 = a2 << 0x20\n 33475: a5 = a2 | a1\n 33478: a1 = u8 [a0 + 0x9]\n 33481: a2 = u8 [a0 + 0x8]\n 33484: a3 = u8 [a0 + 0xa]\n 33487: a4 = u8 [a0 + 0xb]\n 33490: a1 = a1 << 0x8\n 33493: a1 = a1 | a2\n 33496: a3 = a3 << 0x10\n 33499: a4 = a4 << 0x18\n 33502: a3 = a3 | a4\n 33505: a1 = a1 | a3\n 33508: a2 = u8 [a0 + 0xd]\n 33511: a3 = u8 [a0 + 0xc]\n 33514: a4 = u8 [a0 + 0xe]\n 33517: a0 = u8 [a0 + 0xf]\n 33520: a2 = a2 << 0x8\n 33523: a2 = a2 | a3\n 33526: a4 = a4 << 0x10\n 33529: a0 = a0 << 0x18\n 33532: a0 = a0 | a4\n 33535: a0 = a0 | a2\n 33538: a0 = a0 << 0x20\n 33541: a0 = a0 | a1\n 33544: u64 [sp + 0x10] = a0\n 33547: s1 = reverse a0\n 33549: u64 [sp + 0x18] = a5\n 33552: a1 = reverse a5\n 33554: u64 [sp + 0x30] = t0\n 33557: a2 = reverse t0\n 33559: u64 [sp + 0x28] = t1\n 33562: a0 = reverse t1\n 33564: u64 [sp + 0xf0] = a0\n 33568: u64 [sp + 0xe0] = a2\n 33572: a0 = a0 | a2\n 33575: u64 [sp + 0xf8] = a1\n 33579: a1 = a1 | s1\n 33582: a1 = a1 | a0\n 33585: a1 = a1 >> 0x20\n 33588: a0 = a0 | s1\n 33591: a0 = a0 << 0x20\n 33594: a0 = a0 | a1\n 33597: jump @493 if a0 != 0\n      : @456 (gas: 4)\n 33601: a0 = i32 [sp + 0xf8]\n 33605: a1 = 0x20\n 33608: u64 [sp + 0xe8] = a0\n 33612: ra = 386, jump @0\n      : @457 [@dyn 193] (gas: 44)\n 33619: u8 [a0 + 31] = 0\n 33622: u8 [a0 + 30] = 0\n 33625: u8 [a0 + 29] = 0\n 33628: u8 [a0 + 28] = 0\n 33631: u8 [a0 + 27] = 0\n 33634: u8 [a0 + 26] = 0\n 33637: u8 [a0 + 25] = 0\n 33640: u8 [a0 + 24] = 0\n 33643: u8 [a0 + 23] = 0\n 33646: u8 [a0 + 22] = 0\n 33649: u8 [a0 + 21] = 0\n 33652: u8 [a0 + 20] = 0\n 33655: u8 [a0 + 19] = 0\n 33658: u8 [a0 + 18] = 0\n 33661: u8 [a0 + 17] = 0\n 33664: u8 [a0 + 16] = 0\n 33667: u8 [a0 + 15] = 0\n 33670: u8 [a0 + 14] = 0\n 33673: u8 [a0 + 13] = 0\n 33676: u8 [a0 + 12] = 0\n 33679: u8 [a0 + 11] = 0\n 33682: u8 [a0 + 10] = 0\n 33685: u8 [a0 + 9] = 0\n 33688: u8 [a0 + 8] = 0\n 33691: u8 [a0 + 7] = 0\n 33694: u8 [a0 + 6] = 0\n 33697: u8 [a0 + 5] = 0\n 33700: u8 [a0 + 3] = 0x42\n 33704: u8 [a0 + 2] = 0x24\n 33708: u8 [a0 + 1] = 0x35\n 33712: u8 [a0 + 0] = 0x65\n 33715: a3 = u64 [sp + 0xe0]\n 33719: a3 = a3 | s1\n 33722: a1 = 0x100000000\n 33732: u64 [sp + 0xd0] = a1\n 33736: a1 = 0xfffffffc\n 33746: a2 = u64 [sp + 0xf8]\n 33750: a1 = a2 <u a1\n 33753: a2 = u64 [sp + 0xf0]\n 33757: a1 = 0 if a2 != 0\n 33759: u64 [sp + 0xe0] = a3\n 33763: a1 = 0 if a3 != 0\n 33765: u8 [a0 + 4] = 0\n 33768: jump @493 if a1 == 0\n      : @458 (gas: 13)\n 33772: a0 = 0xffffffff\n 33782: s1 = u64 [sp + 0x88]\n 33786: s1 = s1 & a0\n 33789: a0 = u64 [sp + 0x90]\n 33793: a0 = a0 & 0xffffffffffffffff\n 33796: u64 [sp + 0xb8] = a0\n 33800: a0 = u64 [sp + 0x98]\n 33804: a0 = a0 & 0xffffffffffffffff\n 33807: u64 [sp + 0xc8] = a0\n 33811: a0 = u64 [sp + 0xe8]\n 33815: i32 a0 = a0 + 0x4\n 33818: a1 = 0x20\n 33821: ra = 388, jump @0\n      : @459 [@dyn 194] (gas: 64)\n 33828: a1 = reverse s1\n 33830: a2 = u64 [sp + 0xb8]\n 33834: a2 = reverse a2\n 33836: a3 = u64 [sp + 0xc8]\n 33840: a3 = reverse a3\n 33842: a4 = a3 >> 0x38\n 33845: u8 [a0 + 0x1f] = a4\n 33848: a4 = a3 >> 0x30\n 33851: u8 [a0 + 0x1e] = a4\n 33854: a4 = a3 >> 0x28\n 33857: u8 [a0 + 0x1d] = a4\n 33860: a4 = a3 >> 0x20\n 33863: u8 [a0 + 0x1c] = a4\n 33866: a4 = a3 >> 0x18\n 33869: u8 [a0 + 0x1b] = a4\n 33872: a4 = a3 >> 0x10\n 33875: u8 [a0 + 0x1a] = a4\n 33878: a4 = a3 >> 0x8\n 33881: u8 [a0 + 0x19] = a4\n 33884: u8 [a0 + 0x18] = a3\n 33887: u8 [a0 + 0x10] = a2\n 33890: u8 [a0 + 11] = 0\n 33893: u8 [a0 + 10] = 0\n 33896: u8 [a0 + 9] = 0\n 33899: u8 [a0 + 7] = 0\n 33902: u8 [a0 + 6] = 0\n 33905: u8 [a0 + 5] = 0\n 33908: u8 [a0 + 4] = 0\n 33911: u8 [a0 + 3] = 0\n 33914: u8 [a0 + 2] = 0\n 33917: u8 [a0 + 1] = 0\n 33920: u8 [a0 + 0] = 0\n 33922: a3 = a2 >> 0x38\n 33925: u8 [a0 + 0x17] = a3\n 33928: a3 = a2 >> 0x30\n 33931: u8 [a0 + 0x16] = a3\n 33934: a3 = a2 >> 0x28\n 33937: u8 [a0 + 0x15] = a3\n 33940: a3 = a2 >> 0x20\n 33943: u8 [a0 + 0x14] = a3\n 33946: a3 = a2 >> 0x18\n 33949: u8 [a0 + 0x13] = a3\n 33952: a3 = a2 >> 0x10\n 33955: u8 [a0 + 0x12] = a3\n 33958: a2 = a2 >> 0x8\n 33961: u8 [a0 + 0x11] = a2\n 33964: u8 [a0 + 0x8] = a1\n 33967: a2 = a1 >> 0x38\n 33970: u8 [a0 + 0xf] = a2\n 33973: a2 = a1 >> 0x30\n 33976: u8 [a0 + 0xe] = a2\n 33979: a2 = a1 >> 0x28\n 33982: u8 [a0 + 0xd] = a2\n 33985: a1 = a1 >> 0x20\n 33988: a2 = u64 [sp + 0xd0]\n 33992: a2 = a2 + 0xffffffffffffffdc\n 33995: a3 = u64 [sp + 0xf8]\n 33999: a2 = a3 <u a2\n 34002: a3 = u64 [sp + 0xf0]\n 34006: a2 = 0 if a3 != 0\n 34008: a3 = u64 [sp + 0xe0]\n 34012: a2 = 0 if a3 != 0\n 34014: u8 [a0 + 0xc] = a1\n 34017: jump @493 if a2 == 0\n      : @460 (gas: 19)\n 34021: a0 = u64 [sp + 0x70]\n 34024: a0 = reverse a0\n 34026: a1 = a0 >> 0x20\n 34029: a2 = u64 [sp + 0x78]\n 34032: a2 = reverse a2\n 34034: a3 = a2 << 0x20\n 34037: a1 = a1 | a3\n 34040: u64 [sp + 0xd0] = a1\n 34044: a0 = a0 << 0x20\n 34047: a1 = u64 [sp + 0x80]\n 34051: a1 = reverse a1\n 34053: a1 = a1 >> 0x20\n 34056: a0 = a0 | a1\n 34059: u64 [sp + 0xc8] = a0\n 34063: s1 = a2 >> 0x20\n 34066: a0 = u64 [sp + 0xe8]\n 34070: i32 a0 = a0 + 0x24\n 34073: a1 = 0x20\n 34076: ra = 390, jump @0\n      : @461 [@dyn 195] (gas: 64)\n 34083: a1 = reverse s1\n 34085: a2 = u64 [sp + 0xd0]\n 34089: a2 = reverse a2\n 34091: a3 = u64 [sp + 0xc8]\n 34095: a3 = reverse a3\n 34097: a4 = a3 >> 0x38\n 34100: u8 [a0 + 0x1f] = a4\n 34103: a4 = a3 >> 0x30\n 34106: u8 [a0 + 0x1e] = a4\n 34109: a4 = a3 >> 0x28\n 34112: u8 [a0 + 0x1d] = a4\n 34115: a4 = a3 >> 0x20\n 34118: u8 [a0 + 0x1c] = a4\n 34121: a4 = a3 >> 0x18\n 34124: u8 [a0 + 0x1b] = a4\n 34127: a4 = a3 >> 0x10\n 34130: u8 [a0 + 0x1a] = a4\n 34133: a4 = a3 >> 0x8\n 34136: u8 [a0 + 0x19] = a4\n 34139: u8 [a0 + 0x18] = a3\n 34142: u8 [a0 + 0x10] = a2\n 34145: u8 [a0 + 11] = 0\n 34148: u8 [a0 + 10] = 0\n 34151: u8 [a0 + 9] = 0\n 34154: u8 [a0 + 7] = 0\n 34157: u8 [a0 + 6] = 0\n 34160: u8 [a0 + 5] = 0\n 34163: u8 [a0 + 4] = 0\n 34166: u8 [a0 + 3] = 0\n 34169: u8 [a0 + 2] = 0\n 34172: u8 [a0 + 1] = 0\n 34175: u8 [a0 + 0] = 0\n 34177: a3 = a2 >> 0x38\n 34180: u8 [a0 + 0x17] = a3\n 34183: a3 = a2 >> 0x30\n 34186: u8 [a0 + 0x16] = a3\n 34189: a3 = a2 >> 0x28\n 34192: u8 [a0 + 0x15] = a3\n 34195: a3 = a2 >> 0x20\n 34198: u8 [a0 + 0x14] = a3\n 34201: a3 = a2 >> 0x18\n 34204: u8 [a0 + 0x13] = a3\n 34207: a3 = a2 >> 0x10\n 34210: u8 [a0 + 0x12] = a3\n 34213: a2 = a2 >> 0x8\n 34216: u8 [a0 + 0x11] = a2\n 34219: u8 [a0 + 0x8] = a1\n 34222: a2 = a1 >> 0x38\n 34225: u8 [a0 + 0xf] = a2\n 34228: a2 = a1 >> 0x30\n 34231: u8 [a0 + 0xe] = a2\n 34234: a2 = a1 >> 0x28\n 34237: u8 [a0 + 0xd] = a2\n 34240: a1 = a1 >> 0x20\n 34243: s1 = 0x100000000\n 34253: a2 = 0xffffffbc\n 34263: a3 = u64 [sp + 0xf8]\n 34267: a2 = a3 <u a2\n 34270: a3 = u64 [sp + 0xf0]\n 34274: a2 = 0 if a3 != 0\n 34276: a3 = u64 [sp + 0xe0]\n 34280: a2 = 0 if a3 != 0\n 34282: u8 [a0 + 0xc] = a1\n 34285: jump @493 if a2 == 0\n      : @462 (gas: 4)\n 34289: a0 = u64 [sp + 0xe8]\n 34293: i32 a0 = a0 + 0x44\n 34296: a1 = 0x20\n 34299: ra = 392, jump @0\n      : @463 [@dyn 196] (gas: 76)\n 34306: a1 = u64 [sp + 0x50]\n 34309: a1 = reverse a1\n 34311: a2 = u64 [sp + 0x58]\n 34314: a2 = reverse a2\n 34316: a3 = u64 [sp + 0x60]\n 34319: a3 = reverse a3\n 34321: a4 = u64 [sp + 0x68]\n 34324: a4 = reverse a4\n 34326: a5 = a4 >> 0x38\n 34329: u8 [a0 + 0x1f] = a5\n 34332: a5 = a4 >> 0x30\n 34335: u8 [a0 + 0x1e] = a5\n 34338: a5 = a4 >> 0x28\n 34341: u8 [a0 + 0x1d] = a5\n 34344: a5 = a4 >> 0x20\n 34347: u8 [a0 + 0x1c] = a5\n 34350: a5 = a4 >> 0x18\n 34353: u8 [a0 + 0x1b] = a5\n 34356: a5 = a4 >> 0x10\n 34359: u8 [a0 + 0x1a] = a5\n 34362: a5 = a4 >> 0x8\n 34365: u8 [a0 + 0x19] = a5\n 34368: u8 [a0 + 0x18] = a4\n 34371: u8 [a0 + 0x10] = a3\n 34374: a4 = a3 >> 0x38\n 34377: u8 [a0 + 0x17] = a4\n 34380: a4 = a3 >> 0x30\n 34383: u8 [a0 + 0x16] = a4\n 34386: a4 = a3 >> 0x28\n 34389: u8 [a0 + 0x15] = a4\n 34392: a4 = a3 >> 0x20\n 34395: u8 [a0 + 0x14] = a4\n 34398: a4 = a3 >> 0x18\n 34401: u8 [a0 + 0x13] = a4\n 34404: a4 = a3 >> 0x10\n 34407: u8 [a0 + 0x12] = a4\n 34410: a3 = a3 >> 0x8\n 34413: u8 [a0 + 0x11] = a3\n 34416: u8 [a0 + 0x8] = a2\n 34419: a3 = a2 >> 0x38\n 34422: u8 [a0 + 0xf] = a3\n 34425: a3 = a2 >> 0x30\n 34428: u8 [a0 + 0xe] = a3\n 34431: a3 = a2 >> 0x28\n 34434: u8 [a0 + 0xd] = a3\n 34437: a3 = a2 >> 0x20\n 34440: u8 [a0 + 0xc] = a3\n 34443: a3 = a2 >> 0x18\n 34446: u8 [a0 + 0xb] = a3\n 34449: a3 = a2 >> 0x10\n 34452: u8 [a0 + 0xa] = a3\n 34455: a2 = a2 >> 0x8\n 34458: u8 [a0 + 0x9] = a2\n 34461: u8 [a0] = a1\n 34463: a2 = a1 >> 0x38\n 34466: u8 [a0 + 0x7] = a2\n 34469: a2 = a1 >> 0x30\n 34472: u8 [a0 + 0x6] = a2\n 34475: a2 = a1 >> 0x28\n 34478: u8 [a0 + 0x5] = a2\n 34481: a2 = a1 >> 0x20\n 34484: u8 [a0 + 0x4] = a2\n 34487: a2 = a1 >> 0x18\n 34490: u8 [a0 + 0x3] = a2\n 34493: a2 = a1 >> 0x10\n 34496: u8 [a0 + 0x2] = a2\n 34499: a1 = a1 >> 0x8\n 34502: a2 = s1 + 0xffffffffffffff9c\n 34505: a3 = u64 [sp + 0xf8]\n 34509: a2 = a3 <u a2\n 34512: a3 = u64 [sp + 0xf0]\n 34516: a2 = 0 if a3 != 0\n 34518: a3 = u64 [sp + 0xe0]\n 34522: a2 = 0 if a3 != 0\n 34524: u8 [a0 + 0x1] = a1\n 34527: jump @493 if a2 == 0\n      : @464 (gas: 4)\n 34531: s1 = u64 [sp + 0xe8]\n 34535: i32 a0 = s1 + 0x64\n 34538: a1 = 0x20\n 34541: ra = 394, jump @0\n      : @465 [@dyn 197] (gas: 46)\n 34548: u8 [a0 + 31] = 0x1\n 34552: u8 [a0 + 30] = 0\n 34555: u8 [a0 + 29] = 0\n 34558: u8 [a0 + 28] = 0\n 34561: u8 [a0 + 27] = 0\n 34564: u8 [a0 + 26] = 0\n 34567: u8 [a0 + 25] = 0\n 34570: u8 [a0 + 24] = 0\n 34573: u8 [a0 + 23] = 0\n 34576: u8 [a0 + 22] = 0\n 34579: u8 [a0 + 21] = 0\n 34582: u8 [a0 + 20] = 0\n 34585: u8 [a0 + 19] = 0\n 34588: u8 [a0 + 18] = 0\n 34591: u8 [a0 + 17] = 0\n 34594: u8 [a0 + 16] = 0\n 34597: u8 [a0 + 15] = 0\n 34600: u8 [a0 + 14] = 0\n 34603: u8 [a0 + 13] = 0\n 34606: u8 [a0 + 12] = 0\n 34609: u8 [a0 + 11] = 0\n 34612: u8 [a0 + 10] = 0\n 34615: u8 [a0 + 9] = 0\n 34618: u8 [a0 + 8] = 0\n 34621: u8 [a0 + 7] = 0\n 34624: u8 [a0 + 6] = 0\n 34627: u8 [a0 + 5] = 0\n 34630: u8 [a0 + 4] = 0\n 34633: u8 [a0 + 3] = 0\n 34636: u8 [a0 + 2] = 0\n 34639: u8 [a0 + 1] = 0\n 34642: u8 [a0 + 0] = 0\n 34644: ecalli 8 // 'ref_time_left'\n 34646: a0 = u64 [sp + 0x38]\n 34649: u64 [sp + 0x488] = a0\n 34653: a0 = u64 [sp + 0x48]\n 34656: u64 [sp + 0x480] = a0\n 34660: a0 = u64 [sp + 0x40]\n 34663: u32 [sp + 0x490] = a0\n 34667: u64 [sp + 1208] = 0\n 34671: u64 [sp + 1200] = 0\n 34675: u64 [sp + 1192] = 0\n 34679: u64 [sp + 1184] = 0\n 34683: a1 = 0x84\n 34687: a0 = s1\n 34689: ra = 396, jump @0\n      : @466 [@dyn 198] (gas: 4)\n 34696: u64 [sp + 0xf8] = a0\n 34700: a0 = s1\n 34702: a1 = 0\n 34704: ra = 398, jump @0\n      : @467 [@dyn 199] (gas: 31)\n 34711: u32 [sp + 1216] = 0\n 34715: u64 [sp + 1272] = 0xffffffffffffffff\n 34720: u64 [sp + 1264] = 0xffffffffffffffff\n 34725: u64 [sp + 1256] = 0xffffffffffffffff\n 34730: u64 [sp + 1248] = 0xffffffffffffffff\n 34735: a1 = sp + 0x480\n 34739: a1 = a1 << 0x20\n 34742: a1 = a1 >> 0x20\n 34745: s1 = u64 [sp + 0xc0]\n 34749: s1 = s1 | a1\n 34752: a1 = sp + 0x4a0\n 34756: a1 = a1 << 0x20\n 34759: a1 = a1 >> 0x20\n 34762: a2 = sp + 0x4e0\n 34766: a2 = a2 << 0x20\n 34769: a3 = a2 | a1\n 34772: a1 = u64 [sp + 0xf8]\n 34776: a1 = a1 << 0x20\n 34779: a1 = a1 >> 0x20\n 34782: a4 = u64 [sp + 0xd8]\n 34786: a4 = a4 | a1\n 34789: a0 = a0 << 0x20\n 34792: a0 = a0 >> 0x20\n 34795: a1 = sp + 0x4c0\n 34799: a1 = a1 << 0x20\n 34802: a5 = a1 | a0\n 34805: a1 = 0xffffffffffffffff\n 34808: a2 = 0xffffffffffffffff\n 34811: a0 = s1\n 34813: ecalli 0 // 'call'\n 34814: fallthrough\n      : @468 (gas: 1)\n 34815: jump @471 if a0 != 0\n      : @469 (gas: 4)\n 34819: ecalli 10 // 'return_data_size'\n 34821: a0 = 0x40\n 34824: a1 = 0x20\n 34827: ra = 400, jump @0\n      : @470 [@dyn 200] (gas: 111)\n 34834: a3 = u64 [sp + 0x18]\n 34837: u8 [a0 + 0x18] = a3\n 34840: a2 = u64 [sp + 0x28]\n 34843: a1 = a2 >> 0x38\n 34846: u8 [a0 + 0x17] = a1\n 34849: a1 = a2 >> 0x30\n 34852: u8 [a0 + 0x16] = a1\n 34855: a1 = a2 >> 0x28\n 34858: u8 [a0 + 0x15] = a1\n 34861: a1 = a2 >> 0x20\n 34864: u8 [a0 + 0x14] = a1\n 34867: a1 = a2 >> 0x18\n 34870: u8 [a0 + 0x13] = a1\n 34873: a1 = a2 >> 0x10\n 34876: u8 [a0 + 0x12] = a1\n 34879: a1 = a2 >> 0x8\n 34882: u8 [a0 + 0x11] = a1\n 34885: u8 [a0 + 0x10] = a2\n 34888: a2 = u64 [sp + 0x10]\n 34891: a1 = a2 >> 0x38\n 34894: u8 [a0 + 0xf] = a1\n 34897: a1 = a2 >> 0x30\n 34900: u8 [a0 + 0xe] = a1\n 34903: a1 = a2 >> 0x28\n 34906: u8 [a0 + 0xd] = a1\n 34909: a1 = a2 >> 0x20\n 34912: u8 [a0 + 0xc] = a1\n 34915: a1 = a2 >> 0x18\n 34918: u8 [a0 + 0xb] = a1\n 34921: a1 = a2 >> 0x10\n 34924: u8 [a0 + 0xa] = a1\n 34927: a1 = a2 >> 0x8\n 34930: u8 [a0 + 0x9] = a1\n 34933: u8 [a0 + 0x8] = a2\n 34936: a2 = u64 [sp + 0x30]\n 34939: a1 = a2 >> 0x38\n 34942: u8 [a0 + 0x7] = a1\n 34945: a1 = a2 >> 0x30\n 34948: u8 [a0 + 0x6] = a1\n 34951: a1 = a2 >> 0x28\n 34954: u8 [a0 + 0x5] = a1\n 34957: a1 = a2 >> 0x20\n 34960: u8 [a0 + 0x4] = a1\n 34963: a1 = a2 >> 0x18\n 34966: u8 [a0 + 0x3] = a1\n 34969: a1 = a2 >> 0x10\n 34972: u8 [a0 + 0x2] = a1\n 34975: a1 = a2 >> 0x8\n 34978: u8 [a0 + 0x1] = a1\n 34981: u8 [a0] = a2\n 34983: a1 = a3 >> 0x38\n 34986: u8 [a0 + 0x1f] = a1\n 34989: a1 = a3 >> 0x30\n 34992: u8 [a0 + 0x1e] = a1\n 34995: a1 = a3 >> 0x28\n 34998: u8 [a0 + 0x1d] = a1\n 35001: a1 = a3 >> 0x20\n 35004: u8 [a0 + 0x1c] = a1\n 35007: a1 = a3 >> 0x18\n 35010: u8 [a0 + 0x1b] = a1\n 35013: a1 = a3 >> 0x10\n 35016: u8 [a0 + 0x1a] = a1\n 35019: a1 = a3 >> 0x8\n 35022: u8 [a0 + 0x19] = a1\n 35025: a0 = u64 [sp + 0xa0]\n 35029: u64 [sp + 0x538] = a0\n 35033: a0 = u64 [sp + 0xa8]\n 35037: u64 [sp + 0x530] = a0\n 35041: a0 = u64 [sp + 0xb0]\n 35045: u64 [sp + 0x528] = a0\n 35049: s1 = u64 [sp + 0x20]\n 35052: u64 [sp + 0x520] = s1\n 35056: u64 [sp + 1368] = 0\n 35060: u64 [sp + 1360] = 0\n 35064: u64 [sp + 1352] = 0\n 35068: u64 [sp + 1344] = 0\n 35072: u32 [sp + 1280] = 0x20\n 35077: i32 a1 = sp + 0x520\n 35081: i32 a3 = sp + 0x540\n 35085: i32 a4 = sp + 0x500\n 35089: a2 = 0xffffffffffffffff\n 35092: a0 = 0\n 35094: ecalli 6 // 'get_storage'\n 35096: a0 = u64 [sp + 0x540]\n 35100: a1 = u64 [sp + 0x548]\n 35104: a2 = u64 [sp + 0x550]\n 35108: a3 = u64 [sp + 0x558]\n 35112: a0 = a0 & 0xffffffffffffff00\n 35116: a4 = u64 [sp + 0xa0]\n 35120: u64 [sp + 0x538] = a4\n 35124: a4 = u64 [sp + 0xa8]\n 35128: u64 [sp + 0x530] = a4\n 35132: a4 = u64 [sp + 0xb0]\n 35136: u64 [sp + 0x528] = a4\n 35140: u64 [sp + 0x520] = s1\n 35144: u64 [sp + 0x558] = a3\n 35148: u64 [sp + 0x550] = a2\n 35152: u64 [sp + 0x548] = a1\n 35156: u64 [sp + 0x540] = a0\n 35160: i32 a1 = sp + 0x520\n 35164: i32 a3 = sp + 0x540\n 35168: a2 = 0xffffffffffffffff\n 35171: a4 = 0x20\n 35174: a0 = 0\n 35176: ecalli 13 // 'set_storage'\n 35178: sp = s0 + 0xfffffffffffffa80\n 35182: ra = u64 [sp + 0x578]\n 35186: s0 = u64 [sp + 0x570]\n 35190: s1 = u64 [sp + 0x568]\n 35194: sp = sp + 0x580\n 35198: ret\n      : @471 (gas: 1)\n 35200: ra = 402, jump @211\n      : @472 [@dyn 201] (gas: 3)\n 35206: a0 = 0x40\n 35209: a1 = 0x20\n 35212: ra = 404, jump @0\n      : @473 [@dyn 202] (gas: 103)\n 35219: a1 = u8 [a0 + 0x11]\n 35222: a2 = u8 [a0 + 0x10]\n 35225: a3 = u8 [a0 + 0x12]\n 35228: a4 = u8 [a0 + 0x13]\n 35231: a1 = a1 << 0x8\n 35234: a1 = a1 | a2\n 35237: a3 = a3 << 0x10\n 35240: a4 = a4 << 0x18\n 35243: a3 = a3 | a4\n 35246: a1 = a1 | a3\n 35249: a2 = u8 [a0 + 0x15]\n 35252: a3 = u8 [a0 + 0x14]\n 35255: a4 = u8 [a0 + 0x16]\n 35258: a5 = u8 [a0 + 0x17]\n 35261: a2 = a2 << 0x8\n 35264: a2 = a2 | a3\n 35267: a4 = a4 << 0x10\n 35270: a5 = a5 << 0x18\n 35273: a4 = a4 | a5\n 35276: a2 = a2 | a4\n 35279: a2 = a2 << 0x20\n 35282: t0 = a2 | a1\n 35285: a2 = u8 [a0 + 0x1]\n 35288: a3 = u8 [a0]\n 35290: a4 = u8 [a0 + 0x2]\n 35293: a5 = u8 [a0 + 0x3]\n 35296: a2 = a2 << 0x8\n 35299: a2 = a2 | a3\n 35302: a4 = a4 << 0x10\n 35305: a5 = a5 << 0x18\n 35308: a4 = a4 | a5\n 35311: a2 = a2 | a4\n 35314: a3 = u8 [a0 + 0x5]\n 35317: a4 = u8 [a0 + 0x4]\n 35320: a5 = u8 [a0 + 0x6]\n 35323: s1 = u8 [a0 + 0x7]\n 35326: a3 = a3 << 0x8\n 35329: a3 = a3 | a4\n 35332: a5 = a5 << 0x10\n 35335: s1 = s1 << 0x18\n 35338: a5 = a5 | s1\n 35341: a3 = a3 | a5\n 35344: a3 = a3 << 0x20\n 35347: a2 = a2 | a3\n 35350: a3 = u8 [a0 + 0x19]\n 35353: a4 = u8 [a0 + 0x18]\n 35356: a5 = u8 [a0 + 0x1a]\n 35359: s1 = u8 [a0 + 0x1b]\n 35362: a3 = a3 << 0x8\n 35365: a3 = a3 | a4\n 35368: a5 = a5 << 0x10\n 35371: s1 = s1 << 0x18\n 35374: a5 = a5 | s1\n 35377: a3 = a3 | a5\n 35380: a4 = u8 [a0 + 0x1d]\n 35383: a5 = u8 [a0 + 0x1c]\n 35386: s1 = u8 [a0 + 0x1e]\n 35389: a1 = u8 [a0 + 0x1f]\n 35392: a4 = a4 << 0x8\n 35395: a4 = a4 | a5\n 35398: s1 = s1 << 0x10\n 35401: a1 = a1 << 0x18\n 35404: a1 = a1 | s1\n 35407: a1 = a1 | a4\n 35410: a1 = a1 << 0x20\n 35413: a3 = a3 | a1\n 35416: a1 = u8 [a0 + 0x9]\n 35419: a4 = u8 [a0 + 0x8]\n 35422: a5 = u8 [a0 + 0xa]\n 35425: s1 = u8 [a0 + 0xb]\n 35428: a1 = a1 << 0x8\n 35431: a1 = a1 | a4\n 35434: a5 = a5 << 0x10\n 35437: s1 = s1 << 0x18\n 35440: a5 = a5 | s1\n 35443: a1 = a1 | a5\n 35446: a4 = u8 [a0 + 0xd]\n 35449: a5 = u8 [a0 + 0xc]\n 35452: s1 = u8 [a0 + 0xe]\n 35455: a0 = u8 [a0 + 0xf]\n 35458: a4 = a4 << 0x8\n 35461: a4 = a4 | a5\n 35464: s1 = s1 << 0x10\n 35467: a0 = a0 << 0x18\n 35470: a0 = a0 | s1\n 35473: a0 = a0 | a4\n 35476: a0 = a0 << 0x20\n 35479: a0 = a0 | a1\n 35482: s1 = reverse a0\n 35484: a1 = reverse a3\n 35486: a2 = reverse a2\n 35488: a0 = reverse t0\n 35490: u64 [sp + 0xf8] = a0\n 35494: u64 [sp + 0xf0] = a2\n 35498: a0 = a0 | a2\n 35501: a2 = a1\n 35503: a1 = a1 | s1\n 35506: a1 = a1 | a0\n 35509: a1 = a1 >> 0x20\n 35512: a0 = a0 | s1\n 35515: a0 = a0 << 0x20\n 35518: a0 = a0 | a1\n 35521: jump @493 if a0 != 0\n      : @474 (gas: 5)\n 35525: u64 [sp + 0xe8] = a2\n 35529: i32 a0 = a2 + 0\n 35531: a1 = 0x20\n 35534: u64 [sp + 0xe0] = a0\n 35538: ra = 406, jump @0\n      : @475 [@dyn 203] (gas: 50)\n 35545: u8 [a0 + 31] = 0\n 35548: u8 [a0 + 30] = 0\n 35551: u8 [a0 + 29] = 0\n 35554: u8 [a0 + 28] = 0\n 35557: u8 [a0 + 27] = 0\n 35560: u8 [a0 + 26] = 0\n 35563: u8 [a0 + 25] = 0\n 35566: u8 [a0 + 24] = 0\n 35569: u8 [a0 + 23] = 0\n 35572: u8 [a0 + 22] = 0\n 35575: u8 [a0 + 21] = 0\n 35578: u8 [a0 + 20] = 0\n 35581: u8 [a0 + 19] = 0\n 35584: u8 [a0 + 18] = 0\n 35587: u8 [a0 + 17] = 0\n 35590: u8 [a0 + 16] = 0\n 35593: u8 [a0 + 15] = 0\n 35596: u8 [a0 + 14] = 0\n 35599: u8 [a0 + 13] = 0\n 35602: u8 [a0 + 12] = 0\n 35605: u8 [a0 + 11] = 0\n 35608: u8 [a0 + 10] = 0\n 35611: u8 [a0 + 9] = 0\n 35614: u8 [a0 + 8] = 0\n 35617: u8 [a0 + 7] = 0\n 35620: u8 [a0 + 6] = 0\n 35623: u8 [a0 + 5] = 0\n 35626: u8 [a0 + 4] = 0\n 35629: u8 [a0 + 3] = 0xa0\n 35634: u8 [a0 + 2] = 0x79\n 35638: u8 [a0 + 1] = 0xc3\n 35643: u8 [a0 + 0] = 0x8\n 35646: a1 = u64 [sp + 0xe8]\n 35650: a0 = a1 + 0x4\n 35653: a1 = a0 <u a1\n 35656: a3 = u64 [sp + 0xf8]\n 35660: a2 = a3 + a1\n 35663: a3 = a2 <u a3\n 35666: a3 = a1 if a1 == 0\n 35669: a3 = a3 + s1\n 35672: a1 = a3 <u s1\n 35675: a4 = u64 [sp + 0xf0]\n 35679: a4 = a4 + a1\n 35682: u64 [sp + 0x288] = a2\n 35686: u64 [sp + 0x280] = a0\n 35690: u64 [sp + 0x290] = a3\n 35694: a0 = sp + 0x2a0\n 35698: a1 = sp + 0x280\n 35702: u64 [sp + 0x298] = a4\n 35706: ra = 408, jump @353\n      : @476 [@dyn 204] (gas: 5)\n 35712: a0 = u64 [sp + 0x2a8]\n 35716: t0 = u64 [sp + 0x2b8]\n 35720: t1 = u64 [sp + 0x2a0]\n 35724: a3 = u64 [sp + 0x2b0]\n 35728: jump @492\n      : @477 (gas: 3)\n 35731: a0 = 0x40\n 35734: a1 = 0x20\n 35737: ra = 410, jump @0\n      : @478 [@dyn 205] (gas: 103)\n 35744: a1 = u8 [a0 + 0x11]\n 35747: a2 = u8 [a0 + 0x10]\n 35750: a3 = u8 [a0 + 0x12]\n 35753: a4 = u8 [a0 + 0x13]\n 35756: a1 = a1 << 0x8\n 35759: a1 = a1 | a2\n 35762: a3 = a3 << 0x10\n 35765: a4 = a4 << 0x18\n 35768: a3 = a3 | a4\n 35771: a1 = a1 | a3\n 35774: a2 = u8 [a0 + 0x15]\n 35777: a3 = u8 [a0 + 0x14]\n 35780: a4 = u8 [a0 + 0x16]\n 35783: a5 = u8 [a0 + 0x17]\n 35786: a2 = a2 << 0x8\n 35789: a2 = a2 | a3\n 35792: a4 = a4 << 0x10\n 35795: a5 = a5 << 0x18\n 35798: a4 = a4 | a5\n 35801: a2 = a2 | a4\n 35804: a2 = a2 << 0x20\n 35807: t0 = a2 | a1\n 35810: a2 = u8 [a0 + 0x1]\n 35813: a3 = u8 [a0]\n 35815: a4 = u8 [a0 + 0x2]\n 35818: a5 = u8 [a0 + 0x3]\n 35821: a2 = a2 << 0x8\n 35824: a2 = a2 | a3\n 35827: a4 = a4 << 0x10\n 35830: a5 = a5 << 0x18\n 35833: a4 = a4 | a5\n 35836: a2 = a2 | a4\n 35839: a3 = u8 [a0 + 0x5]\n 35842: a4 = u8 [a0 + 0x4]\n 35845: a5 = u8 [a0 + 0x6]\n 35848: s1 = u8 [a0 + 0x7]\n 35851: a3 = a3 << 0x8\n 35854: a3 = a3 | a4\n 35857: a5 = a5 << 0x10\n 35860: s1 = s1 << 0x18\n 35863: a5 = a5 | s1\n 35866: a3 = a3 | a5\n 35869: a3 = a3 << 0x20\n 35872: a2 = a2 | a3\n 35875: a3 = u8 [a0 + 0x19]\n 35878: a4 = u8 [a0 + 0x18]\n 35881: a5 = u8 [a0 + 0x1a]\n 35884: s1 = u8 [a0 + 0x1b]\n 35887: a3 = a3 << 0x8\n 35890: a3 = a3 | a4\n 35893: a5 = a5 << 0x10\n 35896: s1 = s1 << 0x18\n 35899: a5 = a5 | s1\n 35902: a3 = a3 | a5\n 35905: a4 = u8 [a0 + 0x1d]\n 35908: a5 = u8 [a0 + 0x1c]\n 35911: s1 = u8 [a0 + 0x1e]\n 35914: a1 = u8 [a0 + 0x1f]\n 35917: a4 = a4 << 0x8\n 35920: a4 = a4 | a5\n 35923: s1 = s1 << 0x10\n 35926: a1 = a1 << 0x18\n 35929: a1 = a1 | s1\n 35932: a1 = a1 | a4\n 35935: a1 = a1 << 0x20\n 35938: a3 = a3 | a1\n 35941: a1 = u8 [a0 + 0x9]\n 35944: a4 = u8 [a0 + 0x8]\n 35947: a5 = u8 [a0 + 0xa]\n 35950: s1 = u8 [a0 + 0xb]\n 35953: a1 = a1 << 0x8\n 35956: a1 = a1 | a4\n 35959: a5 = a5 << 0x10\n 35962: s1 = s1 << 0x18\n 35965: a5 = a5 | s1\n 35968: a1 = a1 | a5\n 35971: a4 = u8 [a0 + 0xd]\n 35974: a5 = u8 [a0 + 0xc]\n 35977: s1 = u8 [a0 + 0xe]\n 35980: a0 = u8 [a0 + 0xf]\n 35983: a4 = a4 << 0x8\n 35986: a4 = a4 | a5\n 35989: s1 = s1 << 0x10\n 35992: a0 = a0 << 0x18\n 35995: a0 = a0 | s1\n 35998: a0 = a0 | a4\n 36001: a0 = a0 << 0x20\n 36004: a0 = a0 | a1\n 36007: s1 = reverse a0\n 36009: a1 = reverse a3\n 36011: a2 = reverse a2\n 36013: a0 = reverse t0\n 36015: u64 [sp + 0xf8] = a0\n 36019: u64 [sp + 0xf0] = a2\n 36023: a0 = a0 | a2\n 36026: a2 = a1\n 36028: a1 = a1 | s1\n 36031: a1 = a1 | a0\n 36034: a1 = a1 >> 0x20\n 36037: a0 = a0 | s1\n 36040: a0 = a0 << 0x20\n 36043: a0 = a0 | a1\n 36046: jump @493 if a0 != 0\n      : @479 (gas: 5)\n 36050: u64 [sp + 0xe8] = a2\n 36054: i32 a0 = a2 + 0\n 36056: a1 = 0x20\n 36059: u64 [sp + 0xe0] = a0\n 36063: ra = 412, jump @0\n      : @480 [@dyn 206] (gas: 50)\n 36070: u8 [a0 + 31] = 0\n 36073: u8 [a0 + 30] = 0\n 36076: u8 [a0 + 29] = 0\n 36079: u8 [a0 + 28] = 0\n 36082: u8 [a0 + 27] = 0\n 36085: u8 [a0 + 26] = 0\n 36088: u8 [a0 + 25] = 0\n 36091: u8 [a0 + 24] = 0\n 36094: u8 [a0 + 23] = 0\n 36097: u8 [a0 + 22] = 0\n 36100: u8 [a0 + 21] = 0\n 36103: u8 [a0 + 20] = 0\n 36106: u8 [a0 + 19] = 0\n 36109: u8 [a0 + 18] = 0\n 36112: u8 [a0 + 17] = 0\n 36115: u8 [a0 + 16] = 0\n 36118: u8 [a0 + 15] = 0\n 36121: u8 [a0 + 14] = 0\n 36124: u8 [a0 + 13] = 0\n 36127: u8 [a0 + 12] = 0\n 36130: u8 [a0 + 11] = 0\n 36133: u8 [a0 + 10] = 0\n 36136: u8 [a0 + 9] = 0\n 36139: u8 [a0 + 8] = 0\n 36142: u8 [a0 + 7] = 0\n 36145: u8 [a0 + 6] = 0\n 36148: u8 [a0 + 5] = 0\n 36151: u8 [a0 + 4] = 0\n 36154: u8 [a0 + 3] = 0xa0\n 36159: u8 [a0 + 2] = 0x79\n 36163: u8 [a0 + 1] = 0xc3\n 36168: u8 [a0 + 0] = 0x8\n 36171: a1 = u64 [sp + 0xe8]\n 36175: a0 = a1 + 0x4\n 36178: a1 = a0 <u a1\n 36181: a3 = u64 [sp + 0xf8]\n 36185: a2 = a3 + a1\n 36188: a3 = a2 <u a3\n 36191: a3 = a1 if a1 == 0\n 36194: a3 = a3 + s1\n 36197: a1 = a3 <u s1\n 36200: a4 = u64 [sp + 0xf0]\n 36204: a4 = a4 + a1\n 36207: u64 [sp + 0x108] = a2\n 36211: u64 [sp + 0x100] = a0\n 36215: u64 [sp + 0x110] = a3\n 36219: a0 = sp + 0x120\n 36223: a1 = sp + 0x100\n 36227: u64 [sp + 0x118] = a4\n 36231: ra = 414, jump @361\n      : @481 [@dyn 207] (gas: 5)\n 36237: a0 = u64 [sp + 0x128]\n 36241: t0 = u64 [sp + 0x138]\n 36245: t1 = u64 [sp + 0x120]\n 36249: a3 = u64 [sp + 0x130]\n 36253: jump @492\n      : @482 (gas: 3)\n 36256: a0 = 0x40\n 36259: a1 = 0x20\n 36262: ra = 416, jump @0\n      : @483 [@dyn 208] (gas: 103)\n 36269: a1 = u8 [a0 + 0x11]\n 36272: a2 = u8 [a0 + 0x10]\n 36275: a3 = u8 [a0 + 0x12]\n 36278: a4 = u8 [a0 + 0x13]\n 36281: a1 = a1 << 0x8\n 36284: a1 = a1 | a2\n 36287: a3 = a3 << 0x10\n 36290: a4 = a4 << 0x18\n 36293: a3 = a3 | a4\n 36296: a1 = a1 | a3\n 36299: a2 = u8 [a0 + 0x15]\n 36302: a3 = u8 [a0 + 0x14]\n 36305: a4 = u8 [a0 + 0x16]\n 36308: a5 = u8 [a0 + 0x17]\n 36311: a2 = a2 << 0x8\n 36314: a2 = a2 | a3\n 36317: a4 = a4 << 0x10\n 36320: a5 = a5 << 0x18\n 36323: a4 = a4 | a5\n 36326: a2 = a2 | a4\n 36329: a2 = a2 << 0x20\n 36332: t0 = a2 | a1\n 36335: a2 = u8 [a0 + 0x1]\n 36338: a3 = u8 [a0]\n 36340: a4 = u8 [a0 + 0x2]\n 36343: a5 = u8 [a0 + 0x3]\n 36346: a2 = a2 << 0x8\n 36349: a2 = a2 | a3\n 36352: a4 = a4 << 0x10\n 36355: a5 = a5 << 0x18\n 36358: a4 = a4 | a5\n 36361: a2 = a2 | a4\n 36364: a3 = u8 [a0 + 0x5]\n 36367: a4 = u8 [a0 + 0x4]\n 36370: a5 = u8 [a0 + 0x6]\n 36373: s1 = u8 [a0 + 0x7]\n 36376: a3 = a3 << 0x8\n 36379: a3 = a3 | a4\n 36382: a5 = a5 << 0x10\n 36385: s1 = s1 << 0x18\n 36388: a5 = a5 | s1\n 36391: a3 = a3 | a5\n 36394: a3 = a3 << 0x20\n 36397: a2 = a2 | a3\n 36400: a3 = u8 [a0 + 0x19]\n 36403: a4 = u8 [a0 + 0x18]\n 36406: a5 = u8 [a0 + 0x1a]\n 36409: s1 = u8 [a0 + 0x1b]\n 36412: a3 = a3 << 0x8\n 36415: a3 = a3 | a4\n 36418: a5 = a5 << 0x10\n 36421: s1 = s1 << 0x18\n 36424: a5 = a5 | s1\n 36427: a3 = a3 | a5\n 36430: a4 = u8 [a0 + 0x1d]\n 36433: a5 = u8 [a0 + 0x1c]\n 36436: s1 = u8 [a0 + 0x1e]\n 36439: a1 = u8 [a0 + 0x1f]\n 36442: a4 = a4 << 0x8\n 36445: a4 = a4 | a5\n 36448: s1 = s1 << 0x10\n 36451: a1 = a1 << 0x18\n 36454: a1 = a1 | s1\n 36457: a1 = a1 | a4\n 36460: a1 = a1 << 0x20\n 36463: a3 = a3 | a1\n 36466: a1 = u8 [a0 + 0x9]\n 36469: a4 = u8 [a0 + 0x8]\n 36472: a5 = u8 [a0 + 0xa]\n 36475: s1 = u8 [a0 + 0xb]\n 36478: a1 = a1 << 0x8\n 36481: a1 = a1 | a4\n 36484: a5 = a5 << 0x10\n 36487: s1 = s1 << 0x18\n 36490: a5 = a5 | s1\n 36493: a1 = a1 | a5\n 36496: a4 = u8 [a0 + 0xd]\n 36499: a5 = u8 [a0 + 0xc]\n 36502: s1 = u8 [a0 + 0xe]\n 36505: a0 = u8 [a0 + 0xf]\n 36508: a4 = a4 << 0x8\n 36511: a4 = a4 | a5\n 36514: s1 = s1 << 0x10\n 36517: a0 = a0 << 0x18\n 36520: a0 = a0 | s1\n 36523: a0 = a0 | a4\n 36526: a0 = a0 << 0x20\n 36529: a0 = a0 | a1\n 36532: s1 = reverse a0\n 36534: a1 = reverse a3\n 36536: a2 = reverse a2\n 36538: a0 = reverse t0\n 36540: u64 [sp + 0xf8] = a0\n 36544: u64 [sp + 0xf0] = a2\n 36548: a0 = a0 | a2\n 36551: a2 = a1\n 36553: a1 = a1 | s1\n 36556: a1 = a1 | a0\n 36559: a1 = a1 >> 0x20\n 36562: a0 = a0 | s1\n 36565: a0 = a0 << 0x20\n 36568: a0 = a0 | a1\n 36571: jump @493 if a0 != 0\n      : @484 (gas: 5)\n 36575: u64 [sp + 0xe8] = a2\n 36579: i32 a0 = a2 + 0\n 36581: a1 = 0x20\n 36584: u64 [sp + 0xe0] = a0\n 36588: ra = 418, jump @0\n      : @485 [@dyn 209] (gas: 50)\n 36595: u8 [a0 + 31] = 0\n 36598: u8 [a0 + 30] = 0\n 36601: u8 [a0 + 29] = 0\n 36604: u8 [a0 + 28] = 0\n 36607: u8 [a0 + 27] = 0\n 36610: u8 [a0 + 26] = 0\n 36613: u8 [a0 + 25] = 0\n 36616: u8 [a0 + 24] = 0\n 36619: u8 [a0 + 23] = 0\n 36622: u8 [a0 + 22] = 0\n 36625: u8 [a0 + 21] = 0\n 36628: u8 [a0 + 20] = 0\n 36631: u8 [a0 + 19] = 0\n 36634: u8 [a0 + 18] = 0\n 36637: u8 [a0 + 17] = 0\n 36640: u8 [a0 + 16] = 0\n 36643: u8 [a0 + 15] = 0\n 36646: u8 [a0 + 14] = 0\n 36649: u8 [a0 + 13] = 0\n 36652: u8 [a0 + 12] = 0\n 36655: u8 [a0 + 11] = 0\n 36658: u8 [a0 + 10] = 0\n 36661: u8 [a0 + 9] = 0\n 36664: u8 [a0 + 8] = 0\n 36667: u8 [a0 + 7] = 0\n 36670: u8 [a0 + 6] = 0\n 36673: u8 [a0 + 5] = 0\n 36676: u8 [a0 + 4] = 0\n 36679: u8 [a0 + 3] = 0xa0\n 36684: u8 [a0 + 2] = 0x79\n 36688: u8 [a0 + 1] = 0xc3\n 36693: u8 [a0 + 0] = 0x8\n 36696: a1 = u64 [sp + 0xe8]\n 36700: a0 = a1 + 0x4\n 36703: a1 = a0 <u a1\n 36706: a3 = u64 [sp + 0xf8]\n 36710: a2 = a3 + a1\n 36713: a3 = a2 <u a3\n 36716: a3 = a1 if a1 == 0\n 36719: a3 = a3 + s1\n 36722: a1 = a3 <u s1\n 36725: a4 = u64 [sp + 0xf0]\n 36729: a4 = a4 + a1\n 36732: u64 [sp + 0x148] = a2\n 36736: u64 [sp + 0x140] = a0\n 36740: u64 [sp + 0x150] = a3\n 36744: a0 = sp + 0x160\n 36748: a1 = sp + 0x140\n 36752: u64 [sp + 0x158] = a4\n 36756: ra = 420, jump @369\n      : @486 [@dyn 210] (gas: 5)\n 36762: a0 = u64 [sp + 0x168]\n 36766: t0 = u64 [sp + 0x178]\n 36770: t1 = u64 [sp + 0x160]\n 36774: a3 = u64 [sp + 0x170]\n 36778: jump @492\n      : @487 (gas: 3)\n 36781: a0 = 0x40\n 36784: a1 = 0x20\n 36787: ra = 422, jump @0\n      : @488 [@dyn 211] (gas: 103)\n 36794: a1 = u8 [a0 + 0x11]\n 36797: a2 = u8 [a0 + 0x10]\n 36800: a3 = u8 [a0 + 0x12]\n 36803: a4 = u8 [a0 + 0x13]\n 36806: a1 = a1 << 0x8\n 36809: a1 = a1 | a2\n 36812: a3 = a3 << 0x10\n 36815: a4 = a4 << 0x18\n 36818: a3 = a3 | a4\n 36821: a1 = a1 | a3\n 36824: a2 = u8 [a0 + 0x15]\n 36827: a3 = u8 [a0 + 0x14]\n 36830: a4 = u8 [a0 + 0x16]\n 36833: a5 = u8 [a0 + 0x17]\n 36836: a2 = a2 << 0x8\n 36839: a2 = a2 | a3\n 36842: a4 = a4 << 0x10\n 36845: a5 = a5 << 0x18\n 36848: a4 = a4 | a5\n 36851: a2 = a2 | a4\n 36854: a2 = a2 << 0x20\n 36857: t0 = a2 | a1\n 36860: a2 = u8 [a0 + 0x1]\n 36863: a3 = u8 [a0]\n 36865: a4 = u8 [a0 + 0x2]\n 36868: a5 = u8 [a0 + 0x3]\n 36871: a2 = a2 << 0x8\n 36874: a2 = a2 | a3\n 36877: a4 = a4 << 0x10\n 36880: a5 = a5 << 0x18\n 36883: a4 = a4 | a5\n 36886: a2 = a2 | a4\n 36889: a3 = u8 [a0 + 0x5]\n 36892: a4 = u8 [a0 + 0x4]\n 36895: a5 = u8 [a0 + 0x6]\n 36898: s1 = u8 [a0 + 0x7]\n 36901: a3 = a3 << 0x8\n 36904: a3 = a3 | a4\n 36907: a5 = a5 << 0x10\n 36910: s1 = s1 << 0x18\n 36913: a5 = a5 | s1\n 36916: a3 = a3 | a5\n 36919: a3 = a3 << 0x20\n 36922: a2 = a2 | a3\n 36925: a3 = u8 [a0 + 0x19]\n 36928: a4 = u8 [a0 + 0x18]\n 36931: a5 = u8 [a0 + 0x1a]\n 36934: s1 = u8 [a0 + 0x1b]\n 36937: a3 = a3 << 0x8\n 36940: a3 = a3 | a4\n 36943: a5 = a5 << 0x10\n 36946: s1 = s1 << 0x18\n 36949: a5 = a5 | s1\n 36952: a3 = a3 | a5\n 36955: a4 = u8 [a0 + 0x1d]\n 36958: a5 = u8 [a0 + 0x1c]\n 36961: s1 = u8 [a0 + 0x1e]\n 36964: a1 = u8 [a0 + 0x1f]\n 36967: a4 = a4 << 0x8\n 36970: a4 = a4 | a5\n 36973: s1 = s1 << 0x10\n 36976: a1 = a1 << 0x18\n 36979: a1 = a1 | s1\n 36982: a1 = a1 | a4\n 36985: a1 = a1 << 0x20\n 36988: a3 = a3 | a1\n 36991: a1 = u8 [a0 + 0x9]\n 36994: a4 = u8 [a0 + 0x8]\n 36997: a5 = u8 [a0 + 0xa]\n 37000: s1 = u8 [a0 + 0xb]\n 37003: a1 = a1 << 0x8\n 37006: a1 = a1 | a4\n 37009: a5 = a5 << 0x10\n 37012: s1 = s1 << 0x18\n 37015: a5 = a5 | s1\n 37018: a1 = a1 | a5\n 37021: a4 = u8 [a0 + 0xd]\n 37024: a5 = u8 [a0 + 0xc]\n 37027: s1 = u8 [a0 + 0xe]\n 37030: a0 = u8 [a0 + 0xf]\n 37033: a4 = a4 << 0x8\n 37036: a4 = a4 | a5\n 37039: s1 = s1 << 0x10\n 37042: a0 = a0 << 0x18\n 37045: a0 = a0 | s1\n 37048: a0 = a0 | a4\n 37051: a0 = a0 << 0x20\n 37054: a0 = a0 | a1\n 37057: s1 = reverse a0\n 37059: a1 = reverse a3\n 37061: a2 = reverse a2\n 37063: a0 = reverse t0\n 37065: u64 [sp + 0xf8] = a0\n 37069: u64 [sp + 0xf0] = a2\n 37073: a0 = a0 | a2\n 37076: a2 = a1\n 37078: a1 = a1 | s1\n 37081: a1 = a1 | a0\n 37084: a1 = a1 >> 0x20\n 37087: a0 = a0 | s1\n 37090: a0 = a0 << 0x20\n 37093: a0 = a0 | a1\n 37096: jump @493 if a0 != 0\n      : @489 (gas: 5)\n 37100: u64 [sp + 0xe8] = a2\n 37104: i32 a0 = a2 + 0\n 37106: a1 = 0x20\n 37109: u64 [sp + 0xe0] = a0\n 37113: ra = 424, jump @0\n      : @490 [@dyn 212] (gas: 50)\n 37120: u8 [a0 + 31] = 0\n 37123: u8 [a0 + 30] = 0\n 37126: u8 [a0 + 29] = 0\n 37129: u8 [a0 + 28] = 0\n 37132: u8 [a0 + 27] = 0\n 37135: u8 [a0 + 26] = 0\n 37138: u8 [a0 + 25] = 0\n 37141: u8 [a0 + 24] = 0\n 37144: u8 [a0 + 23] = 0\n 37147: u8 [a0 + 22] = 0\n 37150: u8 [a0 + 21] = 0\n 37153: u8 [a0 + 20] = 0\n 37156: u8 [a0 + 19] = 0\n 37159: u8 [a0 + 18] = 0\n 37162: u8 [a0 + 17] = 0\n 37165: u8 [a0 + 16] = 0\n 37168: u8 [a0 + 15] = 0\n 37171: u8 [a0 + 14] = 0\n 37174: u8 [a0 + 13] = 0\n 37177: u8 [a0 + 12] = 0\n 37180: u8 [a0 + 11] = 0\n 37183: u8 [a0 + 10] = 0\n 37186: u8 [a0 + 9] = 0\n 37189: u8 [a0 + 8] = 0\n 37192: u8 [a0 + 7] = 0\n 37195: u8 [a0 + 6] = 0\n 37198: u8 [a0 + 5] = 0\n 37201: u8 [a0 + 4] = 0\n 37204: u8 [a0 + 3] = 0xa0\n 37209: u8 [a0 + 2] = 0x79\n 37213: u8 [a0 + 1] = 0xc3\n 37218: u8 [a0 + 0] = 0x8\n 37221: a1 = u64 [sp + 0xe8]\n 37225: a0 = a1 + 0x4\n 37228: a1 = a0 <u a1\n 37231: a3 = u64 [sp + 0xf8]\n 37235: a2 = a3 + a1\n 37238: a3 = a2 <u a3\n 37241: a3 = a1 if a1 == 0\n 37244: a3 = a3 + s1\n 37247: a1 = a3 <u s1\n 37250: a4 = u64 [sp + 0xf0]\n 37254: a4 = a4 + a1\n 37257: u64 [sp + 0x1c8] = a2\n 37261: u64 [sp + 0x1c0] = a0\n 37265: u64 [sp + 0x1d0] = a3\n 37269: a0 = sp + 0x1e0\n 37273: a1 = sp + 0x1c0\n 37277: u64 [sp + 0x1d8] = a4\n 37281: ra = 426, jump @377\n      : @491 [@dyn 213] (gas: 5)\n 37287: a0 = u64 [sp + 0x1e8]\n 37291: t0 = u64 [sp + 0x1f8]\n 37295: t1 = u64 [sp + 0x1e0]\n 37299: a3 = u64 [sp + 0x1f0]\n 37303: fallthrough\n      : @492 (gas: 26)\n 37304: a1 = u64 [sp + 0xf8]\n 37308: a4 = a0 ^ a1\n 37311: a5 = a0 <u a1\n 37314: t2 = a1\n 37316: a2 = u64 [sp + 0xe8]\n 37320: a1 = t1 <u a2\n 37323: a5 = a1 if a4 == 0\n 37326: a4 = a3 - s1\n 37329: a3 = a3 <u s1\n 37332: s1 = u64 [sp + 0xf0]\n 37336: s1 = t0 - s1\n 37339: s1 = s1 - a3\n 37342: a3 = a4 <u a5\n 37345: s1 = s1 - a3\n 37348: a4 = a4 - a5\n 37351: a0 = a0 - t2\n 37354: a1 = a0 - a1\n 37357: a0 = t1 - a2\n 37360: a1 = a1 | s1\n 37363: a2 = a0 | a4\n 37366: a2 = a2 | a1\n 37369: a1 = a1 | a4\n 37372: a2 = a2 >> 0x20\n 37375: a1 = a1 << 0x20\n 37378: a1 = a1 | a2\n 37381: jump @501 if a1 == 0\n      : @493 (gas: 1)\n 37385: trap\n      : @494 (gas: 4)\n 37386: a0 = 0\n 37388: a1 = 0\n 37390: ra = 0x1ac\n 37394: jump @0\n      : @495 (gas: 2)\n 37398: a1 = 0\n 37400: ra = 428, jump @0\n      : @496 [@dyn 214] (gas: 5)\n 37407: i32 a1 = a0 + 0\n 37409: a0 = 0x1\n 37412: a2 = 0\n 37414: ecalli 11 // 'seal_return'\n 37416: fallthrough\n      : @497 (gas: 8)\n 37417: u64 [sp + 432] = 0\n 37421: u64 [sp + 424] = 0\n 37425: u64 [sp + 416] = 0\n 37429: a0 = 0x4e487b7100000000\n 37439: a1 = sp + 0x1a0\n 37443: u64 [sp + 0x1b8] = a0\n 37447: a0 = 0\n 37449: ra = 430, jump @8\n      : @498 [@dyn 215] (gas: 7)\n 37456: u64 [sp + 408] = 0\n 37460: u64 [sp + 400] = 0\n 37464: u64 [sp + 384] = 0x41\n 37469: a0 = 0x4\n 37472: a1 = sp + 0x180\n 37476: u64 [sp + 392] = 0\n 37480: ra = 432, jump @8\n      : @499 [@dyn 216] (gas: 3)\n 37487: a1 = 0x24\n 37490: a0 = 0\n 37492: ra = 434, jump @0\n      : @500 [@dyn 217] (gas: 5)\n 37499: i32 a1 = a0 + 0\n 37501: a0 = 0x1\n 37504: a2 = 0x24\n 37507: ecalli 11 // 'seal_return'\n 37509: fallthrough\n      : @501 (gas: 4)\n 37510: i32 s1 = a0 + 0\n 37512: a0 = u64 [sp + 0xe0]\n 37516: a1 = s1\n 37518: ra = 436, jump @0\n      : @502 [@dyn 218] (gas: 7)\n 37525: i32 a1 = a0 + 0\n 37527: a0 = 0x1\n 37530: a2 = s1\n 37532: ecalli 11 // 'seal_return'\n 37534: a0 = 0\n 37536: ra = 0x1b6\n 37540: jump @10\n      : @503 [export #0: 'call'] (gas: 2)\n 37544: a0 = 0\n 37546: ra = 438, jump @10\n      : @504 [@dyn 219] [export #1: 'deploy'] (gas: 2)\n 37553: a0 = 0x1\n 37556: ra = 440, jump @10\n      : @505 [@dyn 220] (gas: 27)\n 37563: sp = sp + 0xffffffffffffff80\n 37566: u64 [sp + 0x78] = ra\n 37569: u64 [sp + 0x70] = s0\n 37572: u64 [sp + 0x68] = s1\n 37575: s0 = sp + 0x80\n 37579: sp = sp & 0xfffffffffffffff0\n 37582: t0 = u64 [a1]\n 37584: t1 = u64 [a1 + 0x8]\n 37587: t2 = u64 [a1 + 0x10]\n 37590: a1 = u64 [a1 + 0x18]\n 37593: a3 = u64 [a2]\n 37595: a4 = u64 [a2 + 0x8]\n 37598: a5 = u64 [a2 + 0x10]\n 37601: a2 = u64 [a2 + 0x18]\n 37604: s1 = a0\n 37606: u64 [sp + 0x18] = a2\n 37609: u64 [sp + 0x10] = a5\n 37612: u64 [sp + 0x8] = a4\n 37615: u64 [sp] = a3\n 37617: u64 [sp + 0x38] = a1\n 37620: u64 [sp + 0x30] = t2\n 37623: u64 [sp + 0x28] = t1\n 37626: a0 = sp + 0x40\n 37629: a1 = sp + 0x20\n 37632: a2 = sp\n 37634: u64 [sp + 0x20] = t0\n 37637: ra = 442, jump @92\n      : @506 [@dyn 221] (gas: 14)\n 37644: a0 = u64 [sp + 0x50]\n 37647: a1 = u64 [sp + 0x58]\n 37650: a2 = u64 [sp + 0x40]\n 37653: a3 = u64 [sp + 0x48]\n 37656: u64 [s1 + 0x10] = a0\n 37659: u64 [s1 + 0x18] = a1\n 37662: u64 [s1] = a2\n 37664: u64 [s1 + 0x8] = a3\n 37667: sp = s0 + 0xffffffffffffff80\n 37670: ra = u64 [sp + 0x78]\n 37673: s0 = u64 [sp + 0x70]\n 37676: s1 = u64 [sp + 0x68]\n 37679: sp = sp + 0x80\n 37683: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"acceptListing(uint256)": "b0eceb7e",
							"createListing(uint256,uint256)": "a79123a9",
							"getAllListings()": "ae73ccec",
							"inventory()": "15d52a5c",
							"listings(uint256)": "de74e57b"
						}
					},
					"irOptimized": "/// @use-src 0:\"CardTrading.sol\"\nobject \"CardTrading_190\" {\n    code {\n        {\n            /// @src 0:335:1913  \"contract CardTrading {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := copy_arguments_for_constructor_object_CardTrading()\n            constructor_CardTrading(_1)\n            let _2 := allocate_unbounded()\n            codecopy(_2, dataoffset(\"CardTrading_190_deployed\"), datasize(\"CardTrading_190_deployed\"))\n            return(_2, datasize(\"CardTrading_190_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function cleanup_address(value) -> cleaned\n        {\n            cleaned := cleanup_uint160(value)\n        }\n        function validator_revert_address(value)\n        {\n            if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n        }\n        function abi_decode_address_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_address(value)\n        }\n        function abi_decode_tuple_address_fromMemory(headStart, dataEnd) -> value0\n        {\n            if slt(sub(dataEnd, headStart), 32)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := 0\n            value0 := abi_decode_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_CardTrading() -> ret_param\n        {\n            let programSize := datasize(\"CardTrading_190\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param := abi_decode_tuple_address_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_contract_IInventoryManager(value)\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_contract_IInventoryManager_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_contract_IInventoryManager(value)\n        }\n        function prepare_store_contract_IInventoryManager(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_contract_IInventoryManager_to_contract_IInventoryManager(slot, value)\n        {\n            let convertedValue := convert_contract_IInventoryManager_to_contract_IInventoryManager(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_contract_IInventoryManager(convertedValue)))\n        }\n        /// @ast-id 59 @src 0:574:678  \"constructor(address inventoryAddress) {...\"\n        function constructor_CardTrading(var_inventoryAddress)\n        {\n            /// @src 0:653:669  \"inventoryAddress\"\n            let _1 := var_inventoryAddress\n            let expr := _1\n            /// @src 0:635:670  \"IInventoryManager(inventoryAddress)\"\n            let expr_address := convert_address_to_contract_IInventoryManager(expr)\n            /// @src 0:623:670  \"inventory = IInventoryManager(inventoryAddress)\"\n            update_storage_value_offset_contract_IInventoryManager_to_contract_IInventoryManager(0x01, expr_address)\n        }\n    }\n    /// @use-src 0:\"CardTrading.sol\"\n    object \"CardTrading_190_deployed\" {\n        code {\n            {\n                /// @src 0:335:1913  \"contract CardTrading {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x15d52a5c { external_fun_inventory() }\n                    case 0xa79123a9 { external_fun_createListing() }\n                    case 0xae73ccec { external_fun_getAllListings() }\n                    case 0xb0eceb7e { external_fun_acceptListing() }\n                    case 0xde74e57b { external_fun_listings() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_contract_IInventoryManager(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_contract_IInventoryManager(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_contract_IInventoryManager(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_contract_IInventoryManager(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_contract_IInventoryManager(sload(slot), offset)\n            }\n            /// @ast-id 47 @src 0:531:565  \"IInventoryManager public inventory\"\n            function getter_fun_inventory() -> ret_address\n            {\n                let slot := 1\n                let offset := 0\n                ret_address := read_from_storage_split_dynamic_contract_IInventoryManager(slot, offset)\n            }\n            /// @src 0:335:1913  \"contract CardTrading {...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_contract_IInventoryManager_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function abi_encode_contract_IInventoryManager(value, pos)\n            {\n                mstore(pos, convert_contract_IInventoryManager_to_address(value))\n            }\n            function abi_encode_tuple_contract_IInventoryManager(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_contract_IInventoryManager(value0, add(headStart, 0))\n            }\n            function external_fun_inventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_inventory()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_contract_IInventoryManager(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_uint256t_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_createListing()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_uint256t_uint256(4, calldatasize())\n                fun_createListing(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_array_struct_Listing_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_struct_Listing_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_struct_Listing_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address_to_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_struct_Listing(value, pos)\n            {\n                let memberValue0 := mload(add(value, 0x00))\n                abi_encode_address_to_address(memberValue0, add(pos, 0x00))\n                let memberValue0_1 := mload(add(value, 0x20))\n                abi_encode_uint256(memberValue0_1, add(pos, 0x20))\n                let memberValue0_2 := mload(add(value, 0x40))\n                abi_encode_uint256(memberValue0_2, add(pos, 0x40))\n                let memberValue0_3 := mload(add(value, 0x60))\n                abi_encode_bool(memberValue0_3, add(pos, 0x60))\n            }\n            function abi_encodeUpdatedPos_struct_Listing(value0, pos) -> updatedPos\n            {\n                abi_encode_struct_Listing(value0, pos)\n                updatedPos := add(pos, 0x80)\n            }\n            function array_nextElement_array_struct_Listing_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_struct_Listing_dyn(value, pos) -> end\n            {\n                let length := array_length_array_struct_Listing_dyn(value)\n                pos := array_storeLengthForEncoding_array_struct_Listing_dyn(pos, length)\n                let baseRef := array_dataslot_array_struct_Listing_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_struct_Listing(elementValue0, pos)\n                    srcPtr := array_nextElement_array_struct_Listing_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encode_array_struct_Listing_memory_ptr_dyn_memory_ptr(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_struct_Listing_dyn(value0, tail)\n            }\n            function external_fun_getAllListings()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_getAllListings()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_struct_Listing_memory_ptr_dyn_memory_ptr(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function external_fun_acceptListing()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_acceptListing(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_struct_Listing_storage_dyn(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_struct_Listing_storage_dyn(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_struct_Listing__dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Listing_storage_dyn(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Listing_storage_dyn(array)\n                slot := add(dataArea, mul(index, 4))\n                offset := 0\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            /// @ast-id 44 @src 0:497:522  \"Listing[] public listings\"\n            function getter_fun_listings(key) -> ret, ret_1, ret_2, ret_3\n            {\n                let slot := 0\n                let offset := 0\n                if iszero(lt(key, array_length_array_struct_Listing_storage_dyn(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_struct_Listing__dyn(slot, key)\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                ret_2 := read_from_storage_split_offset_uint256(add(slot, 2))\n                ret_3 := read_from_storage_split_offset_bool(add(slot, 3))\n            }\n            /// @src 0:335:1913  \"contract CardTrading {...\"\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_address_uint256_uint256_bool(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                abi_encode_uint256_to_uint256(value2, add(headStart, 64))\n                abi_encode_bool_to_bool(value3, add(headStart, 96))\n            }\n            function external_fun_listings()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3 := getter_fun_listings(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint256_uint256_bool(memPos, ret, ret_1, ret_2, ret_3)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid card ID\")\n            }\n            function abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_8239(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(tail)\n            }\n            function require_helper_stringliteral_8239(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8239(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function extract_from_storage_value_offset_contract_IInventoryManager(slot_value) -> value\n            {\n                value := cleanup_from_storage_contract_IInventoryManager(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_contract_IInventoryManager(slot) -> value\n            {\n                value := extract_from_storage_value_offset_contract_IInventoryManager(sload(slot))\n            }\n            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            { revert(0, 0) }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function shift_left_224(value) -> newValue\n            { newValue := shl(224, value) }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_bool_fromMemory(offset, end) -> value\n            {\n                value := mload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_bool_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function abi_encode_rational_by(value, pos)\n            {\n                mstore(pos, convert_t_rational_by_to_t_uint256(value))\n            }\n            function abi_encode_address_uint256_rational_by(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 96)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                abi_encode_rational_by(value2, add(headStart, 64))\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function store_literal_in_memory_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0(memPtr)\n            {\n                mstore(add(memPtr, 0), \"You don't have the offered card\")\n            }\n            function abi_encode_stringliteral_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 31)\n                store_literal_in_memory_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_c83f(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0(tail)\n            }\n            function require_helper_stringliteral_c83f(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_c83f(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_array_array_struct_Listing_storage_dyn_storage_to_array_struct_Listing__dyn_ptr(value) -> converted\n            { converted := value }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function allocate_memory_struct_struct_Listing_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function write_to_memory_uint256(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint256(value))\n            }\n            function write_to_memory_bool(memPtr, value)\n            {\n                mstore(memPtr, cleanup_bool(value))\n            }\n            function array_dataslot_array_struct_Listing_storage_dyn_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_struct_Listing_storage_dyn_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_struct_Listing__dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Listing_storage_dyn_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Listing_storage_dyn_ptr(array)\n                slot := add(dataArea, mul(index, 4))\n                offset := 0\n            }\n            function panic_error_0x00()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x00)\n                revert(0, 0x24)\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_20_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function read_from_memoryt_uint256(ptr) -> returnValue\n            {\n                let value := cleanup_uint256(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function read_from_memoryt_bool(ptr) -> returnValue\n            {\n                let value := cleanup_bool(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function copy_struct_to_storage_from_struct_Listing_to_struct_Listing(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 2)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_uint256(memberSrcPtr_2)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 3)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_bool(memberSrcPtr_3)\n                update_storage_value_offset_bool_to_bool(memberSlot_3, memberValue_3)\n            }\n            function update_storage_value_struct_Listing_to_struct_Listing(slot, offset, value)\n            {\n                if offset { panic_error_0x00() }\n                copy_struct_to_storage_from_struct_Listing_to_struct_Listing(slot, value)\n            }\n            function array_push_from_struct_Listing_to_array_struct_Listing_storage_dyn_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_struct_Listing__dyn_ptr(array, oldLen)\n                update_storage_value_struct_Listing_to_struct_Listing(slot, offset, value0)\n            }\n            /// @ast-id 101 @src 0:686:1129  \"function createListing(uint offerCardId, uint requestCardId) external {...\"\n            function fun_createListing(var_offerCardId, var_requestCardId)\n            {\n                /// @src 0:775:786  \"offerCardId\"\n                let _1 := var_offerCardId\n                let expr := _1\n                /// @src 0:789:790  \"9\"\n                let expr_1 := 0x09\n                /// @src 0:775:790  \"offerCardId < 9\"\n                let expr_2 := lt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:775:811  \"offerCardId < 9 && requestCardId < 9\"\n                let expr_3 := expr_2\n                if expr_3\n                {\n                    /// @src 0:794:807  \"requestCardId\"\n                    let _2 := var_requestCardId\n                    let expr_4 := _2\n                    /// @src 0:810:811  \"9\"\n                    let expr_5 := 0x09\n                    /// @src 0:794:811  \"requestCardId < 9\"\n                    let expr_6 := lt(cleanup_uint256(expr_4), convert_rational_by_to_uint256(expr_5))\n                    /// @src 0:775:811  \"offerCardId < 9 && requestCardId < 9\"\n                    expr_3 := expr_6\n                }\n                /// @src 0:767:831  \"require(offerCardId < 9 && requestCardId < 9, \\\"Invalid card ID\\\")\"\n                require_helper_stringliteral_8239(expr_3)\n                /// @src 0:850:859  \"inventory\"\n                let _3_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_78_address := _3_address\n                /// @src 0:850:867  \"inventory.hasCard\"\n                let expr_79_address := convert_contract_IInventoryManager_to_address(expr_78_address)\n                let expr_79_functionSelector := 0x4dca8ce6\n                /// @src 0:868:878  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 0:880:891  \"offerCardId\"\n                let _3 := var_offerCardId\n                let expr_8 := _3\n                /// @src 0:893:894  \"1\"\n                let expr_9 := 0x01\n                /// @src 0:850:895  \"inventory.hasCard(msg.sender, offerCardId, 1)\"\n                let _4 := allocate_unbounded()\n                mstore(_4, shift_left_224(expr_79_functionSelector))\n                let _5 := abi_encode_address_uint256_rational_by(add(_4, 4), expr_7, expr_8, expr_9)\n                let _6 := staticcall(gas(), expr_79_address, _4, sub(_5, _4), _4, 32)\n                if iszero(_6) { revert_forward() }\n                let expr_10\n                if _6\n                {\n                    let _7 := 32\n                    if gt(_7, returndatasize()) { _7 := returndatasize() }\n                    finalize_allocation(_4, _7)\n                    expr_10 := abi_decode_bool_fromMemory(_4, add(_4, _7))\n                }\n                /// @src 0:842:931  \"require(inventory.hasCard(msg.sender, offerCardId, 1), \\\"You don't have the offered card\\\")\"\n                require_helper_stringliteral_c83f(expr_10)\n                /// @src 0:944:952  \"listings\"\n                let _9_slot := 0x00\n                let expr_88_slot := _9_slot\n                /// @src 0:944:957  \"listings.push\"\n                let expr_self_slot := convert_array_array_struct_Listing_storage_dyn_storage_to_array_struct_Listing__dyn_ptr(expr_88_slot)\n                /// @src 0:989:999  \"msg.sender\"\n                let expr_11 := caller()\n                /// @src 0:1027:1038  \"offerCardId\"\n                let _8 := var_offerCardId\n                let expr_12 := _8\n                /// @src 0:1068:1081  \"requestCardId\"\n                let _9 := var_requestCardId\n                let expr_13 := _9\n                /// @src 0:1104:1108  \"true\"\n                let expr_14 := 0x01\n                /// @src 0:958:1120  \"Listing({...\"\n                let expr_mpos := allocate_memory_struct_struct_Listing_storage_ptr()\n                write_to_memory_address(add(expr_mpos, 0), expr_11)\n                write_to_memory_uint256(add(expr_mpos, 32), expr_12)\n                write_to_memory_uint256(add(expr_mpos, 64), expr_13)\n                write_to_memory_bool(add(expr_mpos, 96), expr_14)\n                /// @src 0:944:1121  \"listings.push(Listing({...\"\n                array_push_from_struct_Listing_to_array_struct_Listing_storage_dyn_ptr(expr_self_slot, expr_mpos)\n            }\n            /// @src 0:335:1913  \"contract CardTrading {...\"\n            function zero_value_for_split_array_struct_Listing_dyn() -> ret\n            { ret := 96 }\n            function array_allocation_size_array_struct_Listing_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_array_struct_Listing_dyn(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_struct_Listing_dyn(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function allocate_memory_struct_struct_Listing() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function read_from_storage_reference_type_struct_Listing(slot) -> value\n            {\n                value := allocate_memory_struct_struct_Listing()\n                let memberValue := read_from_storage_split_offset_address(add(slot, 0))\n                write_to_memory_address(add(value, 0), memberValue)\n                let memberValue_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                write_to_memory_uint256(add(value, 32), memberValue_1)\n                let memberValue_2 := read_from_storage_split_offset_uint256(add(slot, 2))\n                write_to_memory_uint256(add(value, 64), memberValue_2)\n                let memberValue_3 := read_from_storage_split_offset_bool(add(slot, 3))\n                write_to_memory_bool(add(value, 96), memberValue_3)\n            }\n            function convert_struct_Listing_storage_to_struct_Listing(value) -> converted\n            {\n                converted := read_from_storage_reference_type_struct_Listing(value)\n            }\n            function copy_array_from_storage_to_memory_array_struct_Listing__dyn(slot) -> memPtr\n            {\n                let length := array_length_array_struct_Listing_storage_dyn(slot)\n                memPtr := allocate_memory_array_array_struct_Listing_dyn(length)\n                let mpos := memPtr\n                mpos := add(mpos, 0x20)\n                let spos := array_dataslot_array_struct_Listing_storage_dyn(slot)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, convert_struct_Listing_storage_to_struct_Listing(spos))\n                    mpos := add(mpos, 0x20)\n                    spos := add(spos, 4)\n                }\n            }\n            function convert_array_array_struct_Listing_storage_dyn_to_array_struct_Listing_dyn(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_struct_Listing__dyn(value)\n            }\n            /// @ast-id 189 @src 0:1809:1910  \"function getAllListings() external view returns (Listing[] memory) {...\"\n            function fun_getAllListings() -> var_mpos\n            {\n                /// @src 0:1858:1874  \"Listing[] memory\"\n                let zero_array_struct_Listing_dyn_mpos := zero_value_for_split_array_struct_Listing_dyn()\n                var_mpos := zero_array_struct_Listing_dyn_mpos\n                /// @src 0:1894:1902  \"listings\"\n                let _13_slot := 0x00\n                let expr_186_slot := _13_slot\n                /// @src 0:1887:1902  \"return listings\"\n                var_mpos := convert_array_array_struct_Listing_storage_dyn_to_array_struct_Listing_dyn(expr_186_slot)\n                leave\n            }\n            /// @src 0:335:1913  \"contract CardTrading {...\"\n            function store_literal_in_memory_06621c6d39177fcdbad6bb99c0642b8c7cd419ea508ac568edd78e990c8d4d0d(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid listing ID\")\n            }\n            function abi_encode_stringliteral(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 18)\n                store_literal_in_memory_06621c6d39177fcdbad6bb99c0642b8c7cd419ea508ac568edd78e990c8d4d0d(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_struct_Listing_storage_to_struct_Listing_ptr(value) -> converted\n            { converted := value }\n            function store_literal_in_memory_879c038c5436c50ae000565a30e220e008580738ca6204364fa18881643959ff(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Listing inactive\")\n            }\n            function abi_encode_stringliteral_879c038c5436c50ae000565a30e220e008580738ca6204364fa18881643959ff(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 16)\n                store_literal_in_memory_879c038c5436c50ae000565a30e220e008580738ca6204364fa18881643959ff(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_879c(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_879c038c5436c50ae000565a30e220e008580738ca6204364fa18881643959ff(tail)\n            }\n            function require_helper_stringliteral_879c(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_879c(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_6ce4d97508fa789079c7d9d510da30fe6da52d84b4f6ade9251c76df91409c85(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Can't accept your own listing\")\n            }\n            function abi_encode_stringliteral_6ce4(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 29)\n                store_literal_in_memory_6ce4d97508fa789079c7d9d510da30fe6da52d84b4f6ade9251c76df91409c85(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_6ce4(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_6ce4(tail)\n            }\n            function require_helper_stringliteral_6ce4(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_6ce4(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_14c3f9c19809b36c330d8144e91e11d76541a09a20b379690e81da0b4f5e8afc(memPtr)\n            {\n                mstore(add(memPtr, 0), \"You don't have the requested car\")\n                mstore(add(memPtr, 32), \"d\")\n            }\n            function abi_encode_stringliteral_14c3f9c19809b36c330d8144e91e11d76541a09a20b379690e81da0b4f5e8afc(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 33)\n                store_literal_in_memory_14c3f9c19809b36c330d8144e91e11d76541a09a20b379690e81da0b4f5e8afc(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_14c3(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_14c3f9c19809b36c330d8144e91e11d76541a09a20b379690e81da0b4f5e8afc(tail)\n            }\n            function require_helper_stringliteral_14c3(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_14c3(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function abi_decode_fromMemory(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function abi_encode_address_address_uint256_rational_by(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_address(value1, add(headStart, 32))\n                abi_encode_uint256_to_uint256(value2, add(headStart, 64))\n                abi_encode_rational_by(value3, add(headStart, 96))\n            }\n            /// @ast-id 179 @src 0:1137:1801  \"function acceptListing(uint listingId) external {...\"\n            function fun_acceptListing(var_listingId)\n            {\n                /// @src 0:1204:1213  \"listingId\"\n                let _1 := var_listingId\n                let expr := _1\n                /// @src 0:1216:1224  \"listings\"\n                let _15_slot := 0x00\n                let expr_108_slot := _15_slot\n                /// @src 0:1216:1231  \"listings.length\"\n                let expr_1 := array_length_array_struct_Listing_storage_dyn(expr_108_slot)\n                /// @src 0:1204:1231  \"listingId < listings.length\"\n                let expr_2 := lt(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 0:1196:1254  \"require(listingId < listings.length, \\\"Invalid listing ID\\\")\"\n                require_helper_stringliteral(expr_2)\n                /// @src 0:1291:1299  \"listings\"\n                let _16_slot := 0x00\n                let expr_117_slot := _16_slot\n                /// @src 0:1300:1309  \"listingId\"\n                let _2 := var_listingId\n                let expr_3 := _2\n                /// @src 0:1291:1310  \"listings[listingId]\"\n                let _3, _4 := storage_array_index_access_struct_Listing__dyn(expr_117_slot, expr_3)\n                let _20_slot := _3\n                let expr_119_slot := _20_slot\n                /// @src 0:1265:1310  \"Listing storage listing = listings[listingId]\"\n                let var_listing_slot := convert_struct_Listing_storage_to_struct_Listing_ptr(expr_119_slot)\n                /// @src 0:1329:1336  \"listing\"\n                let _21_slot := var_listing_slot\n                let expr_122_slot := _21_slot\n                /// @src 0:1329:1343  \"listing.active\"\n                let _5 := add(expr_122_slot, 3)\n                let _6 := read_from_storage_split_offset_bool(_5)\n                let expr_4 := _6\n                /// @src 0:1321:1364  \"require(listing.active, \\\"Listing inactive\\\")\"\n                require_helper_stringliteral_879c(expr_4)\n                /// @src 0:1383:1393  \"msg.sender\"\n                let expr_5 := caller()\n                /// @src 0:1397:1404  \"listing\"\n                let _24_slot := var_listing_slot\n                let expr_130_slot := _24_slot\n                /// @src 0:1397:1411  \"listing.seller\"\n                let _7 := add(expr_130_slot, 0)\n                let _8 := read_from_storage_split_offset_address(_7)\n                let expr_6 := _8\n                /// @src 0:1383:1411  \"msg.sender != listing.seller\"\n                let expr_7 := iszero(eq(cleanup_address(expr_5), cleanup_address(expr_6)))\n                /// @src 0:1375:1445  \"require(msg.sender != listing.seller, \\\"Can't accept your own listing\\\")\"\n                require_helper_stringliteral_6ce4(expr_7)\n                /// @src 0:1466:1475  \"inventory\"\n                let _27_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_137_address := _27_address\n                /// @src 0:1466:1483  \"inventory.hasCard\"\n                let expr_138_address := convert_contract_IInventoryManager_to_address(expr_137_address)\n                let expr_functionSelector := 0x4dca8ce6\n                /// @src 0:1484:1494  \"msg.sender\"\n                let expr_8 := caller()\n                /// @src 0:1496:1503  \"listing\"\n                let _28_slot := var_listing_slot\n                let expr_141_slot := _28_slot\n                /// @src 0:1496:1517  \"listing.requestCardId\"\n                let _9 := add(expr_141_slot, 2)\n                let _10 := read_from_storage_split_offset_uint256(_9)\n                let expr_9 := _10\n                /// @src 0:1519:1520  \"1\"\n                let expr_10 := 0x01\n                /// @src 0:1466:1521  \"inventory.hasCard(msg.sender, listing.requestCardId, 1)\"\n                let _11 := allocate_unbounded()\n                mstore(_11, shift_left_224(expr_functionSelector))\n                let _12 := abi_encode_address_uint256_rational_by(add(_11, 4), expr_8, expr_9, expr_10)\n                let _13 := staticcall(gas(), expr_138_address, _11, sub(_12, _11), _11, 32)\n                if iszero(_13) { revert_forward() }\n                let expr_11\n                if _13\n                {\n                    let _14 := 32\n                    if gt(_14, returndatasize()) { _14 := returndatasize() }\n                    finalize_allocation(_11, _14)\n                    expr_11 := abi_decode_bool_fromMemory(_11, add(_11, _14))\n                }\n                /// @src 0:1458:1559  \"require(inventory.hasCard(msg.sender, listing.requestCardId, 1), \\\"You don't have the requested card\\\")\"\n                require_helper_stringliteral_14c3(expr_11)\n                /// @src 0:1595:1604  \"inventory\"\n                let _35_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_148_address := _35_address\n                /// @src 0:1595:1618  \"inventory.transferCards\"\n                let expr_150_address := convert_contract_IInventoryManager_to_address(expr_148_address)\n                let expr_150_functionSelector := 0x65352442\n                /// @src 0:1619:1629  \"msg.sender\"\n                let expr_12 := caller()\n                /// @src 0:1631:1638  \"listing\"\n                let _36_slot := var_listing_slot\n                let expr_slot := _36_slot\n                /// @src 0:1631:1645  \"listing.seller\"\n                let _15 := add(expr_slot, 0)\n                let _16 := read_from_storage_split_offset_address(_15)\n                let expr_13 := _16\n                /// @src 0:1647:1654  \"listing\"\n                let _39_slot := var_listing_slot\n                let expr_155_slot := _39_slot\n                /// @src 0:1647:1668  \"listing.requestCardId\"\n                let _17 := add(expr_155_slot, 2)\n                let _18 := read_from_storage_split_offset_uint256(_17)\n                let expr_14 := _18\n                /// @src 0:1670:1671  \"1\"\n                let expr_15 := 0x01\n                /// @src 0:1595:1672  \"inventory.transferCards(msg.sender, listing.seller, listing.requestCardId, 1)\"\n                if iszero(extcodesize(expr_150_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _19 := allocate_unbounded()\n                mstore(_19, shift_left_224(expr_150_functionSelector))\n                let _20 := abi_encode_address_address_uint256_rational_by(add(_19, 4), expr_12, expr_13, expr_14, expr_15)\n                let _21 := call(gas(), expr_150_address, 0, _19, sub(_20, _19), _19, 0)\n                if iszero(_21) { revert_forward() }\n                if _21\n                {\n                    let _22 := 0\n                    if gt(_22, returndatasize()) { _22 := returndatasize() }\n                    finalize_allocation(_19, _22)\n                    abi_decode_fromMemory(_19, add(_19, _22))\n                }\n                /// @src 0:1683:1692  \"inventory\"\n                let _address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_160_address := _address\n                /// @src 0:1683:1706  \"inventory.transferCards\"\n                let expr_address := convert_contract_IInventoryManager_to_address(expr_160_address)\n                let expr_162_functionSelector := 0x65352442\n                /// @src 0:1707:1714  \"listing\"\n                let _47_slot := var_listing_slot\n                let expr_163_slot := _47_slot\n                /// @src 0:1707:1721  \"listing.seller\"\n                let _23 := add(expr_163_slot, 0)\n                let _24 := read_from_storage_split_offset_address(_23)\n                let expr_16 := _24\n                /// @src 0:1723:1733  \"msg.sender\"\n                let expr_17 := caller()\n                /// @src 0:1735:1742  \"listing\"\n                let _50_slot := var_listing_slot\n                let expr_167_slot := _50_slot\n                /// @src 0:1735:1754  \"listing.offerCardId\"\n                let _25 := add(expr_167_slot, 1)\n                let _26 := read_from_storage_split_offset_uint256(_25)\n                let expr_18 := _26\n                /// @src 0:1756:1757  \"1\"\n                let expr_19 := 0x01\n                /// @src 0:1683:1758  \"inventory.transferCards(listing.seller, msg.sender, listing.offerCardId, 1)\"\n                if iszero(extcodesize(expr_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _27 := allocate_unbounded()\n                mstore(_27, shift_left_224(expr_162_functionSelector))\n                let _28 := abi_encode_address_address_uint256_rational_by(add(_27, 4), expr_16, expr_17, expr_18, expr_19)\n                let _29 := call(gas(), expr_address, 0, _27, sub(_28, _27), _27, 0)\n                if iszero(_29) { revert_forward() }\n                if _29\n                {\n                    let _30 := 0\n                    if gt(_30, returndatasize()) { _30 := returndatasize() }\n                    finalize_allocation(_27, _30)\n                    abi_decode_fromMemory(_27, add(_27, _30))\n                }\n                /// @src 0:1788:1793  \"false\"\n                let expr_20 := 0x00\n                /// @src 0:1771:1778  \"listing\"\n                let _slot := var_listing_slot\n                let expr_172_slot := _slot\n                /// @src 0:1771:1785  \"listing.active\"\n                let _31 := add(expr_172_slot, 3)\n                /// @src 0:1771:1793  \"listing.active = false\"\n                update_storage_value_offset_bool_to_bool(_31, expr_20)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220feec2e43fac0b93a66497347a9d23b4d51c9fbd5c70eef646e25f7ad0d2de55164736f6c634300081c0033\"\n    }\n}\n",
					"hash": "dfe9244e04a0891d8ebbdd37c25cdf64d6a5b60ecaca4fe47cd88e3c6fdc52cb",
					"factoryDependencies": {}
				},
				"IInventoryManager": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								}
							],
							"name": "addCard",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "hasCard",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferCards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hasCard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CardTrading.sol\":\"IInventoryManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"CardTrading.sol\":{\"keccak256\":\"0x946b78733ad545939303cf108ef80a070316dffa98a519150fa17c3802ec9ee0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fdbb3194e0551eb1c3a9b0aa8f38f55c292d48581e7a11677f69427317396a6\",\"dweb:/ipfs/QmTzbc6rcWV5TJGy5Ka5nFrSGRroL4RN9B2aUDh2heRPdc\"]}},\"version\":1}",
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"evm": {
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"addCard(address,uint256)": "f9c775ea",
							"hasCard(address,uint256,uint256)": "4dca8ce6",
							"transferCards(address,address,uint256,uint256)": "65352442"
						}
					},
					"irOptimized": ""
				}
			}
		},
		"sources": {
			"CardTrading.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "CardTrading.sol",
					"exportedSymbols": {
						"CardTrading": [
							190
						],
						"IInventoryManager": [
							31
						]
					},
					"id": 191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IInventoryManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 31,
							"linearizedBaseContracts": [
								31
							],
							"name": "IInventoryManager",
							"nameLocation": "70:17:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "f9c775ea",
									"id": 8,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addCard",
									"nameLocation": "104:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "120:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 8,
												"src": "112:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "112:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "129:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 8,
												"src": "124:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "124:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "111:25:0"
									},
									"returnParameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "145:0:0"
									},
									"scope": 31,
									"src": "95:51:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "65352442",
									"id": 19,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferCards",
									"nameLocation": "161:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "183:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "175:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "175:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "197:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "189:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "189:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "206:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "201:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 13,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "201:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "219:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "214:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 15,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "214:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "174:52:0"
									},
									"returnParameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "235:0:0"
									},
									"scope": 31,
									"src": "152:84:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4dca8ce6",
									"id": 30,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasCard",
									"nameLocation": "251:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "267:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "259:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 20,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "259:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "278:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "273:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 22,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "273:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "291:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "286:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 24,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "286:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "258:40:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "322:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 27,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "322:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "321:6:0"
									},
									"scope": 31,
									"src": "242:86:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 191,
							"src": "60:271:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CardTrading",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 190,
							"linearizedBaseContracts": [
								190
							],
							"name": "CardTrading",
							"nameLocation": "344:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "CardTrading.Listing",
									"id": 40,
									"members": [
										{
											"constant": false,
											"id": 33,
											"mutability": "mutable",
											"name": "seller",
											"nameLocation": "397:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 40,
											"src": "389:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 32,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "389:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 35,
											"mutability": "mutable",
											"name": "offerCardId",
											"nameLocation": "419:11:0",
											"nodeType": "VariableDeclaration",
											"scope": 40,
											"src": "414:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 34,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "414:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 37,
											"mutability": "mutable",
											"name": "requestCardId",
											"nameLocation": "446:13:0",
											"nodeType": "VariableDeclaration",
											"scope": 40,
											"src": "441:18:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 36,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "441:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 39,
											"mutability": "mutable",
											"name": "active",
											"nameLocation": "475:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 40,
											"src": "470:11:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 38,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "470:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Listing",
									"nameLocation": "370:7:0",
									"nodeType": "StructDefinition",
									"scope": 190,
									"src": "363:126:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "de74e57b",
									"id": 44,
									"mutability": "mutable",
									"name": "listings",
									"nameLocation": "514:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 190,
									"src": "497:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_struct$_Listing_$40_storage_$dyn_storage",
										"typeString": "struct CardTrading.Listing[]"
									},
									"typeName": {
										"baseType": {
											"id": 42,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 41,
												"name": "Listing",
												"nameLocations": [
													"497:7:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 40,
												"src": "497:7:0"
											},
											"referencedDeclaration": 40,
											"src": "497:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
												"typeString": "struct CardTrading.Listing"
											}
										},
										"id": 43,
										"nodeType": "ArrayTypeName",
										"src": "497:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_struct$_Listing_$40_storage_$dyn_storage_ptr",
											"typeString": "struct CardTrading.Listing[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "15d52a5c",
									"id": 47,
									"mutability": "mutable",
									"name": "inventory",
									"nameLocation": "556:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 190,
									"src": "531:34:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IInventoryManager_$31",
										"typeString": "contract IInventoryManager"
									},
									"typeName": {
										"id": 46,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 45,
											"name": "IInventoryManager",
											"nameLocations": [
												"531:17:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 31,
											"src": "531:17:0"
										},
										"referencedDeclaration": 31,
										"src": "531:17:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IInventoryManager_$31",
											"typeString": "contract IInventoryManager"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 58,
										"nodeType": "Block",
										"src": "612:66:0",
										"statements": [
											{
												"expression": {
													"id": 56,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 52,
														"name": "inventory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 47,
														"src": "623:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IInventoryManager_$31",
															"typeString": "contract IInventoryManager"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 54,
																"name": "inventoryAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 49,
																"src": "653:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 53,
															"name": "IInventoryManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 31,
															"src": "635:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IInventoryManager_$31_$",
																"typeString": "type(contract IInventoryManager)"
															}
														},
														"id": 55,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "635:35:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IInventoryManager_$31",
															"typeString": "contract IInventoryManager"
														}
													},
													"src": "623:47:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IInventoryManager_$31",
														"typeString": "contract IInventoryManager"
													}
												},
												"id": 57,
												"nodeType": "ExpressionStatement",
												"src": "623:47:0"
											}
										]
									},
									"id": 59,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "inventoryAddress",
												"nameLocation": "594:16:0",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "586:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "586:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "585:26:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "612:0:0"
									},
									"scope": 190,
									"src": "574:104:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 100,
										"nodeType": "Block",
										"src": "756:373:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 73,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 69,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 67,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 61,
																	"src": "775:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "39",
																	"id": 68,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "789:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_9_by_1",
																		"typeString": "int_const 9"
																	},
																	"value": "9"
																},
																"src": "775:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 72,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 70,
																	"name": "requestCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 63,
																	"src": "794:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "39",
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "810:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_9_by_1",
																		"typeString": "int_const 9"
																	},
																	"value": "9"
																},
																"src": "794:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "775:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642063617264204944",
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "813:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															},
															"value": "Invalid card ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															}
														],
														"id": 66,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "767:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "767:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 76,
												"nodeType": "ExpressionStatement",
												"src": "767:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 80,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "868:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 81,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "872:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "868:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 82,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 61,
																	"src": "880:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "31",
																	"id": 83,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "893:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	}
																],
																"expression": {
																	"id": 78,
																	"name": "inventory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 47,
																	"src": "850:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IInventoryManager_$31",
																		"typeString": "contract IInventoryManager"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "860:7:0",
																"memberName": "hasCard",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 30,
																"src": "850:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,uint256) view external returns (bool)"
																}
															},
															"id": 84,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "850:45:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520646f6e2774206861766520746865206f6666657265642063617264",
															"id": 85,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "897:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0",
																"typeString": "literal_string \"You don't have the offered card\""
															},
															"value": "You don't have the offered card"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0",
																"typeString": "literal_string \"You don't have the offered card\""
															}
														],
														"id": 77,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "842:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 86,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "842:89:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 87,
												"nodeType": "ExpressionStatement",
												"src": "842:89:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 92,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "989:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "993:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "989:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 94,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 61,
																	"src": "1027:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 95,
																	"name": "requestCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 63,
																	"src": "1068:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "74727565",
																	"id": 96,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1104:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 91,
																"name": "Listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 40,
																"src": "958:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_struct$_Listing_$40_storage_ptr_$",
																	"typeString": "type(struct CardTrading.Listing storage pointer)"
																}
															},
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "structConstructorCall",
															"lValueRequested": false,
															"nameLocations": [
																"981:6:0",
																"1014:11:0",
																"1053:13:0",
																"1096:6:0"
															],
															"names": [
																"seller",
																"offerCardId",
																"requestCardId",
																"active"
															],
															"nodeType": "FunctionCall",
															"src": "958:162:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$40_memory_ptr",
																"typeString": "struct CardTrading.Listing memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Listing_$40_memory_ptr",
																"typeString": "struct CardTrading.Listing memory"
															}
														],
														"expression": {
															"id": 88,
															"name": "listings",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 44,
															"src": "944:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Listing_$40_storage_$dyn_storage",
																"typeString": "struct CardTrading.Listing storage ref[] storage ref"
															}
														},
														"id": 90,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "953:4:0",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "944:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Listing_$40_storage_$dyn_storage_ptr_$_t_struct$_Listing_$40_storage_$returns$__$attached_to$_t_array$_t_struct$_Listing_$40_storage_$dyn_storage_ptr_$",
															"typeString": "function (struct CardTrading.Listing storage ref[] storage pointer,struct CardTrading.Listing storage ref)"
														}
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "944:177:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 99,
												"nodeType": "ExpressionStatement",
												"src": "944:177:0"
											}
										]
									},
									"functionSelector": "a79123a9",
									"id": 101,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createListing",
									"nameLocation": "695:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "offerCardId",
												"nameLocation": "714:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "709:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 60,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "709:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "requestCardId",
												"nameLocation": "732:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "727:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 62,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "727:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:38:0"
									},
									"returnParameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "756:0:0"
									},
									"scope": 190,
									"src": "686:443:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 178,
										"nodeType": "Block",
										"src": "1185:616:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 110,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 107,
																"name": "listingId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 103,
																"src": "1204:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 108,
																	"name": "listings",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 44,
																	"src": "1216:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Listing_$40_storage_$dyn_storage",
																		"typeString": "struct CardTrading.Listing storage ref[] storage ref"
																	}
																},
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1225:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "1216:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1204:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c6964206c697374696e67204944",
															"id": 111,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1233:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_06621c6d39177fcdbad6bb99c0642b8c7cd419ea508ac568edd78e990c8d4d0d",
																"typeString": "literal_string \"Invalid listing ID\""
															},
															"value": "Invalid listing ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_06621c6d39177fcdbad6bb99c0642b8c7cd419ea508ac568edd78e990c8d4d0d",
																"typeString": "literal_string \"Invalid listing ID\""
															}
														],
														"id": 106,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1196:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1196:58:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 113,
												"nodeType": "ExpressionStatement",
												"src": "1196:58:0"
											},
											{
												"assignments": [
													116
												],
												"declarations": [
													{
														"constant": false,
														"id": 116,
														"mutability": "mutable",
														"name": "listing",
														"nameLocation": "1281:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 178,
														"src": "1265:23:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
															"typeString": "struct CardTrading.Listing"
														},
														"typeName": {
															"id": 115,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 114,
																"name": "Listing",
																"nameLocations": [
																	"1265:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 40,
																"src": "1265:7:0"
															},
															"referencedDeclaration": 40,
															"src": "1265:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
																"typeString": "struct CardTrading.Listing"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 120,
												"initialValue": {
													"baseExpression": {
														"id": 117,
														"name": "listings",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 44,
														"src": "1291:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Listing_$40_storage_$dyn_storage",
															"typeString": "struct CardTrading.Listing storage ref[] storage ref"
														}
													},
													"id": 119,
													"indexExpression": {
														"id": 118,
														"name": "listingId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1300:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1291:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Listing_$40_storage",
														"typeString": "struct CardTrading.Listing storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1265:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 122,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 116,
																"src": "1329:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 123,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1337:6:0",
															"memberName": "active",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 39,
															"src": "1329:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c697374696e6720696e616374697665",
															"id": 124,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1345:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_879c038c5436c50ae000565a30e220e008580738ca6204364fa18881643959ff",
																"typeString": "literal_string \"Listing inactive\""
															},
															"value": "Listing inactive"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_879c038c5436c50ae000565a30e220e008580738ca6204364fa18881643959ff",
																"typeString": "literal_string \"Listing inactive\""
															}
														],
														"id": 121,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1321:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1321:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 126,
												"nodeType": "ExpressionStatement",
												"src": "1321:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 128,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1383:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 129,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1387:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1383:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 130,
																	"name": "listing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 116,
																	"src": "1397:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
																		"typeString": "struct CardTrading.Listing storage pointer"
																	}
																},
																"id": 131,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1405:6:0",
																"memberName": "seller",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 33,
																"src": "1397:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1383:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e27742061636365707420796f7572206f776e206c697374696e67",
															"id": 133,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1413:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6ce4d97508fa789079c7d9d510da30fe6da52d84b4f6ade9251c76df91409c85",
																"typeString": "literal_string \"Can't accept your own listing\""
															},
															"value": "Can't accept your own listing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6ce4d97508fa789079c7d9d510da30fe6da52d84b4f6ade9251c76df91409c85",
																"typeString": "literal_string \"Can't accept your own listing\""
															}
														],
														"id": 127,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1375:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1375:70:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 135,
												"nodeType": "ExpressionStatement",
												"src": "1375:70:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 139,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1484:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 140,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1488:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1484:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"expression": {
																		"id": 141,
																		"name": "listing",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 116,
																		"src": "1496:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
																			"typeString": "struct CardTrading.Listing storage pointer"
																		}
																	},
																	"id": 142,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1504:13:0",
																	"memberName": "requestCardId",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 37,
																	"src": "1496:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "31",
																	"id": 143,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1519:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	}
																],
																"expression": {
																	"id": 137,
																	"name": "inventory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 47,
																	"src": "1466:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IInventoryManager_$31",
																		"typeString": "contract IInventoryManager"
																	}
																},
																"id": 138,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1476:7:0",
																"memberName": "hasCard",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 30,
																"src": "1466:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,uint256) view external returns (bool)"
																}
															},
															"id": 144,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1466:55:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520646f6e2774206861766520746865207265717565737465642063617264",
															"id": 145,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1523:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_14c3f9c19809b36c330d8144e91e11d76541a09a20b379690e81da0b4f5e8afc",
																"typeString": "literal_string \"You don't have the requested card\""
															},
															"value": "You don't have the requested card"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_14c3f9c19809b36c330d8144e91e11d76541a09a20b379690e81da0b4f5e8afc",
																"typeString": "literal_string \"You don't have the requested card\""
															}
														],
														"id": 136,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1458:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1458:101:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 147,
												"nodeType": "ExpressionStatement",
												"src": "1458:101:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 151,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1619:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 152,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1623:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1619:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 153,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 116,
																"src": "1631:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 154,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1639:6:0",
															"memberName": "seller",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 33,
															"src": "1631:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 155,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 116,
																"src": "1647:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 156,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1655:13:0",
															"memberName": "requestCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 37,
															"src": "1647:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 157,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1670:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"expression": {
															"id": 148,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 47,
															"src": "1595:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInventoryManager_$31",
																"typeString": "contract IInventoryManager"
															}
														},
														"id": 150,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1605:13:0",
														"memberName": "transferCards",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 19,
														"src": "1595:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256) external"
														}
													},
													"id": 158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1595:77:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 159,
												"nodeType": "ExpressionStatement",
												"src": "1595:77:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 163,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 116,
																"src": "1707:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 164,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1715:6:0",
															"memberName": "seller",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 33,
															"src": "1707:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 165,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1723:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 166,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1727:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1723:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 167,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 116,
																"src": "1735:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 168,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1743:11:0",
															"memberName": "offerCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 35,
															"src": "1735:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 169,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1756:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"expression": {
															"id": 160,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 47,
															"src": "1683:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInventoryManager_$31",
																"typeString": "contract IInventoryManager"
															}
														},
														"id": 162,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1693:13:0",
														"memberName": "transferCards",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 19,
														"src": "1683:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256) external"
														}
													},
													"id": 170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1683:75:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 171,
												"nodeType": "ExpressionStatement",
												"src": "1683:75:0"
											},
											{
												"expression": {
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 172,
															"name": "listing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 116,
															"src": "1771:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
																"typeString": "struct CardTrading.Listing storage pointer"
															}
														},
														"id": 174,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "1779:6:0",
														"memberName": "active",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 39,
														"src": "1771:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 175,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1788:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1771:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "1771:22:0"
											}
										]
									},
									"functionSelector": "b0eceb7e",
									"id": 179,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "acceptListing",
									"nameLocation": "1146:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "listingId",
												"nameLocation": "1165:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "1160:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 102,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1160:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1159:16:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1185:0:0"
									},
									"scope": 190,
									"src": "1137:664:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 188,
										"nodeType": "Block",
										"src": "1876:34:0",
										"statements": [
											{
												"expression": {
													"id": 186,
													"name": "listings",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 44,
													"src": "1894:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Listing_$40_storage_$dyn_storage",
														"typeString": "struct CardTrading.Listing storage ref[] storage ref"
													}
												},
												"functionReturnParameters": 185,
												"id": 187,
												"nodeType": "Return",
												"src": "1887:15:0"
											}
										]
									},
									"functionSelector": "ae73ccec",
									"id": 189,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAllListings",
									"nameLocation": "1818:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1832:2:0"
									},
									"returnParameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1858:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Listing_$40_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct CardTrading.Listing[]"
												},
												"typeName": {
													"baseType": {
														"id": 182,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 181,
															"name": "Listing",
															"nameLocations": [
																"1858:7:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 40,
															"src": "1858:7:0"
														},
														"referencedDeclaration": 40,
														"src": "1858:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Listing_$40_storage_ptr",
															"typeString": "struct CardTrading.Listing"
														}
													},
													"id": 183,
													"nodeType": "ArrayTypeName",
													"src": "1858:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Listing_$40_storage_$dyn_storage_ptr",
														"typeString": "struct CardTrading.Listing[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1857:18:0"
									},
									"scope": 190,
									"src": "1809:101:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 191,
							"src": "335:1578:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:1882:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}