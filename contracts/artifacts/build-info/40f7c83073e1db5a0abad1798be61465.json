{
	"id": "40f7c83073e1db5a0abad1798be61465",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"TradingGame.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract CardTrading {\r\n    // Each playerâ€™s inventory: address => [amount of card 0-8]\r\n    mapping(address => uint[9]) public cardInventory;\r\n\r\n    // Simplified trade listing structure: single card for single card\r\n    struct Listing {\r\n        address seller;\r\n        uint offerCardId;\r\n        uint requestCardId;\r\n        bool active;\r\n    }\r\n\r\n    Listing[] public listings;\r\n\r\n    // Add a specific card to a user's inventory, used with the wheel function\r\n    function addCard(address to, uint cardId) external {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(cardId < 9, \"Invalid card ID\"); // Ensure valid card ID (0 to 8)\r\n\r\n        cardInventory[to][cardId] += 1;\r\n    }\r\n\r\n    // Transfer cards from msg.sender to another user\r\n    function transferCards(address to, uint[9] calldata cardsToSend) external {\r\n        require(to != address(0), \"Invalid recipient\");\r\n\r\n        for (uint i = 0; i < 9; i++) {\r\n            uint amount = cardsToSend[i];\r\n            if (amount > 0) {\r\n                require(cardInventory[msg.sender][i] >= amount, \"Not enough cards to send\");\r\n                cardInventory[msg.sender][i] -= amount;\r\n                cardInventory[to][i] += amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create a listing for one card in exchange for another card\r\n    function createListing(uint offerCardId, uint requestCardId) external {\r\n        require(offerCardId < 9 && requestCardId < 9, \"Invalid card ID\");\r\n        require(cardInventory[msg.sender][offerCardId] >= 1, \"You don't have the offered card\");\r\n\r\n        listings.push(Listing({\r\n            seller: msg.sender,\r\n            offerCardId: offerCardId,\r\n            requestCardId: requestCardId,\r\n            active: true\r\n        }));\r\n    }\r\n\r\n    // Accept a listing and perform the trade\r\n    function acceptListing(uint listingId) external {\r\n        require(listingId < listings.length, \"Invalid listing ID\");\r\n        Listing storage listing = listings[listingId];\r\n        require(listing.active, \"Listing is no longer active\");\r\n        require(msg.sender != listing.seller, \"Cannot accept your own listing\");\r\n\r\n        // Check buyer owns the requested card\r\n        require(cardInventory[msg.sender][listing.requestCardId] >= 1, \"You do not have the requested card\");\r\n\r\n        // Perform the trade\r\n        cardInventory[msg.sender][listing.requestCardId] -= 1;\r\n        cardInventory[listing.seller][listing.requestCardId] += 1;\r\n\r\n        cardInventory[listing.seller][listing.offerCardId] -= 1;\r\n        cardInventory[msg.sender][listing.offerCardId] += 1;\r\n\r\n        listing.active = false;\r\n    }\r\n\r\n    // Get all listings\r\n    function getAllListings() external view returns (Listing[] memory) {\r\n        return listings;\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"TradingGame.sol": {
				"CardTrading": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "listingId",
									"type": "uint256"
								}
							],
							"name": "acceptListing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								}
							],
							"name": "addCard",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "cardInventory",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "offerCardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestCardId",
									"type": "uint256"
								}
							],
							"name": "createListing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllListings",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "seller",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "offerCardId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "requestCardId",
											"type": "uint256"
										},
										{
											"internalType": "bool",
											"name": "active",
											"type": "bool"
										}
									],
									"internalType": "struct CardTrading.Listing[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "listings",
							"outputs": [
								{
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "offerCardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestCardId",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256[9]",
									"name": "cardsToSend",
									"type": "uint256[9]"
								}
							],
							"name": "transferCards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"acceptListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardInventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestCardId\",\"type\":\"uint256\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllListings\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestCardId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct CardTrading.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestCardId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[9]\",\"name\":\"cardsToSend\",\"type\":\"uint256[9]\"}],\"name\":\"transferCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"TradingGame.sol\":\"CardTrading\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"TradingGame.sol\":{\"keccak256\":\"0xbd2eb432aaea2b9bea11e426538ee6ed4684aaa4f870d55709360eea0343ee0d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3805a33ee8c0fc4197c317d7fb0ff1fd9dfd171cc9dac3d577df901dbc3bc3a\",\"dweb:/ipfs/QmUjYKny9SC1JHRRmehCMdqL32bv8AVh7QNsFUZzAVYVQm\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "TradingGame.sol:CardTrading",
								"label": "cardInventory",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_array(t_uint256)9_storage)"
							},
							{
								"astId": 20,
								"contract": "TradingGame.sol:CardTrading",
								"label": "listings",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_struct(Listing)16_storage)dyn_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_struct(Listing)16_storage)dyn_storage": {
								"base": "t_struct(Listing)16_storage",
								"encoding": "dynamic_array",
								"label": "struct CardTrading.Listing[]",
								"numberOfBytes": "32"
							},
							"t_array(t_uint256)9_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[9]",
								"numberOfBytes": "288"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_array(t_uint256)9_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256[9])",
								"numberOfBytes": "32",
								"value": "t_array(t_uint256)9_storage"
							},
							"t_struct(Listing)16_storage": {
								"encoding": "inplace",
								"label": "struct CardTrading.Listing",
								"members": [
									{
										"astId": 9,
										"contract": "TradingGame.sol:CardTrading",
										"label": "seller",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 11,
										"contract": "TradingGame.sol:CardTrading",
										"label": "offerCardId",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 13,
										"contract": "TradingGame.sol:CardTrading",
										"label": "requestCardId",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 15,
										"contract": "TradingGame.sol:CardTrading",
										"label": "active",
										"offset": 0,
										"slot": "3",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "128"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 14034\n// Code size = 44235 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 2 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 9 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @20 if a0 != 0\n      : @17 (gas: 3)\n   504: a0 = 0x40\n   507: a1 = 0x20\n   510: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   515: a1 = u8 [a0 + 0x11]\n   518: a2 = u8 [a0 + 0x10]\n   521: a3 = u8 [a0 + 0x12]\n   524: a4 = u8 [a0 + 0x13]\n   527: a1 = a1 << 0x8\n   530: a1 = a1 | a2\n   533: a3 = a3 << 0x10\n   536: a4 = a4 << 0x18\n   539: a3 = a3 | a4\n   542: a1 = a1 | a3\n   545: a2 = u8 [a0 + 0x15]\n   548: a3 = u8 [a0 + 0x14]\n   551: a4 = u8 [a0 + 0x16]\n   554: a5 = u8 [a0 + 0x17]\n   557: a2 = a2 << 0x8\n   560: a2 = a2 | a3\n   563: a4 = a4 << 0x10\n   566: a5 = a5 << 0x18\n   569: a4 = a4 | a5\n   572: a2 = a2 | a4\n   575: a2 = a2 << 0x20\n   578: t0 = a2 | a1\n   581: a2 = u8 [a0 + 0x1]\n   584: a3 = u8 [a0]\n   586: a4 = u8 [a0 + 0x2]\n   589: a5 = u8 [a0 + 0x3]\n   592: a2 = a2 << 0x8\n   595: a2 = a2 | a3\n   598: a4 = a4 << 0x10\n   601: a5 = a5 << 0x18\n   604: a4 = a4 | a5\n   607: a2 = a2 | a4\n   610: a3 = u8 [a0 + 0x5]\n   613: a4 = u8 [a0 + 0x4]\n   616: a5 = u8 [a0 + 0x6]\n   619: s1 = u8 [a0 + 0x7]\n   622: a3 = a3 << 0x8\n   625: a3 = a3 | a4\n   628: a5 = a5 << 0x10\n   631: s1 = s1 << 0x18\n   634: a5 = a5 | s1\n   637: a3 = a3 | a5\n   640: a3 = a3 << 0x20\n   643: a2 = a2 | a3\n   646: a3 = u8 [a0 + 0x19]\n   649: a4 = u8 [a0 + 0x18]\n   652: a5 = u8 [a0 + 0x1a]\n   655: s1 = u8 [a0 + 0x1b]\n   658: a3 = a3 << 0x8\n   661: a3 = a3 | a4\n   664: a5 = a5 << 0x10\n   667: s1 = s1 << 0x18\n   670: a5 = a5 | s1\n   673: a3 = a3 | a5\n   676: a4 = u8 [a0 + 0x1d]\n   679: a5 = u8 [a0 + 0x1c]\n   682: s1 = u8 [a0 + 0x1e]\n   685: a1 = u8 [a0 + 0x1f]\n   688: a4 = a4 << 0x8\n   691: a4 = a4 | a5\n   694: s1 = s1 << 0x10\n   697: a1 = a1 << 0x18\n   700: a1 = a1 | s1\n   703: a1 = a1 | a4\n   706: a1 = a1 << 0x20\n   709: a3 = a3 | a1\n   712: a1 = u8 [a0 + 0x9]\n   715: a4 = u8 [a0 + 0x8]\n   718: a5 = u8 [a0 + 0xa]\n   721: s1 = u8 [a0 + 0xb]\n   724: a1 = a1 << 0x8\n   727: a1 = a1 | a4\n   730: a5 = a5 << 0x10\n   733: s1 = s1 << 0x18\n   736: a5 = a5 | s1\n   739: a1 = a1 | a5\n   742: a4 = u8 [a0 + 0xd]\n   745: a5 = u8 [a0 + 0xc]\n   748: s1 = u8 [a0 + 0xe]\n   751: a0 = u8 [a0 + 0xf]\n   754: a4 = a4 << 0x8\n   757: a4 = a4 | a5\n   760: s1 = s1 << 0x10\n   763: a0 = a0 << 0x18\n   766: a0 = a0 | s1\n   769: a0 = a0 | a4\n   772: a0 = a0 << 0x20\n   775: a0 = a0 | a1\n   778: a0 = reverse a0\n   780: s1 = reverse a3\n   782: a1 = reverse a2\n   784: a2 = reverse t0\n   786: a1 = a1 | a2\n   789: a2 = s1 | a0\n   792: a2 = a2 | a1\n   795: a2 = a2 >> 0x20\n   798: a0 = a0 | a1\n   801: a0 = a0 << 0x20\n   804: a0 = a0 | a2\n   807: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   810: trap\n      : @20 (gas: 3)\n   811: a0 = 0\n   813: a1 = 0\n   815: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   820: i32 a1 = a0 + 0\n   822: a0 = 0x1\n   825: a2 = 0\n   827: ecalli 6 // 'seal_return'\n   829: fallthrough\n      : @22 (gas: 4)\n   830: i32 s1 = s1 + 0\n   832: a0 = s1\n   834: a1 = 0\n   836: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   841: i32 a0 = a0 + 0\n   843: a1 = 0\n   845: a2 = 0\n   847: ecalli 0 // 'call_data_copy'\n   848: fallthrough\n      : @24 (gas: 2)\n   849: a1 = i32 [0x20008]\n   854: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   857: a0 = 0x30010\n   862: i32 a0 = a0 + 0\n   864: ecalli 7 // 'set_immutable_data'\n   866: fallthrough\n      : @26 (gas: 3)\n   867: a0 = s1\n   869: a1 = 0\n   871: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   876: i32 a1 = a0 + 0\n   878: a0 = 0\n   880: a2 = 0\n   882: ra = 0x12\n   885: ecalli 6 // 'seal_return'\n   887: fallthrough\n      : @28 [@dyn 9] (gas: 8)\n   888: sp = sp + 0xffffffffffffffc0\n   891: u64 [sp + 0x38] = ra\n   894: u64 [sp + 0x30] = s0\n   897: s0 = sp + 0x40\n   900: sp = sp & 0xffffffffffffffe0\n   903: a0 = 0x40\n   906: a1 = 0x20\n   909: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 34)\n   914: u8 [a0 + 31] = 0x80\n   919: u8 [a0 + 30] = 0\n   922: u8 [a0 + 29] = 0\n   925: u8 [a0 + 28] = 0\n   928: u8 [a0 + 27] = 0\n   931: u8 [a0 + 26] = 0\n   934: u8 [a0 + 25] = 0\n   937: u8 [a0 + 24] = 0\n   940: u8 [a0 + 23] = 0\n   943: u8 [a0 + 22] = 0\n   946: u8 [a0 + 21] = 0\n   949: u8 [a0 + 20] = 0\n   952: u8 [a0 + 19] = 0\n   955: u8 [a0 + 18] = 0\n   958: u8 [a0 + 17] = 0\n   961: u8 [a0 + 16] = 0\n   964: u8 [a0 + 15] = 0\n   967: u8 [a0 + 14] = 0\n   970: u8 [a0 + 13] = 0\n   973: u8 [a0 + 12] = 0\n   976: u8 [a0 + 11] = 0\n   979: u8 [a0 + 10] = 0\n   982: u8 [a0 + 9] = 0\n   985: u8 [a0 + 8] = 0\n   988: u8 [a0 + 7] = 0\n   991: u8 [a0 + 3] = 0\n   994: u8 [a0 + 2] = 0\n   997: u8 [a0 + 1] = 0\n  1000: u8 [a0 + 0] = 0\n  1002: a1 = i32 [0x20004]\n  1007: u8 [a0 + 6] = 0\n  1010: u8 [a0 + 5] = 0\n  1013: u8 [a0 + 4] = 0\n  1016: jump @43 if a1 <u 4\n      : @30 (gas: 4)\n  1021: i32 a0 = sp + 0\n  1023: a1 = 0\n  1025: ecalli 1 // 'call_data_load'\n  1027: fallthrough\n      : @31 (gas: 2)\n  1028: a0 = i32 [sp + 0x1c]\n  1031: jump @36 if a0 <=s 3732202874\n      : @32 (gas: 2)\n  1038: a1 = 0x48d1c000\n  1044: jump @40 if a0 >s 1221707185\n      : @33 (gas: 1)\n  1051: jump @45 if a0 == 3732202875\n      : @34 (gas: 1)\n  1058: jump @43 if a0 != 4190598634\n      : @35 (gas: 1)\n  1065: ra = 22, jump @234\n      : @36 [@dyn 11] (gas: 1)\n  1070: jump @44 if a0 == 2811306921\n      : @37 (gas: 1)\n  1077: jump @47 if a0 == 2926824684\n      : @38 (gas: 1)\n  1085: jump @43 if a0 != 2968316798\n      : @39 (gas: 1)\n  1092: ra = 24, jump @186\n      : @40 [@dyn 12] (gas: 2)\n  1097: i32 a1 = a1 + 0x5b2\n  1101: jump @46 if a0 == a1\n      : @41 (gas: 1)\n  1104: jump @43 if a0 != 1347944562\n      : @42 (gas: 14)\n  1111: ra = 0x1a\n  1114: sp = sp + 0xfffffffffffffec0\n  1118: u64 [sp + 0x138] = ra\n  1122: u64 [sp + 0x130] = s0\n  1126: u64 [sp + 0x128] = s1\n  1130: s0 = sp + 0x140\n  1134: sp = sp & 0xffffffffffffffe0\n  1137: u64 [sp + 280] = 0\n  1141: u64 [sp + 272] = 0\n  1145: u64 [sp + 264] = 0\n  1149: u64 [sp + 256] = 0\n  1153: i32 a0 = sp + 0x100\n  1157: ecalli 9 // 'value_transferred'\n  1159: jump @92\n      : @43 [@dyn 13] (gas: 1)\n  1162: ra = 28, jump @245\n      : @44 [@dyn 14] (gas: 1)\n  1167: ra = 30, jump @111\n      : @45 [@dyn 15] (gas: 14)\n  1172: ra = 0x20\n  1175: sp = sp + 0xfffffffffffffe60\n  1179: u64 [sp + 0x198] = ra\n  1183: u64 [sp + 0x190] = s0\n  1187: u64 [sp + 0x188] = s1\n  1191: s0 = sp + 0x1a0\n  1195: sp = sp & 0xffffffffffffffe0\n  1198: u64 [sp + 344] = 0\n  1202: u64 [sp + 336] = 0\n  1206: u64 [sp + 328] = 0\n  1210: u64 [sp + 320] = 0\n  1214: i32 a0 = sp + 0x140\n  1218: ecalli 9 // 'value_transferred'\n  1220: jump @217\n      : @46 [@dyn 16] (gas: 13)\n  1223: ra = 0x22\n  1226: sp = sp + 0xffffffffffffff00\n  1230: u64 [sp + 0xf8] = ra\n  1234: u64 [sp + 0xf0] = s0\n  1238: s0 = sp + 0x100\n  1242: sp = sp & 0xffffffffffffffe0\n  1245: u64 [sp + 216] = 0\n  1249: u64 [sp + 208] = 0\n  1253: u64 [sp + 200] = 0\n  1257: u64 [sp + 192] = 0\n  1261: i32 a0 = sp + 0xc0\n  1265: ecalli 9 // 'value_transferred'\n  1267: jump @60\n      : @47 [@dyn 17] (gas: 14)\n  1270: ra = 0x24\n  1273: sp = sp + 0xfffffffffffffee0\n  1277: u64 [sp + 0x118] = ra\n  1281: u64 [sp + 0x110] = s0\n  1285: u64 [sp + 0x108] = s1\n  1289: s0 = sp + 0x120\n  1293: sp = sp & 0xffffffffffffffe0\n  1296: u64 [sp + 248] = 0\n  1300: u64 [sp + 240] = 0\n  1304: u64 [sp + 232] = 0\n  1308: u64 [sp + 224] = 0\n  1312: i32 a0 = sp + 0xe0\n  1316: ecalli 9 // 'value_transferred'\n  1318: jump @168\n      : @48 [@dyn 18] (gas: 7)\n  1321: sp = sp + 0xfffffffffffffff0\n  1324: u64 [sp + 0x8] = ra\n  1327: u64 [sp] = s0\n  1329: s0 = a0\n  1331: a0 = 0x40\n  1334: a1 = 0x20\n  1337: ra = 38, jump @0\n      : @49 [@dyn 19] (gas: 100)\n  1342: a1 = u8 [a0 + 0x1]\n  1345: a2 = u8 [a0]\n  1347: a3 = u8 [a0 + 0x2]\n  1350: a4 = u8 [a0 + 0x3]\n  1353: a1 = a1 << 0x8\n  1356: a1 = a1 | a2\n  1359: a3 = a3 << 0x10\n  1362: a4 = a4 << 0x18\n  1365: a3 = a3 | a4\n  1368: a1 = a1 | a3\n  1371: a2 = u8 [a0 + 0x5]\n  1374: a3 = u8 [a0 + 0x4]\n  1377: a4 = u8 [a0 + 0x6]\n  1380: a5 = u8 [a0 + 0x7]\n  1383: a2 = a2 << 0x8\n  1386: a2 = a2 | a3\n  1389: a4 = a4 << 0x10\n  1392: a5 = a5 << 0x18\n  1395: a4 = a4 | a5\n  1398: a2 = a2 | a4\n  1401: a2 = a2 << 0x20\n  1404: t0 = a2 | a1\n  1407: a2 = u8 [a0 + 0x9]\n  1410: a3 = u8 [a0 + 0x8]\n  1413: a4 = u8 [a0 + 0xa]\n  1416: a5 = u8 [a0 + 0xb]\n  1419: a2 = a2 << 0x8\n  1422: a2 = a2 | a3\n  1425: a4 = a4 << 0x10\n  1428: a5 = a5 << 0x18\n  1431: a4 = a4 | a5\n  1434: a2 = a2 | a4\n  1437: a3 = u8 [a0 + 0xd]\n  1440: a4 = u8 [a0 + 0xc]\n  1443: a5 = u8 [a0 + 0xe]\n  1446: a1 = u8 [a0 + 0xf]\n  1449: a3 = a3 << 0x8\n  1452: a3 = a3 | a4\n  1455: a5 = a5 << 0x10\n  1458: a1 = a1 << 0x18\n  1461: a1 = a1 | a5\n  1464: a1 = a1 | a3\n  1467: a1 = a1 << 0x20\n  1470: t1 = a1 | a2\n  1473: a1 = u8 [a0 + 0x11]\n  1476: a3 = u8 [a0 + 0x10]\n  1479: a4 = u8 [a0 + 0x12]\n  1482: a5 = u8 [a0 + 0x13]\n  1485: a1 = a1 << 0x8\n  1488: a1 = a1 | a3\n  1491: a4 = a4 << 0x10\n  1494: a5 = a5 << 0x18\n  1497: a4 = a4 | a5\n  1500: a1 = a1 | a4\n  1503: a3 = u8 [a0 + 0x15]\n  1506: a4 = u8 [a0 + 0x14]\n  1509: a5 = u8 [a0 + 0x16]\n  1512: a2 = u8 [a0 + 0x17]\n  1515: a3 = a3 << 0x8\n  1518: a3 = a3 | a4\n  1521: a5 = a5 << 0x10\n  1524: a2 = a2 << 0x18\n  1527: a2 = a2 | a5\n  1530: a2 = a2 | a3\n  1533: a2 = a2 << 0x20\n  1536: a3 = a2 | a1\n  1539: a1 = u8 [a0 + 0x19]\n  1542: a2 = u8 [a0 + 0x18]\n  1545: a4 = u8 [a0 + 0x1a]\n  1548: a5 = u8 [a0 + 0x1b]\n  1551: a1 = a1 << 0x8\n  1554: a1 = a1 | a2\n  1557: a4 = a4 << 0x10\n  1560: a5 = a5 << 0x18\n  1563: a4 = a4 | a5\n  1566: a1 = a1 | a4\n  1569: a2 = u8 [a0 + 0x1d]\n  1572: a4 = u8 [a0 + 0x1c]\n  1575: a5 = u8 [a0 + 0x1e]\n  1578: a0 = u8 [a0 + 0x1f]\n  1581: a2 = a2 << 0x8\n  1584: a2 = a2 | a4\n  1587: a5 = a5 << 0x10\n  1590: a0 = a0 << 0x18\n  1593: a0 = a0 | a5\n  1596: a0 = a0 | a2\n  1599: a0 = a0 << 0x20\n  1602: a0 = a0 | a1\n  1605: a0 = reverse a0\n  1607: a1 = reverse a3\n  1609: a2 = reverse t1\n  1611: a3 = reverse t0\n  1613: u64 [s0 + 0x18] = a3\n  1616: u64 [s0 + 0x10] = a2\n  1619: u64 [s0 + 0x8] = a1\n  1622: u64 [s0] = a0\n  1624: ra = u64 [sp + 0x8]\n  1627: s0 = u64 [sp]\n  1629: sp = sp + 0x10\n  1632: ret\n      : @50 (gas: 45)\n  1634: sp = sp + 0xffffffffffffff60\n  1638: u64 [sp + 0x98] = ra\n  1642: u64 [sp + 0x90] = s0\n  1646: u64 [sp + 0x88] = s1\n  1650: s0 = sp + 0xa0\n  1654: sp = sp & 0xffffffffffffffe0\n  1657: t2 = a1\n  1659: s1 = u64 [a2 + 0x8]\n  1662: t0 = u64 [a1 + 0x8]\n  1665: a1 = u64 [a2]\n  1667: a5 = u64 [t2]\n  1669: a3 = u64 [a2 + 0x10]\n  1672: u64 [sp + 0x58] = a3\n  1675: a4 = s1 ^ t0\n  1678: a3 = s1 <u t0\n  1681: t1 = a1 <u a5\n  1684: a3 = t1 if a4 == 0\n  1687: u64 [sp + 0x40] = s1\n  1690: a4 = s1 - t0\n  1693: a4 = a4 - t1\n  1696: u64 [sp + 0x30] = a1\n  1699: u64 [sp + 0x50] = a5\n  1702: a5 = a1 - a5\n  1705: a5 = a5 <u 0x140\n  1709: a5 = a5 ^ 0x1\n  1712: a1 = u64 [t2 + 0x10]\n  1715: s1 = a4 >u 0\n  1717: a5 = s1 if a4 != 0\n  1720: ra = u64 [a2 + 0x18]\n  1723: s1 = u64 [t2 + 0x18]\n  1726: a4 = u64 [sp + 0x58]\n  1729: a2 = a4 - a1\n  1732: t1 = a2 - a3\n  1735: t2 = a2 <u a3\n  1738: a3 = a4 <u a1\n  1741: u64 [sp + 0x18] = ra\n  1744: a4 = ra - s1\n  1747: a4 = a4 - a3\n  1750: a4 = a4 - t2\n  1753: t2 = a4 >s 0\n  1755: a3 = t1 >u 0\n  1757: a3 = t2 if a4 != 0\n  1760: a2 = t1 | a4\n  1763: a5 = a3 if a2 != 0\n  1766: jump @57 if a5 == 0\n      : @51 (gas: 13)\n  1770: u64 [sp + 0x20] = a0\n  1773: a3 = u64 [sp + 0x50]\n  1776: a0 = a3 | a1\n  1779: u64 [sp + 0x48] = t0\n  1782: u64 [sp + 0x28] = s1\n  1785: a2 = t0 | s1\n  1788: a0 = a0 | a2\n  1791: a0 = a0 >> 0x20\n  1794: u64 [sp + 0x38] = a1\n  1797: a1 = a1 | a2\n  1800: a1 = a1 << 0x20\n  1803: a0 = a0 | a1\n  1806: jump @56 if a0 != 0\n      : @52 (gas: 5)\n  1810: s1 = a3\n  1812: i32 a1 = a3 + 0\n  1814: i32 a0 = sp + 0x60\n  1817: ecalli 1 // 'call_data_load'\n  1819: fallthrough\n      : @53 (gas: 11)\n  1820: t1 = u64 [sp + 0x70]\n  1823: a0 = u64 [sp + 0x78]\n  1826: a2 = 0x100000000\n  1836: a2 = t1 ^ a2\n  1839: a2 = a2 | a0\n  1842: a3 = t1 >> 0x20\n  1845: a3 = a3 <u 0x1\n  1848: u64 [sp + 0x10] = a0\n  1851: a3 = 0 if a0 != 0\n  1853: a3 = 0 if a2 == 0\n  1855: jump @57 if a3 == 0\n      : @54 (gas: 27)\n  1859: a2 = s1 + 0x140\n  1863: a3 = a2 <u s1\n  1866: t2 = u64 [sp + 0x48]\n  1869: a4 = t2 + a3\n  1872: a5 = a4 <u t2\n  1875: a5 = a3 if a3 == 0\n  1878: a0 = u64 [sp + 0x30]\n  1881: a2 = a0 <u a2\n  1884: a0 = u64 [sp + 0x40]\n  1887: a3 = a4 ^ a0\n  1890: a4 = a0 <u a4\n  1893: ra = u64 [sp + 0x38]\n  1896: a5 = a5 + ra\n  1899: a4 = a2 if a3 == 0\n  1902: a2 = a5 <u ra\n  1905: t0 = u64 [sp + 0x28]\n  1908: a2 = a2 + t0\n  1911: a0 = u64 [sp + 0x18]\n  1914: a3 = a2 ^ a0\n  1917: a2 = a0 <u a2\n  1920: a1 = u64 [sp + 0x58]\n  1923: a0 = a1 <u a5\n  1926: a2 = a0 if a3 == 0\n  1929: a0 = a5 ^ a1\n  1932: a0 = a0 | a3\n  1935: a4 = a2 if a0 != 0\n  1938: jump @57 if a4 != 0\n      : @55 (gas: 26)\n  1941: a0 = u64 [sp + 0x68]\n  1944: a2 = u64 [sp + 0x60]\n  1947: a3 = s1 + 0x20\n  1950: a4 = a3 <u s1\n  1953: a5 = t2 + a4\n  1956: a1 = a5 <u t2\n  1959: a1 = a4 if a4 == 0\n  1962: a1 = a1 + ra\n  1965: a4 = a1 <u ra\n  1968: a4 = a4 + t0\n  1971: s1 = u64 [sp + 0x20]\n  1974: u64 [s1] = a2\n  1976: u64 [s1 + 0x20] = a3\n  1979: u64 [s1 + 0x8] = a0\n  1982: u64 [s1 + 0x10] = t1\n  1985: u64 [s1 + 0x28] = a5\n  1988: a0 = u64 [sp + 0x10]\n  1991: u64 [s1 + 0x18] = a0\n  1994: u64 [s1 + 0x30] = a1\n  1997: u64 [s1 + 0x38] = a4\n  2000: sp = s0 + 0xffffffffffffff60\n  2004: ra = u64 [sp + 0x98]\n  2008: s0 = u64 [sp + 0x90]\n  2012: s1 = u64 [sp + 0x88]\n  2016: sp = sp + 0xa0\n  2020: ret\n      : @56 (gas: 1)\n  2022: trap\n      : @57 (gas: 3)\n  2023: a0 = 0\n  2025: a1 = 0\n  2027: ra = 40, jump @0\n      : @58 [@dyn 20] (gas: 6)\n  2032: i32 a1 = a0 + 0\n  2034: a0 = 0x1\n  2037: a2 = 0\n  2039: ra = 0x2a\n  2042: ecalli 6 // 'seal_return'\n  2044: fallthrough\n      : @59 [@dyn 21] (gas: 9)\n  2045: a2 = u64 [a1 + 0x18]\n  2048: a3 = u64 [a1 + 0x10]\n  2051: a4 = u64 [a1 + 0x8]\n  2054: a1 = u64 [a1]\n  2056: u64 [a0 + 0x18] = a2\n  2059: u64 [a0 + 0x10] = a3\n  2062: u64 [a0 + 0x8] = a4\n  2065: u64 [a0] = a1\n  2067: ret\n      : @60 (gas: 8)\n  2069: a0 = u64 [sp + 0xd0]\n  2073: a1 = u64 [sp + 0xd8]\n  2077: a2 = u64 [sp + 0xc8]\n  2081: a3 = u64 [sp + 0xc0]\n  2085: a1 = a1 | a2\n  2088: a0 = a0 | a3\n  2091: a0 = a0 | a1\n  2094: jump @66 if a0 != 0\n      : @61 (gas: 13)\n  2098: a0 = u32 [0x20004]\n  2103: u64 [sp + 88] = 0\n  2106: u64 [sp + 80] = 0\n  2109: u64 [sp + 72] = 0\n  2112: u64 [sp + 0x40] = a0\n  2115: u64 [sp + 120] = 0\n  2118: u64 [sp + 112] = 0\n  2121: u64 [sp + 96] = 0x4\n  2125: a0 = sp + 0x80\n  2129: a1 = sp + 0x60\n  2132: a2 = sp + 0x40\n  2135: u64 [sp + 104] = 0\n  2138: ra = 44, jump @50\n      : @62 [@dyn 22] (gas: 19)\n  2143: t0 = u64 [sp + 0x80]\n  2147: t1 = u64 [sp + 0x88]\n  2151: a1 = u64 [sp + 0x90]\n  2155: a3 = u64 [sp + 0x98]\n  2159: a4 = u64 [sp + 0xa0]\n  2163: a5 = u64 [sp + 0xa8]\n  2167: a2 = u64 [sp + 0xb0]\n  2171: a0 = u64 [sp + 0xb8]\n  2175: u64 [sp + 0x18] = a0\n  2178: u64 [sp + 0x10] = a2\n  2181: u64 [sp + 0x8] = a5\n  2184: u64 [sp] = a4\n  2186: u64 [sp + 0x38] = a3\n  2189: u64 [sp + 0x30] = a1\n  2192: u64 [sp + 0x28] = t1\n  2195: a0 = sp + 0x20\n  2198: a1 = sp\n  2200: u64 [sp + 0x20] = t0\n  2203: ra = 46, jump @264\n      : @63 [@dyn 23] (gas: 3)\n  2208: a0 = 0x40\n  2211: a1 = 0x20\n  2214: ra = 48, jump @0\n      : @64 [@dyn 24] (gas: 100)\n  2219: a1 = u8 [a0 + 0x11]\n  2222: a2 = u8 [a0 + 0x10]\n  2225: a3 = u8 [a0 + 0x12]\n  2228: a4 = u8 [a0 + 0x13]\n  2231: a1 = a1 << 0x8\n  2234: a1 = a1 | a2\n  2237: a3 = a3 << 0x10\n  2240: a4 = a4 << 0x18\n  2243: a3 = a3 | a4\n  2246: a1 = a1 | a3\n  2249: a2 = u8 [a0 + 0x15]\n  2252: a3 = u8 [a0 + 0x14]\n  2255: a4 = u8 [a0 + 0x16]\n  2258: a5 = u8 [a0 + 0x17]\n  2261: a2 = a2 << 0x8\n  2264: a2 = a2 | a3\n  2267: a4 = a4 << 0x10\n  2270: a5 = a5 << 0x18\n  2273: a4 = a4 | a5\n  2276: a2 = a2 | a4\n  2279: a2 = a2 << 0x20\n  2282: t0 = a2 | a1\n  2285: a2 = u8 [a0 + 0x1]\n  2288: a3 = u8 [a0]\n  2290: a4 = u8 [a0 + 0x2]\n  2293: a5 = u8 [a0 + 0x3]\n  2296: a2 = a2 << 0x8\n  2299: a2 = a2 | a3\n  2302: a4 = a4 << 0x10\n  2305: a5 = a5 << 0x18\n  2308: a4 = a4 | a5\n  2311: a2 = a2 | a4\n  2314: a3 = u8 [a0 + 0x5]\n  2317: a4 = u8 [a0 + 0x4]\n  2320: a5 = u8 [a0 + 0x6]\n  2323: a1 = u8 [a0 + 0x7]\n  2326: a3 = a3 << 0x8\n  2329: a3 = a3 | a4\n  2332: a5 = a5 << 0x10\n  2335: a1 = a1 << 0x18\n  2338: a1 = a1 | a5\n  2341: a1 = a1 | a3\n  2344: a1 = a1 << 0x20\n  2347: t1 = a1 | a2\n  2350: a1 = u8 [a0 + 0x19]\n  2353: a3 = u8 [a0 + 0x18]\n  2356: a4 = u8 [a0 + 0x1a]\n  2359: a5 = u8 [a0 + 0x1b]\n  2362: a1 = a1 << 0x8\n  2365: a1 = a1 | a3\n  2368: a4 = a4 << 0x10\n  2371: a5 = a5 << 0x18\n  2374: a4 = a4 | a5\n  2377: a1 = a1 | a4\n  2380: a3 = u8 [a0 + 0x1d]\n  2383: a4 = u8 [a0 + 0x1c]\n  2386: a5 = u8 [a0 + 0x1e]\n  2389: a2 = u8 [a0 + 0x1f]\n  2392: a3 = a3 << 0x8\n  2395: a3 = a3 | a4\n  2398: a5 = a5 << 0x10\n  2401: a2 = a2 << 0x18\n  2404: a2 = a2 | a5\n  2407: a2 = a2 | a3\n  2410: a2 = a2 << 0x20\n  2413: a3 = a2 | a1\n  2416: a1 = u8 [a0 + 0x9]\n  2419: a2 = u8 [a0 + 0x8]\n  2422: a4 = u8 [a0 + 0xa]\n  2425: a5 = u8 [a0 + 0xb]\n  2428: a1 = a1 << 0x8\n  2431: a1 = a1 | a2\n  2434: a4 = a4 << 0x10\n  2437: a5 = a5 << 0x18\n  2440: a4 = a4 | a5\n  2443: a1 = a1 | a4\n  2446: a2 = u8 [a0 + 0xd]\n  2449: a4 = u8 [a0 + 0xc]\n  2452: a5 = u8 [a0 + 0xe]\n  2455: a0 = u8 [a0 + 0xf]\n  2458: a2 = a2 << 0x8\n  2461: a2 = a2 | a4\n  2464: a5 = a5 << 0x10\n  2467: a0 = a0 << 0x18\n  2470: a0 = a0 | a5\n  2473: a0 = a0 | a2\n  2476: a0 = a0 << 0x20\n  2479: a0 = a0 | a1\n  2482: a1 = reverse a0\n  2484: a0 = reverse a3\n  2486: a2 = reverse t1\n  2488: a3 = reverse t0\n  2490: a2 = a2 | a3\n  2493: a3 = a0 | a1\n  2496: a3 = a3 | a2\n  2499: a3 = a3 >> 0x20\n  2502: a1 = a1 | a2\n  2505: a1 = a1 << 0x20\n  2508: a1 = a1 | a3\n  2511: jump @68 if a1 == 0\n      : @65 (gas: 1)\n  2514: trap\n      : @66 (gas: 3)\n  2515: a0 = 0\n  2517: a1 = 0\n  2519: ra = 50, jump @0\n      : @67 [@dyn 25] (gas: 7)\n  2524: i32 a1 = a0 + 0\n  2526: a0 = 0x1\n  2529: a2 = 0\n  2531: ecalli 6 // 'seal_return'\n  2533: i32 a0 = a0 + 0\n  2535: ra = 0x34\n  2538: jump @0\n      : @68 (gas: 2)\n  2541: i32 a0 = a0 + 0\n  2543: ra = 52, jump @0\n      : @69 [@dyn 26] (gas: 6)\n  2548: i32 a1 = a0 + 0\n  2550: a0 = 0\n  2552: a2 = 0\n  2554: ra = 0x36\n  2557: ecalli 6 // 'seal_return'\n  2559: fallthrough\n      : @70 [@dyn 27] (gas: 9)\n  2560: a2 = u64 [a1 + 0x18]\n  2563: a3 = u64 [a1 + 0x10]\n  2566: a4 = u64 [a1 + 0x8]\n  2569: a1 = u64 [a1]\n  2571: u64 [a0 + 0x18] = a2\n  2574: u64 [a0 + 0x10] = a3\n  2577: u64 [a0 + 0x8] = a4\n  2580: u64 [a0] = a1\n  2582: ret\n      : @71 (gas: 47)\n  2584: sp = sp + 0xffffffffffffff80\n  2587: u64 [sp + 0x78] = ra\n  2590: u64 [sp + 0x70] = s0\n  2593: u64 [sp + 0x68] = s1\n  2596: s0 = sp + 0x80\n  2600: sp = sp & 0xffffffffffffffe0\n  2603: ra = u64 [a1 + 0x10]\n  2606: a5 = u64 [a1 + 0x8]\n  2609: a3 = u64 [a2 + 0x8]\n  2612: t1 = u64 [a1]\n  2614: a4 = u64 [a2]\n  2616: u64 [sp + 0x28] = a4\n  2619: t2 = u64 [a2 + 0x10]\n  2622: t0 = a3 ^ a5\n  2625: s1 = a3 <u a5\n  2628: a4 = a4 <u t1\n  2631: u64 [sp + 0x20] = a4\n  2634: s1 = a4 if t0 == 0\n  2637: t0 = u64 [a1 + 0x18]\n  2640: a1 = u64 [a2 + 0x18]\n  2643: u64 [sp + 0x18] = a1\n  2646: a2 = t2 - ra\n  2649: a1 = a2 - s1\n  2652: u64 [sp + 0x30] = a1\n  2655: a1 = a2 <u s1\n  2658: a4 = t2 <u ra\n  2661: u64 [sp + 0x38] = t0\n  2664: a2 = u64 [sp + 0x18]\n  2667: a2 = a2 - t0\n  2670: a2 = a2 - a4\n  2673: a2 = a2 - a1\n  2676: a1 = a3 - a5\n  2679: a3 = u64 [sp + 0x20]\n  2682: a1 = a1 - a3\n  2685: a3 = u64 [sp + 0x28]\n  2688: a3 = a3 - t1\n  2691: a4 = a1 >u 0\n  2693: a3 = a3 <u 0x40\n  2696: a3 = a3 ^ 0x1\n  2699: a3 = a4 if a1 != 0\n  2702: s1 = a2 >s 0\n  2704: a1 = u64 [sp + 0x30]\n  2707: a4 = a1 >u 0\n  2709: a4 = s1 if a2 != 0\n  2712: a1 = a1 | a2\n  2715: a3 = a4 if a1 != 0\n  2718: jump @78 if a3 == 0\n      : @72 (gas: 12)\n  2722: s1 = a0\n  2724: a0 = t1 | ra\n  2727: u64 [sp + 0x30] = a5\n  2730: a1 = u64 [sp + 0x38]\n  2733: a1 = a1 | a5\n  2736: a0 = a0 | a1\n  2739: a0 = a0 >> 0x20\n  2742: u64 [sp + 0x28] = ra\n  2745: a1 = a1 | ra\n  2748: a1 = a1 << 0x20\n  2751: a0 = a0 | a1\n  2754: jump @77 if a0 != 0\n      : @73 (gas: 6)\n  2758: u64 [sp + 0x20] = t1\n  2761: i32 a1 = t1 + 0\n  2763: i32 a0 = sp + 0x40\n  2766: u64 [sp + 0x8] = a1\n  2769: ecalli 1 // 'call_data_load'\n  2771: fallthrough\n      : @74 (gas: 10)\n  2772: a3 = u64 [sp + 0x50]\n  2775: a4 = u64 [sp + 0x58]\n  2778: a0 = 0x100000000\n  2788: a1 = a3 ^ a0\n  2791: a1 = a1 | a4\n  2794: a2 = a3 >> 0x20\n  2797: a2 = a2 <u 0x1\n  2800: a2 = 0 if a4 != 0\n  2802: a2 = 0 if a1 == 0\n  2804: jump @78 if a2 == 0\n      : @75 (gas: 12)\n  2808: u64 [sp + 0x10] = a4\n  2811: u64 [sp + 0x18] = a3\n  2814: a1 = u64 [sp + 0x28]\n  2817: a2 = u64 [sp + 0x38]\n  2820: a1 = a1 | a2\n  2823: a0 = 0xffffffe0\n  2833: a2 = u64 [sp + 0x20]\n  2836: a0 = a2 <u a0\n  2839: a2 = u64 [sp + 0x30]\n  2842: a0 = 0 if a2 != 0\n  2844: a0 = 0 if a1 != 0\n  2846: jump @77 if a0 == 0\n      : @76 (gas: 30)\n  2849: a0 = u64 [sp + 0x48]\n  2852: u64 [sp + 0x30] = a0\n  2855: a0 = u64 [sp + 0x40]\n  2858: u64 [sp + 0x38] = a0\n  2861: a0 = u64 [sp + 0x8]\n  2864: i32 a1 = a0 + 0x20\n  2867: i32 a0 = sp + 0x40\n  2870: ecalli 1 // 'call_data_load'\n  2872: a0 = u64 [sp + 0x58]\n  2875: a1 = u64 [sp + 0x50]\n  2878: a2 = u64 [sp + 0x48]\n  2881: a3 = u64 [sp + 0x40]\n  2884: u64 [s1 + 0x38] = a0\n  2887: u64 [s1 + 0x30] = a1\n  2890: u64 [s1 + 0x28] = a2\n  2893: u64 [s1 + 0x20] = a3\n  2896: a0 = u64 [sp + 0x10]\n  2899: u64 [s1 + 0x18] = a0\n  2902: a0 = u64 [sp + 0x18]\n  2905: u64 [s1 + 0x10] = a0\n  2908: a0 = u64 [sp + 0x30]\n  2911: u64 [s1 + 0x8] = a0\n  2914: a0 = u64 [sp + 0x38]\n  2917: u64 [s1] = a0\n  2919: sp = s0 + 0xffffffffffffff80\n  2922: ra = u64 [sp + 0x78]\n  2925: s0 = u64 [sp + 0x70]\n  2928: s1 = u64 [sp + 0x68]\n  2931: sp = sp + 0x80\n  2935: ret\n      : @77 (gas: 1)\n  2937: trap\n      : @78 (gas: 3)\n  2938: a0 = 0\n  2940: a1 = 0\n  2942: ra = 56, jump @0\n      : @79 [@dyn 28] (gas: 6)\n  2947: i32 a1 = a0 + 0\n  2949: a0 = 0x1\n  2952: a2 = 0\n  2954: ra = 0x3a\n  2957: ecalli 6 // 'seal_return'\n  2959: fallthrough\n      : @80 [@dyn 29] (gas: 9)\n  2960: a2 = u64 [a1 + 0x18]\n  2963: a3 = u64 [a1 + 0x10]\n  2966: a4 = u64 [a1 + 0x8]\n  2969: a1 = u64 [a1]\n  2971: u64 [a0 + 0x18] = a2\n  2974: u64 [a0 + 0x10] = a3\n  2977: u64 [a0 + 0x8] = a4\n  2980: u64 [a0] = a1\n  2982: ret\n      : @81 [@dyn 30] (gas: 58)\n  2984: a1 = reverse s1\n  2986: a2 = u64 [sp + 0x8]\n  2989: a2 = reverse a2\n  2991: a3 = u64 [sp + 0x10]\n  2994: a3 = reverse a3\n  2996: a4 = a3 >> 0x38\n  2999: u8 [a0 + 0x1f] = a4\n  3002: a4 = a3 >> 0x30\n  3005: u8 [a0 + 0x1e] = a4\n  3008: a4 = a3 >> 0x28\n  3011: u8 [a0 + 0x1d] = a4\n  3014: a4 = a3 >> 0x20\n  3017: u8 [a0 + 0x1c] = a4\n  3020: a4 = a3 >> 0x18\n  3023: u8 [a0 + 0x1b] = a4\n  3026: a4 = a3 >> 0x10\n  3029: u8 [a0 + 0x1a] = a4\n  3032: a4 = a3 >> 0x8\n  3035: u8 [a0 + 0x19] = a4\n  3038: u8 [a0 + 0x18] = a3\n  3041: a3 = a2 >> 0x38\n  3044: u8 [a0 + 0x17] = a3\n  3047: a3 = a2 >> 0x30\n  3050: u8 [a0 + 0x16] = a3\n  3053: a3 = a2 >> 0x28\n  3056: u8 [a0 + 0x15] = a3\n  3059: a3 = a2 >> 0x20\n  3062: u8 [a0 + 0x14] = a3\n  3065: a3 = a2 >> 0x18\n  3068: u8 [a0 + 0x13] = a3\n  3071: a3 = a2 >> 0x10\n  3074: u8 [a0 + 0x12] = a3\n  3077: a3 = a2 >> 0x8\n  3080: u8 [a0 + 0x11] = a3\n  3083: u8 [a0 + 0x10] = a2\n  3086: a2 = a1 >> 0x38\n  3089: u8 [a0 + 0xf] = a2\n  3092: a2 = a1 >> 0x30\n  3095: u8 [a0 + 0xe] = a2\n  3098: a2 = a1 >> 0x28\n  3101: u8 [a0 + 0xd] = a2\n  3104: a2 = a1 >> 0x20\n  3107: u8 [a0 + 0xc] = a2\n  3110: u8 [a0 + 11] = 0\n  3113: u8 [a0 + 10] = 0\n  3116: u8 [a0 + 9] = 0\n  3119: u8 [a0 + 0x8] = a1\n  3122: u8 [a0 + 7] = 0\n  3125: u8 [a0 + 6] = 0\n  3128: u8 [a0 + 5] = 0\n  3131: u8 [a0 + 4] = 0\n  3134: u8 [a0 + 3] = 0\n  3137: u8 [a0 + 2] = 0\n  3140: u8 [a0 + 1] = 0\n  3143: u8 [a0 + 0] = 0\n  3145: a0 = 0x20\n  3148: a1 = 0x20\n  3151: ra = 62, jump @0\n      : @82 [@dyn 31] (gas: 35)\n  3156: u8 [a0 + 31] = 0\n  3159: u8 [a0 + 30] = 0\n  3162: u8 [a0 + 29] = 0\n  3165: u8 [a0 + 28] = 0\n  3168: u8 [a0 + 27] = 0\n  3171: u8 [a0 + 26] = 0\n  3174: u8 [a0 + 25] = 0\n  3177: u8 [a0 + 24] = 0\n  3180: u8 [a0 + 23] = 0\n  3183: u8 [a0 + 22] = 0\n  3186: u8 [a0 + 21] = 0\n  3189: u8 [a0 + 20] = 0\n  3192: u8 [a0 + 19] = 0\n  3195: u8 [a0 + 18] = 0\n  3198: u8 [a0 + 17] = 0\n  3201: u8 [a0 + 16] = 0\n  3204: u8 [a0 + 15] = 0\n  3207: u8 [a0 + 14] = 0\n  3210: u8 [a0 + 13] = 0\n  3213: u8 [a0 + 12] = 0\n  3216: u8 [a0 + 11] = 0\n  3219: u8 [a0 + 10] = 0\n  3222: u8 [a0 + 9] = 0\n  3225: u8 [a0 + 8] = 0\n  3228: u8 [a0 + 7] = 0\n  3231: u8 [a0 + 6] = 0\n  3234: u8 [a0 + 5] = 0\n  3237: u8 [a0 + 4] = 0\n  3240: u8 [a0 + 3] = 0\n  3243: u8 [a0 + 2] = 0\n  3246: u8 [a0 + 1] = 0\n  3249: u8 [a0 + 0] = 0\n  3251: a1 = 0x40\n  3254: a0 = 0\n  3256: ra = 64, jump @0\n      : @83 [@dyn 32] (gas: 5)\n  3261: i32 a0 = a0 + 0\n  3263: i32 a2 = sp + 0x60\n  3266: a1 = 0x40\n  3269: ecalli 5 // 'hash_keccak_256'\n  3271: fallthrough\n      : @84 (gas: 9)\n  3272: a4 = u64 [sp + 0x30]\n  3275: a5 = u64 [sp + 0x28]\n  3278: t1 = u64 [sp + 0x18]\n  3281: t0 = u64 [sp + 0x20]\n  3284: a0 = t1 | t0\n  3287: a1 = a5 <u 0x9\n  3290: a1 = 0 if a4 != 0\n  3292: a1 = 0 if a0 != 0\n  3294: jump @86 if a1 == 0\n      : @85 (gas: 52)\n  3298: a0 = u64 [sp + 0x60]\n  3301: a1 = u64 [sp + 0x68]\n  3304: a2 = u64 [sp + 0x78]\n  3307: a3 = u64 [sp + 0x70]\n  3310: a0 = reverse a0\n  3312: a1 = reverse a1\n  3314: a2 = reverse a2\n  3316: a3 = reverse a3\n  3318: a4 = a4 + a3\n  3321: a5 = a5 + a2\n  3324: a2 = a5 <u a2\n  3327: a4 = a4 + a2\n  3330: s1 = a4 ^ a3\n  3333: a3 = a4 <u a3\n  3336: a3 = a2 if s1 == 0\n  3339: a2 = a1 + t1\n  3342: a3 = a3 + a2\n  3345: s1 = a3 <u a2\n  3348: a1 = a2 <u a1\n  3351: a0 = a0 + t0\n  3354: a0 = a0 + a1\n  3357: a0 = a0 + s1\n  3360: u64 [sp + 0x40] = a5\n  3363: u64 [sp + 0x48] = a4\n  3366: u64 [sp + 0x50] = a3\n  3369: u64 [sp + 0x58] = a0\n  3372: u64 [sp + 120] = 0\n  3375: u64 [sp + 112] = 0\n  3378: u64 [sp + 104] = 0\n  3381: u64 [sp + 96] = 0\n  3384: u32 [sp + 128] = 0x20\n  3389: i32 a1 = sp + 0x40\n  3392: i32 a3 = sp + 0x60\n  3395: i32 a4 = sp + 0x80\n  3399: a2 = 0xffffffffffffffff\n  3402: a0 = 0\n  3404: ecalli 4 // 'get_storage'\n  3406: a0 = u64 [sp + 0x78]\n  3409: a1 = u64 [sp + 0x70]\n  3412: a2 = u64 [sp + 0x68]\n  3415: a3 = u64 [sp + 0x60]\n  3418: a4 = u64 [sp + 0x38]\n  3421: u64 [a4 + 0x18] = a0\n  3424: u64 [a4 + 0x10] = a1\n  3427: u64 [a4 + 0x8] = a2\n  3430: u64 [a4] = a3\n  3432: sp = s0 + 0xffffffffffffff60\n  3436: ra = u64 [sp + 0x98]\n  3440: s0 = u64 [sp + 0x90]\n  3444: s1 = u64 [sp + 0x88]\n  3448: sp = sp + 0xa0\n  3452: ret\n      : @86 (gas: 2)\n  3454: a0 = 0\n  3456: ra = 66, jump @0\n      : @87 [@dyn 33] (gas: 6)\n  3461: i32 a1 = a0 + 0\n  3463: a0 = 0x1\n  3466: a2 = 0\n  3468: ra = 0x44\n  3471: ecalli 6 // 'seal_return'\n  3473: fallthrough\n      : @88 [@dyn 34] (gas: 17)\n  3474: sp = sp + 0xffffffffffffffa8\n  3477: u64 [sp + 0x50] = ra\n  3480: u64 [sp + 0x48] = s0\n  3483: u64 [sp + 0x40] = s1\n  3486: a3 = u64 [a1 + 0x10]\n  3489: s1 = u64 [a1 + 0x18]\n  3492: a5 = u64 [a1 + 0x8]\n  3495: s0 = u64 [a1]\n  3497: a4 = a5 | s1\n  3500: a1 = s0 | a3\n  3503: a1 = a1 | a4\n  3506: a1 = a1 >> 0x20\n  3509: a4 = a4 | a3\n  3512: a4 = a4 << 0x20\n  3515: a1 = a1 | a4\n  3518: u64 [sp + 0x38] = a0\n  3521: jump @91 if a1 != 0\n      : @89 (gas: 22)\n  3525: a0 = u64 [a2 + 0x18]\n  3528: u64 [sp] = a0\n  3530: a0 = u64 [a2 + 0x10]\n  3533: u64 [sp + 0x8] = a0\n  3536: a0 = u64 [a2 + 0x8]\n  3539: u64 [sp + 0x10] = a0\n  3542: a0 = u64 [a2]\n  3544: u64 [sp + 0x18] = a0\n  3547: a0 = s0 + 0x20\n  3550: u64 [sp + 0x30] = a0\n  3553: a0 = a0 <u s0\n  3556: a1 = a5 + a0\n  3559: u64 [sp + 0x28] = a1\n  3562: a1 = a1 <u a5\n  3565: a1 = a0 if a0 == 0\n  3568: a1 = a1 + a3\n  3571: u64 [sp + 0x20] = a1\n  3574: a0 = a1 <u a3\n  3577: s1 = s1 + a0\n  3580: i32 a0 = s0 + 0\n  3582: a1 = 0x20\n  3585: ra = 70, jump @0\n      : @90 [@dyn 35] (gas: 81)\n  3590: a1 = u64 [sp]\n  3592: a1 = reverse a1\n  3594: a2 = u64 [sp + 0x8]\n  3597: a2 = reverse a2\n  3599: a3 = u64 [sp + 0x10]\n  3602: a3 = reverse a3\n  3604: a4 = u64 [sp + 0x18]\n  3607: a4 = reverse a4\n  3609: a5 = a4 >> 0x38\n  3612: u8 [a0 + 0x1f] = a5\n  3615: a5 = a4 >> 0x30\n  3618: u8 [a0 + 0x1e] = a5\n  3621: a5 = a4 >> 0x28\n  3624: u8 [a0 + 0x1d] = a5\n  3627: a5 = a4 >> 0x20\n  3630: u8 [a0 + 0x1c] = a5\n  3633: a5 = a4 >> 0x18\n  3636: u8 [a0 + 0x1b] = a5\n  3639: a5 = a4 >> 0x10\n  3642: u8 [a0 + 0x1a] = a5\n  3645: a5 = a4 >> 0x8\n  3648: u8 [a0 + 0x19] = a5\n  3651: u8 [a0 + 0x18] = a4\n  3654: u8 [a0 + 0x10] = a3\n  3657: a4 = a3 >> 0x38\n  3660: u8 [a0 + 0x17] = a4\n  3663: a4 = a3 >> 0x30\n  3666: u8 [a0 + 0x16] = a4\n  3669: a4 = a3 >> 0x28\n  3672: u8 [a0 + 0x15] = a4\n  3675: a4 = a3 >> 0x20\n  3678: u8 [a0 + 0x14] = a4\n  3681: a4 = a3 >> 0x18\n  3684: u8 [a0 + 0x13] = a4\n  3687: a4 = a3 >> 0x10\n  3690: u8 [a0 + 0x12] = a4\n  3693: a3 = a3 >> 0x8\n  3696: u8 [a0 + 0x11] = a3\n  3699: u8 [a0 + 0x8] = a2\n  3702: a3 = a2 >> 0x38\n  3705: u8 [a0 + 0xf] = a3\n  3708: a3 = a2 >> 0x30\n  3711: u8 [a0 + 0xe] = a3\n  3714: a3 = a2 >> 0x28\n  3717: u8 [a0 + 0xd] = a3\n  3720: a3 = a2 >> 0x20\n  3723: u8 [a0 + 0xc] = a3\n  3726: a3 = a2 >> 0x18\n  3729: u8 [a0 + 0xb] = a3\n  3732: a3 = a2 >> 0x10\n  3735: u8 [a0 + 0xa] = a3\n  3738: a2 = a2 >> 0x8\n  3741: u8 [a0 + 0x9] = a2\n  3744: u8 [a0] = a1\n  3746: a2 = a1 >> 0x38\n  3749: u8 [a0 + 0x7] = a2\n  3752: a2 = a1 >> 0x30\n  3755: u8 [a0 + 0x6] = a2\n  3758: a2 = a1 >> 0x28\n  3761: u8 [a0 + 0x5] = a2\n  3764: a2 = a1 >> 0x20\n  3767: u8 [a0 + 0x4] = a2\n  3770: a2 = a1 >> 0x18\n  3773: u8 [a0 + 0x3] = a2\n  3776: a2 = a1 >> 0x10\n  3779: u8 [a0 + 0x2] = a2\n  3782: a1 = a1 >> 0x8\n  3785: u8 [a0 + 0x1] = a1\n  3788: a0 = u64 [sp + 0x38]\n  3791: a1 = u64 [sp + 0x30]\n  3794: u64 [a0] = a1\n  3796: a1 = u64 [sp + 0x28]\n  3799: u64 [a0 + 0x8] = a1\n  3802: a1 = u64 [sp + 0x20]\n  3805: u64 [a0 + 0x10] = a1\n  3808: u64 [a0 + 0x18] = s1\n  3811: ra = u64 [sp + 0x50]\n  3814: s0 = u64 [sp + 0x48]\n  3817: s1 = u64 [sp + 0x40]\n  3820: sp = sp + 0x58\n  3823: ret\n      : @91 (gas: 1)\n  3825: trap\n      : @92 (gas: 8)\n  3826: a0 = u64 [sp + 0x110]\n  3830: a1 = u64 [sp + 0x118]\n  3834: a2 = u64 [sp + 0x108]\n  3838: a3 = u64 [sp + 0x100]\n  3842: a1 = a1 | a2\n  3845: a0 = a0 | a3\n  3848: a0 = a0 | a1\n  3851: jump @98 if a0 != 0\n      : @93 (gas: 13)\n  3855: a0 = u32 [0x20004]\n  3860: u64 [sp + 152] = 0\n  3864: u64 [sp + 144] = 0\n  3868: u64 [sp + 136] = 0\n  3872: u64 [sp + 0x80] = a0\n  3876: u64 [sp + 184] = 0\n  3880: u64 [sp + 176] = 0\n  3884: u64 [sp + 160] = 0x4\n  3889: a0 = sp + 0xc0\n  3893: a1 = sp + 0xa0\n  3897: a2 = sp + 0x80\n  3901: u64 [sp + 168] = 0\n  3905: ra = 72, jump @71\n      : @94 [@dyn 36] (gas: 44)\n  3910: t0 = u64 [sp + 0xc0]\n  3914: a0 = u64 [sp + 0xc8]\n  3918: a1 = u64 [sp + 0xd0]\n  3922: a2 = u64 [sp + 0xd8]\n  3926: a4 = u64 [sp + 0xe0]\n  3930: a5 = u64 [sp + 0xe8]\n  3934: s1 = u64 [sp + 0xf0]\n  3938: a3 = u64 [sp + 0xf8]\n  3942: u64 [sp + 0x38] = a3\n  3945: u64 [sp + 0x30] = s1\n  3948: u64 [sp + 0x28] = a5\n  3951: u64 [sp + 0x20] = a4\n  3954: u64 [sp + 0x58] = a2\n  3957: u64 [sp + 0x50] = a1\n  3960: u64 [sp + 0x48] = a0\n  3963: a0 = sp + 0x60\n  3966: a1 = sp + 0x40\n  3969: a2 = sp + 0x20\n  3972: u64 [sp + 0x40] = t0\n  3975: ra = 0x4a\n  3978: sp = sp + 0xffffffffffffff60\n  3982: u64 [sp + 0x98] = ra\n  3986: u64 [sp + 0x90] = s0\n  3990: u64 [sp + 0x88] = s1\n  3994: s0 = sp + 0xa0\n  3998: sp = sp & 0xffffffffffffffe0\n  4001: a3 = u64 [a2 + 0x8]\n  4004: u64 [sp + 0x30] = a3\n  4007: a3 = u64 [a2]\n  4009: u64 [sp + 0x28] = a3\n  4012: a3 = u64 [a2 + 0x18]\n  4015: u64 [sp + 0x20] = a3\n  4018: a2 = u64 [a2 + 0x10]\n  4021: u64 [sp + 0x18] = a2\n  4024: a2 = u64 [a1]\n  4026: u64 [sp + 0x10] = a2\n  4029: a2 = u64 [a1 + 0x8]\n  4032: u64 [sp + 0x8] = a2\n  4035: s1 = u32 [a1 + 0x10]\n  4038: u64 [sp + 0x38] = a0\n  4041: a1 = 0x20\n  4044: a0 = 0\n  4046: ra = 0x3c\n  4049: jump @0\n      : @95 [@dyn 37] (gas: 11)\n  4052: a0 = u64 [sp + 0x78]\n  4055: u64 [sp] = a0\n  4057: a0 = u64 [sp + 0x70]\n  4060: u64 [sp + 0x8] = a0\n  4063: a0 = u64 [sp + 0x68]\n  4066: u64 [sp + 0x10] = a0\n  4069: a0 = u64 [sp + 0x60]\n  4072: u64 [sp + 0x18] = a0\n  4075: a0 = 0x40\n  4078: a1 = 0x20\n  4081: ra = 76, jump @0\n      : @96 [@dyn 38] (gas: 100)\n  4086: a1 = u8 [a0 + 0x11]\n  4089: a2 = u8 [a0 + 0x10]\n  4092: a3 = u8 [a0 + 0x12]\n  4095: a4 = u8 [a0 + 0x13]\n  4098: a1 = a1 << 0x8\n  4101: a1 = a1 | a2\n  4104: a3 = a3 << 0x10\n  4107: a4 = a4 << 0x18\n  4110: a3 = a3 | a4\n  4113: a1 = a1 | a3\n  4116: a2 = u8 [a0 + 0x15]\n  4119: a3 = u8 [a0 + 0x14]\n  4122: a4 = u8 [a0 + 0x16]\n  4125: a5 = u8 [a0 + 0x17]\n  4128: a2 = a2 << 0x8\n  4131: a2 = a2 | a3\n  4134: a4 = a4 << 0x10\n  4137: a5 = a5 << 0x18\n  4140: a4 = a4 | a5\n  4143: a2 = a2 | a4\n  4146: a2 = a2 << 0x20\n  4149: t0 = a2 | a1\n  4152: a2 = u8 [a0 + 0x1]\n  4155: a3 = u8 [a0]\n  4157: a4 = u8 [a0 + 0x2]\n  4160: a5 = u8 [a0 + 0x3]\n  4163: a2 = a2 << 0x8\n  4166: a2 = a2 | a3\n  4169: a4 = a4 << 0x10\n  4172: a5 = a5 << 0x18\n  4175: a4 = a4 | a5\n  4178: a2 = a2 | a4\n  4181: a3 = u8 [a0 + 0x5]\n  4184: a4 = u8 [a0 + 0x4]\n  4187: a5 = u8 [a0 + 0x6]\n  4190: s1 = u8 [a0 + 0x7]\n  4193: a3 = a3 << 0x8\n  4196: a3 = a3 | a4\n  4199: a5 = a5 << 0x10\n  4202: s1 = s1 << 0x18\n  4205: a5 = a5 | s1\n  4208: a3 = a3 | a5\n  4211: a3 = a3 << 0x20\n  4214: a2 = a2 | a3\n  4217: a3 = u8 [a0 + 0x19]\n  4220: a4 = u8 [a0 + 0x18]\n  4223: a5 = u8 [a0 + 0x1a]\n  4226: s1 = u8 [a0 + 0x1b]\n  4229: a3 = a3 << 0x8\n  4232: a3 = a3 | a4\n  4235: a5 = a5 << 0x10\n  4238: s1 = s1 << 0x18\n  4241: a5 = a5 | s1\n  4244: a3 = a3 | a5\n  4247: a4 = u8 [a0 + 0x1d]\n  4250: a5 = u8 [a0 + 0x1c]\n  4253: s1 = u8 [a0 + 0x1e]\n  4256: a1 = u8 [a0 + 0x1f]\n  4259: a4 = a4 << 0x8\n  4262: a4 = a4 | a5\n  4265: s1 = s1 << 0x10\n  4268: a1 = a1 << 0x18\n  4271: a1 = a1 | s1\n  4274: a1 = a1 | a4\n  4277: a1 = a1 << 0x20\n  4280: a3 = a3 | a1\n  4283: a1 = u8 [a0 + 0x9]\n  4286: a4 = u8 [a0 + 0x8]\n  4289: a5 = u8 [a0 + 0xa]\n  4292: s1 = u8 [a0 + 0xb]\n  4295: a1 = a1 << 0x8\n  4298: a1 = a1 | a4\n  4301: a5 = a5 << 0x10\n  4304: s1 = s1 << 0x18\n  4307: a5 = a5 | s1\n  4310: a1 = a1 | a5\n  4313: a4 = u8 [a0 + 0xd]\n  4316: a5 = u8 [a0 + 0xc]\n  4319: s1 = u8 [a0 + 0xe]\n  4322: a0 = u8 [a0 + 0xf]\n  4325: a4 = a4 << 0x8\n  4328: a4 = a4 | a5\n  4331: s1 = s1 << 0x10\n  4334: a0 = a0 << 0x18\n  4337: a0 = a0 | s1\n  4340: a0 = a0 | a4\n  4343: a0 = a0 << 0x20\n  4346: a0 = a0 | a1\n  4349: a1 = reverse a0\n  4351: a0 = reverse a3\n  4353: a2 = reverse a2\n  4355: a3 = reverse t0\n  4357: a2 = a2 | a3\n  4360: a3 = a0 | a1\n  4363: a3 = a3 | a2\n  4366: a3 = a3 >> 0x20\n  4369: a1 = a1 | a2\n  4372: a1 = a1 << 0x20\n  4375: a1 = a1 | a3\n  4378: jump @100 if a1 == 0\n      : @97 (gas: 1)\n  4381: trap\n      : @98 (gas: 3)\n  4382: a0 = 0\n  4384: a1 = 0\n  4386: ra = 78, jump @0\n      : @99 [@dyn 39] (gas: 5)\n  4391: i32 a1 = a0 + 0\n  4393: a0 = 0x1\n  4396: a2 = 0\n  4398: ecalli 6 // 'seal_return'\n  4400: fallthrough\n      : @100 (gas: 4)\n  4401: i32 s1 = a0 + 0\n  4403: a1 = 0x20\n  4406: a0 = s1\n  4408: ra = 80, jump @0\n      : @101 [@dyn 40] (gas: 71)\n  4413: a1 = u64 [sp]\n  4415: a1 = reverse a1\n  4417: a2 = u64 [sp + 0x8]\n  4420: a2 = reverse a2\n  4422: a3 = u64 [sp + 0x10]\n  4425: a3 = reverse a3\n  4427: a4 = u64 [sp + 0x18]\n  4430: a4 = reverse a4\n  4432: a5 = a4 >> 0x38\n  4435: u8 [a0 + 0x1f] = a5\n  4438: a5 = a4 >> 0x30\n  4441: u8 [a0 + 0x1e] = a5\n  4444: a5 = a4 >> 0x28\n  4447: u8 [a0 + 0x1d] = a5\n  4450: a5 = a4 >> 0x20\n  4453: u8 [a0 + 0x1c] = a5\n  4456: a5 = a4 >> 0x18\n  4459: u8 [a0 + 0x1b] = a5\n  4462: a5 = a4 >> 0x10\n  4465: u8 [a0 + 0x1a] = a5\n  4468: a5 = a4 >> 0x8\n  4471: u8 [a0 + 0x19] = a5\n  4474: u8 [a0 + 0x18] = a4\n  4477: u8 [a0 + 0x10] = a3\n  4480: a4 = a3 >> 0x38\n  4483: u8 [a0 + 0x17] = a4\n  4486: a4 = a3 >> 0x30\n  4489: u8 [a0 + 0x16] = a4\n  4492: a4 = a3 >> 0x28\n  4495: u8 [a0 + 0x15] = a4\n  4498: a4 = a3 >> 0x20\n  4501: u8 [a0 + 0x14] = a4\n  4504: a4 = a3 >> 0x18\n  4507: u8 [a0 + 0x13] = a4\n  4510: a4 = a3 >> 0x10\n  4513: u8 [a0 + 0x12] = a4\n  4516: a3 = a3 >> 0x8\n  4519: u8 [a0 + 0x11] = a3\n  4522: u8 [a0 + 0x8] = a2\n  4525: a3 = a2 >> 0x38\n  4528: u8 [a0 + 0xf] = a3\n  4531: a3 = a2 >> 0x30\n  4534: u8 [a0 + 0xe] = a3\n  4537: a3 = a2 >> 0x28\n  4540: u8 [a0 + 0xd] = a3\n  4543: a3 = a2 >> 0x20\n  4546: u8 [a0 + 0xc] = a3\n  4549: a3 = a2 >> 0x18\n  4552: u8 [a0 + 0xb] = a3\n  4555: a3 = a2 >> 0x10\n  4558: u8 [a0 + 0xa] = a3\n  4561: a2 = a2 >> 0x8\n  4564: u8 [a0 + 0x9] = a2\n  4567: u8 [a0] = a1\n  4569: a2 = a1 >> 0x38\n  4572: u8 [a0 + 0x7] = a2\n  4575: a2 = a1 >> 0x30\n  4578: u8 [a0 + 0x6] = a2\n  4581: a2 = a1 >> 0x28\n  4584: u8 [a0 + 0x5] = a2\n  4587: a2 = a1 >> 0x20\n  4590: u8 [a0 + 0x4] = a2\n  4593: a2 = a1 >> 0x18\n  4596: u8 [a0 + 0x3] = a2\n  4599: a2 = a1 >> 0x10\n  4602: u8 [a0 + 0x2] = a2\n  4605: a1 = a1 >> 0x8\n  4608: u8 [a0 + 0x1] = a1\n  4611: a1 = 0x20\n  4614: a0 = s1\n  4616: ra = 82, jump @0\n      : @102 [@dyn 41] (gas: 6)\n  4621: i32 a1 = a0 + 0\n  4623: a2 = 0x20\n  4626: a0 = 0\n  4628: ra = 0x54\n  4631: ecalli 6 // 'seal_return'\n  4633: fallthrough\n      : @103 [@dyn 42] (gas: 47)\n  4634: sp = sp + 0xffffffffffffff80\n  4637: u64 [sp + 0x78] = ra\n  4640: u64 [sp + 0x70] = s0\n  4643: u64 [sp + 0x68] = s1\n  4646: s0 = sp + 0x80\n  4650: sp = sp & 0xffffffffffffffe0\n  4653: ra = u64 [a1 + 0x10]\n  4656: a5 = u64 [a1 + 0x8]\n  4659: a3 = u64 [a2 + 0x8]\n  4662: t1 = u64 [a1]\n  4664: a4 = u64 [a2]\n  4666: u64 [sp + 0x28] = a4\n  4669: t2 = u64 [a2 + 0x10]\n  4672: t0 = a3 ^ a5\n  4675: s1 = a3 <u a5\n  4678: a4 = a4 <u t1\n  4681: u64 [sp + 0x20] = a4\n  4684: s1 = a4 if t0 == 0\n  4687: t0 = u64 [a1 + 0x18]\n  4690: a1 = u64 [a2 + 0x18]\n  4693: u64 [sp + 0x18] = a1\n  4696: a2 = t2 - ra\n  4699: a1 = a2 - s1\n  4702: u64 [sp + 0x30] = a1\n  4705: a1 = a2 <u s1\n  4708: a4 = t2 <u ra\n  4711: u64 [sp + 0x38] = t0\n  4714: a2 = u64 [sp + 0x18]\n  4717: a2 = a2 - t0\n  4720: a2 = a2 - a4\n  4723: a2 = a2 - a1\n  4726: a1 = a3 - a5\n  4729: a3 = u64 [sp + 0x20]\n  4732: a1 = a1 - a3\n  4735: a3 = u64 [sp + 0x28]\n  4738: a3 = a3 - t1\n  4741: a4 = a1 >u 0\n  4743: a3 = a3 <u 0x40\n  4746: a3 = a3 ^ 0x1\n  4749: a3 = a4 if a1 != 0\n  4752: s1 = a2 >s 0\n  4754: a1 = u64 [sp + 0x30]\n  4757: a4 = a1 >u 0\n  4759: a4 = s1 if a2 != 0\n  4762: a1 = a1 | a2\n  4765: a3 = a4 if a1 != 0\n  4768: jump @109 if a3 == 0\n      : @104 (gas: 12)\n  4772: s1 = a0\n  4774: a0 = t1 | ra\n  4777: u64 [sp + 0x30] = a5\n  4780: a1 = u64 [sp + 0x38]\n  4783: a1 = a1 | a5\n  4786: a0 = a0 | a1\n  4789: a0 = a0 >> 0x20\n  4792: u64 [sp + 0x28] = ra\n  4795: a1 = a1 | ra\n  4798: a1 = a1 << 0x20\n  4801: a0 = a0 | a1\n  4804: jump @108 if a0 != 0\n      : @105 (gas: 6)\n  4808: i32 a1 = t1 + 0\n  4810: i32 a0 = sp + 0x40\n  4813: u64 [sp + 0x18] = a1\n  4816: u64 [sp + 0x20] = t1\n  4819: ecalli 1 // 'call_data_load'\n  4821: fallthrough\n      : @106 (gas: 10)\n  4822: a0 = u64 [sp + 0x28]\n  4825: a1 = u64 [sp + 0x38]\n  4828: a0 = a0 | a1\n  4831: a1 = 0xffffffe0\n  4841: a2 = u64 [sp + 0x20]\n  4844: a1 = a2 <u a1\n  4847: a2 = u64 [sp + 0x30]\n  4850: a1 = 0 if a2 != 0\n  4852: a1 = 0 if a0 != 0\n  4854: jump @108 if a1 == 0\n      : @107 (gas: 34)\n  4857: a0 = u64 [sp + 0x58]\n  4860: u64 [sp + 0x20] = a0\n  4863: a0 = u64 [sp + 0x50]\n  4866: u64 [sp + 0x28] = a0\n  4869: a0 = u64 [sp + 0x48]\n  4872: u64 [sp + 0x30] = a0\n  4875: a0 = u64 [sp + 0x40]\n  4878: u64 [sp + 0x38] = a0\n  4881: a0 = u64 [sp + 0x18]\n  4884: i32 a1 = a0 + 0x20\n  4887: i32 a0 = sp + 0x40\n  4890: ecalli 1 // 'call_data_load'\n  4892: a0 = u64 [sp + 0x58]\n  4895: a1 = u64 [sp + 0x50]\n  4898: a2 = u64 [sp + 0x48]\n  4901: a3 = u64 [sp + 0x40]\n  4904: u64 [s1 + 0x38] = a0\n  4907: u64 [s1 + 0x30] = a1\n  4910: u64 [s1 + 0x28] = a2\n  4913: u64 [s1 + 0x20] = a3\n  4916: a0 = u64 [sp + 0x20]\n  4919: u64 [s1 + 0x18] = a0\n  4922: a0 = u64 [sp + 0x28]\n  4925: u64 [s1 + 0x10] = a0\n  4928: a0 = u64 [sp + 0x30]\n  4931: u64 [s1 + 0x8] = a0\n  4934: a0 = u64 [sp + 0x38]\n  4937: u64 [s1] = a0\n  4939: sp = s0 + 0xffffffffffffff80\n  4942: ra = u64 [sp + 0x78]\n  4945: s0 = u64 [sp + 0x70]\n  4948: s1 = u64 [sp + 0x68]\n  4951: sp = sp + 0x80\n  4955: ret\n      : @108 (gas: 1)\n  4957: trap\n      : @109 (gas: 3)\n  4958: a0 = 0\n  4960: a1 = 0\n  4962: ra = 86, jump @0\n      : @110 [@dyn 43] (gas: 6)\n  4967: i32 a1 = a0 + 0\n  4969: a0 = 0x1\n  4972: a2 = 0\n  4974: ra = 0x58\n  4977: ecalli 6 // 'seal_return'\n  4979: fallthrough\n      : @111 [@dyn 44] (gas: 13)\n  4980: sp = sp + 0xffffffffffffff40\n  4984: u64 [sp + 0xb8] = ra\n  4988: u64 [sp + 0xb0] = s0\n  4992: u64 [sp + 0xa8] = s1\n  4996: s0 = sp + 0xc0\n  5000: sp = sp & 0xffffffffffffffe0\n  5003: u64 [sp + 120] = 0\n  5006: u64 [sp + 112] = 0\n  5009: u64 [sp + 104] = 0\n  5012: u64 [sp + 96] = 0\n  5015: i32 a0 = sp + 0x60\n  5018: ecalli 9 // 'value_transferred'\n  5020: fallthrough\n      : @112 (gas: 8)\n  5021: a0 = u64 [sp + 0x70]\n  5024: a1 = u64 [sp + 0x78]\n  5027: a2 = u64 [sp + 0x68]\n  5030: a3 = u64 [sp + 0x60]\n  5033: a1 = a1 | a2\n  5036: a0 = a0 | a3\n  5039: a0 = a0 | a1\n  5042: jump @118 if a0 != 0\n      : @113 (gas: 2)\n  5046: a0 = i32 [0x20004]\n  5051: jump @118 if a0 <=u 67\n      : @114 (gas: 31)\n  5056: i32 a0 = sp + 0x80\n  5060: a1 = 0x4\n  5063: ecalli 1 // 'call_data_load'\n  5065: a0 = u64 [sp + 0x80]\n  5069: u64 [sp + 0x18] = a0\n  5072: a0 = u64 [sp + 0x88]\n  5076: u64 [sp + 0x10] = a0\n  5079: a0 = u64 [sp + 0x90]\n  5083: u64 [sp + 0x8] = a0\n  5086: s1 = u64 [sp + 0x98]\n  5090: i32 a0 = sp + 0x80\n  5094: a1 = 0x24\n  5097: ecalli 1 // 'call_data_load'\n  5099: a0 = u64 [sp + 0x80]\n  5103: a1 = u64 [sp + 0x88]\n  5107: a2 = u64 [sp + 0x90]\n  5111: a3 = u64 [sp + 0x98]\n  5115: u64 [sp + 0x38] = a3\n  5118: u64 [sp + 0x30] = a2\n  5121: u64 [sp + 0x28] = a1\n  5124: u64 [sp + 0x20] = a0\n  5127: u64 [sp + 0x58] = s1\n  5130: a0 = u64 [sp + 0x8]\n  5133: u64 [sp + 0x50] = a0\n  5136: a0 = u64 [sp + 0x10]\n  5139: u64 [sp + 0x48] = a0\n  5142: a0 = sp + 0x40\n  5145: a1 = sp + 0x20\n  5148: a2 = u64 [sp + 0x18]\n  5151: u64 [sp + 0x40] = a2\n  5154: ra = 90, jump @364\n      : @115 [@dyn 45] (gas: 3)\n  5159: a0 = 0x40\n  5162: a1 = 0x20\n  5165: ra = 92, jump @0\n      : @116 [@dyn 46] (gas: 100)\n  5170: a1 = u8 [a0 + 0x11]\n  5173: a2 = u8 [a0 + 0x10]\n  5176: a3 = u8 [a0 + 0x12]\n  5179: a4 = u8 [a0 + 0x13]\n  5182: a1 = a1 << 0x8\n  5185: a1 = a1 | a2\n  5188: a3 = a3 << 0x10\n  5191: a4 = a4 << 0x18\n  5194: a3 = a3 | a4\n  5197: a1 = a1 | a3\n  5200: a2 = u8 [a0 + 0x15]\n  5203: a3 = u8 [a0 + 0x14]\n  5206: a4 = u8 [a0 + 0x16]\n  5209: a5 = u8 [a0 + 0x17]\n  5212: a2 = a2 << 0x8\n  5215: a2 = a2 | a3\n  5218: a4 = a4 << 0x10\n  5221: a5 = a5 << 0x18\n  5224: a4 = a4 | a5\n  5227: a2 = a2 | a4\n  5230: a2 = a2 << 0x20\n  5233: t0 = a2 | a1\n  5236: a2 = u8 [a0 + 0x1]\n  5239: a3 = u8 [a0]\n  5241: a4 = u8 [a0 + 0x2]\n  5244: a5 = u8 [a0 + 0x3]\n  5247: a2 = a2 << 0x8\n  5250: a2 = a2 | a3\n  5253: a4 = a4 << 0x10\n  5256: a5 = a5 << 0x18\n  5259: a4 = a4 | a5\n  5262: a2 = a2 | a4\n  5265: a3 = u8 [a0 + 0x5]\n  5268: a4 = u8 [a0 + 0x4]\n  5271: a5 = u8 [a0 + 0x6]\n  5274: s1 = u8 [a0 + 0x7]\n  5277: a3 = a3 << 0x8\n  5280: a3 = a3 | a4\n  5283: a5 = a5 << 0x10\n  5286: s1 = s1 << 0x18\n  5289: a5 = a5 | s1\n  5292: a3 = a3 | a5\n  5295: a3 = a3 << 0x20\n  5298: a2 = a2 | a3\n  5301: a3 = u8 [a0 + 0x19]\n  5304: a4 = u8 [a0 + 0x18]\n  5307: a5 = u8 [a0 + 0x1a]\n  5310: s1 = u8 [a0 + 0x1b]\n  5313: a3 = a3 << 0x8\n  5316: a3 = a3 | a4\n  5319: a5 = a5 << 0x10\n  5322: s1 = s1 << 0x18\n  5325: a5 = a5 | s1\n  5328: a3 = a3 | a5\n  5331: a4 = u8 [a0 + 0x1d]\n  5334: a5 = u8 [a0 + 0x1c]\n  5337: s1 = u8 [a0 + 0x1e]\n  5340: a1 = u8 [a0 + 0x1f]\n  5343: a4 = a4 << 0x8\n  5346: a4 = a4 | a5\n  5349: s1 = s1 << 0x10\n  5352: a1 = a1 << 0x18\n  5355: a1 = a1 | s1\n  5358: a1 = a1 | a4\n  5361: a1 = a1 << 0x20\n  5364: a3 = a3 | a1\n  5367: a1 = u8 [a0 + 0x9]\n  5370: a4 = u8 [a0 + 0x8]\n  5373: a5 = u8 [a0 + 0xa]\n  5376: s1 = u8 [a0 + 0xb]\n  5379: a1 = a1 << 0x8\n  5382: a1 = a1 | a4\n  5385: a5 = a5 << 0x10\n  5388: s1 = s1 << 0x18\n  5391: a5 = a5 | s1\n  5394: a1 = a1 | a5\n  5397: a4 = u8 [a0 + 0xd]\n  5400: a5 = u8 [a0 + 0xc]\n  5403: s1 = u8 [a0 + 0xe]\n  5406: a0 = u8 [a0 + 0xf]\n  5409: a4 = a4 << 0x8\n  5412: a4 = a4 | a5\n  5415: s1 = s1 << 0x10\n  5418: a0 = a0 << 0x18\n  5421: a0 = a0 | s1\n  5424: a0 = a0 | a4\n  5427: a0 = a0 << 0x20\n  5430: a0 = a0 | a1\n  5433: a1 = reverse a0\n  5435: a0 = reverse a3\n  5437: a2 = reverse a2\n  5439: a3 = reverse t0\n  5441: a2 = a2 | a3\n  5444: a3 = a0 | a1\n  5447: a3 = a3 | a2\n  5450: a3 = a3 >> 0x20\n  5453: a1 = a1 | a2\n  5456: a1 = a1 << 0x20\n  5459: a1 = a1 | a3\n  5462: jump @120 if a1 == 0\n      : @117 (gas: 1)\n  5465: trap\n      : @118 (gas: 3)\n  5466: a0 = 0\n  5468: a1 = 0\n  5470: ra = 94, jump @0\n      : @119 [@dyn 47] (gas: 7)\n  5475: i32 a1 = a0 + 0\n  5477: a0 = 0x1\n  5480: a2 = 0\n  5482: ecalli 6 // 'seal_return'\n  5484: i32 a0 = a0 + 0\n  5486: ra = 0x60\n  5489: jump @0\n      : @120 (gas: 2)\n  5492: i32 a0 = a0 + 0\n  5494: ra = 96, jump @0\n      : @121 [@dyn 48] (gas: 6)\n  5499: i32 a1 = a0 + 0\n  5501: a0 = 0\n  5503: a2 = 0\n  5505: ra = 0x62\n  5508: ecalli 6 // 'seal_return'\n  5510: fallthrough\n      : @122 [@dyn 49] (gas: 19)\n  5511: t0 = u64 [a0 + 0x18]\n  5514: t1 = u64 [a1 + 0x18]\n  5517: a4 = u64 [a0 + 0x10]\n  5520: a5 = u64 [a0 + 0x8]\n  5523: a2 = u64 [a1 + 0x8]\n  5526: t2 = u64 [a0]\n  5528: a3 = u64 [a1]\n  5530: a1 = u64 [a1 + 0x10]\n  5533: a0 = a2 ^ a5\n  5536: a2 = a2 <u a5\n  5539: a3 = a3 <u t2\n  5542: a3 = a2 if a0 != 0\n  5545: a0 = a1 - a4\n  5548: a0 = a0 <u a3\n  5551: a1 = a1 <u a4\n  5554: a2 = t1 - t0\n  5557: a2 = a2 - a1\n  5560: a2 = a2 - a0\n  5563: jump @124 if a2 <s 0\n      : @123 (gas: 1)\n  5566: ret\n      : @124 (gas: 5)\n  5568: sp = sp + 0xfffffffffffffff8\n  5571: u64 [sp] = ra\n  5573: a0 = 0\n  5575: a1 = 0\n  5577: ra = 100, jump @0\n      : @125 [@dyn 50] (gas: 6)\n  5582: i32 a1 = a0 + 0\n  5584: a0 = 0x1\n  5587: a2 = 0\n  5589: ra = 0x66\n  5592: ecalli 6 // 'seal_return'\n  5594: fallthrough\n      : @126 [@dyn 51] (gas: 12)\n  5595: a2 = u64 [a1 + 0x10]\n  5598: a3 = u64 [a1 + 0x18]\n  5601: a4 = u64 [a1 + 0x8]\n  5604: a1 = u64 [a1]\n  5606: a3 = a3 | a4\n  5609: a4 = a1 | a2\n  5612: a4 = a4 | a3\n  5615: a4 = a4 >> 0x20\n  5618: a2 = a2 | a3\n  5621: a2 = a2 << 0x20\n  5624: a2 = a2 | a4\n  5627: jump @129 if a2 != 0\n      : @127 (gas: 7)\n  5631: sp = sp + 0xfffffffffffffff0\n  5634: u64 [sp + 0x8] = ra\n  5637: u64 [sp] = s0\n  5639: s0 = a0\n  5641: i32 a0 = a1 + 0\n  5643: a1 = 0x20\n  5646: ra = 104, jump @0\n      : @128 [@dyn 52] (gas: 100)\n  5651: a1 = u8 [a0 + 0x1]\n  5654: a2 = u8 [a0]\n  5656: a3 = u8 [a0 + 0x2]\n  5659: a4 = u8 [a0 + 0x3]\n  5662: a1 = a1 << 0x8\n  5665: a1 = a1 | a2\n  5668: a3 = a3 << 0x10\n  5671: a4 = a4 << 0x18\n  5674: a3 = a3 | a4\n  5677: a1 = a1 | a3\n  5680: a2 = u8 [a0 + 0x5]\n  5683: a3 = u8 [a0 + 0x4]\n  5686: a4 = u8 [a0 + 0x6]\n  5689: a5 = u8 [a0 + 0x7]\n  5692: a2 = a2 << 0x8\n  5695: a2 = a2 | a3\n  5698: a4 = a4 << 0x10\n  5701: a5 = a5 << 0x18\n  5704: a4 = a4 | a5\n  5707: a2 = a2 | a4\n  5710: a2 = a2 << 0x20\n  5713: t0 = a2 | a1\n  5716: a2 = u8 [a0 + 0x9]\n  5719: a3 = u8 [a0 + 0x8]\n  5722: a4 = u8 [a0 + 0xa]\n  5725: a5 = u8 [a0 + 0xb]\n  5728: a2 = a2 << 0x8\n  5731: a2 = a2 | a3\n  5734: a4 = a4 << 0x10\n  5737: a5 = a5 << 0x18\n  5740: a4 = a4 | a5\n  5743: a2 = a2 | a4\n  5746: a3 = u8 [a0 + 0xd]\n  5749: a4 = u8 [a0 + 0xc]\n  5752: a5 = u8 [a0 + 0xe]\n  5755: a1 = u8 [a0 + 0xf]\n  5758: a3 = a3 << 0x8\n  5761: a3 = a3 | a4\n  5764: a5 = a5 << 0x10\n  5767: a1 = a1 << 0x18\n  5770: a1 = a1 | a5\n  5773: a1 = a1 | a3\n  5776: a1 = a1 << 0x20\n  5779: t1 = a1 | a2\n  5782: a1 = u8 [a0 + 0x11]\n  5785: a3 = u8 [a0 + 0x10]\n  5788: a4 = u8 [a0 + 0x12]\n  5791: a5 = u8 [a0 + 0x13]\n  5794: a1 = a1 << 0x8\n  5797: a1 = a1 | a3\n  5800: a4 = a4 << 0x10\n  5803: a5 = a5 << 0x18\n  5806: a4 = a4 | a5\n  5809: a1 = a1 | a4\n  5812: a3 = u8 [a0 + 0x15]\n  5815: a4 = u8 [a0 + 0x14]\n  5818: a5 = u8 [a0 + 0x16]\n  5821: a2 = u8 [a0 + 0x17]\n  5824: a3 = a3 << 0x8\n  5827: a3 = a3 | a4\n  5830: a5 = a5 << 0x10\n  5833: a2 = a2 << 0x18\n  5836: a2 = a2 | a5\n  5839: a2 = a2 | a3\n  5842: a2 = a2 << 0x20\n  5845: a3 = a2 | a1\n  5848: a1 = u8 [a0 + 0x19]\n  5851: a2 = u8 [a0 + 0x18]\n  5854: a4 = u8 [a0 + 0x1a]\n  5857: a5 = u8 [a0 + 0x1b]\n  5860: a1 = a1 << 0x8\n  5863: a1 = a1 | a2\n  5866: a4 = a4 << 0x10\n  5869: a5 = a5 << 0x18\n  5872: a4 = a4 | a5\n  5875: a1 = a1 | a4\n  5878: a2 = u8 [a0 + 0x1d]\n  5881: a4 = u8 [a0 + 0x1c]\n  5884: a5 = u8 [a0 + 0x1e]\n  5887: a0 = u8 [a0 + 0x1f]\n  5890: a2 = a2 << 0x8\n  5893: a2 = a2 | a4\n  5896: a5 = a5 << 0x10\n  5899: a0 = a0 << 0x18\n  5902: a0 = a0 | a5\n  5905: a0 = a0 | a2\n  5908: a0 = a0 << 0x20\n  5911: a0 = a0 | a1\n  5914: a0 = reverse a0\n  5916: a1 = reverse a3\n  5918: a2 = reverse t1\n  5920: a3 = reverse t0\n  5922: u64 [s0 + 0x18] = a3\n  5925: u64 [s0 + 0x10] = a2\n  5928: u64 [s0 + 0x8] = a1\n  5931: u64 [s0] = a0\n  5933: ra = u64 [sp + 0x8]\n  5936: s0 = u64 [sp]\n  5938: sp = sp + 0x10\n  5941: ret\n      : @129 (gas: 1)\n  5943: trap\n      : @130 (gas: 20)\n  5944: sp = sp + 0xffffffffffffffb0\n  5947: u64 [sp + 0x48] = ra\n  5950: u64 [sp + 0x40] = s0\n  5953: u64 [sp + 0x38] = s1\n  5956: a4 = u64 [a1 + 0x10]\n  5959: a3 = u64 [a1 + 0x18]\n  5962: a5 = u64 [a1 + 0x8]\n  5965: s0 = u64 [a1]\n  5967: u64 [sp + 0x28] = a3\n  5970: u64 [sp + 0x20] = a5\n  5973: a1 = a5 | a3\n  5976: a3 = s0 | a4\n  5979: a3 = a3 | a1\n  5982: a3 = a3 >> 0x20\n  5985: u64 [sp + 0x30] = a4\n  5988: a1 = a1 | a4\n  5991: a1 = a1 << 0x20\n  5994: a1 = a1 | a3\n  5997: u64 [sp + 0x18] = a0\n  6000: jump @133 if a1 != 0\n      : @131 (gas: 10)\n  6004: a0 = u64 [a2 + 0x18]\n  6007: u64 [sp] = a0\n  6009: s1 = u64 [a2 + 0x10]\n  6012: a0 = u64 [a2 + 0x8]\n  6015: u64 [sp + 0x8] = a0\n  6018: a0 = u64 [a2]\n  6020: u64 [sp + 0x10] = a0\n  6023: i32 a0 = s0 + 0\n  6025: a1 = 0x20\n  6028: ra = 106, jump @0\n      : @132 [@dyn 53] (gas: 88)\n  6033: a1 = u64 [sp]\n  6035: a1 = reverse a1\n  6037: a2 = reverse s1\n  6039: a3 = u64 [sp + 0x8]\n  6042: a3 = reverse a3\n  6044: a4 = u64 [sp + 0x10]\n  6047: a4 = reverse a4\n  6049: a5 = a4 >> 0x38\n  6052: u8 [a0 + 0x1f] = a5\n  6055: a5 = a4 >> 0x30\n  6058: u8 [a0 + 0x1e] = a5\n  6061: a5 = a4 >> 0x28\n  6064: u8 [a0 + 0x1d] = a5\n  6067: a5 = a4 >> 0x20\n  6070: u8 [a0 + 0x1c] = a5\n  6073: a5 = a4 >> 0x18\n  6076: u8 [a0 + 0x1b] = a5\n  6079: a5 = a4 >> 0x10\n  6082: u8 [a0 + 0x1a] = a5\n  6085: a5 = a4 >> 0x8\n  6088: u8 [a0 + 0x19] = a5\n  6091: u8 [a0 + 0x18] = a4\n  6094: u8 [a0 + 0x10] = a3\n  6097: a4 = a3 >> 0x38\n  6100: u8 [a0 + 0x17] = a4\n  6103: a4 = a3 >> 0x30\n  6106: u8 [a0 + 0x16] = a4\n  6109: a4 = a3 >> 0x28\n  6112: u8 [a0 + 0x15] = a4\n  6115: a4 = a3 >> 0x20\n  6118: u8 [a0 + 0x14] = a4\n  6121: a4 = a3 >> 0x18\n  6124: u8 [a0 + 0x13] = a4\n  6127: a4 = a3 >> 0x10\n  6130: u8 [a0 + 0x12] = a4\n  6133: a3 = a3 >> 0x8\n  6136: u8 [a0 + 0x11] = a3\n  6139: u8 [a0 + 0x8] = a2\n  6142: a3 = a2 >> 0x38\n  6145: u8 [a0 + 0xf] = a3\n  6148: a3 = a2 >> 0x30\n  6151: u8 [a0 + 0xe] = a3\n  6154: a3 = a2 >> 0x28\n  6157: u8 [a0 + 0xd] = a3\n  6160: a3 = a2 >> 0x20\n  6163: u8 [a0 + 0xc] = a3\n  6166: a3 = a2 >> 0x18\n  6169: u8 [a0 + 0xb] = a3\n  6172: a3 = a2 >> 0x10\n  6175: u8 [a0 + 0xa] = a3\n  6178: a2 = a2 >> 0x8\n  6181: u8 [a0 + 0x9] = a2\n  6184: u8 [a0] = a1\n  6186: a2 = a1 >> 0x38\n  6189: u8 [a0 + 0x7] = a2\n  6192: a2 = a1 >> 0x30\n  6195: u8 [a0 + 0x6] = a2\n  6198: a2 = a1 >> 0x28\n  6201: u8 [a0 + 0x5] = a2\n  6204: a2 = a1 >> 0x20\n  6207: u8 [a0 + 0x4] = a2\n  6210: a2 = a1 >> 0x18\n  6213: u8 [a0 + 0x3] = a2\n  6216: a2 = a1 >> 0x10\n  6219: u8 [a0 + 0x2] = a2\n  6222: a1 = a1 >> 0x8\n  6225: u8 [a0 + 0x1] = a1\n  6228: a0 = s0 + 0x20\n  6231: a1 = a0 <u s0\n  6234: a3 = u64 [sp + 0x20]\n  6237: a2 = a3 + a1\n  6240: a3 = a2 <u a3\n  6243: a3 = a1 if a1 == 0\n  6246: a1 = u64 [sp + 0x30]\n  6249: a3 = a3 + a1\n  6252: a1 = a3 <u a1\n  6255: a4 = u64 [sp + 0x28]\n  6258: a1 = a1 + a4\n  6261: a4 = u64 [sp + 0x18]\n  6264: u64 [a4] = a0\n  6266: u64 [a4 + 0x8] = a2\n  6269: u64 [a4 + 0x10] = a3\n  6272: u64 [a4 + 0x18] = a1\n  6275: ra = u64 [sp + 0x48]\n  6278: s0 = u64 [sp + 0x40]\n  6281: s1 = u64 [sp + 0x38]\n  6284: sp = sp + 0x50\n  6287: ret\n      : @133 (gas: 1)\n  6289: trap\n      : @134 (gas: 19)\n  6290: sp = sp + 0xfffffffffffffeb8\n  6294: u64 [sp + 0x140] = ra\n  6298: u64 [sp + 0x138] = s0\n  6302: u64 [sp + 0x130] = s1\n  6306: a4 = u64 [a0 + 0x10]\n  6309: a5 = u64 [a0 + 0x18]\n  6312: a2 = u64 [a0 + 0x8]\n  6315: a3 = u64 [a0]\n  6317: u64 [sp + 0x120] = a2\n  6321: u64 [sp + 0xe8] = a5\n  6325: a0 = a2 | a5\n  6328: a2 = a3 | a4\n  6331: a2 = a2 | a0\n  6334: a2 = a2 >> 0x20\n  6337: u64 [sp + 0xf0] = a4\n  6341: a0 = a0 | a4\n  6344: a0 = a0 << 0x20\n  6347: a0 = a0 | a2\n  6350: jump @151 if a0 != 0\n      : @135 (gas: 11)\n  6354: a0 = u64 [a1 + 0x18]\n  6357: u64 [sp + 0xf8] = a0\n  6361: s1 = u64 [a1 + 0x10]\n  6364: s0 = u64 [a1 + 0x8]\n  6367: a0 = u64 [a1]\n  6369: u64 [sp + 0x128] = a0\n  6373: i32 a0 = a3 + 0\n  6375: a1 = 0x20\n  6378: u64 [sp + 0x108] = a0\n  6382: u64 [sp + 0x118] = a3\n  6386: ra = 108, jump @0\n      : @136 [@dyn 54] (gas: 12)\n  6391: a3 = u64 [sp + 0x128]\n  6395: a1 = a3 | s1\n  6398: u64 [sp + 0x110] = s0\n  6402: a2 = u64 [sp + 0xf8]\n  6406: a2 = a2 | s0\n  6409: a1 = a1 | a2\n  6412: a1 = a1 >> 0x20\n  6415: u64 [sp + 0xe0] = s1\n  6419: a2 = a2 | s1\n  6422: a2 = a2 << 0x20\n  6425: a1 = a1 | a2\n  6428: jump @151 if a1 != 0\n      : @137 (gas: 42)\n  6432: a1 = u8 [a0 + 0xc]\n  6435: u64 [sp + 0xd8] = a1\n  6439: a1 = u8 [a0 + 0xd]\n  6442: u64 [sp + 0xd0] = a1\n  6446: a1 = u8 [a0 + 0xe]\n  6449: u64 [sp + 0xc8] = a1\n  6453: a1 = u8 [a0 + 0xf]\n  6456: u64 [sp + 0xc0] = a1\n  6460: a1 = u8 [a0 + 0x10]\n  6463: u64 [sp + 0xb8] = a1\n  6467: a1 = u8 [a0 + 0x11]\n  6470: u64 [sp + 0xb0] = a1\n  6474: a1 = u8 [a0 + 0x12]\n  6477: u64 [sp + 0xa8] = a1\n  6481: a1 = u8 [a0 + 0x13]\n  6484: u64 [sp + 0xa0] = a1\n  6488: a1 = u8 [a0 + 0x14]\n  6491: u64 [sp + 0x98] = a1\n  6495: a1 = u8 [a0 + 0x15]\n  6498: u64 [sp + 0x90] = a1\n  6502: a1 = u8 [a0 + 0x16]\n  6505: u64 [sp + 0x88] = a1\n  6509: a1 = u8 [a0 + 0x17]\n  6512: u64 [sp + 0x80] = a1\n  6516: a1 = u8 [a0 + 0x18]\n  6519: u64 [sp + 0x78] = a1\n  6522: a1 = u8 [a0 + 0x19]\n  6525: u64 [sp + 0x70] = a1\n  6528: a1 = u8 [a0 + 0x1a]\n  6531: u64 [sp + 0x68] = a1\n  6534: a1 = u8 [a0 + 0x1b]\n  6537: u64 [sp + 0x60] = a1\n  6540: a1 = u8 [a0 + 0x1c]\n  6543: u64 [sp + 0x58] = a1\n  6546: a1 = u8 [a0 + 0x1d]\n  6549: u64 [sp + 0x50] = a1\n  6552: s0 = u8 [a0 + 0x1e]\n  6555: s1 = u8 [a0 + 0x1f]\n  6558: i32 a0 = a3 + 0\n  6560: a1 = 0x20\n  6563: u64 [sp + 0x100] = a0\n  6567: ra = 110, jump @0\n      : @138 [@dyn 55] (gas: 61)\n  6572: u8 [a0 + 0x1f] = s1\n  6575: u8 [a0 + 0x1e] = s0\n  6578: a1 = u64 [sp + 0x50]\n  6581: u8 [a0 + 0x1d] = a1\n  6584: a1 = u64 [sp + 0x58]\n  6587: u8 [a0 + 0x1c] = a1\n  6590: a1 = u64 [sp + 0x60]\n  6593: u8 [a0 + 0x1b] = a1\n  6596: a1 = u64 [sp + 0x68]\n  6599: u8 [a0 + 0x1a] = a1\n  6602: a1 = u64 [sp + 0x70]\n  6605: u8 [a0 + 0x19] = a1\n  6608: a1 = u64 [sp + 0x78]\n  6611: u8 [a0 + 0x18] = a1\n  6614: a1 = u64 [sp + 0x80]\n  6618: u8 [a0 + 0x17] = a1\n  6621: a1 = u64 [sp + 0x88]\n  6625: u8 [a0 + 0x16] = a1\n  6628: a1 = u64 [sp + 0x90]\n  6632: u8 [a0 + 0x15] = a1\n  6635: a1 = u64 [sp + 0x98]\n  6639: u8 [a0 + 0x14] = a1\n  6642: a1 = u64 [sp + 0xa0]\n  6646: u8 [a0 + 0x13] = a1\n  6649: a1 = u64 [sp + 0xa8]\n  6653: u8 [a0 + 0x12] = a1\n  6656: a1 = u64 [sp + 0xb0]\n  6660: u8 [a0 + 0x11] = a1\n  6663: a1 = u64 [sp + 0xb8]\n  6667: u8 [a0 + 0x10] = a1\n  6670: a1 = u64 [sp + 0xc0]\n  6674: u8 [a0 + 0xf] = a1\n  6677: a1 = u64 [sp + 0xc8]\n  6681: u8 [a0 + 0xe] = a1\n  6684: a1 = u64 [sp + 0xd0]\n  6688: u8 [a0 + 0xd] = a1\n  6691: a1 = u64 [sp + 0xd8]\n  6695: u8 [a0 + 0xc] = a1\n  6698: u8 [a0 + 11] = 0\n  6701: u8 [a0 + 10] = 0\n  6704: u8 [a0 + 9] = 0\n  6707: u8 [a0 + 8] = 0\n  6710: u8 [a0 + 7] = 0\n  6713: u8 [a0 + 6] = 0\n  6716: u8 [a0 + 5] = 0\n  6719: u8 [a0 + 4] = 0\n  6722: u8 [a0 + 3] = 0\n  6725: u8 [a0 + 2] = 0\n  6728: u8 [a0 + 1] = 0\n  6731: a1 = u64 [sp + 0xf0]\n  6735: a3 = u64 [sp + 0xe8]\n  6739: a3 = a3 | a1\n  6742: s0 = 0xffffffe0\n  6752: a1 = u64 [sp + 0x118]\n  6756: a1 = a1 <u s0\n  6759: a2 = u64 [sp + 0x120]\n  6763: a1 = 0 if a2 != 0\n  6765: u64 [sp + 0xf0] = a3\n  6769: a1 = 0 if a3 != 0\n  6771: u8 [a0 + 0] = 0\n  6773: jump @151 if a1 == 0\n      : @139 (gas: 4)\n  6777: a0 = u64 [sp + 0x108]\n  6781: i32 a0 = a0 + 0x20\n  6784: a1 = 0x20\n  6787: ra = 112, jump @0\n      : @140 [@dyn 56] (gas: 10)\n  6792: a1 = u64 [sp + 0xf8]\n  6796: a3 = u64 [sp + 0xe0]\n  6800: a3 = a3 | a1\n  6803: a1 = u64 [sp + 0x128]\n  6807: a1 = a1 <u s0\n  6810: a2 = u64 [sp + 0x110]\n  6814: a1 = 0 if a2 != 0\n  6816: u64 [sp + 0xf8] = a3\n  6820: a1 = 0 if a3 != 0\n  6822: jump @151 if a1 == 0\n      : @141 (gas: 66)\n  6826: a1 = u8 [a0]\n  6828: u64 [sp + 0xe8] = a1\n  6832: a1 = u8 [a0 + 0x1]\n  6835: u64 [sp + 0xe0] = a1\n  6839: a1 = u8 [a0 + 0x2]\n  6842: u64 [sp + 0xd8] = a1\n  6846: a1 = u8 [a0 + 0x3]\n  6849: u64 [sp + 0xd0] = a1\n  6853: a1 = u8 [a0 + 0x4]\n  6856: u64 [sp + 0xc8] = a1\n  6860: a1 = u8 [a0 + 0x5]\n  6863: u64 [sp + 0xc0] = a1\n  6867: a1 = u8 [a0 + 0x6]\n  6870: u64 [sp + 0xb8] = a1\n  6874: a1 = u8 [a0 + 0x7]\n  6877: u64 [sp + 0xb0] = a1\n  6881: a1 = u8 [a0 + 0x8]\n  6884: u64 [sp + 0xa8] = a1\n  6888: a1 = u8 [a0 + 0x9]\n  6891: u64 [sp + 0xa0] = a1\n  6895: a1 = u8 [a0 + 0xa]\n  6898: u64 [sp + 0x98] = a1\n  6902: a1 = u8 [a0 + 0xb]\n  6905: u64 [sp + 0x90] = a1\n  6909: a1 = u8 [a0 + 0xc]\n  6912: u64 [sp + 0x88] = a1\n  6916: a1 = u8 [a0 + 0xd]\n  6919: u64 [sp + 0x80] = a1\n  6923: a1 = u8 [a0 + 0xe]\n  6926: u64 [sp + 0x78] = a1\n  6929: a1 = u8 [a0 + 0xf]\n  6932: u64 [sp + 0x70] = a1\n  6935: a1 = u8 [a0 + 0x10]\n  6938: u64 [sp + 0x68] = a1\n  6941: a1 = u8 [a0 + 0x11]\n  6944: u64 [sp + 0x60] = a1\n  6947: a1 = u8 [a0 + 0x12]\n  6950: u64 [sp + 0x58] = a1\n  6953: a1 = u8 [a0 + 0x13]\n  6956: u64 [sp + 0x50] = a1\n  6959: a1 = u8 [a0 + 0x14]\n  6962: u64 [sp + 0x48] = a1\n  6965: a1 = u8 [a0 + 0x15]\n  6968: u64 [sp + 0x40] = a1\n  6971: a1 = u8 [a0 + 0x16]\n  6974: u64 [sp + 0x38] = a1\n  6977: a1 = u8 [a0 + 0x17]\n  6980: u64 [sp + 0x30] = a1\n  6983: a1 = u8 [a0 + 0x18]\n  6986: u64 [sp + 0x28] = a1\n  6989: a1 = u8 [a0 + 0x19]\n  6992: u64 [sp + 0x20] = a1\n  6995: a1 = u8 [a0 + 0x1a]\n  6998: u64 [sp + 0x18] = a1\n  7001: a1 = u8 [a0 + 0x1b]\n  7004: u64 [sp + 0x10] = a1\n  7007: a1 = u8 [a0 + 0x1c]\n  7010: u64 [sp + 0x8] = a1\n  7013: a1 = u8 [a0 + 0x1d]\n  7016: u64 [sp] = a1\n  7018: s0 = u8 [a0 + 0x1e]\n  7021: s1 = u8 [a0 + 0x1f]\n  7024: a0 = u64 [sp + 0x100]\n  7028: i32 a0 = a0 + 0x20\n  7031: a1 = 0x20\n  7034: ra = 114, jump @0\n      : @142 [@dyn 57] (gas: 70)\n  7039: u8 [a0 + 0x1f] = s1\n  7042: u8 [a0 + 0x1e] = s0\n  7045: a1 = u64 [sp]\n  7047: u8 [a0 + 0x1d] = a1\n  7050: a1 = u64 [sp + 0x8]\n  7053: u8 [a0 + 0x1c] = a1\n  7056: a1 = u64 [sp + 0x10]\n  7059: u8 [a0 + 0x1b] = a1\n  7062: a1 = u64 [sp + 0x18]\n  7065: u8 [a0 + 0x1a] = a1\n  7068: a1 = u64 [sp + 0x20]\n  7071: u8 [a0 + 0x19] = a1\n  7074: a1 = u64 [sp + 0x28]\n  7077: u8 [a0 + 0x18] = a1\n  7080: a1 = u64 [sp + 0x30]\n  7083: u8 [a0 + 0x17] = a1\n  7086: a1 = u64 [sp + 0x38]\n  7089: u8 [a0 + 0x16] = a1\n  7092: a1 = u64 [sp + 0x40]\n  7095: u8 [a0 + 0x15] = a1\n  7098: a1 = u64 [sp + 0x48]\n  7101: u8 [a0 + 0x14] = a1\n  7104: a1 = u64 [sp + 0x50]\n  7107: u8 [a0 + 0x13] = a1\n  7110: a1 = u64 [sp + 0x58]\n  7113: u8 [a0 + 0x12] = a1\n  7116: a1 = u64 [sp + 0x60]\n  7119: u8 [a0 + 0x11] = a1\n  7122: a1 = u64 [sp + 0x68]\n  7125: u8 [a0 + 0x10] = a1\n  7128: a1 = u64 [sp + 0x70]\n  7131: u8 [a0 + 0xf] = a1\n  7134: a1 = u64 [sp + 0x78]\n  7137: u8 [a0 + 0xe] = a1\n  7140: a1 = u64 [sp + 0x80]\n  7144: u8 [a0 + 0xd] = a1\n  7147: a1 = u64 [sp + 0x88]\n  7151: u8 [a0 + 0xc] = a1\n  7154: a1 = u64 [sp + 0x90]\n  7158: u8 [a0 + 0xb] = a1\n  7161: a1 = u64 [sp + 0x98]\n  7165: u8 [a0 + 0xa] = a1\n  7168: a1 = u64 [sp + 0xa0]\n  7172: u8 [a0 + 0x9] = a1\n  7175: a1 = u64 [sp + 0xa8]\n  7179: u8 [a0 + 0x8] = a1\n  7182: a1 = u64 [sp + 0xb0]\n  7186: u8 [a0 + 0x7] = a1\n  7189: a1 = u64 [sp + 0xb8]\n  7193: u8 [a0 + 0x6] = a1\n  7196: a1 = u64 [sp + 0xc0]\n  7200: u8 [a0 + 0x5] = a1\n  7203: a1 = u64 [sp + 0xc8]\n  7207: u8 [a0 + 0x4] = a1\n  7210: a1 = u64 [sp + 0xd0]\n  7214: u8 [a0 + 0x3] = a1\n  7217: a1 = u64 [sp + 0xd8]\n  7221: u8 [a0 + 0x2] = a1\n  7224: a1 = u64 [sp + 0xe0]\n  7228: u8 [a0 + 0x1] = a1\n  7231: s0 = 0xffffffc0\n  7241: a1 = u64 [sp + 0x118]\n  7245: a1 = a1 <u s0\n  7248: a2 = u64 [sp + 0x120]\n  7252: a1 = 0 if a2 != 0\n  7254: a2 = u64 [sp + 0xf0]\n  7258: a1 = 0 if a2 != 0\n  7260: a2 = u64 [sp + 0xe8]\n  7264: u8 [a0] = a2\n  7266: jump @151 if a1 == 0\n      : @143 (gas: 4)\n  7270: a0 = u64 [sp + 0x108]\n  7274: i32 a0 = a0 + 0x40\n  7277: a1 = 0x20\n  7280: ra = 116, jump @0\n      : @144 [@dyn 58] (gas: 7)\n  7285: a1 = u64 [sp + 0x128]\n  7289: a1 = a1 <u s0\n  7292: a2 = u64 [sp + 0x110]\n  7296: a1 = 0 if a2 != 0\n  7298: a2 = u64 [sp + 0xf8]\n  7302: a1 = 0 if a2 != 0\n  7304: jump @151 if a1 == 0\n      : @145 (gas: 66)\n  7308: a1 = u8 [a0]\n  7310: u64 [sp + 0xe8] = a1\n  7314: a1 = u8 [a0 + 0x1]\n  7317: u64 [sp + 0xe0] = a1\n  7321: a1 = u8 [a0 + 0x2]\n  7324: u64 [sp + 0xd8] = a1\n  7328: a1 = u8 [a0 + 0x3]\n  7331: u64 [sp + 0xd0] = a1\n  7335: a1 = u8 [a0 + 0x4]\n  7338: u64 [sp + 0xc8] = a1\n  7342: a1 = u8 [a0 + 0x5]\n  7345: u64 [sp + 0xc0] = a1\n  7349: a1 = u8 [a0 + 0x6]\n  7352: u64 [sp + 0xb8] = a1\n  7356: a1 = u8 [a0 + 0x7]\n  7359: u64 [sp + 0xb0] = a1\n  7363: a1 = u8 [a0 + 0x8]\n  7366: u64 [sp + 0xa8] = a1\n  7370: a1 = u8 [a0 + 0x9]\n  7373: u64 [sp + 0xa0] = a1\n  7377: a1 = u8 [a0 + 0xa]\n  7380: u64 [sp + 0x98] = a1\n  7384: a1 = u8 [a0 + 0xb]\n  7387: u64 [sp + 0x90] = a1\n  7391: a1 = u8 [a0 + 0xc]\n  7394: u64 [sp + 0x88] = a1\n  7398: a1 = u8 [a0 + 0xd]\n  7401: u64 [sp + 0x80] = a1\n  7405: a1 = u8 [a0 + 0xe]\n  7408: u64 [sp + 0x78] = a1\n  7411: a1 = u8 [a0 + 0xf]\n  7414: u64 [sp + 0x70] = a1\n  7417: a1 = u8 [a0 + 0x10]\n  7420: u64 [sp + 0x68] = a1\n  7423: a1 = u8 [a0 + 0x11]\n  7426: u64 [sp + 0x60] = a1\n  7429: a1 = u8 [a0 + 0x12]\n  7432: u64 [sp + 0x58] = a1\n  7435: a1 = u8 [a0 + 0x13]\n  7438: u64 [sp + 0x50] = a1\n  7441: a1 = u8 [a0 + 0x14]\n  7444: u64 [sp + 0x48] = a1\n  7447: a1 = u8 [a0 + 0x15]\n  7450: u64 [sp + 0x40] = a1\n  7453: a1 = u8 [a0 + 0x16]\n  7456: u64 [sp + 0x38] = a1\n  7459: a1 = u8 [a0 + 0x17]\n  7462: u64 [sp + 0x30] = a1\n  7465: a1 = u8 [a0 + 0x18]\n  7468: u64 [sp + 0x28] = a1\n  7471: a1 = u8 [a0 + 0x19]\n  7474: u64 [sp + 0x20] = a1\n  7477: a1 = u8 [a0 + 0x1a]\n  7480: u64 [sp + 0x18] = a1\n  7483: a1 = u8 [a0 + 0x1b]\n  7486: u64 [sp + 0x10] = a1\n  7489: a1 = u8 [a0 + 0x1c]\n  7492: u64 [sp + 0x8] = a1\n  7495: a1 = u8 [a0 + 0x1d]\n  7498: u64 [sp] = a1\n  7500: s0 = u8 [a0 + 0x1e]\n  7503: s1 = u8 [a0 + 0x1f]\n  7506: a0 = u64 [sp + 0x100]\n  7510: i32 a0 = a0 + 0x40\n  7513: a1 = 0x20\n  7516: ra = 118, jump @0\n      : @146 [@dyn 59] (gas: 70)\n  7521: u8 [a0 + 0x1f] = s1\n  7524: u8 [a0 + 0x1e] = s0\n  7527: a1 = u64 [sp]\n  7529: u8 [a0 + 0x1d] = a1\n  7532: a1 = u64 [sp + 0x8]\n  7535: u8 [a0 + 0x1c] = a1\n  7538: a1 = u64 [sp + 0x10]\n  7541: u8 [a0 + 0x1b] = a1\n  7544: a1 = u64 [sp + 0x18]\n  7547: u8 [a0 + 0x1a] = a1\n  7550: a1 = u64 [sp + 0x20]\n  7553: u8 [a0 + 0x19] = a1\n  7556: a1 = u64 [sp + 0x28]\n  7559: u8 [a0 + 0x18] = a1\n  7562: a1 = u64 [sp + 0x30]\n  7565: u8 [a0 + 0x17] = a1\n  7568: a1 = u64 [sp + 0x38]\n  7571: u8 [a0 + 0x16] = a1\n  7574: a1 = u64 [sp + 0x40]\n  7577: u8 [a0 + 0x15] = a1\n  7580: a1 = u64 [sp + 0x48]\n  7583: u8 [a0 + 0x14] = a1\n  7586: a1 = u64 [sp + 0x50]\n  7589: u8 [a0 + 0x13] = a1\n  7592: a1 = u64 [sp + 0x58]\n  7595: u8 [a0 + 0x12] = a1\n  7598: a1 = u64 [sp + 0x60]\n  7601: u8 [a0 + 0x11] = a1\n  7604: a1 = u64 [sp + 0x68]\n  7607: u8 [a0 + 0x10] = a1\n  7610: a1 = u64 [sp + 0x70]\n  7613: u8 [a0 + 0xf] = a1\n  7616: a1 = u64 [sp + 0x78]\n  7619: u8 [a0 + 0xe] = a1\n  7622: a1 = u64 [sp + 0x80]\n  7626: u8 [a0 + 0xd] = a1\n  7629: a1 = u64 [sp + 0x88]\n  7633: u8 [a0 + 0xc] = a1\n  7636: a1 = u64 [sp + 0x90]\n  7640: u8 [a0 + 0xb] = a1\n  7643: a1 = u64 [sp + 0x98]\n  7647: u8 [a0 + 0xa] = a1\n  7650: a1 = u64 [sp + 0xa0]\n  7654: u8 [a0 + 0x9] = a1\n  7657: a1 = u64 [sp + 0xa8]\n  7661: u8 [a0 + 0x8] = a1\n  7664: a1 = u64 [sp + 0xb0]\n  7668: u8 [a0 + 0x7] = a1\n  7671: a1 = u64 [sp + 0xb8]\n  7675: u8 [a0 + 0x6] = a1\n  7678: a1 = u64 [sp + 0xc0]\n  7682: u8 [a0 + 0x5] = a1\n  7685: a1 = u64 [sp + 0xc8]\n  7689: u8 [a0 + 0x4] = a1\n  7692: a1 = u64 [sp + 0xd0]\n  7696: u8 [a0 + 0x3] = a1\n  7699: a1 = u64 [sp + 0xd8]\n  7703: u8 [a0 + 0x2] = a1\n  7706: a1 = u64 [sp + 0xe0]\n  7710: u8 [a0 + 0x1] = a1\n  7713: s0 = 0xffffffa0\n  7723: a1 = u64 [sp + 0x118]\n  7727: a1 = a1 <u s0\n  7730: a2 = u64 [sp + 0x120]\n  7734: a1 = 0 if a2 != 0\n  7736: a2 = u64 [sp + 0xf0]\n  7740: a1 = 0 if a2 != 0\n  7742: a2 = u64 [sp + 0xe8]\n  7746: u8 [a0] = a2\n  7748: jump @151 if a1 == 0\n      : @147 (gas: 4)\n  7752: a0 = u64 [sp + 0x108]\n  7756: i32 a0 = a0 + 0x60\n  7759: a1 = 0x20\n  7762: ra = 120, jump @0\n      : @148 [@dyn 60] (gas: 7)\n  7767: a1 = u64 [sp + 0x128]\n  7771: a1 = a1 <u s0\n  7774: a2 = u64 [sp + 0x110]\n  7778: a1 = 0 if a2 != 0\n  7780: a2 = u64 [sp + 0xf8]\n  7784: a1 = 0 if a2 != 0\n  7786: jump @151 if a1 == 0\n      : @149 (gas: 94)\n  7790: a1 = u8 [a0 + 0x1d]\n  7793: a2 = u8 [a0 + 0x1c]\n  7796: a3 = u8 [a0 + 0x1e]\n  7799: a4 = u8 [a0 + 0x1f]\n  7802: a1 = a1 << 0x8\n  7805: a1 = a1 | a2\n  7808: a3 = a3 << 0x10\n  7811: a4 = a4 << 0x18\n  7814: a3 = a3 | a4\n  7817: a1 = a1 | a3\n  7820: a2 = u8 [a0 + 0xd]\n  7823: a3 = u8 [a0 + 0xc]\n  7826: a4 = u8 [a0 + 0xe]\n  7829: a5 = u8 [a0 + 0xf]\n  7832: a2 = a2 << 0x8\n  7835: a2 = a2 | a3\n  7838: a4 = a4 << 0x10\n  7841: a5 = a5 << 0x18\n  7844: a4 = a4 | a5\n  7847: a2 = a2 | a4\n  7850: a1 = a1 | a2\n  7853: a1 = a1 << 0x20\n  7856: a2 = u8 [a0 + 0x9]\n  7859: a3 = u8 [a0 + 0x8]\n  7862: a4 = u8 [a0 + 0xa]\n  7865: a5 = u8 [a0 + 0xb]\n  7868: a2 = a2 << 0x8\n  7871: a2 = a2 | a3\n  7874: a4 = a4 << 0x10\n  7877: a5 = a5 << 0x18\n  7880: a4 = a4 | a5\n  7883: a2 = a2 | a4\n  7886: a3 = u8 [a0 + 0x19]\n  7889: a4 = u8 [a0 + 0x18]\n  7892: a5 = u8 [a0 + 0x1a]\n  7895: s1 = u8 [a0 + 0x1b]\n  7898: a3 = a3 << 0x8\n  7901: a3 = a3 | a4\n  7904: a5 = a5 << 0x10\n  7907: s1 = s1 << 0x18\n  7910: a5 = a5 | s1\n  7913: a3 = a3 | a5\n  7916: a2 = a2 | a3\n  7919: a1 = a1 | a2\n  7922: a2 = u8 [a0 + 0x15]\n  7925: a3 = u8 [a0 + 0x14]\n  7928: a4 = u8 [a0 + 0x16]\n  7931: a5 = u8 [a0 + 0x17]\n  7934: a2 = a2 << 0x8\n  7937: a2 = a2 | a3\n  7940: a4 = a4 << 0x10\n  7943: a5 = a5 << 0x18\n  7946: a4 = a4 | a5\n  7949: a2 = a2 | a4\n  7952: a3 = u8 [a0 + 0x5]\n  7955: a4 = u8 [a0 + 0x4]\n  7958: a5 = u8 [a0 + 0x6]\n  7961: s1 = u8 [a0 + 0x7]\n  7964: a3 = a3 << 0x8\n  7967: a3 = a3 | a4\n  7970: a5 = a5 << 0x10\n  7973: s1 = s1 << 0x18\n  7976: a5 = a5 | s1\n  7979: a3 = a3 | a5\n  7982: a2 = a2 | a3\n  7985: a3 = u8 [a0 + 0x1]\n  7988: a4 = u8 [a0]\n  7990: a5 = u8 [a0 + 0x2]\n  7993: s1 = u8 [a0 + 0x3]\n  7996: a3 = a3 << 0x8\n  7999: a3 = a3 | a4\n  8002: a5 = a5 << 0x10\n  8005: s1 = s1 << 0x18\n  8008: a4 = u8 [a0 + 0x11]\n  8011: a5 = a5 | s1\n  8014: a3 = a3 | a5\n  8017: a5 = u8 [a0 + 0x10]\n  8020: a4 = a4 << 0x8\n  8023: s1 = u8 [a0 + 0x12]\n  8026: a0 = u8 [a0 + 0x13]\n  8029: a4 = a4 | a5\n  8032: a2 = a2 << 0x20\n  8035: s1 = s1 << 0x10\n  8038: a0 = a0 << 0x18\n  8041: a0 = a0 | s1\n  8044: a0 = a0 | a4\n  8047: a0 = a0 | a3\n  8050: a0 = a0 | a2\n  8053: a0 = a0 | a1\n  8056: s0 = a0 >u 0\n  8058: a0 = u64 [sp + 0x100]\n  8062: i32 a0 = a0 + 0x60\n  8065: a1 = 0x20\n  8068: ra = 122, jump @0\n      : @150 [@dyn 61] (gas: 37)\n  8073: u8 [a0 + 30] = 0\n  8076: u8 [a0 + 29] = 0\n  8079: u8 [a0 + 28] = 0\n  8082: u8 [a0 + 27] = 0\n  8085: u8 [a0 + 26] = 0\n  8088: u8 [a0 + 25] = 0\n  8091: u8 [a0 + 24] = 0\n  8094: u8 [a0 + 23] = 0\n  8097: u8 [a0 + 22] = 0\n  8100: u8 [a0 + 21] = 0\n  8103: u8 [a0 + 20] = 0\n  8106: u8 [a0 + 19] = 0\n  8109: u8 [a0 + 18] = 0\n  8112: u8 [a0 + 17] = 0\n  8115: u8 [a0 + 16] = 0\n  8118: u8 [a0 + 15] = 0\n  8121: u8 [a0 + 14] = 0\n  8124: u8 [a0 + 13] = 0\n  8127: u8 [a0 + 12] = 0\n  8130: u8 [a0 + 11] = 0\n  8133: u8 [a0 + 10] = 0\n  8136: u8 [a0 + 9] = 0\n  8139: u8 [a0 + 8] = 0\n  8142: u8 [a0 + 7] = 0\n  8145: u8 [a0 + 6] = 0\n  8148: u8 [a0 + 5] = 0\n  8151: u8 [a0 + 4] = 0\n  8154: u8 [a0 + 3] = 0\n  8157: u8 [a0 + 2] = 0\n  8160: u8 [a0 + 1] = 0\n  8163: u8 [a0 + 0] = 0\n  8165: u8 [a0 + 0x1f] = s0\n  8168: ra = u64 [sp + 0x140]\n  8172: s0 = u64 [sp + 0x138]\n  8176: s1 = u64 [sp + 0x130]\n  8180: sp = sp + 0x148\n  8184: ret\n      : @151 (gas: 1)\n  8186: trap\n      : @152 (gas: 22)\n  8187: sp = sp + 0xffffffffffffff20\n  8191: u64 [sp + 0xd8] = ra\n  8195: u64 [sp + 0xd0] = s0\n  8199: u64 [sp + 0xc8] = s1\n  8203: s0 = sp + 0xe0\n  8207: sp = sp & 0xfffffffffffffff0\n  8210: a3 = u64 [a1 + 0x18]\n  8213: a4 = u64 [a1 + 0x10]\n  8216: a5 = u64 [a1 + 0x8]\n  8219: s1 = u64 [a1]\n  8221: u64 [sp + 0x78] = a3\n  8224: u64 [sp + 0x68] = a5\n  8227: a1 = a5 | a3\n  8230: a3 = s1 | a4\n  8233: a3 = a3 | a1\n  8236: a3 = a3 >> 0x20\n  8239: u64 [sp + 0x70] = a4\n  8242: a1 = a1 | a4\n  8245: a1 = a1 << 0x20\n  8248: a1 = a1 | a3\n  8251: u64 [sp + 0x10] = a0\n  8254: jump @167 if a1 != 0\n      : @153 (gas: 13)\n  8258: a0 = u64 [a2 + 0x18]\n  8261: u64 [sp + 0x60] = a0\n  8264: a0 = u64 [a2 + 0x10]\n  8267: u64 [sp + 0x48] = a0\n  8270: a0 = u64 [a2 + 0x8]\n  8273: u64 [sp + 0x40] = a0\n  8276: a0 = u64 [a2]\n  8278: u64 [sp + 0x50] = a0\n  8281: u64 [sp + 0x58] = s1\n  8284: i32 a0 = s1 + 0\n  8286: a1 = 0x20\n  8289: s1 = 0x20\n  8292: ra = 124, jump @0\n      : @154 [@dyn 62] (gas: 44)\n  8297: a3 = u64 [sp + 0x50]\n  8300: u8 [a0 + 0x1f] = s1\n  8303: a4 = u64 [sp + 0x48]\n  8306: a1 = a3 | a4\n  8309: a2 = u64 [sp + 0x60]\n  8312: a5 = u64 [sp + 0x40]\n  8315: a2 = a2 | a5\n  8318: a1 = a1 | a2\n  8321: a1 = a1 >> 0x20\n  8324: a2 = a2 | a4\n  8327: a2 = a2 << 0x20\n  8330: a1 = a1 | a2\n  8333: u8 [a0 + 30] = 0\n  8336: u8 [a0 + 29] = 0\n  8339: u8 [a0 + 28] = 0\n  8342: u8 [a0 + 27] = 0\n  8345: u8 [a0 + 26] = 0\n  8348: u8 [a0 + 25] = 0\n  8351: u8 [a0 + 24] = 0\n  8354: u8 [a0 + 23] = 0\n  8357: u8 [a0 + 22] = 0\n  8360: u8 [a0 + 21] = 0\n  8363: u8 [a0 + 20] = 0\n  8366: u8 [a0 + 19] = 0\n  8369: u8 [a0 + 18] = 0\n  8372: u8 [a0 + 17] = 0\n  8375: u8 [a0 + 16] = 0\n  8378: u8 [a0 + 15] = 0\n  8381: u8 [a0 + 14] = 0\n  8384: u8 [a0 + 13] = 0\n  8387: u8 [a0 + 12] = 0\n  8390: u8 [a0 + 11] = 0\n  8393: u8 [a0 + 10] = 0\n  8396: u8 [a0 + 9] = 0\n  8399: u8 [a0 + 8] = 0\n  8402: u8 [a0 + 7] = 0\n  8405: u8 [a0 + 6] = 0\n  8408: u8 [a0 + 5] = 0\n  8411: u8 [a0 + 4] = 0\n  8414: u8 [a0 + 3] = 0\n  8417: u8 [a0 + 2] = 0\n  8420: u8 [a0 + 1] = 0\n  8423: u8 [a0 + 0] = 0\n  8425: jump @167 if a1 != 0\n      : @155 (gas: 18)\n  8429: a0 = u64 [sp + 0x58]\n  8432: a1 = a0 + 0x20\n  8435: u64 [sp + 0x30] = a1\n  8438: a0 = a1 <u a0\n  8441: a1 = u64 [sp + 0x68]\n  8444: a2 = a1 + a0\n  8447: u64 [sp + 0x38] = a2\n  8450: a1 = a2 <u a1\n  8453: a1 = a0 if a0 == 0\n  8456: a0 = u64 [sp + 0x70]\n  8459: s1 = a0 + a1\n  8462: a0 = s1 <u a0\n  8465: a1 = u64 [sp + 0x78]\n  8468: a0 = a0 + a1\n  8471: u64 [sp + 0x28] = a0\n  8474: i32 a0 = a3 + 0\n  8476: a1 = 0x20\n  8479: ra = 126, jump @0\n      : @156 [@dyn 63] (gas: 11)\n  8484: t0 = u64 [sp + 0x30]\n  8487: a1 = t0 | s1\n  8490: a2 = u64 [sp + 0x38]\n  8493: a3 = u64 [sp + 0x28]\n  8496: a2 = a2 | a3\n  8499: a1 = a1 | a2\n  8502: a1 = a1 >> 0x20\n  8505: a2 = a2 | s1\n  8508: a2 = a2 << 0x20\n  8511: a1 = a1 | a2\n  8514: jump @167 if a1 != 0\n      : @157 (gas: 94)\n  8518: a1 = u8 [a0 + 0x19]\n  8521: a2 = u8 [a0 + 0x18]\n  8524: a3 = u8 [a0 + 0x1a]\n  8527: a4 = u8 [a0 + 0x1b]\n  8530: a1 = a1 << 0x8\n  8533: a1 = a1 | a2\n  8536: a3 = a3 << 0x10\n  8539: a4 = a4 << 0x18\n  8542: a3 = a3 | a4\n  8545: a1 = a1 | a3\n  8548: a2 = u8 [a0 + 0x1d]\n  8551: a3 = u8 [a0 + 0x1c]\n  8554: a4 = u8 [a0 + 0x1e]\n  8557: a5 = u8 [a0 + 0x1f]\n  8560: a2 = a2 << 0x8\n  8563: a2 = a2 | a3\n  8566: a4 = a4 << 0x10\n  8569: a5 = a5 << 0x18\n  8572: a4 = a4 | a5\n  8575: a2 = a2 | a4\n  8578: a2 = a2 << 0x20\n  8581: a1 = a1 | a2\n  8584: u64 [sp + 0x38] = a1\n  8587: a1 = u8 [a0 + 0x11]\n  8590: a2 = u8 [a0 + 0x10]\n  8593: a3 = u8 [a0 + 0x12]\n  8596: a4 = u8 [a0 + 0x13]\n  8599: a1 = a1 << 0x8\n  8602: a1 = a1 | a2\n  8605: a3 = a3 << 0x10\n  8608: a4 = a4 << 0x18\n  8611: a3 = a3 | a4\n  8614: a1 = a1 | a3\n  8617: a2 = u8 [a0 + 0x15]\n  8620: a3 = u8 [a0 + 0x14]\n  8623: a4 = u8 [a0 + 0x16]\n  8626: a5 = u8 [a0 + 0x17]\n  8629: a2 = a2 << 0x8\n  8632: a2 = a2 | a3\n  8635: a4 = a4 << 0x10\n  8638: a5 = a5 << 0x18\n  8641: a4 = a4 | a5\n  8644: a2 = a2 | a4\n  8647: a2 = a2 << 0x20\n  8650: a1 = a1 | a2\n  8653: u64 [sp + 0x28] = a1\n  8656: a1 = u8 [a0 + 0x9]\n  8659: a2 = u8 [a0 + 0x8]\n  8662: a3 = u8 [a0 + 0xa]\n  8665: a4 = u8 [a0 + 0xb]\n  8668: a1 = a1 << 0x8\n  8671: a1 = a1 | a2\n  8674: a3 = a3 << 0x10\n  8677: a4 = a4 << 0x18\n  8680: a3 = a3 | a4\n  8683: a1 = a1 | a3\n  8686: a2 = u8 [a0 + 0xd]\n  8689: a3 = u8 [a0 + 0xc]\n  8692: a4 = u8 [a0 + 0xe]\n  8695: a5 = u8 [a0 + 0xf]\n  8698: a2 = a2 << 0x8\n  8701: a2 = a2 | a3\n  8704: a4 = a4 << 0x10\n  8707: a5 = a5 << 0x18\n  8710: a4 = a4 | a5\n  8713: a2 = a2 | a4\n  8716: a2 = a2 << 0x20\n  8719: a1 = a1 | a2\n  8722: u64 [sp + 0x20] = a1\n  8725: a1 = u8 [a0 + 0x1]\n  8728: a2 = u8 [a0]\n  8730: a3 = u8 [a0 + 0x2]\n  8733: a4 = u8 [a0 + 0x3]\n  8736: a1 = a1 << 0x8\n  8739: a1 = a1 | a2\n  8742: a3 = a3 << 0x10\n  8745: a4 = a4 << 0x18\n  8748: a3 = a3 | a4\n  8751: a1 = a1 | a3\n  8754: a2 = u8 [a0 + 0x5]\n  8757: a3 = u8 [a0 + 0x4]\n  8760: a4 = u8 [a0 + 0x6]\n  8763: a0 = u8 [a0 + 0x7]\n  8766: a2 = a2 << 0x8\n  8769: a2 = a2 | a3\n  8772: a4 = a4 << 0x10\n  8775: a0 = a0 << 0x18\n  8778: a0 = a0 | a4\n  8781: a0 = a0 | a2\n  8784: a0 = a0 << 0x20\n  8787: s1 = a0 | a1\n  8790: i32 a0 = t0 + 0\n  8792: a1 = 0x20\n  8795: ra = 128, jump @0\n      : @158 [@dyn 64] (gas: 81)\n  8801: a3 = s1\n  8803: s1 = u64 [sp + 0x20]\n  8806: a4 = u64 [sp + 0x28]\n  8809: t2 = u64 [sp + 0x38]\n  8812: u8 [a0 + 0x10] = a4\n  8815: a1 = s1 >> 0x38\n  8818: u8 [a0 + 0xf] = a1\n  8821: a1 = s1 >> 0x30\n  8824: u8 [a0 + 0xe] = a1\n  8827: a1 = s1 >> 0x28\n  8830: u8 [a0 + 0xd] = a1\n  8833: a1 = s1 >> 0x20\n  8836: u8 [a0 + 0xc] = a1\n  8839: a1 = s1 >> 0x18\n  8842: u8 [a0 + 0xb] = a1\n  8845: a1 = s1 >> 0x10\n  8848: u8 [a0 + 0xa] = a1\n  8851: a1 = s1 >> 0x8\n  8854: u8 [a0 + 0x9] = a1\n  8857: u8 [a0 + 0x8] = s1\n  8860: a1 = a3 >> 0x38\n  8863: u8 [a0 + 0x7] = a1\n  8866: a1 = a3 >> 0x30\n  8869: u8 [a0 + 0x6] = a1\n  8872: a1 = a3 >> 0x28\n  8875: u8 [a0 + 0x5] = a1\n  8878: a1 = a3 >> 0x20\n  8881: u8 [a0 + 0x4] = a1\n  8884: a1 = a3 >> 0x18\n  8887: u8 [a0 + 0x3] = a1\n  8890: a1 = a3 >> 0x10\n  8893: u8 [a0 + 0x2] = a1\n  8896: a1 = a3 >> 0x8\n  8899: u8 [a0 + 0x1] = a1\n  8902: u8 [a0] = a3\n  8904: u8 [a0 + 0x18] = t2\n  8907: a1 = a4 >> 0x38\n  8910: u8 [a0 + 0x17] = a1\n  8913: a1 = a4 >> 0x30\n  8916: u8 [a0 + 0x16] = a1\n  8919: a1 = a4 >> 0x28\n  8922: u8 [a0 + 0x15] = a1\n  8925: a1 = a4 >> 0x20\n  8928: u8 [a0 + 0x14] = a1\n  8931: a1 = a4 >> 0x18\n  8934: u8 [a0 + 0x13] = a1\n  8937: a1 = a4 >> 0x10\n  8940: u8 [a0 + 0x12] = a1\n  8943: a1 = a4 >> 0x8\n  8946: u8 [a0 + 0x11] = a1\n  8949: a1 = t2 >> 0x38\n  8952: u8 [a0 + 0x1f] = a1\n  8955: a1 = t2 >> 0x30\n  8958: u8 [a0 + 0x1e] = a1\n  8961: a1 = t2 >> 0x28\n  8964: u8 [a0 + 0x1d] = a1\n  8967: a1 = t2 >> 0x20\n  8970: u8 [a0 + 0x1c] = a1\n  8973: a1 = t2 >> 0x18\n  8976: u8 [a0 + 0x1b] = a1\n  8979: a1 = t2 >> 0x10\n  8982: u8 [a0 + 0x1a] = a1\n  8985: a1 = t2 >> 0x8\n  8988: u8 [a0 + 0x19] = a1\n  8991: a0 = u64 [sp + 0x58]\n  8994: t0 = a0 + 0x40\n  8997: a0 = t0 <u a0\n  9000: a1 = u64 [sp + 0x68]\n  9003: t1 = a1 + a0\n  9006: a1 = t1 <u a1\n  9009: a1 = a0 if a0 == 0\n  9012: a0 = a3 | a4\n  9015: a2 = s1 | t2\n  9018: a0 = a0 | a2\n  9021: a5 = u64 [sp + 0x70]\n  9024: a2 = a5 + a1\n  9027: a1 = a2 <u a5\n  9030: a5 = u64 [sp + 0x78]\n  9033: a1 = a1 + a5\n  9036: u64 [sp + 0x78] = a1\n  9039: jump @165 if a0 == 0\n      : @159 (gas: 162)\n  9043: u64 [sp + 0x68] = a2\n  9046: u64 [sp + 0x70] = t1\n  9049: u64 [sp + 0x58] = t0\n  9052: a5 = reverse a3\n  9054: a3 = reverse s1\n  9056: u64 [sp + 0x20] = a3\n  9059: a2 = reverse a4\n  9061: a0 = reverse t2\n  9063: t0 = 0x1\n  9066: a1 = a0\n  9068: a1 = t0 if a2 == 0\n  9071: a4 = maxu(a0, t0)\n  9074: a4 = a1 if a2 != 0\n  9077: a1 = a3 >u 0\n  9079: s1 = a5\n  9081: a5 = a5 >u 0\n  9083: a5 = a1 if s1 == 0\n  9086: u64 [sp + 0x30] = s1\n  9089: a0 = t0 if a5 == 0\n  9092: s1 = s1 | a3\n  9095: a0 = a4 if s1 == 0\n  9098: a1 = a2\n  9100: a1 = 0 if a5 == 0\n  9102: a1 = a2 if s1 == 0\n  9105: t2 = a1\n  9107: a1 = 0xffffffe0\n  9117: a3 = u64 [sp + 0x50]\n  9120: t0 = a1 <u a3\n  9123: a5 = a3\n  9125: a4 = u64 [sp + 0x40]\n  9128: a3 = a4 >u 0\n  9130: a3 = t0 if a4 == 0\n  9133: a2 = a4\n  9135: s1 = u64 [sp + 0x48]\n  9138: a4 = -s1\n  9140: ra = a4 - a3\n  9143: t1 = ra >u 0\n  9145: a3 = a4 <u a3\n  9148: a4 = s1 >u 0\n  9150: s1 = u64 [sp + 0x60]\n  9153: a4 = a4 + s1\n  9156: s1 = -a4\n  9158: s1 = s1 - a3\n  9161: a4 = s1 >u 0\n  9163: a4 = t1 if s1 == 0\n  9166: a5 = a1 - a5\n  9169: a3 = -a2\n  9171: a2 = a3 - t0\n  9174: u64 [sp + 0x38] = a1\n  9177: t1 = a1 <u a5\n  9180: a3 = a2 >u 0\n  9182: a3 = t1 if a2 == 0\n  9185: a1 = ra | s1\n  9188: a3 = a4 if a1 != 0\n  9191: a5 = 0 if a3 != 0\n  9193: a4 = a5 + 0x1f\n  9196: a1 = a4 <u a5\n  9199: a2 = 0 if a3 != 0\n  9201: a5 = a2 + a1\n  9204: t1 = a5 <u a2\n  9207: t1 = a1 if a1 == 0\n  9210: ra = 0 if a3 != 0\n  9212: a1 = ra + t1\n  9215: u64 [sp] = a1\n  9217: a1 = a1 << 0x3b\n  9220: a2 = a5 >> 0x5\n  9223: a2 = a2 | a1\n  9226: a5 = a5 << 0x3b\n  9229: a4 = a4 >> 0x5\n  9232: a5 = a5 | a4\n  9235: u64 [sp + 0x28] = a5\n  9238: a1 = a0 <u 0x1\n  9241: t0 = t2\n  9243: t2 = t2 - a1\n  9246: t1 = a0 + 0xffffffffffffffff\n  9249: a1 = a2\n  9251: u64 [sp + 0x18] = a2\n  9254: a2 = t2 ^ a2\n  9257: a1 = t2 <u a1\n  9260: a4 = t1 <u a5\n  9263: a4 = a1 if a2 != 0\n  9266: u64 [sp + 0x8] = a4\n  9269: a4 = u64 [sp + 0x20]\n  9272: a1 = a4\n  9274: a2 = u64 [sp + 0x30]\n  9277: a1 = 0 if a2 == 0\n  9279: a1 = a4 if a2 == 0\n  9282: a0 = a0 | t0\n  9285: a0 = a0 <u 0x1\n  9288: a4 = a1 <u a0\n  9291: t0 = a2 - a4\n  9294: a5 = a1 - a0\n  9297: s1 = 0 if a3 != 0\n  9299: a3 = u64 [sp]\n  9301: a0 = a3 <u ra\n  9304: ra = u64 [sp + 0x60]\n  9307: a0 = a0 + s1\n  9310: a3 = a3 >> 0x5\n  9313: a4 = a0 << 0x3b\n  9316: a3 = a3 | a4\n  9319: a2 = a0 >> 0x5\n  9322: a1 = a5 <u a3\n  9325: s1 = t0 ^ a2\n  9328: a4 = t0 <u a2\n  9331: a0 = t0\n  9333: a4 = a1 if s1 == 0\n  9336: a1 = a5 ^ a3\n  9339: a1 = a1 | s1\n  9342: t0 = u64 [sp + 0x40]\n  9345: s1 = u64 [sp + 0x8]\n  9348: a4 = s1 if a1 == 0\n  9351: a0 = a2 if a4 == 0\n  9354: u64 [sp + 0x30] = a0\n  9357: a5 = a3 if a4 == 0\n  9360: a0 = u64 [sp + 0x18]\n  9363: t2 = a0 if a4 == 0\n  9366: a0 = u64 [sp + 0x28]\n  9369: t1 = a0 if a4 == 0\n  9372: a0 = t1 >> 0x3b\n  9375: a1 = t2 << 0x5\n  9378: a0 = a0 | a1\n  9381: t1 = t1 << 0x5\n  9384: a0 = a0 + t0\n  9387: s1 = u64 [sp + 0x50]\n  9390: t1 = t1 + s1\n  9393: u64 [sp + 0x28] = t1\n  9396: a1 = t1 <u s1\n  9399: t1 = a0 + a1\n  9402: a3 = t1 ^ t0\n  9405: a4 = t1 <u t0\n  9408: a4 = a1 if a3 == 0\n  9411: a1 = t2 >> 0x3b\n  9414: a3 = a5 << 0x5\n  9417: a1 = a1 | a3\n  9420: a2 = a5 >> 0x3b\n  9423: t2 = u64 [sp + 0x30]\n  9426: t2 = t2 << 0x5\n  9429: a2 = t2 | a2\n  9432: a2 = a2 + ra\n  9435: a0 = u64 [sp + 0x48]\n  9438: a1 = a1 + a0\n  9441: a3 = a1 <u a0\n  9444: a2 = a2 + a3\n  9447: a4 = a4 + a1\n  9450: a1 = a4 <u a1\n  9453: a1 = a1 + a2\n  9456: a3 = u64 [sp + 0x28]\n  9459: a2 = a3 + 0x20\n  9462: u64 [sp + 0x30] = a2\n  9465: a2 = a2 <u a3\n  9468: a5 = a0\n  9470: a3 = s1\n  9472: a0 = t1 + a2\n  9475: u64 [sp + 0x28] = a0\n  9478: a0 = a0 <u t1\n  9481: a0 = a2 if a2 == 0\n  9484: a0 = a0 + a4\n  9487: u64 [sp + 0x20] = a0\n  9490: a0 = a0 <u a4\n  9493: a0 = a0 + a1\n  9496: u64 [sp + 0x18] = a0\n  9499: fallthrough\n      : @160 (gas: 6)\n  9500: a0 = a5 | ra\n  9503: a1 = u64 [sp + 0x38]\n  9506: a1 = a3 <u a1\n  9509: a1 = 0 if t0 != 0\n  9511: a1 = 0 if a0 != 0\n  9513: jump @167 if a1 == 0\n      : @161 (gas: 15)\n  9517: a0 = a3 + 0x20\n  9520: u64 [sp + 0x48] = a0\n  9523: a0 = a0 <u a3\n  9526: a1 = t0 + a0\n  9529: u64 [sp + 0x50] = a1\n  9532: s1 = a1 <u t0\n  9535: s1 = a0 if a0 == 0\n  9538: s1 = s1 + a5\n  9541: u64 [sp + 0x40] = s1\n  9544: a0 = s1 <u a5\n  9547: ra = ra + a0\n  9550: u64 [sp + 0x60] = ra\n  9553: i32 a0 = a3 + 0x20\n  9556: a1 = 0x20\n  9559: ra = 130, jump @0\n      : @162 [@dyn 65] (gas: 107)\n  9565: a1 = u8 [a0 + 0x1]\n  9568: a2 = u8 [a0]\n  9570: a3 = u8 [a0 + 0x2]\n  9573: a4 = u8 [a0 + 0x3]\n  9576: a1 = a1 << 0x8\n  9579: a1 = a1 | a2\n  9582: a3 = a3 << 0x10\n  9585: a4 = a4 << 0x18\n  9588: a3 = a3 | a4\n  9591: a1 = a1 | a3\n  9594: a2 = u8 [a0 + 0x5]\n  9597: a3 = u8 [a0 + 0x4]\n  9600: a4 = u8 [a0 + 0x6]\n  9603: a5 = u8 [a0 + 0x7]\n  9606: a2 = a2 << 0x8\n  9609: a2 = a2 | a3\n  9612: a4 = a4 << 0x10\n  9615: a5 = a5 << 0x18\n  9618: a4 = a4 | a5\n  9621: a2 = a2 | a4\n  9624: a2 = a2 << 0x20\n  9627: t0 = a2 | a1\n  9630: a2 = u8 [a0 + 0x9]\n  9633: a3 = u8 [a0 + 0x8]\n  9636: a4 = u8 [a0 + 0xa]\n  9639: a5 = u8 [a0 + 0xb]\n  9642: a2 = a2 << 0x8\n  9645: a2 = a2 | a3\n  9648: a4 = a4 << 0x10\n  9651: a5 = a5 << 0x18\n  9654: a4 = a4 | a5\n  9657: a2 = a2 | a4\n  9660: a3 = u8 [a0 + 0xd]\n  9663: a4 = u8 [a0 + 0xc]\n  9666: a5 = u8 [a0 + 0xe]\n  9669: a1 = u8 [a0 + 0xf]\n  9672: a3 = a3 << 0x8\n  9675: a3 = a3 | a4\n  9678: a5 = a5 << 0x10\n  9681: a1 = a1 << 0x18\n  9684: a1 = a1 | a5\n  9687: a1 = a1 | a3\n  9690: a1 = a1 << 0x20\n  9693: a2 = a2 | a1\n  9696: a1 = u8 [a0 + 0x11]\n  9699: a3 = u8 [a0 + 0x10]\n  9702: a4 = u8 [a0 + 0x12]\n  9705: a5 = u8 [a0 + 0x13]\n  9708: a1 = a1 << 0x8\n  9711: a1 = a1 | a3\n  9714: a4 = a4 << 0x10\n  9717: a5 = a5 << 0x18\n  9720: a4 = a4 | a5\n  9723: a1 = a1 | a4\n  9726: a3 = u8 [a0 + 0x15]\n  9729: a4 = u8 [a0 + 0x14]\n  9732: a5 = u8 [a0 + 0x16]\n  9735: s1 = u8 [a0 + 0x17]\n  9738: a3 = a3 << 0x8\n  9741: a3 = a3 | a4\n  9744: a5 = a5 << 0x10\n  9747: s1 = s1 << 0x18\n  9750: a5 = a5 | s1\n  9753: a3 = a3 | a5\n  9756: a3 = a3 << 0x20\n  9759: a3 = a3 | a1\n  9762: a1 = u8 [a0 + 0x19]\n  9765: a4 = u8 [a0 + 0x18]\n  9768: a5 = u8 [a0 + 0x1a]\n  9771: s1 = u8 [a0 + 0x1b]\n  9774: a1 = a1 << 0x8\n  9777: a1 = a1 | a4\n  9780: a5 = a5 << 0x10\n  9783: s1 = s1 << 0x18\n  9786: a5 = a5 | s1\n  9789: a1 = a1 | a5\n  9792: a4 = u8 [a0 + 0x1d]\n  9795: a5 = u8 [a0 + 0x1c]\n  9798: s1 = u8 [a0 + 0x1e]\n  9801: a0 = u8 [a0 + 0x1f]\n  9804: a4 = a4 << 0x8\n  9807: a4 = a4 | a5\n  9810: s1 = s1 << 0x10\n  9813: a0 = a0 << 0x18\n  9816: a0 = a0 | s1\n  9819: a0 = a0 | a4\n  9822: a0 = a0 << 0x20\n  9825: a0 = a0 | a1\n  9828: a4 = reverse a0\n  9830: a0 = reverse a3\n  9832: a1 = reverse a2\n  9834: a2 = reverse t0\n  9836: a3 = u64 [sp + 0x78]\n  9839: u64 [sp + 0x98] = a3\n  9843: a3 = u64 [sp + 0x68]\n  9846: u64 [sp + 0x90] = a3\n  9850: a3 = u64 [sp + 0x70]\n  9853: u64 [sp + 0x88] = a3\n  9857: s1 = u64 [sp + 0x58]\n  9860: u64 [sp + 0x80] = s1\n  9864: u64 [sp + 0xb8] = a2\n  9868: u64 [sp + 0xb0] = a1\n  9872: u64 [sp + 0xa8] = a0\n  9876: a0 = sp + 0xa0\n  9880: a1 = sp + 0x80\n  9884: u64 [sp + 0xa0] = a4\n  9888: ra = 132, jump @134\n      : @163 [@dyn 66] (gas: 33)\n  9894: ra = u64 [sp + 0x60]\n  9897: t2 = s1 + 0x80\n  9901: a2 = t2 <u s1\n  9904: a0 = u64 [sp + 0x70]\n  9907: a1 = a0 + a2\n  9910: a3 = a1 <u a0\n  9913: a3 = a2 if a2 == 0\n  9916: a0 = u64 [sp + 0x68]\n  9919: a2 = a0 + a3\n  9922: t0 = a2 <u a0\n  9925: a4 = u64 [sp + 0x20]\n  9928: a0 = u64 [sp + 0x40]\n  9931: a4 = a4 ^ a0\n  9934: a5 = u64 [sp + 0x30]\n  9937: a3 = u64 [sp + 0x48]\n  9940: a5 = a5 ^ a3\n  9943: t1 = a5 | a4\n  9946: a5 = u64 [sp + 0x18]\n  9949: a5 = ra ^ a5\n  9952: s1 = u64 [sp + 0x28]\n  9955: a4 = u64 [sp + 0x50]\n  9958: s1 = s1 ^ a4\n  9961: a5 = a5 | s1\n  9964: s1 = t1 | a5\n  9967: a5 = u64 [sp + 0x78]\n  9970: a5 = a5 + t0\n  9973: u64 [sp + 0x78] = a5\n  9976: t0 = a4\n  9978: a5 = a0\n  9980: u64 [sp + 0x58] = t2\n  9983: u64 [sp + 0x70] = a1\n  9986: u64 [sp + 0x68] = a2\n  9989: jump @160 if s1 != 0\n      : @164 (gas: 1)\n  9993: jump @166\n      : @165 (gas: 3)\n  9995: t2 = t0\n  9997: a1 = t1\n  9999: fallthrough\n      : @166 (gas: 12)\n 10000: a3 = u64 [sp + 0x10]\n 10003: u64 [a3] = t2\n 10005: u64 [a3 + 0x8] = a1\n 10008: u64 [a3 + 0x10] = a2\n 10011: a0 = u64 [sp + 0x78]\n 10014: u64 [a3 + 0x18] = a0\n 10017: sp = s0 + 0xffffffffffffff20\n 10021: ra = u64 [sp + 0xd8]\n 10025: s0 = u64 [sp + 0xd0]\n 10029: s1 = u64 [sp + 0xc8]\n 10033: sp = sp + 0xe0\n 10037: ret\n      : @167 (gas: 1)\n 10039: trap\n      : @168 (gas: 8)\n 10040: a0 = u64 [sp + 0xf0]\n 10044: a1 = u64 [sp + 0xf8]\n 10048: a2 = u64 [sp + 0xe8]\n 10052: a3 = u64 [sp + 0xe0]\n 10056: a1 = a1 | a2\n 10059: a0 = a0 | a3\n 10062: a0 = a0 | a1\n 10065: jump @176 if a0 != 0\n      : @169 (gas: 2)\n 10069: a0 = i32 [0x20004]\n 10074: jump @176 if a0 <=u 3\n      : @170 (gas: 52)\n 10079: u64 [sp + 184] = 0\n 10083: u64 [sp + 176] = 0\n 10087: u64 [sp + 160] = 0x1\n 10092: a0 = sp + 0xc0\n 10096: a1 = sp + 0xa0\n 10100: u64 [sp + 168] = 0\n 10104: ra = 0x86\n 10108: sp = sp + 0xfffffffffffffe40\n 10112: u64 [sp + 0x1b8] = ra\n 10116: u64 [sp + 0x1b0] = s0\n 10120: u64 [sp + 0x1a8] = s1\n 10124: s0 = sp + 0x1c0\n 10128: sp = sp & 0xffffffffffffffe0\n 10131: u64 [sp + 0x18] = a0\n 10134: a3 = u64 [a1 + 0x18]\n 10137: u64 [sp + 0x88] = a3\n 10141: a2 = u64 [a1 + 0x10]\n 10144: u64 [sp + 0x90] = a2\n 10148: a0 = u64 [a1 + 0x8]\n 10151: u64 [sp + 0x98] = a0\n 10155: s1 = u64 [a1]\n 10157: u64 [sp + 0x158] = a3\n 10161: u64 [sp + 0x150] = a2\n 10165: u64 [sp + 0x148] = a0\n 10169: u64 [sp + 0x140] = s1\n 10173: u64 [sp + 408] = 0\n 10177: u64 [sp + 400] = 0\n 10181: u64 [sp + 392] = 0\n 10185: u64 [sp + 384] = 0\n 10189: u32 [sp + 352] = 0x20\n 10194: i32 a1 = sp + 0x140\n 10198: i32 a3 = sp + 0x180\n 10202: i32 a4 = sp + 0x160\n 10206: a2 = 0xffffffffffffffff\n 10209: a0 = 0\n 10211: ecalli 4 // 'get_storage'\n 10213: a0 = u64 [sp + 0x198]\n 10217: u64 [sp + 0xb8] = a0\n 10221: a3 = u64 [sp + 0x190]\n 10225: u64 [sp + 0xa0] = a3\n 10229: a1 = u64 [sp + 0x188]\n 10233: u64 [sp + 0xb0] = a1\n 10237: a2 = u64 [sp + 0x180]\n 10241: u64 [sp + 0xa8] = a2\n 10245: u64 [sp + 0x118] = a0\n 10249: u64 [sp + 0x110] = a3\n 10253: u64 [sp + 0x108] = a1\n 10257: a0 = sp + 0x120\n 10261: a1 = sp + 0x100\n 10265: u64 [sp + 0x100] = a2\n 10269: ra = 0x178\n 10273: jump @397\n      : @171 [@dyn 67] (gas: 11)\n 10276: a0 = u64 [sp + 0xc0]\n 10280: u64 [sp + 0x38] = a0\n 10283: a0 = u64 [sp + 0xc8]\n 10287: u64 [sp + 0x30] = a0\n 10290: a0 = u64 [sp + 0xd0]\n 10294: u64 [sp + 0x28] = a0\n 10297: a0 = u64 [sp + 0xd8]\n 10301: u64 [sp + 0x20] = a0\n 10304: a0 = 0x40\n 10307: a1 = 0x20\n 10310: ra = 136, jump @0\n      : @172 [@dyn 68] (gas: 111)\n 10316: a1 = u8 [a0 + 0x1]\n 10319: a2 = u8 [a0]\n 10321: a3 = u8 [a0 + 0x2]\n 10324: a4 = u8 [a0 + 0x3]\n 10327: a1 = a1 << 0x8\n 10330: a1 = a1 | a2\n 10333: a3 = a3 << 0x10\n 10336: a4 = a4 << 0x18\n 10339: a3 = a3 | a4\n 10342: a1 = a1 | a3\n 10345: a2 = u8 [a0 + 0x5]\n 10348: a3 = u8 [a0 + 0x4]\n 10351: a4 = u8 [a0 + 0x6]\n 10354: a5 = u8 [a0 + 0x7]\n 10357: a2 = a2 << 0x8\n 10360: a2 = a2 | a3\n 10363: a4 = a4 << 0x10\n 10366: a5 = a5 << 0x18\n 10369: a4 = a4 | a5\n 10372: a2 = a2 | a4\n 10375: a2 = a2 << 0x20\n 10378: t0 = a2 | a1\n 10381: a2 = u8 [a0 + 0x9]\n 10384: a3 = u8 [a0 + 0x8]\n 10387: a4 = u8 [a0 + 0xa]\n 10390: a5 = u8 [a0 + 0xb]\n 10393: a2 = a2 << 0x8\n 10396: a2 = a2 | a3\n 10399: a4 = a4 << 0x10\n 10402: a5 = a5 << 0x18\n 10405: a4 = a4 | a5\n 10408: a2 = a2 | a4\n 10411: a3 = u8 [a0 + 0xd]\n 10414: a4 = u8 [a0 + 0xc]\n 10417: a5 = u8 [a0 + 0xe]\n 10420: s1 = u8 [a0 + 0xf]\n 10423: a3 = a3 << 0x8\n 10426: a3 = a3 | a4\n 10429: a5 = a5 << 0x10\n 10432: s1 = s1 << 0x18\n 10435: a5 = a5 | s1\n 10438: a3 = a3 | a5\n 10441: a3 = a3 << 0x20\n 10444: a2 = a2 | a3\n 10447: a3 = u8 [a0 + 0x11]\n 10450: a4 = u8 [a0 + 0x10]\n 10453: a5 = u8 [a0 + 0x12]\n 10456: s1 = u8 [a0 + 0x13]\n 10459: a3 = a3 << 0x8\n 10462: a3 = a3 | a4\n 10465: a5 = a5 << 0x10\n 10468: s1 = s1 << 0x18\n 10471: a5 = a5 | s1\n 10474: a3 = a3 | a5\n 10477: a4 = u8 [a0 + 0x15]\n 10480: a5 = u8 [a0 + 0x14]\n 10483: s1 = u8 [a0 + 0x16]\n 10486: a1 = u8 [a0 + 0x17]\n 10489: a4 = a4 << 0x8\n 10492: a4 = a4 | a5\n 10495: s1 = s1 << 0x10\n 10498: a1 = a1 << 0x18\n 10501: a1 = a1 | s1\n 10504: a1 = a1 | a4\n 10507: a1 = a1 << 0x20\n 10510: a3 = a3 | a1\n 10513: a1 = u8 [a0 + 0x19]\n 10516: a4 = u8 [a0 + 0x18]\n 10519: a5 = u8 [a0 + 0x1a]\n 10522: s1 = u8 [a0 + 0x1b]\n 10525: a1 = a1 << 0x8\n 10528: a1 = a1 | a4\n 10531: a5 = a5 << 0x10\n 10534: s1 = s1 << 0x18\n 10537: a5 = a5 | s1\n 10540: a1 = a1 | a5\n 10543: a4 = u8 [a0 + 0x1d]\n 10546: a5 = u8 [a0 + 0x1c]\n 10549: s1 = u8 [a0 + 0x1e]\n 10552: a0 = u8 [a0 + 0x1f]\n 10555: a4 = a4 << 0x8\n 10558: a4 = a4 | a5\n 10561: s1 = s1 << 0x10\n 10564: a0 = a0 << 0x18\n 10567: a0 = a0 | s1\n 10570: a0 = a0 | a4\n 10573: a0 = a0 << 0x20\n 10576: a0 = a0 | a1\n 10579: a4 = reverse a0\n 10581: u64 [sp + 0x8] = a4\n 10584: a3 = reverse a3\n 10586: u64 [sp + 0x10] = a3\n 10589: a1 = reverse a2\n 10591: u64 [sp + 0x18] = a1\n 10594: s1 = reverse t0\n 10596: a0 = u64 [sp + 0x20]\n 10599: u64 [sp + 0x58] = a0\n 10602: a0 = u64 [sp + 0x28]\n 10605: u64 [sp + 0x50] = a0\n 10608: a0 = u64 [sp + 0x30]\n 10611: u64 [sp + 0x48] = a0\n 10614: a0 = u64 [sp + 0x38]\n 10617: u64 [sp + 0x40] = a0\n 10620: u64 [sp + 0x78] = s1\n 10623: u64 [sp + 0x70] = a1\n 10626: u64 [sp + 0x68] = a3\n 10629: a0 = sp + 0x80\n 10633: a1 = sp + 0x60\n 10636: a2 = sp + 0x40\n 10639: u64 [sp + 0x60] = a4\n 10642: ra = 138, jump @152\n      : @173 [@dyn 69] (gas: 12)\n 10648: a4 = u64 [sp + 0x10]\n 10651: a2 = u64 [sp + 0x8]\n 10654: u64 [sp + 0x38] = s1\n 10657: a0 = a4 | s1\n 10660: s1 = u64 [sp + 0x18]\n 10663: a1 = a2 | s1\n 10666: a1 = a1 | a0\n 10669: a1 = a1 >> 0x20\n 10672: a0 = a0 | s1\n 10675: a0 = a0 << 0x20\n 10678: a0 = a0 | a1\n 10681: jump @175 if a0 != 0\n      : @174 (gas: 29)\n 10684: a0 = u64 [sp + 0x88]\n 10688: a1 = u64 [sp + 0x98]\n 10692: u64 [sp + 0x30] = a1\n 10695: t1 = u64 [sp + 0x80]\n 10699: a1 = u64 [sp + 0x90]\n 10703: t2 = a0 ^ a4\n 10706: a5 = a0 <u a4\n 10709: ra = t1 <u a2\n 10712: a5 = ra if t2 == 0\n 10715: a3 = a1 - s1\n 10718: t2 = a3 - a5\n 10721: t0 = a3 <u a5\n 10724: a3 = a1 <u s1\n 10727: a1 = u64 [sp + 0x38]\n 10730: a5 = u64 [sp + 0x30]\n 10733: a5 = a5 - a1\n 10736: a5 = a5 - a3\n 10739: a5 = a5 - t0\n 10742: a0 = a0 - a4\n 10745: a0 = a0 - ra\n 10748: s1 = t1 - a2\n 10751: a0 = a0 | a5\n 10754: a1 = s1 | t2\n 10757: a1 = a1 | a0\n 10760: a0 = a0 | t2\n 10763: a1 = a1 >> 0x20\n 10766: a0 = a0 << 0x20\n 10769: a0 = a0 | a1\n 10772: jump @178 if a0 == 0\n      : @175 (gas: 1)\n 10775: trap\n      : @176 (gas: 3)\n 10776: a0 = 0\n 10778: a1 = 0\n 10780: ra = 140, jump @0\n      : @177 [@dyn 70] (gas: 5)\n 10786: i32 a1 = a0 + 0\n 10788: a0 = 0x1\n 10791: a2 = 0\n 10793: ecalli 6 // 'seal_return'\n 10795: fallthrough\n      : @178 (gas: 4)\n 10796: i32 a0 = a2 + 0\n 10798: i32 s1 = s1 + 0\n 10800: a1 = s1\n 10802: ra = 142, jump @0\n      : @179 [@dyn 71] (gas: 6)\n 10808: i32 a1 = a0 + 0\n 10810: a0 = 0\n 10812: a2 = s1\n 10814: ra = 0x90\n 10818: ecalli 6 // 'seal_return'\n 10820: fallthrough\n      : @180 [@dyn 72] (gas: 52)\n 10821: sp = sp + 0xffffffffffffff80\n 10824: u64 [sp + 0x78] = ra\n 10827: u64 [sp + 0x70] = s0\n 10830: u64 [sp + 0x68] = s1\n 10833: s0 = sp + 0x80\n 10837: sp = sp & 0xffffffffffffffe0\n 10840: t2 = u64 [a1 + 0x10]\n 10843: a5 = u64 [a1 + 0x8]\n 10846: t0 = u64 [a2 + 0x8]\n 10849: s1 = u64 [a1]\n 10851: u64 [sp + 0x10] = s1\n 10854: a4 = u64 [a2]\n 10856: u64 [sp + 0x18] = a4\n 10859: ra = u64 [a2 + 0x10]\n 10862: a3 = t0 ^ a5\n 10865: u64 [sp + 0x38] = a3\n 10868: a3 = t0 <u a5\n 10871: a4 = a4 <u s1\n 10874: t1 = u64 [sp + 0x38]\n 10877: a3 = a4 if t1 == 0\n 10880: t1 = a4\n 10882: a1 = u64 [a1 + 0x18]\n 10885: u64 [sp + 0x38] = a1\n 10888: a1 = u64 [a2 + 0x18]\n 10891: u64 [sp + 0x20] = a1\n 10894: a1 = ra - t2\n 10897: a2 = a1 - a3\n 10900: u64 [sp + 0x28] = a2\n 10903: a2 = a1 <u a3\n 10906: u64 [sp + 0x30] = t2\n 10909: a3 = ra <u t2\n 10912: a1 = u64 [sp + 0x38]\n 10915: a4 = u64 [sp + 0x20]\n 10918: a1 = a4 - a1\n 10921: a1 = a1 - a3\n 10924: t2 = a1 - a2\n 10927: s1 = t0 - a5\n 10930: a2 = s1 - t1\n 10933: t0 = u64 [sp + 0x10]\n 10936: a1 = u64 [sp + 0x18]\n 10939: a3 = a1 - t0\n 10942: a4 = a2 >u 0\n 10944: a3 = a3 <u 0x20\n 10947: a3 = a3 ^ 0x1\n 10950: a3 = a4 if a2 != 0\n 10953: a2 = t2 >s 0\n 10955: a1 = u64 [sp + 0x28]\n 10958: a4 = a1 >u 0\n 10960: a4 = a2 if t2 != 0\n 10963: a1 = a1 | t2\n 10966: a3 = a4 if a1 != 0\n 10969: jump @184 if a3 == 0\n      : @181 (gas: 11)\n 10972: s1 = a0\n 10974: a2 = u64 [sp + 0x30]\n 10977: a0 = t0 | a2\n 10980: a1 = u64 [sp + 0x38]\n 10983: a1 = a1 | a5\n 10986: a0 = a0 | a1\n 10989: a0 = a0 >> 0x20\n 10992: a1 = a1 | a2\n 10995: a1 = a1 << 0x20\n 10998: a0 = a0 | a1\n 11001: jump @183 if a0 != 0\n      : @182 (gas: 17)\n 11004: i32 a1 = t0 + 0\n 11006: i32 a0 = sp + 0x40\n 11009: ecalli 1 // 'call_data_load'\n 11011: a0 = u64 [sp + 0x58]\n 11014: a1 = u64 [sp + 0x50]\n 11017: a2 = u64 [sp + 0x48]\n 11020: a3 = u64 [sp + 0x40]\n 11023: u64 [s1 + 0x18] = a0\n 11026: u64 [s1 + 0x10] = a1\n 11029: u64 [s1 + 0x8] = a2\n 11032: u64 [s1] = a3\n 11034: sp = s0 + 0xffffffffffffff80\n 11037: ra = u64 [sp + 0x78]\n 11040: s0 = u64 [sp + 0x70]\n 11043: s1 = u64 [sp + 0x68]\n 11046: sp = sp + 0x80\n 11050: ret\n      : @183 (gas: 1)\n 11052: trap\n      : @184 (gas: 3)\n 11053: a0 = 0\n 11055: a1 = 0\n 11057: ra = 146, jump @0\n      : @185 [@dyn 73] (gas: 6)\n 11063: i32 a1 = a0 + 0\n 11065: a0 = 0x1\n 11068: a2 = 0\n 11070: ra = 0x94\n 11074: ecalli 6 // 'seal_return'\n 11076: fallthrough\n      : @186 [@dyn 74] (gas: 12)\n 11077: sp = sp + 0xffffffffffffff80\n 11080: u64 [sp + 0x78] = ra\n 11083: u64 [sp + 0x70] = s0\n 11086: s0 = sp + 0x80\n 11090: sp = sp & 0xffffffffffffffe0\n 11093: u64 [sp + 56] = 0\n 11096: u64 [sp + 48] = 0\n 11099: u64 [sp + 40] = 0\n 11102: u64 [sp + 32] = 0\n 11105: i32 a0 = sp + 0x20\n 11108: ecalli 9 // 'value_transferred'\n 11110: fallthrough\n      : @187 (gas: 8)\n 11111: a0 = u64 [sp + 0x30]\n 11114: a1 = u64 [sp + 0x38]\n 11117: a2 = u64 [sp + 0x28]\n 11120: a3 = u64 [sp + 0x20]\n 11123: a1 = a1 | a2\n 11126: a0 = a0 | a3\n 11129: a0 = a0 | a1\n 11132: jump @193 if a0 != 0\n      : @188 (gas: 2)\n 11136: a0 = i32 [0x20004]\n 11141: jump @193 if a0 <=u 35\n      : @189 (gas: 42)\n 11146: i32 a0 = sp + 0x40\n 11149: a1 = 0x4\n 11152: ecalli 1 // 'call_data_load'\n 11154: a1 = u64 [sp + 0x40]\n 11157: a0 = u64 [sp + 0x48]\n 11160: a2 = u64 [sp + 0x50]\n 11163: a3 = u64 [sp + 0x58]\n 11166: u64 [sp + 0x18] = a3\n 11169: u64 [sp + 0x10] = a2\n 11172: u64 [sp + 0x8] = a0\n 11175: a0 = sp\n 11177: u64 [sp] = a1\n 11179: ra = 0x96\n 11183: sp = sp + 0xfffffffffffffa80\n 11187: u64 [sp + 0x578] = ra\n 11191: u64 [sp + 0x570] = s0\n 11195: u64 [sp + 0x568] = s1\n 11199: s0 = sp + 0x580\n 11203: sp = sp & 0xffffffffffffffe0\n 11206: a1 = u64 [a0]\n 11208: u64 [sp + 0xb0] = a1\n 11212: a1 = u64 [a0 + 0x8]\n 11215: u64 [sp + 0xa8] = a1\n 11219: a1 = u64 [a0 + 0x10]\n 11222: u64 [sp + 0xb8] = a1\n 11226: s1 = u64 [a0 + 0x18]\n 11229: u64 [sp + 1336] = 0\n 11233: u64 [sp + 1328] = 0\n 11237: u64 [sp + 1320] = 0\n 11241: u64 [sp + 1312] = 0x1\n 11246: u64 [sp + 1368] = 0\n 11250: u64 [sp + 1360] = 0\n 11254: u64 [sp + 1352] = 0\n 11258: u64 [sp + 1344] = 0\n 11262: u32 [sp + 1280] = 0x20\n 11267: i32 a1 = sp + 0x520\n 11271: i32 a3 = sp + 0x540\n 11275: i32 a4 = sp + 0x500\n 11279: a2 = 0xffffffffffffffff\n 11282: a0 = 0\n 11284: ecalli 4 // 'get_storage'\n 11286: jump @468\n      : @190 [@dyn 75] (gas: 3)\n 11289: a0 = 0x40\n 11292: a1 = 0x20\n 11295: ra = 152, jump @0\n      : @191 [@dyn 76] (gas: 100)\n 11301: a1 = u8 [a0 + 0x11]\n 11304: a2 = u8 [a0 + 0x10]\n 11307: a3 = u8 [a0 + 0x12]\n 11310: a4 = u8 [a0 + 0x13]\n 11313: a1 = a1 << 0x8\n 11316: a1 = a1 | a2\n 11319: a3 = a3 << 0x10\n 11322: a4 = a4 << 0x18\n 11325: a3 = a3 | a4\n 11328: a1 = a1 | a3\n 11331: a2 = u8 [a0 + 0x15]\n 11334: a3 = u8 [a0 + 0x14]\n 11337: a4 = u8 [a0 + 0x16]\n 11340: a5 = u8 [a0 + 0x17]\n 11343: a2 = a2 << 0x8\n 11346: a2 = a2 | a3\n 11349: a4 = a4 << 0x10\n 11352: a5 = a5 << 0x18\n 11355: a4 = a4 | a5\n 11358: a2 = a2 | a4\n 11361: a2 = a2 << 0x20\n 11364: t0 = a2 | a1\n 11367: a2 = u8 [a0 + 0x1]\n 11370: a3 = u8 [a0]\n 11372: a4 = u8 [a0 + 0x2]\n 11375: a5 = u8 [a0 + 0x3]\n 11378: a2 = a2 << 0x8\n 11381: a2 = a2 | a3\n 11384: a4 = a4 << 0x10\n 11387: a5 = a5 << 0x18\n 11390: a4 = a4 | a5\n 11393: a2 = a2 | a4\n 11396: a3 = u8 [a0 + 0x5]\n 11399: a4 = u8 [a0 + 0x4]\n 11402: a5 = u8 [a0 + 0x6]\n 11405: a1 = u8 [a0 + 0x7]\n 11408: a3 = a3 << 0x8\n 11411: a3 = a3 | a4\n 11414: a5 = a5 << 0x10\n 11417: a1 = a1 << 0x18\n 11420: a1 = a1 | a5\n 11423: a1 = a1 | a3\n 11426: a1 = a1 << 0x20\n 11429: t1 = a1 | a2\n 11432: a1 = u8 [a0 + 0x19]\n 11435: a3 = u8 [a0 + 0x18]\n 11438: a4 = u8 [a0 + 0x1a]\n 11441: a5 = u8 [a0 + 0x1b]\n 11444: a1 = a1 << 0x8\n 11447: a1 = a1 | a3\n 11450: a4 = a4 << 0x10\n 11453: a5 = a5 << 0x18\n 11456: a4 = a4 | a5\n 11459: a1 = a1 | a4\n 11462: a3 = u8 [a0 + 0x1d]\n 11465: a4 = u8 [a0 + 0x1c]\n 11468: a5 = u8 [a0 + 0x1e]\n 11471: a2 = u8 [a0 + 0x1f]\n 11474: a3 = a3 << 0x8\n 11477: a3 = a3 | a4\n 11480: a5 = a5 << 0x10\n 11483: a2 = a2 << 0x18\n 11486: a2 = a2 | a5\n 11489: a2 = a2 | a3\n 11492: a2 = a2 << 0x20\n 11495: a3 = a2 | a1\n 11498: a1 = u8 [a0 + 0x9]\n 11501: a2 = u8 [a0 + 0x8]\n 11504: a4 = u8 [a0 + 0xa]\n 11507: a5 = u8 [a0 + 0xb]\n 11510: a1 = a1 << 0x8\n 11513: a1 = a1 | a2\n 11516: a4 = a4 << 0x10\n 11519: a5 = a5 << 0x18\n 11522: a4 = a4 | a5\n 11525: a1 = a1 | a4\n 11528: a2 = u8 [a0 + 0xd]\n 11531: a4 = u8 [a0 + 0xc]\n 11534: a5 = u8 [a0 + 0xe]\n 11537: a0 = u8 [a0 + 0xf]\n 11540: a2 = a2 << 0x8\n 11543: a2 = a2 | a4\n 11546: a5 = a5 << 0x10\n 11549: a0 = a0 << 0x18\n 11552: a0 = a0 | a5\n 11555: a0 = a0 | a2\n 11558: a0 = a0 << 0x20\n 11561: a0 = a0 | a1\n 11564: a1 = reverse a0\n 11566: a0 = reverse a3\n 11568: a2 = reverse t1\n 11570: a3 = reverse t0\n 11572: a2 = a2 | a3\n 11575: a3 = a0 | a1\n 11578: a3 = a3 | a2\n 11581: a3 = a3 >> 0x20\n 11584: a1 = a1 | a2\n 11587: a1 = a1 << 0x20\n 11590: a1 = a1 | a3\n 11593: jump @195 if a1 == 0\n      : @192 (gas: 1)\n 11596: trap\n      : @193 (gas: 3)\n 11597: a0 = 0\n 11599: a1 = 0\n 11601: ra = 154, jump @0\n      : @194 [@dyn 77] (gas: 7)\n 11607: i32 a1 = a0 + 0\n 11609: a0 = 0x1\n 11612: a2 = 0\n 11614: ecalli 6 // 'seal_return'\n 11616: i32 a0 = a0 + 0\n 11618: ra = 0x9c\n 11622: jump @0\n      : @195 (gas: 2)\n 11625: i32 a0 = a0 + 0\n 11627: ra = 156, jump @0\n      : @196 [@dyn 78] (gas: 6)\n 11633: i32 a1 = a0 + 0\n 11635: a0 = 0\n 11637: a2 = 0\n 11639: ra = 0x9e\n 11643: ecalli 6 // 'seal_return'\n 11645: fallthrough\n      : @197 [@dyn 79] (gas: 40)\n 11646: sp = sp + 0xffffffffffffffa0\n 11649: u64 [sp + 0x58] = ra\n 11652: u64 [sp + 0x50] = s0\n 11655: u64 [sp + 0x48] = s1\n 11658: s0 = sp + 0x60\n 11661: sp = sp & 0xffffffffffffffe0\n 11664: s1 = a0\n 11666: a0 = u64 [a1 + 0x18]\n 11669: a2 = u64 [a1 + 0x10]\n 11672: a3 = u64 [a1 + 0x8]\n 11675: a1 = u64 [a1]\n 11677: u64 [sp + 0x18] = a0\n 11680: u64 [sp + 0x10] = a2\n 11683: u64 [sp + 0x8] = a3\n 11686: u64 [sp] = a1\n 11688: u64 [sp + 56] = 0\n 11691: u64 [sp + 48] = 0\n 11694: u64 [sp + 40] = 0\n 11697: u64 [sp + 32] = 0\n 11700: u32 [sp + 64] = 0x20\n 11704: i32 a1 = sp + 0\n 11706: i32 a3 = sp + 0x20\n 11709: i32 a4 = sp + 0x40\n 11712: a2 = 0xffffffffffffffff\n 11715: a0 = 0\n 11717: ecalli 4 // 'get_storage'\n 11719: a0 = u64 [sp + 0x38]\n 11722: a1 = u64 [sp + 0x30]\n 11725: a2 = u64 [sp + 0x28]\n 11728: a3 = u64 [sp + 0x20]\n 11731: u64 [s1 + 0x18] = a0\n 11734: u64 [s1 + 0x10] = a1\n 11737: u64 [s1 + 0x8] = a2\n 11740: u64 [s1] = a3\n 11742: sp = s0 + 0xffffffffffffffa0\n 11745: ra = u64 [sp + 0x58]\n 11748: s0 = u64 [sp + 0x50]\n 11751: s1 = u64 [sp + 0x48]\n 11754: sp = sp + 0x60\n 11757: ret\n      : @198 (gas: 38)\n 11759: sp = sp + 0xfffffffffffffee0\n 11763: u64 [sp + 0x118] = ra\n 11767: u64 [sp + 0x110] = s0\n 11771: u64 [sp + 0x108] = s1\n 11775: s0 = sp + 0x120\n 11779: sp = sp & 0xffffffffffffffe0\n 11782: u64 [sp + 0x40] = a0\n 11785: a0 = u64 [a2]\n 11787: u64 [sp + 0x50] = a0\n 11790: a0 = u64 [a2 + 0x8]\n 11793: u64 [sp + 0x58] = a0\n 11796: a0 = u64 [a2 + 0x10]\n 11799: u64 [sp + 0x48] = a0\n 11802: s1 = u64 [a2 + 0x18]\n 11805: a4 = u64 [a1 + 0x18]\n 11808: a3 = u64 [a1 + 0x10]\n 11811: a2 = u64 [a1 + 0x8]\n 11814: a0 = u64 [a1]\n 11816: u64 [sp + 0x18] = a4\n 11819: u64 [sp + 0xb8] = a4\n 11823: u64 [sp + 0x20] = a3\n 11826: u64 [sp + 0xb0] = a3\n 11830: u64 [sp + 0x28] = a2\n 11833: u64 [sp + 0xa8] = a2\n 11837: u64 [sp + 0x30] = a0\n 11840: u64 [sp + 0xa0] = a0\n 11844: u64 [sp + 248] = 0\n 11848: u64 [sp + 240] = 0\n 11852: u64 [sp + 232] = 0\n 11856: u64 [sp + 224] = 0\n 11860: u32 [sp + 192] = 0x20\n 11865: i32 a1 = sp + 0xa0\n 11869: i32 a3 = sp + 0xe0\n 11873: i32 a4 = sp + 0xc0\n 11877: a2 = 0xffffffffffffffff\n 11880: a0 = 0\n 11882: ecalli 4 // 'get_storage'\n 11884: fallthrough\n      : @199 (gas: 20)\n 11885: a0 = u64 [sp + 0xf8]\n 11889: t0 = u64 [sp + 0xe0]\n 11893: a2 = u64 [sp + 0xf0]\n 11897: a3 = u64 [sp + 0xe8]\n 11901: a4 = a0 ^ s1\n 11904: u64 [sp + 0x38] = s1\n 11907: a0 = s1 <u a0\n 11910: s1 = u64 [sp + 0x48]\n 11913: a5 = s1 <u a2\n 11916: a5 = a0 if a4 != 0\n 11919: a1 = u64 [sp + 0x58]\n 11922: a0 = a3 ^ a1\n 11925: a3 = a1 <u a3\n 11928: a1 = u64 [sp + 0x50]\n 11931: a1 = a1 <u t0\n 11934: a1 = a3 if a0 != 0\n 11937: a0 = a2 ^ s1\n 11940: a0 = a0 | a4\n 11943: a1 = a5 if a0 != 0\n 11946: jump @203 if a1 == 0\n      : @200 (gas: 3)\n 11950: a1 = 0x20\n 11953: a0 = 0\n 11955: ra = 160, jump @0\n      : @201 [@dyn 80] (gas: 71)\n 11961: a1 = u64 [sp + 0x18]\n 11964: a1 = reverse a1\n 11966: a2 = u64 [sp + 0x20]\n 11969: a2 = reverse a2\n 11971: a3 = u64 [sp + 0x28]\n 11974: a3 = reverse a3\n 11976: a4 = u64 [sp + 0x30]\n 11979: a4 = reverse a4\n 11981: a5 = a4 >> 0x38\n 11984: u8 [a0 + 0x1f] = a5\n 11987: a5 = a4 >> 0x30\n 11990: u8 [a0 + 0x1e] = a5\n 11993: a5 = a4 >> 0x28\n 11996: u8 [a0 + 0x1d] = a5\n 11999: a5 = a4 >> 0x20\n 12002: u8 [a0 + 0x1c] = a5\n 12005: a5 = a4 >> 0x18\n 12008: u8 [a0 + 0x1b] = a5\n 12011: a5 = a4 >> 0x10\n 12014: u8 [a0 + 0x1a] = a5\n 12017: a5 = a4 >> 0x8\n 12020: u8 [a0 + 0x19] = a5\n 12023: u8 [a0 + 0x18] = a4\n 12026: u8 [a0 + 0x10] = a3\n 12029: a4 = a3 >> 0x38\n 12032: u8 [a0 + 0x17] = a4\n 12035: a4 = a3 >> 0x30\n 12038: u8 [a0 + 0x16] = a4\n 12041: a4 = a3 >> 0x28\n 12044: u8 [a0 + 0x15] = a4\n 12047: a4 = a3 >> 0x20\n 12050: u8 [a0 + 0x14] = a4\n 12053: a4 = a3 >> 0x18\n 12056: u8 [a0 + 0x13] = a4\n 12059: a4 = a3 >> 0x10\n 12062: u8 [a0 + 0x12] = a4\n 12065: a3 = a3 >> 0x8\n 12068: u8 [a0 + 0x11] = a3\n 12071: u8 [a0 + 0x8] = a2\n 12074: a3 = a2 >> 0x38\n 12077: u8 [a0 + 0xf] = a3\n 12080: a3 = a2 >> 0x30\n 12083: u8 [a0 + 0xe] = a3\n 12086: a3 = a2 >> 0x28\n 12089: u8 [a0 + 0xd] = a3\n 12092: a3 = a2 >> 0x20\n 12095: u8 [a0 + 0xc] = a3\n 12098: a3 = a2 >> 0x18\n 12101: u8 [a0 + 0xb] = a3\n 12104: a3 = a2 >> 0x10\n 12107: u8 [a0 + 0xa] = a3\n 12110: a2 = a2 >> 0x8\n 12113: u8 [a0 + 0x9] = a2\n 12116: u8 [a0] = a1\n 12118: a2 = a1 >> 0x38\n 12121: u8 [a0 + 0x7] = a2\n 12124: a2 = a1 >> 0x30\n 12127: u8 [a0 + 0x6] = a2\n 12130: a2 = a1 >> 0x28\n 12133: u8 [a0 + 0x5] = a2\n 12136: a2 = a1 >> 0x20\n 12139: u8 [a0 + 0x4] = a2\n 12142: a2 = a1 >> 0x18\n 12145: u8 [a0 + 0x3] = a2\n 12148: a2 = a1 >> 0x10\n 12151: u8 [a0 + 0x2] = a2\n 12154: a1 = a1 >> 0x8\n 12157: u8 [a0 + 0x1] = a1\n 12160: a1 = 0x20\n 12163: a0 = 0\n 12165: ra = 162, jump @0\n      : @202 [@dyn 81] (gas: 55)\n 12171: i32 a0 = a0 + 0\n 12173: i32 a2 = sp + 0xe0\n 12177: a1 = 0x20\n 12180: ecalli 5 // 'hash_keccak_256'\n 12182: a0 = u64 [sp + 0xe0]\n 12186: a1 = u64 [sp + 0xe8]\n 12190: a2 = u64 [sp + 0xf8]\n 12194: a3 = u64 [sp + 0xf0]\n 12198: t0 = reverse a0\n 12200: a1 = reverse a1\n 12202: a2 = reverse a2\n 12204: a3 = reverse a3\n 12206: s1 = u64 [sp + 0x48]\n 12209: a4 = s1 >> 0x3e\n 12212: a5 = u64 [sp + 0x38]\n 12215: a5 = a5 << 0x2\n 12218: t1 = a5 | a4\n 12221: a5 = u64 [sp + 0x58]\n 12224: a4 = a5 >> 0x3e\n 12227: a0 = s1 << 0x2\n 12230: t2 = a0 | a4\n 12233: a4 = u64 [sp + 0x50]\n 12236: a0 = a4 >> 0x3e\n 12239: s1 = a5 << 0x2\n 12242: a5 = s1 | a0\n 12245: s1 = a4 << 0x2\n 12248: a5 = a5 + a3\n 12251: s1 = s1 + a2\n 12254: a2 = s1 <u a2\n 12257: a5 = a5 + a2\n 12260: a4 = a5 ^ a3\n 12263: a3 = a5 <u a3\n 12266: a3 = a2 if a4 == 0\n 12269: a0 = a1 + t2\n 12272: a3 = a3 + a0\n 12275: a2 = a3 <u a0\n 12278: t0 = t0 + t1\n 12281: a0 = a0 <u a1\n 12284: a0 = a0 + t0\n 12287: a0 = a0 + a2\n 12290: a1 = u64 [sp + 0x40]\n 12293: u64 [a1 + 56] = 0\n 12296: u64 [a1 + 48] = 0\n 12299: u64 [a1 + 40] = 0\n 12302: u64 [a1 + 32] = 0\n 12305: u64 [a1] = s1\n 12307: u64 [a1 + 0x8] = a5\n 12310: u64 [a1 + 0x10] = a3\n 12313: u64 [a1 + 0x18] = a0\n 12316: sp = s0 + 0xfffffffffffffee0\n 12320: ra = u64 [sp + 0x118]\n 12324: s0 = u64 [sp + 0x110]\n 12328: s1 = u64 [sp + 0x108]\n 12332: sp = sp + 0x120\n 12336: ret\n      : @203 (gas: 8)\n 12338: u64 [sp + 144] = 0\n 12342: u64 [sp + 136] = 0\n 12346: u64 [sp + 128] = 0\n 12350: a0 = 0x4e487b7100000000\n 12360: a1 = sp + 0x80\n 12364: u64 [sp + 0x98] = a0\n 12368: a0 = 0\n 12370: ra = 164, jump @8\n      : @204 [@dyn 82] (gas: 7)\n 12376: u64 [sp + 120] = 0\n 12379: u64 [sp + 112] = 0\n 12382: u64 [sp + 96] = 0x32\n 12386: a0 = 0x4\n 12389: a1 = sp + 0x60\n 12392: u64 [sp + 104] = 0\n 12395: ra = 166, jump @8\n      : @205 [@dyn 83] (gas: 3)\n 12401: a1 = 0x24\n 12404: a0 = 0\n 12406: ra = 168, jump @0\n      : @206 [@dyn 84] (gas: 6)\n 12412: i32 a1 = a0 + 0\n 12414: a0 = 0x1\n 12417: a2 = 0x24\n 12420: ra = 0xaa\n 12424: ecalli 6 // 'seal_return'\n 12426: fallthrough\n      : @207 [@dyn 85] (gas: 9)\n 12427: a2 = u64 [a1 + 0x18]\n 12430: a3 = u64 [a1 + 0x10]\n 12433: a4 = u64 [a1 + 0x8]\n 12436: a1 = u64 [a1]\n 12438: u64 [a0 + 0x18] = a2\n 12441: u64 [a0 + 0x10] = a3\n 12444: u64 [a0 + 0x8] = a4\n 12447: u64 [a0] = a1\n 12449: ret\n      : @208 (gas: 19)\n 12451: t1 = u64 [sp + 0x70]\n 12454: t0 = u64 [sp + 0x68]\n 12457: a0 = u64 [sp + 0x138]\n 12461: a1 = u64 [sp + 0x120]\n 12465: t2 = u64 [sp + 0x130]\n 12469: a3 = u64 [sp + 0x128]\n 12473: a4 = a0 ^ t0\n 12476: a0 = t0 <u a0\n 12479: a2 = u64 [sp + 0x78]\n 12482: a5 = a2 <u t2\n 12485: a5 = a0 if a4 != 0\n 12488: a0 = a3 ^ s1\n 12491: a3 = s1 <u a3\n 12494: a1 = t1 <u a1\n 12497: a1 = a3 if a0 != 0\n 12500: a0 = t2 ^ a2\n 12503: a0 = a0 | a4\n 12506: a1 = a5 if a0 != 0\n 12509: jump @211 if a1 == 0\n      : @209 (gas: 12)\n 12513: u64 [sp + 0x80] = t1\n 12517: u64 [sp + 184] = 0\n 12521: u64 [sp + 176] = 0\n 12525: u64 [sp + 168] = 0\n 12529: u64 [sp + 160] = 0x1\n 12534: u64 [sp + 0x88] = s1\n 12538: u64 [sp + 0x90] = a2\n 12542: a0 = sp + 0xc0\n 12546: a1 = sp + 0xa0\n 12550: a2 = sp + 0x80\n 12554: u64 [sp + 0x98] = t0\n 12558: ra = 172, jump @198\n      : @210 [@dyn 86] (gas: 157)\n 12564: a0 = u64 [sp + 0xd8]\n 12568: u64 [sp + 0x78] = a0\n 12571: a3 = u64 [sp + 0xd0]\n 12575: u64 [sp + 0x68] = a3\n 12578: a1 = u64 [sp + 0xc8]\n 12582: u64 [sp + 0x70] = a1\n 12585: s1 = u64 [sp + 0xc0]\n 12589: u64 [sp + 0x118] = a0\n 12593: u64 [sp + 0x110] = a3\n 12597: u64 [sp + 0x108] = a1\n 12601: u64 [sp + 0x100] = s1\n 12605: u64 [sp + 312] = 0\n 12609: u64 [sp + 304] = 0\n 12613: u64 [sp + 296] = 0\n 12617: u64 [sp + 288] = 0\n 12621: u32 [sp + 320] = 0x20\n 12626: i32 a1 = sp + 0x100\n 12630: i32 a3 = sp + 0x120\n 12634: i32 a4 = sp + 0x140\n 12638: a2 = 0xffffffffffffffff\n 12641: a0 = 0\n 12643: ecalli 4 // 'get_storage'\n 12645: a0 = s1 + 0x1\n 12648: a1 = a0 <u 0x1\n 12651: a2 = u64 [sp + 0x70]\n 12654: a1 = a1 + a2\n 12657: a2 = a0 | a1\n 12660: a2 = a2 <u 0x1\n 12663: a3 = u64 [sp + 0x68]\n 12666: a2 = a2 + a3\n 12669: a3 = a2 <u a3\n 12672: a4 = u64 [sp + 0x78]\n 12675: a3 = a3 + a4\n 12678: u64 [sp + 0x118] = a3\n 12682: u64 [sp + 0x110] = a2\n 12686: a2 = u64 [sp + 0x120]\n 12690: u64 [sp + 0x60] = a2\n 12693: u64 [sp + 0x108] = a1\n 12697: a1 = u64 [sp + 0x128]\n 12701: u64 [sp + 0x58] = a1\n 12704: u64 [sp + 0x100] = a0\n 12708: a0 = u32 [sp + 0x130]\n 12712: u64 [sp + 0x50] = a0\n 12715: u64 [sp + 312] = 0\n 12719: u64 [sp + 304] = 0\n 12723: u64 [sp + 296] = 0\n 12727: u64 [sp + 288] = 0\n 12731: u32 [sp + 320] = 0x20\n 12736: i32 a1 = sp + 0x100\n 12740: i32 a3 = sp + 0x120\n 12744: i32 a4 = sp + 0x140\n 12748: a2 = 0xffffffffffffffff\n 12751: a0 = 0\n 12753: ecalli 4 // 'get_storage'\n 12755: a0 = s1 + 0x2\n 12758: a1 = a0 <u s1\n 12761: a3 = u64 [sp + 0x70]\n 12764: a2 = a3 + a1\n 12767: a3 = a2 <u a3\n 12770: a3 = a1 if a1 == 0\n 12773: a1 = u64 [sp + 0x68]\n 12776: a3 = a3 + a1\n 12779: a1 = a3 <u a1\n 12782: a4 = u64 [sp + 0x78]\n 12785: a1 = a1 + a4\n 12788: u64 [sp + 0x118] = a1\n 12792: a1 = u64 [sp + 0x120]\n 12796: u64 [sp + 0x48] = a1\n 12799: u64 [sp + 0x110] = a3\n 12803: a1 = u64 [sp + 0x128]\n 12807: u64 [sp + 0x40] = a1\n 12810: u64 [sp + 0x108] = a2\n 12814: a1 = u64 [sp + 0x130]\n 12818: u64 [sp + 0x38] = a1\n 12821: u64 [sp + 0x100] = a0\n 12825: a0 = u64 [sp + 0x138]\n 12829: u64 [sp + 0x30] = a0\n 12832: u64 [sp + 312] = 0\n 12836: u64 [sp + 304] = 0\n 12840: u64 [sp + 296] = 0\n 12844: u64 [sp + 288] = 0\n 12848: u32 [sp + 320] = 0x20\n 12853: i32 a1 = sp + 0x100\n 12857: i32 a3 = sp + 0x120\n 12861: i32 a4 = sp + 0x140\n 12865: a2 = 0xffffffffffffffff\n 12868: a0 = 0\n 12870: ecalli 4 // 'get_storage'\n 12872: a0 = u64 [sp + 0x120]\n 12876: u64 [sp + 0x10] = a0\n 12879: a0 = u64 [sp + 0x128]\n 12883: u64 [sp + 0x20] = a0\n 12886: a0 = u64 [sp + 0x130]\n 12890: u64 [sp + 0x18] = a0\n 12893: a0 = u64 [sp + 0x138]\n 12897: u64 [sp + 0x8] = a0\n 12900: a0 = s1 + 0x3\n 12903: a1 = a0 <u s1\n 12906: a3 = u64 [sp + 0x70]\n 12909: a2 = a3 + a1\n 12912: a3 = a2 <u a3\n 12915: a3 = a1 if a1 == 0\n 12918: a1 = u64 [sp + 0x68]\n 12921: a3 = a3 + a1\n 12924: a1 = a3 <u a1\n 12927: a4 = u64 [sp + 0x78]\n 12930: a1 = a1 + a4\n 12933: u64 [sp + 0x118] = a1\n 12937: u64 [sp + 0x110] = a3\n 12941: u64 [sp + 0x108] = a2\n 12945: u64 [sp + 0x100] = a0\n 12949: u64 [sp + 312] = 0\n 12953: u64 [sp + 304] = 0\n 12957: u64 [sp + 296] = 0\n 12961: u64 [sp + 288] = 0\n 12965: u32 [sp + 320] = 0x20\n 12970: i32 a1 = sp + 0x100\n 12974: i32 a3 = sp + 0x120\n 12978: i32 a4 = sp + 0x140\n 12982: a2 = 0xffffffffffffffff\n 12985: a0 = 0\n 12987: ecalli 4 // 'get_storage'\n 12989: a0 = u8 [sp + 0x120]\n 12993: a1 = u64 [sp + 0x28]\n 12996: u64 [a1 + 0x60] = a0\n 12999: a0 = u64 [sp + 0x8]\n 13002: u64 [a1 + 0x58] = a0\n 13005: a0 = u64 [sp + 0x18]\n 13008: u64 [a1 + 0x50] = a0\n 13011: a0 = u64 [sp + 0x20]\n 13014: u64 [a1 + 0x48] = a0\n 13017: a0 = u64 [sp + 0x10]\n 13020: u64 [a1 + 0x40] = a0\n 13023: a0 = u64 [sp + 0x30]\n 13026: u64 [a1 + 0x38] = a0\n 13029: a0 = u64 [sp + 0x38]\n 13032: u64 [a1 + 0x30] = a0\n 13035: a0 = u64 [sp + 0x40]\n 13038: u64 [a1 + 0x28] = a0\n 13041: a0 = u64 [sp + 0x48]\n 13044: u64 [a1 + 0x20] = a0\n 13047: a0 = u64 [sp + 0x50]\n 13050: u64 [a1 + 0x10] = a0\n 13053: a0 = u64 [sp + 0x58]\n 13056: u64 [a1 + 0x8] = a0\n 13059: a0 = u64 [sp + 0x60]\n 13062: u64 [a1] = a0\n 13064: u64 [a1 + 120] = 0\n 13067: u64 [a1 + 112] = 0\n 13070: u64 [a1 + 104] = 0\n 13073: u64 [a1 + 24] = 0\n 13076: sp = s0 + 0xfffffffffffffea0\n 13080: ra = u64 [sp + 0x158]\n 13084: s0 = u64 [sp + 0x150]\n 13088: s1 = u64 [sp + 0x148]\n 13092: sp = sp + 0x160\n 13096: ret\n      : @211 (gas: 2)\n 13098: a0 = 0\n 13100: ra = 174, jump @0\n      : @212 [@dyn 87] (gas: 6)\n 13106: i32 a1 = a0 + 0\n 13108: a0 = 0x1\n 13111: a2 = 0\n 13113: ra = 0xb0\n 13117: ecalli 6 // 'seal_return'\n 13119: fallthrough\n      : @213 [@dyn 88] (gas: 12)\n 13120: a2 = u64 [a1 + 0x10]\n 13123: a3 = u64 [a1 + 0x18]\n 13126: a4 = u64 [a1 + 0x8]\n 13129: a1 = u64 [a1]\n 13131: a3 = a3 | a4\n 13134: a4 = a1 | a2\n 13137: a4 = a4 | a3\n 13140: a4 = a4 >> 0x20\n 13143: a2 = a2 | a3\n 13146: a2 = a2 << 0x20\n 13149: a2 = a2 | a4\n 13152: jump @216 if a2 != 0\n      : @214 (gas: 13)\n 13156: sp = sp + 0xffffffffffffffe0\n 13159: u64 [sp + 0x18] = ra\n 13162: u64 [sp + 0x10] = s0\n 13165: u64 [sp + 0x8] = s1\n 13168: a2 = u64 [a0 + 0x10]\n 13171: a3 = u64 [a0 + 0x8]\n 13174: u64 [sp] = a3\n 13176: s1 = u64 [a0]\n 13178: a2 = a2 << 0x20\n 13181: s0 = a2 >> 0x20\n 13184: i32 a0 = a1 + 0\n 13186: a1 = 0x20\n 13189: ra = 178, jump @0\n      : @215 [@dyn 89] (gas: 59)\n 13195: a1 = reverse s0\n 13197: a2 = u64 [sp]\n 13199: a2 = reverse a2\n 13201: a3 = reverse s1\n 13203: a4 = a3 >> 0x38\n 13206: u8 [a0 + 0x1f] = a4\n 13209: a4 = a3 >> 0x30\n 13212: u8 [a0 + 0x1e] = a4\n 13215: a4 = a3 >> 0x28\n 13218: u8 [a0 + 0x1d] = a4\n 13221: a4 = a3 >> 0x20\n 13224: u8 [a0 + 0x1c] = a4\n 13227: a4 = a3 >> 0x18\n 13230: u8 [a0 + 0x1b] = a4\n 13233: a4 = a3 >> 0x10\n 13236: u8 [a0 + 0x1a] = a4\n 13239: a4 = a3 >> 0x8\n 13242: u8 [a0 + 0x19] = a4\n 13245: u8 [a0 + 0x18] = a3\n 13248: u8 [a0 + 0x10] = a2\n 13251: u8 [a0 + 11] = 0\n 13254: u8 [a0 + 10] = 0\n 13257: u8 [a0 + 9] = 0\n 13260: u8 [a0 + 7] = 0\n 13263: u8 [a0 + 6] = 0\n 13266: u8 [a0 + 5] = 0\n 13269: u8 [a0 + 4] = 0\n 13272: u8 [a0 + 3] = 0\n 13275: u8 [a0 + 2] = 0\n 13278: u8 [a0 + 1] = 0\n 13281: u8 [a0 + 0] = 0\n 13283: a3 = a2 >> 0x38\n 13286: u8 [a0 + 0x17] = a3\n 13289: a3 = a2 >> 0x30\n 13292: u8 [a0 + 0x16] = a3\n 13295: a3 = a2 >> 0x28\n 13298: u8 [a0 + 0x15] = a3\n 13301: a3 = a2 >> 0x20\n 13304: u8 [a0 + 0x14] = a3\n 13307: a3 = a2 >> 0x18\n 13310: u8 [a0 + 0x13] = a3\n 13313: a3 = a2 >> 0x10\n 13316: u8 [a0 + 0x12] = a3\n 13319: a2 = a2 >> 0x8\n 13322: u8 [a0 + 0x11] = a2\n 13325: u8 [a0 + 0x8] = a1\n 13328: a2 = a1 >> 0x38\n 13331: u8 [a0 + 0xf] = a2\n 13334: a2 = a1 >> 0x30\n 13337: u8 [a0 + 0xe] = a2\n 13340: a2 = a1 >> 0x28\n 13343: u8 [a0 + 0xd] = a2\n 13346: a1 = a1 >> 0x20\n 13349: u8 [a0 + 0xc] = a1\n 13352: ra = u64 [sp + 0x18]\n 13355: s0 = u64 [sp + 0x10]\n 13358: s1 = u64 [sp + 0x8]\n 13361: sp = sp + 0x20\n 13364: ret\n      : @216 (gas: 1)\n 13366: trap\n      : @217 (gas: 8)\n 13367: a0 = u64 [sp + 0x150]\n 13371: a1 = u64 [sp + 0x158]\n 13375: a2 = u64 [sp + 0x148]\n 13379: a3 = u64 [sp + 0x140]\n 13383: a1 = a1 | a2\n 13386: a0 = a0 | a3\n 13389: a0 = a0 | a1\n 13392: jump @229 if a0 != 0\n      : @218 (gas: 2)\n 13396: a0 = i32 [0x20004]\n 13401: jump @229 if a0 <=u 35\n      : @219 (gas: 44)\n 13406: i32 a0 = sp + 0x160\n 13410: a1 = 0x4\n 13413: ecalli 1 // 'call_data_load'\n 13415: a2 = u64 [sp + 0x160]\n 13419: a0 = u64 [sp + 0x168]\n 13423: a1 = u64 [sp + 0x170]\n 13427: a3 = u64 [sp + 0x178]\n 13431: u64 [sp + 0xb8] = a3\n 13435: u64 [sp + 0xb0] = a1\n 13439: u64 [sp + 0xa8] = a0\n 13443: a0 = sp + 0xc0\n 13447: a1 = sp + 0xa0\n 13451: u64 [sp + 0xa0] = a2\n 13455: ra = 0xb4\n 13459: sp = sp + 0xfffffffffffffea0\n 13463: u64 [sp + 0x158] = ra\n 13467: u64 [sp + 0x150] = s0\n 13471: u64 [sp + 0x148] = s1\n 13475: s0 = sp + 0x160\n 13479: sp = sp & 0xffffffffffffffe0\n 13482: u64 [sp + 0x28] = a0\n 13485: a0 = u64 [a1]\n 13487: u64 [sp + 0x70] = a0\n 13490: s1 = u64 [a1 + 0x8]\n 13493: a0 = u64 [a1 + 0x10]\n 13496: u64 [sp + 0x78] = a0\n 13499: a0 = u64 [a1 + 0x18]\n 13502: u64 [sp + 0x68] = a0\n 13505: u64 [sp + 280] = 0\n 13509: u64 [sp + 272] = 0\n 13513: u64 [sp + 264] = 0\n 13517: u64 [sp + 256] = 0x1\n 13522: u64 [sp + 312] = 0\n 13526: u64 [sp + 304] = 0\n 13530: u64 [sp + 296] = 0\n 13534: u64 [sp + 288] = 0\n 13538: u32 [sp + 320] = 0x20\n 13543: i32 a1 = sp + 0x100\n 13547: i32 a3 = sp + 0x120\n 13551: i32 a4 = sp + 0x140\n 13555: a2 = 0xffffffffffffffff\n 13558: a0 = 0\n 13560: ecalli 4 // 'get_storage'\n 13562: jump @208\n      : @220 [@dyn 90] (gas: 33)\n 13565: a0 = u64 [sp + 0x138]\n 13569: u64 [sp + 0x30] = a0\n 13572: a0 = u64 [sp + 0x130]\n 13576: u64 [sp + 0x20] = a0\n 13579: a0 = u64 [sp + 0x128]\n 13583: u64 [sp + 0x28] = a0\n 13586: a0 = u64 [sp + 0x120]\n 13590: u64 [sp + 0x18] = a0\n 13593: a0 = u64 [sp + 0x118]\n 13597: u64 [sp + 0x38] = a0\n 13600: a0 = u64 [sp + 0x110]\n 13604: u64 [sp + 0x40] = a0\n 13607: a0 = u64 [sp + 0x108]\n 13611: u64 [sp + 0x48] = a0\n 13614: a0 = u64 [sp + 0x100]\n 13618: u64 [sp + 0x50] = a0\n 13621: a0 = u64 [sp + 0xf8]\n 13625: u64 [sp + 0x58] = a0\n 13628: a0 = u64 [sp + 0xf0]\n 13632: u64 [sp + 0x60] = a0\n 13635: a0 = u64 [sp + 0xe8]\n 13639: u64 [sp + 0x68] = a0\n 13642: a0 = u64 [sp + 0xe0]\n 13646: u64 [sp + 0x70] = a0\n 13649: a0 = u64 [sp + 0xd0]\n 13653: u64 [sp + 0x88] = a0\n 13657: a0 = u64 [sp + 0xc8]\n 13661: u64 [sp + 0x90] = a0\n 13665: a0 = u64 [sp + 0xc0]\n 13669: u64 [sp + 0x98] = a0\n 13673: a0 = 0x40\n 13676: a1 = 0x20\n 13679: ra = 182, jump @0\n      : @221 [@dyn 91] (gas: 100)\n 13685: a1 = u8 [a0 + 0x11]\n 13688: a2 = u8 [a0 + 0x10]\n 13691: a3 = u8 [a0 + 0x12]\n 13694: a4 = u8 [a0 + 0x13]\n 13697: a1 = a1 << 0x8\n 13700: a1 = a1 | a2\n 13703: a3 = a3 << 0x10\n 13706: a4 = a4 << 0x18\n 13709: a3 = a3 | a4\n 13712: a1 = a1 | a3\n 13715: a2 = u8 [a0 + 0x15]\n 13718: a3 = u8 [a0 + 0x14]\n 13721: a4 = u8 [a0 + 0x16]\n 13724: a5 = u8 [a0 + 0x17]\n 13727: a2 = a2 << 0x8\n 13730: a2 = a2 | a3\n 13733: a4 = a4 << 0x10\n 13736: a5 = a5 << 0x18\n 13739: a4 = a4 | a5\n 13742: a2 = a2 | a4\n 13745: a2 = a2 << 0x20\n 13748: t0 = a2 | a1\n 13751: a2 = u8 [a0 + 0x1]\n 13754: a3 = u8 [a0]\n 13756: a4 = u8 [a0 + 0x2]\n 13759: a5 = u8 [a0 + 0x3]\n 13762: a2 = a2 << 0x8\n 13765: a2 = a2 | a3\n 13768: a4 = a4 << 0x10\n 13771: a5 = a5 << 0x18\n 13774: a4 = a4 | a5\n 13777: a2 = a2 | a4\n 13780: a3 = u8 [a0 + 0x5]\n 13783: a4 = u8 [a0 + 0x4]\n 13786: a5 = u8 [a0 + 0x6]\n 13789: s1 = u8 [a0 + 0x7]\n 13792: a3 = a3 << 0x8\n 13795: a3 = a3 | a4\n 13798: a5 = a5 << 0x10\n 13801: s1 = s1 << 0x18\n 13804: a5 = a5 | s1\n 13807: a3 = a3 | a5\n 13810: a3 = a3 << 0x20\n 13813: a2 = a2 | a3\n 13816: a3 = u8 [a0 + 0x19]\n 13819: a4 = u8 [a0 + 0x18]\n 13822: a5 = u8 [a0 + 0x1a]\n 13825: s1 = u8 [a0 + 0x1b]\n 13828: a3 = a3 << 0x8\n 13831: a3 = a3 | a4\n 13834: a5 = a5 << 0x10\n 13837: s1 = s1 << 0x18\n 13840: a5 = a5 | s1\n 13843: a3 = a3 | a5\n 13846: a4 = u8 [a0 + 0x1d]\n 13849: a5 = u8 [a0 + 0x1c]\n 13852: s1 = u8 [a0 + 0x1e]\n 13855: a1 = u8 [a0 + 0x1f]\n 13858: a4 = a4 << 0x8\n 13861: a4 = a4 | a5\n 13864: s1 = s1 << 0x10\n 13867: a1 = a1 << 0x18\n 13870: a1 = a1 | s1\n 13873: a1 = a1 | a4\n 13876: a1 = a1 << 0x20\n 13879: a3 = a3 | a1\n 13882: a1 = u8 [a0 + 0x9]\n 13885: a4 = u8 [a0 + 0x8]\n 13888: a5 = u8 [a0 + 0xa]\n 13891: s1 = u8 [a0 + 0xb]\n 13894: a1 = a1 << 0x8\n 13897: a1 = a1 | a4\n 13900: a5 = a5 << 0x10\n 13903: s1 = s1 << 0x18\n 13906: a5 = a5 | s1\n 13909: a1 = a1 | a5\n 13912: a4 = u8 [a0 + 0xd]\n 13915: a5 = u8 [a0 + 0xc]\n 13918: s1 = u8 [a0 + 0xe]\n 13921: a0 = u8 [a0 + 0xf]\n 13924: a4 = a4 << 0x8\n 13927: a4 = a4 | a5\n 13930: s1 = s1 << 0x10\n 13933: a0 = a0 << 0x18\n 13936: a0 = a0 | s1\n 13939: a0 = a0 | a4\n 13942: a0 = a0 << 0x20\n 13945: a0 = a0 | a1\n 13948: s1 = reverse a0\n 13950: a3 = reverse a3\n 13952: a4 = reverse a2\n 13954: a2 = reverse t0\n 13956: a0 = a2 | a4\n 13959: a1 = a3 | s1\n 13962: a1 = a1 | a0\n 13965: a1 = a1 >> 0x20\n 13968: a0 = a0 | s1\n 13971: a0 = a0 << 0x20\n 13974: a0 = a0 | a1\n 13977: jump @228 if a0 != 0\n      : @222 (gas: 11)\n 13981: a0 = u64 [sp + 0x88]\n 13985: a0 = a0 << 0x20\n 13988: a0 = a0 >> 0x20\n 13991: u64 [sp + 0x10] = a0\n 13994: i32 a0 = a3 + 0\n 13996: a1 = 0x20\n 13999: u64 [sp + 0x8] = a0\n 14002: u64 [sp + 0x80] = a3\n 14006: u64 [sp + 0x78] = a2\n 14009: u64 [sp + 0x88] = a4\n 14013: ra = 184, jump @0\n      : @223 [@dyn 92] (gas: 66)\n 14019: a1 = u64 [sp + 0x10]\n 14022: a1 = reverse a1\n 14024: a2 = u64 [sp + 0x90]\n 14028: a2 = reverse a2\n 14030: a3 = u64 [sp + 0x98]\n 14034: a3 = reverse a3\n 14036: a4 = a3 >> 0x38\n 14039: u8 [a0 + 0x1f] = a4\n 14042: a4 = a3 >> 0x30\n 14045: u8 [a0 + 0x1e] = a4\n 14048: a4 = a3 >> 0x28\n 14051: u8 [a0 + 0x1d] = a4\n 14054: a4 = a3 >> 0x20\n 14057: u8 [a0 + 0x1c] = a4\n 14060: a4 = a3 >> 0x18\n 14063: u8 [a0 + 0x1b] = a4\n 14066: a4 = a3 >> 0x10\n 14069: u8 [a0 + 0x1a] = a4\n 14072: a4 = a3 >> 0x8\n 14075: u8 [a0 + 0x19] = a4\n 14078: u8 [a0 + 0x18] = a3\n 14081: u8 [a0 + 0x10] = a2\n 14084: u8 [a0 + 11] = 0\n 14087: u8 [a0 + 10] = 0\n 14090: u8 [a0 + 9] = 0\n 14093: u8 [a0 + 7] = 0\n 14096: u8 [a0 + 6] = 0\n 14099: u8 [a0 + 5] = 0\n 14102: u8 [a0 + 4] = 0\n 14105: u8 [a0 + 3] = 0\n 14108: u8 [a0 + 2] = 0\n 14111: u8 [a0 + 1] = 0\n 14114: u8 [a0 + 0] = 0\n 14116: a3 = a2 >> 0x38\n 14119: u8 [a0 + 0x17] = a3\n 14122: a3 = a2 >> 0x30\n 14125: u8 [a0 + 0x16] = a3\n 14128: a3 = a2 >> 0x28\n 14131: u8 [a0 + 0x15] = a3\n 14134: a3 = a2 >> 0x20\n 14137: u8 [a0 + 0x14] = a3\n 14140: a3 = a2 >> 0x18\n 14143: u8 [a0 + 0x13] = a3\n 14146: a3 = a2 >> 0x10\n 14149: u8 [a0 + 0x12] = a3\n 14152: a2 = a2 >> 0x8\n 14155: u8 [a0 + 0x11] = a2\n 14158: u8 [a0 + 0x8] = a1\n 14161: a2 = a1 >> 0x38\n 14164: u8 [a0 + 0xf] = a2\n 14167: a2 = a1 >> 0x30\n 14170: u8 [a0 + 0xe] = a2\n 14173: a2 = a1 >> 0x28\n 14176: u8 [a0 + 0xd] = a2\n 14179: a1 = a1 >> 0x20\n 14182: a2 = u64 [sp + 0x88]\n 14186: s1 = s1 | a2\n 14189: a4 = 0x100000000\n 14199: a2 = 0xffffffe0\n 14209: a3 = u64 [sp + 0x80]\n 14213: a2 = a3 <u a2\n 14216: a3 = u64 [sp + 0x78]\n 14219: a2 = 0 if a3 != 0\n 14221: a2 = 0 if s1 != 0\n 14223: u8 [a0 + 0xc] = a1\n 14226: jump @228 if a2 == 0\n      : @224 (gas: 5)\n 14230: a0 = u64 [sp + 0x8]\n 14233: i32 a0 = a0 + 0x20\n 14236: a1 = 0x20\n 14239: u64 [sp + 0x98] = a4\n 14243: ra = 186, jump @0\n      : @225 [@dyn 93] (gas: 76)\n 14249: a1 = u64 [sp + 0x58]\n 14252: a1 = reverse a1\n 14254: a2 = u64 [sp + 0x60]\n 14257: a2 = reverse a2\n 14259: a3 = u64 [sp + 0x68]\n 14262: a3 = reverse a3\n 14264: a4 = u64 [sp + 0x70]\n 14267: a4 = reverse a4\n 14269: a5 = a4 >> 0x38\n 14272: u8 [a0 + 0x1f] = a5\n 14275: a5 = a4 >> 0x30\n 14278: u8 [a0 + 0x1e] = a5\n 14281: a5 = a4 >> 0x28\n 14284: u8 [a0 + 0x1d] = a5\n 14287: a5 = a4 >> 0x20\n 14290: u8 [a0 + 0x1c] = a5\n 14293: a5 = a4 >> 0x18\n 14296: u8 [a0 + 0x1b] = a5\n 14299: a5 = a4 >> 0x10\n 14302: u8 [a0 + 0x1a] = a5\n 14305: a5 = a4 >> 0x8\n 14308: u8 [a0 + 0x19] = a5\n 14311: u8 [a0 + 0x18] = a4\n 14314: u8 [a0 + 0x10] = a3\n 14317: a4 = a3 >> 0x38\n 14320: u8 [a0 + 0x17] = a4\n 14323: a4 = a3 >> 0x30\n 14326: u8 [a0 + 0x16] = a4\n 14329: a4 = a3 >> 0x28\n 14332: u8 [a0 + 0x15] = a4\n 14335: a4 = a3 >> 0x20\n 14338: u8 [a0 + 0x14] = a4\n 14341: a4 = a3 >> 0x18\n 14344: u8 [a0 + 0x13] = a4\n 14347: a4 = a3 >> 0x10\n 14350: u8 [a0 + 0x12] = a4\n 14353: a4 = u64 [sp + 0x78]\n 14356: a3 = a3 >> 0x8\n 14359: u8 [a0 + 0x11] = a3\n 14362: u8 [a0 + 0x8] = a2\n 14365: a3 = a2 >> 0x38\n 14368: u8 [a0 + 0xf] = a3\n 14371: a3 = a2 >> 0x30\n 14374: u8 [a0 + 0xe] = a3\n 14377: a3 = a2 >> 0x28\n 14380: u8 [a0 + 0xd] = a3\n 14383: a3 = a2 >> 0x20\n 14386: u8 [a0 + 0xc] = a3\n 14389: a3 = a2 >> 0x18\n 14392: u8 [a0 + 0xb] = a3\n 14395: a3 = a2 >> 0x10\n 14398: u8 [a0 + 0xa] = a3\n 14401: a3 = u64 [sp + 0x80]\n 14405: a2 = a2 >> 0x8\n 14408: u8 [a0 + 0x9] = a2\n 14411: u8 [a0] = a1\n 14413: a2 = a1 >> 0x38\n 14416: u8 [a0 + 0x7] = a2\n 14419: a2 = a1 >> 0x30\n 14422: u8 [a0 + 0x6] = a2\n 14425: a2 = a1 >> 0x28\n 14428: u8 [a0 + 0x5] = a2\n 14431: a2 = a1 >> 0x20\n 14434: u8 [a0 + 0x4] = a2\n 14437: a2 = a1 >> 0x18\n 14440: u8 [a0 + 0x3] = a2\n 14443: a2 = a1 >> 0x10\n 14446: u8 [a0 + 0x2] = a2\n 14449: a1 = a1 >> 0x8\n 14452: a2 = u64 [sp + 0x98]\n 14456: a2 = a2 + 0xffffffffffffffc0\n 14459: a2 = a3 <u a2\n 14462: a2 = 0 if a4 != 0\n 14464: a2 = 0 if s1 != 0\n 14466: u8 [a0 + 0x1] = a1\n 14469: jump @228 if a2 == 0\n      : @226 (gas: 6)\n 14473: a5 = s1\n 14475: s1 = u64 [sp + 0x8]\n 14478: i32 a0 = s1 + 0x40\n 14481: a1 = 0x20\n 14484: u64 [sp + 0x98] = a5\n 14488: ra = 188, jump @0\n      : @227 [@dyn 94] (gas: 76)\n 14494: a1 = u64 [sp + 0x38]\n 14497: a1 = reverse a1\n 14499: a2 = u64 [sp + 0x40]\n 14502: a2 = reverse a2\n 14504: a3 = u64 [sp + 0x48]\n 14507: a3 = reverse a3\n 14509: a4 = u64 [sp + 0x50]\n 14512: a4 = reverse a4\n 14514: a5 = a4 >> 0x38\n 14517: u8 [a0 + 0x1f] = a5\n 14520: a5 = a4 >> 0x30\n 14523: u8 [a0 + 0x1e] = a5\n 14526: a5 = a4 >> 0x28\n 14529: u8 [a0 + 0x1d] = a5\n 14532: a5 = a4 >> 0x20\n 14535: u8 [a0 + 0x1c] = a5\n 14538: a5 = a4 >> 0x18\n 14541: u8 [a0 + 0x1b] = a5\n 14544: a5 = a4 >> 0x10\n 14547: u8 [a0 + 0x1a] = a5\n 14550: a5 = a4 >> 0x8\n 14553: u8 [a0 + 0x19] = a5\n 14556: u8 [a0 + 0x18] = a4\n 14559: u8 [a0 + 0x10] = a3\n 14562: a4 = a3 >> 0x38\n 14565: u8 [a0 + 0x17] = a4\n 14568: a4 = a3 >> 0x30\n 14571: u8 [a0 + 0x16] = a4\n 14574: a4 = a3 >> 0x28\n 14577: u8 [a0 + 0x15] = a4\n 14580: a4 = a3 >> 0x20\n 14583: u8 [a0 + 0x14] = a4\n 14586: a4 = a3 >> 0x18\n 14589: u8 [a0 + 0x13] = a4\n 14592: a4 = a3 >> 0x10\n 14595: u8 [a0 + 0x12] = a4\n 14598: a3 = a3 >> 0x8\n 14601: u8 [a0 + 0x11] = a3\n 14604: u8 [a0 + 0x8] = a2\n 14607: a3 = a2 >> 0x38\n 14610: u8 [a0 + 0xf] = a3\n 14613: a3 = a2 >> 0x30\n 14616: u8 [a0 + 0xe] = a3\n 14619: a3 = a2 >> 0x28\n 14622: u8 [a0 + 0xd] = a3\n 14625: a3 = a2 >> 0x20\n 14628: u8 [a0 + 0xc] = a3\n 14631: a3 = a2 >> 0x18\n 14634: u8 [a0 + 0xb] = a3\n 14637: a3 = a2 >> 0x10\n 14640: u8 [a0 + 0xa] = a3\n 14643: a2 = a2 >> 0x8\n 14646: u8 [a0 + 0x9] = a2\n 14649: u8 [a0] = a1\n 14651: a2 = a1 >> 0x38\n 14654: u8 [a0 + 0x7] = a2\n 14657: a2 = a1 >> 0x30\n 14660: u8 [a0 + 0x6] = a2\n 14663: a2 = a1 >> 0x28\n 14666: u8 [a0 + 0x5] = a2\n 14669: a2 = a1 >> 0x20\n 14672: u8 [a0 + 0x4] = a2\n 14675: a2 = a1 >> 0x18\n 14678: u8 [a0 + 0x3] = a2\n 14681: a2 = a1 >> 0x10\n 14684: u8 [a0 + 0x2] = a2\n 14687: a1 = a1 >> 0x8\n 14690: a2 = 0xffffffa0\n 14700: a3 = u64 [sp + 0x80]\n 14704: a2 = a3 <u a2\n 14707: a3 = u64 [sp + 0x78]\n 14710: a2 = 0 if a3 != 0\n 14712: a3 = u64 [sp + 0x98]\n 14716: a2 = 0 if a3 != 0\n 14718: u8 [a0 + 0x1] = a1\n 14721: jump @231 if a2 != 0\n      : @228 (gas: 1)\n 14724: trap\n      : @229 (gas: 3)\n 14725: a0 = 0\n 14727: a1 = 0\n 14729: ra = 190, jump @0\n      : @230 [@dyn 95] (gas: 5)\n 14735: i32 a1 = a0 + 0\n 14737: a0 = 0x1\n 14740: a2 = 0\n 14742: ecalli 6 // 'seal_return'\n 14744: fallthrough\n      : @231 (gas: 12)\n 14745: a0 = u64 [sp + 0x20]\n 14748: a1 = u64 [sp + 0x18]\n 14751: a0 = a0 | a1\n 14754: a1 = u64 [sp + 0x30]\n 14757: a2 = u64 [sp + 0x28]\n 14760: a1 = a1 | a2\n 14763: a0 = a0 | a1\n 14766: a0 = a0 >u 0\n 14768: u64 [sp + 0x98] = a0\n 14772: i32 a0 = s1 + 0x60\n 14775: a1 = 0x20\n 14778: ra = 192, jump @0\n      : @232 [@dyn 96] (gas: 36)\n 14784: u8 [a0 + 30] = 0\n 14787: u8 [a0 + 29] = 0\n 14790: u8 [a0 + 28] = 0\n 14793: u8 [a0 + 27] = 0\n 14796: u8 [a0 + 26] = 0\n 14799: u8 [a0 + 25] = 0\n 14802: u8 [a0 + 24] = 0\n 14805: u8 [a0 + 23] = 0\n 14808: u8 [a0 + 22] = 0\n 14811: u8 [a0 + 21] = 0\n 14814: u8 [a0 + 20] = 0\n 14817: u8 [a0 + 19] = 0\n 14820: u8 [a0 + 18] = 0\n 14823: u8 [a0 + 17] = 0\n 14826: u8 [a0 + 16] = 0\n 14829: u8 [a0 + 15] = 0\n 14832: u8 [a0 + 14] = 0\n 14835: u8 [a0 + 13] = 0\n 14838: u8 [a0 + 12] = 0\n 14841: u8 [a0 + 11] = 0\n 14844: u8 [a0 + 10] = 0\n 14847: u8 [a0 + 9] = 0\n 14850: u8 [a0 + 8] = 0\n 14853: u8 [a0 + 7] = 0\n 14856: u8 [a0 + 6] = 0\n 14859: u8 [a0 + 5] = 0\n 14862: u8 [a0 + 4] = 0\n 14865: u8 [a0 + 3] = 0\n 14868: u8 [a0 + 2] = 0\n 14871: u8 [a0 + 1] = 0\n 14874: u8 [a0 + 0] = 0\n 14876: a1 = u64 [sp + 0x98]\n 14880: u8 [a0 + 0x1f] = a1\n 14883: a1 = 0x80\n 14887: a0 = s1\n 14889: ra = 194, jump @0\n      : @233 [@dyn 97] (gas: 6)\n 14895: i32 a1 = a0 + 0\n 14897: a2 = 0x80\n 14901: a0 = 0\n 14903: ra = 0xc4\n 14907: ecalli 6 // 'seal_return'\n 14909: fallthrough\n      : @234 [@dyn 98] (gas: 12)\n 14910: sp = sp + 0xffffffffffffff00\n 14914: u64 [sp + 0xf8] = ra\n 14918: u64 [sp + 0xf0] = s0\n 14922: s0 = sp + 0x100\n 14926: sp = sp & 0xffffffffffffffe0\n 14929: u64 [sp + 216] = 0\n 14933: u64 [sp + 208] = 0\n 14937: u64 [sp + 200] = 0\n 14941: u64 [sp + 192] = 0\n 14945: i32 a0 = sp + 0xc0\n 14949: ecalli 9 // 'value_transferred'\n 14951: fallthrough\n      : @235 (gas: 8)\n 14952: a0 = u64 [sp + 0xd0]\n 14956: a1 = u64 [sp + 0xd8]\n 14960: a2 = u64 [sp + 0xc8]\n 14964: a3 = u64 [sp + 0xc0]\n 14968: a1 = a1 | a2\n 14971: a0 = a0 | a3\n 14974: a0 = a0 | a1\n 14977: jump @241 if a0 != 0\n      : @236 (gas: 13)\n 14981: a0 = u32 [0x20004]\n 14986: u64 [sp + 88] = 0\n 14989: u64 [sp + 80] = 0\n 14992: u64 [sp + 72] = 0\n 14995: u64 [sp + 0x40] = a0\n 14998: u64 [sp + 120] = 0\n 15001: u64 [sp + 112] = 0\n 15004: u64 [sp + 96] = 0x4\n 15008: a0 = sp + 0x80\n 15012: a1 = sp + 0x60\n 15015: a2 = sp + 0x40\n 15018: u64 [sp + 104] = 0\n 15021: ra = 198, jump @71\n      : @237 [@dyn 99] (gas: 19)\n 15027: t0 = u64 [sp + 0x80]\n 15031: t1 = u64 [sp + 0x88]\n 15035: a1 = u64 [sp + 0x90]\n 15039: a3 = u64 [sp + 0x98]\n 15043: a4 = u64 [sp + 0xa0]\n 15047: a5 = u64 [sp + 0xa8]\n 15051: a2 = u64 [sp + 0xb0]\n 15055: a0 = u64 [sp + 0xb8]\n 15059: u64 [sp + 0x18] = a0\n 15062: u64 [sp + 0x10] = a2\n 15065: u64 [sp + 0x8] = a5\n 15068: u64 [sp] = a4\n 15070: u64 [sp + 0x38] = a3\n 15073: u64 [sp + 0x30] = a1\n 15076: u64 [sp + 0x28] = t1\n 15079: a0 = sp + 0x20\n 15082: a1 = sp\n 15084: u64 [sp + 0x20] = t0\n 15087: ra = 200, jump @575\n      : @238 [@dyn 100] (gas: 3)\n 15093: a0 = 0x40\n 15096: a1 = 0x20\n 15099: ra = 202, jump @0\n      : @239 [@dyn 101] (gas: 100)\n 15105: a1 = u8 [a0 + 0x11]\n 15108: a2 = u8 [a0 + 0x10]\n 15111: a3 = u8 [a0 + 0x12]\n 15114: a4 = u8 [a0 + 0x13]\n 15117: a1 = a1 << 0x8\n 15120: a1 = a1 | a2\n 15123: a3 = a3 << 0x10\n 15126: a4 = a4 << 0x18\n 15129: a3 = a3 | a4\n 15132: a1 = a1 | a3\n 15135: a2 = u8 [a0 + 0x15]\n 15138: a3 = u8 [a0 + 0x14]\n 15141: a4 = u8 [a0 + 0x16]\n 15144: a5 = u8 [a0 + 0x17]\n 15147: a2 = a2 << 0x8\n 15150: a2 = a2 | a3\n 15153: a4 = a4 << 0x10\n 15156: a5 = a5 << 0x18\n 15159: a4 = a4 | a5\n 15162: a2 = a2 | a4\n 15165: a2 = a2 << 0x20\n 15168: t0 = a2 | a1\n 15171: a2 = u8 [a0 + 0x1]\n 15174: a3 = u8 [a0]\n 15176: a4 = u8 [a0 + 0x2]\n 15179: a5 = u8 [a0 + 0x3]\n 15182: a2 = a2 << 0x8\n 15185: a2 = a2 | a3\n 15188: a4 = a4 << 0x10\n 15191: a5 = a5 << 0x18\n 15194: a4 = a4 | a5\n 15197: a2 = a2 | a4\n 15200: a3 = u8 [a0 + 0x5]\n 15203: a4 = u8 [a0 + 0x4]\n 15206: a5 = u8 [a0 + 0x6]\n 15209: a1 = u8 [a0 + 0x7]\n 15212: a3 = a3 << 0x8\n 15215: a3 = a3 | a4\n 15218: a5 = a5 << 0x10\n 15221: a1 = a1 << 0x18\n 15224: a1 = a1 | a5\n 15227: a1 = a1 | a3\n 15230: a1 = a1 << 0x20\n 15233: t1 = a1 | a2\n 15236: a1 = u8 [a0 + 0x19]\n 15239: a3 = u8 [a0 + 0x18]\n 15242: a4 = u8 [a0 + 0x1a]\n 15245: a5 = u8 [a0 + 0x1b]\n 15248: a1 = a1 << 0x8\n 15251: a1 = a1 | a3\n 15254: a4 = a4 << 0x10\n 15257: a5 = a5 << 0x18\n 15260: a4 = a4 | a5\n 15263: a1 = a1 | a4\n 15266: a3 = u8 [a0 + 0x1d]\n 15269: a4 = u8 [a0 + 0x1c]\n 15272: a5 = u8 [a0 + 0x1e]\n 15275: a2 = u8 [a0 + 0x1f]\n 15278: a3 = a3 << 0x8\n 15281: a3 = a3 | a4\n 15284: a5 = a5 << 0x10\n 15287: a2 = a2 << 0x18\n 15290: a2 = a2 | a5\n 15293: a2 = a2 | a3\n 15296: a2 = a2 << 0x20\n 15299: a3 = a2 | a1\n 15302: a1 = u8 [a0 + 0x9]\n 15305: a2 = u8 [a0 + 0x8]\n 15308: a4 = u8 [a0 + 0xa]\n 15311: a5 = u8 [a0 + 0xb]\n 15314: a1 = a1 << 0x8\n 15317: a1 = a1 | a2\n 15320: a4 = a4 << 0x10\n 15323: a5 = a5 << 0x18\n 15326: a4 = a4 | a5\n 15329: a1 = a1 | a4\n 15332: a2 = u8 [a0 + 0xd]\n 15335: a4 = u8 [a0 + 0xc]\n 15338: a5 = u8 [a0 + 0xe]\n 15341: a0 = u8 [a0 + 0xf]\n 15344: a2 = a2 << 0x8\n 15347: a2 = a2 | a4\n 15350: a5 = a5 << 0x10\n 15353: a0 = a0 << 0x18\n 15356: a0 = a0 | a5\n 15359: a0 = a0 | a2\n 15362: a0 = a0 << 0x20\n 15365: a0 = a0 | a1\n 15368: a1 = reverse a0\n 15370: a0 = reverse a3\n 15372: a2 = reverse t1\n 15374: a3 = reverse t0\n 15376: a2 = a2 | a3\n 15379: a3 = a0 | a1\n 15382: a3 = a3 | a2\n 15385: a3 = a3 >> 0x20\n 15388: a1 = a1 | a2\n 15391: a1 = a1 << 0x20\n 15394: a1 = a1 | a3\n 15397: jump @243 if a1 == 0\n      : @240 (gas: 1)\n 15400: trap\n      : @241 (gas: 3)\n 15401: a0 = 0\n 15403: a1 = 0\n 15405: ra = 204, jump @0\n      : @242 [@dyn 102] (gas: 7)\n 15411: i32 a1 = a0 + 0\n 15413: a0 = 0x1\n 15416: a2 = 0\n 15418: ecalli 6 // 'seal_return'\n 15420: i32 a0 = a0 + 0\n 15422: ra = 0xce\n 15426: jump @0\n      : @243 (gas: 2)\n 15429: i32 a0 = a0 + 0\n 15431: ra = 206, jump @0\n      : @244 [@dyn 103] (gas: 6)\n 15437: i32 a1 = a0 + 0\n 15439: a0 = 0\n 15441: a2 = 0\n 15443: ra = 0xd0\n 15447: ecalli 6 // 'seal_return'\n 15449: fallthrough\n      : @245 [@dyn 104] (gas: 5)\n 15450: sp = sp + 0xfffffffffffffff8\n 15453: u64 [sp] = ra\n 15455: a0 = 0\n 15457: a1 = 0\n 15459: ra = 210, jump @0\n      : @246 [@dyn 105] (gas: 6)\n 15465: i32 a1 = a0 + 0\n 15467: a0 = 0x1\n 15470: a2 = 0\n 15472: ra = 0xd4\n 15476: ecalli 6 // 'seal_return'\n 15478: fallthrough\n      : @247 [@dyn 106] (gas: 9)\n 15479: a2 = u64 [a1 + 0x18]\n 15482: a3 = u64 [a1 + 0x10]\n 15485: a4 = u64 [a1 + 0x8]\n 15488: a1 = u64 [a1]\n 15490: u64 [a0 + 0x18] = a2\n 15493: u64 [a0 + 0x10] = a3\n 15496: u64 [a0 + 0x8] = a4\n 15499: u64 [a0] = a1\n 15501: ret\n      : @248 (gas: 17)\n 15503: sp = sp + 0xffffffffffffffa0\n 15506: u64 [sp + 0x58] = ra\n 15509: u64 [sp + 0x50] = s0\n 15512: u64 [sp + 0x48] = s1\n 15515: a3 = u64 [a1 + 0x18]\n 15518: a4 = u64 [a1 + 0x10]\n 15521: a5 = u64 [a1 + 0x8]\n 15524: s1 = u64 [a1]\n 15526: a1 = a5 | a3\n 15529: a2 = s1 | a4\n 15532: a2 = a2 | a1\n 15535: a2 = a2 >> 0x20\n 15538: a1 = a1 | a4\n 15541: a1 = a1 << 0x20\n 15544: a1 = a1 | a2\n 15547: u64 [sp + 0x28] = a0\n 15550: jump @255 if a1 != 0\n      : @249 (gas: 19)\n 15554: a0 = s1 + 0x20\n 15557: u64 [sp + 0x30] = a0\n 15560: a0 = a0 <u s1\n 15563: a1 = a5 + a0\n 15566: u64 [sp + 0x40] = a1\n 15569: u64 [sp + 0x8] = a5\n 15572: s0 = a1 <u a5\n 15575: s0 = a0 if a0 == 0\n 15578: s0 = s0 + a4\n 15581: u64 [sp + 0x10] = a4\n 15584: a0 = s0 <u a4\n 15587: u64 [sp + 0x18] = a3\n 15590: a0 = a0 + a3\n 15593: u64 [sp + 0x38] = a0\n 15596: u64 [sp] = s1\n 15598: i32 a0 = s1 + 0\n 15600: a1 = 0x20\n 15603: s1 = 0x20\n 15606: ra = 214, jump @0\n      : @250 [@dyn 107] (gas: 45)\n 15612: u8 [a0 + 0x1f] = s1\n 15615: a1 = u64 [sp + 0x30]\n 15618: s1 = a1\n 15620: a1 = a1 | s0\n 15623: a2 = u64 [sp + 0x40]\n 15626: a4 = u64 [sp + 0x38]\n 15629: a2 = a2 | a4\n 15632: a1 = a1 | a2\n 15635: a1 = a1 >> 0x20\n 15638: u64 [sp + 0x20] = s0\n 15641: a2 = a2 | s0\n 15644: a2 = a2 << 0x20\n 15647: a1 = a1 | a2\n 15650: u8 [a0 + 30] = 0\n 15653: u8 [a0 + 29] = 0\n 15656: u8 [a0 + 28] = 0\n 15659: u8 [a0 + 27] = 0\n 15662: u8 [a0 + 26] = 0\n 15665: u8 [a0 + 25] = 0\n 15668: u8 [a0 + 24] = 0\n 15671: u8 [a0 + 23] = 0\n 15674: u8 [a0 + 22] = 0\n 15677: u8 [a0 + 21] = 0\n 15680: u8 [a0 + 20] = 0\n 15683: u8 [a0 + 19] = 0\n 15686: u8 [a0 + 18] = 0\n 15689: u8 [a0 + 17] = 0\n 15692: u8 [a0 + 16] = 0\n 15695: u8 [a0 + 15] = 0\n 15698: u8 [a0 + 14] = 0\n 15701: u8 [a0 + 13] = 0\n 15704: u8 [a0 + 12] = 0\n 15707: u8 [a0 + 11] = 0\n 15710: u8 [a0 + 10] = 0\n 15713: u8 [a0 + 9] = 0\n 15716: u8 [a0 + 8] = 0\n 15719: u8 [a0 + 7] = 0\n 15722: u8 [a0 + 6] = 0\n 15725: u8 [a0 + 5] = 0\n 15728: u8 [a0 + 4] = 0\n 15731: u8 [a0 + 3] = 0\n 15734: u8 [a0 + 2] = 0\n 15737: u8 [a0 + 1] = 0\n 15740: u8 [a0 + 0] = 0\n 15742: jump @255 if a1 != 0\n      : @251 (gas: 4)\n 15746: i32 s0 = s1 + 0\n 15748: a1 = 0x20\n 15751: a0 = s0\n 15753: ra = 216, jump @0\n      : @252 [@dyn 108] (gas: 41)\n 15759: u8 [a0 + 31] = 0x11\n 15763: u8 [a0 + 30] = 0\n 15766: u8 [a0 + 29] = 0\n 15769: u8 [a0 + 28] = 0\n 15772: u8 [a0 + 27] = 0\n 15775: u8 [a0 + 26] = 0\n 15778: u8 [a0 + 25] = 0\n 15781: u8 [a0 + 24] = 0\n 15784: u8 [a0 + 23] = 0\n 15787: u8 [a0 + 22] = 0\n 15790: u8 [a0 + 21] = 0\n 15793: u8 [a0 + 20] = 0\n 15796: u8 [a0 + 19] = 0\n 15799: u8 [a0 + 18] = 0\n 15802: u8 [a0 + 17] = 0\n 15805: u8 [a0 + 16] = 0\n 15808: u8 [a0 + 15] = 0\n 15811: u8 [a0 + 14] = 0\n 15814: u8 [a0 + 13] = 0\n 15817: u8 [a0 + 12] = 0\n 15820: u8 [a0 + 11] = 0\n 15823: u8 [a0 + 10] = 0\n 15826: u8 [a0 + 9] = 0\n 15829: u8 [a0 + 8] = 0\n 15832: u8 [a0 + 7] = 0\n 15835: u8 [a0 + 6] = 0\n 15838: u8 [a0 + 5] = 0\n 15841: u8 [a0 + 4] = 0\n 15844: u8 [a0 + 3] = 0\n 15847: u8 [a0 + 2] = 0\n 15850: u8 [a0 + 1] = 0\n 15853: a1 = u64 [sp + 0x20]\n 15856: a2 = u64 [sp + 0x38]\n 15859: a1 = a1 | a2\n 15862: a2 = 0xffffffe0\n 15872: a2 = s1 <u a2\n 15875: a3 = u64 [sp + 0x40]\n 15878: a2 = 0 if a3 != 0\n 15880: a2 = 0 if a1 != 0\n 15882: u8 [a0 + 0] = 0\n 15884: jump @255 if a2 == 0\n      : @253 (gas: 3)\n 15888: i32 a0 = s0 + 0x20\n 15891: a1 = 0x20\n 15894: ra = 218, jump @0\n      : @254 [@dyn 109] (gas: 54)\n 15900: u8 [a0 + 31] = 0\n 15903: u8 [a0 + 30] = 0\n 15906: u8 [a0 + 29] = 0\n 15909: u8 [a0 + 28] = 0\n 15912: u8 [a0 + 27] = 0\n 15915: u8 [a0 + 26] = 0\n 15918: u8 [a0 + 25] = 0\n 15921: u8 [a0 + 24] = 0\n 15924: u8 [a0 + 23] = 0\n 15927: u8 [a0 + 22] = 0\n 15930: u8 [a0 + 21] = 0\n 15933: u8 [a0 + 20] = 0\n 15936: u8 [a0 + 19] = 0\n 15939: u8 [a0 + 18] = 0\n 15942: u8 [a0 + 17] = 0\n 15945: u8 [a0 + 16] = 0x74\n 15949: u8 [a0 + 15] = 0x6e\n 15953: u8 [a0 + 14] = 0x65\n 15957: u8 [a0 + 13] = 0x69\n 15961: u8 [a0 + 12] = 0x70\n 15965: u8 [a0 + 11] = 0x69\n 15969: u8 [a0 + 10] = 0x63\n 15973: u8 [a0 + 9] = 0x65\n 15977: u8 [a0 + 8] = 0x72\n 15981: u8 [a0 + 7] = 0x20\n 15985: u8 [a0 + 6] = 0x64\n 15989: u8 [a0 + 5] = 0x69\n 15993: u8 [a0 + 4] = 0x6c\n 15997: u8 [a0 + 3] = 0x61\n 16001: u8 [a0 + 2] = 0x76\n 16005: u8 [a0 + 1] = 0x6e\n 16009: u8 [a0 + 0] = 0x49\n 16012: a1 = u64 [sp]\n 16014: a0 = a1 + 0x60\n 16017: a1 = a0 <u a1\n 16020: a3 = u64 [sp + 0x8]\n 16023: a2 = a3 + a1\n 16026: a3 = a2 <u a3\n 16029: a3 = a1 if a1 == 0\n 16032: a1 = u64 [sp + 0x10]\n 16035: a3 = a3 + a1\n 16038: a1 = a3 <u a1\n 16041: a4 = u64 [sp + 0x18]\n 16044: a1 = a1 + a4\n 16047: a4 = u64 [sp + 0x28]\n 16050: u64 [a4] = a0\n 16052: u64 [a4 + 0x8] = a2\n 16055: u64 [a4 + 0x10] = a3\n 16058: u64 [a4 + 0x18] = a1\n 16061: ra = u64 [sp + 0x58]\n 16064: s0 = u64 [sp + 0x50]\n 16067: s1 = u64 [sp + 0x48]\n 16070: sp = sp + 0x60\n 16073: ret\n      : @255 (gas: 1)\n 16075: trap\n      : @256 (gas: 17)\n 16076: sp = sp + 0xffffffffffffffa0\n 16079: u64 [sp + 0x58] = ra\n 16082: u64 [sp + 0x50] = s0\n 16085: u64 [sp + 0x48] = s1\n 16088: a3 = u64 [a1 + 0x18]\n 16091: a4 = u64 [a1 + 0x10]\n 16094: a5 = u64 [a1 + 0x8]\n 16097: s1 = u64 [a1]\n 16099: a1 = a5 | a3\n 16102: a2 = s1 | a4\n 16105: a2 = a2 | a1\n 16108: a2 = a2 >> 0x20\n 16111: a1 = a1 | a4\n 16114: a1 = a1 << 0x20\n 16117: a1 = a1 | a2\n 16120: u64 [sp + 0x28] = a0\n 16123: jump @263 if a1 != 0\n      : @257 (gas: 19)\n 16127: a0 = s1 + 0x20\n 16130: u64 [sp + 0x30] = a0\n 16133: a0 = a0 <u s1\n 16136: a1 = a5 + a0\n 16139: u64 [sp + 0x40] = a1\n 16142: u64 [sp + 0x8] = a5\n 16145: s0 = a1 <u a5\n 16148: s0 = a0 if a0 == 0\n 16151: s0 = s0 + a4\n 16154: u64 [sp + 0x10] = a4\n 16157: a0 = s0 <u a4\n 16160: u64 [sp + 0x18] = a3\n 16163: a0 = a0 + a3\n 16166: u64 [sp + 0x38] = a0\n 16169: u64 [sp] = s1\n 16171: i32 a0 = s1 + 0\n 16173: a1 = 0x20\n 16176: s1 = 0x20\n 16179: ra = 220, jump @0\n      : @258 [@dyn 110] (gas: 45)\n 16185: u8 [a0 + 0x1f] = s1\n 16188: a1 = u64 [sp + 0x30]\n 16191: s1 = a1\n 16193: a1 = a1 | s0\n 16196: a2 = u64 [sp + 0x40]\n 16199: a4 = u64 [sp + 0x38]\n 16202: a2 = a2 | a4\n 16205: a1 = a1 | a2\n 16208: a1 = a1 >> 0x20\n 16211: u64 [sp + 0x20] = s0\n 16214: a2 = a2 | s0\n 16217: a2 = a2 << 0x20\n 16220: a1 = a1 | a2\n 16223: u8 [a0 + 30] = 0\n 16226: u8 [a0 + 29] = 0\n 16229: u8 [a0 + 28] = 0\n 16232: u8 [a0 + 27] = 0\n 16235: u8 [a0 + 26] = 0\n 16238: u8 [a0 + 25] = 0\n 16241: u8 [a0 + 24] = 0\n 16244: u8 [a0 + 23] = 0\n 16247: u8 [a0 + 22] = 0\n 16250: u8 [a0 + 21] = 0\n 16253: u8 [a0 + 20] = 0\n 16256: u8 [a0 + 19] = 0\n 16259: u8 [a0 + 18] = 0\n 16262: u8 [a0 + 17] = 0\n 16265: u8 [a0 + 16] = 0\n 16268: u8 [a0 + 15] = 0\n 16271: u8 [a0 + 14] = 0\n 16274: u8 [a0 + 13] = 0\n 16277: u8 [a0 + 12] = 0\n 16280: u8 [a0 + 11] = 0\n 16283: u8 [a0 + 10] = 0\n 16286: u8 [a0 + 9] = 0\n 16289: u8 [a0 + 8] = 0\n 16292: u8 [a0 + 7] = 0\n 16295: u8 [a0 + 6] = 0\n 16298: u8 [a0 + 5] = 0\n 16301: u8 [a0 + 4] = 0\n 16304: u8 [a0 + 3] = 0\n 16307: u8 [a0 + 2] = 0\n 16310: u8 [a0 + 1] = 0\n 16313: u8 [a0 + 0] = 0\n 16315: jump @263 if a1 != 0\n      : @259 (gas: 4)\n 16319: i32 s0 = s1 + 0\n 16321: a1 = 0x20\n 16324: a0 = s0\n 16326: ra = 222, jump @0\n      : @260 [@dyn 111] (gas: 41)\n 16332: u8 [a0 + 31] = 0x18\n 16336: u8 [a0 + 30] = 0\n 16339: u8 [a0 + 29] = 0\n 16342: u8 [a0 + 28] = 0\n 16345: u8 [a0 + 27] = 0\n 16348: u8 [a0 + 26] = 0\n 16351: u8 [a0 + 25] = 0\n 16354: u8 [a0 + 24] = 0\n 16357: u8 [a0 + 23] = 0\n 16360: u8 [a0 + 22] = 0\n 16363: u8 [a0 + 21] = 0\n 16366: u8 [a0 + 20] = 0\n 16369: u8 [a0 + 19] = 0\n 16372: u8 [a0 + 18] = 0\n 16375: u8 [a0 + 17] = 0\n 16378: u8 [a0 + 16] = 0\n 16381: u8 [a0 + 15] = 0\n 16384: u8 [a0 + 14] = 0\n 16387: u8 [a0 + 13] = 0\n 16390: u8 [a0 + 12] = 0\n 16393: u8 [a0 + 11] = 0\n 16396: u8 [a0 + 10] = 0\n 16399: u8 [a0 + 9] = 0\n 16402: u8 [a0 + 8] = 0\n 16405: u8 [a0 + 7] = 0\n 16408: u8 [a0 + 6] = 0\n 16411: u8 [a0 + 5] = 0\n 16414: u8 [a0 + 4] = 0\n 16417: u8 [a0 + 3] = 0\n 16420: u8 [a0 + 2] = 0\n 16423: u8 [a0 + 1] = 0\n 16426: a1 = u64 [sp + 0x20]\n 16429: a2 = u64 [sp + 0x38]\n 16432: a1 = a1 | a2\n 16435: a2 = 0xffffffe0\n 16445: a2 = s1 <u a2\n 16448: a3 = u64 [sp + 0x40]\n 16451: a2 = 0 if a3 != 0\n 16453: a2 = 0 if a1 != 0\n 16455: u8 [a0 + 0] = 0\n 16457: jump @263 if a2 == 0\n      : @261 (gas: 3)\n 16461: i32 a0 = s0 + 0x20\n 16464: a1 = 0x20\n 16467: ra = 224, jump @0\n      : @262 [@dyn 112] (gas: 54)\n 16473: u8 [a0 + 20] = 0x73\n 16477: u8 [a0 + 15] = 0x73\n 16481: u8 [a0 + 23] = 0x64\n 16485: u8 [a0 + 14] = 0x64\n 16489: u8 [a0 + 13] = 0x72\n 16493: u8 [a0 + 12] = 0x61\n 16497: u8 [a0 + 11] = 0x63\n 16501: u8 [a0 + 9] = 0x68\n 16505: u8 [a0 + 8] = 0x67\n 16509: u8 [a0 + 7] = 0x75\n 16513: u8 [a0 + 22] = 0x6e\n 16517: u8 [a0 + 5] = 0x6e\n 16521: u8 [a0 + 21] = 0x65\n 16525: u8 [a0 + 4] = 0x65\n 16529: u8 [a0 + 31] = 0\n 16532: u8 [a0 + 30] = 0\n 16535: u8 [a0 + 29] = 0\n 16538: u8 [a0 + 28] = 0\n 16541: u8 [a0 + 27] = 0\n 16544: u8 [a0 + 26] = 0\n 16547: u8 [a0 + 25] = 0\n 16550: u8 [a0 + 24] = 0\n 16553: u8 [a0 + 19] = 0x20\n 16557: u8 [a0 + 16] = 0x20\n 16561: u8 [a0 + 10] = 0x20\n 16565: u8 [a0 + 3] = 0x20\n 16569: u8 [a0 + 17] = 0x74\n 16573: u8 [a0 + 2] = 0x74\n 16577: u8 [a0 + 18] = 0x6f\n 16581: u8 [a0 + 6] = 0x6f\n 16585: u8 [a0 + 1] = 0x6f\n 16589: u8 [a0 + 0] = 0x4e\n 16592: a1 = u64 [sp]\n 16594: a0 = a1 + 0x60\n 16597: a1 = a0 <u a1\n 16600: a3 = u64 [sp + 0x8]\n 16603: a2 = a3 + a1\n 16606: a3 = a2 <u a3\n 16609: a3 = a1 if a1 == 0\n 16612: a1 = u64 [sp + 0x10]\n 16615: a3 = a3 + a1\n 16618: a1 = a3 <u a1\n 16621: a4 = u64 [sp + 0x18]\n 16624: a1 = a1 + a4\n 16627: a4 = u64 [sp + 0x28]\n 16630: u64 [a4] = a0\n 16632: u64 [a4 + 0x8] = a2\n 16635: u64 [a4 + 0x10] = a3\n 16638: u64 [a4 + 0x18] = a1\n 16641: ra = u64 [sp + 0x58]\n 16644: s0 = u64 [sp + 0x50]\n 16647: s1 = u64 [sp + 0x48]\n 16650: sp = sp + 0x60\n 16653: ret\n      : @263 (gas: 1)\n 16655: trap\n      : @264 (gas: 12)\n 16656: sp = sp + 0xfffffffffffffd80\n 16660: u64 [sp + 0x278] = ra\n 16664: u64 [sp + 0x270] = s0\n 16668: u64 [sp + 0x268] = s1\n 16672: s0 = sp + 0x280\n 16676: sp = sp & 0xffffffffffffffe0\n 16679: t1 = u32 [a0 + 0x10]\n 16682: a2 = u64 [a0]\n 16684: a0 = u64 [a0 + 0x8]\n 16687: a4 = a2 | t1\n 16690: a4 = a4 | a0\n 16693: jump @294 if a4 == 0\n      : @265 (gas: 21)\n 16697: a3 = 0\n 16699: t0 = 0\n 16701: a5 = 0\n 16703: s1 = 0\n 16705: a4 = u64 [a1 + 0x18]\n 16708: u64 [sp + 0x38] = a4\n 16711: a4 = u64 [a1 + 0x10]\n 16714: u64 [sp + 0x30] = a4\n 16717: a4 = u64 [a1 + 0x8]\n 16720: u64 [sp + 0x28] = a4\n 16723: a1 = u64 [a1]\n 16725: u64 [sp + 0x20] = a1\n 16728: a1 = reverse a2\n 16730: u64 [sp + 0x10] = a1\n 16733: a0 = reverse a0\n 16735: u64 [sp + 0x8] = a0\n 16738: a0 = reverse t1\n 16740: u64 [sp] = a0\n 16742: i32 a0 = sp + 0x240\n 16746: u64 [sp + 0x18] = a0\n 16749: jump @267\n      : @266 (gas: 21)\n 16751: a1 = u64 [sp + 0xa0]\n 16755: a0 = a1 <u 0x8\n 16758: a1 = a1 + 0x1\n 16761: a2 = a1 <u 0x1\n 16764: a3 = u64 [sp + 0xa8]\n 16768: a0 = 0 if a3 != 0\n 16770: a2 = a2 + a3\n 16773: a3 = a1 | a2\n 16776: a3 = a3 <u 0x1\n 16779: a5 = u64 [sp + 0xb8]\n 16783: s1 = a5 + a3\n 16786: a3 = s1 <u a5\n 16789: a4 = u64 [sp + 0xb0]\n 16793: a5 = a5 | a4\n 16796: a4 = a4 + a3\n 16799: a0 = 0 if a5 != 0\n 16801: a3 = a1\n 16803: t0 = a2\n 16805: a5 = s1\n 16807: s1 = a4\n 16809: jump @286 if a0 == 0\n      : @267 (gas: 40)\n 16813: a0 = a5 >> 0x3b\n 16816: u64 [sp + 0xb0] = s1\n 16820: a1 = s1 << 0x5\n 16823: s1 = a1 | a0\n 16826: a1 = a3 >> 0x3b\n 16829: a2 = t0 << 0x5\n 16832: a2 = a2 | a1\n 16835: u64 [sp + 0xa0] = a3\n 16839: a3 = a3 << 0x5\n 16842: a1 = u64 [sp + 0x20]\n 16845: a1 = a1 + a3\n 16848: a3 = a1 <u a3\n 16851: a4 = u64 [sp + 0x28]\n 16854: a4 = a4 + a2\n 16857: a4 = a4 + a3\n 16860: a0 = a4 ^ a2\n 16863: a2 = a4 <u a2\n 16866: a2 = a3 if a0 == 0\n 16869: u64 [sp + 0xa8] = t0\n 16873: a3 = t0 >> 0x3b\n 16876: u64 [sp + 0xb8] = a5\n 16880: a5 = a5 << 0x5\n 16883: a3 = a3 | a5\n 16886: a5 = u64 [sp + 0x30]\n 16889: a5 = a5 + a3\n 16892: a3 = a5 <u a3\n 16895: a0 = u64 [sp + 0x38]\n 16898: a0 = a0 + s1\n 16901: a0 = a0 + a3\n 16904: a2 = a2 + a5\n 16907: a3 = a2 <u a5\n 16910: a0 = a0 + a3\n 16913: a0 = a0 | a4\n 16916: a3 = a1 | a2\n 16919: a3 = a3 | a0\n 16922: a0 = a0 | a2\n 16925: a3 = a3 >> 0x20\n 16928: a0 = a0 << 0x20\n 16931: a0 = a0 | a3\n 16934: jump @293 if a0 != 0\n      : @268 (gas: 4)\n 16938: i32 a1 = a1 + 0\n 16940: a0 = u64 [sp + 0x18]\n 16943: ecalli 1 // 'call_data_load'\n 16945: fallthrough\n      : @269 (gas: 12)\n 16946: a0 = u64 [sp + 0x258]\n 16950: a1 = u64 [sp + 0x250]\n 16954: a3 = u64 [sp + 0x248]\n 16958: a2 = u64 [sp + 0x240]\n 16962: u64 [sp + 0x98] = a0\n 16966: u64 [sp + 0x80] = a3\n 16970: a0 = a0 | a3\n 16973: u64 [sp + 0x90] = a1\n 16977: u64 [sp + 0x88] = a2\n 16981: a1 = a1 | a2\n 16984: a0 = a0 | a1\n 16987: jump @266 if a0 == 0\n      : @270 (gas: 19)\n 16991: i32 a0 = sp + 0x1c0\n 16995: ecalli 3 // 'caller'\n 16997: a0 = u64 [sp + 0x1c8]\n 17001: a1 = i32 [sp + 0x1d0]\n 17005: s1 = u64 [sp + 0x1c0]\n 17009: a0 = reverse a0\n 17011: a2 = a0 << 0x20\n 17014: a1 = reverse a1\n 17016: a1 = a1 >> 0x20\n 17019: a1 = a1 | a2\n 17022: u64 [sp + 0x78] = a1\n 17025: a0 = a0 >> 0x20\n 17028: a1 = reverse s1\n 17030: a1 = a1 << 0x20\n 17033: a0 = a0 | a1\n 17036: u64 [sp + 0x70] = a0\n 17039: a1 = 0x20\n 17042: a0 = 0\n 17044: ra = 226, jump @0\n      : @271 [@dyn 113] (gas: 56)\n 17050: a1 = u64 [sp + 0x70]\n 17053: a1 = reverse a1\n 17055: a2 = u64 [sp + 0x78]\n 17058: a2 = reverse a2\n 17060: a3 = s1 >> 0x18\n 17063: u8 [a0 + 0xf] = a3\n 17066: a3 = s1 >> 0x10\n 17069: u8 [a0 + 0xe] = a3\n 17072: a3 = s1 >> 0x8\n 17075: u8 [a0 + 0xd] = a3\n 17078: u8 [a0 + 0xc] = s1\n 17081: u8 [a0 + 11] = 0\n 17084: u8 [a0 + 10] = 0\n 17087: u8 [a0 + 9] = 0\n 17090: u8 [a0 + 8] = 0\n 17093: u8 [a0 + 7] = 0\n 17096: u8 [a0 + 6] = 0\n 17099: u8 [a0 + 5] = 0\n 17102: u8 [a0 + 4] = 0\n 17105: u8 [a0 + 3] = 0\n 17108: u8 [a0 + 2] = 0\n 17111: u8 [a0 + 1] = 0\n 17114: u8 [a0 + 0] = 0\n 17116: u8 [a0 + 0x18] = a2\n 17119: u8 [a0 + 0x10] = a1\n 17122: a3 = a2 >> 0x38\n 17125: u8 [a0 + 0x1f] = a3\n 17128: a3 = a2 >> 0x30\n 17131: u8 [a0 + 0x1e] = a3\n 17134: a3 = a2 >> 0x28\n 17137: u8 [a0 + 0x1d] = a3\n 17140: a3 = a2 >> 0x20\n 17143: u8 [a0 + 0x1c] = a3\n 17146: a3 = a2 >> 0x18\n 17149: u8 [a0 + 0x1b] = a3\n 17152: a3 = a2 >> 0x10\n 17155: u8 [a0 + 0x1a] = a3\n 17158: a2 = a2 >> 0x8\n 17161: u8 [a0 + 0x19] = a2\n 17164: a2 = a1 >> 0x38\n 17167: u8 [a0 + 0x17] = a2\n 17170: a2 = a1 >> 0x30\n 17173: u8 [a0 + 0x16] = a2\n 17176: a2 = a1 >> 0x28\n 17179: u8 [a0 + 0x15] = a2\n 17182: a2 = a1 >> 0x20\n 17185: u8 [a0 + 0x14] = a2\n 17188: a2 = a1 >> 0x18\n 17191: u8 [a0 + 0x13] = a2\n 17194: a2 = a1 >> 0x10\n 17197: u8 [a0 + 0x12] = a2\n 17200: a1 = a1 >> 0x8\n 17203: u8 [a0 + 0x11] = a1\n 17206: a0 = 0x20\n 17209: a1 = 0x20\n 17212: ra = 228, jump @0\n      : @272 [@dyn 114] (gas: 35)\n 17218: u8 [a0 + 31] = 0\n 17221: u8 [a0 + 30] = 0\n 17224: u8 [a0 + 29] = 0\n 17227: u8 [a0 + 28] = 0\n 17230: u8 [a0 + 27] = 0\n 17233: u8 [a0 + 26] = 0\n 17236: u8 [a0 + 25] = 0\n 17239: u8 [a0 + 24] = 0\n 17242: u8 [a0 + 23] = 0\n 17245: u8 [a0 + 22] = 0\n 17248: u8 [a0 + 21] = 0\n 17251: u8 [a0 + 20] = 0\n 17254: u8 [a0 + 19] = 0\n 17257: u8 [a0 + 18] = 0\n 17260: u8 [a0 + 17] = 0\n 17263: u8 [a0 + 16] = 0\n 17266: u8 [a0 + 15] = 0\n 17269: u8 [a0 + 14] = 0\n 17272: u8 [a0 + 13] = 0\n 17275: u8 [a0 + 12] = 0\n 17278: u8 [a0 + 11] = 0\n 17281: u8 [a0 + 10] = 0\n 17284: u8 [a0 + 9] = 0\n 17287: u8 [a0 + 8] = 0\n 17290: u8 [a0 + 7] = 0\n 17293: u8 [a0 + 6] = 0\n 17296: u8 [a0 + 5] = 0\n 17299: u8 [a0 + 4] = 0\n 17302: u8 [a0 + 3] = 0\n 17305: u8 [a0 + 2] = 0\n 17308: u8 [a0 + 1] = 0\n 17311: u8 [a0 + 0] = 0\n 17313: a1 = 0x40\n 17316: a0 = 0\n 17318: ra = 230, jump @0\n      : @273 [@dyn 115] (gas: 46)\n 17324: i32 a0 = a0 + 0\n 17326: i32 a2 = sp + 0x240\n 17330: a1 = 0x40\n 17333: ecalli 5 // 'hash_keccak_256'\n 17335: a0 = u64 [sp + 0x258]\n 17339: a1 = u64 [sp + 0x250]\n 17343: a2 = u64 [sp + 0x248]\n 17347: a3 = u64 [sp + 0x240]\n 17351: a0 = reverse a0\n 17353: a1 = reverse a1\n 17355: a4 = u64 [sp + 0xa8]\n 17359: a4 = a4 + a1\n 17362: a5 = u64 [sp + 0xa0]\n 17366: a5 = a5 + a0\n 17369: a0 = a5 <u a0\n 17372: a4 = a4 + a0\n 17375: s1 = a4 ^ a1\n 17378: a1 = a4 <u a1\n 17381: a1 = a0 if s1 == 0\n 17384: s1 = reverse a3\n 17386: a2 = reverse a2\n 17388: a3 = u64 [sp + 0xb8]\n 17392: a3 = a3 + a2\n 17395: a0 = u64 [sp + 0xb0]\n 17399: a0 = a0 + s1\n 17402: a2 = a3 <u a2\n 17405: a0 = a0 + a2\n 17408: a1 = a1 + a3\n 17411: a2 = a1 <u a3\n 17414: a0 = a0 + a2\n 17417: u64 [sp + 0x228] = a4\n 17421: u64 [sp + 0x220] = a5\n 17425: u64 [sp + 0x230] = a1\n 17429: u64 [sp + 0x238] = a0\n 17433: u64 [sp + 600] = 0\n 17437: u64 [sp + 592] = 0\n 17441: u64 [sp + 584] = 0\n 17445: u64 [sp + 576] = 0\n 17449: u32 [sp + 512] = 0x20\n 17454: i32 a1 = sp + 0x220\n 17458: i32 a3 = sp + 0x240\n 17462: i32 a4 = sp + 0x200\n 17466: a2 = 0xffffffffffffffff\n 17469: a0 = 0\n 17471: ecalli 4 // 'get_storage'\n 17473: fallthrough\n      : @274 (gas: 20)\n 17474: a0 = u64 [sp + 0x258]\n 17478: t0 = u64 [sp + 0x240]\n 17482: a2 = u64 [sp + 0x250]\n 17486: a3 = u64 [sp + 0x248]\n 17490: a5 = u64 [sp + 0x98]\n 17494: a4 = a0 ^ a5\n 17497: s1 = a0 <u a5\n 17500: a0 = u64 [sp + 0x90]\n 17504: a5 = a2 <u a0\n 17507: a5 = s1 if a4 != 0\n 17510: a1 = u64 [sp + 0x80]\n 17514: s1 = a3 ^ a1\n 17517: a3 = a3 <u a1\n 17520: a1 = u64 [sp + 0x88]\n 17524: a1 = t0 <u a1\n 17527: a1 = a3 if s1 != 0\n 17530: a0 = a0 ^ a2\n 17533: a0 = a0 | a4\n 17536: a1 = a5 if a0 != 0\n 17539: jump @287 if a1 != 0\n      : @275 (gas: 19)\n 17543: i32 a0 = sp + 0x1e0\n 17547: ecalli 3 // 'caller'\n 17549: a0 = u64 [sp + 0x1e8]\n 17553: a1 = i32 [sp + 0x1f0]\n 17557: s1 = u64 [sp + 0x1e0]\n 17561: a0 = reverse a0\n 17563: a2 = a0 << 0x20\n 17566: a1 = reverse a1\n 17568: a1 = a1 >> 0x20\n 17571: a1 = a1 | a2\n 17574: u64 [sp + 0x78] = a1\n 17577: a0 = a0 >> 0x20\n 17580: a1 = reverse s1\n 17582: a1 = a1 << 0x20\n 17585: a0 = a0 | a1\n 17588: u64 [sp + 0x70] = a0\n 17591: a1 = 0x20\n 17594: a0 = 0\n 17596: ra = 232, jump @0\n      : @276 [@dyn 116] (gas: 56)\n 17602: a1 = u64 [sp + 0x70]\n 17605: a1 = reverse a1\n 17607: a2 = u64 [sp + 0x78]\n 17610: a2 = reverse a2\n 17612: a3 = s1 >> 0x18\n 17615: u8 [a0 + 0xf] = a3\n 17618: a3 = s1 >> 0x10\n 17621: u8 [a0 + 0xe] = a3\n 17624: a3 = s1 >> 0x8\n 17627: u8 [a0 + 0xd] = a3\n 17630: u8 [a0 + 0xc] = s1\n 17633: u8 [a0 + 11] = 0\n 17636: u8 [a0 + 10] = 0\n 17639: u8 [a0 + 9] = 0\n 17642: u8 [a0 + 8] = 0\n 17645: u8 [a0 + 7] = 0\n 17648: u8 [a0 + 6] = 0\n 17651: u8 [a0 + 5] = 0\n 17654: u8 [a0 + 4] = 0\n 17657: u8 [a0 + 3] = 0\n 17660: u8 [a0 + 2] = 0\n 17663: u8 [a0 + 1] = 0\n 17666: u8 [a0 + 0] = 0\n 17668: u8 [a0 + 0x18] = a2\n 17671: u8 [a0 + 0x10] = a1\n 17674: a3 = a2 >> 0x38\n 17677: u8 [a0 + 0x1f] = a3\n 17680: a3 = a2 >> 0x30\n 17683: u8 [a0 + 0x1e] = a3\n 17686: a3 = a2 >> 0x28\n 17689: u8 [a0 + 0x1d] = a3\n 17692: a3 = a2 >> 0x20\n 17695: u8 [a0 + 0x1c] = a3\n 17698: a3 = a2 >> 0x18\n 17701: u8 [a0 + 0x1b] = a3\n 17704: a3 = a2 >> 0x10\n 17707: u8 [a0 + 0x1a] = a3\n 17710: a2 = a2 >> 0x8\n 17713: u8 [a0 + 0x19] = a2\n 17716: a2 = a1 >> 0x38\n 17719: u8 [a0 + 0x17] = a2\n 17722: a2 = a1 >> 0x30\n 17725: u8 [a0 + 0x16] = a2\n 17728: a2 = a1 >> 0x28\n 17731: u8 [a0 + 0x15] = a2\n 17734: a2 = a1 >> 0x20\n 17737: u8 [a0 + 0x14] = a2\n 17740: a2 = a1 >> 0x18\n 17743: u8 [a0 + 0x13] = a2\n 17746: a2 = a1 >> 0x10\n 17749: u8 [a0 + 0x12] = a2\n 17752: a1 = a1 >> 0x8\n 17755: u8 [a0 + 0x11] = a1\n 17758: a0 = 0x20\n 17761: a1 = 0x20\n 17764: ra = 234, jump @0\n      : @277 [@dyn 117] (gas: 35)\n 17770: u8 [a0 + 31] = 0\n 17773: u8 [a0 + 30] = 0\n 17776: u8 [a0 + 29] = 0\n 17779: u8 [a0 + 28] = 0\n 17782: u8 [a0 + 27] = 0\n 17785: u8 [a0 + 26] = 0\n 17788: u8 [a0 + 25] = 0\n 17791: u8 [a0 + 24] = 0\n 17794: u8 [a0 + 23] = 0\n 17797: u8 [a0 + 22] = 0\n 17800: u8 [a0 + 21] = 0\n 17803: u8 [a0 + 20] = 0\n 17806: u8 [a0 + 19] = 0\n 17809: u8 [a0 + 18] = 0\n 17812: u8 [a0 + 17] = 0\n 17815: u8 [a0 + 16] = 0\n 17818: u8 [a0 + 15] = 0\n 17821: u8 [a0 + 14] = 0\n 17824: u8 [a0 + 13] = 0\n 17827: u8 [a0 + 12] = 0\n 17830: u8 [a0 + 11] = 0\n 17833: u8 [a0 + 10] = 0\n 17836: u8 [a0 + 9] = 0\n 17839: u8 [a0 + 8] = 0\n 17842: u8 [a0 + 7] = 0\n 17845: u8 [a0 + 6] = 0\n 17848: u8 [a0 + 5] = 0\n 17851: u8 [a0 + 4] = 0\n 17854: u8 [a0 + 3] = 0\n 17857: u8 [a0 + 2] = 0\n 17860: u8 [a0 + 1] = 0\n 17863: u8 [a0 + 0] = 0\n 17865: a1 = 0x40\n 17868: a0 = 0\n 17870: ra = 236, jump @0\n      : @278 [@dyn 118] (gas: 50)\n 17876: i32 a0 = a0 + 0\n 17878: i32 a2 = sp + 0x240\n 17882: a1 = 0x40\n 17885: ecalli 5 // 'hash_keccak_256'\n 17887: a0 = u64 [sp + 0x258]\n 17891: a1 = u64 [sp + 0x250]\n 17895: a2 = u64 [sp + 0x248]\n 17899: a3 = u64 [sp + 0x240]\n 17903: a0 = reverse a0\n 17905: a1 = reverse a1\n 17907: a4 = u64 [sp + 0xa8]\n 17911: a4 = a4 + a1\n 17914: a5 = u64 [sp + 0xa0]\n 17918: a5 = a5 + a0\n 17921: s1 = a5 <u a0\n 17924: a0 = a4 + s1\n 17927: a4 = a0 ^ a1\n 17930: a1 = a0 <u a1\n 17933: a1 = s1 if a4 == 0\n 17936: s1 = reverse a3\n 17938: a2 = reverse a2\n 17940: a3 = u64 [sp + 0xb8]\n 17944: a3 = a3 + a2\n 17947: a4 = u64 [sp + 0xb0]\n 17951: a4 = a4 + s1\n 17954: a2 = a3 <u a2\n 17957: a2 = a2 + a4\n 17960: a4 = a3 + a1\n 17963: a1 = a4 <u a3\n 17966: a1 = a1 + a2\n 17969: u64 [sp + 0x70] = a0\n 17972: u64 [sp + 0x228] = a0\n 17976: u64 [sp + 0x78] = a5\n 17979: u64 [sp + 0x220] = a5\n 17983: u64 [sp + 0x68] = a4\n 17986: u64 [sp + 0x230] = a4\n 17990: u64 [sp + 0x60] = a1\n 17993: u64 [sp + 0x238] = a1\n 17997: u64 [sp + 600] = 0\n 18001: u64 [sp + 592] = 0\n 18005: u64 [sp + 584] = 0\n 18009: u64 [sp + 576] = 0\n 18013: u32 [sp + 512] = 0x20\n 18018: i32 a1 = sp + 0x220\n 18022: i32 a3 = sp + 0x240\n 18026: i32 a4 = sp + 0x200\n 18030: a2 = 0xffffffffffffffff\n 18033: a0 = 0\n 18035: ecalli 4 // 'get_storage'\n 18037: fallthrough\n      : @279 (gas: 20)\n 18038: a2 = u64 [sp + 0x258]\n 18042: a3 = u64 [sp + 0x250]\n 18046: a1 = u64 [sp + 0x248]\n 18050: t1 = u64 [sp + 0x240]\n 18054: a0 = u64 [sp + 0x98]\n 18058: t0 = a2 ^ a0\n 18061: a0 = a2 <u a0\n 18064: a4 = u64 [sp + 0x90]\n 18068: ra = a3 <u a4\n 18071: a0 = ra if t0 == 0\n 18074: a5 = u64 [sp + 0x80]\n 18078: t2 = a1 ^ a5\n 18081: s1 = a1 <u a5\n 18084: a5 = u64 [sp + 0x88]\n 18088: a5 = t1 <u a5\n 18091: s1 = a5 if t2 == 0\n 18094: a4 = a4 ^ a3\n 18097: a4 = a4 | t0\n 18100: a0 = s1 if a4 == 0\n 18103: jump @299 if a0 != 0\n      : @280 (gas: 60)\n 18107: a0 = u64 [sp + 0x90]\n 18111: a0 = a3 - a0\n 18114: a3 = a0 - s1\n 18117: u64 [sp + 0x58] = a3\n 18120: a0 = a0 <u s1\n 18123: a3 = u64 [sp + 0x98]\n 18127: a2 = a2 - a3\n 18130: a2 = a2 - ra\n 18133: a2 = a2 - a0\n 18136: u64 [sp + 0x50] = a2\n 18139: a0 = u64 [sp + 0x80]\n 18143: a0 = a1 - a0\n 18146: a0 = a0 - a5\n 18149: u64 [sp + 0x48] = a0\n 18152: a0 = u64 [sp + 0x88]\n 18156: a0 = t1 - a0\n 18159: u64 [sp + 0x40] = a0\n 18162: a0 = u64 [sp + 0x68]\n 18165: u64 [sp + 0x230] = a0\n 18169: a0 = u64 [sp + 0x70]\n 18172: u64 [sp + 0x228] = a0\n 18176: a0 = u64 [sp + 0x78]\n 18179: u64 [sp + 0x220] = a0\n 18183: s1 = u64 [sp + 0x60]\n 18186: u64 [sp + 0x238] = s1\n 18190: u64 [sp + 600] = 0\n 18194: u64 [sp + 592] = 0\n 18198: u64 [sp + 584] = 0\n 18202: u64 [sp + 576] = 0\n 18206: u32 [sp + 512] = 0x20\n 18211: i32 a1 = sp + 0x220\n 18215: i32 a3 = sp + 0x240\n 18219: i32 a4 = sp + 0x200\n 18223: a2 = 0xffffffffffffffff\n 18226: a0 = 0\n 18228: ecalli 4 // 'get_storage'\n 18230: u64 [sp + 0x238] = s1\n 18234: a0 = u64 [sp + 0x68]\n 18237: u64 [sp + 0x230] = a0\n 18241: a0 = u64 [sp + 0x70]\n 18244: u64 [sp + 0x228] = a0\n 18248: a0 = u64 [sp + 0x78]\n 18251: u64 [sp + 0x220] = a0\n 18255: a0 = u64 [sp + 0x50]\n 18258: u64 [sp + 0x258] = a0\n 18262: a0 = u64 [sp + 0x58]\n 18265: u64 [sp + 0x250] = a0\n 18269: a0 = u64 [sp + 0x48]\n 18272: u64 [sp + 0x248] = a0\n 18276: a0 = u64 [sp + 0x40]\n 18279: u64 [sp + 0x240] = a0\n 18283: i32 a1 = sp + 0x220\n 18287: i32 a3 = sp + 0x240\n 18291: a2 = 0xffffffffffffffff\n 18294: a4 = 0x20\n 18297: a0 = 0\n 18299: ecalli 8 // 'set_storage'\n 18301: a1 = 0x20\n 18304: a0 = 0\n 18306: ra = 238, jump @0\n      : @281 [@dyn 119] (gas: 59)\n 18312: a2 = u64 [sp + 0x10]\n 18315: a1 = a2 >> 0x38\n 18318: u8 [a0 + 0x1f] = a1\n 18321: a1 = a2 >> 0x30\n 18324: u8 [a0 + 0x1e] = a1\n 18327: a1 = a2 >> 0x28\n 18330: u8 [a0 + 0x1d] = a1\n 18333: a1 = a2 >> 0x20\n 18336: u8 [a0 + 0x1c] = a1\n 18339: a1 = a2 >> 0x18\n 18342: u8 [a0 + 0x1b] = a1\n 18345: a1 = a2 >> 0x10\n 18348: u8 [a0 + 0x1a] = a1\n 18351: a1 = a2 >> 0x8\n 18354: u8 [a0 + 0x19] = a1\n 18357: u8 [a0 + 0x18] = a2\n 18360: a2 = u64 [sp + 0x8]\n 18363: a1 = a2 >> 0x38\n 18366: u8 [a0 + 0x17] = a1\n 18369: a1 = a2 >> 0x30\n 18372: u8 [a0 + 0x16] = a1\n 18375: a1 = a2 >> 0x28\n 18378: u8 [a0 + 0x15] = a1\n 18381: a1 = a2 >> 0x20\n 18384: u8 [a0 + 0x14] = a1\n 18387: a1 = a2 >> 0x18\n 18390: u8 [a0 + 0x13] = a1\n 18393: a1 = a2 >> 0x10\n 18396: u8 [a0 + 0x12] = a1\n 18399: a1 = a2 >> 0x8\n 18402: u8 [a0 + 0x11] = a1\n 18405: u8 [a0 + 0x10] = a2\n 18408: a2 = u64 [sp]\n 18410: a1 = a2 >> 0x38\n 18413: u8 [a0 + 0xf] = a1\n 18416: a1 = a2 >> 0x30\n 18419: u8 [a0 + 0xe] = a1\n 18422: a1 = a2 >> 0x28\n 18425: u8 [a0 + 0xd] = a1\n 18428: a1 = a2 >> 0x20\n 18431: u8 [a0 + 0xc] = a1\n 18434: a1 = a2 >> 0x18\n 18437: u8 [a0 + 0xb] = a1\n 18440: a1 = a2 >> 0x10\n 18443: u8 [a0 + 0xa] = a1\n 18446: a1 = a2 >> 0x8\n 18449: u8 [a0 + 0x9] = a1\n 18452: u8 [a0 + 0x8] = a2\n 18455: u8 [a0 + 7] = 0\n 18458: u8 [a0 + 6] = 0\n 18461: u8 [a0 + 5] = 0\n 18464: u8 [a0 + 4] = 0\n 18467: u8 [a0 + 3] = 0\n 18470: u8 [a0 + 2] = 0\n 18473: u8 [a0 + 1] = 0\n 18476: u8 [a0 + 0] = 0\n 18478: a0 = 0x20\n 18481: a1 = 0x20\n 18484: ra = 240, jump @0\n      : @282 [@dyn 120] (gas: 35)\n 18490: u8 [a0 + 31] = 0\n 18493: u8 [a0 + 30] = 0\n 18496: u8 [a0 + 29] = 0\n 18499: u8 [a0 + 28] = 0\n 18502: u8 [a0 + 27] = 0\n 18505: u8 [a0 + 26] = 0\n 18508: u8 [a0 + 25] = 0\n 18511: u8 [a0 + 24] = 0\n 18514: u8 [a0 + 23] = 0\n 18517: u8 [a0 + 22] = 0\n 18520: u8 [a0 + 21] = 0\n 18523: u8 [a0 + 20] = 0\n 18526: u8 [a0 + 19] = 0\n 18529: u8 [a0 + 18] = 0\n 18532: u8 [a0 + 17] = 0\n 18535: u8 [a0 + 16] = 0\n 18538: u8 [a0 + 15] = 0\n 18541: u8 [a0 + 14] = 0\n 18544: u8 [a0 + 13] = 0\n 18547: u8 [a0 + 12] = 0\n 18550: u8 [a0 + 11] = 0\n 18553: u8 [a0 + 10] = 0\n 18556: u8 [a0 + 9] = 0\n 18559: u8 [a0 + 8] = 0\n 18562: u8 [a0 + 7] = 0\n 18565: u8 [a0 + 6] = 0\n 18568: u8 [a0 + 5] = 0\n 18571: u8 [a0 + 4] = 0\n 18574: u8 [a0 + 3] = 0\n 18577: u8 [a0 + 2] = 0\n 18580: u8 [a0 + 1] = 0\n 18583: u8 [a0 + 0] = 0\n 18585: a1 = 0x40\n 18588: a0 = 0\n 18590: ra = 242, jump @0\n      : @283 [@dyn 121] (gas: 50)\n 18596: i32 a0 = a0 + 0\n 18598: i32 a2 = sp + 0x240\n 18602: a1 = 0x40\n 18605: ecalli 5 // 'hash_keccak_256'\n 18607: a0 = u64 [sp + 0x258]\n 18611: a1 = u64 [sp + 0x250]\n 18615: a2 = u64 [sp + 0x248]\n 18619: a3 = u64 [sp + 0x240]\n 18623: a0 = reverse a0\n 18625: a1 = reverse a1\n 18627: a4 = u64 [sp + 0xa8]\n 18631: a4 = a4 + a1\n 18634: a5 = u64 [sp + 0xa0]\n 18638: a5 = a5 + a0\n 18641: s1 = a5 <u a0\n 18644: a0 = a4 + s1\n 18647: a4 = a0 ^ a1\n 18650: a1 = a0 <u a1\n 18653: a1 = s1 if a4 == 0\n 18656: s1 = reverse a3\n 18658: a2 = reverse a2\n 18660: a3 = u64 [sp + 0xb8]\n 18664: a3 = a3 + a2\n 18667: a4 = u64 [sp + 0xb0]\n 18671: a4 = a4 + s1\n 18674: a2 = a3 <u a2\n 18677: a2 = a2 + a4\n 18680: a4 = a3 + a1\n 18683: a1 = a4 <u a3\n 18686: a1 = a1 + a2\n 18689: u64 [sp + 0x70] = a0\n 18692: u64 [sp + 0x228] = a0\n 18696: u64 [sp + 0x78] = a5\n 18699: u64 [sp + 0x220] = a5\n 18703: u64 [sp + 0x68] = a4\n 18706: u64 [sp + 0x230] = a4\n 18710: u64 [sp + 0x60] = a1\n 18713: u64 [sp + 0x238] = a1\n 18717: u64 [sp + 600] = 0\n 18721: u64 [sp + 592] = 0\n 18725: u64 [sp + 584] = 0\n 18729: u64 [sp + 576] = 0\n 18733: u32 [sp + 512] = 0x20\n 18738: i32 a1 = sp + 0x220\n 18742: i32 a3 = sp + 0x240\n 18746: i32 a4 = sp + 0x200\n 18750: a2 = 0xffffffffffffffff\n 18753: a0 = 0\n 18755: ecalli 4 // 'get_storage'\n 18757: fallthrough\n      : @284 (gas: 37)\n 18758: a3 = u64 [sp + 0x248]\n 18762: a1 = u64 [sp + 0x240]\n 18766: t0 = u64 [sp + 0x258]\n 18770: a2 = u64 [sp + 0x250]\n 18774: a5 = u64 [sp + 0x80]\n 18778: a5 = a5 + a3\n 18781: a0 = u64 [sp + 0x88]\n 18785: a0 = a0 + a1\n 18788: u64 [sp + 0x88] = a0\n 18792: a4 = a0 <u a1\n 18795: a5 = a5 + a4\n 18798: t1 = a5 ^ a3\n 18801: u64 [sp + 0x80] = a5\n 18805: a3 = a5 <u a3\n 18808: a5 = a4 ^ 0x1\n 18811: a4 = a3 if t1 != 0\n 18814: a0 = u64 [sp + 0x90]\n 18818: a0 = a0 + a2\n 18821: s1 = a0 + a4\n 18824: a4 = s1 <u a0\n 18827: a1 = u64 [sp + 0x98]\n 18831: a1 = a1 + t0\n 18834: a0 = a0 <u a2\n 18837: a0 = a0 + a1\n 18840: a4 = a4 + a0\n 18843: a0 = s1 <u a2\n 18846: a1 = a4 ^ t0\n 18849: u64 [sp + 0x98] = a4\n 18853: a4 = a4 <u t0\n 18856: a4 = a0 if a1 == 0\n 18859: a0 = a4 ^ 0x1\n 18862: a2 = a2 ^ s1\n 18865: a1 = a1 | a2\n 18868: a2 = a3 ^ 0x1\n 18871: a5 = a2 if t1 != 0\n 18874: a5 = a0 if a1 != 0\n 18877: jump @301 if a5 == 0\n      : @285 (gas: 41)\n 18881: a0 = u64 [sp + 0x68]\n 18884: u64 [sp + 0x230] = a0\n 18888: a0 = u64 [sp + 0x70]\n 18891: u64 [sp + 0x228] = a0\n 18895: a0 = u64 [sp + 0x78]\n 18898: u64 [sp + 0x220] = a0\n 18902: a0 = u64 [sp + 0x60]\n 18905: u64 [sp + 0x238] = a0\n 18909: u64 [sp + 600] = 0\n 18913: u64 [sp + 592] = 0\n 18917: u64 [sp + 584] = 0\n 18921: u64 [sp + 576] = 0\n 18925: u32 [sp + 512] = 0x20\n 18930: i32 a1 = sp + 0x220\n 18934: i32 a3 = sp + 0x240\n 18938: i32 a4 = sp + 0x200\n 18942: a2 = 0xffffffffffffffff\n 18945: a0 = 0\n 18947: ecalli 4 // 'get_storage'\n 18949: a0 = u64 [sp + 0x60]\n 18952: u64 [sp + 0x238] = a0\n 18956: a0 = u64 [sp + 0x68]\n 18959: u64 [sp + 0x230] = a0\n 18963: a0 = u64 [sp + 0x70]\n 18966: u64 [sp + 0x228] = a0\n 18970: a0 = u64 [sp + 0x78]\n 18973: u64 [sp + 0x220] = a0\n 18977: a0 = u64 [sp + 0x98]\n 18981: u64 [sp + 0x258] = a0\n 18985: u64 [sp + 0x250] = s1\n 18989: a0 = u64 [sp + 0x80]\n 18993: u64 [sp + 0x248] = a0\n 18997: a0 = u64 [sp + 0x88]\n 19001: u64 [sp + 0x240] = a0\n 19005: i32 a1 = sp + 0x220\n 19009: i32 a3 = sp + 0x240\n 19013: a2 = 0xffffffffffffffff\n 19016: a4 = 0x20\n 19019: a0 = 0\n 19021: ecalli 8 // 'set_storage'\n 19023: jump @266\n      : @286 (gas: 6)\n 19026: sp = s0 + 0xfffffffffffffd80\n 19030: ra = u64 [sp + 0x278]\n 19034: s0 = u64 [sp + 0x270]\n 19038: s1 = u64 [sp + 0x268]\n 19042: sp = sp + 0x280\n 19046: ret\n      : @287 (gas: 3)\n 19048: a0 = 0x40\n 19051: a1 = 0x20\n 19054: ra = 244, jump @0\n      : @288 [@dyn 122] (gas: 103)\n 19060: a1 = u8 [a0 + 0x11]\n 19063: a2 = u8 [a0 + 0x10]\n 19066: a3 = u8 [a0 + 0x12]\n 19069: a4 = u8 [a0 + 0x13]\n 19072: a1 = a1 << 0x8\n 19075: a1 = a1 | a2\n 19078: a3 = a3 << 0x10\n 19081: a4 = a4 << 0x18\n 19084: a3 = a3 | a4\n 19087: a1 = a1 | a3\n 19090: a2 = u8 [a0 + 0x15]\n 19093: a3 = u8 [a0 + 0x14]\n 19096: a4 = u8 [a0 + 0x16]\n 19099: a5 = u8 [a0 + 0x17]\n 19102: a2 = a2 << 0x8\n 19105: a2 = a2 | a3\n 19108: a4 = a4 << 0x10\n 19111: a5 = a5 << 0x18\n 19114: a4 = a4 | a5\n 19117: a2 = a2 | a4\n 19120: a2 = a2 << 0x20\n 19123: t0 = a2 | a1\n 19126: a2 = u8 [a0 + 0x1]\n 19129: a3 = u8 [a0]\n 19131: a4 = u8 [a0 + 0x2]\n 19134: a5 = u8 [a0 + 0x3]\n 19137: a2 = a2 << 0x8\n 19140: a2 = a2 | a3\n 19143: a4 = a4 << 0x10\n 19146: a5 = a5 << 0x18\n 19149: a4 = a4 | a5\n 19152: a2 = a2 | a4\n 19155: a3 = u8 [a0 + 0x5]\n 19158: a4 = u8 [a0 + 0x4]\n 19161: a5 = u8 [a0 + 0x6]\n 19164: s1 = u8 [a0 + 0x7]\n 19167: a3 = a3 << 0x8\n 19170: a3 = a3 | a4\n 19173: a5 = a5 << 0x10\n 19176: s1 = s1 << 0x18\n 19179: a5 = a5 | s1\n 19182: a3 = a3 | a5\n 19185: a3 = a3 << 0x20\n 19188: a2 = a2 | a3\n 19191: a3 = u8 [a0 + 0x19]\n 19194: a4 = u8 [a0 + 0x18]\n 19197: a5 = u8 [a0 + 0x1a]\n 19200: s1 = u8 [a0 + 0x1b]\n 19203: a3 = a3 << 0x8\n 19206: a3 = a3 | a4\n 19209: a5 = a5 << 0x10\n 19212: s1 = s1 << 0x18\n 19215: a5 = a5 | s1\n 19218: a3 = a3 | a5\n 19221: a4 = u8 [a0 + 0x1d]\n 19224: a5 = u8 [a0 + 0x1c]\n 19227: s1 = u8 [a0 + 0x1e]\n 19230: a1 = u8 [a0 + 0x1f]\n 19233: a4 = a4 << 0x8\n 19236: a4 = a4 | a5\n 19239: s1 = s1 << 0x10\n 19242: a1 = a1 << 0x18\n 19245: a1 = a1 | s1\n 19248: a1 = a1 | a4\n 19251: a1 = a1 << 0x20\n 19254: a3 = a3 | a1\n 19257: a1 = u8 [a0 + 0x9]\n 19260: a4 = u8 [a0 + 0x8]\n 19263: a5 = u8 [a0 + 0xa]\n 19266: s1 = u8 [a0 + 0xb]\n 19269: a1 = a1 << 0x8\n 19272: a1 = a1 | a4\n 19275: a5 = a5 << 0x10\n 19278: s1 = s1 << 0x18\n 19281: a5 = a5 | s1\n 19284: a1 = a1 | a5\n 19287: a4 = u8 [a0 + 0xd]\n 19290: a5 = u8 [a0 + 0xc]\n 19293: s1 = u8 [a0 + 0xe]\n 19296: a0 = u8 [a0 + 0xf]\n 19299: a4 = a4 << 0x8\n 19302: a4 = a4 | a5\n 19305: s1 = s1 << 0x10\n 19308: a0 = a0 << 0x18\n 19311: a0 = a0 | s1\n 19314: a0 = a0 | a4\n 19317: a0 = a0 << 0x20\n 19320: a0 = a0 | a1\n 19323: s1 = reverse a0\n 19325: a1 = reverse a3\n 19327: a2 = reverse a2\n 19329: a0 = reverse t0\n 19331: u64 [sp + 0xb8] = a0\n 19335: u64 [sp + 0xb0] = a2\n 19339: a0 = a0 | a2\n 19342: a2 = a1\n 19344: a1 = a1 | s1\n 19347: a1 = a1 | a0\n 19350: a1 = a1 >> 0x20\n 19353: a0 = a0 | s1\n 19356: a0 = a0 << 0x20\n 19359: a0 = a0 | a1\n 19362: jump @293 if a0 != 0\n      : @289 (gas: 5)\n 19366: u64 [sp + 0xa8] = a2\n 19370: i32 a0 = a2 + 0\n 19372: a1 = 0x20\n 19375: u64 [sp + 0xa0] = a0\n 19379: ra = 246, jump @0\n      : @290 [@dyn 123] (gas: 50)\n 19385: u8 [a0 + 31] = 0\n 19388: u8 [a0 + 30] = 0\n 19391: u8 [a0 + 29] = 0\n 19394: u8 [a0 + 28] = 0\n 19397: u8 [a0 + 27] = 0\n 19400: u8 [a0 + 26] = 0\n 19403: u8 [a0 + 25] = 0\n 19406: u8 [a0 + 24] = 0\n 19409: u8 [a0 + 23] = 0\n 19412: u8 [a0 + 22] = 0\n 19415: u8 [a0 + 21] = 0\n 19418: u8 [a0 + 20] = 0\n 19421: u8 [a0 + 19] = 0\n 19424: u8 [a0 + 18] = 0\n 19427: u8 [a0 + 17] = 0\n 19430: u8 [a0 + 16] = 0\n 19433: u8 [a0 + 15] = 0\n 19436: u8 [a0 + 14] = 0\n 19439: u8 [a0 + 13] = 0\n 19442: u8 [a0 + 12] = 0\n 19445: u8 [a0 + 11] = 0\n 19448: u8 [a0 + 10] = 0\n 19451: u8 [a0 + 9] = 0\n 19454: u8 [a0 + 8] = 0\n 19457: u8 [a0 + 7] = 0\n 19460: u8 [a0 + 6] = 0\n 19463: u8 [a0 + 5] = 0\n 19466: u8 [a0 + 4] = 0\n 19469: u8 [a0 + 3] = 0xa0\n 19474: u8 [a0 + 2] = 0x79\n 19478: u8 [a0 + 1] = 0xc3\n 19483: u8 [a0 + 0] = 0x8\n 19486: a1 = u64 [sp + 0xa8]\n 19490: a0 = a1 + 0x4\n 19493: a1 = a0 <u a1\n 19496: a3 = u64 [sp + 0xb8]\n 19500: a2 = a3 + a1\n 19503: a3 = a2 <u a3\n 19506: a3 = a1 if a1 == 0\n 19509: a3 = a3 + s1\n 19512: a1 = a3 <u s1\n 19515: a4 = u64 [sp + 0xb0]\n 19519: a4 = a4 + a1\n 19522: u64 [sp + 0x108] = a2\n 19526: u64 [sp + 0x100] = a0\n 19530: u64 [sp + 0x110] = a3\n 19534: a0 = sp + 0x120\n 19538: a1 = sp + 0x100\n 19542: u64 [sp + 0x118] = a4\n 19546: ra = 248, jump @256\n      : @291 [@dyn 124] (gas: 5)\n 19552: a0 = u64 [sp + 0x128]\n 19556: t0 = u64 [sp + 0x138]\n 19560: t1 = u64 [sp + 0x120]\n 19564: a3 = u64 [sp + 0x130]\n 19568: fallthrough\n      : @292 (gas: 26)\n 19569: a1 = u64 [sp + 0xb8]\n 19573: a4 = a0 ^ a1\n 19576: a5 = a0 <u a1\n 19579: t2 = a1\n 19581: a2 = u64 [sp + 0xa8]\n 19585: a1 = t1 <u a2\n 19588: a5 = a1 if a4 == 0\n 19591: a4 = a3 - s1\n 19594: a3 = a3 <u s1\n 19597: s1 = u64 [sp + 0xb0]\n 19601: s1 = t0 - s1\n 19604: s1 = s1 - a3\n 19607: a3 = a4 <u a5\n 19610: s1 = s1 - a3\n 19613: a4 = a4 - a5\n 19616: a0 = a0 - t2\n 19619: a1 = a0 - a1\n 19622: a0 = t1 - a2\n 19625: a1 = a1 | s1\n 19628: a2 = a0 | a4\n 19631: a2 = a2 | a1\n 19634: a1 = a1 | a4\n 19637: a2 = a2 >> 0x20\n 19640: a1 = a1 << 0x20\n 19643: a1 = a1 | a2\n 19646: jump @305 if a1 == 0\n      : @293 (gas: 1)\n 19650: trap\n      : @294 (gas: 3)\n 19651: a0 = 0x40\n 19654: a1 = 0x20\n 19657: ra = 250, jump @0\n      : @295 [@dyn 125] (gas: 103)\n 19663: a1 = u8 [a0 + 0x11]\n 19666: a2 = u8 [a0 + 0x10]\n 19669: a3 = u8 [a0 + 0x12]\n 19672: a4 = u8 [a0 + 0x13]\n 19675: a1 = a1 << 0x8\n 19678: a1 = a1 | a2\n 19681: a3 = a3 << 0x10\n 19684: a4 = a4 << 0x18\n 19687: a3 = a3 | a4\n 19690: a1 = a1 | a3\n 19693: a2 = u8 [a0 + 0x15]\n 19696: a3 = u8 [a0 + 0x14]\n 19699: a4 = u8 [a0 + 0x16]\n 19702: a5 = u8 [a0 + 0x17]\n 19705: a2 = a2 << 0x8\n 19708: a2 = a2 | a3\n 19711: a4 = a4 << 0x10\n 19714: a5 = a5 << 0x18\n 19717: a4 = a4 | a5\n 19720: a2 = a2 | a4\n 19723: a2 = a2 << 0x20\n 19726: t0 = a2 | a1\n 19729: a2 = u8 [a0 + 0x1]\n 19732: a3 = u8 [a0]\n 19734: a4 = u8 [a0 + 0x2]\n 19737: a5 = u8 [a0 + 0x3]\n 19740: a2 = a2 << 0x8\n 19743: a2 = a2 | a3\n 19746: a4 = a4 << 0x10\n 19749: a5 = a5 << 0x18\n 19752: a4 = a4 | a5\n 19755: a2 = a2 | a4\n 19758: a3 = u8 [a0 + 0x5]\n 19761: a4 = u8 [a0 + 0x4]\n 19764: a5 = u8 [a0 + 0x6]\n 19767: s1 = u8 [a0 + 0x7]\n 19770: a3 = a3 << 0x8\n 19773: a3 = a3 | a4\n 19776: a5 = a5 << 0x10\n 19779: s1 = s1 << 0x18\n 19782: a5 = a5 | s1\n 19785: a3 = a3 | a5\n 19788: a3 = a3 << 0x20\n 19791: a2 = a2 | a3\n 19794: a3 = u8 [a0 + 0x19]\n 19797: a4 = u8 [a0 + 0x18]\n 19800: a5 = u8 [a0 + 0x1a]\n 19803: s1 = u8 [a0 + 0x1b]\n 19806: a3 = a3 << 0x8\n 19809: a3 = a3 | a4\n 19812: a5 = a5 << 0x10\n 19815: s1 = s1 << 0x18\n 19818: a5 = a5 | s1\n 19821: a3 = a3 | a5\n 19824: a4 = u8 [a0 + 0x1d]\n 19827: a5 = u8 [a0 + 0x1c]\n 19830: s1 = u8 [a0 + 0x1e]\n 19833: a1 = u8 [a0 + 0x1f]\n 19836: a4 = a4 << 0x8\n 19839: a4 = a4 | a5\n 19842: s1 = s1 << 0x10\n 19845: a1 = a1 << 0x18\n 19848: a1 = a1 | s1\n 19851: a1 = a1 | a4\n 19854: a1 = a1 << 0x20\n 19857: a3 = a3 | a1\n 19860: a1 = u8 [a0 + 0x9]\n 19863: a4 = u8 [a0 + 0x8]\n 19866: a5 = u8 [a0 + 0xa]\n 19869: s1 = u8 [a0 + 0xb]\n 19872: a1 = a1 << 0x8\n 19875: a1 = a1 | a4\n 19878: a5 = a5 << 0x10\n 19881: s1 = s1 << 0x18\n 19884: a5 = a5 | s1\n 19887: a1 = a1 | a5\n 19890: a4 = u8 [a0 + 0xd]\n 19893: a5 = u8 [a0 + 0xc]\n 19896: s1 = u8 [a0 + 0xe]\n 19899: a0 = u8 [a0 + 0xf]\n 19902: a4 = a4 << 0x8\n 19905: a4 = a4 | a5\n 19908: s1 = s1 << 0x10\n 19911: a0 = a0 << 0x18\n 19914: a0 = a0 | s1\n 19917: a0 = a0 | a4\n 19920: a0 = a0 << 0x20\n 19923: a0 = a0 | a1\n 19926: s1 = reverse a0\n 19928: a1 = reverse a3\n 19930: a2 = reverse a2\n 19932: a0 = reverse t0\n 19934: u64 [sp + 0xb8] = a0\n 19938: u64 [sp + 0xb0] = a2\n 19942: a0 = a0 | a2\n 19945: a2 = a1\n 19947: a1 = a1 | s1\n 19950: a1 = a1 | a0\n 19953: a1 = a1 >> 0x20\n 19956: a0 = a0 | s1\n 19959: a0 = a0 << 0x20\n 19962: a0 = a0 | a1\n 19965: jump @293 if a0 != 0\n      : @296 (gas: 5)\n 19969: u64 [sp + 0xa8] = a2\n 19973: i32 a0 = a2 + 0\n 19975: a1 = 0x20\n 19978: u64 [sp + 0xa0] = a0\n 19982: ra = 252, jump @0\n      : @297 [@dyn 126] (gas: 50)\n 19988: u8 [a0 + 31] = 0\n 19991: u8 [a0 + 30] = 0\n 19994: u8 [a0 + 29] = 0\n 19997: u8 [a0 + 28] = 0\n 20000: u8 [a0 + 27] = 0\n 20003: u8 [a0 + 26] = 0\n 20006: u8 [a0 + 25] = 0\n 20009: u8 [a0 + 24] = 0\n 20012: u8 [a0 + 23] = 0\n 20015: u8 [a0 + 22] = 0\n 20018: u8 [a0 + 21] = 0\n 20021: u8 [a0 + 20] = 0\n 20024: u8 [a0 + 19] = 0\n 20027: u8 [a0 + 18] = 0\n 20030: u8 [a0 + 17] = 0\n 20033: u8 [a0 + 16] = 0\n 20036: u8 [a0 + 15] = 0\n 20039: u8 [a0 + 14] = 0\n 20042: u8 [a0 + 13] = 0\n 20045: u8 [a0 + 12] = 0\n 20048: u8 [a0 + 11] = 0\n 20051: u8 [a0 + 10] = 0\n 20054: u8 [a0 + 9] = 0\n 20057: u8 [a0 + 8] = 0\n 20060: u8 [a0 + 7] = 0\n 20063: u8 [a0 + 6] = 0\n 20066: u8 [a0 + 5] = 0\n 20069: u8 [a0 + 4] = 0\n 20072: u8 [a0 + 3] = 0xa0\n 20077: u8 [a0 + 2] = 0x79\n 20081: u8 [a0 + 1] = 0xc3\n 20086: u8 [a0 + 0] = 0x8\n 20089: a1 = u64 [sp + 0xa8]\n 20093: a0 = a1 + 0x4\n 20096: a1 = a0 <u a1\n 20099: a3 = u64 [sp + 0xb8]\n 20103: a2 = a3 + a1\n 20106: a3 = a2 <u a3\n 20109: a3 = a1 if a1 == 0\n 20112: a3 = a3 + s1\n 20115: a1 = a3 <u s1\n 20118: a4 = u64 [sp + 0xb0]\n 20122: a4 = a4 + a1\n 20125: u64 [sp + 0xc8] = a2\n 20129: u64 [sp + 0xc0] = a0\n 20133: u64 [sp + 0xd0] = a3\n 20137: a0 = sp + 0xe0\n 20141: a1 = sp + 0xc0\n 20145: u64 [sp + 0xd8] = a4\n 20149: ra = 254, jump @248\n      : @298 [@dyn 127] (gas: 5)\n 20155: a0 = u64 [sp + 0xe8]\n 20159: t0 = u64 [sp + 0xf8]\n 20163: t1 = u64 [sp + 0xe0]\n 20167: a3 = u64 [sp + 0xf0]\n 20171: jump @292\n      : @299 (gas: 8)\n 20174: u64 [sp + 368] = 0\n 20178: u64 [sp + 360] = 0\n 20182: u64 [sp + 352] = 0\n 20186: a0 = 0x4e487b7100000000\n 20196: a1 = sp + 0x160\n 20200: u64 [sp + 0x178] = a0\n 20204: a0 = 0\n 20206: ra = 256, jump @8\n      : @300 [@dyn 128] (gas: 8)\n 20212: u64 [sp + 344] = 0\n 20216: u64 [sp + 336] = 0\n 20220: u64 [sp + 320] = 0x11\n 20225: a0 = 0x4\n 20228: a1 = sp + 0x140\n 20232: u64 [sp + 328] = 0\n 20236: ra = 0x104\n 20240: jump @8\n      : @301 (gas: 8)\n 20243: u64 [sp + 432] = 0\n 20247: u64 [sp + 424] = 0\n 20251: u64 [sp + 416] = 0\n 20255: a0 = 0x4e487b7100000000\n 20265: a1 = sp + 0x1a0\n 20269: u64 [sp + 0x1b8] = a0\n 20273: a0 = 0\n 20275: ra = 258, jump @8\n      : @302 [@dyn 129] (gas: 7)\n 20281: u64 [sp + 408] = 0\n 20285: u64 [sp + 400] = 0\n 20289: u64 [sp + 384] = 0x11\n 20294: a0 = 0x4\n 20297: a1 = sp + 0x180\n 20301: u64 [sp + 392] = 0\n 20305: ra = 260, jump @8\n      : @303 [@dyn 130] (gas: 3)\n 20311: a1 = 0x24\n 20314: a0 = 0\n 20316: ra = 262, jump @0\n      : @304 [@dyn 131] (gas: 5)\n 20322: i32 a1 = a0 + 0\n 20324: a0 = 0x1\n 20327: a2 = 0x24\n 20330: ecalli 6 // 'seal_return'\n 20332: fallthrough\n      : @305 (gas: 4)\n 20333: i32 s1 = a0 + 0\n 20335: a0 = u64 [sp + 0xa0]\n 20339: a1 = s1\n 20341: ra = 264, jump @0\n      : @306 [@dyn 132] (gas: 6)\n 20347: i32 a1 = a0 + 0\n 20349: a0 = 0x1\n 20352: a2 = s1\n 20354: ra = 0x10a\n 20358: ecalli 6 // 'seal_return'\n 20360: fallthrough\n      : @307 [@dyn 133] (gas: 12)\n 20361: a1 = u64 [a0 + 0x10]\n 20364: a2 = u64 [a0 + 0x18]\n 20367: a3 = u64 [a0 + 0x8]\n 20370: a0 = u64 [a0]\n 20372: a2 = a2 | a3\n 20375: a3 = a0 | a1\n 20378: a3 = a3 | a2\n 20381: a3 = a3 >> 0x20\n 20384: a1 = a1 | a2\n 20387: a1 = a1 << 0x20\n 20390: a1 = a1 | a3\n 20393: jump @310 if a1 != 0\n      : @308 (gas: 7)\n 20397: sp = sp + 0xfffffffffffffff0\n 20400: u64 [sp + 0x8] = ra\n 20403: u64 [sp] = s0\n 20405: i32 a0 = a0 + 0\n 20407: a1 = 0x20\n 20410: s0 = 0x20\n 20413: ra = 268, jump @0\n      : @309 [@dyn 134] (gas: 40)\n 20419: u8 [a0 + 31] = 0\n 20422: u8 [a0 + 30] = 0\n 20425: u8 [a0 + 29] = 0\n 20428: u8 [a0 + 28] = 0\n 20431: u8 [a0 + 27] = 0\n 20434: u8 [a0 + 26] = 0\n 20437: u8 [a0 + 25] = 0\n 20440: u8 [a0 + 24] = 0\n 20443: u8 [a0 + 23] = 0\n 20446: u8 [a0 + 22] = 0\n 20449: u8 [a0 + 21] = 0\n 20452: u8 [a0 + 20] = 0\n 20455: u8 [a0 + 19] = 0\n 20458: u8 [a0 + 18] = 0\n 20461: u8 [a0 + 17] = 0\n 20464: u8 [a0 + 16] = 0\n 20467: u8 [a0 + 15] = 0\n 20470: u8 [a0 + 14] = 0x44\n 20474: a1 = 0x49\n 20477: u8 [a0 + 0xd] = a1\n 20480: u8 [a0 + 0xc] = s0\n 20483: u8 [a0 + 11] = 0x64\n 20487: u8 [a0 + 10] = 0x72\n 20491: a3 = 0x61\n 20494: u8 [a0 + 0x9] = a3\n 20497: a4 = 0x63\n 20500: u8 [a0 + 0x8] = a4\n 20503: u8 [a0 + 0x7] = s0\n 20506: u8 [a0 + 6] = 0x64\n 20510: u8 [a0 + 5] = 0x69\n 20514: u8 [a0 + 4] = 0x6c\n 20518: u8 [a0 + 0x3] = a3\n 20521: u8 [a0 + 2] = 0x76\n 20525: a2 = 0x6e\n 20528: u8 [a0 + 0x1] = a2\n 20531: u8 [a0] = a1\n 20533: ra = u64 [sp + 0x8]\n 20536: s0 = u64 [sp]\n 20538: sp = sp + 0x10\n 20541: ret\n      : @310 (gas: 1)\n 20543: trap\n      : @311 (gas: 17)\n 20544: sp = sp + 0xffffffffffffffa0\n 20547: u64 [sp + 0x58] = ra\n 20550: u64 [sp + 0x50] = s0\n 20553: u64 [sp + 0x48] = s1\n 20556: a3 = u64 [a1 + 0x18]\n 20559: a4 = u64 [a1 + 0x10]\n 20562: a5 = u64 [a1 + 0x8]\n 20565: s1 = u64 [a1]\n 20567: a1 = a5 | a3\n 20570: a2 = s1 | a4\n 20573: a2 = a2 | a1\n 20576: a2 = a2 >> 0x20\n 20579: a1 = a1 | a4\n 20582: a1 = a1 << 0x20\n 20585: a1 = a1 | a2\n 20588: u64 [sp + 0x28] = a0\n 20591: jump @318 if a1 != 0\n      : @312 (gas: 19)\n 20595: a0 = s1 + 0x20\n 20598: u64 [sp + 0x30] = a0\n 20601: a0 = a0 <u s1\n 20604: a1 = a5 + a0\n 20607: u64 [sp + 0x40] = a1\n 20610: u64 [sp + 0x8] = a5\n 20613: s0 = a1 <u a5\n 20616: s0 = a0 if a0 == 0\n 20619: s0 = s0 + a4\n 20622: u64 [sp + 0x10] = a4\n 20625: a0 = s0 <u a4\n 20628: u64 [sp + 0x18] = a3\n 20631: a0 = a0 + a3\n 20634: u64 [sp + 0x38] = a0\n 20637: u64 [sp] = s1\n 20639: i32 a0 = s1 + 0\n 20641: a1 = 0x20\n 20644: s1 = 0x20\n 20647: ra = 270, jump @0\n      : @313 [@dyn 135] (gas: 45)\n 20653: u8 [a0 + 0x1f] = s1\n 20656: a1 = u64 [sp + 0x30]\n 20659: s1 = a1\n 20661: a1 = a1 | s0\n 20664: a2 = u64 [sp + 0x40]\n 20667: a4 = u64 [sp + 0x38]\n 20670: a2 = a2 | a4\n 20673: a1 = a1 | a2\n 20676: a1 = a1 >> 0x20\n 20679: u64 [sp + 0x20] = s0\n 20682: a2 = a2 | s0\n 20685: a2 = a2 << 0x20\n 20688: a1 = a1 | a2\n 20691: u8 [a0 + 30] = 0\n 20694: u8 [a0 + 29] = 0\n 20697: u8 [a0 + 28] = 0\n 20700: u8 [a0 + 27] = 0\n 20703: u8 [a0 + 26] = 0\n 20706: u8 [a0 + 25] = 0\n 20709: u8 [a0 + 24] = 0\n 20712: u8 [a0 + 23] = 0\n 20715: u8 [a0 + 22] = 0\n 20718: u8 [a0 + 21] = 0\n 20721: u8 [a0 + 20] = 0\n 20724: u8 [a0 + 19] = 0\n 20727: u8 [a0 + 18] = 0\n 20730: u8 [a0 + 17] = 0\n 20733: u8 [a0 + 16] = 0\n 20736: u8 [a0 + 15] = 0\n 20739: u8 [a0 + 14] = 0\n 20742: u8 [a0 + 13] = 0\n 20745: u8 [a0 + 12] = 0\n 20748: u8 [a0 + 11] = 0\n 20751: u8 [a0 + 10] = 0\n 20754: u8 [a0 + 9] = 0\n 20757: u8 [a0 + 8] = 0\n 20760: u8 [a0 + 7] = 0\n 20763: u8 [a0 + 6] = 0\n 20766: u8 [a0 + 5] = 0\n 20769: u8 [a0 + 4] = 0\n 20772: u8 [a0 + 3] = 0\n 20775: u8 [a0 + 2] = 0\n 20778: u8 [a0 + 1] = 0\n 20781: u8 [a0 + 0] = 0\n 20783: jump @318 if a1 != 0\n      : @314 (gas: 4)\n 20787: i32 s0 = s1 + 0\n 20789: a1 = 0x20\n 20792: a0 = s0\n 20794: ra = 272, jump @0\n      : @315 [@dyn 136] (gas: 41)\n 20800: u8 [a0 + 31] = 0xf\n 20804: u8 [a0 + 30] = 0\n 20807: u8 [a0 + 29] = 0\n 20810: u8 [a0 + 28] = 0\n 20813: u8 [a0 + 27] = 0\n 20816: u8 [a0 + 26] = 0\n 20819: u8 [a0 + 25] = 0\n 20822: u8 [a0 + 24] = 0\n 20825: u8 [a0 + 23] = 0\n 20828: u8 [a0 + 22] = 0\n 20831: u8 [a0 + 21] = 0\n 20834: u8 [a0 + 20] = 0\n 20837: u8 [a0 + 19] = 0\n 20840: u8 [a0 + 18] = 0\n 20843: u8 [a0 + 17] = 0\n 20846: u8 [a0 + 16] = 0\n 20849: u8 [a0 + 15] = 0\n 20852: u8 [a0 + 14] = 0\n 20855: u8 [a0 + 13] = 0\n 20858: u8 [a0 + 12] = 0\n 20861: u8 [a0 + 11] = 0\n 20864: u8 [a0 + 10] = 0\n 20867: u8 [a0 + 9] = 0\n 20870: u8 [a0 + 8] = 0\n 20873: u8 [a0 + 7] = 0\n 20876: u8 [a0 + 6] = 0\n 20879: u8 [a0 + 5] = 0\n 20882: u8 [a0 + 4] = 0\n 20885: u8 [a0 + 3] = 0\n 20888: u8 [a0 + 2] = 0\n 20891: u8 [a0 + 1] = 0\n 20894: a1 = u64 [sp + 0x20]\n 20897: a2 = u64 [sp + 0x38]\n 20900: a1 = a1 | a2\n 20903: a2 = 0xffffffe0\n 20913: a2 = s1 <u a2\n 20916: a3 = u64 [sp + 0x40]\n 20919: a2 = 0 if a3 != 0\n 20921: a2 = 0 if a1 != 0\n 20923: u8 [a0 + 0] = 0\n 20925: jump @318 if a2 == 0\n      : @316 (gas: 3)\n 20929: i32 a0 = s0 + 0x20\n 20932: a1 = 0x20\n 20935: ra = 274, jump @0\n      : @317 [@dyn 137] (gas: 55)\n 20941: u8 [a0 + 31] = 0\n 20944: u8 [a0 + 30] = 0\n 20947: u8 [a0 + 29] = 0\n 20950: u8 [a0 + 28] = 0\n 20953: u8 [a0 + 27] = 0\n 20956: u8 [a0 + 26] = 0\n 20959: u8 [a0 + 25] = 0\n 20962: u8 [a0 + 24] = 0\n 20965: u8 [a0 + 23] = 0\n 20968: u8 [a0 + 22] = 0\n 20971: u8 [a0 + 21] = 0\n 20974: u8 [a0 + 20] = 0\n 20977: u8 [a0 + 19] = 0\n 20980: u8 [a0 + 18] = 0\n 20983: u8 [a0 + 17] = 0\n 20986: u8 [a0 + 16] = 0\n 20989: u8 [a0 + 15] = 0\n 20992: u8 [a0 + 14] = 0x44\n 20996: u8 [a0 + 13] = 0x49\n 21000: a5 = 0x20\n 21003: u8 [a0 + 0xc] = a5\n 21006: u8 [a0 + 11] = 0x64\n 21010: u8 [a0 + 10] = 0x72\n 21014: u8 [a0 + 9] = 0x61\n 21018: u8 [a0 + 8] = 0x63\n 21022: u8 [a0 + 0x7] = a5\n 21025: u8 [a0 + 6] = 0x64\n 21029: u8 [a0 + 5] = 0x69\n 21033: u8 [a0 + 4] = 0x6c\n 21037: u8 [a0 + 3] = 0x61\n 21041: u8 [a0 + 2] = 0x76\n 21045: u8 [a0 + 1] = 0x6e\n 21049: u8 [a0 + 0] = 0x49\n 21052: a1 = u64 [sp]\n 21054: a0 = a1 + 0x60\n 21057: a1 = a0 <u a1\n 21060: a3 = u64 [sp + 0x8]\n 21063: a2 = a3 + a1\n 21066: a3 = a2 <u a3\n 21069: a3 = a1 if a1 == 0\n 21072: a1 = u64 [sp + 0x10]\n 21075: a3 = a3 + a1\n 21078: a1 = a3 <u a1\n 21081: a4 = u64 [sp + 0x18]\n 21084: a1 = a1 + a4\n 21087: a4 = u64 [sp + 0x28]\n 21090: u64 [a4] = a0\n 21092: u64 [a4 + 0x8] = a2\n 21095: u64 [a4 + 0x10] = a3\n 21098: u64 [a4 + 0x18] = a1\n 21101: ra = u64 [sp + 0x58]\n 21104: s0 = u64 [sp + 0x50]\n 21107: s1 = u64 [sp + 0x48]\n 21110: sp = sp + 0x60\n 21113: ret\n      : @318 (gas: 1)\n 21115: trap\n      : @319 (gas: 17)\n 21116: sp = sp + 0xffffffffffffffa0\n 21119: u64 [sp + 0x58] = ra\n 21122: u64 [sp + 0x50] = s0\n 21125: u64 [sp + 0x48] = s1\n 21128: a3 = u64 [a1 + 0x18]\n 21131: a4 = u64 [a1 + 0x10]\n 21134: a5 = u64 [a1 + 0x8]\n 21137: s1 = u64 [a1]\n 21139: a1 = a5 | a3\n 21142: a2 = s1 | a4\n 21145: a2 = a2 | a1\n 21148: a2 = a2 >> 0x20\n 21151: a1 = a1 | a4\n 21154: a1 = a1 << 0x20\n 21157: a1 = a1 | a2\n 21160: u64 [sp + 0x28] = a0\n 21163: jump @326 if a1 != 0\n      : @320 (gas: 19)\n 21167: a0 = s1 + 0x20\n 21170: u64 [sp + 0x30] = a0\n 21173: a0 = a0 <u s1\n 21176: a1 = a5 + a0\n 21179: u64 [sp + 0x40] = a1\n 21182: u64 [sp + 0x8] = a5\n 21185: s0 = a1 <u a5\n 21188: s0 = a0 if a0 == 0\n 21191: s0 = s0 + a4\n 21194: u64 [sp + 0x10] = a4\n 21197: a0 = s0 <u a4\n 21200: u64 [sp + 0x18] = a3\n 21203: a0 = a0 + a3\n 21206: u64 [sp + 0x38] = a0\n 21209: u64 [sp] = s1\n 21211: i32 a0 = s1 + 0\n 21213: a1 = 0x20\n 21216: s1 = 0x20\n 21219: ra = 276, jump @0\n      : @321 [@dyn 138] (gas: 45)\n 21225: u8 [a0 + 0x1f] = s1\n 21228: a1 = u64 [sp + 0x30]\n 21231: s1 = a1\n 21233: a1 = a1 | s0\n 21236: a2 = u64 [sp + 0x40]\n 21239: a4 = u64 [sp + 0x38]\n 21242: a2 = a2 | a4\n 21245: a1 = a1 | a2\n 21248: a1 = a1 >> 0x20\n 21251: u64 [sp + 0x20] = s0\n 21254: a2 = a2 | s0\n 21257: a2 = a2 << 0x20\n 21260: a1 = a1 | a2\n 21263: u8 [a0 + 30] = 0\n 21266: u8 [a0 + 29] = 0\n 21269: u8 [a0 + 28] = 0\n 21272: u8 [a0 + 27] = 0\n 21275: u8 [a0 + 26] = 0\n 21278: u8 [a0 + 25] = 0\n 21281: u8 [a0 + 24] = 0\n 21284: u8 [a0 + 23] = 0\n 21287: u8 [a0 + 22] = 0\n 21290: u8 [a0 + 21] = 0\n 21293: u8 [a0 + 20] = 0\n 21296: u8 [a0 + 19] = 0\n 21299: u8 [a0 + 18] = 0\n 21302: u8 [a0 + 17] = 0\n 21305: u8 [a0 + 16] = 0\n 21308: u8 [a0 + 15] = 0\n 21311: u8 [a0 + 14] = 0\n 21314: u8 [a0 + 13] = 0\n 21317: u8 [a0 + 12] = 0\n 21320: u8 [a0 + 11] = 0\n 21323: u8 [a0 + 10] = 0\n 21326: u8 [a0 + 9] = 0\n 21329: u8 [a0 + 8] = 0\n 21332: u8 [a0 + 7] = 0\n 21335: u8 [a0 + 6] = 0\n 21338: u8 [a0 + 5] = 0\n 21341: u8 [a0 + 4] = 0\n 21344: u8 [a0 + 3] = 0\n 21347: u8 [a0 + 2] = 0\n 21350: u8 [a0 + 1] = 0\n 21353: u8 [a0 + 0] = 0\n 21355: jump @326 if a1 != 0\n      : @322 (gas: 4)\n 21359: i32 s0 = s1 + 0\n 21361: a1 = 0x20\n 21364: a0 = s0\n 21366: ra = 278, jump @0\n      : @323 [@dyn 139] (gas: 41)\n 21372: u8 [a0 + 31] = 0x1f\n 21376: u8 [a0 + 30] = 0\n 21379: u8 [a0 + 29] = 0\n 21382: u8 [a0 + 28] = 0\n 21385: u8 [a0 + 27] = 0\n 21388: u8 [a0 + 26] = 0\n 21391: u8 [a0 + 25] = 0\n 21394: u8 [a0 + 24] = 0\n 21397: u8 [a0 + 23] = 0\n 21400: u8 [a0 + 22] = 0\n 21403: u8 [a0 + 21] = 0\n 21406: u8 [a0 + 20] = 0\n 21409: u8 [a0 + 19] = 0\n 21412: u8 [a0 + 18] = 0\n 21415: u8 [a0 + 17] = 0\n 21418: u8 [a0 + 16] = 0\n 21421: u8 [a0 + 15] = 0\n 21424: u8 [a0 + 14] = 0\n 21427: u8 [a0 + 13] = 0\n 21430: u8 [a0 + 12] = 0\n 21433: u8 [a0 + 11] = 0\n 21436: u8 [a0 + 10] = 0\n 21439: u8 [a0 + 9] = 0\n 21442: u8 [a0 + 8] = 0\n 21445: u8 [a0 + 7] = 0\n 21448: u8 [a0 + 6] = 0\n 21451: u8 [a0 + 5] = 0\n 21454: u8 [a0 + 4] = 0\n 21457: u8 [a0 + 3] = 0\n 21460: u8 [a0 + 2] = 0\n 21463: u8 [a0 + 1] = 0\n 21466: a1 = u64 [sp + 0x20]\n 21469: a2 = u64 [sp + 0x38]\n 21472: a1 = a1 | a2\n 21475: a2 = 0xffffffe0\n 21485: a2 = s1 <u a2\n 21488: a3 = u64 [sp + 0x40]\n 21491: a2 = 0 if a3 != 0\n 21493: a2 = 0 if a1 != 0\n 21495: u8 [a0 + 0] = 0\n 21497: jump @326 if a2 == 0\n      : @324 (gas: 3)\n 21501: i32 a0 = s0 + 0x20\n 21504: a1 = 0x20\n 21507: ra = 280, jump @0\n      : @325 [@dyn 140] (gas: 54)\n 21513: u8 [a0 + 27] = 0x63\n 21517: u8 [a0 + 29] = 0x72\n 21521: u8 [a0 + 23] = 0x72\n 21525: u8 [a0 + 21] = 0x66\n 21529: u8 [a0 + 20] = 0x66\n 21533: u8 [a0 + 24] = 0x65\n 21537: u8 [a0 + 22] = 0x65\n 21541: u8 [a0 + 17] = 0x65\n 21545: u8 [a0 + 13] = 0x65\n 21549: u8 [a0 + 12] = 0x76\n 21553: u8 [a0 + 28] = 0x61\n 21557: u8 [a0 + 11] = 0x61\n 21561: u8 [a0 + 16] = 0x68\n 21565: u8 [a0 + 10] = 0x68\n 21569: u8 [a0 + 15] = 0x74\n 21573: u8 [a0 + 8] = 0x74\n 21577: u8 [a0 + 7] = 0x27\n 21581: u8 [a0 + 6] = 0x6e\n 21585: u8 [a0 + 30] = 0x64\n 21589: u8 [a0 + 25] = 0x64\n 21593: u8 [a0 + 4] = 0x64\n 21597: u8 [a0 + 31] = 0\n 21600: u8 [a0 + 26] = 0x20\n 21604: u8 [a0 + 18] = 0x20\n 21608: u8 [a0 + 14] = 0x20\n 21612: u8 [a0 + 9] = 0x20\n 21616: u8 [a0 + 3] = 0x20\n 21620: u8 [a0 + 2] = 0x75\n 21624: u8 [a0 + 19] = 0x6f\n 21628: u8 [a0 + 5] = 0x6f\n 21632: u8 [a0 + 1] = 0x6f\n 21636: u8 [a0 + 0] = 0x59\n 21639: a1 = u64 [sp]\n 21641: a0 = a1 + 0x60\n 21644: a1 = a0 <u a1\n 21647: a3 = u64 [sp + 0x8]\n 21650: a2 = a3 + a1\n 21653: a3 = a2 <u a3\n 21656: a3 = a1 if a1 == 0\n 21659: a1 = u64 [sp + 0x10]\n 21662: a3 = a3 + a1\n 21665: a1 = a3 <u a1\n 21668: a4 = u64 [sp + 0x18]\n 21671: a1 = a1 + a4\n 21674: a4 = u64 [sp + 0x28]\n 21677: u64 [a4] = a0\n 21679: u64 [a4 + 0x8] = a2\n 21682: u64 [a4 + 0x10] = a3\n 21685: u64 [a4 + 0x18] = a1\n 21688: ra = u64 [sp + 0x58]\n 21691: s0 = u64 [sp + 0x50]\n 21694: s1 = u64 [sp + 0x48]\n 21697: sp = sp + 0x60\n 21700: ret\n      : @326 (gas: 1)\n 21702: trap\n      : @327 (gas: 18)\n 21703: sp = sp + 0xffffffffffffff60\n 21707: u64 [sp + 0x98] = ra\n 21711: u64 [sp + 0x90] = s0\n 21715: u64 [sp + 0x88] = s1\n 21719: s0 = sp + 0xa0\n 21723: sp = sp & 0xfffffffffffffff0\n 21726: a2 = u64 [a1 + 0x18]\n 21729: u64 [sp + 0x30] = a2\n 21732: a2 = u64 [a1 + 0x10]\n 21735: u64 [sp + 0x28] = a2\n 21738: a2 = u64 [a1 + 0x8]\n 21741: u64 [sp + 0x20] = a2\n 21744: a1 = u64 [a1]\n 21746: u64 [sp + 0x18] = a1\n 21749: u64 [sp + 0x38] = a0\n 21752: a0 = 0x40\n 21755: a1 = 0x20\n 21758: ra = 282, jump @0\n      : @328 [@dyn 141] (gas: 130)\n 21764: a1 = u8 [a0 + 0x19]\n 21767: a2 = u8 [a0 + 0x18]\n 21770: a3 = u8 [a0 + 0x1a]\n 21773: a4 = u8 [a0 + 0x1b]\n 21776: a1 = a1 << 0x8\n 21779: a1 = a1 | a2\n 21782: a3 = a3 << 0x10\n 21785: a4 = a4 << 0x18\n 21788: a3 = a3 | a4\n 21791: a1 = a1 | a3\n 21794: a2 = u8 [a0 + 0x1d]\n 21797: a3 = u8 [a0 + 0x1c]\n 21800: a4 = u8 [a0 + 0x1e]\n 21803: a5 = u8 [a0 + 0x1f]\n 21806: a2 = a2 << 0x8\n 21809: a2 = a2 | a3\n 21812: a4 = a4 << 0x10\n 21815: a5 = a5 << 0x18\n 21818: a4 = a4 | a5\n 21821: a2 = a2 | a4\n 21824: a2 = a2 << 0x20\n 21827: t0 = a2 | a1\n 21830: a2 = u8 [a0 + 0x11]\n 21833: a3 = u8 [a0 + 0x10]\n 21836: a4 = u8 [a0 + 0x12]\n 21839: a5 = u8 [a0 + 0x13]\n 21842: a2 = a2 << 0x8\n 21845: a2 = a2 | a3\n 21848: a4 = a4 << 0x10\n 21851: a5 = a5 << 0x18\n 21854: a4 = a4 | a5\n 21857: a2 = a2 | a4\n 21860: a3 = u8 [a0 + 0x15]\n 21863: a4 = u8 [a0 + 0x14]\n 21866: a5 = u8 [a0 + 0x16]\n 21869: s1 = u8 [a0 + 0x17]\n 21872: a3 = a3 << 0x8\n 21875: a3 = a3 | a4\n 21878: a5 = a5 << 0x10\n 21881: s1 = s1 << 0x18\n 21884: a5 = a5 | s1\n 21887: a3 = a3 | a5\n 21890: a3 = a3 << 0x20\n 21893: a2 = a2 | a3\n 21896: a3 = u8 [a0 + 0x9]\n 21899: a4 = u8 [a0 + 0x8]\n 21902: a5 = u8 [a0 + 0xa]\n 21905: s1 = u8 [a0 + 0xb]\n 21908: a3 = a3 << 0x8\n 21911: a3 = a3 | a4\n 21914: a5 = a5 << 0x10\n 21917: s1 = s1 << 0x18\n 21920: a5 = a5 | s1\n 21923: a3 = a3 | a5\n 21926: a4 = u8 [a0 + 0xd]\n 21929: a5 = u8 [a0 + 0xc]\n 21932: s1 = u8 [a0 + 0xe]\n 21935: a1 = u8 [a0 + 0xf]\n 21938: a4 = a4 << 0x8\n 21941: a4 = a4 | a5\n 21944: s1 = s1 << 0x10\n 21947: a1 = a1 << 0x18\n 21950: a1 = a1 | s1\n 21953: a1 = a1 | a4\n 21956: a1 = a1 << 0x20\n 21959: a3 = a3 | a1\n 21962: a1 = u8 [a0 + 0x1]\n 21965: a4 = u8 [a0]\n 21967: a5 = u8 [a0 + 0x2]\n 21970: s1 = u8 [a0 + 0x3]\n 21973: a1 = a1 << 0x8\n 21976: a1 = a1 | a4\n 21979: a5 = a5 << 0x10\n 21982: s1 = s1 << 0x18\n 21985: a5 = a5 | s1\n 21988: a1 = a1 | a5\n 21991: a4 = u8 [a0 + 0x5]\n 21994: a5 = u8 [a0 + 0x4]\n 21997: s1 = u8 [a0 + 0x6]\n 22000: a0 = u8 [a0 + 0x7]\n 22003: a4 = a4 << 0x8\n 22006: a4 = a4 | a5\n 22009: s1 = s1 << 0x10\n 22012: a0 = a0 << 0x18\n 22015: a0 = a0 | s1\n 22018: a0 = a0 | a4\n 22021: a0 = a0 << 0x20\n 22024: a0 = a0 | a1\n 22027: t1 = reverse a0\n 22029: t2 = reverse a3\n 22031: s1 = reverse a2\n 22033: a5 = reverse t0\n 22035: a1 = u64 [sp + 0x18]\n 22038: a0 = a1 + 0x1f\n 22041: a1 = a0 <u a1\n 22044: a3 = u64 [sp + 0x20]\n 22047: a2 = a3 + a1\n 22050: a3 = a2 <u a3\n 22053: a3 = a1 if a1 == 0\n 22056: a1 = u64 [sp + 0x28]\n 22059: a3 = a3 + a1\n 22062: a1 = a3 <u a1\n 22065: a4 = u64 [sp + 0x30]\n 22068: a1 = a1 + a4\n 22071: a0 = a0 & 0xffffffffffffffe0\n 22074: a0 = a0 + a5\n 22077: u64 [sp + 0x28] = a5\n 22080: u64 [sp + 0x10] = a0\n 22083: a4 = a0 <u a5\n 22086: a2 = a2 + s1\n 22089: a5 = a2 + a4\n 22092: a2 = a5 ^ s1\n 22095: u64 [sp + 0x30] = s1\n 22098: a0 = a5 <u s1\n 22101: a0 = a4 if a2 == 0\n 22104: a3 = a3 + t2\n 22107: a4 = a3 + a0\n 22110: s1 = a4 <u a3\n 22113: a2 = a3 <u t2\n 22116: a1 = a1 + t1\n 22119: a1 = a1 + a2\n 22122: s1 = s1 + a1\n 22125: a1 = a4 >u 0\n 22127: a2 = s1 >u 0\n 22129: a2 = a1 if s1 == 0\n 22132: a1 = a4 | s1\n 22135: u64 [sp + 0x8] = a5\n 22138: a3 = a5 >u 0\n 22140: a3 = a2 if a1 != 0\n 22143: jump @332 if a3 != 0\n      : @329 (gas: 8)\n 22147: a1 = a4 <u t2\n 22150: a2 = s1 ^ t1\n 22153: a3 = s1 <u t1\n 22156: a3 = a1 if a2 == 0\n 22159: a1 = a4 ^ t2\n 22162: a1 = a1 | a2\n 22165: a0 = a3 if a1 != 0\n 22168: jump @332 if a0 != 0\n      : @330 (gas: 6)\n 22172: a0 = 0x40\n 22175: a1 = 0x20\n 22178: u64 [sp + 0x20] = t2\n 22181: u64 [sp + 0x18] = t1\n 22184: u64 [sp] = a4\n 22186: ra = 284, jump @0\n      : @331 [@dyn 142] (gas: 82)\n 22192: a1 = reverse s1\n 22194: a2 = u64 [sp]\n 22196: a2 = reverse a2\n 22198: a3 = u64 [sp + 0x8]\n 22201: a3 = reverse a3\n 22203: a4 = u64 [sp + 0x10]\n 22206: a4 = reverse a4\n 22208: u8 [a0 + 0x18] = a4\n 22211: a5 = a4 >> 0x38\n 22214: u8 [a0 + 0x1f] = a5\n 22217: a5 = a4 >> 0x30\n 22220: u8 [a0 + 0x1e] = a5\n 22223: a5 = a4 >> 0x28\n 22226: u8 [a0 + 0x1d] = a5\n 22229: a5 = a4 >> 0x20\n 22232: u8 [a0 + 0x1c] = a5\n 22235: a5 = a4 >> 0x18\n 22238: u8 [a0 + 0x1b] = a5\n 22241: a5 = a4 >> 0x10\n 22244: u8 [a0 + 0x1a] = a5\n 22247: a4 = a4 >> 0x8\n 22250: u8 [a0 + 0x19] = a4\n 22253: u8 [a0 + 0x10] = a3\n 22256: a4 = a3 >> 0x38\n 22259: u8 [a0 + 0x17] = a4\n 22262: a4 = a3 >> 0x30\n 22265: u8 [a0 + 0x16] = a4\n 22268: a4 = a3 >> 0x28\n 22271: u8 [a0 + 0x15] = a4\n 22274: a4 = a3 >> 0x20\n 22277: u8 [a0 + 0x14] = a4\n 22280: a4 = a3 >> 0x18\n 22283: u8 [a0 + 0x13] = a4\n 22286: a4 = a3 >> 0x10\n 22289: u8 [a0 + 0x12] = a4\n 22292: a3 = a3 >> 0x8\n 22295: u8 [a0 + 0x11] = a3\n 22298: u8 [a0 + 0x8] = a2\n 22301: a3 = a2 >> 0x38\n 22304: u8 [a0 + 0xf] = a3\n 22307: a3 = a2 >> 0x30\n 22310: u8 [a0 + 0xe] = a3\n 22313: a3 = a2 >> 0x28\n 22316: u8 [a0 + 0xd] = a3\n 22319: a3 = a2 >> 0x20\n 22322: u8 [a0 + 0xc] = a3\n 22325: a3 = a2 >> 0x18\n 22328: u8 [a0 + 0xb] = a3\n 22331: a3 = a2 >> 0x10\n 22334: u8 [a0 + 0xa] = a3\n 22337: a2 = a2 >> 0x8\n 22340: u8 [a0 + 0x9] = a2\n 22343: u8 [a0] = a1\n 22345: a2 = a1 >> 0x38\n 22348: u8 [a0 + 0x7] = a2\n 22351: a2 = a1 >> 0x30\n 22354: u8 [a0 + 0x6] = a2\n 22357: a2 = a1 >> 0x28\n 22360: u8 [a0 + 0x5] = a2\n 22363: a2 = a1 >> 0x20\n 22366: u8 [a0 + 0x4] = a2\n 22369: a2 = a1 >> 0x18\n 22372: u8 [a0 + 0x3] = a2\n 22375: a2 = a1 >> 0x10\n 22378: u8 [a0 + 0x2] = a2\n 22381: a1 = a1 >> 0x8\n 22384: u8 [a0 + 0x1] = a1\n 22387: a0 = u64 [sp + 0x38]\n 22390: a1 = u64 [sp + 0x28]\n 22393: u64 [a0] = a1\n 22395: a1 = u64 [sp + 0x18]\n 22398: u64 [a0 + 0x18] = a1\n 22401: a1 = u64 [sp + 0x30]\n 22404: u64 [a0 + 0x8] = a1\n 22407: a1 = u64 [sp + 0x20]\n 22410: u64 [a0 + 0x10] = a1\n 22413: sp = s0 + 0xffffffffffffff60\n 22417: ra = u64 [sp + 0x98]\n 22421: s0 = u64 [sp + 0x90]\n 22425: s1 = u64 [sp + 0x88]\n 22429: sp = sp + 0xa0\n 22433: ret\n      : @332 (gas: 8)\n 22435: u64 [sp + 112] = 0\n 22438: u64 [sp + 104] = 0\n 22441: u64 [sp + 96] = 0\n 22444: a0 = 0x4e487b7100000000\n 22454: a1 = sp + 0x60\n 22457: u64 [sp + 0x78] = a0\n 22460: a0 = 0\n 22462: ra = 286, jump @8\n      : @333 [@dyn 143] (gas: 7)\n 22468: u64 [sp + 88] = 0\n 22471: u64 [sp + 80] = 0\n 22474: u64 [sp + 64] = 0x41\n 22478: a0 = 0x4\n 22481: a1 = sp + 0x40\n 22484: u64 [sp + 72] = 0\n 22487: ra = 288, jump @8\n      : @334 [@dyn 144] (gas: 3)\n 22493: a1 = 0x24\n 22496: a0 = 0\n 22498: ra = 290, jump @0\n      : @335 [@dyn 145] (gas: 6)\n 22504: i32 a1 = a0 + 0\n 22506: a0 = 0x1\n 22509: a2 = 0x24\n 22512: ra = 0x124\n 22516: ecalli 6 // 'seal_return'\n 22518: fallthrough\n      : @336 [@dyn 146] (gas: 12)\n 22519: a2 = u64 [a0 + 0x10]\n 22522: a3 = u64 [a0 + 0x18]\n 22525: a4 = u64 [a0 + 0x8]\n 22528: a0 = u64 [a0]\n 22530: a3 = a3 | a4\n 22533: a4 = a0 | a2\n 22536: a4 = a4 | a3\n 22539: a4 = a4 >> 0x20\n 22542: a2 = a2 | a3\n 22545: a2 = a2 << 0x20\n 22548: a2 = a2 | a4\n 22551: jump @339 if a2 != 0\n      : @337 (gas: 13)\n 22555: sp = sp + 0xffffffffffffffe0\n 22558: u64 [sp + 0x18] = ra\n 22561: u64 [sp + 0x10] = s0\n 22564: u64 [sp + 0x8] = s1\n 22567: a2 = u64 [a1 + 0x10]\n 22570: a3 = u64 [a1 + 0x8]\n 22573: u64 [sp] = a3\n 22575: s1 = u64 [a1]\n 22577: a2 = a2 << 0x20\n 22580: s0 = a2 >> 0x20\n 22583: i32 a0 = a0 + 0\n 22585: a1 = 0x20\n 22588: ra = 294, jump @0\n      : @338 [@dyn 147] (gas: 59)\n 22594: a1 = reverse s0\n 22596: a2 = u64 [sp]\n 22598: a2 = reverse a2\n 22600: a3 = reverse s1\n 22602: a4 = a3 >> 0x38\n 22605: u8 [a0 + 0x1f] = a4\n 22608: a4 = a3 >> 0x30\n 22611: u8 [a0 + 0x1e] = a4\n 22614: a4 = a3 >> 0x28\n 22617: u8 [a0 + 0x1d] = a4\n 22620: a4 = a3 >> 0x20\n 22623: u8 [a0 + 0x1c] = a4\n 22626: a4 = a3 >> 0x18\n 22629: u8 [a0 + 0x1b] = a4\n 22632: a4 = a3 >> 0x10\n 22635: u8 [a0 + 0x1a] = a4\n 22638: a4 = a3 >> 0x8\n 22641: u8 [a0 + 0x19] = a4\n 22644: u8 [a0 + 0x18] = a3\n 22647: u8 [a0 + 0x10] = a2\n 22650: u8 [a0 + 11] = 0\n 22653: u8 [a0 + 10] = 0\n 22656: u8 [a0 + 9] = 0\n 22659: u8 [a0 + 7] = 0\n 22662: u8 [a0 + 6] = 0\n 22665: u8 [a0 + 5] = 0\n 22668: u8 [a0 + 4] = 0\n 22671: u8 [a0 + 3] = 0\n 22674: u8 [a0 + 2] = 0\n 22677: u8 [a0 + 1] = 0\n 22680: u8 [a0 + 0] = 0\n 22682: a3 = a2 >> 0x38\n 22685: u8 [a0 + 0x17] = a3\n 22688: a3 = a2 >> 0x30\n 22691: u8 [a0 + 0x16] = a3\n 22694: a3 = a2 >> 0x28\n 22697: u8 [a0 + 0x15] = a3\n 22700: a3 = a2 >> 0x20\n 22703: u8 [a0 + 0x14] = a3\n 22706: a3 = a2 >> 0x18\n 22709: u8 [a0 + 0x13] = a3\n 22712: a3 = a2 >> 0x10\n 22715: u8 [a0 + 0x12] = a3\n 22718: a2 = a2 >> 0x8\n 22721: u8 [a0 + 0x11] = a2\n 22724: u8 [a0 + 0x8] = a1\n 22727: a2 = a1 >> 0x38\n 22730: u8 [a0 + 0xf] = a2\n 22733: a2 = a1 >> 0x30\n 22736: u8 [a0 + 0xe] = a2\n 22739: a2 = a1 >> 0x28\n 22742: u8 [a0 + 0xd] = a2\n 22745: a1 = a1 >> 0x20\n 22748: u8 [a0 + 0xc] = a1\n 22751: ra = u64 [sp + 0x18]\n 22754: s0 = u64 [sp + 0x10]\n 22757: s1 = u64 [sp + 0x8]\n 22760: sp = sp + 0x20\n 22763: ret\n      : @339 (gas: 1)\n 22765: trap\n      : @340 (gas: 22)\n 22766: sp = sp + 0xfffffffffffffee0\n 22770: u64 [sp + 0x118] = ra\n 22774: u64 [sp + 0x110] = s0\n 22778: u64 [sp + 0x108] = s1\n 22782: s0 = sp + 0x120\n 22786: sp = sp & 0xffffffffffffffe0\n 22789: a4 = u64 [a1 + 0x10]\n 22792: a5 = u64 [a1 + 0x18]\n 22795: a2 = u64 [a1 + 0x8]\n 22798: a3 = u64 [a1]\n 22800: u64 [sp + 0x70] = a2\n 22803: u64 [sp + 0x58] = a5\n 22806: a1 = a2 | a5\n 22809: u64 [sp + 0x80] = a3\n 22813: a2 = a3 | a4\n 22816: a2 = a2 | a1\n 22819: a2 = a2 >> 0x20\n 22822: u64 [sp + 0x60] = a4\n 22825: a1 = a1 | a4\n 22828: a1 = a1 << 0x20\n 22831: a1 = a1 | a2\n 22834: jump @352 if a1 != 0\n      : @341 (gas: 12)\n 22838: a1 = u64 [a0 + 0x18]\n 22841: u64 [sp + 0x78] = a1\n 22844: a1 = u64 [a0 + 0x10]\n 22847: u64 [sp + 0x98] = a1\n 22851: a1 = u64 [a0 + 0x8]\n 22854: u64 [sp + 0x90] = a1\n 22858: a0 = u64 [a0]\n 22860: u64 [sp + 0x88] = a0\n 22864: a0 = i32 [sp + 0x80]\n 22868: a1 = 0x20\n 22871: u64 [sp + 0x68] = a0\n 22874: ra = 296, jump @0\n      : @342 [@dyn 148] (gas: 105)\n 22880: a1 = u8 [a0 + 0x11]\n 22883: a2 = u8 [a0 + 0x10]\n 22886: a3 = u8 [a0 + 0x12]\n 22889: a4 = u8 [a0 + 0x13]\n 22892: a1 = a1 << 0x8\n 22895: a1 = a1 | a2\n 22898: a3 = a3 << 0x10\n 22901: a4 = a4 << 0x18\n 22904: a3 = a3 | a4\n 22907: a1 = a1 | a3\n 22910: a2 = u8 [a0 + 0x15]\n 22913: a3 = u8 [a0 + 0x14]\n 22916: a4 = u8 [a0 + 0x16]\n 22919: a5 = u8 [a0 + 0x17]\n 22922: a2 = a2 << 0x8\n 22925: a2 = a2 | a3\n 22928: a4 = a4 << 0x10\n 22931: a5 = a5 << 0x18\n 22934: a4 = a4 | a5\n 22937: a2 = a2 | a4\n 22940: a2 = a2 << 0x20\n 22943: a1 = a1 | a2\n 22946: a2 = u8 [a0 + 0x19]\n 22949: a3 = u8 [a0 + 0x18]\n 22952: a4 = u8 [a0 + 0x1a]\n 22955: a5 = u8 [a0 + 0x1b]\n 22958: a2 = a2 << 0x8\n 22961: a2 = a2 | a3\n 22964: a4 = a4 << 0x10\n 22967: a5 = a5 << 0x18\n 22970: a4 = a4 | a5\n 22973: a2 = a2 | a4\n 22976: a3 = u8 [a0 + 0x1d]\n 22979: a4 = u8 [a0 + 0x1c]\n 22982: a5 = u8 [a0 + 0x1e]\n 22985: s1 = u8 [a0 + 0x1f]\n 22988: a3 = a3 << 0x8\n 22991: a3 = a3 | a4\n 22994: a5 = a5 << 0x10\n 22997: s1 = s1 << 0x18\n 23000: a5 = a5 | s1\n 23003: a3 = a3 | a5\n 23006: a3 = a3 << 0x20\n 23009: a2 = a2 | a3\n 23012: a3 = u8 [a0 + 0xd]\n 23015: a4 = u8 [a0 + 0xc]\n 23018: a5 = u8 [a0 + 0xe]\n 23021: a0 = u8 [a0 + 0xf]\n 23024: a3 = a3 << 0x8\n 23027: a3 = a3 | a4\n 23030: a5 = a5 << 0x10\n 23033: a0 = a0 << 0x18\n 23036: a0 = a0 | a5\n 23039: a0 = a0 | a3\n 23042: a2 = reverse a2\n 23044: u64 [sp + 0x50] = a2\n 23047: a1 = reverse a1\n 23049: u64 [sp + 0x48] = a1\n 23052: s1 = reverse a0\n 23054: s1 = s1 >> 0x20\n 23057: u64 [sp + 0x40] = s1\n 23060: s1 = u64 [sp + 0x78]\n 23063: u64 [sp + 0xd8] = s1\n 23067: a0 = u64 [sp + 0x98]\n 23071: u64 [sp + 0xd0] = a0\n 23075: a0 = u64 [sp + 0x90]\n 23079: u64 [sp + 0xc8] = a0\n 23083: a0 = u64 [sp + 0x88]\n 23087: u64 [sp + 0xc0] = a0\n 23091: u64 [sp + 248] = 0\n 23095: u64 [sp + 240] = 0\n 23099: u64 [sp + 232] = 0\n 23103: u64 [sp + 224] = 0\n 23107: u32 [sp + 160] = 0x20\n 23112: i32 a1 = sp + 0xc0\n 23116: i32 a3 = sp + 0xe0\n 23120: i32 a4 = sp + 0xa0\n 23124: a2 = 0xffffffffffffffff\n 23127: a0 = 0\n 23129: ecalli 4 // 'get_storage'\n 23131: a0 = u32 [sp + 0xf4]\n 23135: a0 = a0 << 0x20\n 23138: a1 = u64 [sp + 0xf8]\n 23142: a2 = u64 [sp + 0x40]\n 23145: a0 = a0 | a2\n 23148: u64 [sp + 0xd8] = s1\n 23152: a2 = u64 [sp + 0x98]\n 23156: u64 [sp + 0xd0] = a2\n 23160: a2 = u64 [sp + 0x90]\n 23164: u64 [sp + 0xc8] = a2\n 23168: a2 = u64 [sp + 0x88]\n 23172: u64 [sp + 0xc0] = a2\n 23176: u64 [sp + 0xf8] = a1\n 23180: u64 [sp + 0xf0] = a0\n 23184: a0 = u64 [sp + 0x48]\n 23187: u64 [sp + 0xe8] = a0\n 23191: a0 = u64 [sp + 0x50]\n 23194: u64 [sp + 0xe0] = a0\n 23198: i32 a1 = sp + 0xc0\n 23202: i32 a3 = sp + 0xe0\n 23206: a2 = 0xffffffffffffffff\n 23209: a4 = 0x20\n 23212: a0 = 0\n 23214: ecalli 8 // 'set_storage'\n 23216: fallthrough\n      : @343 (gas: 13)\n 23217: a0 = u64 [sp + 0x60]\n 23220: a2 = u64 [sp + 0x58]\n 23223: a2 = a2 | a0\n 23226: a0 = 0x100000000\n 23236: u64 [sp + 0x40] = a0\n 23239: a0 = 0xffffffe0\n 23249: a1 = u64 [sp + 0x80]\n 23253: a0 = a1 <u a0\n 23256: a1 = u64 [sp + 0x70]\n 23259: a0 = 0 if a1 != 0\n 23261: u64 [sp + 0x60] = a2\n 23264: a0 = 0 if a2 != 0\n 23266: jump @352 if a0 == 0\n      : @344 (gas: 20)\n 23270: a0 = u64 [sp + 0x88]\n 23274: a2 = a0 + 0x1\n 23277: u64 [sp + 0x48] = a2\n 23280: a0 = a2 <u 0x1\n 23283: a1 = u64 [sp + 0x90]\n 23287: a0 = a0 + a1\n 23290: u64 [sp + 0x58] = a0\n 23293: a0 = a0 | a2\n 23296: a0 = a0 <u 0x1\n 23299: a1 = u64 [sp + 0x98]\n 23303: a0 = a0 + a1\n 23306: u64 [sp + 0x50] = a0\n 23309: a0 = a0 <u a1\n 23312: a1 = u64 [sp + 0x78]\n 23315: a0 = a0 + a1\n 23318: u64 [sp + 0x38] = a0\n 23321: a0 = u64 [sp + 0x68]\n 23324: i32 a0 = a0 + 0x20\n 23327: a1 = 0x20\n 23330: ra = 298, jump @0\n      : @345 [@dyn 149] (gas: 137)\n 23336: a1 = u8 [a0 + 0x1]\n 23339: a2 = u8 [a0]\n 23341: a3 = u8 [a0 + 0x2]\n 23344: a4 = u8 [a0 + 0x3]\n 23347: a1 = a1 << 0x8\n 23350: a1 = a1 | a2\n 23353: a3 = a3 << 0x10\n 23356: a4 = a4 << 0x18\n 23359: a3 = a3 | a4\n 23362: a1 = a1 | a3\n 23365: a2 = u8 [a0 + 0x5]\n 23368: a3 = u8 [a0 + 0x4]\n 23371: a4 = u8 [a0 + 0x6]\n 23374: a5 = u8 [a0 + 0x7]\n 23377: a2 = a2 << 0x8\n 23380: a2 = a2 | a3\n 23383: a4 = a4 << 0x10\n 23386: a5 = a5 << 0x18\n 23389: a4 = a4 | a5\n 23392: a2 = a2 | a4\n 23395: a2 = a2 << 0x20\n 23398: t0 = a2 | a1\n 23401: a2 = u8 [a0 + 0x9]\n 23404: a3 = u8 [a0 + 0x8]\n 23407: a4 = u8 [a0 + 0xa]\n 23410: a5 = u8 [a0 + 0xb]\n 23413: a2 = a2 << 0x8\n 23416: a2 = a2 | a3\n 23419: a4 = a4 << 0x10\n 23422: a5 = a5 << 0x18\n 23425: a4 = a4 | a5\n 23428: a2 = a2 | a4\n 23431: a3 = u8 [a0 + 0xd]\n 23434: a4 = u8 [a0 + 0xc]\n 23437: a5 = u8 [a0 + 0xe]\n 23440: s1 = u8 [a0 + 0xf]\n 23443: a3 = a3 << 0x8\n 23446: a3 = a3 | a4\n 23449: a5 = a5 << 0x10\n 23452: s1 = s1 << 0x18\n 23455: a5 = a5 | s1\n 23458: a3 = a3 | a5\n 23461: a3 = a3 << 0x20\n 23464: a2 = a2 | a3\n 23467: a3 = u8 [a0 + 0x11]\n 23470: a4 = u8 [a0 + 0x10]\n 23473: a5 = u8 [a0 + 0x12]\n 23476: s1 = u8 [a0 + 0x13]\n 23479: a3 = a3 << 0x8\n 23482: a3 = a3 | a4\n 23485: a5 = a5 << 0x10\n 23488: s1 = s1 << 0x18\n 23491: a5 = a5 | s1\n 23494: a3 = a3 | a5\n 23497: a4 = u8 [a0 + 0x15]\n 23500: a5 = u8 [a0 + 0x14]\n 23503: s1 = u8 [a0 + 0x16]\n 23506: a1 = u8 [a0 + 0x17]\n 23509: a4 = a4 << 0x8\n 23512: a4 = a4 | a5\n 23515: s1 = s1 << 0x10\n 23518: a1 = a1 << 0x18\n 23521: a1 = a1 | s1\n 23524: a1 = a1 | a4\n 23527: a1 = a1 << 0x20\n 23530: a3 = a3 | a1\n 23533: a1 = u8 [a0 + 0x19]\n 23536: a4 = u8 [a0 + 0x18]\n 23539: a5 = u8 [a0 + 0x1a]\n 23542: s1 = u8 [a0 + 0x1b]\n 23545: a1 = a1 << 0x8\n 23548: a1 = a1 | a4\n 23551: a5 = a5 << 0x10\n 23554: s1 = s1 << 0x18\n 23557: a5 = a5 | s1\n 23560: a1 = a1 | a5\n 23563: a4 = u8 [a0 + 0x1d]\n 23566: a5 = u8 [a0 + 0x1c]\n 23569: s1 = u8 [a0 + 0x1e]\n 23572: a0 = u8 [a0 + 0x1f]\n 23575: a4 = a4 << 0x8\n 23578: a4 = a4 | a5\n 23581: s1 = s1 << 0x10\n 23584: a0 = a0 << 0x18\n 23587: a0 = a0 | s1\n 23590: a0 = a0 | a4\n 23593: a0 = a0 << 0x20\n 23596: a0 = a0 | a1\n 23599: u32 [sp + 160] = 0x20\n 23604: a0 = reverse a0\n 23606: u64 [sp + 0x30] = a0\n 23609: a0 = reverse a3\n 23611: u64 [sp + 0x28] = a0\n 23614: a0 = reverse a2\n 23616: u64 [sp + 0x20] = a0\n 23619: a0 = reverse t0\n 23621: u64 [sp + 0x18] = a0\n 23624: a0 = u64 [sp + 0x50]\n 23627: u64 [sp + 0xd0] = a0\n 23631: a0 = u64 [sp + 0x58]\n 23634: u64 [sp + 0xc8] = a0\n 23638: a0 = u64 [sp + 0x48]\n 23641: u64 [sp + 0xc0] = a0\n 23645: s1 = u64 [sp + 0x38]\n 23648: u64 [sp + 0xd8] = s1\n 23652: u64 [sp + 248] = 0\n 23656: u64 [sp + 240] = 0\n 23660: u64 [sp + 232] = 0\n 23664: u64 [sp + 224] = 0\n 23668: i32 a1 = sp + 0xc0\n 23672: i32 a3 = sp + 0xe0\n 23676: i32 a4 = sp + 0xa0\n 23680: a2 = 0xffffffffffffffff\n 23683: a0 = 0\n 23685: ecalli 4 // 'get_storage'\n 23687: u64 [sp + 0xd8] = s1\n 23691: a0 = u64 [sp + 0x50]\n 23694: u64 [sp + 0xd0] = a0\n 23698: a0 = u64 [sp + 0x58]\n 23701: u64 [sp + 0xc8] = a0\n 23705: a0 = u64 [sp + 0x48]\n 23708: u64 [sp + 0xc0] = a0\n 23712: a0 = u64 [sp + 0x18]\n 23715: u64 [sp + 0xf8] = a0\n 23719: a0 = u64 [sp + 0x20]\n 23722: u64 [sp + 0xf0] = a0\n 23726: a0 = u64 [sp + 0x28]\n 23729: u64 [sp + 0xe8] = a0\n 23733: a0 = u64 [sp + 0x30]\n 23736: u64 [sp + 0xe0] = a0\n 23740: i32 a1 = sp + 0xc0\n 23744: i32 a3 = sp + 0xe0\n 23748: a2 = 0xffffffffffffffff\n 23751: a4 = 0x20\n 23754: a0 = 0\n 23756: ecalli 8 // 'set_storage'\n 23758: fallthrough\n      : @346 (gas: 9)\n 23759: a0 = u64 [sp + 0x40]\n 23762: a0 = a0 + 0xffffffffffffffc0\n 23765: a1 = u64 [sp + 0x80]\n 23769: a0 = a1 <u a0\n 23772: a1 = u64 [sp + 0x70]\n 23775: a0 = 0 if a1 != 0\n 23777: a1 = u64 [sp + 0x60]\n 23780: a0 = 0 if a1 != 0\n 23782: jump @352 if a0 == 0\n      : @347 (gas: 20)\n 23786: a0 = u64 [sp + 0x88]\n 23790: a1 = a0 + 0x2\n 23793: u64 [sp + 0x48] = a1\n 23796: a0 = a1 <u a0\n 23799: a1 = u64 [sp + 0x90]\n 23803: a2 = a1 + a0\n 23806: u64 [sp + 0x58] = a2\n 23809: a1 = a2 <u a1\n 23812: a1 = a0 if a0 == 0\n 23815: a0 = u64 [sp + 0x98]\n 23819: a1 = a1 + a0\n 23822: u64 [sp + 0x50] = a1\n 23825: a0 = a1 <u a0\n 23828: a1 = u64 [sp + 0x78]\n 23831: a0 = a0 + a1\n 23834: u64 [sp + 0x40] = a0\n 23837: a0 = u64 [sp + 0x68]\n 23840: i32 a0 = a0 + 0x40\n 23843: a1 = 0x20\n 23846: ra = 300, jump @0\n      : @348 [@dyn 150] (gas: 137)\n 23852: a1 = u8 [a0 + 0x1]\n 23855: a2 = u8 [a0]\n 23857: a3 = u8 [a0 + 0x2]\n 23860: a4 = u8 [a0 + 0x3]\n 23863: a1 = a1 << 0x8\n 23866: a1 = a1 | a2\n 23869: a3 = a3 << 0x10\n 23872: a4 = a4 << 0x18\n 23875: a3 = a3 | a4\n 23878: a1 = a1 | a3\n 23881: a2 = u8 [a0 + 0x5]\n 23884: a3 = u8 [a0 + 0x4]\n 23887: a4 = u8 [a0 + 0x6]\n 23890: a5 = u8 [a0 + 0x7]\n 23893: a2 = a2 << 0x8\n 23896: a2 = a2 | a3\n 23899: a4 = a4 << 0x10\n 23902: a5 = a5 << 0x18\n 23905: a4 = a4 | a5\n 23908: a2 = a2 | a4\n 23911: a2 = a2 << 0x20\n 23914: t0 = a2 | a1\n 23917: a2 = u8 [a0 + 0x9]\n 23920: a3 = u8 [a0 + 0x8]\n 23923: a4 = u8 [a0 + 0xa]\n 23926: a5 = u8 [a0 + 0xb]\n 23929: a2 = a2 << 0x8\n 23932: a2 = a2 | a3\n 23935: a4 = a4 << 0x10\n 23938: a5 = a5 << 0x18\n 23941: a4 = a4 | a5\n 23944: a2 = a2 | a4\n 23947: a3 = u8 [a0 + 0xd]\n 23950: a4 = u8 [a0 + 0xc]\n 23953: a5 = u8 [a0 + 0xe]\n 23956: s1 = u8 [a0 + 0xf]\n 23959: a3 = a3 << 0x8\n 23962: a3 = a3 | a4\n 23965: a5 = a5 << 0x10\n 23968: s1 = s1 << 0x18\n 23971: a5 = a5 | s1\n 23974: a3 = a3 | a5\n 23977: a3 = a3 << 0x20\n 23980: a2 = a2 | a3\n 23983: a3 = u8 [a0 + 0x11]\n 23986: a4 = u8 [a0 + 0x10]\n 23989: a5 = u8 [a0 + 0x12]\n 23992: s1 = u8 [a0 + 0x13]\n 23995: a3 = a3 << 0x8\n 23998: a3 = a3 | a4\n 24001: a5 = a5 << 0x10\n 24004: s1 = s1 << 0x18\n 24007: a5 = a5 | s1\n 24010: a3 = a3 | a5\n 24013: a4 = u8 [a0 + 0x15]\n 24016: a5 = u8 [a0 + 0x14]\n 24019: s1 = u8 [a0 + 0x16]\n 24022: a1 = u8 [a0 + 0x17]\n 24025: a4 = a4 << 0x8\n 24028: a4 = a4 | a5\n 24031: s1 = s1 << 0x10\n 24034: a1 = a1 << 0x18\n 24037: a1 = a1 | s1\n 24040: a1 = a1 | a4\n 24043: a1 = a1 << 0x20\n 24046: a3 = a3 | a1\n 24049: a1 = u8 [a0 + 0x19]\n 24052: a4 = u8 [a0 + 0x18]\n 24055: a5 = u8 [a0 + 0x1a]\n 24058: s1 = u8 [a0 + 0x1b]\n 24061: a1 = a1 << 0x8\n 24064: a1 = a1 | a4\n 24067: a5 = a5 << 0x10\n 24070: s1 = s1 << 0x18\n 24073: a5 = a5 | s1\n 24076: a1 = a1 | a5\n 24079: a4 = u8 [a0 + 0x1d]\n 24082: a5 = u8 [a0 + 0x1c]\n 24085: s1 = u8 [a0 + 0x1e]\n 24088: a0 = u8 [a0 + 0x1f]\n 24091: a4 = a4 << 0x8\n 24094: a4 = a4 | a5\n 24097: s1 = s1 << 0x10\n 24100: a0 = a0 << 0x18\n 24103: a0 = a0 | s1\n 24106: a0 = a0 | a4\n 24109: a0 = a0 << 0x20\n 24112: a0 = a0 | a1\n 24115: a0 = reverse a0\n 24117: u64 [sp + 0x38] = a0\n 24120: a0 = reverse a3\n 24122: u64 [sp + 0x30] = a0\n 24125: a0 = reverse a2\n 24127: u64 [sp + 0x28] = a0\n 24130: a0 = reverse t0\n 24132: u64 [sp + 0x20] = a0\n 24135: a0 = u64 [sp + 0x50]\n 24138: u64 [sp + 0xd0] = a0\n 24142: a0 = u64 [sp + 0x58]\n 24145: u64 [sp + 0xc8] = a0\n 24149: a0 = u64 [sp + 0x48]\n 24152: u64 [sp + 0xc0] = a0\n 24156: s1 = u64 [sp + 0x40]\n 24159: u64 [sp + 0xd8] = s1\n 24163: u64 [sp + 248] = 0\n 24167: u64 [sp + 240] = 0\n 24171: u64 [sp + 232] = 0\n 24175: u64 [sp + 224] = 0\n 24179: u32 [sp + 160] = 0x20\n 24184: i32 a1 = sp + 0xc0\n 24188: i32 a3 = sp + 0xe0\n 24192: i32 a4 = sp + 0xa0\n 24196: a2 = 0xffffffffffffffff\n 24199: a0 = 0\n 24201: ecalli 4 // 'get_storage'\n 24203: u64 [sp + 0xd8] = s1\n 24207: a0 = u64 [sp + 0x50]\n 24210: u64 [sp + 0xd0] = a0\n 24214: a0 = u64 [sp + 0x58]\n 24217: u64 [sp + 0xc8] = a0\n 24221: a0 = u64 [sp + 0x48]\n 24224: u64 [sp + 0xc0] = a0\n 24228: a0 = u64 [sp + 0x20]\n 24231: u64 [sp + 0xf8] = a0\n 24235: a0 = u64 [sp + 0x28]\n 24238: u64 [sp + 0xf0] = a0\n 24242: a0 = u64 [sp + 0x30]\n 24245: u64 [sp + 0xe8] = a0\n 24249: a0 = u64 [sp + 0x38]\n 24252: u64 [sp + 0xe0] = a0\n 24256: i32 a1 = sp + 0xc0\n 24260: i32 a3 = sp + 0xe0\n 24264: a2 = 0xffffffffffffffff\n 24267: a4 = 0x20\n 24270: a0 = 0\n 24272: ecalli 8 // 'set_storage'\n 24274: fallthrough\n      : @349 (gas: 8)\n 24275: a0 = 0xffffffa0\n 24285: a1 = u64 [sp + 0x80]\n 24289: a0 = a1 <u a0\n 24292: a1 = u64 [sp + 0x70]\n 24295: a0 = 0 if a1 != 0\n 24297: a1 = u64 [sp + 0x60]\n 24300: a0 = 0 if a1 != 0\n 24302: jump @352 if a0 == 0\n      : @350 (gas: 20)\n 24306: a0 = u64 [sp + 0x88]\n 24310: a1 = a0 + 0x3\n 24313: u64 [sp + 0x80] = a1\n 24317: a0 = a1 <u a0\n 24320: a1 = u64 [sp + 0x90]\n 24324: a2 = a1 + a0\n 24327: u64 [sp + 0x88] = a2\n 24331: a1 = a2 <u a1\n 24334: a1 = a0 if a0 == 0\n 24337: a0 = u64 [sp + 0x98]\n 24341: a1 = a1 + a0\n 24344: u64 [sp + 0x90] = a1\n 24348: a0 = a1 <u a0\n 24351: a1 = u64 [sp + 0x78]\n 24354: a0 = a0 + a1\n 24357: u64 [sp + 0x98] = a0\n 24361: a0 = u64 [sp + 0x68]\n 24364: i32 a0 = a0 + 0x60\n 24367: a1 = 0x20\n 24370: ra = 302, jump @0\n      : @351 [@dyn 151] (gas: 140)\n 24376: a1 = u8 [a0 + 0x11]\n 24379: a2 = u8 [a0 + 0x10]\n 24382: a3 = u8 [a0 + 0x12]\n 24385: a4 = u8 [a0 + 0x13]\n 24388: a1 = a1 << 0x8\n 24391: a1 = a1 | a2\n 24394: a3 = a3 << 0x10\n 24397: a4 = a4 << 0x18\n 24400: a3 = a3 | a4\n 24403: t0 = a3 | a1\n 24406: a1 = u8 [a0 + 0x1]\n 24409: a2 = u8 [a0]\n 24411: a3 = u8 [a0 + 0x2]\n 24414: a4 = u8 [a0 + 0x3]\n 24417: a1 = a1 << 0x8\n 24420: a1 = a1 | a2\n 24423: a3 = a3 << 0x10\n 24426: a4 = a4 << 0x18\n 24429: a2 = a4 | a3\n 24432: t1 = a2 | a1\n 24435: a1 = u8 [a0 + 0x15]\n 24438: a3 = u8 [a0 + 0x14]\n 24441: a4 = u8 [a0 + 0x16]\n 24444: a5 = u8 [a0 + 0x17]\n 24447: a1 = a1 << 0x8\n 24450: a1 = a1 | a3\n 24453: a4 = a4 << 0x10\n 24456: a5 = a5 << 0x18\n 24459: a3 = a5 | a4\n 24462: t2 = a3 | a1\n 24465: a1 = u8 [a0 + 0x5]\n 24468: a4 = u8 [a0 + 0x4]\n 24471: a5 = u8 [a0 + 0x6]\n 24474: s1 = u8 [a0 + 0x7]\n 24477: a1 = a1 << 0x8\n 24480: a1 = a1 | a4\n 24483: a5 = a5 << 0x10\n 24486: s1 = s1 << 0x18\n 24489: a4 = s1 | a5\n 24492: ra = a4 | a1\n 24495: a1 = u8 [a0 + 0x19]\n 24498: a5 = u8 [a0 + 0x18]\n 24501: s1 = u8 [a0 + 0x1a]\n 24504: a2 = u8 [a0 + 0x1b]\n 24507: a1 = a1 << 0x8\n 24510: a1 = a1 | a5\n 24513: s1 = s1 << 0x10\n 24516: a2 = a2 << 0x18\n 24519: a2 = a2 | s1\n 24522: a5 = a2 | a1\n 24525: a1 = u8 [a0 + 0x9]\n 24528: a2 = u8 [a0 + 0x8]\n 24531: s1 = u8 [a0 + 0xa]\n 24534: a3 = u8 [a0 + 0xb]\n 24537: a1 = a1 << 0x8\n 24540: a1 = a1 | a2\n 24543: s1 = s1 << 0x10\n 24546: a3 = a3 << 0x18\n 24549: a3 = a3 | s1\n 24552: a1 = a1 | a3\n 24555: a2 = u8 [a0 + 0x1d]\n 24558: a3 = u8 [a0 + 0x1c]\n 24561: s1 = u8 [a0 + 0x1e]\n 24564: a4 = u8 [a0 + 0x1f]\n 24567: a2 = a2 << 0x8\n 24570: a2 = a2 | a3\n 24573: s1 = s1 << 0x10\n 24576: a4 = a4 << 0x18\n 24579: a4 = a4 | s1\n 24582: a2 = a2 | a4\n 24585: a3 = u8 [a0 + 0xd]\n 24588: a4 = u8 [a0 + 0xc]\n 24591: s1 = u8 [a0 + 0xe]\n 24594: a0 = u8 [a0 + 0xf]\n 24597: a3 = a3 << 0x8\n 24600: a3 = a3 | a4\n 24603: s1 = s1 << 0x10\n 24606: a0 = a0 << 0x18\n 24609: a0 = a0 | s1\n 24612: a0 = a0 | a3\n 24615: a0 = a0 | a2\n 24618: a1 = a1 | a5\n 24621: a0 = a0 << 0x20\n 24624: a0 = a0 | a1\n 24627: a1 = ra | t2\n 24630: a2 = t1 | t0\n 24633: a1 = a1 << 0x20\n 24636: a1 = a1 | a2\n 24639: a0 = a0 | a1\n 24642: u32 [sp + 160] = 0x20\n 24647: a0 = a0 >u 0\n 24649: u64 [sp + 0x78] = a0\n 24652: a0 = u64 [sp + 0x90]\n 24656: u64 [sp + 0xd0] = a0\n 24660: a0 = u64 [sp + 0x88]\n 24664: u64 [sp + 0xc8] = a0\n 24668: a0 = u64 [sp + 0x80]\n 24672: u64 [sp + 0xc0] = a0\n 24676: s1 = u64 [sp + 0x98]\n 24680: u64 [sp + 0xd8] = s1\n 24684: u64 [sp + 248] = 0\n 24688: u64 [sp + 240] = 0\n 24692: u64 [sp + 232] = 0\n 24696: u64 [sp + 224] = 0\n 24700: i32 a1 = sp + 0xc0\n 24704: i32 a3 = sp + 0xe0\n 24708: i32 a4 = sp + 0xa0\n 24712: a2 = 0xffffffffffffffff\n 24715: a0 = 0\n 24717: ecalli 4 // 'get_storage'\n 24719: a0 = u64 [sp + 0xe0]\n 24723: a1 = u64 [sp + 0xe8]\n 24727: a2 = u64 [sp + 0xf0]\n 24731: a3 = u64 [sp + 0xf8]\n 24735: a0 = a0 & 0xffffffffffffff00\n 24739: a4 = u64 [sp + 0x78]\n 24742: a0 = a0 | a4\n 24745: u64 [sp + 0xd8] = s1\n 24749: a4 = u64 [sp + 0x90]\n 24753: u64 [sp + 0xd0] = a4\n 24757: a4 = u64 [sp + 0x88]\n 24761: u64 [sp + 0xc8] = a4\n 24765: a4 = u64 [sp + 0x80]\n 24769: u64 [sp + 0xc0] = a4\n 24773: u64 [sp + 0xf8] = a3\n 24777: u64 [sp + 0xf0] = a2\n 24781: u64 [sp + 0xe8] = a1\n 24785: u64 [sp + 0xe0] = a0\n 24789: i32 a1 = sp + 0xc0\n 24793: i32 a3 = sp + 0xe0\n 24797: a2 = 0xffffffffffffffff\n 24800: a4 = 0x20\n 24803: a0 = 0\n 24805: ecalli 8 // 'set_storage'\n 24807: sp = s0 + 0xfffffffffffffee0\n 24811: ra = u64 [sp + 0x118]\n 24815: s0 = u64 [sp + 0x110]\n 24819: s1 = u64 [sp + 0x108]\n 24823: sp = sp + 0x120\n 24827: ret\n      : @352 (gas: 1)\n 24829: trap\n      : @353 (gas: 7)\n 24830: a3 = u64 [sp + 0x1f8]\n 24834: s1 = u64 [sp + 0x1f0]\n 24838: a2 = u64 [sp + 0x1e8]\n 24842: a0 = s1 | a3\n 24845: a1 = a2 <u 0x1\n 24848: a1 = 0 if a0 != 0\n 24850: jump @358 if a1 == 0\n      : @354 (gas: 49)\n 24854: a0 = u64 [sp + 0x1e0]\n 24858: u64 [sp + 0x18] = a0\n 24861: a0 = a0 + 0x1\n 24864: a1 = a0 <u 0x1\n 24867: a1 = a1 + a2\n 24870: u64 [sp + 0x1e0] = a0\n 24874: a0 = a0 | a1\n 24877: u64 [sp + 0x1e8] = a1\n 24881: a0 = a0 <u 0x1\n 24884: a0 = a0 + s1\n 24887: u64 [sp + 0x1f0] = a0\n 24891: a0 = a0 <u s1\n 24894: a0 = a0 + a3\n 24897: u64 [sp + 0x1f8] = a0\n 24901: a0 = u64 [sp + 0x50]\n 24904: u64 [sp + 0x1c8] = a0\n 24908: a0 = u64 [sp + 0x58]\n 24911: u64 [sp + 0x1c0] = a0\n 24915: a0 = u64 [sp + 0x48]\n 24918: u64 [sp + 0x1d0] = a0\n 24922: a0 = u64 [sp + 0x40]\n 24925: u64 [sp + 0x1d8] = a0\n 24929: i32 a1 = sp + 0x1c0\n 24933: u64 [sp + 0x10] = a3\n 24936: i32 a3 = sp + 0x1e0\n 24940: u64 [sp + 0x8] = a2\n 24943: a2 = 0xffffffffffffffff\n 24946: a4 = 0x20\n 24949: a0 = 0\n 24951: ecalli 8 // 'set_storage'\n 24953: a0 = u64 [sp + 0x10]\n 24956: u64 [sp + 0x138] = a0\n 24960: u64 [sp + 0x130] = s1\n 24964: a0 = u64 [sp + 0x8]\n 24967: u64 [sp + 0x128] = a0\n 24971: a0 = u64 [sp + 0x18]\n 24974: u64 [sp + 0x120] = a0\n 24978: a0 = u64 [sp + 0x40]\n 24981: u64 [sp + 0x158] = a0\n 24985: a0 = u64 [sp + 0x48]\n 24988: u64 [sp + 0x150] = a0\n 24992: a0 = u64 [sp + 0x50]\n 24995: u64 [sp + 0x148] = a0\n 24999: a0 = sp + 0x160\n 25003: a1 = sp + 0x140\n 25007: a2 = sp + 0x120\n 25011: a3 = u64 [sp + 0x58]\n 25014: u64 [sp + 0x140] = a3\n 25018: ra = 304, jump @198\n      : @355 [@dyn 152] (gas: 8)\n 25024: a0 = u64 [sp + 0x198]\n 25028: a1 = u64 [sp + 0x190]\n 25032: a2 = u64 [sp + 0x188]\n 25036: a3 = u64 [sp + 0x180]\n 25040: a0 = a0 | a2\n 25043: a1 = a1 | a3\n 25046: a0 = a0 | a1\n 25049: jump @360 if a0 != 0\n      : @356 (gas: 19)\n 25053: a2 = u64 [sp + 0x178]\n 25057: a0 = u64 [sp + 0x170]\n 25061: a1 = u64 [sp + 0x168]\n 25065: a3 = u64 [sp + 0x160]\n 25069: a4 = u64 [sp + 0x20]\n 25072: u64 [sp + 0xa0] = a4\n 25076: u64 [sp + 0xc0] = a3\n 25080: a3 = u64 [sp + 0x28]\n 25083: u64 [sp + 0xa8] = a3\n 25087: u64 [sp + 0xc8] = a1\n 25091: a1 = u64 [sp + 0x30]\n 25094: u64 [sp + 0xb0] = a1\n 25098: u64 [sp + 0xd0] = a0\n 25102: a0 = u64 [sp + 0x38]\n 25105: u64 [sp + 0xb8] = a0\n 25109: a0 = sp + 0xc0\n 25113: a1 = sp + 0xa0\n 25117: u64 [sp + 0xd8] = a2\n 25121: ra = 306, jump @340\n      : @357 [@dyn 153] (gas: 6)\n 25127: sp = s0 + 0xfffffffffffffde0\n 25131: ra = u64 [sp + 0x218]\n 25135: s0 = u64 [sp + 0x210]\n 25139: s1 = u64 [sp + 0x208]\n 25143: sp = sp + 0x220\n 25147: ret\n      : @358 (gas: 8)\n 25149: u64 [sp + 144] = 0\n 25153: u64 [sp + 136] = 0\n 25157: u64 [sp + 128] = 0\n 25161: a0 = 0x4e487b7100000000\n 25171: a1 = sp + 0x80\n 25175: u64 [sp + 0x98] = a0\n 25179: a0 = 0\n 25181: ra = 308, jump @8\n      : @359 [@dyn 154] (gas: 8)\n 25187: u64 [sp + 120] = 0\n 25190: u64 [sp + 112] = 0\n 25193: u64 [sp + 96] = 0x41\n 25197: a0 = 0x4\n 25200: a1 = sp + 0x60\n 25203: u64 [sp + 104] = 0\n 25206: ra = 0x138\n 25210: jump @8\n      : @360 (gas: 8)\n 25213: u64 [sp + 272] = 0\n 25217: u64 [sp + 264] = 0\n 25221: u64 [sp + 256] = 0\n 25225: a0 = 0x4e487b7100000000\n 25235: a1 = sp + 0x100\n 25239: u64 [sp + 0x118] = a0\n 25243: a0 = 0\n 25245: ra = 310, jump @8\n      : @361 [@dyn 155] (gas: 7)\n 25251: u64 [sp + 248] = 0\n 25255: u64 [sp + 240] = 0\n 25259: u64 [sp + 232] = 0\n 25263: a0 = 0x4\n 25266: a1 = sp + 0xe0\n 25270: u64 [sp + 224] = 0\n 25274: ra = 312, jump @8\n      : @362 [@dyn 156] (gas: 3)\n 25280: a1 = 0x24\n 25283: a0 = 0\n 25285: ra = 314, jump @0\n      : @363 [@dyn 157] (gas: 6)\n 25291: i32 a1 = a0 + 0\n 25293: a0 = 0x1\n 25296: a2 = 0x24\n 25299: ra = 0x13c\n 25303: ecalli 6 // 'seal_return'\n 25305: fallthrough\n      : @364 [@dyn 158] (gas: 24)\n 25306: sp = sp + 0xfffffffffffffe00\n 25310: u64 [sp + 0x1f8] = ra\n 25314: u64 [sp + 0x1f0] = s0\n 25318: u64 [sp + 0x1e8] = s1\n 25322: s0 = sp + 0x200\n 25326: sp = sp & 0xffffffffffffffe0\n 25329: a4 = u64 [a0 + 0x18]\n 25332: a5 = u64 [a0 + 0x10]\n 25335: a3 = u64 [a0]\n 25337: s1 = u64 [a0 + 0x8]\n 25340: a0 = a4 >u 0\n 25342: a2 = a5 >u 0\n 25344: a2 = a0 if a4 != 0\n 25347: a0 = s1 >u 0\n 25349: u64 [sp + 0x40] = a3\n 25352: a3 = a3 <u 0x9\n 25355: a3 = a3 ^ 0x1\n 25358: u64 [sp + 0x48] = s1\n 25361: a3 = a0 if s1 != 0\n 25364: u64 [sp + 0x58] = a4\n 25367: u64 [sp + 0x50] = a5\n 25370: a0 = a5 | a4\n 25373: a3 = a2 if a0 != 0\n 25376: jump @382 if a3 != 0\n      : @365 (gas: 10)\n 25380: a0 = u64 [a1 + 0x18]\n 25383: a3 = u64 [a1]\n 25385: a2 = u64 [a1 + 0x8]\n 25388: a1 = u64 [a1 + 0x10]\n 25391: u64 [sp + 0x20] = a3\n 25394: a3 = a3 <u 0x9\n 25397: a3 = 0 if a2 != 0\n 25399: a0 = a0 | a1\n 25402: a3 = 0 if a0 != 0\n 25404: jump @382 if a3 == 0\n      : @366 (gas: 19)\n 25408: i32 a0 = sp + 0x160\n 25412: ecalli 3 // 'caller'\n 25414: a0 = u64 [sp + 0x168]\n 25418: a1 = i32 [sp + 0x170]\n 25422: s1 = u64 [sp + 0x160]\n 25426: a0 = reverse a0\n 25428: a2 = a0 << 0x20\n 25431: a1 = reverse a1\n 25433: a1 = a1 >> 0x20\n 25436: a1 = a1 | a2\n 25439: u64 [sp + 0x38] = a1\n 25442: a0 = a0 >> 0x20\n 25445: a1 = reverse s1\n 25447: a1 = a1 << 0x20\n 25450: a0 = a0 | a1\n 25453: u64 [sp + 0x30] = a0\n 25456: a1 = 0x20\n 25459: a0 = 0\n 25461: ra = 318, jump @0\n      : @367 [@dyn 159] (gas: 56)\n 25467: a1 = u64 [sp + 0x30]\n 25470: a1 = reverse a1\n 25472: a2 = u64 [sp + 0x38]\n 25475: a2 = reverse a2\n 25477: a3 = s1 >> 0x18\n 25480: u8 [a0 + 0xf] = a3\n 25483: a3 = s1 >> 0x10\n 25486: u8 [a0 + 0xe] = a3\n 25489: a3 = s1 >> 0x8\n 25492: u8 [a0 + 0xd] = a3\n 25495: u8 [a0 + 0xc] = s1\n 25498: u8 [a0 + 11] = 0\n 25501: u8 [a0 + 10] = 0\n 25504: u8 [a0 + 9] = 0\n 25507: u8 [a0 + 8] = 0\n 25510: u8 [a0 + 7] = 0\n 25513: u8 [a0 + 6] = 0\n 25516: u8 [a0 + 5] = 0\n 25519: u8 [a0 + 4] = 0\n 25522: u8 [a0 + 3] = 0\n 25525: u8 [a0 + 2] = 0\n 25528: u8 [a0 + 1] = 0\n 25531: u8 [a0 + 0] = 0\n 25533: u8 [a0 + 0x18] = a2\n 25536: u8 [a0 + 0x10] = a1\n 25539: a3 = a2 >> 0x38\n 25542: u8 [a0 + 0x1f] = a3\n 25545: a3 = a2 >> 0x30\n 25548: u8 [a0 + 0x1e] = a3\n 25551: a3 = a2 >> 0x28\n 25554: u8 [a0 + 0x1d] = a3\n 25557: a3 = a2 >> 0x20\n 25560: u8 [a0 + 0x1c] = a3\n 25563: a3 = a2 >> 0x18\n 25566: u8 [a0 + 0x1b] = a3\n 25569: a3 = a2 >> 0x10\n 25572: u8 [a0 + 0x1a] = a3\n 25575: a2 = a2 >> 0x8\n 25578: u8 [a0 + 0x19] = a2\n 25581: a2 = a1 >> 0x38\n 25584: u8 [a0 + 0x17] = a2\n 25587: a2 = a1 >> 0x30\n 25590: u8 [a0 + 0x16] = a2\n 25593: a2 = a1 >> 0x28\n 25596: u8 [a0 + 0x15] = a2\n 25599: a2 = a1 >> 0x20\n 25602: u8 [a0 + 0x14] = a2\n 25605: a2 = a1 >> 0x18\n 25608: u8 [a0 + 0x13] = a2\n 25611: a2 = a1 >> 0x10\n 25614: u8 [a0 + 0x12] = a2\n 25617: a1 = a1 >> 0x8\n 25620: u8 [a0 + 0x11] = a1\n 25623: a0 = 0x20\n 25626: a1 = 0x20\n 25629: ra = 320, jump @0\n      : @368 [@dyn 160] (gas: 35)\n 25635: u8 [a0 + 31] = 0\n 25638: u8 [a0 + 30] = 0\n 25641: u8 [a0 + 29] = 0\n 25644: u8 [a0 + 28] = 0\n 25647: u8 [a0 + 27] = 0\n 25650: u8 [a0 + 26] = 0\n 25653: u8 [a0 + 25] = 0\n 25656: u8 [a0 + 24] = 0\n 25659: u8 [a0 + 23] = 0\n 25662: u8 [a0 + 22] = 0\n 25665: u8 [a0 + 21] = 0\n 25668: u8 [a0 + 20] = 0\n 25671: u8 [a0 + 19] = 0\n 25674: u8 [a0 + 18] = 0\n 25677: u8 [a0 + 17] = 0\n 25680: u8 [a0 + 16] = 0\n 25683: u8 [a0 + 15] = 0\n 25686: u8 [a0 + 14] = 0\n 25689: u8 [a0 + 13] = 0\n 25692: u8 [a0 + 12] = 0\n 25695: u8 [a0 + 11] = 0\n 25698: u8 [a0 + 10] = 0\n 25701: u8 [a0 + 9] = 0\n 25704: u8 [a0 + 8] = 0\n 25707: u8 [a0 + 7] = 0\n 25710: u8 [a0 + 6] = 0\n 25713: u8 [a0 + 5] = 0\n 25716: u8 [a0 + 4] = 0\n 25719: u8 [a0 + 3] = 0\n 25722: u8 [a0 + 2] = 0\n 25725: u8 [a0 + 1] = 0\n 25728: u8 [a0 + 0] = 0\n 25730: a1 = 0x40\n 25733: a0 = 0\n 25735: ra = 322, jump @0\n      : @369 [@dyn 161] (gas: 46)\n 25741: i32 a0 = a0 + 0\n 25743: i32 a2 = sp + 0x1c0\n 25747: a1 = 0x40\n 25750: ecalli 5 // 'hash_keccak_256'\n 25752: a0 = u64 [sp + 0x1c0]\n 25756: a1 = u64 [sp + 0x1c8]\n 25760: a2 = u64 [sp + 0x1d8]\n 25764: a3 = u64 [sp + 0x1d0]\n 25768: t0 = reverse a0\n 25770: a1 = reverse a1\n 25772: a2 = reverse a2\n 25774: a3 = reverse a3\n 25776: a4 = u64 [sp + 0x48]\n 25779: a4 = a4 + a3\n 25782: a5 = u64 [sp + 0x40]\n 25785: a5 = a5 + a2\n 25788: a2 = a5 <u a2\n 25791: a4 = a4 + a2\n 25794: s1 = a4 ^ a3\n 25797: a3 = a4 <u a3\n 25800: a3 = a2 if s1 == 0\n 25803: a2 = u64 [sp + 0x50]\n 25806: a2 = a2 + a1\n 25809: a3 = a3 + a2\n 25812: s1 = a3 <u a2\n 25815: a0 = u64 [sp + 0x58]\n 25818: a0 = a0 + t0\n 25821: a1 = a2 <u a1\n 25824: a0 = a0 + a1\n 25827: a0 = a0 + s1\n 25830: u64 [sp + 0x1a8] = a4\n 25834: u64 [sp + 0x1a0] = a5\n 25838: u64 [sp + 0x1b0] = a3\n 25842: u64 [sp + 0x1b8] = a0\n 25846: u64 [sp + 472] = 0\n 25850: u64 [sp + 464] = 0\n 25854: u64 [sp + 456] = 0\n 25858: u64 [sp + 448] = 0\n 25862: u32 [sp + 480] = 0x20\n 25867: i32 a1 = sp + 0x1a0\n 25871: i32 a3 = sp + 0x1c0\n 25875: i32 a4 = sp + 0x1e0\n 25879: a2 = 0xffffffffffffffff\n 25882: a0 = 0\n 25884: ecalli 4 // 'get_storage'\n 25886: fallthrough\n      : @370 (gas: 8)\n 25887: a0 = u64 [sp + 0x1d0]\n 25891: a1 = u64 [sp + 0x1d8]\n 25895: a2 = u64 [sp + 0x1c8]\n 25899: a3 = u64 [sp + 0x1c0]\n 25903: a1 = a1 | a2\n 25906: a0 = a0 | a3\n 25909: a0 = a0 | a1\n 25912: jump @387 if a0 == 0\n      : @371 (gas: 14)\n 25916: i32 a0 = sp + 0x180\n 25920: ecalli 3 // 'caller'\n 25922: a0 = u32 [sp + 0x190]\n 25926: u64 [sp + 0x48] = a0\n 25929: a0 = u64 [sp + 0x188]\n 25933: u64 [sp + 0x28] = a0\n 25936: s1 = u64 [sp + 0x180]\n 25940: u64 [sp + 312] = 0\n 25944: u64 [sp + 304] = 0\n 25948: u64 [sp + 288] = 0x80\n 25954: a0 = sp + 0x140\n 25958: a1 = sp + 0x120\n 25962: u64 [sp + 296] = 0\n 25966: ra = 324, jump @327\n      : @372 [@dyn 162] (gas: 16)\n 25972: a2 = u64 [sp + 0x158]\n 25976: a3 = u64 [sp + 0x150]\n 25980: a0 = u64 [sp + 0x148]\n 25984: a1 = u64 [sp + 0x140]\n 25988: u64 [sp + 0x58] = a0\n 25991: u64 [sp + 0x30] = a2\n 25994: a0 = a0 | a2\n 25997: u64 [sp + 0x50] = a1\n 26000: a1 = a1 | a3\n 26003: a1 = a1 | a0\n 26006: a1 = a1 >> 0x20\n 26009: u64 [sp + 0x38] = a3\n 26012: a0 = a0 | a3\n 26015: a0 = a0 << 0x20\n 26018: a0 = a0 | a1\n 26021: jump @393 if a0 != 0\n      : @373 (gas: 17)\n 26025: a0 = reverse s1\n 26027: a0 = a0 << 0x20\n 26030: a1 = u64 [sp + 0x28]\n 26033: a1 = reverse a1\n 26035: a2 = a1 >> 0x20\n 26038: a0 = a0 | a2\n 26041: u64 [sp + 0x28] = a0\n 26044: a1 = a1 << 0x20\n 26047: a0 = u64 [sp + 0x48]\n 26050: a0 = reverse a0\n 26052: a0 = a0 >> 0x20\n 26055: a0 = a0 | a1\n 26058: u64 [sp + 0x18] = a0\n 26061: a0 = i32 [sp + 0x50]\n 26064: a1 = 0x20\n 26067: u64 [sp + 0x48] = a0\n 26070: ra = 326, jump @0\n      : @374 [@dyn 163] (gas: 65)\n 26076: a1 = u64 [sp + 0x18]\n 26079: a1 = reverse a1\n 26081: a2 = u64 [sp + 0x28]\n 26084: a2 = reverse a2\n 26086: a3 = s1 >> 0x18\n 26089: u8 [a0 + 0xf] = a3\n 26092: a3 = s1 >> 0x10\n 26095: u8 [a0 + 0xe] = a3\n 26098: a3 = s1 >> 0x8\n 26101: u8 [a0 + 0xd] = a3\n 26104: u8 [a0 + 0xc] = s1\n 26107: u8 [a0 + 11] = 0\n 26110: u8 [a0 + 10] = 0\n 26113: u8 [a0 + 9] = 0\n 26116: u8 [a0 + 8] = 0\n 26119: u8 [a0 + 7] = 0\n 26122: u8 [a0 + 6] = 0\n 26125: u8 [a0 + 5] = 0\n 26128: u8 [a0 + 4] = 0\n 26131: u8 [a0 + 3] = 0\n 26134: u8 [a0 + 2] = 0\n 26137: u8 [a0 + 1] = 0\n 26140: u8 [a0 + 0] = 0\n 26142: u8 [a0 + 0x10] = a2\n 26145: u8 [a0 + 0x18] = a1\n 26148: a3 = a2 >> 0x38\n 26151: u8 [a0 + 0x17] = a3\n 26154: a3 = a2 >> 0x30\n 26157: u8 [a0 + 0x16] = a3\n 26160: a3 = a2 >> 0x28\n 26163: u8 [a0 + 0x15] = a3\n 26166: a3 = a2 >> 0x20\n 26169: u8 [a0 + 0x14] = a3\n 26172: a3 = a2 >> 0x18\n 26175: u8 [a0 + 0x13] = a3\n 26178: a3 = a2 >> 0x10\n 26181: u8 [a0 + 0x12] = a3\n 26184: a2 = a2 >> 0x8\n 26187: u8 [a0 + 0x11] = a2\n 26190: a2 = a1 >> 0x38\n 26193: u8 [a0 + 0x1f] = a2\n 26196: a2 = a1 >> 0x30\n 26199: u8 [a0 + 0x1e] = a2\n 26202: a2 = a1 >> 0x28\n 26205: u8 [a0 + 0x1d] = a2\n 26208: a2 = a1 >> 0x20\n 26211: u8 [a0 + 0x1c] = a2\n 26214: a2 = a1 >> 0x18\n 26217: u8 [a0 + 0x1b] = a2\n 26220: a2 = a1 >> 0x10\n 26223: u8 [a0 + 0x1a] = a2\n 26226: a1 = a1 >> 0x8\n 26229: a2 = u64 [sp + 0x30]\n 26232: a4 = u64 [sp + 0x38]\n 26235: a4 = a4 | a2\n 26238: s1 = 0x100000000\n 26248: a2 = 0xffffffe0\n 26258: a3 = u64 [sp + 0x50]\n 26261: a2 = a3 <u a2\n 26264: a3 = u64 [sp + 0x58]\n 26267: a2 = 0 if a3 != 0\n 26269: u64 [sp + 0x28] = a4\n 26272: a2 = 0 if a4 != 0\n 26274: u8 [a0 + 0x19] = a1\n 26277: jump @393 if a2 == 0\n      : @375 (gas: 4)\n 26281: a0 = u64 [sp + 0x48]\n 26284: i32 a0 = a0 + 0x20\n 26287: a1 = 0x20\n 26290: ra = 328, jump @0\n      : @376 [@dyn 164] (gas: 41)\n 26296: a1 = u64 [sp + 0x40]\n 26299: u8 [a0 + 0x1f] = a1\n 26302: u8 [a0 + 30] = 0\n 26305: u8 [a0 + 29] = 0\n 26308: u8 [a0 + 28] = 0\n 26311: u8 [a0 + 27] = 0\n 26314: u8 [a0 + 26] = 0\n 26317: u8 [a0 + 25] = 0\n 26320: u8 [a0 + 24] = 0\n 26323: u8 [a0 + 23] = 0\n 26326: u8 [a0 + 22] = 0\n 26329: u8 [a0 + 21] = 0\n 26332: u8 [a0 + 20] = 0\n 26335: u8 [a0 + 19] = 0\n 26338: u8 [a0 + 18] = 0\n 26341: u8 [a0 + 17] = 0\n 26344: u8 [a0 + 16] = 0\n 26347: u8 [a0 + 15] = 0\n 26350: u8 [a0 + 14] = 0\n 26353: u8 [a0 + 13] = 0\n 26356: u8 [a0 + 12] = 0\n 26359: u8 [a0 + 11] = 0\n 26362: u8 [a0 + 10] = 0\n 26365: u8 [a0 + 9] = 0\n 26368: u8 [a0 + 8] = 0\n 26371: u8 [a0 + 7] = 0\n 26374: u8 [a0 + 6] = 0\n 26377: u8 [a0 + 5] = 0\n 26380: u8 [a0 + 4] = 0\n 26383: u8 [a0 + 3] = 0\n 26386: u8 [a0 + 2] = 0\n 26389: u8 [a0 + 1] = 0\n 26392: a1 = s1 + 0xffffffffffffffc0\n 26395: s1 = u64 [sp + 0x50]\n 26398: a1 = s1 <u a1\n 26401: a2 = u64 [sp + 0x58]\n 26404: a1 = 0 if a2 != 0\n 26406: a2 = u64 [sp + 0x28]\n 26409: a1 = 0 if a2 != 0\n 26411: u8 [a0 + 0] = 0\n 26413: jump @393 if a1 == 0\n      : @377 (gas: 4)\n 26417: a0 = u64 [sp + 0x48]\n 26420: i32 a0 = a0 + 0x40\n 26423: a1 = 0x20\n 26426: ra = 330, jump @0\n      : @378 [@dyn 165] (gas: 40)\n 26432: a1 = u64 [sp + 0x20]\n 26435: u8 [a0 + 0x1f] = a1\n 26438: a1 = 0xffffffa0\n 26448: a1 = s1 <u a1\n 26451: a2 = u64 [sp + 0x58]\n 26454: a1 = 0 if a2 != 0\n 26456: a2 = u64 [sp + 0x28]\n 26459: a1 = 0 if a2 != 0\n 26461: u8 [a0 + 30] = 0\n 26464: u8 [a0 + 29] = 0\n 26467: u8 [a0 + 28] = 0\n 26470: u8 [a0 + 27] = 0\n 26473: u8 [a0 + 26] = 0\n 26476: u8 [a0 + 25] = 0\n 26479: u8 [a0 + 24] = 0\n 26482: u8 [a0 + 23] = 0\n 26485: u8 [a0 + 22] = 0\n 26488: u8 [a0 + 21] = 0\n 26491: u8 [a0 + 20] = 0\n 26494: u8 [a0 + 19] = 0\n 26497: u8 [a0 + 18] = 0\n 26500: u8 [a0 + 17] = 0\n 26503: u8 [a0 + 16] = 0\n 26506: u8 [a0 + 15] = 0\n 26509: u8 [a0 + 14] = 0\n 26512: u8 [a0 + 13] = 0\n 26515: u8 [a0 + 12] = 0\n 26518: u8 [a0 + 11] = 0\n 26521: u8 [a0 + 10] = 0\n 26524: u8 [a0 + 9] = 0\n 26527: u8 [a0 + 8] = 0\n 26530: u8 [a0 + 7] = 0\n 26533: u8 [a0 + 6] = 0\n 26536: u8 [a0 + 5] = 0\n 26539: u8 [a0 + 4] = 0\n 26542: u8 [a0 + 3] = 0\n 26545: u8 [a0 + 2] = 0\n 26548: u8 [a0 + 1] = 0\n 26551: u8 [a0 + 0] = 0\n 26553: jump @393 if a1 == 0\n      : @379 (gas: 4)\n 26557: a0 = u64 [sp + 0x48]\n 26560: i32 a0 = a0 + 0x60\n 26563: a1 = 0x20\n 26566: ra = 332, jump @0\n      : @380 [@dyn 166] (gas: 84)\n 26572: u8 [a0 + 31] = 0x1\n 26576: u8 [a0 + 30] = 0\n 26579: u8 [a0 + 29] = 0\n 26582: u8 [a0 + 28] = 0\n 26585: u8 [a0 + 27] = 0\n 26588: u8 [a0 + 26] = 0\n 26591: u8 [a0 + 25] = 0\n 26594: u8 [a0 + 24] = 0\n 26597: u8 [a0 + 23] = 0\n 26600: u8 [a0 + 22] = 0\n 26603: u8 [a0 + 21] = 0\n 26606: u8 [a0 + 20] = 0\n 26609: u8 [a0 + 19] = 0\n 26612: u8 [a0 + 18] = 0\n 26615: u8 [a0 + 17] = 0\n 26618: u8 [a0 + 16] = 0\n 26621: u8 [a0 + 15] = 0\n 26624: u8 [a0 + 14] = 0\n 26627: u8 [a0 + 13] = 0\n 26630: u8 [a0 + 12] = 0\n 26633: u8 [a0 + 11] = 0\n 26636: u8 [a0 + 10] = 0\n 26639: u8 [a0 + 9] = 0\n 26642: u8 [a0 + 8] = 0\n 26645: u8 [a0 + 7] = 0\n 26648: u8 [a0 + 6] = 0\n 26651: u8 [a0 + 5] = 0\n 26654: u8 [a0 + 4] = 0\n 26657: u8 [a0 + 3] = 0\n 26660: u8 [a0 + 2] = 0\n 26663: u8 [a0 + 1] = 0\n 26666: u8 [a0 + 0] = 0\n 26668: a0 = u64 [sp + 0x30]\n 26671: u64 [sp + 0xf8] = a0\n 26675: a0 = u64 [sp + 0x38]\n 26678: u64 [sp + 0xf0] = a0\n 26682: a0 = u64 [sp + 0x58]\n 26685: u64 [sp + 0xe8] = a0\n 26689: u64 [sp + 0xe0] = s1\n 26693: u64 [sp + 280] = 0\n 26697: u64 [sp + 272] = 0\n 26701: u64 [sp + 264] = 0\n 26705: a0 = sp + 0x100\n 26709: a1 = sp + 0xe0\n 26713: u64 [sp + 256] = 0x1\n 26718: ra = 0x14e\n 26722: sp = sp + 0xfffffffffffffde0\n 26726: u64 [sp + 0x218] = ra\n 26730: u64 [sp + 0x210] = s0\n 26734: u64 [sp + 0x208] = s1\n 26738: s0 = sp + 0x220\n 26742: sp = sp & 0xffffffffffffffe0\n 26745: a2 = u64 [a1 + 0x18]\n 26748: u64 [sp + 0x38] = a2\n 26751: a2 = u64 [a1 + 0x10]\n 26754: u64 [sp + 0x30] = a2\n 26757: a2 = u64 [a1 + 0x8]\n 26760: u64 [sp + 0x28] = a2\n 26763: a1 = u64 [a1]\n 26765: u64 [sp + 0x20] = a1\n 26768: a3 = u64 [a0 + 0x18]\n 26771: a2 = u64 [a0 + 0x10]\n 26774: a1 = u64 [a0 + 0x8]\n 26777: a0 = u64 [a0]\n 26779: u64 [sp + 0x40] = a3\n 26782: u64 [sp + 0x1d8] = a3\n 26786: u64 [sp + 0x48] = a2\n 26789: u64 [sp + 0x1d0] = a2\n 26793: u64 [sp + 0x50] = a1\n 26796: u64 [sp + 0x1c8] = a1\n 26800: u64 [sp + 0x58] = a0\n 26803: u64 [sp + 0x1c0] = a0\n 26807: u64 [sp + 504] = 0\n 26811: u64 [sp + 496] = 0\n 26815: u64 [sp + 488] = 0\n 26819: u64 [sp + 480] = 0\n 26823: u32 [sp + 416] = 0x20\n 26828: i32 a1 = sp + 0x1c0\n 26832: i32 a3 = sp + 0x1e0\n 26836: i32 a4 = sp + 0x1a0\n 26840: a2 = 0xffffffffffffffff\n 26843: a0 = 0\n 26845: ecalli 4 // 'get_storage'\n 26847: jump @353\n      : @381 [@dyn 167] (gas: 6)\n 26850: sp = s0 + 0xfffffffffffffe00\n 26854: ra = u64 [sp + 0x1f8]\n 26858: s0 = u64 [sp + 0x1f0]\n 26862: s1 = u64 [sp + 0x1e8]\n 26866: sp = sp + 0x200\n 26870: ret\n      : @382 (gas: 3)\n 26872: a0 = 0x40\n 26875: a1 = 0x20\n 26878: ra = 336, jump @0\n      : @383 [@dyn 168] (gas: 103)\n 26884: a1 = u8 [a0 + 0x11]\n 26887: a2 = u8 [a0 + 0x10]\n 26890: a3 = u8 [a0 + 0x12]\n 26893: a4 = u8 [a0 + 0x13]\n 26896: a1 = a1 << 0x8\n 26899: a1 = a1 | a2\n 26902: a3 = a3 << 0x10\n 26905: a4 = a4 << 0x18\n 26908: a3 = a3 | a4\n 26911: a1 = a1 | a3\n 26914: a2 = u8 [a0 + 0x15]\n 26917: a3 = u8 [a0 + 0x14]\n 26920: a4 = u8 [a0 + 0x16]\n 26923: a5 = u8 [a0 + 0x17]\n 26926: a2 = a2 << 0x8\n 26929: a2 = a2 | a3\n 26932: a4 = a4 << 0x10\n 26935: a5 = a5 << 0x18\n 26938: a4 = a4 | a5\n 26941: a2 = a2 | a4\n 26944: a2 = a2 << 0x20\n 26947: t0 = a2 | a1\n 26950: a2 = u8 [a0 + 0x1]\n 26953: a3 = u8 [a0]\n 26955: a4 = u8 [a0 + 0x2]\n 26958: a5 = u8 [a0 + 0x3]\n 26961: a2 = a2 << 0x8\n 26964: a2 = a2 | a3\n 26967: a4 = a4 << 0x10\n 26970: a5 = a5 << 0x18\n 26973: a4 = a4 | a5\n 26976: a2 = a2 | a4\n 26979: a3 = u8 [a0 + 0x5]\n 26982: a4 = u8 [a0 + 0x4]\n 26985: a5 = u8 [a0 + 0x6]\n 26988: s1 = u8 [a0 + 0x7]\n 26991: a3 = a3 << 0x8\n 26994: a3 = a3 | a4\n 26997: a5 = a5 << 0x10\n 27000: s1 = s1 << 0x18\n 27003: a5 = a5 | s1\n 27006: a3 = a3 | a5\n 27009: a3 = a3 << 0x20\n 27012: a2 = a2 | a3\n 27015: a3 = u8 [a0 + 0x19]\n 27018: a4 = u8 [a0 + 0x18]\n 27021: a5 = u8 [a0 + 0x1a]\n 27024: s1 = u8 [a0 + 0x1b]\n 27027: a3 = a3 << 0x8\n 27030: a3 = a3 | a4\n 27033: a5 = a5 << 0x10\n 27036: s1 = s1 << 0x18\n 27039: a5 = a5 | s1\n 27042: a3 = a3 | a5\n 27045: a4 = u8 [a0 + 0x1d]\n 27048: a5 = u8 [a0 + 0x1c]\n 27051: s1 = u8 [a0 + 0x1e]\n 27054: a1 = u8 [a0 + 0x1f]\n 27057: a4 = a4 << 0x8\n 27060: a4 = a4 | a5\n 27063: s1 = s1 << 0x10\n 27066: a1 = a1 << 0x18\n 27069: a1 = a1 | s1\n 27072: a1 = a1 | a4\n 27075: a1 = a1 << 0x20\n 27078: a3 = a3 | a1\n 27081: a1 = u8 [a0 + 0x9]\n 27084: a4 = u8 [a0 + 0x8]\n 27087: a5 = u8 [a0 + 0xa]\n 27090: s1 = u8 [a0 + 0xb]\n 27093: a1 = a1 << 0x8\n 27096: a1 = a1 | a4\n 27099: a5 = a5 << 0x10\n 27102: s1 = s1 << 0x18\n 27105: a5 = a5 | s1\n 27108: a1 = a1 | a5\n 27111: a4 = u8 [a0 + 0xd]\n 27114: a5 = u8 [a0 + 0xc]\n 27117: s1 = u8 [a0 + 0xe]\n 27120: a0 = u8 [a0 + 0xf]\n 27123: a4 = a4 << 0x8\n 27126: a4 = a4 | a5\n 27129: s1 = s1 << 0x10\n 27132: a0 = a0 << 0x18\n 27135: a0 = a0 | s1\n 27138: a0 = a0 | a4\n 27141: a0 = a0 << 0x20\n 27144: a0 = a0 | a1\n 27147: s1 = reverse a0\n 27149: a1 = reverse a3\n 27151: a2 = reverse a2\n 27153: a0 = reverse t0\n 27155: u64 [sp + 0x58] = a0\n 27158: u64 [sp + 0x50] = a2\n 27161: a0 = a0 | a2\n 27164: a2 = a1\n 27166: a1 = a1 | s1\n 27169: a1 = a1 | a0\n 27172: a1 = a1 >> 0x20\n 27175: a0 = a0 | s1\n 27178: a0 = a0 << 0x20\n 27181: a0 = a0 | a1\n 27184: jump @393 if a0 != 0\n      : @384 (gas: 5)\n 27188: u64 [sp + 0x48] = a2\n 27191: i32 a0 = a2 + 0\n 27193: a1 = 0x20\n 27196: u64 [sp + 0x40] = a0\n 27199: ra = 338, jump @0\n      : @385 [@dyn 169] (gas: 50)\n 27205: u8 [a0 + 31] = 0\n 27208: u8 [a0 + 30] = 0\n 27211: u8 [a0 + 29] = 0\n 27214: u8 [a0 + 28] = 0\n 27217: u8 [a0 + 27] = 0\n 27220: u8 [a0 + 26] = 0\n 27223: u8 [a0 + 25] = 0\n 27226: u8 [a0 + 24] = 0\n 27229: u8 [a0 + 23] = 0\n 27232: u8 [a0 + 22] = 0\n 27235: u8 [a0 + 21] = 0\n 27238: u8 [a0 + 20] = 0\n 27241: u8 [a0 + 19] = 0\n 27244: u8 [a0 + 18] = 0\n 27247: u8 [a0 + 17] = 0\n 27250: u8 [a0 + 16] = 0\n 27253: u8 [a0 + 15] = 0\n 27256: u8 [a0 + 14] = 0\n 27259: u8 [a0 + 13] = 0\n 27262: u8 [a0 + 12] = 0\n 27265: u8 [a0 + 11] = 0\n 27268: u8 [a0 + 10] = 0\n 27271: u8 [a0 + 9] = 0\n 27274: u8 [a0 + 8] = 0\n 27277: u8 [a0 + 7] = 0\n 27280: u8 [a0 + 6] = 0\n 27283: u8 [a0 + 5] = 0\n 27286: u8 [a0 + 4] = 0\n 27289: u8 [a0 + 3] = 0xa0\n 27294: u8 [a0 + 2] = 0x79\n 27298: u8 [a0 + 1] = 0xc3\n 27303: u8 [a0 + 0] = 0x8\n 27306: a1 = u64 [sp + 0x48]\n 27309: a0 = a1 + 0x4\n 27312: a1 = a0 <u a1\n 27315: a3 = u64 [sp + 0x58]\n 27318: a2 = a3 + a1\n 27321: a3 = a2 <u a3\n 27324: a3 = a1 if a1 == 0\n 27327: a3 = a3 + s1\n 27330: a1 = a3 <u s1\n 27333: a4 = u64 [sp + 0x50]\n 27336: a4 = a4 + a1\n 27339: u64 [sp + 0x68] = a2\n 27342: u64 [sp + 0x60] = a0\n 27345: u64 [sp + 0x70] = a3\n 27348: a0 = sp + 0x80\n 27352: a1 = sp + 0x60\n 27355: u64 [sp + 0x78] = a4\n 27358: ra = 340, jump @311\n      : @386 [@dyn 170] (gas: 5)\n 27364: a0 = u64 [sp + 0x88]\n 27368: t0 = u64 [sp + 0x98]\n 27372: t1 = u64 [sp + 0x80]\n 27376: a3 = u64 [sp + 0x90]\n 27380: jump @392\n      : @387 (gas: 3)\n 27383: a0 = 0x40\n 27386: a1 = 0x20\n 27389: ra = 342, jump @0\n      : @388 [@dyn 171] (gas: 103)\n 27395: a1 = u8 [a0 + 0x11]\n 27398: a2 = u8 [a0 + 0x10]\n 27401: a3 = u8 [a0 + 0x12]\n 27404: a4 = u8 [a0 + 0x13]\n 27407: a1 = a1 << 0x8\n 27410: a1 = a1 | a2\n 27413: a3 = a3 << 0x10\n 27416: a4 = a4 << 0x18\n 27419: a3 = a3 | a4\n 27422: a1 = a1 | a3\n 27425: a2 = u8 [a0 + 0x15]\n 27428: a3 = u8 [a0 + 0x14]\n 27431: a4 = u8 [a0 + 0x16]\n 27434: a5 = u8 [a0 + 0x17]\n 27437: a2 = a2 << 0x8\n 27440: a2 = a2 | a3\n 27443: a4 = a4 << 0x10\n 27446: a5 = a5 << 0x18\n 27449: a4 = a4 | a5\n 27452: a2 = a2 | a4\n 27455: a2 = a2 << 0x20\n 27458: t0 = a2 | a1\n 27461: a2 = u8 [a0 + 0x1]\n 27464: a3 = u8 [a0]\n 27466: a4 = u8 [a0 + 0x2]\n 27469: a5 = u8 [a0 + 0x3]\n 27472: a2 = a2 << 0x8\n 27475: a2 = a2 | a3\n 27478: a4 = a4 << 0x10\n 27481: a5 = a5 << 0x18\n 27484: a4 = a4 | a5\n 27487: a2 = a2 | a4\n 27490: a3 = u8 [a0 + 0x5]\n 27493: a4 = u8 [a0 + 0x4]\n 27496: a5 = u8 [a0 + 0x6]\n 27499: s1 = u8 [a0 + 0x7]\n 27502: a3 = a3 << 0x8\n 27505: a3 = a3 | a4\n 27508: a5 = a5 << 0x10\n 27511: s1 = s1 << 0x18\n 27514: a5 = a5 | s1\n 27517: a3 = a3 | a5\n 27520: a3 = a3 << 0x20\n 27523: a2 = a2 | a3\n 27526: a3 = u8 [a0 + 0x19]\n 27529: a4 = u8 [a0 + 0x18]\n 27532: a5 = u8 [a0 + 0x1a]\n 27535: s1 = u8 [a0 + 0x1b]\n 27538: a3 = a3 << 0x8\n 27541: a3 = a3 | a4\n 27544: a5 = a5 << 0x10\n 27547: s1 = s1 << 0x18\n 27550: a5 = a5 | s1\n 27553: a3 = a3 | a5\n 27556: a4 = u8 [a0 + 0x1d]\n 27559: a5 = u8 [a0 + 0x1c]\n 27562: s1 = u8 [a0 + 0x1e]\n 27565: a1 = u8 [a0 + 0x1f]\n 27568: a4 = a4 << 0x8\n 27571: a4 = a4 | a5\n 27574: s1 = s1 << 0x10\n 27577: a1 = a1 << 0x18\n 27580: a1 = a1 | s1\n 27583: a1 = a1 | a4\n 27586: a1 = a1 << 0x20\n 27589: a3 = a3 | a1\n 27592: a1 = u8 [a0 + 0x9]\n 27595: a4 = u8 [a0 + 0x8]\n 27598: a5 = u8 [a0 + 0xa]\n 27601: s1 = u8 [a0 + 0xb]\n 27604: a1 = a1 << 0x8\n 27607: a1 = a1 | a4\n 27610: a5 = a5 << 0x10\n 27613: s1 = s1 << 0x18\n 27616: a5 = a5 | s1\n 27619: a1 = a1 | a5\n 27622: a4 = u8 [a0 + 0xd]\n 27625: a5 = u8 [a0 + 0xc]\n 27628: s1 = u8 [a0 + 0xe]\n 27631: a0 = u8 [a0 + 0xf]\n 27634: a4 = a4 << 0x8\n 27637: a4 = a4 | a5\n 27640: s1 = s1 << 0x10\n 27643: a0 = a0 << 0x18\n 27646: a0 = a0 | s1\n 27649: a0 = a0 | a4\n 27652: a0 = a0 << 0x20\n 27655: a0 = a0 | a1\n 27658: s1 = reverse a0\n 27660: a1 = reverse a3\n 27662: a2 = reverse a2\n 27664: a0 = reverse t0\n 27666: u64 [sp + 0x58] = a0\n 27669: u64 [sp + 0x50] = a2\n 27672: a0 = a0 | a2\n 27675: a2 = a1\n 27677: a1 = a1 | s1\n 27680: a1 = a1 | a0\n 27683: a1 = a1 >> 0x20\n 27686: a0 = a0 | s1\n 27689: a0 = a0 << 0x20\n 27692: a0 = a0 | a1\n 27695: jump @393 if a0 != 0\n      : @389 (gas: 5)\n 27699: u64 [sp + 0x48] = a2\n 27702: i32 a0 = a2 + 0\n 27704: a1 = 0x20\n 27707: u64 [sp + 0x40] = a0\n 27710: ra = 344, jump @0\n      : @390 [@dyn 172] (gas: 50)\n 27716: u8 [a0 + 31] = 0\n 27719: u8 [a0 + 30] = 0\n 27722: u8 [a0 + 29] = 0\n 27725: u8 [a0 + 28] = 0\n 27728: u8 [a0 + 27] = 0\n 27731: u8 [a0 + 26] = 0\n 27734: u8 [a0 + 25] = 0\n 27737: u8 [a0 + 24] = 0\n 27740: u8 [a0 + 23] = 0\n 27743: u8 [a0 + 22] = 0\n 27746: u8 [a0 + 21] = 0\n 27749: u8 [a0 + 20] = 0\n 27752: u8 [a0 + 19] = 0\n 27755: u8 [a0 + 18] = 0\n 27758: u8 [a0 + 17] = 0\n 27761: u8 [a0 + 16] = 0\n 27764: u8 [a0 + 15] = 0\n 27767: u8 [a0 + 14] = 0\n 27770: u8 [a0 + 13] = 0\n 27773: u8 [a0 + 12] = 0\n 27776: u8 [a0 + 11] = 0\n 27779: u8 [a0 + 10] = 0\n 27782: u8 [a0 + 9] = 0\n 27785: u8 [a0 + 8] = 0\n 27788: u8 [a0 + 7] = 0\n 27791: u8 [a0 + 6] = 0\n 27794: u8 [a0 + 5] = 0\n 27797: u8 [a0 + 4] = 0\n 27800: u8 [a0 + 3] = 0xa0\n 27805: u8 [a0 + 2] = 0x79\n 27809: u8 [a0 + 1] = 0xc3\n 27814: u8 [a0 + 0] = 0x8\n 27817: a1 = u64 [sp + 0x48]\n 27820: a0 = a1 + 0x4\n 27823: a1 = a0 <u a1\n 27826: a3 = u64 [sp + 0x58]\n 27829: a2 = a3 + a1\n 27832: a3 = a2 <u a3\n 27835: a3 = a1 if a1 == 0\n 27838: a3 = a3 + s1\n 27841: a1 = a3 <u s1\n 27844: a4 = u64 [sp + 0x50]\n 27847: a4 = a4 + a1\n 27850: u64 [sp + 0xa8] = a2\n 27854: u64 [sp + 0xa0] = a0\n 27858: u64 [sp + 0xb0] = a3\n 27862: a0 = sp + 0xc0\n 27866: a1 = sp + 0xa0\n 27870: u64 [sp + 0xb8] = a4\n 27874: ra = 346, jump @319\n      : @391 [@dyn 173] (gas: 5)\n 27880: a0 = u64 [sp + 0xc8]\n 27884: t0 = u64 [sp + 0xd8]\n 27888: t1 = u64 [sp + 0xc0]\n 27892: a3 = u64 [sp + 0xd0]\n 27896: fallthrough\n      : @392 (gas: 26)\n 27897: a1 = u64 [sp + 0x58]\n 27900: a4 = a0 ^ a1\n 27903: a5 = a0 <u a1\n 27906: t2 = a1\n 27908: a2 = u64 [sp + 0x48]\n 27911: a1 = t1 <u a2\n 27914: a5 = a1 if a4 == 0\n 27917: a4 = a3 - s1\n 27920: a3 = a3 <u s1\n 27923: s1 = u64 [sp + 0x50]\n 27926: s1 = t0 - s1\n 27929: s1 = s1 - a3\n 27932: a3 = a4 <u a5\n 27935: s1 = s1 - a3\n 27938: a4 = a4 - a5\n 27941: a0 = a0 - t2\n 27944: a1 = a0 - a1\n 27947: a0 = t1 - a2\n 27950: a1 = a1 | s1\n 27953: a2 = a0 | a4\n 27956: a2 = a2 | a1\n 27959: a1 = a1 | a4\n 27962: a2 = a2 >> 0x20\n 27965: a1 = a1 << 0x20\n 27968: a1 = a1 | a2\n 27971: jump @394 if a1 == 0\n      : @393 (gas: 1)\n 27974: trap\n      : @394 (gas: 4)\n 27975: i32 s1 = a0 + 0\n 27977: a0 = u64 [sp + 0x40]\n 27980: a1 = s1\n 27982: ra = 348, jump @0\n      : @395 [@dyn 174] (gas: 6)\n 27988: i32 a1 = a0 + 0\n 27990: a0 = 0x1\n 27993: a2 = s1\n 27995: ra = 0x15e\n 27999: ecalli 6 // 'seal_return'\n 28001: fallthrough\n      : @396 [@dyn 175] (gas: 6)\n 28002: u64 [a0 + 24] = 0\n 28005: u64 [a0 + 16] = 0\n 28008: u64 [a0 + 8] = 0\n 28011: a1 = 0x60\n 28014: u64 [a0] = a1\n 28016: ret\n      : @397 (gas: 14)\n 28018: sp = sp + 0xffffffffffffff10\n 28022: u64 [sp + 0xe8] = ra\n 28026: u64 [sp + 0xe0] = s0\n 28030: u64 [sp + 0xd8] = s1\n 28034: s0 = sp + 0xf0\n 28038: sp = sp & 0xfffffffffffffff0\n 28041: a2 = u64 [a1 + 0x18]\n 28044: a4 = u64 [a1 + 0x10]\n 28047: a5 = u64 [a1 + 0x8]\n 28050: s1 = a4 | a2\n 28053: a3 = a5 <u 0x1\n 28056: a3 = 0 if s1 != 0\n 28058: u64 [sp + 0x48] = a0\n 28061: jump @403 if a3 == 0\n      : @398 (gas: 30)\n 28065: s1 = u64 [a1]\n 28067: a0 = a4 >> 0x3b\n 28070: u64 [sp + 0x20] = a2\n 28073: a1 = a2 << 0x5\n 28076: a0 = a0 | a1\n 28079: a1 = a5 >> 0x3b\n 28082: u64 [sp + 0x28] = a4\n 28085: a2 = a4 << 0x5\n 28088: a1 = a1 | a2\n 28091: a2 = s1 >> 0x3b\n 28094: u64 [sp + 0x10] = a5\n 28097: a3 = a5 << 0x5\n 28100: a2 = a2 | a3\n 28103: u64 [sp + 0x18] = s1\n 28106: a3 = s1 << 0x5\n 28109: a4 = a3 + 0x20\n 28112: a3 = a4 <u a3\n 28115: a5 = a2 + a3\n 28118: a2 = a5 <u a2\n 28121: a2 = a3 if a3 == 0\n 28124: a2 = a2 + a1\n 28127: a1 = a2 <u a1\n 28130: a3 = a0 + a1\n 28133: u64 [sp + 0x90] = a4\n 28137: u64 [sp + 0x98] = a5\n 28141: u64 [sp + 0xa0] = a2\n 28145: a0 = sp + 0xb0\n 28149: a1 = sp + 0x90\n 28153: u64 [sp + 0xa8] = a3\n 28157: ra = 352, jump @327\n      : @399 [@dyn 176] (gas: 15)\n 28163: a0 = u64 [sp + 0xc8]\n 28167: a2 = u64 [sp + 0xc0]\n 28171: a1 = u64 [sp + 0xb8]\n 28175: a3 = u64 [sp + 0xb0]\n 28179: u64 [sp + 0x38] = a0\n 28182: u64 [sp + 0x30] = a1\n 28185: a0 = a0 | a1\n 28188: a1 = a3 | a2\n 28191: a1 = a1 | a0\n 28194: a1 = a1 >> 0x20\n 28197: u64 [sp + 0x40] = a2\n 28200: a0 = a0 | a2\n 28203: a0 = a0 << 0x20\n 28206: a0 = a0 | a1\n 28209: jump @402 if a0 != 0\n      : @400 (gas: 4)\n 28213: i32 a0 = a3 + 0\n 28215: a1 = 0x20\n 28218: u64 [sp + 0x8] = a3\n 28221: ra = 354, jump @0\n      : @401 [@dyn 177] (gas: 83)\n 28227: a1 = u64 [sp + 0x20]\n 28230: a1 = reverse a1\n 28232: a2 = u64 [sp + 0x28]\n 28235: a2 = reverse a2\n 28237: a3 = u64 [sp + 0x10]\n 28240: a3 = reverse a3\n 28242: a4 = u64 [sp + 0x18]\n 28245: a4 = reverse a4\n 28247: a5 = a4 >> 0x38\n 28250: u8 [a0 + 0x1f] = a5\n 28253: a5 = a4 >> 0x30\n 28256: u8 [a0 + 0x1e] = a5\n 28259: a5 = a4 >> 0x28\n 28262: u8 [a0 + 0x1d] = a5\n 28265: a5 = a4 >> 0x20\n 28268: u8 [a0 + 0x1c] = a5\n 28271: a5 = a4 >> 0x18\n 28274: u8 [a0 + 0x1b] = a5\n 28277: a5 = a4 >> 0x10\n 28280: u8 [a0 + 0x1a] = a5\n 28283: a5 = a4 >> 0x8\n 28286: u8 [a0 + 0x19] = a5\n 28289: u8 [a0 + 0x18] = a4\n 28292: u8 [a0 + 0x10] = a3\n 28295: a4 = a3 >> 0x38\n 28298: u8 [a0 + 0x17] = a4\n 28301: a4 = a3 >> 0x30\n 28304: u8 [a0 + 0x16] = a4\n 28307: a4 = a3 >> 0x28\n 28310: u8 [a0 + 0x15] = a4\n 28313: a4 = a3 >> 0x20\n 28316: u8 [a0 + 0x14] = a4\n 28319: a4 = a3 >> 0x18\n 28322: u8 [a0 + 0x13] = a4\n 28325: a4 = a3 >> 0x10\n 28328: u8 [a0 + 0x12] = a4\n 28331: a3 = a3 >> 0x8\n 28334: u8 [a0 + 0x11] = a3\n 28337: u8 [a0 + 0x8] = a2\n 28340: a3 = a2 >> 0x38\n 28343: u8 [a0 + 0xf] = a3\n 28346: a3 = a2 >> 0x30\n 28349: u8 [a0 + 0xe] = a3\n 28352: a3 = a2 >> 0x28\n 28355: u8 [a0 + 0xd] = a3\n 28358: a3 = a2 >> 0x20\n 28361: u8 [a0 + 0xc] = a3\n 28364: a3 = a2 >> 0x18\n 28367: u8 [a0 + 0xb] = a3\n 28370: a3 = a2 >> 0x10\n 28373: u8 [a0 + 0xa] = a3\n 28376: a2 = a2 >> 0x8\n 28379: u8 [a0 + 0x9] = a2\n 28382: u8 [a0] = a1\n 28384: a2 = a1 >> 0x38\n 28387: u8 [a0 + 0x7] = a2\n 28390: a2 = a1 >> 0x30\n 28393: u8 [a0 + 0x6] = a2\n 28396: a2 = a1 >> 0x28\n 28399: u8 [a0 + 0x5] = a2\n 28402: a2 = a1 >> 0x20\n 28405: u8 [a0 + 0x4] = a2\n 28408: a2 = a1 >> 0x18\n 28411: u8 [a0 + 0x3] = a2\n 28414: a2 = a1 >> 0x10\n 28417: u8 [a0 + 0x2] = a2\n 28420: a1 = a1 >> 0x8\n 28423: u8 [a0 + 0x1] = a1\n 28426: a0 = u64 [sp + 0x48]\n 28429: a1 = u64 [sp + 0x8]\n 28432: u64 [a0] = a1\n 28434: a1 = u64 [sp + 0x38]\n 28437: u64 [a0 + 0x18] = a1\n 28440: a1 = u64 [sp + 0x30]\n 28443: u64 [a0 + 0x8] = a1\n 28446: a1 = u64 [sp + 0x40]\n 28449: u64 [a0 + 0x10] = a1\n 28452: sp = s0 + 0xffffffffffffff10\n 28456: ra = u64 [sp + 0xe8]\n 28460: s0 = u64 [sp + 0xe0]\n 28464: s1 = u64 [sp + 0xd8]\n 28468: sp = sp + 0xf0\n 28472: ret\n      : @402 (gas: 1)\n 28474: trap\n      : @403 (gas: 8)\n 28475: u64 [sp + 128] = 0\n 28479: u64 [sp + 120] = 0\n 28482: u64 [sp + 112] = 0\n 28485: a0 = 0x4e487b7100000000\n 28495: a1 = sp + 0x70\n 28498: u64 [sp + 0x88] = a0\n 28502: a0 = 0\n 28504: ra = 356, jump @8\n      : @404 [@dyn 178] (gas: 7)\n 28510: u64 [sp + 104] = 0\n 28513: u64 [sp + 96] = 0\n 28516: u64 [sp + 80] = 0x41\n 28520: a0 = 0x4\n 28523: a1 = sp + 0x50\n 28526: u64 [sp + 88] = 0\n 28529: ra = 358, jump @8\n      : @405 [@dyn 179] (gas: 3)\n 28535: a1 = 0x24\n 28538: a0 = 0\n 28540: ra = 360, jump @0\n      : @406 [@dyn 180] (gas: 6)\n 28546: i32 a1 = a0 + 0\n 28548: a0 = 0x1\n 28551: a2 = 0x24\n 28554: ra = 0x16a\n 28558: ecalli 6 // 'seal_return'\n 28560: fallthrough\n      : @407 [@dyn 181] (gas: 14)\n 28561: sp = sp + 0xffffffffffffffa0\n 28564: u64 [sp + 0x58] = ra\n 28567: u64 [sp + 0x50] = s0\n 28570: u64 [sp + 0x48] = s1\n 28573: s0 = sp + 0x60\n 28576: sp = sp & 0xfffffffffffffff0\n 28579: s1 = a0\n 28581: u64 [sp + 24] = 0\n 28584: u64 [sp + 16] = 0\n 28587: u64 [sp + 0] = 0x80\n 28591: a0 = sp + 0x20\n 28594: a1 = sp\n 28596: u64 [sp + 8] = 0\n 28599: ra = 364, jump @327\n      : @408 [@dyn 182] (gas: 14)\n 28605: a0 = u64 [sp + 0x30]\n 28608: a1 = u64 [sp + 0x38]\n 28611: a2 = u64 [sp + 0x20]\n 28614: a3 = u64 [sp + 0x28]\n 28617: u64 [s1 + 0x10] = a0\n 28620: u64 [s1 + 0x18] = a1\n 28623: u64 [s1] = a2\n 28625: u64 [s1 + 0x8] = a3\n 28628: sp = s0 + 0xffffffffffffffa0\n 28631: ra = u64 [sp + 0x58]\n 28634: s0 = u64 [sp + 0x50]\n 28637: s1 = u64 [sp + 0x48]\n 28640: sp = sp + 0x60\n 28643: ret\n      : @409 [@dyn 183] (gas: 27)\n 28645: a0 = u64 [sp + 0xb8]\n 28649: u64 [sp + 0x48] = a0\n 28652: s1 = u64 [sp + 0xb0]\n 28656: a0 = u64 [sp + 0xa8]\n 28660: u64 [sp + 0x70] = a0\n 28663: a0 = u64 [sp + 0xa0]\n 28667: u64 [sp + 0x78] = a0\n 28670: a0 = u64 [sp + 0x60]\n 28673: u64 [sp + 0xd8] = a0\n 28677: a0 = u64 [sp + 0x68]\n 28680: u64 [sp + 0xd0] = a0\n 28684: a0 = u64 [sp + 0x58]\n 28687: u64 [sp + 0xc8] = a0\n 28691: a0 = u64 [sp + 0x50]\n 28694: u64 [sp + 0xc0] = a0\n 28698: u64 [sp + 248] = 0\n 28702: u64 [sp + 240] = 0\n 28706: u64 [sp + 232] = 0\n 28710: u64 [sp + 224] = 0\n 28714: u32 [sp + 256] = 0x20\n 28719: i32 a1 = sp + 0xc0\n 28723: i32 a3 = sp + 0xe0\n 28727: i32 a4 = sp + 0x100\n 28731: a2 = 0xffffffffffffffff\n 28734: a0 = 0\n 28736: ecalli 4 // 'get_storage'\n 28738: fallthrough\n      : @410 (gas: 12)\n 28739: a0 = u64 [sp + 0x48]\n 28742: a1 = u64 [sp + 0x70]\n 28745: a0 = a0 | a1\n 28748: a1 = u64 [sp + 0x78]\n 28751: a1 = a1 | s1\n 28754: a1 = a1 | a0\n 28757: a1 = a1 >> 0x20\n 28760: u64 [sp + 0x38] = s1\n 28763: a0 = a0 | s1\n 28766: a0 = a0 << 0x20\n 28769: a0 = a0 | a1\n 28772: jump @422 if a0 != 0\n      : @411 (gas: 11)\n 28776: a0 = u64 [sp + 0xf0]\n 28780: a1 = u64 [sp + 0xe8]\n 28784: u64 [sp + 0x28] = a1\n 28787: a1 = u64 [sp + 0xe0]\n 28791: u64 [sp + 0x30] = a1\n 28794: a0 = a0 << 0x20\n 28797: s1 = a0 >> 0x20\n 28800: a0 = i32 [sp + 0x78]\n 28803: a1 = 0x20\n 28806: u64 [sp + 0x40] = a0\n 28809: ra = 368, jump @0\n      : @412 [@dyn 184] (gas: 83)\n 28815: a1 = reverse s1\n 28817: a2 = u64 [sp + 0x28]\n 28820: a2 = reverse a2\n 28822: a3 = u64 [sp + 0x30]\n 28825: a3 = reverse a3\n 28827: a4 = a3 >> 0x38\n 28830: u8 [a0 + 0x1f] = a4\n 28833: a4 = a3 >> 0x30\n 28836: u8 [a0 + 0x1e] = a4\n 28839: a4 = a3 >> 0x28\n 28842: u8 [a0 + 0x1d] = a4\n 28845: a4 = a3 >> 0x20\n 28848: u8 [a0 + 0x1c] = a4\n 28851: a4 = a3 >> 0x18\n 28854: u8 [a0 + 0x1b] = a4\n 28857: a4 = a3 >> 0x10\n 28860: u8 [a0 + 0x1a] = a4\n 28863: a4 = a3 >> 0x8\n 28866: u8 [a0 + 0x19] = a4\n 28869: u8 [a0 + 0x18] = a3\n 28872: u8 [a0 + 0x10] = a2\n 28875: u8 [a0 + 11] = 0\n 28878: u8 [a0 + 10] = 0\n 28881: u8 [a0 + 9] = 0\n 28884: u8 [a0 + 7] = 0\n 28887: u8 [a0 + 6] = 0\n 28890: u8 [a0 + 5] = 0\n 28893: u8 [a0 + 4] = 0\n 28896: u8 [a0 + 3] = 0\n 28899: u8 [a0 + 2] = 0\n 28902: u8 [a0 + 1] = 0\n 28905: u8 [a0 + 0] = 0\n 28907: a3 = a2 >> 0x38\n 28910: u8 [a0 + 0x17] = a3\n 28913: a3 = a2 >> 0x30\n 28916: u8 [a0 + 0x16] = a3\n 28919: a3 = a2 >> 0x28\n 28922: u8 [a0 + 0x15] = a3\n 28925: a3 = a2 >> 0x20\n 28928: u8 [a0 + 0x14] = a3\n 28931: a3 = a2 >> 0x18\n 28934: u8 [a0 + 0x13] = a3\n 28937: a3 = a2 >> 0x10\n 28940: u8 [a0 + 0x12] = a3\n 28943: a2 = a2 >> 0x8\n 28946: u8 [a0 + 0x11] = a2\n 28949: u8 [a0 + 0x8] = a1\n 28952: a2 = a1 >> 0x38\n 28955: u8 [a0 + 0xf] = a2\n 28958: a2 = a1 >> 0x30\n 28961: u8 [a0 + 0xe] = a2\n 28964: a2 = a1 >> 0x28\n 28967: u8 [a0 + 0xd] = a2\n 28970: a1 = a1 >> 0x20\n 28973: u8 [a0 + 0xc] = a1\n 28976: a0 = u64 [sp + 0x50]\n 28979: a0 = a0 + 0x1\n 28982: a1 = a0 <u 0x1\n 28985: a2 = u64 [sp + 0x58]\n 28988: a1 = a1 + a2\n 28991: a2 = a0 | a1\n 28994: a2 = a2 <u 0x1\n 28997: a3 = u64 [sp + 0x68]\n 29000: a2 = a2 + a3\n 29003: a3 = a2 <u a3\n 29006: a4 = u64 [sp + 0x60]\n 29009: a3 = a3 + a4\n 29012: u64 [sp + 0xd8] = a3\n 29016: u64 [sp + 0xd0] = a2\n 29020: u64 [sp + 0xc8] = a1\n 29024: u64 [sp + 0xc0] = a0\n 29028: u64 [sp + 248] = 0\n 29032: u64 [sp + 240] = 0\n 29036: u64 [sp + 232] = 0\n 29040: u64 [sp + 224] = 0\n 29044: u32 [sp + 256] = 0x20\n 29049: i32 a1 = sp + 0xc0\n 29053: i32 a3 = sp + 0xe0\n 29057: i32 a4 = sp + 0x100\n 29061: a2 = 0xffffffffffffffff\n 29064: a0 = 0\n 29066: ecalli 4 // 'get_storage'\n 29068: fallthrough\n      : @413 (gas: 13)\n 29069: a0 = u64 [sp + 0x48]\n 29072: a2 = u64 [sp + 0x38]\n 29075: a2 = a2 | a0\n 29078: a0 = 0x100000000\n 29088: u64 [sp + 0x28] = a0\n 29091: a0 = 0xffffffe0\n 29101: a1 = u64 [sp + 0x78]\n 29104: a0 = a1 <u a0\n 29107: a1 = u64 [sp + 0x70]\n 29110: a0 = 0 if a1 != 0\n 29112: u64 [sp + 0x30] = a2\n 29115: a0 = 0 if a2 != 0\n 29117: jump @422 if a0 == 0\n      : @414 (gas: 11)\n 29121: s1 = u64 [sp + 0xf8]\n 29125: a0 = u64 [sp + 0xf0]\n 29129: u64 [sp + 0x8] = a0\n 29132: a0 = u64 [sp + 0xe8]\n 29136: u64 [sp + 0x10] = a0\n 29139: a0 = u64 [sp + 0xe0]\n 29143: u64 [sp + 0x18] = a0\n 29146: a0 = u64 [sp + 0x40]\n 29149: i32 a0 = a0 + 0x20\n 29152: a1 = 0x20\n 29155: ra = 370, jump @0\n      : @415 [@dyn 185] (gas: 95)\n 29161: a1 = reverse s1\n 29163: a2 = u64 [sp + 0x8]\n 29166: a2 = reverse a2\n 29168: a3 = u64 [sp + 0x10]\n 29171: a3 = reverse a3\n 29173: a4 = u64 [sp + 0x18]\n 29176: a4 = reverse a4\n 29178: a5 = a4 >> 0x38\n 29181: u8 [a0 + 0x1f] = a5\n 29184: a5 = a4 >> 0x30\n 29187: u8 [a0 + 0x1e] = a5\n 29190: a5 = a4 >> 0x28\n 29193: u8 [a0 + 0x1d] = a5\n 29196: a5 = a4 >> 0x20\n 29199: u8 [a0 + 0x1c] = a5\n 29202: a5 = a4 >> 0x18\n 29205: u8 [a0 + 0x1b] = a5\n 29208: a5 = a4 >> 0x10\n 29211: u8 [a0 + 0x1a] = a5\n 29214: a5 = a4 >> 0x8\n 29217: u8 [a0 + 0x19] = a5\n 29220: u8 [a0 + 0x18] = a4\n 29223: u8 [a0 + 0x10] = a3\n 29226: a4 = a3 >> 0x38\n 29229: u8 [a0 + 0x17] = a4\n 29232: a4 = a3 >> 0x30\n 29235: u8 [a0 + 0x16] = a4\n 29238: a4 = a3 >> 0x28\n 29241: u8 [a0 + 0x15] = a4\n 29244: a4 = a3 >> 0x20\n 29247: u8 [a0 + 0x14] = a4\n 29250: a4 = a3 >> 0x18\n 29253: u8 [a0 + 0x13] = a4\n 29256: a4 = a3 >> 0x10\n 29259: u8 [a0 + 0x12] = a4\n 29262: a3 = a3 >> 0x8\n 29265: u8 [a0 + 0x11] = a3\n 29268: u8 [a0 + 0x8] = a2\n 29271: a3 = a2 >> 0x38\n 29274: u8 [a0 + 0xf] = a3\n 29277: a3 = a2 >> 0x30\n 29280: u8 [a0 + 0xe] = a3\n 29283: a3 = a2 >> 0x28\n 29286: u8 [a0 + 0xd] = a3\n 29289: a3 = a2 >> 0x20\n 29292: u8 [a0 + 0xc] = a3\n 29295: a3 = a2 >> 0x18\n 29298: u8 [a0 + 0xb] = a3\n 29301: a3 = a2 >> 0x10\n 29304: u8 [a0 + 0xa] = a3\n 29307: a2 = a2 >> 0x8\n 29310: u8 [a0 + 0x9] = a2\n 29313: u8 [a0] = a1\n 29315: a2 = a1 >> 0x38\n 29318: u8 [a0 + 0x7] = a2\n 29321: a2 = a1 >> 0x30\n 29324: u8 [a0 + 0x6] = a2\n 29327: a2 = a1 >> 0x28\n 29330: u8 [a0 + 0x5] = a2\n 29333: a2 = a1 >> 0x20\n 29336: u8 [a0 + 0x4] = a2\n 29339: a2 = a1 >> 0x18\n 29342: u8 [a0 + 0x3] = a2\n 29345: a2 = a1 >> 0x10\n 29348: u8 [a0 + 0x2] = a2\n 29351: a1 = a1 >> 0x8\n 29354: u8 [a0 + 0x1] = a1\n 29357: a1 = u64 [sp + 0x50]\n 29360: a0 = a1 + 0x2\n 29363: a1 = a0 <u a1\n 29366: a3 = u64 [sp + 0x58]\n 29369: a2 = a3 + a1\n 29372: a3 = a2 <u a3\n 29375: a3 = a1 if a1 == 0\n 29378: a1 = u64 [sp + 0x68]\n 29381: a3 = a3 + a1\n 29384: a1 = a3 <u a1\n 29387: a4 = u64 [sp + 0x60]\n 29390: a1 = a1 + a4\n 29393: u64 [sp + 0xd8] = a1\n 29397: u64 [sp + 0xd0] = a3\n 29401: u64 [sp + 0xc8] = a2\n 29405: u64 [sp + 0xc0] = a0\n 29409: u64 [sp + 248] = 0\n 29413: u64 [sp + 240] = 0\n 29417: u64 [sp + 232] = 0\n 29421: u64 [sp + 224] = 0\n 29425: u32 [sp + 256] = 0x20\n 29430: i32 a1 = sp + 0xc0\n 29434: i32 a3 = sp + 0xe0\n 29438: i32 a4 = sp + 0x100\n 29442: a2 = 0xffffffffffffffff\n 29445: a0 = 0\n 29447: ecalli 4 // 'get_storage'\n 29449: fallthrough\n      : @416 (gas: 9)\n 29450: a0 = u64 [sp + 0x28]\n 29453: a0 = a0 + 0xffffffffffffffc0\n 29456: a1 = u64 [sp + 0x78]\n 29459: a0 = a1 <u a0\n 29462: a1 = u64 [sp + 0x70]\n 29465: a0 = 0 if a1 != 0\n 29467: a1 = u64 [sp + 0x30]\n 29470: a0 = 0 if a1 != 0\n 29472: jump @422 if a0 == 0\n      : @417 (gas: 11)\n 29476: s1 = u64 [sp + 0xf8]\n 29480: a0 = u64 [sp + 0xf0]\n 29484: u64 [sp + 0x10] = a0\n 29487: a0 = u64 [sp + 0xe8]\n 29491: u64 [sp + 0x18] = a0\n 29494: a0 = u64 [sp + 0xe0]\n 29498: u64 [sp + 0x28] = a0\n 29501: a0 = u64 [sp + 0x40]\n 29504: i32 a0 = a0 + 0x40\n 29507: a1 = 0x20\n 29510: ra = 372, jump @0\n      : @418 [@dyn 186] (gas: 95)\n 29516: a1 = reverse s1\n 29518: a2 = u64 [sp + 0x10]\n 29521: a2 = reverse a2\n 29523: a3 = u64 [sp + 0x18]\n 29526: a3 = reverse a3\n 29528: a4 = u64 [sp + 0x28]\n 29531: a4 = reverse a4\n 29533: a5 = a4 >> 0x38\n 29536: u8 [a0 + 0x1f] = a5\n 29539: a5 = a4 >> 0x30\n 29542: u8 [a0 + 0x1e] = a5\n 29545: a5 = a4 >> 0x28\n 29548: u8 [a0 + 0x1d] = a5\n 29551: a5 = a4 >> 0x20\n 29554: u8 [a0 + 0x1c] = a5\n 29557: a5 = a4 >> 0x18\n 29560: u8 [a0 + 0x1b] = a5\n 29563: a5 = a4 >> 0x10\n 29566: u8 [a0 + 0x1a] = a5\n 29569: a5 = a4 >> 0x8\n 29572: u8 [a0 + 0x19] = a5\n 29575: u8 [a0 + 0x18] = a4\n 29578: u8 [a0 + 0x10] = a3\n 29581: a4 = a3 >> 0x38\n 29584: u8 [a0 + 0x17] = a4\n 29587: a4 = a3 >> 0x30\n 29590: u8 [a0 + 0x16] = a4\n 29593: a4 = a3 >> 0x28\n 29596: u8 [a0 + 0x15] = a4\n 29599: a4 = a3 >> 0x20\n 29602: u8 [a0 + 0x14] = a4\n 29605: a4 = a3 >> 0x18\n 29608: u8 [a0 + 0x13] = a4\n 29611: a4 = a3 >> 0x10\n 29614: u8 [a0 + 0x12] = a4\n 29617: a3 = a3 >> 0x8\n 29620: u8 [a0 + 0x11] = a3\n 29623: u8 [a0 + 0x8] = a2\n 29626: a3 = a2 >> 0x38\n 29629: u8 [a0 + 0xf] = a3\n 29632: a3 = a2 >> 0x30\n 29635: u8 [a0 + 0xe] = a3\n 29638: a3 = a2 >> 0x28\n 29641: u8 [a0 + 0xd] = a3\n 29644: a3 = a2 >> 0x20\n 29647: u8 [a0 + 0xc] = a3\n 29650: a3 = a2 >> 0x18\n 29653: u8 [a0 + 0xb] = a3\n 29656: a3 = a2 >> 0x10\n 29659: u8 [a0 + 0xa] = a3\n 29662: a2 = a2 >> 0x8\n 29665: u8 [a0 + 0x9] = a2\n 29668: u8 [a0] = a1\n 29670: a2 = a1 >> 0x38\n 29673: u8 [a0 + 0x7] = a2\n 29676: a2 = a1 >> 0x30\n 29679: u8 [a0 + 0x6] = a2\n 29682: a2 = a1 >> 0x28\n 29685: u8 [a0 + 0x5] = a2\n 29688: a2 = a1 >> 0x20\n 29691: u8 [a0 + 0x4] = a2\n 29694: a2 = a1 >> 0x18\n 29697: u8 [a0 + 0x3] = a2\n 29700: a2 = a1 >> 0x10\n 29703: u8 [a0 + 0x2] = a2\n 29706: a1 = a1 >> 0x8\n 29709: u8 [a0 + 0x1] = a1\n 29712: a1 = u64 [sp + 0x50]\n 29715: a0 = a1 + 0x3\n 29718: a1 = a0 <u a1\n 29721: a3 = u64 [sp + 0x58]\n 29724: a2 = a3 + a1\n 29727: a3 = a2 <u a3\n 29730: a3 = a1 if a1 == 0\n 29733: a1 = u64 [sp + 0x68]\n 29736: a3 = a3 + a1\n 29739: a1 = a3 <u a1\n 29742: a4 = u64 [sp + 0x60]\n 29745: a1 = a1 + a4\n 29748: u64 [sp + 0xd8] = a1\n 29752: u64 [sp + 0xd0] = a3\n 29756: u64 [sp + 0xc8] = a2\n 29760: u64 [sp + 0xc0] = a0\n 29764: u64 [sp + 248] = 0\n 29768: u64 [sp + 240] = 0\n 29772: u64 [sp + 232] = 0\n 29776: u64 [sp + 224] = 0\n 29780: u32 [sp + 256] = 0x20\n 29785: i32 a1 = sp + 0xc0\n 29789: i32 a3 = sp + 0xe0\n 29793: i32 a4 = sp + 0x100\n 29797: a2 = 0xffffffffffffffff\n 29800: a0 = 0\n 29802: ecalli 4 // 'get_storage'\n 29804: fallthrough\n      : @419 (gas: 8)\n 29805: a0 = 0xffffffa0\n 29815: a1 = u64 [sp + 0x78]\n 29818: a0 = a1 <u a0\n 29821: a1 = u64 [sp + 0x70]\n 29824: a0 = 0 if a1 != 0\n 29826: a1 = u64 [sp + 0x30]\n 29829: a0 = 0 if a1 != 0\n 29831: jump @422 if a0 == 0\n      : @420 (gas: 7)\n 29835: a0 = u64 [sp + 0xe0]\n 29839: a0 = a0 & 0xff\n 29843: s1 = a0 >u 0\n 29845: a0 = u64 [sp + 0x40]\n 29848: i32 a0 = a0 + 0x60\n 29851: a1 = 0x20\n 29854: ra = 374, jump @0\n      : @421 [@dyn 187] (gas: 47)\n 29860: u8 [a0 + 0x1f] = s1\n 29863: u8 [a0 + 30] = 0\n 29866: u8 [a0 + 29] = 0\n 29869: u8 [a0 + 28] = 0\n 29872: u8 [a0 + 27] = 0\n 29875: u8 [a0 + 26] = 0\n 29878: u8 [a0 + 25] = 0\n 29881: u8 [a0 + 24] = 0\n 29884: u8 [a0 + 23] = 0\n 29887: u8 [a0 + 22] = 0\n 29890: u8 [a0 + 21] = 0\n 29893: u8 [a0 + 20] = 0\n 29896: u8 [a0 + 19] = 0\n 29899: u8 [a0 + 18] = 0\n 29902: u8 [a0 + 17] = 0\n 29905: u8 [a0 + 16] = 0\n 29908: u8 [a0 + 15] = 0\n 29911: u8 [a0 + 14] = 0\n 29914: u8 [a0 + 13] = 0\n 29917: u8 [a0 + 12] = 0\n 29920: u8 [a0 + 11] = 0\n 29923: u8 [a0 + 10] = 0\n 29926: u8 [a0 + 9] = 0\n 29929: u8 [a0 + 8] = 0\n 29932: u8 [a0 + 7] = 0\n 29935: u8 [a0 + 6] = 0\n 29938: u8 [a0 + 5] = 0\n 29941: u8 [a0 + 4] = 0\n 29944: u8 [a0 + 3] = 0\n 29947: u8 [a0 + 2] = 0\n 29950: u8 [a0 + 1] = 0\n 29953: u8 [a0 + 0] = 0\n 29955: a0 = u64 [sp + 0x20]\n 29958: a1 = u64 [sp + 0x78]\n 29961: u64 [a0] = a1\n 29963: a1 = u64 [sp + 0x48]\n 29966: u64 [a0 + 0x18] = a1\n 29969: a1 = u64 [sp + 0x70]\n 29972: u64 [a0 + 0x8] = a1\n 29975: a1 = u64 [sp + 0x38]\n 29978: u64 [a0 + 0x10] = a1\n 29981: sp = s0 + 0xfffffffffffffee0\n 29985: ra = u64 [sp + 0x118]\n 29989: s0 = u64 [sp + 0x110]\n 29993: s1 = u64 [sp + 0x108]\n 29997: sp = sp + 0x120\n 30001: ret\n      : @422 (gas: 1)\n 30003: trap\n      : @423 [@dyn 188] (gas: 11)\n 30004: a0 = u64 [sp + 0x138]\n 30008: u64 [sp + 0x38] = a0\n 30011: a0 = u64 [sp + 0x130]\n 30015: u64 [sp + 0x30] = a0\n 30018: a0 = u64 [sp + 0x128]\n 30022: u64 [sp + 0x28] = a0\n 30025: a0 = u64 [sp + 0x120]\n 30029: u64 [sp + 0x20] = a0\n 30032: a1 = 0x20\n 30035: a0 = 0\n 30037: ra = 378, jump @0\n      : @424 [@dyn 189] (gas: 70)\n 30043: a1 = u64 [sp + 0x88]\n 30047: a1 = reverse a1\n 30049: a2 = u64 [sp + 0x90]\n 30053: a2 = reverse a2\n 30055: a3 = u64 [sp + 0x98]\n 30059: a3 = reverse a3\n 30061: a4 = reverse s1\n 30063: a5 = a4 >> 0x38\n 30066: u8 [a0 + 0x1f] = a5\n 30069: a5 = a4 >> 0x30\n 30072: u8 [a0 + 0x1e] = a5\n 30075: a5 = a4 >> 0x28\n 30078: u8 [a0 + 0x1d] = a5\n 30081: a5 = a4 >> 0x20\n 30084: u8 [a0 + 0x1c] = a5\n 30087: a5 = a4 >> 0x18\n 30090: u8 [a0 + 0x1b] = a5\n 30093: a5 = a4 >> 0x10\n 30096: u8 [a0 + 0x1a] = a5\n 30099: a5 = a4 >> 0x8\n 30102: u8 [a0 + 0x19] = a5\n 30105: u8 [a0 + 0x18] = a4\n 30108: a4 = a3 >> 0x38\n 30111: u8 [a0 + 0x17] = a4\n 30114: a4 = a3 >> 0x30\n 30117: u8 [a0 + 0x16] = a4\n 30120: a4 = a3 >> 0x28\n 30123: u8 [a0 + 0x15] = a4\n 30126: a4 = a3 >> 0x20\n 30129: u8 [a0 + 0x14] = a4\n 30132: a4 = a3 >> 0x18\n 30135: u8 [a0 + 0x13] = a4\n 30138: a4 = a3 >> 0x10\n 30141: u8 [a0 + 0x12] = a4\n 30144: a4 = a3 >> 0x8\n 30147: u8 [a0 + 0x11] = a4\n 30150: u8 [a0 + 0x10] = a3\n 30153: a3 = a2 >> 0x38\n 30156: u8 [a0 + 0xf] = a3\n 30159: a3 = a2 >> 0x30\n 30162: u8 [a0 + 0xe] = a3\n 30165: a3 = a2 >> 0x28\n 30168: u8 [a0 + 0xd] = a3\n 30171: a3 = a2 >> 0x20\n 30174: u8 [a0 + 0xc] = a3\n 30177: a3 = a2 >> 0x18\n 30180: u8 [a0 + 0xb] = a3\n 30183: a3 = a2 >> 0x10\n 30186: u8 [a0 + 0xa] = a3\n 30189: a3 = a2 >> 0x8\n 30192: u8 [a0 + 0x9] = a3\n 30195: u8 [a0 + 0x8] = a2\n 30198: a2 = a1 >> 0x38\n 30201: u8 [a0 + 0x7] = a2\n 30204: a2 = a1 >> 0x30\n 30207: u8 [a0 + 0x6] = a2\n 30210: a2 = a1 >> 0x28\n 30213: u8 [a0 + 0x5] = a2\n 30216: a2 = a1 >> 0x20\n 30219: u8 [a0 + 0x4] = a2\n 30222: a2 = a1 >> 0x18\n 30225: u8 [a0 + 0x3] = a2\n 30228: a2 = a1 >> 0x10\n 30231: u8 [a0 + 0x2] = a2\n 30234: a2 = a1 >> 0x8\n 30237: u8 [a0 + 0x1] = a2\n 30240: u8 [a0] = a1\n 30242: a1 = 0x20\n 30245: a0 = 0\n 30247: ra = 380, jump @0\n      : @425 [@dyn 190] (gas: 5)\n 30253: i32 a0 = a0 + 0\n 30255: i32 a2 = sp + 0x180\n 30259: a1 = 0x20\n 30262: ecalli 5 // 'hash_keccak_256'\n 30264: fallthrough\n      : @426 (gas: 8)\n 30265: a0 = u64 [sp + 0xb8]\n 30269: a2 = u64 [sp + 0xb0]\n 30273: a0 = a0 | a2\n 30276: a1 = u64 [sp + 0xa0]\n 30280: a2 = u64 [sp + 0xa8]\n 30284: a1 = a1 | a2\n 30287: a0 = a0 | a1\n 30290: jump @432 if a0 == 0\n      : @427 (gas: 143)\n 30294: a1 = u64 [sp + 0x20]\n 30297: a2 = a1 + 0x20\n 30300: a0 = a2 <u a1\n 30303: t0 = a1\n 30305: a1 = u64 [sp + 0x28]\n 30308: a5 = a1 + a0\n 30311: t2 = a5 <u a1\n 30314: s1 = a1\n 30316: t2 = a0 if a0 == 0\n 30319: ra = u64 [sp + 0x30]\n 30322: t2 = t2 + ra\n 30325: t1 = t2 <u ra\n 30328: a0 = u64 [sp + 0x38]\n 30331: t1 = t1 + a0\n 30334: a0 = t2 >u 0\n 30336: a1 = t1 >u 0\n 30338: a1 = a0 if t1 == 0\n 30341: a0 = 0x100000000\n 30351: u64 [sp + 0x90] = a2\n 30355: a4 = a2\n 30357: a4 = a0 if a1 == 0\n 30360: a3 = a2\n 30362: u64 [sp + 0x88] = a5\n 30366: a3 = a0 if a5 == 0\n 30369: a0 = maxu(a2, a0)\n 30372: a0 = a3 if a5 != 0\n 30375: a3 = t2 | t1\n 30378: a0 = a4 if a3 != 0\n 30381: a2 = a5\n 30383: a2 = 0 if a1 == 0\n 30385: a2 = a5 if a3 == 0\n 30388: a3 = s1 ^ 0xffffffffffffffff\n 30391: a1 = a3 + a2\n 30394: a2 = t0 ^ 0xffffffffffffffff\n 30397: a0 = a0 + a2\n 30400: a2 = a0 <u a2\n 30403: a1 = a1 + a2\n 30406: a4 = a1 ^ a3\n 30409: t0 = a1 <u a3\n 30412: t0 = a2 if a4 == 0\n 30415: u64 [sp + 0x80] = t2\n 30419: a3 = t2\n 30421: u64 [sp + 0x98] = t1\n 30425: a3 = 0 if t1 == 0\n 30427: a3 = t2 if t1 == 0\n 30430: ra = ra ^ 0xffffffffffffffff\n 30433: t1 = ra + a3\n 30436: t0 = t0 + t1\n 30439: a2 = t0 << 0x3b\n 30442: s1 = a1 >> 0x5\n 30445: a2 = a2 | s1\n 30448: u64 [sp + 0x70] = a2\n 30451: a1 = a1 << 0x3b\n 30454: a0 = a0 >> 0x5\n 30457: s1 = a0 | a1\n 30460: u64 [sp + 0x78] = s1\n 30463: a4 = u64 [sp + 0xa8]\n 30467: a0 = a4 <u 0x1\n 30470: a3 = u64 [sp + 0xb0]\n 30474: a5 = a3 - a0\n 30477: t2 = a4 + 0xffffffffffffffff\n 30480: a0 = a5 ^ a2\n 30483: a1 = a5 <u a2\n 30486: a2 = t2 <u s1\n 30489: a2 = a1 if a0 != 0\n 30492: a0 = a4 | a3\n 30495: a0 = a0 <u 0x1\n 30498: a4 = u64 [sp + 0xa0]\n 30502: a1 = a4 <u a0\n 30505: a3 = u64 [sp + 0xb8]\n 30509: a1 = a3 - a1\n 30512: a0 = a4 - a0\n 30515: a3 = t1 <u ra\n 30518: a4 = u64 [sp + 0x38]\n 30521: ra = a4 ^ 0xffffffffffffffff\n 30524: a4 = u64 [sp + 0x98]\n 30528: ra = ra + a4\n 30531: a3 = a3 + ra\n 30534: s1 = t0 <u t1\n 30537: s1 = s1 + a3\n 30540: t0 = t0 >> 0x5\n 30543: a3 = s1 << 0x3b\n 30546: ra = t0 | a3\n 30549: s1 = s1 >> 0x5\n 30552: t0 = a0 <u ra\n 30555: t1 = a1 ^ s1\n 30558: a3 = a1 <u s1\n 30561: a3 = t0 if t1 == 0\n 30564: a4 = a0 ^ ra\n 30567: a4 = a4 | t1\n 30570: a3 = a2 if a4 == 0\n 30573: a1 = s1 if a3 == 0\n 30576: a0 = ra if a3 == 0\n 30579: a2 = u64 [sp + 0x70]\n 30582: a5 = a2 if a3 == 0\n 30585: a2 = u64 [sp + 0x190]\n 30589: a4 = u64 [sp + 0x78]\n 30592: t2 = a4 if a3 == 0\n 30595: a3 = t2 >> 0x3b\n 30598: a4 = a5 << 0x5\n 30601: t0 = a4 | a3\n 30604: a5 = a5 >> 0x3b\n 30607: a4 = a0 << 0x5\n 30610: a3 = a4 | a5\n 30613: a5 = u64 [sp + 0x180]\n 30617: a0 = a0 >> 0x3b\n 30620: a1 = a1 << 0x5\n 30623: a0 = a0 | a1\n 30626: a1 = u64 [sp + 0x188]\n 30630: a4 = u64 [sp + 0x98]\n 30634: a0 = a0 + a4\n 30637: s1 = u64 [sp + 0x198]\n 30641: a5 = reverse a5\n 30643: t1 = reverse a1\n 30645: ra = reverse a2\n 30647: a4 = reverse s1\n 30649: t2 = t2 << 0x5\n 30652: a1 = u64 [sp + 0x80]\n 30656: s1 = a1 + a3\n 30659: a1 = s1 <u a1\n 30662: a0 = a0 + a1\n 30665: a2 = u64 [sp + 0x88]\n 30669: a3 = a2 + t0\n 30672: a1 = u64 [sp + 0x90]\n 30676: t2 = t2 + a1\n 30679: u64 [sp + 0x58] = t2\n 30682: a1 = t2 <u a1\n 30685: a3 = a3 + a1\n 30688: t0 = a3 ^ a2\n 30691: u64 [sp + 0x50] = a3\n 30694: a3 = a3 <u a2\n 30697: a3 = a1 if t0 == 0\n 30700: a3 = a3 + s1\n 30703: u64 [sp + 0x48] = a3\n 30706: a1 = a3 <u s1\n 30709: a0 = a0 + a1\n 30712: u64 [sp + 0x40] = a0\n 30715: t0 = u64 [sp + 0x20]\n 30718: a1 = u64 [sp + 0x28]\n 30721: a2 = u64 [sp + 0x30]\n 30724: a0 = u64 [sp + 0x38]\n 30727: u64 [sp + 0xb8] = a0\n 30731: fallthrough\n      : @428 (gas: 47)\n 30732: a0 = a2\n 30734: a3 = t0 + 0x20\n 30737: u64 [sp + 0xa0] = a3\n 30741: a2 = a3 <u t0\n 30744: a3 = a1 + a2\n 30747: u64 [sp + 0xb0] = a3\n 30751: s1 = a3 <u a1\n 30754: s1 = a2 if a2 == 0\n 30757: s1 = s1 + a0\n 30760: u64 [sp + 0xa8] = s1\n 30764: a0 = s1 <u a0\n 30767: s1 = u64 [sp + 0xb8]\n 30771: s1 = s1 + a0\n 30774: u64 [sp + 0x80] = a4\n 30778: u64 [sp + 0xc0] = a4\n 30782: u64 [sp + 0x88] = ra\n 30786: u64 [sp + 0xc8] = ra\n 30790: u64 [sp + 0x90] = t1\n 30794: u64 [sp + 0xd0] = t1\n 30798: a0 = sp + 0xe0\n 30802: a1 = sp + 0xc0\n 30806: u64 [sp + 0x98] = a5\n 30810: u64 [sp + 0xd8] = a5\n 30814: ra = 0x17e\n 30818: sp = sp + 0xfffffffffffffee0\n 30822: u64 [sp + 0x118] = ra\n 30826: u64 [sp + 0x110] = s0\n 30830: u64 [sp + 0x108] = s1\n 30834: s0 = sp + 0x120\n 30838: sp = sp & 0xffffffffffffffe0\n 30841: a2 = u64 [a1]\n 30843: u64 [sp + 0x50] = a2\n 30846: a2 = u64 [a1 + 0x8]\n 30849: u64 [sp + 0x58] = a2\n 30852: a2 = u64 [a1 + 0x10]\n 30855: u64 [sp + 0x68] = a2\n 30858: a1 = u64 [a1 + 0x18]\n 30861: u64 [sp + 0x60] = a1\n 30864: u64 [sp + 0x20] = a0\n 30867: u64 [sp + 152] = 0\n 30871: u64 [sp + 144] = 0\n 30875: u64 [sp + 128] = 0x80\n 30881: a0 = sp + 0xa0\n 30885: a1 = sp + 0x80\n 30889: u64 [sp + 136] = 0\n 30893: ra = 0x16e\n 30897: jump @327\n      : @429 [@dyn 191] (gas: 12)\n 30900: a2 = u64 [sp + 0xa0]\n 30904: a3 = u64 [sp + 0xa8]\n 30908: a0 = a2 | a3\n 30911: u64 [sp + 0xb8] = s1\n 30915: a1 = u64 [sp + 0xb0]\n 30919: a1 = a1 | s1\n 30922: a0 = a0 | a1\n 30925: a0 = a0 >> 0x20\n 30928: a1 = a1 | a3\n 30931: a1 = a1 << 0x20\n 30934: a0 = a0 | a1\n 30937: jump @433 if a0 != 0\n      : @430 (gas: 12)\n 30941: a0 = u64 [sp + 0xf8]\n 30945: u64 [sp + 0x70] = a0\n 30948: a0 = u64 [sp + 0xf0]\n 30952: u64 [sp + 0x78] = a0\n 30955: a0 = u64 [sp + 0xe8]\n 30959: u64 [sp + 0x68] = a0\n 30962: a0 = u64 [sp + 0xe0]\n 30966: u64 [sp + 0x60] = a0\n 30969: i32 a0 = a2 + 0\n 30971: a1 = 0x20\n 30974: s1 = a2\n 30976: ra = 384, jump @0\n      : @431 [@dyn 192] (gas: 99)\n 30982: t0 = s1\n 30984: a1 = u64 [sp + 0x60]\n 30987: a1 = reverse a1\n 30989: a2 = a1 >> 0x38\n 30992: u8 [a0 + 0x1f] = a2\n 30995: a2 = a1 >> 0x30\n 30998: u8 [a0 + 0x1e] = a2\n 31001: a2 = a1 >> 0x28\n 31004: u8 [a0 + 0x1d] = a2\n 31007: a2 = a1 >> 0x20\n 31010: u8 [a0 + 0x1c] = a2\n 31013: a2 = a1 >> 0x18\n 31016: u8 [a0 + 0x1b] = a2\n 31019: a2 = a1 >> 0x10\n 31022: u8 [a0 + 0x1a] = a2\n 31025: a2 = a1 >> 0x8\n 31028: u8 [a0 + 0x19] = a2\n 31031: a2 = u64 [sp + 0x68]\n 31034: a2 = reverse a2\n 31036: u8 [a0 + 0x18] = a1\n 31039: a1 = a2 >> 0x38\n 31042: u8 [a0 + 0x17] = a1\n 31045: a1 = a2 >> 0x30\n 31048: u8 [a0 + 0x16] = a1\n 31051: a1 = a2 >> 0x28\n 31054: u8 [a0 + 0x15] = a1\n 31057: a1 = a2 >> 0x20\n 31060: u8 [a0 + 0x14] = a1\n 31063: a1 = a2 >> 0x18\n 31066: u8 [a0 + 0x13] = a1\n 31069: a1 = a2 >> 0x10\n 31072: u8 [a0 + 0x12] = a1\n 31075: a1 = u64 [sp + 0x70]\n 31078: a1 = reverse a1\n 31080: a3 = u64 [sp + 0x78]\n 31083: a3 = reverse a3\n 31085: u8 [a0 + 0x10] = a2\n 31088: a2 = a2 >> 0x8\n 31091: u8 [a0 + 0x11] = a2\n 31094: u8 [a0 + 0x8] = a3\n 31097: a2 = a3 >> 0x38\n 31100: u8 [a0 + 0xf] = a2\n 31103: a2 = a3 >> 0x30\n 31106: u8 [a0 + 0xe] = a2\n 31109: a2 = a3 >> 0x28\n 31112: u8 [a0 + 0xd] = a2\n 31115: a2 = a3 >> 0x20\n 31118: u8 [a0 + 0xc] = a2\n 31121: a2 = a3 >> 0x18\n 31124: u8 [a0 + 0xb] = a2\n 31127: a2 = a3 >> 0x10\n 31130: u8 [a0 + 0xa] = a2\n 31133: a3 = a3 >> 0x8\n 31136: u8 [a0 + 0x9] = a3\n 31139: u8 [a0] = a1\n 31141: a2 = a1 >> 0x38\n 31144: u8 [a0 + 0x7] = a2\n 31147: a2 = a1 >> 0x30\n 31150: u8 [a0 + 0x6] = a2\n 31153: a2 = a1 >> 0x28\n 31156: u8 [a0 + 0x5] = a2\n 31159: a2 = a1 >> 0x20\n 31162: u8 [a0 + 0x4] = a2\n 31165: a2 = a1 >> 0x18\n 31168: u8 [a0 + 0x3] = a2\n 31171: a2 = a1 >> 0x10\n 31174: u8 [a0 + 0x2] = a2\n 31177: a1 = a1 >> 0x8\n 31180: u8 [a0 + 0x1] = a1\n 31183: a1 = u64 [sp + 0x80]\n 31187: t1 = a1 + 0x4\n 31190: a1 = t1 <u a1\n 31193: a3 = u64 [sp + 0x88]\n 31197: a0 = a3 + a1\n 31200: a3 = a0 <u a3\n 31203: a3 = a1 if a1 == 0\n 31206: a1 = u64 [sp + 0x58]\n 31209: a1 = a1 ^ s1\n 31212: a4 = u64 [sp + 0x48]\n 31215: a2 = u64 [sp + 0xa8]\n 31219: a4 = a4 ^ a2\n 31222: t2 = a1 | a4\n 31225: a4 = u64 [sp + 0x50]\n 31228: a1 = u64 [sp + 0xb0]\n 31232: a4 = a4 ^ a1\n 31235: a5 = u64 [sp + 0x40]\n 31238: s1 = u64 [sp + 0xb8]\n 31242: a5 = a5 ^ s1\n 31245: a4 = a4 | a5\n 31248: s1 = t2 | a4\n 31251: a4 = u64 [sp + 0x90]\n 31255: a3 = a3 + a4\n 31258: a4 = a3 <u a4\n 31261: a5 = u64 [sp + 0x98]\n 31265: a5 = a5 + a4\n 31268: a4 = t1\n 31270: ra = a0\n 31272: t1 = a3\n 31274: jump @428 if s1 != 0\n      : @432 (gas: 15)\n 31278: a0 = u64 [sp + 0x18]\n 31281: a1 = u64 [sp + 0x20]\n 31284: u64 [a0] = a1\n 31286: a1 = u64 [sp + 0x28]\n 31289: u64 [a0 + 0x8] = a1\n 31292: a1 = u64 [sp + 0x30]\n 31295: u64 [a0 + 0x10] = a1\n 31298: a1 = u64 [sp + 0x38]\n 31301: u64 [a0 + 0x18] = a1\n 31304: sp = s0 + 0xfffffffffffffe40\n 31308: ra = u64 [sp + 0x1b8]\n 31312: s0 = u64 [sp + 0x1b0]\n 31316: s1 = u64 [sp + 0x1a8]\n 31320: sp = sp + 0x1c0\n 31324: ret\n      : @433 (gas: 1)\n 31326: trap\n      : @434 (gas: 17)\n 31327: sp = sp + 0xffffffffffffffa0\n 31330: u64 [sp + 0x58] = ra\n 31333: u64 [sp + 0x50] = s0\n 31336: u64 [sp + 0x48] = s1\n 31339: a3 = u64 [a1 + 0x18]\n 31342: a4 = u64 [a1 + 0x10]\n 31345: a5 = u64 [a1 + 0x8]\n 31348: s1 = u64 [a1]\n 31350: a1 = a5 | a3\n 31353: a2 = s1 | a4\n 31356: a2 = a2 | a1\n 31359: a2 = a2 >> 0x20\n 31362: a1 = a1 | a4\n 31365: a1 = a1 << 0x20\n 31368: a1 = a1 | a2\n 31371: u64 [sp + 0x28] = a0\n 31374: jump @441 if a1 != 0\n      : @435 (gas: 19)\n 31378: a0 = s1 + 0x20\n 31381: u64 [sp + 0x30] = a0\n 31384: a0 = a0 <u s1\n 31387: a1 = a5 + a0\n 31390: u64 [sp + 0x40] = a1\n 31393: u64 [sp + 0x8] = a5\n 31396: s0 = a1 <u a5\n 31399: s0 = a0 if a0 == 0\n 31402: s0 = s0 + a4\n 31405: u64 [sp + 0x10] = a4\n 31408: a0 = s0 <u a4\n 31411: u64 [sp + 0x18] = a3\n 31414: a0 = a0 + a3\n 31417: u64 [sp + 0x38] = a0\n 31420: u64 [sp] = s1\n 31422: i32 a0 = s1 + 0\n 31424: a1 = 0x20\n 31427: s1 = 0x20\n 31430: ra = 386, jump @0\n      : @436 [@dyn 193] (gas: 45)\n 31436: u8 [a0 + 0x1f] = s1\n 31439: a1 = u64 [sp + 0x30]\n 31442: s1 = a1\n 31444: a1 = a1 | s0\n 31447: a2 = u64 [sp + 0x40]\n 31450: a4 = u64 [sp + 0x38]\n 31453: a2 = a2 | a4\n 31456: a1 = a1 | a2\n 31459: a1 = a1 >> 0x20\n 31462: u64 [sp + 0x20] = s0\n 31465: a2 = a2 | s0\n 31468: a2 = a2 << 0x20\n 31471: a1 = a1 | a2\n 31474: u8 [a0 + 30] = 0\n 31477: u8 [a0 + 29] = 0\n 31480: u8 [a0 + 28] = 0\n 31483: u8 [a0 + 27] = 0\n 31486: u8 [a0 + 26] = 0\n 31489: u8 [a0 + 25] = 0\n 31492: u8 [a0 + 24] = 0\n 31495: u8 [a0 + 23] = 0\n 31498: u8 [a0 + 22] = 0\n 31501: u8 [a0 + 21] = 0\n 31504: u8 [a0 + 20] = 0\n 31507: u8 [a0 + 19] = 0\n 31510: u8 [a0 + 18] = 0\n 31513: u8 [a0 + 17] = 0\n 31516: u8 [a0 + 16] = 0\n 31519: u8 [a0 + 15] = 0\n 31522: u8 [a0 + 14] = 0\n 31525: u8 [a0 + 13] = 0\n 31528: u8 [a0 + 12] = 0\n 31531: u8 [a0 + 11] = 0\n 31534: u8 [a0 + 10] = 0\n 31537: u8 [a0 + 9] = 0\n 31540: u8 [a0 + 8] = 0\n 31543: u8 [a0 + 7] = 0\n 31546: u8 [a0 + 6] = 0\n 31549: u8 [a0 + 5] = 0\n 31552: u8 [a0 + 4] = 0\n 31555: u8 [a0 + 3] = 0\n 31558: u8 [a0 + 2] = 0\n 31561: u8 [a0 + 1] = 0\n 31564: u8 [a0 + 0] = 0\n 31566: jump @441 if a1 != 0\n      : @437 (gas: 4)\n 31570: i32 s0 = s1 + 0\n 31572: a1 = 0x20\n 31575: a0 = s0\n 31577: ra = 388, jump @0\n      : @438 [@dyn 194] (gas: 41)\n 31583: u8 [a0 + 31] = 0x12\n 31587: u8 [a0 + 30] = 0\n 31590: u8 [a0 + 29] = 0\n 31593: u8 [a0 + 28] = 0\n 31596: u8 [a0 + 27] = 0\n 31599: u8 [a0 + 26] = 0\n 31602: u8 [a0 + 25] = 0\n 31605: u8 [a0 + 24] = 0\n 31608: u8 [a0 + 23] = 0\n 31611: u8 [a0 + 22] = 0\n 31614: u8 [a0 + 21] = 0\n 31617: u8 [a0 + 20] = 0\n 31620: u8 [a0 + 19] = 0\n 31623: u8 [a0 + 18] = 0\n 31626: u8 [a0 + 17] = 0\n 31629: u8 [a0 + 16] = 0\n 31632: u8 [a0 + 15] = 0\n 31635: u8 [a0 + 14] = 0\n 31638: u8 [a0 + 13] = 0\n 31641: u8 [a0 + 12] = 0\n 31644: u8 [a0 + 11] = 0\n 31647: u8 [a0 + 10] = 0\n 31650: u8 [a0 + 9] = 0\n 31653: u8 [a0 + 8] = 0\n 31656: u8 [a0 + 7] = 0\n 31659: u8 [a0 + 6] = 0\n 31662: u8 [a0 + 5] = 0\n 31665: u8 [a0 + 4] = 0\n 31668: u8 [a0 + 3] = 0\n 31671: u8 [a0 + 2] = 0\n 31674: u8 [a0 + 1] = 0\n 31677: a1 = u64 [sp + 0x20]\n 31680: a2 = u64 [sp + 0x38]\n 31683: a1 = a1 | a2\n 31686: a2 = 0xffffffe0\n 31696: a2 = s1 <u a2\n 31699: a3 = u64 [sp + 0x40]\n 31702: a2 = 0 if a3 != 0\n 31704: a2 = 0 if a1 != 0\n 31706: u8 [a0 + 0] = 0\n 31708: jump @441 if a2 == 0\n      : @439 (gas: 3)\n 31712: i32 a0 = s0 + 0x20\n 31715: a1 = 0x20\n 31718: ra = 390, jump @0\n      : @440 [@dyn 195] (gas: 55)\n 31724: u8 [a0 + 31] = 0\n 31727: u8 [a0 + 30] = 0\n 31730: u8 [a0 + 29] = 0\n 31733: u8 [a0 + 28] = 0\n 31736: u8 [a0 + 27] = 0\n 31739: u8 [a0 + 26] = 0\n 31742: u8 [a0 + 25] = 0\n 31745: u8 [a0 + 24] = 0\n 31748: u8 [a0 + 23] = 0\n 31751: u8 [a0 + 22] = 0\n 31754: u8 [a0 + 21] = 0\n 31757: u8 [a0 + 20] = 0\n 31760: u8 [a0 + 19] = 0\n 31763: u8 [a0 + 18] = 0\n 31766: u8 [a0 + 17] = 0x44\n 31770: u8 [a0 + 16] = 0x49\n 31774: u8 [a0 + 15] = 0x20\n 31778: u8 [a0 + 14] = 0x67\n 31782: u8 [a0 + 13] = 0x6e\n 31786: u8 [a0 + 12] = 0x69\n 31790: u8 [a0 + 11] = 0x74\n 31794: u8 [a0 + 10] = 0x73\n 31798: u8 [a0 + 9] = 0x69\n 31802: u8 [a0 + 8] = 0x6c\n 31806: u8 [a0 + 7] = 0x20\n 31810: a5 = 0x64\n 31813: u8 [a0 + 0x6] = a5\n 31816: u8 [a0 + 5] = 0x69\n 31820: u8 [a0 + 4] = 0x6c\n 31824: u8 [a0 + 3] = 0x61\n 31828: u8 [a0 + 2] = 0x76\n 31832: u8 [a0 + 1] = 0x6e\n 31836: u8 [a0 + 0] = 0x49\n 31839: a1 = u64 [sp]\n 31841: a0 = a1 + 0x60\n 31844: a1 = a0 <u a1\n 31847: a3 = u64 [sp + 0x8]\n 31850: a2 = a3 + a1\n 31853: a3 = a2 <u a3\n 31856: a3 = a1 if a1 == 0\n 31859: a1 = u64 [sp + 0x10]\n 31862: a3 = a3 + a1\n 31865: a1 = a3 <u a1\n 31868: a4 = u64 [sp + 0x18]\n 31871: a1 = a1 + a4\n 31874: a4 = u64 [sp + 0x28]\n 31877: u64 [a4] = a0\n 31879: u64 [a4 + 0x8] = a2\n 31882: u64 [a4 + 0x10] = a3\n 31885: u64 [a4 + 0x18] = a1\n 31888: ra = u64 [sp + 0x58]\n 31891: s0 = u64 [sp + 0x50]\n 31894: s1 = u64 [sp + 0x48]\n 31897: sp = sp + 0x60\n 31900: ret\n      : @441 (gas: 1)\n 31902: trap\n      : @442 (gas: 17)\n 31903: sp = sp + 0xffffffffffffffa0\n 31906: u64 [sp + 0x58] = ra\n 31909: u64 [sp + 0x50] = s0\n 31912: u64 [sp + 0x48] = s1\n 31915: a3 = u64 [a1 + 0x18]\n 31918: a4 = u64 [a1 + 0x10]\n 31921: a5 = u64 [a1 + 0x8]\n 31924: s1 = u64 [a1]\n 31926: a1 = a5 | a3\n 31929: a2 = s1 | a4\n 31932: a2 = a2 | a1\n 31935: a2 = a2 >> 0x20\n 31938: a1 = a1 | a4\n 31941: a1 = a1 << 0x20\n 31944: a1 = a1 | a2\n 31947: u64 [sp + 0x28] = a0\n 31950: jump @449 if a1 != 0\n      : @443 (gas: 19)\n 31954: a0 = s1 + 0x20\n 31957: u64 [sp + 0x30] = a0\n 31960: a0 = a0 <u s1\n 31963: a1 = a5 + a0\n 31966: u64 [sp + 0x40] = a1\n 31969: u64 [sp + 0x8] = a5\n 31972: s0 = a1 <u a5\n 31975: s0 = a0 if a0 == 0\n 31978: s0 = s0 + a4\n 31981: u64 [sp + 0x10] = a4\n 31984: a0 = s0 <u a4\n 31987: u64 [sp + 0x18] = a3\n 31990: a0 = a0 + a3\n 31993: u64 [sp + 0x38] = a0\n 31996: u64 [sp] = s1\n 31998: i32 a0 = s1 + 0\n 32000: a1 = 0x20\n 32003: s1 = 0x20\n 32006: ra = 392, jump @0\n      : @444 [@dyn 196] (gas: 45)\n 32012: u8 [a0 + 0x1f] = s1\n 32015: a1 = u64 [sp + 0x30]\n 32018: s1 = a1\n 32020: a1 = a1 | s0\n 32023: a2 = u64 [sp + 0x40]\n 32026: a4 = u64 [sp + 0x38]\n 32029: a2 = a2 | a4\n 32032: a1 = a1 | a2\n 32035: a1 = a1 >> 0x20\n 32038: u64 [sp + 0x20] = s0\n 32041: a2 = a2 | s0\n 32044: a2 = a2 << 0x20\n 32047: a1 = a1 | a2\n 32050: u8 [a0 + 30] = 0\n 32053: u8 [a0 + 29] = 0\n 32056: u8 [a0 + 28] = 0\n 32059: u8 [a0 + 27] = 0\n 32062: u8 [a0 + 26] = 0\n 32065: u8 [a0 + 25] = 0\n 32068: u8 [a0 + 24] = 0\n 32071: u8 [a0 + 23] = 0\n 32074: u8 [a0 + 22] = 0\n 32077: u8 [a0 + 21] = 0\n 32080: u8 [a0 + 20] = 0\n 32083: u8 [a0 + 19] = 0\n 32086: u8 [a0 + 18] = 0\n 32089: u8 [a0 + 17] = 0\n 32092: u8 [a0 + 16] = 0\n 32095: u8 [a0 + 15] = 0\n 32098: u8 [a0 + 14] = 0\n 32101: u8 [a0 + 13] = 0\n 32104: u8 [a0 + 12] = 0\n 32107: u8 [a0 + 11] = 0\n 32110: u8 [a0 + 10] = 0\n 32113: u8 [a0 + 9] = 0\n 32116: u8 [a0 + 8] = 0\n 32119: u8 [a0 + 7] = 0\n 32122: u8 [a0 + 6] = 0\n 32125: u8 [a0 + 5] = 0\n 32128: u8 [a0 + 4] = 0\n 32131: u8 [a0 + 3] = 0\n 32134: u8 [a0 + 2] = 0\n 32137: u8 [a0 + 1] = 0\n 32140: u8 [a0 + 0] = 0\n 32142: jump @449 if a1 != 0\n      : @445 (gas: 4)\n 32146: i32 s0 = s1 + 0\n 32148: a1 = 0x20\n 32151: a0 = s0\n 32153: ra = 394, jump @0\n      : @446 [@dyn 197] (gas: 41)\n 32159: u8 [a0 + 31] = 0x1b\n 32163: u8 [a0 + 30] = 0\n 32166: u8 [a0 + 29] = 0\n 32169: u8 [a0 + 28] = 0\n 32172: u8 [a0 + 27] = 0\n 32175: u8 [a0 + 26] = 0\n 32178: u8 [a0 + 25] = 0\n 32181: u8 [a0 + 24] = 0\n 32184: u8 [a0 + 23] = 0\n 32187: u8 [a0 + 22] = 0\n 32190: u8 [a0 + 21] = 0\n 32193: u8 [a0 + 20] = 0\n 32196: u8 [a0 + 19] = 0\n 32199: u8 [a0 + 18] = 0\n 32202: u8 [a0 + 17] = 0\n 32205: u8 [a0 + 16] = 0\n 32208: u8 [a0 + 15] = 0\n 32211: u8 [a0 + 14] = 0\n 32214: u8 [a0 + 13] = 0\n 32217: u8 [a0 + 12] = 0\n 32220: u8 [a0 + 11] = 0\n 32223: u8 [a0 + 10] = 0\n 32226: u8 [a0 + 9] = 0\n 32229: u8 [a0 + 8] = 0\n 32232: u8 [a0 + 7] = 0\n 32235: u8 [a0 + 6] = 0\n 32238: u8 [a0 + 5] = 0\n 32241: u8 [a0 + 4] = 0\n 32244: u8 [a0 + 3] = 0\n 32247: u8 [a0 + 2] = 0\n 32250: u8 [a0 + 1] = 0\n 32253: a1 = u64 [sp + 0x20]\n 32256: a2 = u64 [sp + 0x38]\n 32259: a1 = a1 | a2\n 32262: a2 = 0xffffffe0\n 32272: a2 = s1 <u a2\n 32275: a3 = u64 [sp + 0x40]\n 32278: a2 = 0 if a3 != 0\n 32280: a2 = 0 if a1 != 0\n 32282: u8 [a0 + 0] = 0\n 32284: jump @449 if a2 == 0\n      : @447 (gas: 3)\n 32288: i32 a0 = s0 + 0x20\n 32291: a1 = 0x20\n 32294: ra = 396, jump @0\n      : @448 [@dyn 198] (gas: 54)\n 32300: u8 [a0 + 25] = 0x76\n 32304: u8 [a0 + 22] = 0x63\n 32308: u8 [a0 + 21] = 0x61\n 32312: u8 [a0 + 19] = 0x72\n 32316: u8 [a0 + 26] = 0x65\n 32320: u8 [a0 + 18] = 0x65\n 32324: u8 [a0 + 14] = 0x6c\n 32328: u8 [a0 + 15] = 0x6f\n 32332: u8 [a0 + 12] = 0x6f\n 32336: u8 [a0 + 31] = 0\n 32339: u8 [a0 + 30] = 0\n 32342: u8 [a0 + 29] = 0\n 32345: u8 [a0 + 28] = 0\n 32348: u8 [a0 + 27] = 0\n 32351: u8 [a0 + 20] = 0x20\n 32355: u8 [a0 + 13] = 0x20\n 32359: u8 [a0 + 10] = 0x20\n 32363: u8 [a0 + 7] = 0x20\n 32367: u8 [a0 + 17] = 0x67\n 32371: u8 [a0 + 6] = 0x67\n 32375: u8 [a0 + 16] = 0x6e\n 32379: u8 [a0 + 11] = 0x6e\n 32383: u8 [a0 + 5] = 0x6e\n 32387: u8 [a0 + 23] = 0x74\n 32391: u8 [a0 + 3] = 0x74\n 32395: u8 [a0 + 9] = 0x73\n 32399: u8 [a0 + 2] = 0x73\n 32403: u8 [a0 + 24] = 0x69\n 32407: u8 [a0 + 8] = 0x69\n 32411: u8 [a0 + 4] = 0x69\n 32415: u8 [a0 + 1] = 0x69\n 32419: u8 [a0 + 0] = 0x4c\n 32422: a1 = u64 [sp]\n 32424: a0 = a1 + 0x60\n 32427: a1 = a0 <u a1\n 32430: a3 = u64 [sp + 0x8]\n 32433: a2 = a3 + a1\n 32436: a3 = a2 <u a3\n 32439: a3 = a1 if a1 == 0\n 32442: a1 = u64 [sp + 0x10]\n 32445: a3 = a3 + a1\n 32448: a1 = a3 <u a1\n 32451: a4 = u64 [sp + 0x18]\n 32454: a1 = a1 + a4\n 32457: a4 = u64 [sp + 0x28]\n 32460: u64 [a4] = a0\n 32462: u64 [a4 + 0x8] = a2\n 32465: u64 [a4 + 0x10] = a3\n 32468: u64 [a4 + 0x18] = a1\n 32471: ra = u64 [sp + 0x58]\n 32474: s0 = u64 [sp + 0x50]\n 32477: s1 = u64 [sp + 0x48]\n 32480: sp = sp + 0x60\n 32483: ret\n      : @449 (gas: 1)\n 32485: trap\n      : @450 (gas: 17)\n 32486: sp = sp + 0xffffffffffffffa0\n 32489: u64 [sp + 0x58] = ra\n 32492: u64 [sp + 0x50] = s0\n 32495: u64 [sp + 0x48] = s1\n 32498: a3 = u64 [a1 + 0x18]\n 32501: a4 = u64 [a1 + 0x10]\n 32504: a5 = u64 [a1 + 0x8]\n 32507: s1 = u64 [a1]\n 32509: a1 = a5 | a3\n 32512: a2 = s1 | a4\n 32515: a2 = a2 | a1\n 32518: a2 = a2 >> 0x20\n 32521: a1 = a1 | a4\n 32524: a1 = a1 << 0x20\n 32527: a1 = a1 | a2\n 32530: u64 [sp + 0x28] = a0\n 32533: jump @457 if a1 != 0\n      : @451 (gas: 19)\n 32537: a0 = s1 + 0x20\n 32540: u64 [sp + 0x30] = a0\n 32543: a0 = a0 <u s1\n 32546: a1 = a5 + a0\n 32549: u64 [sp + 0x40] = a1\n 32552: u64 [sp + 0x8] = a5\n 32555: s0 = a1 <u a5\n 32558: s0 = a0 if a0 == 0\n 32561: s0 = s0 + a4\n 32564: u64 [sp + 0x10] = a4\n 32567: a0 = s0 <u a4\n 32570: u64 [sp + 0x18] = a3\n 32573: a0 = a0 + a3\n 32576: u64 [sp + 0x38] = a0\n 32579: u64 [sp] = s1\n 32581: i32 a0 = s1 + 0\n 32583: a1 = 0x20\n 32586: s1 = 0x20\n 32589: ra = 398, jump @0\n      : @452 [@dyn 199] (gas: 45)\n 32595: u8 [a0 + 0x1f] = s1\n 32598: a1 = u64 [sp + 0x30]\n 32601: s1 = a1\n 32603: a1 = a1 | s0\n 32606: a2 = u64 [sp + 0x40]\n 32609: a4 = u64 [sp + 0x38]\n 32612: a2 = a2 | a4\n 32615: a1 = a1 | a2\n 32618: a1 = a1 >> 0x20\n 32621: u64 [sp + 0x20] = s0\n 32624: a2 = a2 | s0\n 32627: a2 = a2 << 0x20\n 32630: a1 = a1 | a2\n 32633: u8 [a0 + 30] = 0\n 32636: u8 [a0 + 29] = 0\n 32639: u8 [a0 + 28] = 0\n 32642: u8 [a0 + 27] = 0\n 32645: u8 [a0 + 26] = 0\n 32648: u8 [a0 + 25] = 0\n 32651: u8 [a0 + 24] = 0\n 32654: u8 [a0 + 23] = 0\n 32657: u8 [a0 + 22] = 0\n 32660: u8 [a0 + 21] = 0\n 32663: u8 [a0 + 20] = 0\n 32666: u8 [a0 + 19] = 0\n 32669: u8 [a0 + 18] = 0\n 32672: u8 [a0 + 17] = 0\n 32675: u8 [a0 + 16] = 0\n 32678: u8 [a0 + 15] = 0\n 32681: u8 [a0 + 14] = 0\n 32684: u8 [a0 + 13] = 0\n 32687: u8 [a0 + 12] = 0\n 32690: u8 [a0 + 11] = 0\n 32693: u8 [a0 + 10] = 0\n 32696: u8 [a0 + 9] = 0\n 32699: u8 [a0 + 8] = 0\n 32702: u8 [a0 + 7] = 0\n 32705: u8 [a0 + 6] = 0\n 32708: u8 [a0 + 5] = 0\n 32711: u8 [a0 + 4] = 0\n 32714: u8 [a0 + 3] = 0\n 32717: u8 [a0 + 2] = 0\n 32720: u8 [a0 + 1] = 0\n 32723: u8 [a0 + 0] = 0\n 32725: jump @457 if a1 != 0\n      : @453 (gas: 4)\n 32729: i32 s0 = s1 + 0\n 32731: a1 = 0x20\n 32734: a0 = s0\n 32736: ra = 400, jump @0\n      : @454 [@dyn 200] (gas: 41)\n 32742: u8 [a0 + 31] = 0x1e\n 32746: u8 [a0 + 30] = 0\n 32749: u8 [a0 + 29] = 0\n 32752: u8 [a0 + 28] = 0\n 32755: u8 [a0 + 27] = 0\n 32758: u8 [a0 + 26] = 0\n 32761: u8 [a0 + 25] = 0\n 32764: u8 [a0 + 24] = 0\n 32767: u8 [a0 + 23] = 0\n 32770: u8 [a0 + 22] = 0\n 32773: u8 [a0 + 21] = 0\n 32776: u8 [a0 + 20] = 0\n 32779: u8 [a0 + 19] = 0\n 32782: u8 [a0 + 18] = 0\n 32785: u8 [a0 + 17] = 0\n 32788: u8 [a0 + 16] = 0\n 32791: u8 [a0 + 15] = 0\n 32794: u8 [a0 + 14] = 0\n 32797: u8 [a0 + 13] = 0\n 32800: u8 [a0 + 12] = 0\n 32803: u8 [a0 + 11] = 0\n 32806: u8 [a0 + 10] = 0\n 32809: u8 [a0 + 9] = 0\n 32812: u8 [a0 + 8] = 0\n 32815: u8 [a0 + 7] = 0\n 32818: u8 [a0 + 6] = 0\n 32821: u8 [a0 + 5] = 0\n 32824: u8 [a0 + 4] = 0\n 32827: u8 [a0 + 3] = 0\n 32830: u8 [a0 + 2] = 0\n 32833: u8 [a0 + 1] = 0\n 32836: a1 = u64 [sp + 0x20]\n 32839: a2 = u64 [sp + 0x38]\n 32842: a1 = a1 | a2\n 32845: a2 = 0xffffffe0\n 32855: a2 = s1 <u a2\n 32858: a3 = u64 [sp + 0x40]\n 32861: a2 = 0 if a3 != 0\n 32863: a2 = 0 if a1 != 0\n 32865: u8 [a0 + 0] = 0\n 32867: jump @457 if a2 == 0\n      : @455 (gas: 3)\n 32871: i32 a0 = s0 + 0x20\n 32874: a1 = 0x20\n 32877: ra = 402, jump @0\n      : @456 [@dyn 201] (gas: 55)\n 32884: u8 [a0 + 31] = 0\n 32887: u8 [a0 + 30] = 0\n 32890: u8 [a0 + 29] = 0x67\n 32894: u8 [a0 + 28] = 0x6e\n 32898: u8 [a0 + 27] = 0x69\n 32902: u8 [a0 + 26] = 0x74\n 32906: u8 [a0 + 25] = 0x73\n 32910: u8 [a0 + 24] = 0x69\n 32914: u8 [a0 + 23] = 0x6c\n 32918: a5 = 0x20\n 32921: u8 [a0 + 0x16] = a5\n 32924: u8 [a0 + 21] = 0x6e\n 32928: u8 [a0 + 20] = 0x77\n 32932: u8 [a0 + 19] = 0x6f\n 32936: u8 [a0 + 0x12] = a5\n 32939: u8 [a0 + 17] = 0x72\n 32943: u8 [a0 + 16] = 0x75\n 32947: u8 [a0 + 15] = 0x6f\n 32951: u8 [a0 + 14] = 0x79\n 32955: u8 [a0 + 0xd] = a5\n 32958: u8 [a0 + 12] = 0x74\n 32962: u8 [a0 + 11] = 0x70\n 32966: u8 [a0 + 10] = 0x65\n 32970: u8 [a0 + 9] = 0x63\n 32974: u8 [a0 + 8] = 0x63\n 32978: u8 [a0 + 7] = 0x61\n 32982: u8 [a0 + 0x6] = a5\n 32985: u8 [a0 + 5] = 0x74\n 32989: u8 [a0 + 4] = 0x6f\n 32993: u8 [a0 + 3] = 0x6e\n 32997: u8 [a0 + 2] = 0x6e\n 33001: u8 [a0 + 1] = 0x61\n 33005: u8 [a0 + 0] = 0x43\n 33008: a1 = u64 [sp]\n 33010: a0 = a1 + 0x60\n 33013: a1 = a0 <u a1\n 33016: a3 = u64 [sp + 0x8]\n 33019: a2 = a3 + a1\n 33022: a3 = a2 <u a3\n 33025: a3 = a1 if a1 == 0\n 33028: a1 = u64 [sp + 0x10]\n 33031: a3 = a3 + a1\n 33034: a1 = a3 <u a1\n 33037: a4 = u64 [sp + 0x18]\n 33040: a1 = a1 + a4\n 33043: a4 = u64 [sp + 0x28]\n 33046: u64 [a4] = a0\n 33048: u64 [a4 + 0x8] = a2\n 33051: u64 [a4 + 0x10] = a3\n 33054: u64 [a4 + 0x18] = a1\n 33057: ra = u64 [sp + 0x58]\n 33060: s0 = u64 [sp + 0x50]\n 33063: s1 = u64 [sp + 0x48]\n 33066: sp = sp + 0x60\n 33069: ret\n      : @457 (gas: 1)\n 33071: trap\n      : @458 (gas: 17)\n 33072: sp = sp + 0xffffffffffffffa0\n 33075: u64 [sp + 0x58] = ra\n 33078: u64 [sp + 0x50] = s0\n 33081: u64 [sp + 0x48] = s1\n 33084: a3 = u64 [a1 + 0x18]\n 33087: a4 = u64 [a1 + 0x10]\n 33090: a5 = u64 [a1 + 0x8]\n 33093: s1 = u64 [a1]\n 33095: a1 = a5 | a3\n 33098: a2 = s1 | a4\n 33101: a2 = a2 | a1\n 33104: a2 = a2 >> 0x20\n 33107: a1 = a1 | a4\n 33110: a1 = a1 << 0x20\n 33113: a1 = a1 | a2\n 33116: u64 [sp + 0x20] = a0\n 33119: jump @467 if a1 != 0\n      : @459 (gas: 19)\n 33123: a0 = s1 + 0x20\n 33126: u64 [sp + 0x40] = a0\n 33129: a0 = a0 <u s1\n 33132: a1 = a5 + a0\n 33135: u64 [sp + 0x38] = a1\n 33138: u64 [sp + 0x8] = a5\n 33141: s0 = a1 <u a5\n 33144: s0 = a0 if a0 == 0\n 33147: s0 = s0 + a4\n 33150: u64 [sp + 0x10] = a4\n 33153: a0 = s0 <u a4\n 33156: u64 [sp + 0x18] = a3\n 33159: a0 = a0 + a3\n 33162: u64 [sp + 0x30] = a0\n 33165: u64 [sp] = s1\n 33167: i32 a0 = s1 + 0\n 33169: a1 = 0x20\n 33172: s1 = 0x20\n 33175: ra = 404, jump @0\n      : @460 [@dyn 202] (gas: 43)\n 33182: u8 [a0 + 0x1f] = s1\n 33185: a1 = u64 [sp + 0x40]\n 33188: a1 = a1 | s0\n 33191: a2 = u64 [sp + 0x38]\n 33194: a3 = u64 [sp + 0x30]\n 33197: a2 = a2 | a3\n 33200: a1 = a1 | a2\n 33203: a1 = a1 >> 0x20\n 33206: a2 = a2 | s0\n 33209: a2 = a2 << 0x20\n 33212: a1 = a1 | a2\n 33215: u8 [a0 + 30] = 0\n 33218: u8 [a0 + 29] = 0\n 33221: u8 [a0 + 28] = 0\n 33224: u8 [a0 + 27] = 0\n 33227: u8 [a0 + 26] = 0\n 33230: u8 [a0 + 25] = 0\n 33233: u8 [a0 + 24] = 0\n 33236: u8 [a0 + 23] = 0\n 33239: u8 [a0 + 22] = 0\n 33242: u8 [a0 + 21] = 0\n 33245: u8 [a0 + 20] = 0\n 33248: u8 [a0 + 19] = 0\n 33251: u8 [a0 + 18] = 0\n 33254: u8 [a0 + 17] = 0\n 33257: u8 [a0 + 16] = 0\n 33260: u8 [a0 + 15] = 0\n 33263: u8 [a0 + 14] = 0\n 33266: u8 [a0 + 13] = 0\n 33269: u8 [a0 + 12] = 0\n 33272: u8 [a0 + 11] = 0\n 33275: u8 [a0 + 10] = 0\n 33278: u8 [a0 + 9] = 0\n 33281: u8 [a0 + 8] = 0\n 33284: u8 [a0 + 7] = 0\n 33287: u8 [a0 + 6] = 0\n 33290: u8 [a0 + 5] = 0\n 33293: u8 [a0 + 4] = 0\n 33296: u8 [a0 + 3] = 0\n 33299: u8 [a0 + 2] = 0\n 33302: u8 [a0 + 1] = 0\n 33305: u8 [a0 + 0] = 0\n 33307: jump @467 if a1 != 0\n      : @461 (gas: 6)\n 33311: s1 = s0\n 33313: s0 = u64 [sp + 0x40]\n 33316: i32 a0 = s0 + 0\n 33318: a1 = 0x20\n 33321: u64 [sp + 0x28] = a0\n 33324: ra = 406, jump @0\n      : @462 [@dyn 203] (gas: 42)\n 33331: u8 [a0 + 31] = 0x22\n 33335: u8 [a0 + 30] = 0\n 33338: u8 [a0 + 29] = 0\n 33341: u8 [a0 + 28] = 0\n 33344: u8 [a0 + 27] = 0\n 33347: u8 [a0 + 26] = 0\n 33350: u8 [a0 + 25] = 0\n 33353: u8 [a0 + 24] = 0\n 33356: u8 [a0 + 23] = 0\n 33359: u8 [a0 + 22] = 0\n 33362: u8 [a0 + 21] = 0\n 33365: u8 [a0 + 20] = 0\n 33368: u8 [a0 + 19] = 0\n 33371: u8 [a0 + 18] = 0\n 33374: u8 [a0 + 17] = 0\n 33377: u8 [a0 + 16] = 0\n 33380: u8 [a0 + 15] = 0\n 33383: u8 [a0 + 14] = 0\n 33386: u8 [a0 + 13] = 0\n 33389: u8 [a0 + 12] = 0\n 33392: u8 [a0 + 11] = 0\n 33395: u8 [a0 + 10] = 0\n 33398: u8 [a0 + 9] = 0\n 33401: u8 [a0 + 8] = 0\n 33404: u8 [a0 + 7] = 0\n 33407: u8 [a0 + 6] = 0\n 33410: u8 [a0 + 5] = 0\n 33413: u8 [a0 + 4] = 0\n 33416: u8 [a0 + 3] = 0\n 33419: u8 [a0 + 2] = 0\n 33422: u8 [a0 + 1] = 0\n 33425: a1 = u64 [sp + 0x30]\n 33428: a2 = s1 | a1\n 33431: s1 = 0x100000000\n 33441: a1 = 0xffffffe0\n 33451: a1 = s0 <u a1\n 33454: s0 = a2\n 33456: a2 = u64 [sp + 0x38]\n 33459: a1 = 0 if a2 != 0\n 33461: a1 = 0 if s0 != 0\n 33463: u8 [a0 + 0] = 0\n 33465: jump @467 if a1 == 0\n      : @463 (gas: 4)\n 33469: a0 = u64 [sp + 0x28]\n 33472: i32 a0 = a0 + 0x20\n 33475: a1 = 0x20\n 33478: ra = 408, jump @0\n      : @464 [@dyn 204] (gas: 41)\n 33485: u8 [a0 + 30] = 0x63\n 33489: u8 [a0 + 25] = 0x73\n 33493: u8 [a0 + 22] = 0x71\n 33497: u8 [a0 + 27] = 0x65\n 33501: u8 [a0 + 24] = 0x65\n 33505: u8 [a0 + 21] = 0x65\n 33509: u8 [a0 + 18] = 0x65\n 33513: u8 [a0 + 14] = 0x65\n 33517: u8 [a0 + 13] = 0x76\n 33521: u8 [a0 + 31] = 0x61\n 33525: u8 [a0 + 12] = 0x61\n 33529: u8 [a0 + 17] = 0x68\n 33533: u8 [a0 + 11] = 0x68\n 33537: u8 [a0 + 26] = 0x74\n 33541: u8 [a0 + 16] = 0x74\n 33545: u8 [a0 + 9] = 0x74\n 33549: u8 [a0 + 7] = 0x6e\n 33553: u8 [a0 + 29] = 0x20\n 33557: u8 [a0 + 19] = 0x20\n 33561: u8 [a0 + 15] = 0x20\n 33565: u8 [a0 + 10] = 0x20\n 33569: u8 [a0 + 6] = 0x20\n 33573: u8 [a0 + 3] = 0x20\n 33577: u8 [a0 + 23] = 0x75\n 33581: u8 [a0 + 2] = 0x75\n 33585: u8 [a0 + 8] = 0x6f\n 33589: u8 [a0 + 5] = 0x6f\n 33593: u8 [a0 + 1] = 0x6f\n 33597: u8 [a0 + 0] = 0x59\n 33600: a1 = s1 + 0xffffffffffffffc0\n 33603: a2 = u64 [sp + 0x40]\n 33606: a1 = a2 <u a1\n 33609: a2 = u64 [sp + 0x38]\n 33612: a1 = 0 if a2 != 0\n 33614: s1 = 0x64\n 33617: u8 [a0 + 0x1c] = s1\n 33620: a1 = 0 if s0 != 0\n 33622: s0 = 0x72\n 33625: u8 [a0 + 0x14] = s0\n 33628: u8 [a0 + 0x4] = s1\n 33631: jump @467 if a1 == 0\n      : @465 (gas: 4)\n 33635: a0 = u64 [sp + 0x28]\n 33638: i32 a0 = a0 + 0x40\n 33641: a1 = 0x20\n 33644: ra = 410, jump @0\n      : @466 [@dyn 205] (gas: 54)\n 33651: u8 [a0 + 31] = 0\n 33654: u8 [a0 + 30] = 0\n 33657: u8 [a0 + 29] = 0\n 33660: u8 [a0 + 28] = 0\n 33663: u8 [a0 + 27] = 0\n 33666: u8 [a0 + 26] = 0\n 33669: u8 [a0 + 25] = 0\n 33672: u8 [a0 + 24] = 0\n 33675: u8 [a0 + 23] = 0\n 33678: u8 [a0 + 22] = 0\n 33681: u8 [a0 + 21] = 0\n 33684: u8 [a0 + 20] = 0\n 33687: u8 [a0 + 19] = 0\n 33690: u8 [a0 + 18] = 0\n 33693: u8 [a0 + 17] = 0\n 33696: u8 [a0 + 16] = 0\n 33699: u8 [a0 + 15] = 0\n 33702: u8 [a0 + 14] = 0\n 33705: u8 [a0 + 13] = 0\n 33708: u8 [a0 + 12] = 0\n 33711: u8 [a0 + 11] = 0\n 33714: u8 [a0 + 10] = 0\n 33717: u8 [a0 + 9] = 0\n 33720: u8 [a0 + 8] = 0\n 33723: u8 [a0 + 7] = 0\n 33726: u8 [a0 + 6] = 0\n 33729: u8 [a0 + 5] = 0\n 33732: u8 [a0 + 4] = 0\n 33735: u8 [a0 + 3] = 0\n 33738: u8 [a0 + 2] = 0\n 33741: u8 [a0 + 0x1] = s1\n 33744: u8 [a0] = s0\n 33746: a1 = u64 [sp]\n 33748: a0 = a1 + 0x80\n 33752: a1 = a0 <u a1\n 33755: a3 = u64 [sp + 0x8]\n 33758: a2 = a3 + a1\n 33761: a3 = a2 <u a3\n 33764: a3 = a1 if a1 == 0\n 33767: a1 = u64 [sp + 0x10]\n 33770: a3 = a3 + a1\n 33773: a1 = a3 <u a1\n 33776: a4 = u64 [sp + 0x18]\n 33779: a1 = a1 + a4\n 33782: a4 = u64 [sp + 0x20]\n 33785: u64 [a4] = a0\n 33787: u64 [a4 + 0x8] = a2\n 33790: u64 [a4 + 0x10] = a3\n 33793: u64 [a4 + 0x18] = a1\n 33796: ra = u64 [sp + 0x58]\n 33799: s0 = u64 [sp + 0x50]\n 33802: s1 = u64 [sp + 0x48]\n 33805: sp = sp + 0x60\n 33808: ret\n      : @467 (gas: 1)\n 33810: trap\n      : @468 (gas: 19)\n 33811: t1 = u64 [sp + 0xb0]\n 33815: t0 = u64 [sp + 0xa8]\n 33819: a0 = u64 [sp + 0x558]\n 33823: a1 = u64 [sp + 0x540]\n 33827: t2 = u64 [sp + 0x550]\n 33831: a3 = u64 [sp + 0x548]\n 33835: a4 = a0 ^ s1\n 33838: a0 = s1 <u a0\n 33841: a2 = u64 [sp + 0xb8]\n 33845: a5 = a2 <u t2\n 33848: a5 = a0 if a4 != 0\n 33851: a0 = a3 ^ t0\n 33854: a3 = t0 <u a3\n 33857: a1 = t1 <u a1\n 33860: a1 = a3 if a0 != 0\n 33863: a0 = t2 ^ a2\n 33866: a0 = a0 | a4\n 33869: a1 = a5 if a0 != 0\n 33872: jump @470 if a1 != 0\n      : @469 (gas: 1)\n 33875: jump @519\n      : @470 (gas: 12)\n 33878: u64 [sp + 0x3c0] = t1\n 33882: u64 [sp + 1016] = 0\n 33886: u64 [sp + 1008] = 0\n 33890: u64 [sp + 1000] = 0\n 33894: u64 [sp + 992] = 0x1\n 33899: u64 [sp + 0x3c8] = t0\n 33903: u64 [sp + 0x3d0] = a2\n 33907: a0 = sp + 0x400\n 33911: a1 = sp + 0x3e0\n 33915: a2 = sp + 0x3c0\n 33919: u64 [sp + 0x3d8] = s1\n 33923: ra = 412, jump @198\n      : @471 [@dyn 206] (gas: 36)\n 33929: a0 = u64 [sp + 0x400]\n 33933: a4 = u64 [sp + 0x418]\n 33937: a1 = u64 [sp + 0x408]\n 33941: a5 = u64 [sp + 0x410]\n 33945: a2 = a0 + 0x3\n 33948: u64 [sp + 0xa8] = a0\n 33952: a0 = a2 <u a0\n 33955: a3 = a1 + a0\n 33958: u64 [sp + 0xa0] = a1\n 33962: a1 = a3 <u a1\n 33965: a1 = a0 if a0 == 0\n 33968: a1 = a1 + a5\n 33971: u64 [sp + 0xb0] = a5\n 33975: a0 = a1 <u a5\n 33978: u64 [sp + 0xb8] = a4\n 33982: a0 = a0 + a4\n 33985: u64 [sp + 0x98] = a3\n 33989: u64 [sp + 0x528] = a3\n 33993: u64 [sp + 0x50] = a2\n 33996: u64 [sp + 0x520] = a2\n 34000: u64 [sp + 0x90] = a1\n 34004: u64 [sp + 0x530] = a1\n 34008: u64 [sp + 0x88] = a0\n 34012: u64 [sp + 0x538] = a0\n 34016: u64 [sp + 1368] = 0\n 34020: u64 [sp + 1360] = 0\n 34024: u64 [sp + 1352] = 0\n 34028: u64 [sp + 1344] = 0\n 34032: u32 [sp + 1280] = 0x20\n 34037: i32 a1 = sp + 0x520\n 34041: i32 a3 = sp + 0x540\n 34045: i32 a4 = sp + 0x500\n 34049: a2 = 0xffffffffffffffff\n 34052: a0 = 0\n 34054: ecalli 4 // 'get_storage'\n 34056: fallthrough\n      : @472 (gas: 2)\n 34057: a0 = u8 [sp + 0x540]\n 34061: jump @474 if a0 != 0\n      : @473 (gas: 1)\n 34064: jump @524\n      : @474 (gas: 37)\n 34067: i32 a0 = sp + 0x480\n 34071: ecalli 3 // 'caller'\n 34073: a0 = u64 [sp + 0x488]\n 34077: a1 = u64 [sp + 0x480]\n 34081: a2 = i32 [sp + 0x490]\n 34085: a0 = reverse a0\n 34087: a3 = a0 >> 0x20\n 34090: s1 = reverse a1\n 34092: a1 = s1 << 0x20\n 34095: a1 = a1 | a3\n 34098: u64 [sp + 0x80] = a1\n 34102: a0 = a0 << 0x20\n 34105: a1 = reverse a2\n 34107: a1 = a1 >> 0x20\n 34110: a0 = a0 | a1\n 34113: u64 [sp + 0x78] = a0\n 34116: s1 = s1 >> 0x20\n 34119: a0 = u64 [sp + 0xb8]\n 34123: u64 [sp + 0x538] = a0\n 34127: a0 = u64 [sp + 0xb0]\n 34131: u64 [sp + 0x530] = a0\n 34135: a0 = u64 [sp + 0xa0]\n 34139: u64 [sp + 0x528] = a0\n 34143: a0 = u64 [sp + 0xa8]\n 34147: u64 [sp + 0x520] = a0\n 34151: u64 [sp + 1368] = 0\n 34155: u64 [sp + 1360] = 0\n 34159: u64 [sp + 1352] = 0\n 34163: u64 [sp + 1344] = 0\n 34167: u32 [sp + 1280] = 0x20\n 34172: i32 a1 = sp + 0x520\n 34176: i32 a3 = sp + 0x540\n 34180: i32 a4 = sp + 0x500\n 34184: a2 = 0xffffffffffffffff\n 34187: a0 = 0\n 34189: ecalli 4 // 'get_storage'\n 34191: fallthrough\n      : @475 (gas: 11)\n 34192: a0 = u32 [sp + 0x550]\n 34196: a1 = u64 [sp + 0x540]\n 34200: a2 = u64 [sp + 0x548]\n 34204: a0 = a0 ^ s1\n 34207: a3 = u64 [sp + 0x78]\n 34210: a1 = a1 ^ a3\n 34213: a0 = a0 | a1\n 34216: a1 = u64 [sp + 0x80]\n 34220: a1 = a1 ^ a2\n 34223: a0 = a0 | a1\n 34226: jump @477 if a0 != 0\n      : @476 (gas: 1)\n 34229: jump @529\n      : @477 (gas: 19)\n 34232: i32 a0 = sp + 0x4a0\n 34236: ecalli 3 // 'caller'\n 34238: a0 = u64 [sp + 0x4a8]\n 34242: a1 = i32 [sp + 0x4b0]\n 34246: s1 = u64 [sp + 0x4a0]\n 34250: a0 = reverse a0\n 34252: a2 = a0 << 0x20\n 34255: a1 = reverse a1\n 34257: a1 = a1 >> 0x20\n 34260: a1 = a1 | a2\n 34263: u64 [sp + 0x80] = a1\n 34267: a0 = a0 >> 0x20\n 34270: a1 = reverse s1\n 34272: a1 = a1 << 0x20\n 34275: a0 = a0 | a1\n 34278: u64 [sp + 0x78] = a0\n 34281: a1 = 0x20\n 34284: a0 = 0\n 34286: ra = 414, jump @0\n      : @478 [@dyn 207] (gas: 56)\n 34293: a1 = u64 [sp + 0x78]\n 34296: a1 = reverse a1\n 34298: a2 = u64 [sp + 0x80]\n 34302: a2 = reverse a2\n 34304: a3 = s1 >> 0x18\n 34307: u8 [a0 + 0xf] = a3\n 34310: a3 = s1 >> 0x10\n 34313: u8 [a0 + 0xe] = a3\n 34316: a3 = s1 >> 0x8\n 34319: u8 [a0 + 0xd] = a3\n 34322: u8 [a0 + 0xc] = s1\n 34325: u8 [a0 + 11] = 0\n 34328: u8 [a0 + 10] = 0\n 34331: u8 [a0 + 9] = 0\n 34334: u8 [a0 + 8] = 0\n 34337: u8 [a0 + 7] = 0\n 34340: u8 [a0 + 6] = 0\n 34343: u8 [a0 + 5] = 0\n 34346: u8 [a0 + 4] = 0\n 34349: u8 [a0 + 3] = 0\n 34352: u8 [a0 + 2] = 0\n 34355: u8 [a0 + 1] = 0\n 34358: u8 [a0 + 0] = 0\n 34360: u8 [a0 + 0x18] = a2\n 34363: u8 [a0 + 0x10] = a1\n 34366: a3 = a2 >> 0x38\n 34369: u8 [a0 + 0x1f] = a3\n 34372: a3 = a2 >> 0x30\n 34375: u8 [a0 + 0x1e] = a3\n 34378: a3 = a2 >> 0x28\n 34381: u8 [a0 + 0x1d] = a3\n 34384: a3 = a2 >> 0x20\n 34387: u8 [a0 + 0x1c] = a3\n 34390: a3 = a2 >> 0x18\n 34393: u8 [a0 + 0x1b] = a3\n 34396: a3 = a2 >> 0x10\n 34399: u8 [a0 + 0x1a] = a3\n 34402: a2 = a2 >> 0x8\n 34405: u8 [a0 + 0x19] = a2\n 34408: a2 = a1 >> 0x38\n 34411: u8 [a0 + 0x17] = a2\n 34414: a2 = a1 >> 0x30\n 34417: u8 [a0 + 0x16] = a2\n 34420: a2 = a1 >> 0x28\n 34423: u8 [a0 + 0x15] = a2\n 34426: a2 = a1 >> 0x20\n 34429: u8 [a0 + 0x14] = a2\n 34432: a2 = a1 >> 0x18\n 34435: u8 [a0 + 0x13] = a2\n 34438: a2 = a1 >> 0x10\n 34441: u8 [a0 + 0x12] = a2\n 34444: a1 = a1 >> 0x8\n 34447: u8 [a0 + 0x11] = a1\n 34450: a0 = 0x20\n 34453: a1 = 0x20\n 34456: ra = 416, jump @0\n      : @479 [@dyn 208] (gas: 35)\n 34463: u8 [a0 + 31] = 0\n 34466: u8 [a0 + 30] = 0\n 34469: u8 [a0 + 29] = 0\n 34472: u8 [a0 + 28] = 0\n 34475: u8 [a0 + 27] = 0\n 34478: u8 [a0 + 26] = 0\n 34481: u8 [a0 + 25] = 0\n 34484: u8 [a0 + 24] = 0\n 34487: u8 [a0 + 23] = 0\n 34490: u8 [a0 + 22] = 0\n 34493: u8 [a0 + 21] = 0\n 34496: u8 [a0 + 20] = 0\n 34499: u8 [a0 + 19] = 0\n 34502: u8 [a0 + 18] = 0\n 34505: u8 [a0 + 17] = 0\n 34508: u8 [a0 + 16] = 0\n 34511: u8 [a0 + 15] = 0\n 34514: u8 [a0 + 14] = 0\n 34517: u8 [a0 + 13] = 0\n 34520: u8 [a0 + 12] = 0\n 34523: u8 [a0 + 11] = 0\n 34526: u8 [a0 + 10] = 0\n 34529: u8 [a0 + 9] = 0\n 34532: u8 [a0 + 8] = 0\n 34535: u8 [a0 + 7] = 0\n 34538: u8 [a0 + 6] = 0\n 34541: u8 [a0 + 5] = 0\n 34544: u8 [a0 + 4] = 0\n 34547: u8 [a0 + 3] = 0\n 34550: u8 [a0 + 2] = 0\n 34553: u8 [a0 + 1] = 0\n 34556: u8 [a0 + 0] = 0\n 34558: a1 = 0x40\n 34561: a0 = 0\n 34563: ra = 418, jump @0\n      : @480 [@dyn 209] (gas: 43)\n 34570: i32 a0 = a0 + 0\n 34572: i32 a2 = sp + 0x540\n 34576: a1 = 0x40\n 34579: ecalli 5 // 'hash_keccak_256'\n 34581: a0 = u64 [sp + 0x558]\n 34585: u64 [sp + 0x58] = a0\n 34588: a0 = u64 [sp + 0x550]\n 34592: u64 [sp + 0x60] = a0\n 34595: a0 = u64 [sp + 0x548]\n 34599: u64 [sp + 0x48] = a0\n 34602: a0 = u64 [sp + 0xa8]\n 34606: a2 = a0 + 0x2\n 34609: a0 = a2 <u a0\n 34612: a1 = u64 [sp + 0xa0]\n 34616: a3 = a1 + a0\n 34619: a1 = a3 <u a1\n 34622: a1 = a0 if a0 == 0\n 34625: s1 = u64 [sp + 0x540]\n 34629: a0 = u64 [sp + 0xb0]\n 34633: a1 = a1 + a0\n 34636: u32 [sp + 1280] = 0x20\n 34641: a0 = a1 <u a0\n 34644: a4 = u64 [sp + 0xb8]\n 34648: a0 = a0 + a4\n 34651: u64 [sp + 0x68] = a0\n 34654: u64 [sp + 0x538] = a0\n 34658: u64 [sp + 0x70] = a1\n 34661: u64 [sp + 0x530] = a1\n 34665: u64 [sp + 0x78] = a3\n 34668: u64 [sp + 0x528] = a3\n 34672: u64 [sp + 0x80] = a2\n 34676: u64 [sp + 0x520] = a2\n 34680: u64 [sp + 1368] = 0\n 34684: u64 [sp + 1360] = 0\n 34688: u64 [sp + 1352] = 0\n 34692: u64 [sp + 1344] = 0\n 34696: i32 a1 = sp + 0x520\n 34700: i32 a3 = sp + 0x540\n 34704: i32 a4 = sp + 0x500\n 34708: a2 = 0xffffffffffffffff\n 34711: a0 = 0\n 34713: ecalli 4 // 'get_storage'\n 34715: fallthrough\n      : @481 (gas: 9)\n 34716: t1 = u64 [sp + 0x558]\n 34720: a1 = u64 [sp + 0x550]\n 34724: a3 = u64 [sp + 0x540]\n 34728: a2 = u64 [sp + 0x548]\n 34732: a4 = a1 | t1\n 34735: a5 = a3 <u 0x9\n 34738: a5 = 0 if a2 != 0\n 34740: a5 = 0 if a4 != 0\n 34742: jump @483 if a5 != 0\n      : @482 (gas: 1)\n 34745: jump @541\n      : @483 (gas: 37)\n 34748: t0 = reverse s1\n 34750: a0 = u64 [sp + 0x48]\n 34753: a5 = reverse a0\n 34755: a0 = u64 [sp + 0x58]\n 34758: s1 = reverse a0\n 34760: a0 = u64 [sp + 0x60]\n 34763: a4 = reverse a0\n 34765: a4 = a4 + a2\n 34768: s1 = s1 + a3\n 34771: a3 = s1 <u a3\n 34774: a4 = a4 + a3\n 34777: a0 = a4 ^ a2\n 34780: a2 = a4 <u a2\n 34783: a2 = a3 if a0 == 0\n 34786: a5 = a5 + a1\n 34789: a2 = a2 + a5\n 34792: a0 = a2 <u a5\n 34795: a1 = a5 <u a1\n 34798: t0 = t0 + t1\n 34801: a1 = a1 + t0\n 34804: a0 = a0 + a1\n 34807: u64 [sp + 0x520] = s1\n 34811: u64 [sp + 0x528] = a4\n 34815: u64 [sp + 0x530] = a2\n 34819: u64 [sp + 0x538] = a0\n 34823: u64 [sp + 1368] = 0\n 34827: u64 [sp + 1360] = 0\n 34831: u64 [sp + 1352] = 0\n 34835: u64 [sp + 1344] = 0\n 34839: u32 [sp + 1280] = 0x20\n 34844: i32 a1 = sp + 0x520\n 34848: i32 a3 = sp + 0x540\n 34852: i32 a4 = sp + 0x500\n 34856: a2 = 0xffffffffffffffff\n 34859: a0 = 0\n 34861: ecalli 4 // 'get_storage'\n 34863: fallthrough\n      : @484 (gas: 8)\n 34864: a0 = u64 [sp + 0x550]\n 34868: a1 = u64 [sp + 0x558]\n 34872: a2 = u64 [sp + 0x548]\n 34876: a3 = u64 [sp + 0x540]\n 34880: a1 = a1 | a2\n 34883: a0 = a0 | a3\n 34886: a0 = a0 | a1\n 34889: jump @486 if a0 != 0\n      : @485 (gas: 1)\n 34892: jump @534\n      : @486 (gas: 19)\n 34895: i32 a0 = sp + 0x4c0\n 34899: ecalli 3 // 'caller'\n 34901: a0 = u64 [sp + 0x4c8]\n 34905: a1 = i32 [sp + 0x4d0]\n 34909: s1 = u64 [sp + 0x4c0]\n 34913: a0 = reverse a0\n 34915: a2 = a0 << 0x20\n 34918: a1 = reverse a1\n 34920: a1 = a1 >> 0x20\n 34923: a1 = a1 | a2\n 34926: u64 [sp + 0x60] = a1\n 34929: a0 = a0 >> 0x20\n 34932: a1 = reverse s1\n 34934: a1 = a1 << 0x20\n 34937: a0 = a0 | a1\n 34940: u64 [sp + 0x58] = a0\n 34943: a1 = 0x20\n 34946: a0 = 0\n 34948: ra = 420, jump @0\n      : @487 [@dyn 210] (gas: 56)\n 34955: a1 = u64 [sp + 0x58]\n 34958: a1 = reverse a1\n 34960: a2 = u64 [sp + 0x60]\n 34963: a2 = reverse a2\n 34965: a3 = s1 >> 0x18\n 34968: u8 [a0 + 0xf] = a3\n 34971: a3 = s1 >> 0x10\n 34974: u8 [a0 + 0xe] = a3\n 34977: a3 = s1 >> 0x8\n 34980: u8 [a0 + 0xd] = a3\n 34983: u8 [a0 + 0xc] = s1\n 34986: u8 [a0 + 11] = 0\n 34989: u8 [a0 + 10] = 0\n 34992: u8 [a0 + 9] = 0\n 34995: u8 [a0 + 8] = 0\n 34998: u8 [a0 + 7] = 0\n 35001: u8 [a0 + 6] = 0\n 35004: u8 [a0 + 5] = 0\n 35007: u8 [a0 + 4] = 0\n 35010: u8 [a0 + 3] = 0\n 35013: u8 [a0 + 2] = 0\n 35016: u8 [a0 + 1] = 0\n 35019: u8 [a0 + 0] = 0\n 35021: u8 [a0 + 0x18] = a2\n 35024: u8 [a0 + 0x10] = a1\n 35027: a3 = a2 >> 0x38\n 35030: u8 [a0 + 0x1f] = a3\n 35033: a3 = a2 >> 0x30\n 35036: u8 [a0 + 0x1e] = a3\n 35039: a3 = a2 >> 0x28\n 35042: u8 [a0 + 0x1d] = a3\n 35045: a3 = a2 >> 0x20\n 35048: u8 [a0 + 0x1c] = a3\n 35051: a3 = a2 >> 0x18\n 35054: u8 [a0 + 0x1b] = a3\n 35057: a3 = a2 >> 0x10\n 35060: u8 [a0 + 0x1a] = a3\n 35063: a2 = a2 >> 0x8\n 35066: u8 [a0 + 0x19] = a2\n 35069: a2 = a1 >> 0x38\n 35072: u8 [a0 + 0x17] = a2\n 35075: a2 = a1 >> 0x30\n 35078: u8 [a0 + 0x16] = a2\n 35081: a2 = a1 >> 0x28\n 35084: u8 [a0 + 0x15] = a2\n 35087: a2 = a1 >> 0x20\n 35090: u8 [a0 + 0x14] = a2\n 35093: a2 = a1 >> 0x18\n 35096: u8 [a0 + 0x13] = a2\n 35099: a2 = a1 >> 0x10\n 35102: u8 [a0 + 0x12] = a2\n 35105: a1 = a1 >> 0x8\n 35108: u8 [a0 + 0x11] = a1\n 35111: a0 = 0x20\n 35114: a1 = 0x20\n 35117: ra = 422, jump @0\n      : @488 [@dyn 211] (gas: 35)\n 35124: u8 [a0 + 31] = 0\n 35127: u8 [a0 + 30] = 0\n 35130: u8 [a0 + 29] = 0\n 35133: u8 [a0 + 28] = 0\n 35136: u8 [a0 + 27] = 0\n 35139: u8 [a0 + 26] = 0\n 35142: u8 [a0 + 25] = 0\n 35145: u8 [a0 + 24] = 0\n 35148: u8 [a0 + 23] = 0\n 35151: u8 [a0 + 22] = 0\n 35154: u8 [a0 + 21] = 0\n 35157: u8 [a0 + 20] = 0\n 35160: u8 [a0 + 19] = 0\n 35163: u8 [a0 + 18] = 0\n 35166: u8 [a0 + 17] = 0\n 35169: u8 [a0 + 16] = 0\n 35172: u8 [a0 + 15] = 0\n 35175: u8 [a0 + 14] = 0\n 35178: u8 [a0 + 13] = 0\n 35181: u8 [a0 + 12] = 0\n 35184: u8 [a0 + 11] = 0\n 35187: u8 [a0 + 10] = 0\n 35190: u8 [a0 + 9] = 0\n 35193: u8 [a0 + 8] = 0\n 35196: u8 [a0 + 7] = 0\n 35199: u8 [a0 + 6] = 0\n 35202: u8 [a0 + 5] = 0\n 35205: u8 [a0 + 4] = 0\n 35208: u8 [a0 + 3] = 0\n 35211: u8 [a0 + 2] = 0\n 35214: u8 [a0 + 1] = 0\n 35217: u8 [a0 + 0] = 0\n 35219: a1 = 0x40\n 35222: a0 = 0\n 35224: ra = 424, jump @0\n      : @489 [@dyn 212] (gas: 31)\n 35231: i32 a0 = a0 + 0\n 35233: i32 a2 = sp + 0x540\n 35237: a1 = 0x40\n 35240: ecalli 5 // 'hash_keccak_256'\n 35242: a0 = u64 [sp + 0x558]\n 35246: u64 [sp + 0x58] = a0\n 35249: a0 = u64 [sp + 0x550]\n 35253: u64 [sp + 0x60] = a0\n 35256: a0 = u64 [sp + 0x548]\n 35260: u64 [sp + 0x48] = a0\n 35263: s1 = u64 [sp + 0x540]\n 35267: a0 = u64 [sp + 0x68]\n 35270: u64 [sp + 0x538] = a0\n 35274: a0 = u64 [sp + 0x70]\n 35277: u64 [sp + 0x530] = a0\n 35281: a0 = u64 [sp + 0x78]\n 35284: u64 [sp + 0x528] = a0\n 35288: a0 = u64 [sp + 0x80]\n 35292: u64 [sp + 0x520] = a0\n 35296: u64 [sp + 1368] = 0\n 35300: u64 [sp + 1360] = 0\n 35304: u64 [sp + 1352] = 0\n 35308: u64 [sp + 1344] = 0\n 35312: u32 [sp + 1280] = 0x20\n 35317: i32 a1 = sp + 0x520\n 35321: i32 a3 = sp + 0x540\n 35325: i32 a4 = sp + 0x500\n 35329: a2 = 0xffffffffffffffff\n 35332: a0 = 0\n 35334: ecalli 4 // 'get_storage'\n 35336: fallthrough\n      : @490 (gas: 9)\n 35337: t1 = u64 [sp + 0x558]\n 35341: a1 = u64 [sp + 0x550]\n 35345: a0 = u64 [sp + 0x540]\n 35349: a2 = u64 [sp + 0x548]\n 35353: a4 = a1 | t1\n 35356: a5 = a0 <u 0x9\n 35359: a5 = 0 if a2 != 0\n 35361: a5 = 0 if a4 != 0\n 35363: jump @492 if a5 != 0\n      : @491 (gas: 1)\n 35366: jump @543\n      : @492 (gas: 41)\n 35369: t0 = reverse s1\n 35371: a3 = u64 [sp + 0x48]\n 35374: a5 = reverse a3\n 35376: a3 = u64 [sp + 0x58]\n 35379: s1 = reverse a3\n 35381: a3 = u64 [sp + 0x60]\n 35384: a4 = reverse a3\n 35386: a4 = a4 + a2\n 35389: a3 = a0 + s1\n 35392: a0 = a3 <u a0\n 35395: s1 = a4 + a0\n 35398: a4 = s1 ^ a2\n 35401: a2 = s1 <u a2\n 35404: a2 = a0 if a4 == 0\n 35407: a5 = a5 + a1\n 35410: a4 = a5 + a2\n 35413: a2 = a4 <u a5\n 35416: a1 = a5 <u a1\n 35419: a0 = t1 + t0\n 35422: a0 = a0 + a1\n 35425: a0 = a0 + a2\n 35428: u64 [sp + 0x60] = a3\n 35431: u64 [sp + 0x520] = a3\n 35435: u64 [sp + 0x58] = s1\n 35438: u64 [sp + 0x528] = s1\n 35442: s1 = a4\n 35444: u64 [sp + 0x530] = a4\n 35448: u64 [sp + 0x48] = a0\n 35451: u64 [sp + 0x538] = a0\n 35455: u64 [sp + 1368] = 0\n 35459: u64 [sp + 1360] = 0\n 35463: u64 [sp + 1352] = 0\n 35467: u64 [sp + 1344] = 0\n 35471: u32 [sp + 1280] = 0x20\n 35476: i32 a1 = sp + 0x520\n 35480: i32 a3 = sp + 0x540\n 35484: i32 a4 = sp + 0x500\n 35488: a2 = 0xffffffffffffffff\n 35491: a0 = 0\n 35493: ecalli 4 // 'get_storage'\n 35495: fallthrough\n      : @493 (gas: 8)\n 35496: a0 = u64 [sp + 0x558]\n 35500: a2 = u64 [sp + 0x550]\n 35504: a3 = u64 [sp + 0x548]\n 35508: a1 = u64 [sp + 0x540]\n 35512: a4 = a3 | a0\n 35515: a5 = a1 | a2\n 35518: a4 = a4 | a5\n 35521: jump @495 if a4 != 0\n      : @494 (gas: 1)\n 35524: jump @545\n      : @495 (gas: 79)\n 35527: a4 = a1 <u 0x1\n 35530: a4 = a3 - a4\n 35533: u64 [sp + 0x40] = a4\n 35536: a3 = a3 | a1\n 35539: a3 = a3 <u 0x1\n 35542: a4 = a2 - a3\n 35545: u64 [sp + 0x38] = a4\n 35548: a2 = a2 <u a3\n 35551: a0 = a0 - a2\n 35554: u64 [sp + 0x28] = a0\n 35557: a1 = a1 + 0xffffffffffffffff\n 35560: u64 [sp + 0x30] = a1\n 35563: u64 [sp + 0x20] = s1\n 35566: u64 [sp + 0x530] = s1\n 35570: a0 = u64 [sp + 0x58]\n 35573: u64 [sp + 0x528] = a0\n 35577: a0 = u64 [sp + 0x60]\n 35580: u64 [sp + 0x520] = a0\n 35584: s1 = u64 [sp + 0x48]\n 35587: u64 [sp + 0x538] = s1\n 35591: u64 [sp + 1368] = 0\n 35595: u64 [sp + 1360] = 0\n 35599: u64 [sp + 1352] = 0\n 35603: u64 [sp + 1344] = 0\n 35607: u32 [sp + 1280] = 0x20\n 35612: i32 a1 = sp + 0x520\n 35616: i32 a3 = sp + 0x540\n 35620: i32 a4 = sp + 0x500\n 35624: a2 = 0xffffffffffffffff\n 35627: a0 = 0\n 35629: ecalli 4 // 'get_storage'\n 35631: u64 [sp + 0x538] = s1\n 35635: a0 = u64 [sp + 0x20]\n 35638: u64 [sp + 0x530] = a0\n 35642: a0 = u64 [sp + 0x58]\n 35645: u64 [sp + 0x528] = a0\n 35649: a0 = u64 [sp + 0x60]\n 35652: u64 [sp + 0x520] = a0\n 35656: a0 = u64 [sp + 0x28]\n 35659: u64 [sp + 0x558] = a0\n 35663: a0 = u64 [sp + 0x38]\n 35666: u64 [sp + 0x550] = a0\n 35670: a0 = u64 [sp + 0x40]\n 35673: u64 [sp + 0x548] = a0\n 35677: a0 = u64 [sp + 0x30]\n 35680: u64 [sp + 0x540] = a0\n 35684: i32 a1 = sp + 0x520\n 35688: i32 a3 = sp + 0x540\n 35692: a2 = 0xffffffffffffffff\n 35695: a4 = 0x20\n 35698: a0 = 0\n 35700: ecalli 8 // 'set_storage'\n 35702: a0 = u64 [sp + 0xb8]\n 35706: u64 [sp + 0x538] = a0\n 35710: a0 = u64 [sp + 0xb0]\n 35714: u64 [sp + 0x530] = a0\n 35718: a0 = u64 [sp + 0xa0]\n 35722: u64 [sp + 0x528] = a0\n 35726: a0 = u64 [sp + 0xa8]\n 35730: u64 [sp + 0x520] = a0\n 35734: u64 [sp + 1368] = 0\n 35738: u64 [sp + 1360] = 0\n 35742: u64 [sp + 1352] = 0\n 35746: u64 [sp + 1344] = 0\n 35750: u32 [sp + 1280] = 0x20\n 35755: i32 a1 = sp + 0x520\n 35759: i32 a3 = sp + 0x540\n 35763: i32 a4 = sp + 0x500\n 35767: a2 = 0xffffffffffffffff\n 35770: a0 = 0\n 35772: ecalli 4 // 'get_storage'\n 35774: a0 = u64 [sp + 0x540]\n 35778: u64 [sp + 0x60] = a0\n 35781: a0 = u64 [sp + 0x548]\n 35785: u64 [sp + 0x58] = a0\n 35788: s1 = u32 [sp + 0x550]\n 35792: a1 = 0x20\n 35795: a0 = 0\n 35797: ra = 426, jump @0\n      : @496 [@dyn 213] (gas: 58)\n 35804: a1 = reverse s1\n 35806: a2 = u64 [sp + 0x58]\n 35809: a2 = reverse a2\n 35811: a3 = u64 [sp + 0x60]\n 35814: a3 = reverse a3\n 35816: a4 = a3 >> 0x38\n 35819: u8 [a0 + 0x1f] = a4\n 35822: a4 = a3 >> 0x30\n 35825: u8 [a0 + 0x1e] = a4\n 35828: a4 = a3 >> 0x28\n 35831: u8 [a0 + 0x1d] = a4\n 35834: a4 = a3 >> 0x20\n 35837: u8 [a0 + 0x1c] = a4\n 35840: a4 = a3 >> 0x18\n 35843: u8 [a0 + 0x1b] = a4\n 35846: a4 = a3 >> 0x10\n 35849: u8 [a0 + 0x1a] = a4\n 35852: a4 = a3 >> 0x8\n 35855: u8 [a0 + 0x19] = a4\n 35858: u8 [a0 + 0x18] = a3\n 35861: a3 = a2 >> 0x38\n 35864: u8 [a0 + 0x17] = a3\n 35867: a3 = a2 >> 0x30\n 35870: u8 [a0 + 0x16] = a3\n 35873: a3 = a2 >> 0x28\n 35876: u8 [a0 + 0x15] = a3\n 35879: a3 = a2 >> 0x20\n 35882: u8 [a0 + 0x14] = a3\n 35885: a3 = a2 >> 0x18\n 35888: u8 [a0 + 0x13] = a3\n 35891: a3 = a2 >> 0x10\n 35894: u8 [a0 + 0x12] = a3\n 35897: a3 = a2 >> 0x8\n 35900: u8 [a0 + 0x11] = a3\n 35903: u8 [a0 + 0x10] = a2\n 35906: a2 = a1 >> 0x38\n 35909: u8 [a0 + 0xf] = a2\n 35912: a2 = a1 >> 0x30\n 35915: u8 [a0 + 0xe] = a2\n 35918: a2 = a1 >> 0x28\n 35921: u8 [a0 + 0xd] = a2\n 35924: a2 = a1 >> 0x20\n 35927: u8 [a0 + 0xc] = a2\n 35930: u8 [a0 + 11] = 0\n 35933: u8 [a0 + 10] = 0\n 35936: u8 [a0 + 9] = 0\n 35939: u8 [a0 + 0x8] = a1\n 35942: u8 [a0 + 7] = 0\n 35945: u8 [a0 + 6] = 0\n 35948: u8 [a0 + 5] = 0\n 35951: u8 [a0 + 4] = 0\n 35954: u8 [a0 + 3] = 0\n 35957: u8 [a0 + 2] = 0\n 35960: u8 [a0 + 1] = 0\n 35963: u8 [a0 + 0] = 0\n 35965: a0 = 0x20\n 35968: a1 = 0x20\n 35971: ra = 428, jump @0\n      : @497 [@dyn 214] (gas: 35)\n 35978: u8 [a0 + 31] = 0\n 35981: u8 [a0 + 30] = 0\n 35984: u8 [a0 + 29] = 0\n 35987: u8 [a0 + 28] = 0\n 35990: u8 [a0 + 27] = 0\n 35993: u8 [a0 + 26] = 0\n 35996: u8 [a0 + 25] = 0\n 35999: u8 [a0 + 24] = 0\n 36002: u8 [a0 + 23] = 0\n 36005: u8 [a0 + 22] = 0\n 36008: u8 [a0 + 21] = 0\n 36011: u8 [a0 + 20] = 0\n 36014: u8 [a0 + 19] = 0\n 36017: u8 [a0 + 18] = 0\n 36020: u8 [a0 + 17] = 0\n 36023: u8 [a0 + 16] = 0\n 36026: u8 [a0 + 15] = 0\n 36029: u8 [a0 + 14] = 0\n 36032: u8 [a0 + 13] = 0\n 36035: u8 [a0 + 12] = 0\n 36038: u8 [a0 + 11] = 0\n 36041: u8 [a0 + 10] = 0\n 36044: u8 [a0 + 9] = 0\n 36047: u8 [a0 + 8] = 0\n 36050: u8 [a0 + 7] = 0\n 36053: u8 [a0 + 6] = 0\n 36056: u8 [a0 + 5] = 0\n 36059: u8 [a0 + 4] = 0\n 36062: u8 [a0 + 3] = 0\n 36065: u8 [a0 + 2] = 0\n 36068: u8 [a0 + 1] = 0\n 36071: u8 [a0 + 0] = 0\n 36073: a1 = 0x40\n 36076: a0 = 0\n 36078: ra = 430, jump @0\n      : @498 [@dyn 215] (gas: 31)\n 36085: i32 a0 = a0 + 0\n 36087: i32 a2 = sp + 0x540\n 36091: a1 = 0x40\n 36094: ecalli 5 // 'hash_keccak_256'\n 36096: a0 = u64 [sp + 0x558]\n 36100: u64 [sp + 0x58] = a0\n 36103: a0 = u64 [sp + 0x550]\n 36107: u64 [sp + 0x60] = a0\n 36110: a0 = u64 [sp + 0x548]\n 36114: u64 [sp + 0x48] = a0\n 36117: s1 = u64 [sp + 0x540]\n 36121: a0 = u64 [sp + 0x68]\n 36124: u64 [sp + 0x538] = a0\n 36128: a0 = u64 [sp + 0x70]\n 36131: u64 [sp + 0x530] = a0\n 36135: a0 = u64 [sp + 0x78]\n 36138: u64 [sp + 0x528] = a0\n 36142: a0 = u64 [sp + 0x80]\n 36146: u64 [sp + 0x520] = a0\n 36150: u64 [sp + 1368] = 0\n 36154: u64 [sp + 1360] = 0\n 36158: u64 [sp + 1352] = 0\n 36162: u64 [sp + 1344] = 0\n 36166: u32 [sp + 1280] = 0x20\n 36171: i32 a1 = sp + 0x520\n 36175: i32 a3 = sp + 0x540\n 36179: i32 a4 = sp + 0x500\n 36183: a2 = 0xffffffffffffffff\n 36186: a0 = 0\n 36188: ecalli 4 // 'get_storage'\n 36190: fallthrough\n      : @499 (gas: 9)\n 36191: t1 = u64 [sp + 0x558]\n 36195: a1 = u64 [sp + 0x550]\n 36199: a3 = u64 [sp + 0x540]\n 36203: a2 = u64 [sp + 0x548]\n 36207: a4 = a1 | t1\n 36210: a5 = a3 <u 0x9\n 36213: a5 = 0 if a2 != 0\n 36215: a5 = 0 if a4 != 0\n 36217: jump @501 if a5 != 0\n      : @500 (gas: 1)\n 36220: jump @547\n      : @501 (gas: 41)\n 36223: t0 = reverse s1\n 36225: a0 = u64 [sp + 0x48]\n 36228: a5 = reverse a0\n 36230: a0 = u64 [sp + 0x58]\n 36233: s1 = reverse a0\n 36235: a0 = u64 [sp + 0x60]\n 36238: a4 = reverse a0\n 36240: a4 = a4 + a2\n 36243: s1 = s1 + a3\n 36246: a0 = s1 <u a3\n 36249: a3 = a4 + a0\n 36252: a4 = a3 ^ a2\n 36255: a2 = a3 <u a2\n 36258: a2 = a0 if a4 == 0\n 36261: a5 = a5 + a1\n 36264: a4 = a5 + a2\n 36267: a2 = a4 <u a5\n 36270: a1 = a5 <u a1\n 36273: a0 = t1 + t0\n 36276: a0 = a0 + a1\n 36279: a0 = a0 + a2\n 36282: u64 [sp + 0x80] = s1\n 36286: u64 [sp + 0x520] = s1\n 36290: u64 [sp + 0x78] = a3\n 36293: u64 [sp + 0x528] = a3\n 36297: u64 [sp + 0x70] = a4\n 36300: u64 [sp + 0x530] = a4\n 36304: u64 [sp + 0x68] = a0\n 36307: u64 [sp + 0x538] = a0\n 36311: u64 [sp + 1368] = 0\n 36315: u64 [sp + 1360] = 0\n 36319: u64 [sp + 1352] = 0\n 36323: u64 [sp + 1344] = 0\n 36327: u32 [sp + 1280] = 0x20\n 36332: i32 a1 = sp + 0x520\n 36336: i32 a3 = sp + 0x540\n 36340: i32 a4 = sp + 0x500\n 36344: a2 = 0xffffffffffffffff\n 36347: a0 = 0\n 36349: ecalli 4 // 'get_storage'\n 36351: fallthrough\n      : @502 (gas: 19)\n 36352: s1 = u64 [sp + 0x540]\n 36356: a0 = u64 [sp + 0x558]\n 36360: a1 = u64 [sp + 0x548]\n 36364: a2 = u64 [sp + 0x550]\n 36368: s1 = s1 + 0x1\n 36371: a3 = s1 <u 0x1\n 36374: a3 = a3 + a1\n 36377: a1 = s1 | a3\n 36380: a1 = a1 <u 0x1\n 36383: a4 = a2 + a1\n 36386: a1 = a4 <u a2\n 36389: a0 = a0 + a1\n 36392: u64 [sp + 0x58] = a3\n 36395: u64 [sp + 0x40] = a0\n 36398: a0 = a0 | a3\n 36401: u64 [sp + 0x48] = a4\n 36404: a1 = s1 | a4\n 36407: a0 = a0 | a1\n 36410: jump @504 if a0 != 0\n      : @503 (gas: 1)\n 36413: jump @549\n      : @504 (gas: 73)\n 36416: a0 = 0xffffffff\n 36426: u64 [sp + 0x60] = a0\n 36429: a0 = u64 [sp + 0x70]\n 36432: u64 [sp + 0x530] = a0\n 36436: a0 = u64 [sp + 0x78]\n 36439: u64 [sp + 0x528] = a0\n 36443: a0 = u64 [sp + 0x80]\n 36447: u64 [sp + 0x520] = a0\n 36451: a0 = u64 [sp + 0x68]\n 36454: u64 [sp + 0x538] = a0\n 36458: u64 [sp + 1368] = 0\n 36462: u64 [sp + 1360] = 0\n 36466: u64 [sp + 1352] = 0\n 36470: u64 [sp + 1344] = 0\n 36474: u32 [sp + 1280] = 0x20\n 36479: i32 a1 = sp + 0x520\n 36483: i32 a3 = sp + 0x540\n 36487: i32 a4 = sp + 0x500\n 36491: a2 = 0xffffffffffffffff\n 36494: a0 = 0\n 36496: ecalli 4 // 'get_storage'\n 36498: a0 = u64 [sp + 0x68]\n 36501: u64 [sp + 0x538] = a0\n 36505: a0 = u64 [sp + 0x70]\n 36508: u64 [sp + 0x530] = a0\n 36512: a0 = u64 [sp + 0x78]\n 36515: u64 [sp + 0x528] = a0\n 36519: a0 = u64 [sp + 0x80]\n 36523: u64 [sp + 0x520] = a0\n 36527: a0 = u64 [sp + 0x40]\n 36530: u64 [sp + 0x558] = a0\n 36534: a0 = u64 [sp + 0x48]\n 36537: u64 [sp + 0x550] = a0\n 36541: a0 = u64 [sp + 0x58]\n 36544: u64 [sp + 0x548] = a0\n 36548: u64 [sp + 0x540] = s1\n 36552: i32 a1 = sp + 0x520\n 36556: i32 a3 = sp + 0x540\n 36560: a2 = 0xffffffffffffffff\n 36563: a4 = 0x20\n 36566: a0 = 0\n 36568: ecalli 8 // 'set_storage'\n 36570: a0 = u64 [sp + 0xb8]\n 36574: u64 [sp + 0x538] = a0\n 36578: a0 = u64 [sp + 0xb0]\n 36582: u64 [sp + 0x530] = a0\n 36586: a0 = u64 [sp + 0xa0]\n 36590: u64 [sp + 0x528] = a0\n 36594: a0 = u64 [sp + 0xa8]\n 36598: u64 [sp + 0x520] = a0\n 36602: u64 [sp + 1368] = 0\n 36606: u64 [sp + 1360] = 0\n 36610: u64 [sp + 1352] = 0\n 36614: u64 [sp + 1344] = 0\n 36618: u32 [sp + 1280] = 0x20\n 36623: i32 a1 = sp + 0x520\n 36627: i32 a3 = sp + 0x540\n 36631: i32 a4 = sp + 0x500\n 36635: a2 = 0xffffffffffffffff\n 36638: a0 = 0\n 36640: ecalli 4 // 'get_storage'\n 36642: a0 = u64 [sp + 0x540]\n 36646: a1 = u64 [sp + 0x548]\n 36650: a2 = u64 [sp + 0x550]\n 36654: a0 = a0 & 0xffffffffffffffff\n 36657: u64 [sp + 0x80] = a0\n 36661: a1 = a1 & 0xffffffffffffffff\n 36664: u64 [sp + 0x78] = a1\n 36667: s1 = u64 [sp + 0x60]\n 36670: s1 = s1 & a2\n 36673: a1 = 0x20\n 36676: a0 = 0\n 36678: ra = 432, jump @0\n      : @505 [@dyn 216] (gas: 58)\n 36685: a1 = reverse s1\n 36687: a2 = u64 [sp + 0x78]\n 36690: a2 = reverse a2\n 36692: a3 = u64 [sp + 0x80]\n 36696: a3 = reverse a3\n 36698: a4 = a3 >> 0x38\n 36701: u8 [a0 + 0x1f] = a4\n 36704: a4 = a3 >> 0x30\n 36707: u8 [a0 + 0x1e] = a4\n 36710: a4 = a3 >> 0x28\n 36713: u8 [a0 + 0x1d] = a4\n 36716: a4 = a3 >> 0x20\n 36719: u8 [a0 + 0x1c] = a4\n 36722: a4 = a3 >> 0x18\n 36725: u8 [a0 + 0x1b] = a4\n 36728: a4 = a3 >> 0x10\n 36731: u8 [a0 + 0x1a] = a4\n 36734: a4 = a3 >> 0x8\n 36737: u8 [a0 + 0x19] = a4\n 36740: u8 [a0 + 0x18] = a3\n 36743: a3 = a2 >> 0x38\n 36746: u8 [a0 + 0x17] = a3\n 36749: a3 = a2 >> 0x30\n 36752: u8 [a0 + 0x16] = a3\n 36755: a3 = a2 >> 0x28\n 36758: u8 [a0 + 0x15] = a3\n 36761: a3 = a2 >> 0x20\n 36764: u8 [a0 + 0x14] = a3\n 36767: a3 = a2 >> 0x18\n 36770: u8 [a0 + 0x13] = a3\n 36773: a3 = a2 >> 0x10\n 36776: u8 [a0 + 0x12] = a3\n 36779: a3 = a2 >> 0x8\n 36782: u8 [a0 + 0x11] = a3\n 36785: u8 [a0 + 0x10] = a2\n 36788: a2 = a1 >> 0x38\n 36791: u8 [a0 + 0xf] = a2\n 36794: a2 = a1 >> 0x30\n 36797: u8 [a0 + 0xe] = a2\n 36800: a2 = a1 >> 0x28\n 36803: u8 [a0 + 0xd] = a2\n 36806: a2 = a1 >> 0x20\n 36809: u8 [a0 + 0xc] = a2\n 36812: u8 [a0 + 11] = 0\n 36815: u8 [a0 + 10] = 0\n 36818: u8 [a0 + 9] = 0\n 36821: u8 [a0 + 0x8] = a1\n 36824: u8 [a0 + 7] = 0\n 36827: u8 [a0 + 6] = 0\n 36830: u8 [a0 + 5] = 0\n 36833: u8 [a0 + 4] = 0\n 36836: u8 [a0 + 3] = 0\n 36839: u8 [a0 + 2] = 0\n 36842: u8 [a0 + 1] = 0\n 36845: u8 [a0 + 0] = 0\n 36847: a0 = 0x20\n 36850: a1 = 0x20\n 36853: ra = 434, jump @0\n      : @506 [@dyn 217] (gas: 35)\n 36860: u8 [a0 + 31] = 0\n 36863: u8 [a0 + 30] = 0\n 36866: u8 [a0 + 29] = 0\n 36869: u8 [a0 + 28] = 0\n 36872: u8 [a0 + 27] = 0\n 36875: u8 [a0 + 26] = 0\n 36878: u8 [a0 + 25] = 0\n 36881: u8 [a0 + 24] = 0\n 36884: u8 [a0 + 23] = 0\n 36887: u8 [a0 + 22] = 0\n 36890: u8 [a0 + 21] = 0\n 36893: u8 [a0 + 20] = 0\n 36896: u8 [a0 + 19] = 0\n 36899: u8 [a0 + 18] = 0\n 36902: u8 [a0 + 17] = 0\n 36905: u8 [a0 + 16] = 0\n 36908: u8 [a0 + 15] = 0\n 36911: u8 [a0 + 14] = 0\n 36914: u8 [a0 + 13] = 0\n 36917: u8 [a0 + 12] = 0\n 36920: u8 [a0 + 11] = 0\n 36923: u8 [a0 + 10] = 0\n 36926: u8 [a0 + 9] = 0\n 36929: u8 [a0 + 8] = 0\n 36932: u8 [a0 + 7] = 0\n 36935: u8 [a0 + 6] = 0\n 36938: u8 [a0 + 5] = 0\n 36941: u8 [a0 + 4] = 0\n 36944: u8 [a0 + 3] = 0\n 36947: u8 [a0 + 2] = 0\n 36950: u8 [a0 + 1] = 0\n 36953: u8 [a0 + 0] = 0\n 36955: a1 = 0x40\n 36958: a0 = 0\n 36960: ra = 436, jump @0\n      : @507 [@dyn 218] (gas: 43)\n 36967: i32 a0 = a0 + 0\n 36969: i32 a2 = sp + 0x540\n 36973: a1 = 0x40\n 36976: ecalli 5 // 'hash_keccak_256'\n 36978: a0 = u64 [sp + 0x558]\n 36982: u64 [sp + 0x68] = a0\n 36985: a0 = u64 [sp + 0x550]\n 36989: u64 [sp + 0x70] = a0\n 36992: a0 = u64 [sp + 0x548]\n 36996: u64 [sp + 0x60] = a0\n 36999: s1 = u64 [sp + 0x540]\n 37003: a1 = u64 [sp + 0xa8]\n 37007: a1 = a1 + 0x1\n 37010: a0 = a1 <u 0x1\n 37013: a2 = u64 [sp + 0xa0]\n 37017: a2 = a2 + a0\n 37020: a0 = a1 | a2\n 37023: a0 = a0 <u 0x1\n 37026: a4 = u64 [sp + 0xb0]\n 37030: a3 = a4 + a0\n 37033: a0 = a3 <u a4\n 37036: a4 = u64 [sp + 0xb8]\n 37040: a0 = a0 + a4\n 37043: u64 [sp + 0x78] = a0\n 37046: u64 [sp + 0x538] = a0\n 37050: u64 [sp + 0x80] = a3\n 37054: u64 [sp + 0x530] = a3\n 37058: u64 [sp + 0xa0] = a2\n 37062: u64 [sp + 0x528] = a2\n 37066: u64 [sp + 0xa8] = a1\n 37070: u64 [sp + 0x520] = a1\n 37074: u64 [sp + 1368] = 0\n 37078: u64 [sp + 1360] = 0\n 37082: u64 [sp + 1352] = 0\n 37086: u64 [sp + 1344] = 0\n 37090: u32 [sp + 1280] = 0x20\n 37095: i32 a1 = sp + 0x520\n 37099: i32 a3 = sp + 0x540\n 37103: i32 a4 = sp + 0x500\n 37107: a2 = 0xffffffffffffffff\n 37110: a0 = 0\n 37112: ecalli 4 // 'get_storage'\n 37114: fallthrough\n      : @508 (gas: 9)\n 37115: t1 = u64 [sp + 0x558]\n 37119: a1 = u64 [sp + 0x550]\n 37123: a0 = u64 [sp + 0x540]\n 37127: a2 = u64 [sp + 0x548]\n 37131: a4 = a1 | t1\n 37134: a5 = a0 <u 0x9\n 37137: a5 = 0 if a2 != 0\n 37139: a5 = 0 if a4 != 0\n 37141: jump @551 if a5 == 0\n      : @509 (gas: 41)\n 37145: t0 = reverse s1\n 37147: a3 = u64 [sp + 0x60]\n 37150: a5 = reverse a3\n 37152: a3 = u64 [sp + 0x68]\n 37155: s1 = reverse a3\n 37157: a3 = u64 [sp + 0x70]\n 37160: a4 = reverse a3\n 37162: a4 = a4 + a2\n 37165: a3 = a0 + s1\n 37168: a0 = a3 <u a0\n 37171: s1 = a4 + a0\n 37174: a4 = s1 ^ a2\n 37177: a2 = s1 <u a2\n 37180: a2 = a0 if a4 == 0\n 37183: a5 = a5 + a1\n 37186: a4 = a5 + a2\n 37189: a2 = a4 <u a5\n 37192: a1 = a5 <u a1\n 37195: a0 = t1 + t0\n 37198: a0 = a0 + a1\n 37201: a0 = a0 + a2\n 37204: u64 [sp + 0xb8] = a3\n 37208: u64 [sp + 0x520] = a3\n 37212: u64 [sp + 0xb0] = s1\n 37216: u64 [sp + 0x528] = s1\n 37220: s1 = a4\n 37222: u64 [sp + 0x530] = a4\n 37226: u64 [sp + 0x70] = a0\n 37229: u64 [sp + 0x538] = a0\n 37233: u64 [sp + 1368] = 0\n 37237: u64 [sp + 1360] = 0\n 37241: u64 [sp + 1352] = 0\n 37245: u64 [sp + 1344] = 0\n 37249: u32 [sp + 1280] = 0x20\n 37254: i32 a1 = sp + 0x520\n 37258: i32 a3 = sp + 0x540\n 37262: i32 a4 = sp + 0x500\n 37266: a2 = 0xffffffffffffffff\n 37269: a0 = 0\n 37271: ecalli 4 // 'get_storage'\n 37273: fallthrough\n      : @510 (gas: 8)\n 37274: a0 = u64 [sp + 0x558]\n 37278: a2 = u64 [sp + 0x550]\n 37282: a3 = u64 [sp + 0x548]\n 37286: a1 = u64 [sp + 0x540]\n 37290: a4 = a3 | a0\n 37293: a5 = a1 | a2\n 37296: a4 = a4 | a5\n 37299: jump @553 if a4 == 0\n      : @511 (gas: 71)\n 37303: a4 = a1 <u 0x1\n 37306: a4 = a3 - a4\n 37309: u64 [sp + 0x68] = a4\n 37312: a3 = a3 | a1\n 37315: a3 = a3 <u 0x1\n 37318: a4 = a2 - a3\n 37321: u64 [sp + 0x60] = a4\n 37324: a2 = a2 <u a3\n 37327: a0 = a0 - a2\n 37330: u64 [sp + 0x48] = a0\n 37333: a1 = a1 + 0xffffffffffffffff\n 37336: u64 [sp + 0x58] = a1\n 37339: u64 [sp + 0x40] = s1\n 37342: u64 [sp + 0x530] = s1\n 37346: a0 = u64 [sp + 0xb0]\n 37350: u64 [sp + 0x528] = a0\n 37354: a0 = u64 [sp + 0xb8]\n 37358: u64 [sp + 0x520] = a0\n 37362: s1 = u64 [sp + 0x70]\n 37365: u64 [sp + 0x538] = s1\n 37369: u64 [sp + 1368] = 0\n 37373: u64 [sp + 1360] = 0\n 37377: u64 [sp + 1352] = 0\n 37381: u64 [sp + 1344] = 0\n 37385: u32 [sp + 1280] = 0x20\n 37390: i32 a1 = sp + 0x520\n 37394: i32 a3 = sp + 0x540\n 37398: i32 a4 = sp + 0x500\n 37402: a2 = 0xffffffffffffffff\n 37405: a0 = 0\n 37407: ecalli 4 // 'get_storage'\n 37409: u64 [sp + 0x538] = s1\n 37413: a0 = u64 [sp + 0x40]\n 37416: u64 [sp + 0x530] = a0\n 37420: a0 = u64 [sp + 0xb0]\n 37424: u64 [sp + 0x528] = a0\n 37428: a0 = u64 [sp + 0xb8]\n 37432: u64 [sp + 0x520] = a0\n 37436: a0 = u64 [sp + 0x48]\n 37439: u64 [sp + 0x558] = a0\n 37443: a0 = u64 [sp + 0x60]\n 37446: u64 [sp + 0x550] = a0\n 37450: a0 = u64 [sp + 0x68]\n 37453: u64 [sp + 0x548] = a0\n 37457: a0 = u64 [sp + 0x58]\n 37460: u64 [sp + 0x540] = a0\n 37464: i32 a1 = sp + 0x520\n 37468: i32 a3 = sp + 0x540\n 37472: a2 = 0xffffffffffffffff\n 37475: a4 = 0x20\n 37478: a0 = 0\n 37480: ecalli 8 // 'set_storage'\n 37482: i32 a0 = sp + 0x4e0\n 37486: ecalli 3 // 'caller'\n 37488: a0 = u64 [sp + 0x4e8]\n 37492: a1 = i32 [sp + 0x4f0]\n 37496: s1 = u64 [sp + 0x4e0]\n 37500: a0 = reverse a0\n 37502: a2 = a0 << 0x20\n 37505: a1 = reverse a1\n 37507: a1 = a1 >> 0x20\n 37510: a1 = a1 | a2\n 37513: u64 [sp + 0xb8] = a1\n 37517: a0 = a0 >> 0x20\n 37520: a1 = reverse s1\n 37522: a1 = a1 << 0x20\n 37525: a0 = a0 | a1\n 37528: u64 [sp + 0xb0] = a0\n 37532: a1 = 0x20\n 37535: a0 = 0\n 37537: ra = 438, jump @0\n      : @512 [@dyn 219] (gas: 56)\n 37544: a1 = u64 [sp + 0xb0]\n 37548: a1 = reverse a1\n 37550: a2 = u64 [sp + 0xb8]\n 37554: a2 = reverse a2\n 37556: a3 = s1 >> 0x18\n 37559: u8 [a0 + 0xf] = a3\n 37562: a3 = s1 >> 0x10\n 37565: u8 [a0 + 0xe] = a3\n 37568: a3 = s1 >> 0x8\n 37571: u8 [a0 + 0xd] = a3\n 37574: u8 [a0 + 0xc] = s1\n 37577: u8 [a0 + 11] = 0\n 37580: u8 [a0 + 10] = 0\n 37583: u8 [a0 + 9] = 0\n 37586: u8 [a0 + 8] = 0\n 37589: u8 [a0 + 7] = 0\n 37592: u8 [a0 + 6] = 0\n 37595: u8 [a0 + 5] = 0\n 37598: u8 [a0 + 4] = 0\n 37601: u8 [a0 + 3] = 0\n 37604: u8 [a0 + 2] = 0\n 37607: u8 [a0 + 1] = 0\n 37610: u8 [a0 + 0] = 0\n 37612: u8 [a0 + 0x18] = a2\n 37615: u8 [a0 + 0x10] = a1\n 37618: a3 = a2 >> 0x38\n 37621: u8 [a0 + 0x1f] = a3\n 37624: a3 = a2 >> 0x30\n 37627: u8 [a0 + 0x1e] = a3\n 37630: a3 = a2 >> 0x28\n 37633: u8 [a0 + 0x1d] = a3\n 37636: a3 = a2 >> 0x20\n 37639: u8 [a0 + 0x1c] = a3\n 37642: a3 = a2 >> 0x18\n 37645: u8 [a0 + 0x1b] = a3\n 37648: a3 = a2 >> 0x10\n 37651: u8 [a0 + 0x1a] = a3\n 37654: a2 = a2 >> 0x8\n 37657: u8 [a0 + 0x19] = a2\n 37660: a2 = a1 >> 0x38\n 37663: u8 [a0 + 0x17] = a2\n 37666: a2 = a1 >> 0x30\n 37669: u8 [a0 + 0x16] = a2\n 37672: a2 = a1 >> 0x28\n 37675: u8 [a0 + 0x15] = a2\n 37678: a2 = a1 >> 0x20\n 37681: u8 [a0 + 0x14] = a2\n 37684: a2 = a1 >> 0x18\n 37687: u8 [a0 + 0x13] = a2\n 37690: a2 = a1 >> 0x10\n 37693: u8 [a0 + 0x12] = a2\n 37696: a1 = a1 >> 0x8\n 37699: u8 [a0 + 0x11] = a1\n 37702: a0 = 0x20\n 37705: a1 = 0x20\n 37708: ra = 440, jump @0\n      : @513 [@dyn 220] (gas: 35)\n 37715: u8 [a0 + 31] = 0\n 37718: u8 [a0 + 30] = 0\n 37721: u8 [a0 + 29] = 0\n 37724: u8 [a0 + 28] = 0\n 37727: u8 [a0 + 27] = 0\n 37730: u8 [a0 + 26] = 0\n 37733: u8 [a0 + 25] = 0\n 37736: u8 [a0 + 24] = 0\n 37739: u8 [a0 + 23] = 0\n 37742: u8 [a0 + 22] = 0\n 37745: u8 [a0 + 21] = 0\n 37748: u8 [a0 + 20] = 0\n 37751: u8 [a0 + 19] = 0\n 37754: u8 [a0 + 18] = 0\n 37757: u8 [a0 + 17] = 0\n 37760: u8 [a0 + 16] = 0\n 37763: u8 [a0 + 15] = 0\n 37766: u8 [a0 + 14] = 0\n 37769: u8 [a0 + 13] = 0\n 37772: u8 [a0 + 12] = 0\n 37775: u8 [a0 + 11] = 0\n 37778: u8 [a0 + 10] = 0\n 37781: u8 [a0 + 9] = 0\n 37784: u8 [a0 + 8] = 0\n 37787: u8 [a0 + 7] = 0\n 37790: u8 [a0 + 6] = 0\n 37793: u8 [a0 + 5] = 0\n 37796: u8 [a0 + 4] = 0\n 37799: u8 [a0 + 3] = 0\n 37802: u8 [a0 + 2] = 0\n 37805: u8 [a0 + 1] = 0\n 37808: u8 [a0 + 0] = 0\n 37810: a1 = 0x40\n 37813: a0 = 0\n 37815: ra = 442, jump @0\n      : @514 [@dyn 221] (gas: 31)\n 37822: i32 a0 = a0 + 0\n 37824: i32 a2 = sp + 0x540\n 37828: a1 = 0x40\n 37831: ecalli 5 // 'hash_keccak_256'\n 37833: a0 = u64 [sp + 0x558]\n 37837: u64 [sp + 0xb0] = a0\n 37841: a0 = u64 [sp + 0x550]\n 37845: u64 [sp + 0xb8] = a0\n 37849: a0 = u64 [sp + 0x548]\n 37853: u64 [sp + 0x70] = a0\n 37856: s1 = u64 [sp + 0x540]\n 37860: a0 = u64 [sp + 0x78]\n 37863: u64 [sp + 0x538] = a0\n 37867: a0 = u64 [sp + 0x80]\n 37871: u64 [sp + 0x530] = a0\n 37875: a0 = u64 [sp + 0xa0]\n 37879: u64 [sp + 0x528] = a0\n 37883: a0 = u64 [sp + 0xa8]\n 37887: u64 [sp + 0x520] = a0\n 37891: u64 [sp + 1368] = 0\n 37895: u64 [sp + 1360] = 0\n 37899: u64 [sp + 1352] = 0\n 37903: u64 [sp + 1344] = 0\n 37907: u32 [sp + 1280] = 0x20\n 37912: i32 a1 = sp + 0x520\n 37916: i32 a3 = sp + 0x540\n 37920: i32 a4 = sp + 0x500\n 37924: a2 = 0xffffffffffffffff\n 37927: a0 = 0\n 37929: ecalli 4 // 'get_storage'\n 37931: fallthrough\n      : @515 (gas: 9)\n 37932: t1 = u64 [sp + 0x558]\n 37936: a1 = u64 [sp + 0x550]\n 37940: a3 = u64 [sp + 0x540]\n 37944: a2 = u64 [sp + 0x548]\n 37948: a4 = a1 | t1\n 37951: a5 = a3 <u 0x9\n 37954: a5 = 0 if a2 != 0\n 37956: a5 = 0 if a4 != 0\n 37958: jump @555 if a5 == 0\n      : @516 (gas: 41)\n 37962: t0 = reverse s1\n 37964: a0 = u64 [sp + 0x70]\n 37967: a5 = reverse a0\n 37969: a0 = u64 [sp + 0xb0]\n 37973: s1 = reverse a0\n 37975: a0 = u64 [sp + 0xb8]\n 37979: a4 = reverse a0\n 37981: a4 = a4 + a2\n 37984: s1 = s1 + a3\n 37987: a0 = s1 <u a3\n 37990: a3 = a4 + a0\n 37993: a4 = a3 ^ a2\n 37996: a2 = a3 <u a2\n 37999: a2 = a0 if a4 == 0\n 38002: a5 = a5 + a1\n 38005: a4 = a5 + a2\n 38008: a2 = a4 <u a5\n 38011: a1 = a5 <u a1\n 38014: a0 = t1 + t0\n 38017: a0 = a0 + a1\n 38020: a0 = a0 + a2\n 38023: u64 [sp + 0xb8] = s1\n 38027: u64 [sp + 0x520] = s1\n 38031: u64 [sp + 0xb0] = a3\n 38035: u64 [sp + 0x528] = a3\n 38039: u64 [sp + 0xa8] = a4\n 38043: u64 [sp + 0x530] = a4\n 38047: u64 [sp + 0xa0] = a0\n 38051: u64 [sp + 0x538] = a0\n 38055: u64 [sp + 1368] = 0\n 38059: u64 [sp + 1360] = 0\n 38063: u64 [sp + 1352] = 0\n 38067: u64 [sp + 1344] = 0\n 38071: u32 [sp + 1280] = 0x20\n 38076: i32 a1 = sp + 0x520\n 38080: i32 a3 = sp + 0x540\n 38084: i32 a4 = sp + 0x500\n 38088: a2 = 0xffffffffffffffff\n 38091: a0 = 0\n 38093: ecalli 4 // 'get_storage'\n 38095: fallthrough\n      : @517 (gas: 19)\n 38096: s1 = u64 [sp + 0x540]\n 38100: a0 = u64 [sp + 0x558]\n 38104: a1 = u64 [sp + 0x548]\n 38108: a2 = u64 [sp + 0x550]\n 38112: s1 = s1 + 0x1\n 38115: a3 = s1 <u 0x1\n 38118: a3 = a3 + a1\n 38121: a1 = s1 | a3\n 38124: a1 = a1 <u 0x1\n 38127: a4 = a2 + a1\n 38130: a1 = a4 <u a2\n 38133: a0 = a0 + a1\n 38136: u64 [sp + 0x80] = a3\n 38140: u64 [sp + 0x70] = a0\n 38143: a0 = a0 | a3\n 38146: u64 [sp + 0x78] = a4\n 38149: a1 = s1 | a4\n 38152: a0 = a0 | a1\n 38155: jump @557 if a0 == 0\n      : @518 (gas: 87)\n 38159: a0 = u64 [sp + 0xa8]\n 38163: u64 [sp + 0x530] = a0\n 38167: a0 = u64 [sp + 0xb0]\n 38171: u64 [sp + 0x528] = a0\n 38175: a0 = u64 [sp + 0xb8]\n 38179: u64 [sp + 0x520] = a0\n 38183: a0 = u64 [sp + 0xa0]\n 38187: u64 [sp + 0x538] = a0\n 38191: u64 [sp + 1368] = 0\n 38195: u64 [sp + 1360] = 0\n 38199: u64 [sp + 1352] = 0\n 38203: u64 [sp + 1344] = 0\n 38207: u32 [sp + 1280] = 0x20\n 38212: i32 a1 = sp + 0x520\n 38216: i32 a3 = sp + 0x540\n 38220: i32 a4 = sp + 0x500\n 38224: a2 = 0xffffffffffffffff\n 38227: a0 = 0\n 38229: ecalli 4 // 'get_storage'\n 38231: a0 = u64 [sp + 0xa0]\n 38235: u64 [sp + 0x538] = a0\n 38239: a0 = u64 [sp + 0xa8]\n 38243: u64 [sp + 0x530] = a0\n 38247: a0 = u64 [sp + 0xb0]\n 38251: u64 [sp + 0x528] = a0\n 38255: a0 = u64 [sp + 0xb8]\n 38259: u64 [sp + 0x520] = a0\n 38263: a0 = u64 [sp + 0x70]\n 38266: u64 [sp + 0x558] = a0\n 38270: a0 = u64 [sp + 0x78]\n 38273: u64 [sp + 0x550] = a0\n 38277: a0 = u64 [sp + 0x80]\n 38281: u64 [sp + 0x548] = a0\n 38285: u64 [sp + 0x540] = s1\n 38289: i32 a1 = sp + 0x520\n 38293: i32 a3 = sp + 0x540\n 38297: a2 = 0xffffffffffffffff\n 38300: a4 = 0x20\n 38303: a0 = 0\n 38305: ecalli 8 // 'set_storage'\n 38307: a0 = u64 [sp + 0x88]\n 38311: u64 [sp + 0x538] = a0\n 38315: a0 = u64 [sp + 0x90]\n 38319: u64 [sp + 0x530] = a0\n 38323: a0 = u64 [sp + 0x98]\n 38327: u64 [sp + 0x528] = a0\n 38331: s1 = u64 [sp + 0x50]\n 38334: u64 [sp + 0x520] = s1\n 38338: u64 [sp + 1368] = 0\n 38342: u64 [sp + 1360] = 0\n 38346: u64 [sp + 1352] = 0\n 38350: u64 [sp + 1344] = 0\n 38354: u32 [sp + 1280] = 0x20\n 38359: i32 a1 = sp + 0x520\n 38363: i32 a3 = sp + 0x540\n 38367: i32 a4 = sp + 0x500\n 38371: a2 = 0xffffffffffffffff\n 38374: a0 = 0\n 38376: ecalli 4 // 'get_storage'\n 38378: a0 = u64 [sp + 0x540]\n 38382: a1 = u64 [sp + 0x548]\n 38386: a2 = u64 [sp + 0x550]\n 38390: a3 = u64 [sp + 0x558]\n 38394: a0 = a0 & 0xffffffffffffff00\n 38398: a4 = u64 [sp + 0x88]\n 38402: u64 [sp + 0x538] = a4\n 38406: a4 = u64 [sp + 0x90]\n 38410: u64 [sp + 0x530] = a4\n 38414: a4 = u64 [sp + 0x98]\n 38418: u64 [sp + 0x528] = a4\n 38422: u64 [sp + 0x520] = s1\n 38426: u64 [sp + 0x558] = a3\n 38430: u64 [sp + 0x550] = a2\n 38434: u64 [sp + 0x548] = a1\n 38438: u64 [sp + 0x540] = a0\n 38442: i32 a1 = sp + 0x520\n 38446: i32 a3 = sp + 0x540\n 38450: a2 = 0xffffffffffffffff\n 38453: a4 = 0x20\n 38456: a0 = 0\n 38458: ecalli 8 // 'set_storage'\n 38460: sp = s0 + 0xfffffffffffffa80\n 38464: ra = u64 [sp + 0x578]\n 38468: s0 = u64 [sp + 0x570]\n 38472: s1 = u64 [sp + 0x568]\n 38476: sp = sp + 0x580\n 38480: ret\n      : @519 (gas: 3)\n 38482: a0 = 0x40\n 38485: a1 = 0x20\n 38488: ra = 444, jump @0\n      : @520 [@dyn 222] (gas: 103)\n 38495: a1 = u8 [a0 + 0x11]\n 38498: a2 = u8 [a0 + 0x10]\n 38501: a3 = u8 [a0 + 0x12]\n 38504: a4 = u8 [a0 + 0x13]\n 38507: a1 = a1 << 0x8\n 38510: a1 = a1 | a2\n 38513: a3 = a3 << 0x10\n 38516: a4 = a4 << 0x18\n 38519: a3 = a3 | a4\n 38522: a1 = a1 | a3\n 38525: a2 = u8 [a0 + 0x15]\n 38528: a3 = u8 [a0 + 0x14]\n 38531: a4 = u8 [a0 + 0x16]\n 38534: a5 = u8 [a0 + 0x17]\n 38537: a2 = a2 << 0x8\n 38540: a2 = a2 | a3\n 38543: a4 = a4 << 0x10\n 38546: a5 = a5 << 0x18\n 38549: a4 = a4 | a5\n 38552: a2 = a2 | a4\n 38555: a2 = a2 << 0x20\n 38558: t0 = a2 | a1\n 38561: a2 = u8 [a0 + 0x1]\n 38564: a3 = u8 [a0]\n 38566: a4 = u8 [a0 + 0x2]\n 38569: a5 = u8 [a0 + 0x3]\n 38572: a2 = a2 << 0x8\n 38575: a2 = a2 | a3\n 38578: a4 = a4 << 0x10\n 38581: a5 = a5 << 0x18\n 38584: a4 = a4 | a5\n 38587: a2 = a2 | a4\n 38590: a3 = u8 [a0 + 0x5]\n 38593: a4 = u8 [a0 + 0x4]\n 38596: a5 = u8 [a0 + 0x6]\n 38599: s1 = u8 [a0 + 0x7]\n 38602: a3 = a3 << 0x8\n 38605: a3 = a3 | a4\n 38608: a5 = a5 << 0x10\n 38611: s1 = s1 << 0x18\n 38614: a5 = a5 | s1\n 38617: a3 = a3 | a5\n 38620: a3 = a3 << 0x20\n 38623: a2 = a2 | a3\n 38626: a3 = u8 [a0 + 0x19]\n 38629: a4 = u8 [a0 + 0x18]\n 38632: a5 = u8 [a0 + 0x1a]\n 38635: s1 = u8 [a0 + 0x1b]\n 38638: a3 = a3 << 0x8\n 38641: a3 = a3 | a4\n 38644: a5 = a5 << 0x10\n 38647: s1 = s1 << 0x18\n 38650: a5 = a5 | s1\n 38653: a3 = a3 | a5\n 38656: a4 = u8 [a0 + 0x1d]\n 38659: a5 = u8 [a0 + 0x1c]\n 38662: s1 = u8 [a0 + 0x1e]\n 38665: a1 = u8 [a0 + 0x1f]\n 38668: a4 = a4 << 0x8\n 38671: a4 = a4 | a5\n 38674: s1 = s1 << 0x10\n 38677: a1 = a1 << 0x18\n 38680: a1 = a1 | s1\n 38683: a1 = a1 | a4\n 38686: a1 = a1 << 0x20\n 38689: a3 = a3 | a1\n 38692: a1 = u8 [a0 + 0x9]\n 38695: a4 = u8 [a0 + 0x8]\n 38698: a5 = u8 [a0 + 0xa]\n 38701: s1 = u8 [a0 + 0xb]\n 38704: a1 = a1 << 0x8\n 38707: a1 = a1 | a4\n 38710: a5 = a5 << 0x10\n 38713: s1 = s1 << 0x18\n 38716: a5 = a5 | s1\n 38719: a1 = a1 | a5\n 38722: a4 = u8 [a0 + 0xd]\n 38725: a5 = u8 [a0 + 0xc]\n 38728: s1 = u8 [a0 + 0xe]\n 38731: a0 = u8 [a0 + 0xf]\n 38734: a4 = a4 << 0x8\n 38737: a4 = a4 | a5\n 38740: s1 = s1 << 0x10\n 38743: a0 = a0 << 0x18\n 38746: a0 = a0 | s1\n 38749: a0 = a0 | a4\n 38752: a0 = a0 << 0x20\n 38755: a0 = a0 | a1\n 38758: s1 = reverse a0\n 38760: a1 = reverse a3\n 38762: a2 = reverse a2\n 38764: a0 = reverse t0\n 38766: u64 [sp + 0xb8] = a0\n 38770: u64 [sp + 0xb0] = a2\n 38774: a0 = a0 | a2\n 38777: a2 = a1\n 38779: a1 = a1 | s1\n 38782: a1 = a1 | a0\n 38785: a1 = a1 >> 0x20\n 38788: a0 = a0 | s1\n 38791: a0 = a0 << 0x20\n 38794: a0 = a0 | a1\n 38797: jump @540 if a0 != 0\n      : @521 (gas: 5)\n 38801: u64 [sp + 0xa8] = a2\n 38805: i32 a0 = a2 + 0\n 38807: a1 = 0x20\n 38810: u64 [sp + 0xa0] = a0\n 38814: ra = 446, jump @0\n      : @522 [@dyn 223] (gas: 50)\n 38821: u8 [a0 + 31] = 0\n 38824: u8 [a0 + 30] = 0\n 38827: u8 [a0 + 29] = 0\n 38830: u8 [a0 + 28] = 0\n 38833: u8 [a0 + 27] = 0\n 38836: u8 [a0 + 26] = 0\n 38839: u8 [a0 + 25] = 0\n 38842: u8 [a0 + 24] = 0\n 38845: u8 [a0 + 23] = 0\n 38848: u8 [a0 + 22] = 0\n 38851: u8 [a0 + 21] = 0\n 38854: u8 [a0 + 20] = 0\n 38857: u8 [a0 + 19] = 0\n 38860: u8 [a0 + 18] = 0\n 38863: u8 [a0 + 17] = 0\n 38866: u8 [a0 + 16] = 0\n 38869: u8 [a0 + 15] = 0\n 38872: u8 [a0 + 14] = 0\n 38875: u8 [a0 + 13] = 0\n 38878: u8 [a0 + 12] = 0\n 38881: u8 [a0 + 11] = 0\n 38884: u8 [a0 + 10] = 0\n 38887: u8 [a0 + 9] = 0\n 38890: u8 [a0 + 8] = 0\n 38893: u8 [a0 + 7] = 0\n 38896: u8 [a0 + 6] = 0\n 38899: u8 [a0 + 5] = 0\n 38902: u8 [a0 + 4] = 0\n 38905: u8 [a0 + 3] = 0xa0\n 38910: u8 [a0 + 2] = 0x79\n 38914: u8 [a0 + 1] = 0xc3\n 38919: u8 [a0 + 0] = 0x8\n 38922: a1 = u64 [sp + 0xa8]\n 38926: a0 = a1 + 0x4\n 38929: a1 = a0 <u a1\n 38932: a3 = u64 [sp + 0xb8]\n 38936: a2 = a3 + a1\n 38939: a3 = a2 <u a3\n 38942: a3 = a1 if a1 == 0\n 38945: a3 = a3 + s1\n 38948: a1 = a3 <u s1\n 38951: a4 = u64 [sp + 0xb0]\n 38955: a4 = a4 + a1\n 38958: u64 [sp + 0x448] = a2\n 38962: u64 [sp + 0x440] = a0\n 38966: u64 [sp + 0x450] = a3\n 38970: a0 = sp + 0x460\n 38974: a1 = sp + 0x440\n 38978: u64 [sp + 0x458] = a4\n 38982: ra = 448, jump @434\n      : @523 [@dyn 224] (gas: 5)\n 38988: a0 = u64 [sp + 0x468]\n 38992: t0 = u64 [sp + 0x478]\n 38996: t1 = u64 [sp + 0x460]\n 39000: a3 = u64 [sp + 0x470]\n 39004: jump @539\n      : @524 (gas: 3)\n 39007: a0 = 0x40\n 39010: a1 = 0x20\n 39013: ra = 450, jump @0\n      : @525 [@dyn 225] (gas: 103)\n 39020: a1 = u8 [a0 + 0x11]\n 39023: a2 = u8 [a0 + 0x10]\n 39026: a3 = u8 [a0 + 0x12]\n 39029: a4 = u8 [a0 + 0x13]\n 39032: a1 = a1 << 0x8\n 39035: a1 = a1 | a2\n 39038: a3 = a3 << 0x10\n 39041: a4 = a4 << 0x18\n 39044: a3 = a3 | a4\n 39047: a1 = a1 | a3\n 39050: a2 = u8 [a0 + 0x15]\n 39053: a3 = u8 [a0 + 0x14]\n 39056: a4 = u8 [a0 + 0x16]\n 39059: a5 = u8 [a0 + 0x17]\n 39062: a2 = a2 << 0x8\n 39065: a2 = a2 | a3\n 39068: a4 = a4 << 0x10\n 39071: a5 = a5 << 0x18\n 39074: a4 = a4 | a5\n 39077: a2 = a2 | a4\n 39080: a2 = a2 << 0x20\n 39083: t0 = a2 | a1\n 39086: a2 = u8 [a0 + 0x1]\n 39089: a3 = u8 [a0]\n 39091: a4 = u8 [a0 + 0x2]\n 39094: a5 = u8 [a0 + 0x3]\n 39097: a2 = a2 << 0x8\n 39100: a2 = a2 | a3\n 39103: a4 = a4 << 0x10\n 39106: a5 = a5 << 0x18\n 39109: a4 = a4 | a5\n 39112: a2 = a2 | a4\n 39115: a3 = u8 [a0 + 0x5]\n 39118: a4 = u8 [a0 + 0x4]\n 39121: a5 = u8 [a0 + 0x6]\n 39124: s1 = u8 [a0 + 0x7]\n 39127: a3 = a3 << 0x8\n 39130: a3 = a3 | a4\n 39133: a5 = a5 << 0x10\n 39136: s1 = s1 << 0x18\n 39139: a5 = a5 | s1\n 39142: a3 = a3 | a5\n 39145: a3 = a3 << 0x20\n 39148: a2 = a2 | a3\n 39151: a3 = u8 [a0 + 0x19]\n 39154: a4 = u8 [a0 + 0x18]\n 39157: a5 = u8 [a0 + 0x1a]\n 39160: s1 = u8 [a0 + 0x1b]\n 39163: a3 = a3 << 0x8\n 39166: a3 = a3 | a4\n 39169: a5 = a5 << 0x10\n 39172: s1 = s1 << 0x18\n 39175: a5 = a5 | s1\n 39178: a3 = a3 | a5\n 39181: a4 = u8 [a0 + 0x1d]\n 39184: a5 = u8 [a0 + 0x1c]\n 39187: s1 = u8 [a0 + 0x1e]\n 39190: a1 = u8 [a0 + 0x1f]\n 39193: a4 = a4 << 0x8\n 39196: a4 = a4 | a5\n 39199: s1 = s1 << 0x10\n 39202: a1 = a1 << 0x18\n 39205: a1 = a1 | s1\n 39208: a1 = a1 | a4\n 39211: a1 = a1 << 0x20\n 39214: a3 = a3 | a1\n 39217: a1 = u8 [a0 + 0x9]\n 39220: a4 = u8 [a0 + 0x8]\n 39223: a5 = u8 [a0 + 0xa]\n 39226: s1 = u8 [a0 + 0xb]\n 39229: a1 = a1 << 0x8\n 39232: a1 = a1 | a4\n 39235: a5 = a5 << 0x10\n 39238: s1 = s1 << 0x18\n 39241: a5 = a5 | s1\n 39244: a1 = a1 | a5\n 39247: a4 = u8 [a0 + 0xd]\n 39250: a5 = u8 [a0 + 0xc]\n 39253: s1 = u8 [a0 + 0xe]\n 39256: a0 = u8 [a0 + 0xf]\n 39259: a4 = a4 << 0x8\n 39262: a4 = a4 | a5\n 39265: s1 = s1 << 0x10\n 39268: a0 = a0 << 0x18\n 39271: a0 = a0 | s1\n 39274: a0 = a0 | a4\n 39277: a0 = a0 << 0x20\n 39280: a0 = a0 | a1\n 39283: s1 = reverse a0\n 39285: a1 = reverse a3\n 39287: a2 = reverse a2\n 39289: a0 = reverse t0\n 39291: u64 [sp + 0xb8] = a0\n 39295: u64 [sp + 0xb0] = a2\n 39299: a0 = a0 | a2\n 39302: a2 = a1\n 39304: a1 = a1 | s1\n 39307: a1 = a1 | a0\n 39310: a1 = a1 >> 0x20\n 39313: a0 = a0 | s1\n 39316: a0 = a0 << 0x20\n 39319: a0 = a0 | a1\n 39322: jump @540 if a0 != 0\n      : @526 (gas: 5)\n 39326: u64 [sp + 0xa8] = a2\n 39330: i32 a0 = a2 + 0\n 39332: a1 = 0x20\n 39335: u64 [sp + 0xa0] = a0\n 39339: ra = 452, jump @0\n      : @527 [@dyn 226] (gas: 50)\n 39346: u8 [a0 + 31] = 0\n 39349: u8 [a0 + 30] = 0\n 39352: u8 [a0 + 29] = 0\n 39355: u8 [a0 + 28] = 0\n 39358: u8 [a0 + 27] = 0\n 39361: u8 [a0 + 26] = 0\n 39364: u8 [a0 + 25] = 0\n 39367: u8 [a0 + 24] = 0\n 39370: u8 [a0 + 23] = 0\n 39373: u8 [a0 + 22] = 0\n 39376: u8 [a0 + 21] = 0\n 39379: u8 [a0 + 20] = 0\n 39382: u8 [a0 + 19] = 0\n 39385: u8 [a0 + 18] = 0\n 39388: u8 [a0 + 17] = 0\n 39391: u8 [a0 + 16] = 0\n 39394: u8 [a0 + 15] = 0\n 39397: u8 [a0 + 14] = 0\n 39400: u8 [a0 + 13] = 0\n 39403: u8 [a0 + 12] = 0\n 39406: u8 [a0 + 11] = 0\n 39409: u8 [a0 + 10] = 0\n 39412: u8 [a0 + 9] = 0\n 39415: u8 [a0 + 8] = 0\n 39418: u8 [a0 + 7] = 0\n 39421: u8 [a0 + 6] = 0\n 39424: u8 [a0 + 5] = 0\n 39427: u8 [a0 + 4] = 0\n 39430: u8 [a0 + 3] = 0xa0\n 39435: u8 [a0 + 2] = 0x79\n 39439: u8 [a0 + 1] = 0xc3\n 39444: u8 [a0 + 0] = 0x8\n 39447: a1 = u64 [sp + 0xa8]\n 39451: a0 = a1 + 0x4\n 39454: a1 = a0 <u a1\n 39457: a3 = u64 [sp + 0xb8]\n 39461: a2 = a3 + a1\n 39464: a3 = a2 <u a3\n 39467: a3 = a1 if a1 == 0\n 39470: a3 = a3 + s1\n 39473: a1 = a3 <u s1\n 39476: a4 = u64 [sp + 0xb0]\n 39480: a4 = a4 + a1\n 39483: u64 [sp + 0xc8] = a2\n 39487: u64 [sp + 0xc0] = a0\n 39491: u64 [sp + 0xd0] = a3\n 39495: a0 = sp + 0xe0\n 39499: a1 = sp + 0xc0\n 39503: u64 [sp + 0xd8] = a4\n 39507: ra = 454, jump @442\n      : @528 [@dyn 227] (gas: 5)\n 39513: a0 = u64 [sp + 0xe8]\n 39517: t0 = u64 [sp + 0xf8]\n 39521: t1 = u64 [sp + 0xe0]\n 39525: a3 = u64 [sp + 0xf0]\n 39529: jump @539\n      : @529 (gas: 3)\n 39532: a0 = 0x40\n 39535: a1 = 0x20\n 39538: ra = 456, jump @0\n      : @530 [@dyn 228] (gas: 103)\n 39545: a1 = u8 [a0 + 0x11]\n 39548: a2 = u8 [a0 + 0x10]\n 39551: a3 = u8 [a0 + 0x12]\n 39554: a4 = u8 [a0 + 0x13]\n 39557: a1 = a1 << 0x8\n 39560: a1 = a1 | a2\n 39563: a3 = a3 << 0x10\n 39566: a4 = a4 << 0x18\n 39569: a3 = a3 | a4\n 39572: a1 = a1 | a3\n 39575: a2 = u8 [a0 + 0x15]\n 39578: a3 = u8 [a0 + 0x14]\n 39581: a4 = u8 [a0 + 0x16]\n 39584: a5 = u8 [a0 + 0x17]\n 39587: a2 = a2 << 0x8\n 39590: a2 = a2 | a3\n 39593: a4 = a4 << 0x10\n 39596: a5 = a5 << 0x18\n 39599: a4 = a4 | a5\n 39602: a2 = a2 | a4\n 39605: a2 = a2 << 0x20\n 39608: t0 = a2 | a1\n 39611: a2 = u8 [a0 + 0x1]\n 39614: a3 = u8 [a0]\n 39616: a4 = u8 [a0 + 0x2]\n 39619: a5 = u8 [a0 + 0x3]\n 39622: a2 = a2 << 0x8\n 39625: a2 = a2 | a3\n 39628: a4 = a4 << 0x10\n 39631: a5 = a5 << 0x18\n 39634: a4 = a4 | a5\n 39637: a2 = a2 | a4\n 39640: a3 = u8 [a0 + 0x5]\n 39643: a4 = u8 [a0 + 0x4]\n 39646: a5 = u8 [a0 + 0x6]\n 39649: s1 = u8 [a0 + 0x7]\n 39652: a3 = a3 << 0x8\n 39655: a3 = a3 | a4\n 39658: a5 = a5 << 0x10\n 39661: s1 = s1 << 0x18\n 39664: a5 = a5 | s1\n 39667: a3 = a3 | a5\n 39670: a3 = a3 << 0x20\n 39673: a2 = a2 | a3\n 39676: a3 = u8 [a0 + 0x19]\n 39679: a4 = u8 [a0 + 0x18]\n 39682: a5 = u8 [a0 + 0x1a]\n 39685: s1 = u8 [a0 + 0x1b]\n 39688: a3 = a3 << 0x8\n 39691: a3 = a3 | a4\n 39694: a5 = a5 << 0x10\n 39697: s1 = s1 << 0x18\n 39700: a5 = a5 | s1\n 39703: a3 = a3 | a5\n 39706: a4 = u8 [a0 + 0x1d]\n 39709: a5 = u8 [a0 + 0x1c]\n 39712: s1 = u8 [a0 + 0x1e]\n 39715: a1 = u8 [a0 + 0x1f]\n 39718: a4 = a4 << 0x8\n 39721: a4 = a4 | a5\n 39724: s1 = s1 << 0x10\n 39727: a1 = a1 << 0x18\n 39730: a1 = a1 | s1\n 39733: a1 = a1 | a4\n 39736: a1 = a1 << 0x20\n 39739: a3 = a3 | a1\n 39742: a1 = u8 [a0 + 0x9]\n 39745: a4 = u8 [a0 + 0x8]\n 39748: a5 = u8 [a0 + 0xa]\n 39751: s1 = u8 [a0 + 0xb]\n 39754: a1 = a1 << 0x8\n 39757: a1 = a1 | a4\n 39760: a5 = a5 << 0x10\n 39763: s1 = s1 << 0x18\n 39766: a5 = a5 | s1\n 39769: a1 = a1 | a5\n 39772: a4 = u8 [a0 + 0xd]\n 39775: a5 = u8 [a0 + 0xc]\n 39778: s1 = u8 [a0 + 0xe]\n 39781: a0 = u8 [a0 + 0xf]\n 39784: a4 = a4 << 0x8\n 39787: a4 = a4 | a5\n 39790: s1 = s1 << 0x10\n 39793: a0 = a0 << 0x18\n 39796: a0 = a0 | s1\n 39799: a0 = a0 | a4\n 39802: a0 = a0 << 0x20\n 39805: a0 = a0 | a1\n 39808: s1 = reverse a0\n 39810: a1 = reverse a3\n 39812: a2 = reverse a2\n 39814: a0 = reverse t0\n 39816: u64 [sp + 0xb8] = a0\n 39820: u64 [sp + 0xb0] = a2\n 39824: a0 = a0 | a2\n 39827: a2 = a1\n 39829: a1 = a1 | s1\n 39832: a1 = a1 | a0\n 39835: a1 = a1 >> 0x20\n 39838: a0 = a0 | s1\n 39841: a0 = a0 << 0x20\n 39844: a0 = a0 | a1\n 39847: jump @540 if a0 != 0\n      : @531 (gas: 5)\n 39851: u64 [sp + 0xa8] = a2\n 39855: i32 a0 = a2 + 0\n 39857: a1 = 0x20\n 39860: u64 [sp + 0xa0] = a0\n 39864: ra = 458, jump @0\n      : @532 [@dyn 229] (gas: 50)\n 39871: u8 [a0 + 31] = 0\n 39874: u8 [a0 + 30] = 0\n 39877: u8 [a0 + 29] = 0\n 39880: u8 [a0 + 28] = 0\n 39883: u8 [a0 + 27] = 0\n 39886: u8 [a0 + 26] = 0\n 39889: u8 [a0 + 25] = 0\n 39892: u8 [a0 + 24] = 0\n 39895: u8 [a0 + 23] = 0\n 39898: u8 [a0 + 22] = 0\n 39901: u8 [a0 + 21] = 0\n 39904: u8 [a0 + 20] = 0\n 39907: u8 [a0 + 19] = 0\n 39910: u8 [a0 + 18] = 0\n 39913: u8 [a0 + 17] = 0\n 39916: u8 [a0 + 16] = 0\n 39919: u8 [a0 + 15] = 0\n 39922: u8 [a0 + 14] = 0\n 39925: u8 [a0 + 13] = 0\n 39928: u8 [a0 + 12] = 0\n 39931: u8 [a0 + 11] = 0\n 39934: u8 [a0 + 10] = 0\n 39937: u8 [a0 + 9] = 0\n 39940: u8 [a0 + 8] = 0\n 39943: u8 [a0 + 7] = 0\n 39946: u8 [a0 + 6] = 0\n 39949: u8 [a0 + 5] = 0\n 39952: u8 [a0 + 4] = 0\n 39955: u8 [a0 + 3] = 0xa0\n 39960: u8 [a0 + 2] = 0x79\n 39964: u8 [a0 + 1] = 0xc3\n 39969: u8 [a0 + 0] = 0x8\n 39972: a1 = u64 [sp + 0xa8]\n 39976: a0 = a1 + 0x4\n 39979: a1 = a0 <u a1\n 39982: a3 = u64 [sp + 0xb8]\n 39986: a2 = a3 + a1\n 39989: a3 = a2 <u a3\n 39992: a3 = a1 if a1 == 0\n 39995: a3 = a3 + s1\n 39998: a1 = a3 <u s1\n 40001: a4 = u64 [sp + 0xb0]\n 40005: a4 = a4 + a1\n 40008: u64 [sp + 0x108] = a2\n 40012: u64 [sp + 0x100] = a0\n 40016: u64 [sp + 0x110] = a3\n 40020: a0 = sp + 0x120\n 40024: a1 = sp + 0x100\n 40028: u64 [sp + 0x118] = a4\n 40032: ra = 460, jump @450\n      : @533 [@dyn 230] (gas: 5)\n 40038: a0 = u64 [sp + 0x128]\n 40042: t0 = u64 [sp + 0x138]\n 40046: t1 = u64 [sp + 0x120]\n 40050: a3 = u64 [sp + 0x130]\n 40054: jump @539\n      : @534 (gas: 3)\n 40057: a0 = 0x40\n 40060: a1 = 0x20\n 40063: ra = 462, jump @0\n      : @535 [@dyn 231] (gas: 103)\n 40070: a1 = u8 [a0 + 0x11]\n 40073: a2 = u8 [a0 + 0x10]\n 40076: a3 = u8 [a0 + 0x12]\n 40079: a4 = u8 [a0 + 0x13]\n 40082: a1 = a1 << 0x8\n 40085: a1 = a1 | a2\n 40088: a3 = a3 << 0x10\n 40091: a4 = a4 << 0x18\n 40094: a3 = a3 | a4\n 40097: a1 = a1 | a3\n 40100: a2 = u8 [a0 + 0x15]\n 40103: a3 = u8 [a0 + 0x14]\n 40106: a4 = u8 [a0 + 0x16]\n 40109: a5 = u8 [a0 + 0x17]\n 40112: a2 = a2 << 0x8\n 40115: a2 = a2 | a3\n 40118: a4 = a4 << 0x10\n 40121: a5 = a5 << 0x18\n 40124: a4 = a4 | a5\n 40127: a2 = a2 | a4\n 40130: a2 = a2 << 0x20\n 40133: t0 = a2 | a1\n 40136: a2 = u8 [a0 + 0x1]\n 40139: a3 = u8 [a0]\n 40141: a4 = u8 [a0 + 0x2]\n 40144: a5 = u8 [a0 + 0x3]\n 40147: a2 = a2 << 0x8\n 40150: a2 = a2 | a3\n 40153: a4 = a4 << 0x10\n 40156: a5 = a5 << 0x18\n 40159: a4 = a4 | a5\n 40162: a2 = a2 | a4\n 40165: a3 = u8 [a0 + 0x5]\n 40168: a4 = u8 [a0 + 0x4]\n 40171: a5 = u8 [a0 + 0x6]\n 40174: s1 = u8 [a0 + 0x7]\n 40177: a3 = a3 << 0x8\n 40180: a3 = a3 | a4\n 40183: a5 = a5 << 0x10\n 40186: s1 = s1 << 0x18\n 40189: a5 = a5 | s1\n 40192: a3 = a3 | a5\n 40195: a3 = a3 << 0x20\n 40198: a2 = a2 | a3\n 40201: a3 = u8 [a0 + 0x19]\n 40204: a4 = u8 [a0 + 0x18]\n 40207: a5 = u8 [a0 + 0x1a]\n 40210: s1 = u8 [a0 + 0x1b]\n 40213: a3 = a3 << 0x8\n 40216: a3 = a3 | a4\n 40219: a5 = a5 << 0x10\n 40222: s1 = s1 << 0x18\n 40225: a5 = a5 | s1\n 40228: a3 = a3 | a5\n 40231: a4 = u8 [a0 + 0x1d]\n 40234: a5 = u8 [a0 + 0x1c]\n 40237: s1 = u8 [a0 + 0x1e]\n 40240: a1 = u8 [a0 + 0x1f]\n 40243: a4 = a4 << 0x8\n 40246: a4 = a4 | a5\n 40249: s1 = s1 << 0x10\n 40252: a1 = a1 << 0x18\n 40255: a1 = a1 | s1\n 40258: a1 = a1 | a4\n 40261: a1 = a1 << 0x20\n 40264: a3 = a3 | a1\n 40267: a1 = u8 [a0 + 0x9]\n 40270: a4 = u8 [a0 + 0x8]\n 40273: a5 = u8 [a0 + 0xa]\n 40276: s1 = u8 [a0 + 0xb]\n 40279: a1 = a1 << 0x8\n 40282: a1 = a1 | a4\n 40285: a5 = a5 << 0x10\n 40288: s1 = s1 << 0x18\n 40291: a5 = a5 | s1\n 40294: a1 = a1 | a5\n 40297: a4 = u8 [a0 + 0xd]\n 40300: a5 = u8 [a0 + 0xc]\n 40303: s1 = u8 [a0 + 0xe]\n 40306: a0 = u8 [a0 + 0xf]\n 40309: a4 = a4 << 0x8\n 40312: a4 = a4 | a5\n 40315: s1 = s1 << 0x10\n 40318: a0 = a0 << 0x18\n 40321: a0 = a0 | s1\n 40324: a0 = a0 | a4\n 40327: a0 = a0 << 0x20\n 40330: a0 = a0 | a1\n 40333: s1 = reverse a0\n 40335: a1 = reverse a3\n 40337: a2 = reverse a2\n 40339: a0 = reverse t0\n 40341: u64 [sp + 0xb8] = a0\n 40345: u64 [sp + 0xb0] = a2\n 40349: a0 = a0 | a2\n 40352: a2 = a1\n 40354: a1 = a1 | s1\n 40357: a1 = a1 | a0\n 40360: a1 = a1 >> 0x20\n 40363: a0 = a0 | s1\n 40366: a0 = a0 << 0x20\n 40369: a0 = a0 | a1\n 40372: jump @540 if a0 != 0\n      : @536 (gas: 5)\n 40376: u64 [sp + 0xa8] = a2\n 40380: i32 a0 = a2 + 0\n 40382: a1 = 0x20\n 40385: u64 [sp + 0xa0] = a0\n 40389: ra = 464, jump @0\n      : @537 [@dyn 232] (gas: 50)\n 40396: u8 [a0 + 31] = 0\n 40399: u8 [a0 + 30] = 0\n 40402: u8 [a0 + 29] = 0\n 40405: u8 [a0 + 28] = 0\n 40408: u8 [a0 + 27] = 0\n 40411: u8 [a0 + 26] = 0\n 40414: u8 [a0 + 25] = 0\n 40417: u8 [a0 + 24] = 0\n 40420: u8 [a0 + 23] = 0\n 40423: u8 [a0 + 22] = 0\n 40426: u8 [a0 + 21] = 0\n 40429: u8 [a0 + 20] = 0\n 40432: u8 [a0 + 19] = 0\n 40435: u8 [a0 + 18] = 0\n 40438: u8 [a0 + 17] = 0\n 40441: u8 [a0 + 16] = 0\n 40444: u8 [a0 + 15] = 0\n 40447: u8 [a0 + 14] = 0\n 40450: u8 [a0 + 13] = 0\n 40453: u8 [a0 + 12] = 0\n 40456: u8 [a0 + 11] = 0\n 40459: u8 [a0 + 10] = 0\n 40462: u8 [a0 + 9] = 0\n 40465: u8 [a0 + 8] = 0\n 40468: u8 [a0 + 7] = 0\n 40471: u8 [a0 + 6] = 0\n 40474: u8 [a0 + 5] = 0\n 40477: u8 [a0 + 4] = 0\n 40480: u8 [a0 + 3] = 0xa0\n 40485: u8 [a0 + 2] = 0x79\n 40489: u8 [a0 + 1] = 0xc3\n 40494: u8 [a0 + 0] = 0x8\n 40497: a1 = u64 [sp + 0xa8]\n 40501: a0 = a1 + 0x4\n 40504: a1 = a0 <u a1\n 40507: a3 = u64 [sp + 0xb8]\n 40511: a2 = a3 + a1\n 40514: a3 = a2 <u a3\n 40517: a3 = a1 if a1 == 0\n 40520: a3 = a3 + s1\n 40523: a1 = a3 <u s1\n 40526: a4 = u64 [sp + 0xb0]\n 40530: a4 = a4 + a1\n 40533: u64 [sp + 0x188] = a2\n 40537: u64 [sp + 0x180] = a0\n 40541: u64 [sp + 0x190] = a3\n 40545: a0 = sp + 0x1a0\n 40549: a1 = sp + 0x180\n 40553: u64 [sp + 0x198] = a4\n 40557: ra = 466, jump @458\n      : @538 [@dyn 233] (gas: 5)\n 40563: a0 = u64 [sp + 0x1a8]\n 40567: t0 = u64 [sp + 0x1b8]\n 40571: t1 = u64 [sp + 0x1a0]\n 40575: a3 = u64 [sp + 0x1b0]\n 40579: fallthrough\n      : @539 (gas: 26)\n 40580: a1 = u64 [sp + 0xb8]\n 40584: a4 = a0 ^ a1\n 40587: a5 = a0 <u a1\n 40590: t2 = a1\n 40592: a2 = u64 [sp + 0xa8]\n 40596: a1 = t1 <u a2\n 40599: a5 = a1 if a4 == 0\n 40602: a4 = a3 - s1\n 40605: a3 = a3 <u s1\n 40608: s1 = u64 [sp + 0xb0]\n 40612: s1 = t0 - s1\n 40615: s1 = s1 - a3\n 40618: a3 = a4 <u a5\n 40621: s1 = s1 - a3\n 40624: a4 = a4 - a5\n 40627: a0 = a0 - t2\n 40630: a1 = a0 - a1\n 40633: a0 = t1 - a2\n 40636: a1 = a1 | s1\n 40639: a2 = a0 | a4\n 40642: a2 = a2 | a1\n 40645: a1 = a1 | a4\n 40648: a2 = a2 >> 0x20\n 40651: a1 = a1 << 0x20\n 40654: a1 = a1 | a2\n 40657: jump @561 if a1 == 0\n      : @540 (gas: 1)\n 40661: trap\n      : @541 (gas: 8)\n 40662: u64 [sp + 368] = 0\n 40666: u64 [sp + 360] = 0\n 40670: u64 [sp + 352] = 0\n 40674: a0 = 0x4e487b7100000000\n 40684: a1 = sp + 0x160\n 40688: u64 [sp + 0x178] = a0\n 40692: a0 = 0\n 40694: ra = 468, jump @8\n      : @542 [@dyn 234] (gas: 8)\n 40701: u64 [sp + 344] = 0\n 40705: u64 [sp + 336] = 0\n 40709: u64 [sp + 320] = 0x32\n 40714: a0 = 0x4\n 40717: a1 = sp + 0x140\n 40721: u64 [sp + 328] = 0\n 40725: ra = 0x1e6\n 40729: jump @8\n      : @543 (gas: 8)\n 40733: u64 [sp + 496] = 0\n 40737: u64 [sp + 488] = 0\n 40741: u64 [sp + 480] = 0\n 40745: a0 = 0x4e487b7100000000\n 40755: a1 = sp + 0x1e0\n 40759: u64 [sp + 0x1f8] = a0\n 40763: a0 = 0\n 40765: ra = 470, jump @8\n      : @544 [@dyn 235] (gas: 8)\n 40772: u64 [sp + 472] = 0\n 40776: u64 [sp + 464] = 0\n 40780: u64 [sp + 448] = 0x32\n 40785: a0 = 0x4\n 40788: a1 = sp + 0x1c0\n 40792: u64 [sp + 456] = 0\n 40796: ra = 0x1e6\n 40800: jump @8\n      : @545 (gas: 8)\n 40804: u64 [sp + 560] = 0\n 40808: u64 [sp + 552] = 0\n 40812: u64 [sp + 544] = 0\n 40816: a0 = 0x4e487b7100000000\n 40826: a1 = sp + 0x220\n 40830: u64 [sp + 0x238] = a0\n 40834: a0 = 0\n 40836: ra = 472, jump @8\n      : @546 [@dyn 236] (gas: 8)\n 40843: u64 [sp + 536] = 0\n 40847: u64 [sp + 528] = 0\n 40851: u64 [sp + 512] = 0x11\n 40856: a0 = 0x4\n 40859: a1 = sp + 0x200\n 40863: u64 [sp + 520] = 0\n 40867: ra = 0x1e6\n 40871: jump @8\n      : @547 (gas: 8)\n 40875: u64 [sp + 624] = 0\n 40879: u64 [sp + 616] = 0\n 40883: u64 [sp + 608] = 0\n 40887: a0 = 0x4e487b7100000000\n 40897: a1 = sp + 0x260\n 40901: u64 [sp + 0x278] = a0\n 40905: a0 = 0\n 40907: ra = 474, jump @8\n      : @548 [@dyn 237] (gas: 8)\n 40914: u64 [sp + 600] = 0\n 40918: u64 [sp + 592] = 0\n 40922: u64 [sp + 576] = 0x32\n 40927: a0 = 0x4\n 40930: a1 = sp + 0x240\n 40934: u64 [sp + 584] = 0\n 40938: ra = 0x1e6\n 40942: jump @8\n      : @549 (gas: 8)\n 40946: u64 [sp + 688] = 0\n 40950: u64 [sp + 680] = 0\n 40954: u64 [sp + 672] = 0\n 40958: a0 = 0x4e487b7100000000\n 40968: a1 = sp + 0x2a0\n 40972: u64 [sp + 0x2b8] = a0\n 40976: a0 = 0\n 40978: ra = 476, jump @8\n      : @550 [@dyn 238] (gas: 8)\n 40985: u64 [sp + 664] = 0\n 40989: u64 [sp + 656] = 0\n 40993: u64 [sp + 640] = 0x11\n 40998: a0 = 0x4\n 41001: a1 = sp + 0x280\n 41005: u64 [sp + 648] = 0\n 41009: ra = 0x1e6\n 41013: jump @8\n      : @551 (gas: 8)\n 41017: u64 [sp + 752] = 0\n 41021: u64 [sp + 744] = 0\n 41025: u64 [sp + 736] = 0\n 41029: a0 = 0x4e487b7100000000\n 41039: a1 = sp + 0x2e0\n 41043: u64 [sp + 0x2f8] = a0\n 41047: a0 = 0\n 41049: ra = 478, jump @8\n      : @552 [@dyn 239] (gas: 8)\n 41056: u64 [sp + 728] = 0\n 41060: u64 [sp + 720] = 0\n 41064: u64 [sp + 704] = 0x32\n 41069: a0 = 0x4\n 41072: a1 = sp + 0x2c0\n 41076: u64 [sp + 712] = 0\n 41080: ra = 0x1e6\n 41084: jump @8\n      : @553 (gas: 8)\n 41088: u64 [sp + 816] = 0\n 41092: u64 [sp + 808] = 0\n 41096: u64 [sp + 800] = 0\n 41100: a0 = 0x4e487b7100000000\n 41110: a1 = sp + 0x320\n 41114: u64 [sp + 0x338] = a0\n 41118: a0 = 0\n 41120: ra = 480, jump @8\n      : @554 [@dyn 240] (gas: 8)\n 41127: u64 [sp + 792] = 0\n 41131: u64 [sp + 784] = 0\n 41135: u64 [sp + 768] = 0x11\n 41140: a0 = 0x4\n 41143: a1 = sp + 0x300\n 41147: u64 [sp + 776] = 0\n 41151: ra = 0x1e6\n 41155: jump @8\n      : @555 (gas: 8)\n 41159: u64 [sp + 880] = 0\n 41163: u64 [sp + 872] = 0\n 41167: u64 [sp + 864] = 0\n 41171: a0 = 0x4e487b7100000000\n 41181: a1 = sp + 0x360\n 41185: u64 [sp + 0x378] = a0\n 41189: a0 = 0\n 41191: ra = 482, jump @8\n      : @556 [@dyn 241] (gas: 8)\n 41198: u64 [sp + 856] = 0\n 41202: u64 [sp + 848] = 0\n 41206: u64 [sp + 832] = 0x32\n 41211: a0 = 0x4\n 41214: a1 = sp + 0x340\n 41218: u64 [sp + 840] = 0\n 41222: ra = 0x1e6\n 41226: jump @8\n      : @557 (gas: 8)\n 41230: u64 [sp + 944] = 0\n 41234: u64 [sp + 936] = 0\n 41238: u64 [sp + 928] = 0\n 41242: a0 = 0x4e487b7100000000\n 41252: a1 = sp + 0x3a0\n 41256: u64 [sp + 0x3b8] = a0\n 41260: a0 = 0\n 41262: ra = 484, jump @8\n      : @558 [@dyn 242] (gas: 7)\n 41269: u64 [sp + 920] = 0\n 41273: u64 [sp + 912] = 0\n 41277: u64 [sp + 896] = 0x11\n 41282: a0 = 0x4\n 41285: a1 = sp + 0x380\n 41289: u64 [sp + 904] = 0\n 41293: ra = 486, jump @8\n      : @559 [@dyn 243] (gas: 3)\n 41300: a1 = 0x24\n 41303: a0 = 0\n 41305: ra = 488, jump @0\n      : @560 [@dyn 244] (gas: 5)\n 41312: i32 a1 = a0 + 0\n 41314: a0 = 0x1\n 41317: a2 = 0x24\n 41320: ecalli 6 // 'seal_return'\n 41322: fallthrough\n      : @561 (gas: 4)\n 41323: i32 s1 = a0 + 0\n 41325: a0 = u64 [sp + 0xa0]\n 41329: a1 = s1\n 41331: ra = 490, jump @0\n      : @562 [@dyn 245] (gas: 6)\n 41338: i32 a1 = a0 + 0\n 41340: a0 = 0x1\n 41343: a2 = s1\n 41345: ra = 0x1ec\n 41349: ecalli 6 // 'seal_return'\n 41351: fallthrough\n      : @563 [@dyn 246] (gas: 12)\n 41352: a1 = u64 [a0 + 0x10]\n 41355: a2 = u64 [a0 + 0x18]\n 41358: a3 = u64 [a0 + 0x8]\n 41361: a0 = u64 [a0]\n 41363: a2 = a2 | a3\n 41366: a3 = a0 | a1\n 41369: a3 = a3 | a2\n 41372: a3 = a3 >> 0x20\n 41375: a1 = a1 | a2\n 41378: a1 = a1 << 0x20\n 41381: a1 = a1 | a3\n 41384: jump @566 if a1 != 0\n      : @564 (gas: 7)\n 41388: sp = sp + 0xfffffffffffffff0\n 41391: u64 [sp + 0x8] = ra\n 41394: u64 [sp] = s0\n 41396: i32 a0 = a0 + 0\n 41398: a1 = 0x20\n 41401: s0 = 0x20\n 41404: ra = 494, jump @0\n      : @565 [@dyn 247] (gas: 38)\n 41411: u8 [a0 + 31] = 0\n 41414: u8 [a0 + 30] = 0\n 41417: u8 [a0 + 29] = 0\n 41420: u8 [a0 + 28] = 0\n 41423: u8 [a0 + 27] = 0\n 41426: u8 [a0 + 26] = 0\n 41429: u8 [a0 + 25] = 0\n 41432: u8 [a0 + 24] = 0\n 41435: u8 [a0 + 23] = 0\n 41438: u8 [a0 + 22] = 0\n 41441: u8 [a0 + 21] = 0\n 41444: u8 [a0 + 20] = 0\n 41447: u8 [a0 + 19] = 0\n 41450: u8 [a0 + 18] = 0\n 41453: u8 [a0 + 17] = 0\n 41456: u8 [a0 + 16] = 0\n 41459: u8 [a0 + 15] = 0\n 41462: u8 [a0 + 14] = 0x73\n 41466: u8 [a0 + 13] = 0x73\n 41470: u8 [a0 + 12] = 0x65\n 41474: u8 [a0 + 11] = 0x72\n 41478: u8 [a0 + 10] = 0x64\n 41482: u8 [a0 + 9] = 0x64\n 41486: a2 = 0x61\n 41489: u8 [a0 + 0x8] = a2\n 41492: u8 [a0 + 0x7] = s0\n 41495: u8 [a0 + 6] = 0x64\n 41499: u8 [a0 + 5] = 0x69\n 41503: u8 [a0 + 4] = 0x6c\n 41507: u8 [a0 + 0x3] = a2\n 41510: u8 [a0 + 2] = 0x76\n 41514: u8 [a0 + 1] = 0x6e\n 41518: a1 = 0x49\n 41521: u8 [a0] = a1\n 41523: ra = u64 [sp + 0x8]\n 41526: s0 = u64 [sp]\n 41528: sp = sp + 0x10\n 41531: ret\n      : @566 (gas: 1)\n 41533: trap\n      : @567 (gas: 17)\n 41534: sp = sp + 0xffffffffffffffa0\n 41537: u64 [sp + 0x58] = ra\n 41540: u64 [sp + 0x50] = s0\n 41543: u64 [sp + 0x48] = s1\n 41546: a3 = u64 [a1 + 0x18]\n 41549: a4 = u64 [a1 + 0x10]\n 41552: a5 = u64 [a1 + 0x8]\n 41555: s1 = u64 [a1]\n 41557: a1 = a5 | a3\n 41560: a2 = s1 | a4\n 41563: a2 = a2 | a1\n 41566: a2 = a2 >> 0x20\n 41569: a1 = a1 | a4\n 41572: a1 = a1 << 0x20\n 41575: a1 = a1 | a2\n 41578: u64 [sp + 0x28] = a0\n 41581: jump @574 if a1 != 0\n      : @568 (gas: 19)\n 41585: a0 = s1 + 0x20\n 41588: u64 [sp + 0x30] = a0\n 41591: a0 = a0 <u s1\n 41594: a1 = a5 + a0\n 41597: u64 [sp + 0x40] = a1\n 41600: u64 [sp + 0x8] = a5\n 41603: s0 = a1 <u a5\n 41606: s0 = a0 if a0 == 0\n 41609: s0 = s0 + a4\n 41612: u64 [sp + 0x10] = a4\n 41615: a0 = s0 <u a4\n 41618: u64 [sp + 0x18] = a3\n 41621: a0 = a0 + a3\n 41624: u64 [sp + 0x38] = a0\n 41627: u64 [sp] = s1\n 41629: i32 a0 = s1 + 0\n 41631: a1 = 0x20\n 41634: s1 = 0x20\n 41637: ra = 496, jump @0\n      : @569 [@dyn 248] (gas: 45)\n 41644: u8 [a0 + 0x1f] = s1\n 41647: a1 = u64 [sp + 0x30]\n 41650: s1 = a1\n 41652: a1 = a1 | s0\n 41655: a2 = u64 [sp + 0x40]\n 41658: a4 = u64 [sp + 0x38]\n 41661: a2 = a2 | a4\n 41664: a1 = a1 | a2\n 41667: a1 = a1 >> 0x20\n 41670: u64 [sp + 0x20] = s0\n 41673: a2 = a2 | s0\n 41676: a2 = a2 << 0x20\n 41679: a1 = a1 | a2\n 41682: u8 [a0 + 30] = 0\n 41685: u8 [a0 + 29] = 0\n 41688: u8 [a0 + 28] = 0\n 41691: u8 [a0 + 27] = 0\n 41694: u8 [a0 + 26] = 0\n 41697: u8 [a0 + 25] = 0\n 41700: u8 [a0 + 24] = 0\n 41703: u8 [a0 + 23] = 0\n 41706: u8 [a0 + 22] = 0\n 41709: u8 [a0 + 21] = 0\n 41712: u8 [a0 + 20] = 0\n 41715: u8 [a0 + 19] = 0\n 41718: u8 [a0 + 18] = 0\n 41721: u8 [a0 + 17] = 0\n 41724: u8 [a0 + 16] = 0\n 41727: u8 [a0 + 15] = 0\n 41730: u8 [a0 + 14] = 0\n 41733: u8 [a0 + 13] = 0\n 41736: u8 [a0 + 12] = 0\n 41739: u8 [a0 + 11] = 0\n 41742: u8 [a0 + 10] = 0\n 41745: u8 [a0 + 9] = 0\n 41748: u8 [a0 + 8] = 0\n 41751: u8 [a0 + 7] = 0\n 41754: u8 [a0 + 6] = 0\n 41757: u8 [a0 + 5] = 0\n 41760: u8 [a0 + 4] = 0\n 41763: u8 [a0 + 3] = 0\n 41766: u8 [a0 + 2] = 0\n 41769: u8 [a0 + 1] = 0\n 41772: u8 [a0 + 0] = 0\n 41774: jump @574 if a1 != 0\n      : @570 (gas: 4)\n 41778: i32 s0 = s1 + 0\n 41780: a1 = 0x20\n 41783: a0 = s0\n 41785: ra = 498, jump @0\n      : @571 [@dyn 249] (gas: 41)\n 41792: u8 [a0 + 31] = 0xf\n 41796: u8 [a0 + 30] = 0\n 41799: u8 [a0 + 29] = 0\n 41802: u8 [a0 + 28] = 0\n 41805: u8 [a0 + 27] = 0\n 41808: u8 [a0 + 26] = 0\n 41811: u8 [a0 + 25] = 0\n 41814: u8 [a0 + 24] = 0\n 41817: u8 [a0 + 23] = 0\n 41820: u8 [a0 + 22] = 0\n 41823: u8 [a0 + 21] = 0\n 41826: u8 [a0 + 20] = 0\n 41829: u8 [a0 + 19] = 0\n 41832: u8 [a0 + 18] = 0\n 41835: u8 [a0 + 17] = 0\n 41838: u8 [a0 + 16] = 0\n 41841: u8 [a0 + 15] = 0\n 41844: u8 [a0 + 14] = 0\n 41847: u8 [a0 + 13] = 0\n 41850: u8 [a0 + 12] = 0\n 41853: u8 [a0 + 11] = 0\n 41856: u8 [a0 + 10] = 0\n 41859: u8 [a0 + 9] = 0\n 41862: u8 [a0 + 8] = 0\n 41865: u8 [a0 + 7] = 0\n 41868: u8 [a0 + 6] = 0\n 41871: u8 [a0 + 5] = 0\n 41874: u8 [a0 + 4] = 0\n 41877: u8 [a0 + 3] = 0\n 41880: u8 [a0 + 2] = 0\n 41883: u8 [a0 + 1] = 0\n 41886: a1 = u64 [sp + 0x20]\n 41889: a2 = u64 [sp + 0x38]\n 41892: a1 = a1 | a2\n 41895: a2 = 0xffffffe0\n 41905: a2 = s1 <u a2\n 41908: a3 = u64 [sp + 0x40]\n 41911: a2 = 0 if a3 != 0\n 41913: a2 = 0 if a1 != 0\n 41915: u8 [a0 + 0] = 0\n 41917: jump @574 if a2 == 0\n      : @572 (gas: 3)\n 41921: i32 a0 = s0 + 0x20\n 41924: a1 = 0x20\n 41927: ra = 500, jump @0\n      : @573 [@dyn 250] (gas: 54)\n 41934: u8 [a0 + 31] = 0\n 41937: u8 [a0 + 30] = 0\n 41940: u8 [a0 + 29] = 0\n 41943: u8 [a0 + 28] = 0\n 41946: u8 [a0 + 27] = 0\n 41949: u8 [a0 + 26] = 0\n 41952: u8 [a0 + 25] = 0\n 41955: u8 [a0 + 24] = 0\n 41958: u8 [a0 + 23] = 0\n 41961: u8 [a0 + 22] = 0\n 41964: u8 [a0 + 21] = 0\n 41967: u8 [a0 + 20] = 0\n 41970: u8 [a0 + 19] = 0\n 41973: u8 [a0 + 18] = 0\n 41976: u8 [a0 + 17] = 0\n 41979: u8 [a0 + 16] = 0\n 41982: u8 [a0 + 15] = 0\n 41985: u8 [a0 + 14] = 0x73\n 41989: u8 [a0 + 13] = 0x73\n 41993: u8 [a0 + 12] = 0x65\n 41997: u8 [a0 + 11] = 0x72\n 42001: u8 [a0 + 10] = 0x64\n 42005: u8 [a0 + 9] = 0x64\n 42009: u8 [a0 + 8] = 0x61\n 42013: u8 [a0 + 7] = 0x20\n 42017: u8 [a0 + 6] = 0x64\n 42021: u8 [a0 + 5] = 0x69\n 42025: u8 [a0 + 4] = 0x6c\n 42029: u8 [a0 + 3] = 0x61\n 42033: u8 [a0 + 2] = 0x76\n 42037: u8 [a0 + 1] = 0x6e\n 42041: u8 [a0 + 0] = 0x49\n 42044: a1 = u64 [sp]\n 42046: a0 = a1 + 0x60\n 42049: a1 = a0 <u a1\n 42052: a3 = u64 [sp + 0x8]\n 42055: a2 = a3 + a1\n 42058: a3 = a2 <u a3\n 42061: a3 = a1 if a1 == 0\n 42064: a1 = u64 [sp + 0x10]\n 42067: a3 = a3 + a1\n 42070: a1 = a3 <u a1\n 42073: a4 = u64 [sp + 0x18]\n 42076: a1 = a1 + a4\n 42079: a4 = u64 [sp + 0x28]\n 42082: u64 [a4] = a0\n 42084: u64 [a4 + 0x8] = a2\n 42087: u64 [a4 + 0x10] = a3\n 42090: u64 [a4 + 0x18] = a1\n 42093: ra = u64 [sp + 0x58]\n 42096: s0 = u64 [sp + 0x50]\n 42099: s1 = u64 [sp + 0x48]\n 42102: sp = sp + 0x60\n 42105: ret\n      : @574 (gas: 1)\n 42107: trap\n      : @575 (gas: 12)\n 42108: sp = sp + 0xfffffffffffffe80\n 42112: u64 [sp + 0x178] = ra\n 42116: u64 [sp + 0x170] = s0\n 42120: u64 [sp + 0x168] = s1\n 42124: s0 = sp + 0x180\n 42128: sp = sp & 0xffffffffffffffe0\n 42131: a3 = u32 [a0 + 0x10]\n 42134: a2 = u64 [a0]\n 42136: s1 = u64 [a0 + 0x8]\n 42139: a0 = a2 | a3\n 42142: a0 = a0 | s1\n 42145: jump @583 if a0 == 0\n      : @576 (gas: 15)\n 42149: u64 [sp + 0x10] = a3\n 42152: u64 [sp + 0x18] = a2\n 42155: a2 = u64 [a1 + 0x18]\n 42158: a0 = u64 [a1]\n 42160: a3 = u64 [a1 + 0x8]\n 42163: a1 = u64 [a1 + 0x10]\n 42166: u64 [sp + 0x28] = a0\n 42169: a0 = a0 <u 0x9\n 42172: u64 [sp + 0x20] = a3\n 42175: a0 = 0 if a3 != 0\n 42177: u64 [sp + 0x38] = a2\n 42180: u64 [sp + 0x30] = a1\n 42183: a1 = a1 | a2\n 42186: a0 = 0 if a1 != 0\n 42188: jump @588 if a0 == 0\n      : @577 (gas: 3)\n 42192: a1 = 0x20\n 42195: a0 = 0\n 42197: ra = 502, jump @0\n      : @578 [@dyn 251] (gas: 58)\n 42204: a1 = u64 [sp + 0x10]\n 42207: a1 = reverse a1\n 42209: a2 = reverse s1\n 42211: a3 = u64 [sp + 0x18]\n 42214: a3 = reverse a3\n 42216: a4 = a3 >> 0x38\n 42219: u8 [a0 + 0x1f] = a4\n 42222: a4 = a3 >> 0x30\n 42225: u8 [a0 + 0x1e] = a4\n 42228: a4 = a3 >> 0x28\n 42231: u8 [a0 + 0x1d] = a4\n 42234: a4 = a3 >> 0x20\n 42237: u8 [a0 + 0x1c] = a4\n 42240: a4 = a3 >> 0x18\n 42243: u8 [a0 + 0x1b] = a4\n 42246: a4 = a3 >> 0x10\n 42249: u8 [a0 + 0x1a] = a4\n 42252: a4 = a3 >> 0x8\n 42255: u8 [a0 + 0x19] = a4\n 42258: u8 [a0 + 0x18] = a3\n 42261: u8 [a0 + 0x10] = a2\n 42264: u8 [a0 + 11] = 0\n 42267: u8 [a0 + 10] = 0\n 42270: u8 [a0 + 9] = 0\n 42273: u8 [a0 + 7] = 0\n 42276: u8 [a0 + 6] = 0\n 42279: u8 [a0 + 5] = 0\n 42282: u8 [a0 + 4] = 0\n 42285: u8 [a0 + 3] = 0\n 42288: u8 [a0 + 2] = 0\n 42291: u8 [a0 + 1] = 0\n 42294: u8 [a0 + 0] = 0\n 42296: a3 = a2 >> 0x38\n 42299: u8 [a0 + 0x17] = a3\n 42302: a3 = a2 >> 0x30\n 42305: u8 [a0 + 0x16] = a3\n 42308: a3 = a2 >> 0x28\n 42311: u8 [a0 + 0x15] = a3\n 42314: a3 = a2 >> 0x20\n 42317: u8 [a0 + 0x14] = a3\n 42320: a3 = a2 >> 0x18\n 42323: u8 [a0 + 0x13] = a3\n 42326: a3 = a2 >> 0x10\n 42329: u8 [a0 + 0x12] = a3\n 42332: a2 = a2 >> 0x8\n 42335: u8 [a0 + 0x11] = a2\n 42338: u8 [a0 + 0x8] = a1\n 42341: a2 = a1 >> 0x38\n 42344: u8 [a0 + 0xf] = a2\n 42347: a2 = a1 >> 0x30\n 42350: u8 [a0 + 0xe] = a2\n 42353: a2 = a1 >> 0x28\n 42356: u8 [a0 + 0xd] = a2\n 42359: a1 = a1 >> 0x20\n 42362: u8 [a0 + 0xc] = a1\n 42365: a0 = 0x20\n 42368: a1 = 0x20\n 42371: ra = 504, jump @0\n      : @579 [@dyn 252] (gas: 35)\n 42378: u8 [a0 + 31] = 0\n 42381: u8 [a0 + 30] = 0\n 42384: u8 [a0 + 29] = 0\n 42387: u8 [a0 + 28] = 0\n 42390: u8 [a0 + 27] = 0\n 42393: u8 [a0 + 26] = 0\n 42396: u8 [a0 + 25] = 0\n 42399: u8 [a0 + 24] = 0\n 42402: u8 [a0 + 23] = 0\n 42405: u8 [a0 + 22] = 0\n 42408: u8 [a0 + 21] = 0\n 42411: u8 [a0 + 20] = 0\n 42414: u8 [a0 + 19] = 0\n 42417: u8 [a0 + 18] = 0\n 42420: u8 [a0 + 17] = 0\n 42423: u8 [a0 + 16] = 0\n 42426: u8 [a0 + 15] = 0\n 42429: u8 [a0 + 14] = 0\n 42432: u8 [a0 + 13] = 0\n 42435: u8 [a0 + 12] = 0\n 42438: u8 [a0 + 11] = 0\n 42441: u8 [a0 + 10] = 0\n 42444: u8 [a0 + 9] = 0\n 42447: u8 [a0 + 8] = 0\n 42450: u8 [a0 + 7] = 0\n 42453: u8 [a0 + 6] = 0\n 42456: u8 [a0 + 5] = 0\n 42459: u8 [a0 + 4] = 0\n 42462: u8 [a0 + 3] = 0\n 42465: u8 [a0 + 2] = 0\n 42468: u8 [a0 + 1] = 0\n 42471: u8 [a0 + 0] = 0\n 42473: a1 = 0x40\n 42476: a0 = 0\n 42478: ra = 506, jump @0\n      : @580 [@dyn 253] (gas: 50)\n 42485: i32 a0 = a0 + 0\n 42487: i32 a2 = sp + 0x140\n 42491: a1 = 0x40\n 42494: ecalli 5 // 'hash_keccak_256'\n 42496: a0 = u64 [sp + 0x140]\n 42500: a1 = u64 [sp + 0x148]\n 42504: a2 = u64 [sp + 0x158]\n 42508: a3 = u64 [sp + 0x150]\n 42512: a0 = reverse a0\n 42514: a1 = reverse a1\n 42516: a2 = reverse a2\n 42518: a3 = reverse a3\n 42520: a4 = u64 [sp + 0x20]\n 42523: a4 = a4 + a3\n 42526: a5 = u64 [sp + 0x28]\n 42529: a5 = a5 + a2\n 42532: a2 = a5 <u a2\n 42535: s1 = a4 + a2\n 42538: a4 = s1 ^ a3\n 42541: a3 = s1 <u a3\n 42544: a3 = a2 if a4 == 0\n 42547: a2 = u64 [sp + 0x30]\n 42550: a2 = a2 + a1\n 42553: a3 = a3 + a2\n 42556: t0 = a3 <u a2\n 42559: a4 = u64 [sp + 0x38]\n 42562: a0 = a0 + a4\n 42565: a1 = a2 <u a1\n 42568: a0 = a0 + a1\n 42571: a0 = a0 + t0\n 42574: u64 [sp + 0x30] = s1\n 42577: u64 [sp + 0x128] = s1\n 42581: u64 [sp + 0x38] = a5\n 42584: u64 [sp + 0x120] = a5\n 42588: u64 [sp + 0x28] = a3\n 42591: u64 [sp + 0x130] = a3\n 42595: u64 [sp + 0x20] = a0\n 42598: u64 [sp + 0x138] = a0\n 42602: u64 [sp + 344] = 0\n 42606: u64 [sp + 336] = 0\n 42610: u64 [sp + 328] = 0\n 42614: u64 [sp + 320] = 0\n 42618: u32 [sp + 256] = 0x20\n 42623: i32 a1 = sp + 0x120\n 42627: i32 a3 = sp + 0x140\n 42631: i32 a4 = sp + 0x100\n 42635: a2 = 0xffffffffffffffff\n 42638: a0 = 0\n 42640: ecalli 4 // 'get_storage'\n 42642: fallthrough\n      : @581 (gas: 19)\n 42643: s1 = u64 [sp + 0x140]\n 42647: a0 = u64 [sp + 0x158]\n 42651: a1 = u64 [sp + 0x148]\n 42655: a2 = u64 [sp + 0x150]\n 42659: s1 = s1 + 0x1\n 42662: a3 = s1 <u 0x1\n 42665: a3 = a3 + a1\n 42668: a1 = s1 | a3\n 42671: a1 = a1 <u 0x1\n 42674: a4 = a2 + a1\n 42677: a1 = a4 <u a2\n 42680: a0 = a0 + a1\n 42683: u64 [sp + 0x18] = a3\n 42686: u64 [sp + 0x8] = a0\n 42689: a0 = a0 | a3\n 42692: u64 [sp + 0x10] = a4\n 42695: a1 = s1 | a4\n 42698: a0 = a0 | a1\n 42701: jump @595 if a0 == 0\n      : @582 (gas: 46)\n 42705: a0 = u64 [sp + 0x28]\n 42708: u64 [sp + 0x130] = a0\n 42712: a0 = u64 [sp + 0x30]\n 42715: u64 [sp + 0x128] = a0\n 42719: a0 = u64 [sp + 0x38]\n 42722: u64 [sp + 0x120] = a0\n 42726: a0 = u64 [sp + 0x20]\n 42729: u64 [sp + 0x138] = a0\n 42733: u64 [sp + 344] = 0\n 42737: u64 [sp + 336] = 0\n 42741: u64 [sp + 328] = 0\n 42745: u64 [sp + 320] = 0\n 42749: u32 [sp + 256] = 0x20\n 42754: i32 a1 = sp + 0x120\n 42758: i32 a3 = sp + 0x140\n 42762: i32 a4 = sp + 0x100\n 42766: a2 = 0xffffffffffffffff\n 42769: a0 = 0\n 42771: ecalli 4 // 'get_storage'\n 42773: a0 = u64 [sp + 0x20]\n 42776: u64 [sp + 0x138] = a0\n 42780: a0 = u64 [sp + 0x28]\n 42783: u64 [sp + 0x130] = a0\n 42787: a0 = u64 [sp + 0x30]\n 42790: u64 [sp + 0x128] = a0\n 42794: a0 = u64 [sp + 0x38]\n 42797: u64 [sp + 0x120] = a0\n 42801: a0 = u64 [sp + 0x8]\n 42804: u64 [sp + 0x158] = a0\n 42808: a0 = u64 [sp + 0x10]\n 42811: u64 [sp + 0x150] = a0\n 42815: a0 = u64 [sp + 0x18]\n 42818: u64 [sp + 0x148] = a0\n 42822: u64 [sp + 0x140] = s1\n 42826: i32 a1 = sp + 0x120\n 42830: i32 a3 = sp + 0x140\n 42834: a2 = 0xffffffffffffffff\n 42837: a4 = 0x20\n 42840: a0 = 0\n 42842: ecalli 8 // 'set_storage'\n 42844: sp = s0 + 0xfffffffffffffe80\n 42848: ra = u64 [sp + 0x178]\n 42852: s0 = u64 [sp + 0x170]\n 42856: s1 = u64 [sp + 0x168]\n 42860: sp = sp + 0x180\n 42864: ret\n      : @583 (gas: 3)\n 42866: a0 = 0x40\n 42869: a1 = 0x20\n 42872: ra = 508, jump @0\n      : @584 [@dyn 254] (gas: 103)\n 42879: a1 = u8 [a0 + 0x11]\n 42882: a2 = u8 [a0 + 0x10]\n 42885: a3 = u8 [a0 + 0x12]\n 42888: a4 = u8 [a0 + 0x13]\n 42891: a1 = a1 << 0x8\n 42894: a1 = a1 | a2\n 42897: a3 = a3 << 0x10\n 42900: a4 = a4 << 0x18\n 42903: a3 = a3 | a4\n 42906: a1 = a1 | a3\n 42909: a2 = u8 [a0 + 0x15]\n 42912: a3 = u8 [a0 + 0x14]\n 42915: a4 = u8 [a0 + 0x16]\n 42918: a5 = u8 [a0 + 0x17]\n 42921: a2 = a2 << 0x8\n 42924: a2 = a2 | a3\n 42927: a4 = a4 << 0x10\n 42930: a5 = a5 << 0x18\n 42933: a4 = a4 | a5\n 42936: a2 = a2 | a4\n 42939: a2 = a2 << 0x20\n 42942: t0 = a2 | a1\n 42945: a2 = u8 [a0 + 0x1]\n 42948: a3 = u8 [a0]\n 42950: a4 = u8 [a0 + 0x2]\n 42953: a5 = u8 [a0 + 0x3]\n 42956: a2 = a2 << 0x8\n 42959: a2 = a2 | a3\n 42962: a4 = a4 << 0x10\n 42965: a5 = a5 << 0x18\n 42968: a4 = a4 | a5\n 42971: a2 = a2 | a4\n 42974: a3 = u8 [a0 + 0x5]\n 42977: a4 = u8 [a0 + 0x4]\n 42980: a5 = u8 [a0 + 0x6]\n 42983: s1 = u8 [a0 + 0x7]\n 42986: a3 = a3 << 0x8\n 42989: a3 = a3 | a4\n 42992: a5 = a5 << 0x10\n 42995: s1 = s1 << 0x18\n 42998: a5 = a5 | s1\n 43001: a3 = a3 | a5\n 43004: a3 = a3 << 0x20\n 43007: a2 = a2 | a3\n 43010: a3 = u8 [a0 + 0x19]\n 43013: a4 = u8 [a0 + 0x18]\n 43016: a5 = u8 [a0 + 0x1a]\n 43019: s1 = u8 [a0 + 0x1b]\n 43022: a3 = a3 << 0x8\n 43025: a3 = a3 | a4\n 43028: a5 = a5 << 0x10\n 43031: s1 = s1 << 0x18\n 43034: a5 = a5 | s1\n 43037: a3 = a3 | a5\n 43040: a4 = u8 [a0 + 0x1d]\n 43043: a5 = u8 [a0 + 0x1c]\n 43046: s1 = u8 [a0 + 0x1e]\n 43049: a1 = u8 [a0 + 0x1f]\n 43052: a4 = a4 << 0x8\n 43055: a4 = a4 | a5\n 43058: s1 = s1 << 0x10\n 43061: a1 = a1 << 0x18\n 43064: a1 = a1 | s1\n 43067: a1 = a1 | a4\n 43070: a1 = a1 << 0x20\n 43073: a3 = a3 | a1\n 43076: a1 = u8 [a0 + 0x9]\n 43079: a4 = u8 [a0 + 0x8]\n 43082: a5 = u8 [a0 + 0xa]\n 43085: s1 = u8 [a0 + 0xb]\n 43088: a1 = a1 << 0x8\n 43091: a1 = a1 | a4\n 43094: a5 = a5 << 0x10\n 43097: s1 = s1 << 0x18\n 43100: a5 = a5 | s1\n 43103: a1 = a1 | a5\n 43106: a4 = u8 [a0 + 0xd]\n 43109: a5 = u8 [a0 + 0xc]\n 43112: s1 = u8 [a0 + 0xe]\n 43115: a0 = u8 [a0 + 0xf]\n 43118: a4 = a4 << 0x8\n 43121: a4 = a4 | a5\n 43124: s1 = s1 << 0x10\n 43127: a0 = a0 << 0x18\n 43130: a0 = a0 | s1\n 43133: a0 = a0 | a4\n 43136: a0 = a0 << 0x20\n 43139: a0 = a0 | a1\n 43142: s1 = reverse a0\n 43144: a1 = reverse a3\n 43146: a2 = reverse a2\n 43148: a0 = reverse t0\n 43150: u64 [sp + 0x38] = a0\n 43153: u64 [sp + 0x30] = a2\n 43156: a0 = a0 | a2\n 43159: a2 = a1\n 43161: a1 = a1 | s1\n 43164: a1 = a1 | a0\n 43167: a1 = a1 >> 0x20\n 43170: a0 = a0 | s1\n 43173: a0 = a0 << 0x20\n 43176: a0 = a0 | a1\n 43179: jump @594 if a0 != 0\n      : @585 (gas: 5)\n 43183: u64 [sp + 0x28] = a2\n 43186: i32 a0 = a2 + 0\n 43188: a1 = 0x20\n 43191: u64 [sp + 0x20] = a0\n 43194: ra = 510, jump @0\n      : @586 [@dyn 255] (gas: 50)\n 43201: u8 [a0 + 31] = 0\n 43204: u8 [a0 + 30] = 0\n 43207: u8 [a0 + 29] = 0\n 43210: u8 [a0 + 28] = 0\n 43213: u8 [a0 + 27] = 0\n 43216: u8 [a0 + 26] = 0\n 43219: u8 [a0 + 25] = 0\n 43222: u8 [a0 + 24] = 0\n 43225: u8 [a0 + 23] = 0\n 43228: u8 [a0 + 22] = 0\n 43231: u8 [a0 + 21] = 0\n 43234: u8 [a0 + 20] = 0\n 43237: u8 [a0 + 19] = 0\n 43240: u8 [a0 + 18] = 0\n 43243: u8 [a0 + 17] = 0\n 43246: u8 [a0 + 16] = 0\n 43249: u8 [a0 + 15] = 0\n 43252: u8 [a0 + 14] = 0\n 43255: u8 [a0 + 13] = 0\n 43258: u8 [a0 + 12] = 0\n 43261: u8 [a0 + 11] = 0\n 43264: u8 [a0 + 10] = 0\n 43267: u8 [a0 + 9] = 0\n 43270: u8 [a0 + 8] = 0\n 43273: u8 [a0 + 7] = 0\n 43276: u8 [a0 + 6] = 0\n 43279: u8 [a0 + 5] = 0\n 43282: u8 [a0 + 4] = 0\n 43285: u8 [a0 + 3] = 0xa0\n 43290: u8 [a0 + 2] = 0x79\n 43294: u8 [a0 + 1] = 0xc3\n 43299: u8 [a0 + 0] = 0x8\n 43302: a1 = u64 [sp + 0x28]\n 43305: a0 = a1 + 0x4\n 43308: a1 = a0 <u a1\n 43311: a3 = u64 [sp + 0x38]\n 43314: a2 = a3 + a1\n 43317: a3 = a2 <u a3\n 43320: a3 = a1 if a1 == 0\n 43323: a3 = a3 + s1\n 43326: a1 = a3 <u s1\n 43329: a4 = u64 [sp + 0x30]\n 43332: a4 = a4 + a1\n 43335: u64 [sp + 0x48] = a2\n 43338: u64 [sp + 0x40] = a0\n 43341: u64 [sp + 0x50] = a3\n 43344: a0 = sp + 0x60\n 43347: a1 = sp + 0x40\n 43350: u64 [sp + 0x58] = a4\n 43353: ra = 512, jump @567\n      : @587 [@dyn 256] (gas: 5)\n 43359: a0 = u64 [sp + 0x68]\n 43362: t0 = u64 [sp + 0x78]\n 43365: t1 = u64 [sp + 0x60]\n 43368: a3 = u64 [sp + 0x70]\n 43371: jump @593\n      : @588 (gas: 3)\n 43374: a0 = 0x40\n 43377: a1 = 0x20\n 43380: ra = 514, jump @0\n      : @589 [@dyn 257] (gas: 103)\n 43387: a1 = u8 [a0 + 0x11]\n 43390: a2 = u8 [a0 + 0x10]\n 43393: a3 = u8 [a0 + 0x12]\n 43396: a4 = u8 [a0 + 0x13]\n 43399: a1 = a1 << 0x8\n 43402: a1 = a1 | a2\n 43405: a3 = a3 << 0x10\n 43408: a4 = a4 << 0x18\n 43411: a3 = a3 | a4\n 43414: a1 = a1 | a3\n 43417: a2 = u8 [a0 + 0x15]\n 43420: a3 = u8 [a0 + 0x14]\n 43423: a4 = u8 [a0 + 0x16]\n 43426: a5 = u8 [a0 + 0x17]\n 43429: a2 = a2 << 0x8\n 43432: a2 = a2 | a3\n 43435: a4 = a4 << 0x10\n 43438: a5 = a5 << 0x18\n 43441: a4 = a4 | a5\n 43444: a2 = a2 | a4\n 43447: a2 = a2 << 0x20\n 43450: t0 = a2 | a1\n 43453: a2 = u8 [a0 + 0x1]\n 43456: a3 = u8 [a0]\n 43458: a4 = u8 [a0 + 0x2]\n 43461: a5 = u8 [a0 + 0x3]\n 43464: a2 = a2 << 0x8\n 43467: a2 = a2 | a3\n 43470: a4 = a4 << 0x10\n 43473: a5 = a5 << 0x18\n 43476: a4 = a4 | a5\n 43479: a2 = a2 | a4\n 43482: a3 = u8 [a0 + 0x5]\n 43485: a4 = u8 [a0 + 0x4]\n 43488: a5 = u8 [a0 + 0x6]\n 43491: s1 = u8 [a0 + 0x7]\n 43494: a3 = a3 << 0x8\n 43497: a3 = a3 | a4\n 43500: a5 = a5 << 0x10\n 43503: s1 = s1 << 0x18\n 43506: a5 = a5 | s1\n 43509: a3 = a3 | a5\n 43512: a3 = a3 << 0x20\n 43515: a2 = a2 | a3\n 43518: a3 = u8 [a0 + 0x19]\n 43521: a4 = u8 [a0 + 0x18]\n 43524: a5 = u8 [a0 + 0x1a]\n 43527: s1 = u8 [a0 + 0x1b]\n 43530: a3 = a3 << 0x8\n 43533: a3 = a3 | a4\n 43536: a5 = a5 << 0x10\n 43539: s1 = s1 << 0x18\n 43542: a5 = a5 | s1\n 43545: a3 = a3 | a5\n 43548: a4 = u8 [a0 + 0x1d]\n 43551: a5 = u8 [a0 + 0x1c]\n 43554: s1 = u8 [a0 + 0x1e]\n 43557: a1 = u8 [a0 + 0x1f]\n 43560: a4 = a4 << 0x8\n 43563: a4 = a4 | a5\n 43566: s1 = s1 << 0x10\n 43569: a1 = a1 << 0x18\n 43572: a1 = a1 | s1\n 43575: a1 = a1 | a4\n 43578: a1 = a1 << 0x20\n 43581: a3 = a3 | a1\n 43584: a1 = u8 [a0 + 0x9]\n 43587: a4 = u8 [a0 + 0x8]\n 43590: a5 = u8 [a0 + 0xa]\n 43593: s1 = u8 [a0 + 0xb]\n 43596: a1 = a1 << 0x8\n 43599: a1 = a1 | a4\n 43602: a5 = a5 << 0x10\n 43605: s1 = s1 << 0x18\n 43608: a5 = a5 | s1\n 43611: a1 = a1 | a5\n 43614: a4 = u8 [a0 + 0xd]\n 43617: a5 = u8 [a0 + 0xc]\n 43620: s1 = u8 [a0 + 0xe]\n 43623: a0 = u8 [a0 + 0xf]\n 43626: a4 = a4 << 0x8\n 43629: a4 = a4 | a5\n 43632: s1 = s1 << 0x10\n 43635: a0 = a0 << 0x18\n 43638: a0 = a0 | s1\n 43641: a0 = a0 | a4\n 43644: a0 = a0 << 0x20\n 43647: a0 = a0 | a1\n 43650: s1 = reverse a0\n 43652: a1 = reverse a3\n 43654: a2 = reverse a2\n 43656: a0 = reverse t0\n 43658: u64 [sp + 0x38] = a0\n 43661: u64 [sp + 0x30] = a2\n 43664: a0 = a0 | a2\n 43667: a2 = a1\n 43669: a1 = a1 | s1\n 43672: a1 = a1 | a0\n 43675: a1 = a1 >> 0x20\n 43678: a0 = a0 | s1\n 43681: a0 = a0 << 0x20\n 43684: a0 = a0 | a1\n 43687: jump @594 if a0 != 0\n      : @590 (gas: 5)\n 43691: u64 [sp + 0x28] = a2\n 43694: i32 a0 = a2 + 0\n 43696: a1 = 0x20\n 43699: u64 [sp + 0x20] = a0\n 43702: ra = 516, jump @0\n      : @591 [@dyn 258] (gas: 50)\n 43709: u8 [a0 + 31] = 0\n 43712: u8 [a0 + 30] = 0\n 43715: u8 [a0 + 29] = 0\n 43718: u8 [a0 + 28] = 0\n 43721: u8 [a0 + 27] = 0\n 43724: u8 [a0 + 26] = 0\n 43727: u8 [a0 + 25] = 0\n 43730: u8 [a0 + 24] = 0\n 43733: u8 [a0 + 23] = 0\n 43736: u8 [a0 + 22] = 0\n 43739: u8 [a0 + 21] = 0\n 43742: u8 [a0 + 20] = 0\n 43745: u8 [a0 + 19] = 0\n 43748: u8 [a0 + 18] = 0\n 43751: u8 [a0 + 17] = 0\n 43754: u8 [a0 + 16] = 0\n 43757: u8 [a0 + 15] = 0\n 43760: u8 [a0 + 14] = 0\n 43763: u8 [a0 + 13] = 0\n 43766: u8 [a0 + 12] = 0\n 43769: u8 [a0 + 11] = 0\n 43772: u8 [a0 + 10] = 0\n 43775: u8 [a0 + 9] = 0\n 43778: u8 [a0 + 8] = 0\n 43781: u8 [a0 + 7] = 0\n 43784: u8 [a0 + 6] = 0\n 43787: u8 [a0 + 5] = 0\n 43790: u8 [a0 + 4] = 0\n 43793: u8 [a0 + 3] = 0xa0\n 43798: u8 [a0 + 2] = 0x79\n 43802: u8 [a0 + 1] = 0xc3\n 43807: u8 [a0 + 0] = 0x8\n 43810: a1 = u64 [sp + 0x28]\n 43813: a0 = a1 + 0x4\n 43816: a1 = a0 <u a1\n 43819: a3 = u64 [sp + 0x38]\n 43822: a2 = a3 + a1\n 43825: a3 = a2 <u a3\n 43828: a3 = a1 if a1 == 0\n 43831: a3 = a3 + s1\n 43834: a1 = a3 <u s1\n 43837: a4 = u64 [sp + 0x30]\n 43840: a4 = a4 + a1\n 43843: u64 [sp + 0x88] = a2\n 43847: u64 [sp + 0x80] = a0\n 43851: u64 [sp + 0x90] = a3\n 43855: a0 = sp + 0xa0\n 43859: a1 = sp + 0x80\n 43863: u64 [sp + 0x98] = a4\n 43867: ra = 518, jump @311\n      : @592 [@dyn 259] (gas: 5)\n 43873: a0 = u64 [sp + 0xa8]\n 43877: t0 = u64 [sp + 0xb8]\n 43881: t1 = u64 [sp + 0xa0]\n 43885: a3 = u64 [sp + 0xb0]\n 43889: fallthrough\n      : @593 (gas: 26)\n 43890: a1 = u64 [sp + 0x38]\n 43893: a4 = a0 ^ a1\n 43896: a5 = a0 <u a1\n 43899: t2 = a1\n 43901: a2 = u64 [sp + 0x28]\n 43904: a1 = t1 <u a2\n 43907: a5 = a1 if a4 == 0\n 43910: a4 = a3 - s1\n 43913: a3 = a3 <u s1\n 43916: s1 = u64 [sp + 0x30]\n 43919: s1 = t0 - s1\n 43922: s1 = s1 - a3\n 43925: a3 = a4 <u a5\n 43928: s1 = s1 - a3\n 43931: a4 = a4 - a5\n 43934: a0 = a0 - t2\n 43937: a1 = a0 - a1\n 43940: a0 = t1 - a2\n 43943: a1 = a1 | s1\n 43946: a2 = a0 | a4\n 43949: a2 = a2 | a1\n 43952: a1 = a1 | a4\n 43955: a2 = a2 >> 0x20\n 43958: a1 = a1 << 0x20\n 43961: a1 = a1 | a2\n 43964: jump @599 if a1 == 0\n      : @594 (gas: 1)\n 43967: trap\n      : @595 (gas: 8)\n 43968: u64 [sp + 240] = 0\n 43972: u64 [sp + 232] = 0\n 43976: u64 [sp + 224] = 0\n 43980: a0 = 0x4e487b7100000000\n 43990: a1 = sp + 0xe0\n 43994: u64 [sp + 0xf8] = a0\n 43998: a0 = 0\n 44000: ra = 520, jump @8\n      : @596 [@dyn 260] (gas: 7)\n 44007: u64 [sp + 216] = 0\n 44011: u64 [sp + 208] = 0\n 44015: u64 [sp + 192] = 0x11\n 44020: a0 = 0x4\n 44023: a1 = sp + 0xc0\n 44027: u64 [sp + 200] = 0\n 44031: ra = 522, jump @8\n      : @597 [@dyn 261] (gas: 3)\n 44038: a1 = 0x24\n 44041: a0 = 0\n 44043: ra = 524, jump @0\n      : @598 [@dyn 262] (gas: 5)\n 44050: i32 a1 = a0 + 0\n 44052: a0 = 0x1\n 44055: a2 = 0x24\n 44058: ecalli 6 // 'seal_return'\n 44060: fallthrough\n      : @599 (gas: 4)\n 44061: i32 s1 = a0 + 0\n 44063: a0 = u64 [sp + 0x20]\n 44066: a1 = s1\n 44068: ra = 526, jump @0\n      : @600 [@dyn 263] (gas: 7)\n 44075: i32 a1 = a0 + 0\n 44077: a0 = 0x1\n 44080: a2 = s1\n 44082: ecalli 6 // 'seal_return'\n 44084: a0 = 0\n 44086: ra = 0x210\n 44090: jump @10\n      : @601 [export #0: 'call'] (gas: 2)\n 44094: a0 = 0\n 44096: ra = 528, jump @10\n      : @602 [@dyn 264] [export #1: 'deploy'] (gas: 2)\n 44103: a0 = 0x1\n 44106: ra = 530, jump @10\n      : @603 [@dyn 265] (gas: 27)\n 44113: sp = sp + 0xffffffffffffff80\n 44116: u64 [sp + 0x78] = ra\n 44119: u64 [sp + 0x70] = s0\n 44122: u64 [sp + 0x68] = s1\n 44125: s0 = sp + 0x80\n 44129: sp = sp & 0xfffffffffffffff0\n 44132: t0 = u64 [a1]\n 44134: t1 = u64 [a1 + 0x8]\n 44137: t2 = u64 [a1 + 0x10]\n 44140: a1 = u64 [a1 + 0x18]\n 44143: a3 = u64 [a2]\n 44145: a4 = u64 [a2 + 0x8]\n 44148: a5 = u64 [a2 + 0x10]\n 44151: a2 = u64 [a2 + 0x18]\n 44154: s1 = a0\n 44156: u64 [sp + 0x18] = a2\n 44159: u64 [sp + 0x10] = a5\n 44162: u64 [sp + 0x8] = a4\n 44165: u64 [sp] = a3\n 44167: u64 [sp + 0x38] = a1\n 44170: u64 [sp + 0x30] = t2\n 44173: u64 [sp + 0x28] = t1\n 44176: a0 = sp + 0x40\n 44179: a1 = sp + 0x20\n 44182: a2 = sp\n 44184: u64 [sp + 0x20] = t0\n 44187: ra = 532, jump @130\n      : @604 [@dyn 266] (gas: 14)\n 44194: a0 = u64 [sp + 0x50]\n 44197: a1 = u64 [sp + 0x58]\n 44200: a2 = u64 [sp + 0x40]\n 44203: a3 = u64 [sp + 0x48]\n 44206: u64 [s1 + 0x10] = a0\n 44209: u64 [s1 + 0x18] = a1\n 44212: u64 [s1] = a2\n 44214: u64 [s1 + 0x8] = a3\n 44217: sp = s0 + 0xffffffffffffff80\n 44220: ra = u64 [sp + 0x78]\n 44223: s0 = u64 [sp + 0x70]\n 44226: s1 = u64 [sp + 0x68]\n 44229: sp = sp + 0x80\n 44233: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"acceptListing(uint256)": "b0eceb7e",
							"addCard(address,uint256)": "f9c775ea",
							"cardInventory(address,uint256)": "50580072",
							"createListing(uint256,uint256)": "a79123a9",
							"getAllListings()": "ae73ccec",
							"listings(uint256)": "de74e57b",
							"transferCards(address,uint256[9])": "48d1c5b2"
						}
					},
					"irOptimized": "/// @use-src 0:\"TradingGame.sol\"\nobject \"CardTrading_274\" {\n    code {\n        {\n            /// @src 0:60:2841  \"contract CardTrading {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"CardTrading_274_deployed\"), datasize(\"CardTrading_274_deployed\"))\n            return(_1, datasize(\"CardTrading_274_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 0:\"TradingGame.sol\"\n    object \"CardTrading_274_deployed\" {\n        code {\n            {\n                /// @src 0:60:2841  \"contract CardTrading {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x48d1c5b2 { external_fun_transferCards() }\n                    case 0x50580072 { external_fun_cardInventory() }\n                    case 0xa79123a9 { external_fun_createListing() }\n                    case 0xae73ccec { external_fun_getAllListings() }\n                    case 0xb0eceb7e { external_fun_acceptListing() }\n                    case 0xde74e57b { external_fun_listings() }\n                    case 0xf9c775ea { external_fun_addCard() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n            { revert(0, 0) }\n            function abi_decode_array_uint256_calldata(offset, end) -> arrayPos\n            {\n                arrayPos := offset\n                if gt(add(arrayPos, mul(0x09, 0x20)), end)\n                {\n                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                }\n            }\n            function abi_decode_addresst_array_uint256_calldata(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 320)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_array_uint256_calldata(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_transferCards()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_array_uint256_calldata(4, calldatasize())\n                fun_transferCards(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_addresst_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_array_uint256_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_uint256_storage(value) -> length\n            { length := 0x09 }\n            function array_dataslot_array_uint256_storage(ptr) -> data\n            { data := ptr }\n            function storage_array_index_access_uint(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_uint256_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_uint256_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 7 @src 0:155:203  \"mapping(address => uint[9]) public cardInventory\"\n            function getter_fun_cardInventory(key, key_1) -> ret\n            {\n                let slot := 0\n                let offset := 0\n                slot := mapping_index_access_mapping_address_array_uint256_storage_of_address(slot, key)\n                if iszero(lt(key_1, array_length_array_uint256_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_uint(slot, key_1)\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:60:2841  \"contract CardTrading {...\"\n            function abi_encode_uint256_to_uint256_fromStack(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256_fromStack(value0, add(headStart, 0))\n            }\n            function external_fun_cardInventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                let ret := getter_fun_cardInventory(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_uint256t_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function external_fun_createListing()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_uint256t_uint256(4, calldatasize())\n                fun_createListing(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function array_length_array_struct_Listing_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_struct_Listing_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_struct_Listing_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_address_to_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_struct_Listing(value, pos)\n            {\n                let memberValue0 := mload(add(value, 0x00))\n                abi_encode_address_to_address(memberValue0, add(pos, 0x00))\n                let memberValue0_1 := mload(add(value, 0x20))\n                abi_encode_uint256_to_uint256(memberValue0_1, add(pos, 0x20))\n                let memberValue0_2 := mload(add(value, 0x40))\n                abi_encode_uint256_to_uint256(memberValue0_2, add(pos, 0x40))\n                let memberValue0_3 := mload(add(value, 0x60))\n                abi_encode_bool(memberValue0_3, add(pos, 0x60))\n            }\n            function abi_encodeUpdatedPos_struct_Listing(value0, pos) -> updatedPos\n            {\n                abi_encode_struct_Listing(value0, pos)\n                updatedPos := add(pos, 0x80)\n            }\n            function array_nextElement_array_struct_Listing_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_struct_Listing_memory_ptr_dyn_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_array_struct_Listing_dyn(value)\n                pos := array_storeLengthForEncoding_array_struct_Listing_dyn(pos, length)\n                let baseRef := array_dataslot_array_struct_Listing_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_struct_Listing(elementValue0, pos)\n                    srcPtr := array_nextElement_array_struct_Listing_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encode_array_struct_Listing_dyn(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_struct_Listing_memory_ptr_dyn_memory_ptr(value0, tail)\n            }\n            function external_fun_getAllListings()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_getAllListings()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_struct_Listing_dyn(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function external_fun_acceptListing()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_acceptListing(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_array_struct_Listing_storage_dyn(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_struct_Listing_storage_dyn(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_struct_Listing__dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Listing_storage_dyn(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Listing_storage_dyn(array)\n                slot := add(dataArea, mul(index, 4))\n                offset := 0\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            /// @ast-id 20 @src 0:418:443  \"Listing[] public listings\"\n            function getter_fun_listings(key) -> ret, ret_1, ret_2, ret_3\n            {\n                let slot := 1\n                let offset := 0\n                if iszero(lt(key, array_length_array_struct_Listing_storage_dyn(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_struct_Listing__dyn(slot, key)\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                ret_2 := read_from_storage_split_offset_uint256(add(slot, 2))\n                ret_3 := read_from_storage_split_offset_bool(add(slot, 3))\n            }\n            /// @src 0:60:2841  \"contract CardTrading {...\"\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_address_uint256_uint256_bool(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256_fromStack(value1, add(headStart, 32))\n                abi_encode_uint256_to_uint256_fromStack(value2, add(headStart, 64))\n                abi_encode_bool_to_bool(value3, add(headStart, 96))\n            }\n            function external_fun_listings()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3 := getter_fun_listings(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint256_uint256_bool(memPos, ret, ret_1, ret_2, ret_3)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_addCard()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                fun_addCard(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_t_rational_by(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid recipient\")\n            }\n            function abi_encode_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 17)\n                store_literal_in_memory_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_a666(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d(tail)\n            }\n            function require_helper_stringliteral_a666(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_a666(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_rational_0_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function increment_wrapping_uint256(value) -> ret\n            {\n                ret := cleanup_uint256(add(value, 1))\n            }\n            function cleanup_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by_1(value)))\n            }\n            function calldata_array_index_access_uint256_calldata(base_ref, index) -> addr\n            {\n                if iszero(lt(index, 0x09)) { panic_error_0x32() }\n                addr := add(base_ref, mul(index, 32))\n            }\n            function read_from_calldatat_uint256(ptr) -> returnValue\n            {\n                let value := calldataload(ptr)\n                validator_revert_uint256(value)\n                returnValue := value\n            }\n            function store_literal_in_memory_6082b5416ef755c8ab4f27a5cfb1139cbe773e8555361d10c249df095e24d862(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not enough cards to send\")\n            }\n            function abi_encode_stringliteral_6082b5416ef755c8ab4f27a5cfb1139cbe773e8555361d10c249df095e24d862(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 24)\n                store_literal_in_memory_6082b5416ef755c8ab4f27a5cfb1139cbe773e8555361d10c249df095e24d862(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_6082(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_6082b5416ef755c8ab4f27a5cfb1139cbe773e8555361d10c249df095e24d862(tail)\n            }\n            function require_helper_stringliteral_6082(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_6082(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, not(0))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_uint256_to_uint256(slot, offset, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @ast-id 125 @src 0:834:1315  \"function transferCards(address to, uint[9] calldata cardsToSend) external {...\"\n            function fun_transferCards(var_to, var_cardsToSend_offset)\n            {\n                /// @src 0:927:929  \"to\"\n                let _1 := var_to\n                let expr := _1\n                /// @src 0:941:942  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:933:943  \"address(0)\"\n                let expr_2 := convert_rational_by_to_address(expr_1)\n                /// @src 0:927:943  \"to != address(0)\"\n                let expr_3 := iszero(eq(cleanup_address(expr), cleanup_address(expr_2)))\n                /// @src 0:919:965  \"require(to != address(0), \\\"Invalid recipient\\\")\"\n                require_helper_stringliteral_a666(expr_3)\n                /// @src 0:992:993  \"0\"\n                let expr_4 := 0x00\n                /// @src 0:983:993  \"uint i = 0\"\n                let var_i := convert_rational_0_by_1_to_uint256(expr_4)\n                /// @src 0:978:1308  \"for (uint i = 0; i < 9; i++) {...\"\n                for { }\n                /** @src 0:983:993  \"uint i = 0\" */ 1\n                {\n                    /// @src 0:1002:1005  \"i++\"\n                    let _2 := var_i\n                    let _3 := increment_wrapping_uint256(_2)\n                    var_i := _3\n                }\n                {\n                    /// @src 0:995:996  \"i\"\n                    let _4 := var_i\n                    let expr_5 := _4\n                    /// @src 0:999:1000  \"9\"\n                    let expr_6 := 0x09\n                    /// @src 0:995:1000  \"i < 9\"\n                    let expr_7 := lt(cleanup_uint256(expr_5), convert_rational_by_to_uint256(expr_6))\n                    if iszero(expr_7) { break }\n                    /// @src 0:1036:1047  \"cardsToSend\"\n                    let _offset := var_cardsToSend_offset\n                    let expr_offset := _offset\n                    /// @src 0:1048:1049  \"i\"\n                    let _5 := var_i\n                    let expr_8 := _5\n                    /// @src 0:1036:1050  \"cardsToSend[i]\"\n                    let expr_9 := read_from_calldatat_uint256(calldata_array_index_access_uint256_calldata(expr_offset, expr_8))\n                    /// @src 0:1022:1050  \"uint amount = cardsToSend[i]\"\n                    let var_amount := expr_9\n                    /// @src 0:1069:1075  \"amount\"\n                    let _6 := var_amount\n                    let expr_10 := _6\n                    /// @src 0:1078:1079  \"0\"\n                    let expr_11 := 0x00\n                    /// @src 0:1069:1079  \"amount > 0\"\n                    let expr_12 := gt(cleanup_uint256(expr_10), convert_rational_0_by_1_to_uint256(expr_11))\n                    /// @src 0:1065:1297  \"if (amount > 0) {...\"\n                    if expr_12\n                    {\n                        /// @src 0:1108:1121  \"cardInventory\"\n                        let _8_slot := 0x00\n                        let expr_92_slot := _8_slot\n                        /// @src 0:1122:1132  \"msg.sender\"\n                        let expr_13 := caller()\n                        /// @src 0:1108:1133  \"cardInventory[msg.sender]\"\n                        let _7 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_92_slot, expr_13)\n                        let _10_slot := _7\n                        let expr_95_slot := _10_slot\n                        /// @src 0:1134:1135  \"i\"\n                        let _8 := var_i\n                        let expr_14 := _8\n                        /// @src 0:1108:1136  \"cardInventory[msg.sender][i]\"\n                        let _9, _10 := storage_array_index_access_uint(expr_95_slot, expr_14)\n                        let _11 := read_from_storage_split_dynamic_uint256(_9, _10)\n                        let expr_15 := _11\n                        /// @src 0:1140:1146  \"amount\"\n                        let _12 := var_amount\n                        let expr_16 := _12\n                        /// @src 0:1108:1146  \"cardInventory[msg.sender][i] >= amount\"\n                        let expr_17 := iszero(lt(cleanup_uint256(expr_15), cleanup_uint256(expr_16)))\n                        /// @src 0:1100:1175  \"require(cardInventory[msg.sender][i] >= amount, \\\"Not enough cards to send\\\")\"\n                        require_helper_stringliteral_6082(expr_17)\n                        /// @src 0:1226:1232  \"amount\"\n                        let _13 := var_amount\n                        let expr_18 := _13\n                        /// @src 0:1194:1207  \"cardInventory\"\n                        let _17_slot := 0x00\n                        let expr_103_slot := _17_slot\n                        /// @src 0:1208:1218  \"msg.sender\"\n                        let expr_19 := caller()\n                        /// @src 0:1194:1219  \"cardInventory[msg.sender]\"\n                        let _14 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_103_slot, expr_19)\n                        let _19_slot := _14\n                        let expr_107_slot := _19_slot\n                        /// @src 0:1220:1221  \"i\"\n                        let _15 := var_i\n                        let expr_20 := _15\n                        /// @src 0:1194:1222  \"cardInventory[msg.sender][i]\"\n                        let _16, _17 := storage_array_index_access_uint(expr_107_slot, expr_20)\n                        /// @src 0:1194:1232  \"cardInventory[msg.sender][i] -= amount\"\n                        let _18 := read_from_storage_split_dynamic_uint256(_16, _17)\n                        let expr_21 := checked_sub_uint256(_18, expr_18)\n                        update_storage_value_uint256_to_uint256(_16, _17, expr_21)\n                        /// @src 0:1275:1281  \"amount\"\n                        let _19 := var_amount\n                        let expr_22 := _19\n                        /// @src 0:1251:1264  \"cardInventory\"\n                        let _25_slot := 0x00\n                        let expr_112_slot := _25_slot\n                        /// @src 0:1265:1267  \"to\"\n                        let _20 := var_to\n                        let expr_23 := _20\n                        /// @src 0:1251:1268  \"cardInventory[to]\"\n                        let _21 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_112_slot, expr_23)\n                        let _28_slot := _21\n                        let expr_115_slot := _28_slot\n                        /// @src 0:1269:1270  \"i\"\n                        let _22 := var_i\n                        let expr_24 := _22\n                        /// @src 0:1251:1271  \"cardInventory[to][i]\"\n                        let _23, _24 := storage_array_index_access_uint(expr_115_slot, expr_24)\n                        /// @src 0:1251:1281  \"cardInventory[to][i] += amount\"\n                        let _25 := read_from_storage_split_dynamic_uint256(_23, _24)\n                        let expr_25 := checked_add_uint256(_25, expr_22)\n                        update_storage_value_uint256_to_uint256(_23, _24, expr_25)\n                    }\n                }\n            }\n            /// @src 0:60:2841  \"contract CardTrading {...\"\n            function store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid card ID\")\n            }\n            function abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_8239(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(tail)\n            }\n            function require_helper_stringliteral_8239(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8239(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function store_literal_in_memory_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0(memPtr)\n            {\n                mstore(add(memPtr, 0), \"You don't have the offered card\")\n            }\n            function abi_encode_stringliteral_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 31)\n                store_literal_in_memory_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_c83f(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0(tail)\n            }\n            function require_helper_stringliteral_c83f(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_c83f(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_array_array_struct_Listing_storage_dyn_storage_to_array_struct_Listing__dyn_ptr(value) -> converted\n            { converted := value }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function allocate_memory_struct_struct_Listing_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function write_to_memory_uint256(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint256(value))\n            }\n            function write_to_memory_bool(memPtr, value)\n            {\n                mstore(memPtr, cleanup_bool(value))\n            }\n            function array_dataslot_array_struct_Listing_storage_dyn_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_struct_Listing_storage_dyn_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_struct_Listing__dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Listing_storage_dyn_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Listing_storage_dyn_ptr(array)\n                slot := add(dataArea, mul(index, 4))\n                offset := 0\n            }\n            function panic_error_0x00()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x00)\n                revert(0, 0x24)\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_20_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function read_from_memoryt_uint256(ptr) -> returnValue\n            {\n                let value := cleanup_uint256(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function read_from_memoryt_bool(ptr) -> returnValue\n            {\n                let value := cleanup_bool(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function copy_struct_to_storage_from_struct_Listing_to_struct_Listing(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 2)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_uint256(memberSrcPtr_2)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 3)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_bool(memberSrcPtr_3)\n                update_storage_value_offset_bool_to_bool(memberSlot_3, memberValue_3)\n            }\n            function update_storage_value_struct_Listing_to_struct_Listing(slot, offset, value)\n            {\n                if offset { panic_error_0x00() }\n                copy_struct_to_storage_from_struct_Listing_to_struct_Listing(slot, value)\n            }\n            function array_push_from_struct_Listing_to_array_struct_Listing_storage_dyn_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_struct_Listing__dyn_ptr(array, oldLen)\n                update_storage_value_struct_Listing_to_struct_Listing(slot, offset, value0)\n            }\n            /// @ast-id 168 @src 0:1390:1831  \"function createListing(uint offerCardId, uint requestCardId) external {...\"\n            function fun_createListing(var_offerCardId, var_requestCardId)\n            {\n                /// @src 0:1479:1490  \"offerCardId\"\n                let _1 := var_offerCardId\n                let expr := _1\n                /// @src 0:1493:1494  \"9\"\n                let expr_1 := 0x09\n                /// @src 0:1479:1494  \"offerCardId < 9\"\n                let expr_2 := lt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:1479:1515  \"offerCardId < 9 && requestCardId < 9\"\n                let expr_3 := expr_2\n                if expr_3\n                {\n                    /// @src 0:1498:1511  \"requestCardId\"\n                    let _2 := var_requestCardId\n                    let expr_4 := _2\n                    /// @src 0:1514:1515  \"9\"\n                    let expr_5 := 0x09\n                    /// @src 0:1498:1515  \"requestCardId < 9\"\n                    let expr_6 := lt(cleanup_uint256(expr_4), convert_rational_by_to_uint256(expr_5))\n                    /// @src 0:1479:1515  \"offerCardId < 9 && requestCardId < 9\"\n                    expr_3 := expr_6\n                }\n                /// @src 0:1471:1535  \"require(offerCardId < 9 && requestCardId < 9, \\\"Invalid card ID\\\")\"\n                require_helper_stringliteral_8239(expr_3)\n                /// @src 0:1554:1567  \"cardInventory\"\n                let _35_slot := 0x00\n                let expr_144_slot := _35_slot\n                /// @src 0:1568:1578  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 0:1554:1579  \"cardInventory[msg.sender]\"\n                let _3 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_144_slot, expr_7)\n                let _37_slot := _3\n                let expr_147_slot := _37_slot\n                /// @src 0:1580:1591  \"offerCardId\"\n                let _4 := var_offerCardId\n                let expr_8 := _4\n                /// @src 0:1554:1592  \"cardInventory[msg.sender][offerCardId]\"\n                let _5, _6 := storage_array_index_access_uint(expr_147_slot, expr_8)\n                let _7 := read_from_storage_split_dynamic_uint256(_5, _6)\n                let expr_9 := _7\n                /// @src 0:1596:1597  \"1\"\n                let expr_10 := 0x01\n                /// @src 0:1554:1597  \"cardInventory[msg.sender][offerCardId] >= 1\"\n                let expr_11 := iszero(lt(cleanup_uint256(expr_9), convert_t_rational_by_to_t_uint256(expr_10)))\n                /// @src 0:1546:1633  \"require(cardInventory[msg.sender][offerCardId] >= 1, \\\"You don't have the offered card\\\")\"\n                require_helper_stringliteral_c83f(expr_11)\n                /// @src 0:1646:1654  \"listings\"\n                let _42_slot := 0x01\n                let expr_155_slot := _42_slot\n                /// @src 0:1646:1659  \"listings.push\"\n                let expr_self_slot := convert_array_array_struct_Listing_storage_dyn_storage_to_array_struct_Listing__dyn_ptr(expr_155_slot)\n                /// @src 0:1691:1701  \"msg.sender\"\n                let expr_12 := caller()\n                /// @src 0:1729:1740  \"offerCardId\"\n                let _8 := var_offerCardId\n                let expr_13 := _8\n                /// @src 0:1770:1783  \"requestCardId\"\n                let _9 := var_requestCardId\n                let expr_14 := _9\n                /// @src 0:1806:1810  \"true\"\n                let expr_15 := 0x01\n                /// @src 0:1660:1822  \"Listing({...\"\n                let expr_mpos := allocate_memory_struct_struct_Listing_storage_ptr()\n                write_to_memory_address(add(expr_mpos, 0), expr_12)\n                write_to_memory_uint256(add(expr_mpos, 32), expr_13)\n                write_to_memory_uint256(add(expr_mpos, 64), expr_14)\n                write_to_memory_bool(add(expr_mpos, 96), expr_15)\n                /// @src 0:1646:1823  \"listings.push(Listing({...\"\n                array_push_from_struct_Listing_to_array_struct_Listing_storage_dyn_ptr(expr_self_slot, expr_mpos)\n            }\n            /// @src 0:60:2841  \"contract CardTrading {...\"\n            function zero_value_for_split_array_struct_Listing_dyn() -> ret\n            { ret := 96 }\n            function array_allocation_size_array_struct_Listing_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_array_struct_Listing_dyn(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_struct_Listing_dyn(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function allocate_memory_struct_struct_Listing() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function read_from_storage_reference_type_struct_Listing(slot) -> value\n            {\n                value := allocate_memory_struct_struct_Listing()\n                let memberValue := read_from_storage_split_offset_address(add(slot, 0))\n                write_to_memory_address(add(value, 0), memberValue)\n                let memberValue_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                write_to_memory_uint256(add(value, 32), memberValue_1)\n                let memberValue_2 := read_from_storage_split_offset_uint256(add(slot, 2))\n                write_to_memory_uint256(add(value, 64), memberValue_2)\n                let memberValue_3 := read_from_storage_split_offset_bool(add(slot, 3))\n                write_to_memory_bool(add(value, 96), memberValue_3)\n            }\n            function convert_struct_Listing_storage_to_struct_Listing(value) -> converted\n            {\n                converted := read_from_storage_reference_type_struct_Listing(value)\n            }\n            function copy_array_from_storage_to_memory_array_struct_Listing__dyn(slot) -> memPtr\n            {\n                let length := array_length_array_struct_Listing_storage_dyn(slot)\n                memPtr := allocate_memory_array_array_struct_Listing_dyn(length)\n                let mpos := memPtr\n                mpos := add(mpos, 0x20)\n                let spos := array_dataslot_array_struct_Listing_storage_dyn(slot)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, convert_struct_Listing_storage_to_struct_Listing(spos))\n                    mpos := add(mpos, 0x20)\n                    spos := add(spos, 4)\n                }\n            }\n            function convert_array_array_struct_Listing_storage_dyn_to_array_struct_Listing_dyn(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_struct_Listing__dyn(value)\n            }\n            /// @ast-id 273 @src 0:2737:2838  \"function getAllListings() external view returns (Listing[] memory) {...\"\n            function fun_getAllListings() -> var_mpos\n            {\n                /// @src 0:2786:2802  \"Listing[] memory\"\n                let zero_array_struct_Listing_dyn_mpos := zero_value_for_split_array_struct_Listing_dyn()\n                var_mpos := zero_array_struct_Listing_dyn_mpos\n                /// @src 0:2822:2830  \"listings\"\n                let _46_slot := 0x01\n                let expr_270_slot := _46_slot\n                /// @src 0:2815:2830  \"return listings\"\n                var_mpos := convert_array_array_struct_Listing_storage_dyn_to_array_struct_Listing_dyn(expr_270_slot)\n                leave\n            }\n            /// @src 0:60:2841  \"contract CardTrading {...\"\n            function store_literal_in_memory_06621c6d39177fcdbad6bb99c0642b8c7cd419ea508ac568edd78e990c8d4d0d(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid listing ID\")\n            }\n            function abi_encode_stringliteral(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 18)\n                store_literal_in_memory_06621c6d39177fcdbad6bb99c0642b8c7cd419ea508ac568edd78e990c8d4d0d(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_0662(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral(tail)\n            }\n            function require_helper_stringliteral_0662(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_0662(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_struct_Listing_storage_to_struct_Listing_ptr(value) -> converted\n            { converted := value }\n            function store_literal_in_memory_d1d4967cbb82612b00f5b8a8b2b91ebc66f5c79abe15e43a957a6b62423fcc1a(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Listing is no longer active\")\n            }\n            function abi_encode_stringliteral_d1d4967cbb82612b00f5b8a8b2b91ebc66f5c79abe15e43a957a6b62423fcc1a(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 27)\n                store_literal_in_memory_d1d4967cbb82612b00f5b8a8b2b91ebc66f5c79abe15e43a957a6b62423fcc1a(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_d1d4(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_d1d4967cbb82612b00f5b8a8b2b91ebc66f5c79abe15e43a957a6b62423fcc1a(tail)\n            }\n            function require_helper_stringliteral_d1d4(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_d1d4(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_86c8351a62b307dbf122a5f1649df33f24d9d3317b26e4f9867eb32b143a2420(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Cannot accept your own listing\")\n            }\n            function abi_encode_stringliteral_86c8351a62b307dbf122a5f1649df33f24d9d3317b26e4f9867eb32b143a2420(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 30)\n                store_literal_in_memory_86c8351a62b307dbf122a5f1649df33f24d9d3317b26e4f9867eb32b143a2420(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_86c8(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_86c8351a62b307dbf122a5f1649df33f24d9d3317b26e4f9867eb32b143a2420(tail)\n            }\n            function require_helper_stringliteral_86c8(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_86c8(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_79ce14e647f3562bcfbfd505c269392e55feb78748b500bd2d2386b2a970607d(memPtr)\n            {\n                mstore(add(memPtr, 0), \"You do not have the requested ca\")\n                mstore(add(memPtr, 32), \"rd\")\n            }\n            function abi_encode_stringliteral_79ce14e647f3562bcfbfd505c269392e55feb78748b500bd2d2386b2a970607d(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 34)\n                store_literal_in_memory_79ce14e647f3562bcfbfd505c269392e55feb78748b500bd2d2386b2a970607d(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_79ce(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_79ce14e647f3562bcfbfd505c269392e55feb78748b500bd2d2386b2a970607d(tail)\n            }\n            function require_helper_stringliteral_79ce(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_79ce(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 263 @src 0:1886:2704  \"function acceptListing(uint listingId) external {...\"\n            function fun_acceptListing(var_listingId)\n            {\n                /// @src 0:1953:1962  \"listingId\"\n                let _1 := var_listingId\n                let expr := _1\n                /// @src 0:1965:1973  \"listings\"\n                let _48_slot := 0x01\n                let expr_175_slot := _48_slot\n                /// @src 0:1965:1980  \"listings.length\"\n                let expr_1 := array_length_array_struct_Listing_storage_dyn(expr_175_slot)\n                /// @src 0:1953:1980  \"listingId < listings.length\"\n                let expr_2 := lt(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 0:1945:2003  \"require(listingId < listings.length, \\\"Invalid listing ID\\\")\"\n                require_helper_stringliteral_0662(expr_2)\n                /// @src 0:2040:2048  \"listings\"\n                let _49_slot := 0x01\n                let expr_184_slot := _49_slot\n                /// @src 0:2049:2058  \"listingId\"\n                let _2 := var_listingId\n                let expr_3 := _2\n                /// @src 0:2040:2059  \"listings[listingId]\"\n                let _3, _4 := storage_array_index_access_struct_Listing__dyn(expr_184_slot, expr_3)\n                let _53_slot := _3\n                let expr_186_slot := _53_slot\n                /// @src 0:2014:2059  \"Listing storage listing = listings[listingId]\"\n                let var_listing_slot := convert_struct_Listing_storage_to_struct_Listing_ptr(expr_186_slot)\n                /// @src 0:2078:2085  \"listing\"\n                let _54_slot := var_listing_slot\n                let expr_189_slot := _54_slot\n                /// @src 0:2078:2092  \"listing.active\"\n                let _5 := add(expr_189_slot, 3)\n                let _6 := read_from_storage_split_offset_bool(_5)\n                let expr_4 := _6\n                /// @src 0:2070:2124  \"require(listing.active, \\\"Listing is no longer active\\\")\"\n                require_helper_stringliteral_d1d4(expr_4)\n                /// @src 0:2143:2153  \"msg.sender\"\n                let expr_5 := caller()\n                /// @src 0:2157:2164  \"listing\"\n                let _57_slot := var_listing_slot\n                let expr_197_slot := _57_slot\n                /// @src 0:2157:2171  \"listing.seller\"\n                let _7 := add(expr_197_slot, 0)\n                let _8 := read_from_storage_split_offset_address(_7)\n                let expr_6 := _8\n                /// @src 0:2143:2171  \"msg.sender != listing.seller\"\n                let expr_7 := iszero(eq(cleanup_address(expr_5), cleanup_address(expr_6)))\n                /// @src 0:2135:2206  \"require(msg.sender != listing.seller, \\\"Cannot accept your own listing\\\")\"\n                require_helper_stringliteral_86c8(expr_7)\n                /// @src 0:2275:2288  \"cardInventory\"\n                let _60_slot := 0x00\n                let expr_204_slot := _60_slot\n                /// @src 0:2289:2299  \"msg.sender\"\n                let expr_8 := caller()\n                /// @src 0:2275:2300  \"cardInventory[msg.sender]\"\n                let _9 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_204_slot, expr_8)\n                let _62_slot := _9\n                let expr_207_slot := _62_slot\n                /// @src 0:2301:2308  \"listing\"\n                let _63_slot := var_listing_slot\n                let expr_208_slot := _63_slot\n                /// @src 0:2301:2322  \"listing.requestCardId\"\n                let _10 := add(expr_208_slot, 2)\n                let _11 := read_from_storage_split_offset_uint256(_10)\n                let expr_9 := _11\n                /// @src 0:2275:2323  \"cardInventory[msg.sender][listing.requestCardId]\"\n                let _12, _13 := storage_array_index_access_uint(expr_207_slot, expr_9)\n                let _14 := read_from_storage_split_dynamic_uint256(_12, _13)\n                let expr_10 := _14\n                /// @src 0:2327:2328  \"1\"\n                let expr_11 := 0x01\n                /// @src 0:2275:2328  \"cardInventory[msg.sender][listing.requestCardId] >= 1\"\n                let expr_12 := iszero(lt(cleanup_uint256(expr_10), convert_t_rational_by_to_t_uint256(expr_11)))\n                /// @src 0:2267:2367  \"require(cardInventory[msg.sender][listing.requestCardId] >= 1, \\\"You do not have the requested card\\\")\"\n                require_helper_stringliteral_79ce(expr_12)\n                /// @src 0:2462:2463  \"1\"\n                let expr_13 := 0x01\n                /// @src 0:2410:2463  \"cardInventory[msg.sender][listing.requestCardId] -= 1\"\n                let _15 := convert_t_rational_by_to_t_uint256(expr_13)\n                /// @src 0:2410:2423  \"cardInventory\"\n                let _70_slot := 0x00\n                let expr_216_slot := _70_slot\n                /// @src 0:2424:2434  \"msg.sender\"\n                let expr_14 := caller()\n                /// @src 0:2410:2435  \"cardInventory[msg.sender]\"\n                let _16 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_216_slot, expr_14)\n                let _72_slot := _16\n                let expr_221_slot := _72_slot\n                /// @src 0:2436:2443  \"listing\"\n                let _73_slot := var_listing_slot\n                let expr_219_slot := _73_slot\n                /// @src 0:2436:2457  \"listing.requestCardId\"\n                let _17 := add(expr_219_slot, 2)\n                let _18 := read_from_storage_split_offset_uint256(_17)\n                let expr_15 := _18\n                /// @src 0:2410:2458  \"cardInventory[msg.sender][listing.requestCardId]\"\n                let _19, _20 := storage_array_index_access_uint(expr_221_slot, expr_15)\n                /// @src 0:2410:2463  \"cardInventory[msg.sender][listing.requestCardId] -= 1\"\n                let _21 := read_from_storage_split_dynamic_uint256(_19, _20)\n                let expr_16 := checked_sub_uint256(_21, _15)\n                update_storage_value_uint256_to_uint256(_19, _20, expr_16)\n                /// @src 0:2530:2531  \"1\"\n                let expr_17 := 0x01\n                /// @src 0:2474:2531  \"cardInventory[listing.seller][listing.requestCardId] += 1\"\n                let _22 := convert_t_rational_by_to_t_uint256(expr_17)\n                /// @src 0:2474:2487  \"cardInventory\"\n                let _slot := 0x00\n                let expr_226_slot := _slot\n                /// @src 0:2488:2495  \"listing\"\n                let _81_slot := var_listing_slot\n                let expr_227_slot := _81_slot\n                /// @src 0:2488:2502  \"listing.seller\"\n                let _23 := add(expr_227_slot, 0)\n                let _24 := read_from_storage_split_offset_address(_23)\n                let expr_18 := _24\n                /// @src 0:2474:2503  \"cardInventory[listing.seller]\"\n                let _25 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_226_slot, expr_18)\n                let _85_slot := _25\n                let expr_231_slot := _85_slot\n                /// @src 0:2504:2511  \"listing\"\n                let _86_slot := var_listing_slot\n                let expr_229_slot := _86_slot\n                /// @src 0:2504:2525  \"listing.requestCardId\"\n                let _26 := add(expr_229_slot, 2)\n                let _27 := read_from_storage_split_offset_uint256(_26)\n                let expr_19 := _27\n                /// @src 0:2474:2526  \"cardInventory[listing.seller][listing.requestCardId]\"\n                let _28, _29 := storage_array_index_access_uint(expr_231_slot, expr_19)\n                /// @src 0:2474:2531  \"cardInventory[listing.seller][listing.requestCardId] += 1\"\n                let _30 := read_from_storage_split_dynamic_uint256(_28, _29)\n                let expr_20 := checked_add_uint256(_30, _22)\n                update_storage_value_uint256_to_uint256(_28, _29, expr_20)\n                /// @src 0:2598:2599  \"1\"\n                let expr_21 := 0x01\n                /// @src 0:2544:2599  \"cardInventory[listing.seller][listing.offerCardId] -= 1\"\n                let _31 := convert_t_rational_by_to_t_uint256(expr_21)\n                /// @src 0:2544:2557  \"cardInventory\"\n                let _93_slot := 0x00\n                let expr_slot := _93_slot\n                /// @src 0:2558:2565  \"listing\"\n                let _94_slot := var_listing_slot\n                let expr_237_slot := _94_slot\n                /// @src 0:2558:2572  \"listing.seller\"\n                let _32 := add(expr_237_slot, 0)\n                let _33 := read_from_storage_split_offset_address(_32)\n                let expr_22 := _33\n                /// @src 0:2544:2573  \"cardInventory[listing.seller]\"\n                let _34 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_slot, expr_22)\n                let _98_slot := _34\n                let expr_241_slot := _98_slot\n                /// @src 0:2574:2581  \"listing\"\n                let _99_slot := var_listing_slot\n                let expr_239_slot := _99_slot\n                /// @src 0:2574:2593  \"listing.offerCardId\"\n                let _35 := add(expr_239_slot, 1)\n                let _36 := read_from_storage_split_offset_uint256(_35)\n                let expr_23 := _36\n                /// @src 0:2544:2594  \"cardInventory[listing.seller][listing.offerCardId]\"\n                let _37, _38 := storage_array_index_access_uint(expr_241_slot, expr_23)\n                /// @src 0:2544:2599  \"cardInventory[listing.seller][listing.offerCardId] -= 1\"\n                let _39 := read_from_storage_split_dynamic_uint256(_37, _38)\n                let expr_24 := checked_sub_uint256(_39, _31)\n                update_storage_value_uint256_to_uint256(_37, _38, expr_24)\n                /// @src 0:2660:2661  \"1\"\n                let expr_25 := 0x01\n                /// @src 0:2610:2661  \"cardInventory[msg.sender][listing.offerCardId] += 1\"\n                let _40 := convert_t_rational_by_to_t_uint256(expr_25)\n                /// @src 0:2610:2623  \"cardInventory\"\n                let _106_slot := 0x00\n                let expr_246_slot := _106_slot\n                /// @src 0:2624:2634  \"msg.sender\"\n                let expr_26 := caller()\n                /// @src 0:2610:2635  \"cardInventory[msg.sender]\"\n                let _41 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_246_slot, expr_26)\n                let _108_slot := _41\n                let expr_251_slot := _108_slot\n                /// @src 0:2636:2643  \"listing\"\n                let _109_slot := var_listing_slot\n                let expr_249_slot := _109_slot\n                /// @src 0:2636:2655  \"listing.offerCardId\"\n                let _42 := add(expr_249_slot, 1)\n                let _43 := read_from_storage_split_offset_uint256(_42)\n                let expr_27 := _43\n                /// @src 0:2610:2656  \"cardInventory[msg.sender][listing.offerCardId]\"\n                let _44, _45 := storage_array_index_access_uint(expr_251_slot, expr_27)\n                /// @src 0:2610:2661  \"cardInventory[msg.sender][listing.offerCardId] += 1\"\n                let _46 := read_from_storage_split_dynamic_uint256(_44, _45)\n                let expr_28 := checked_add_uint256(_46, _40)\n                update_storage_value_uint256_to_uint256(_44, _45, expr_28)\n                /// @src 0:2691:2696  \"false\"\n                let expr_29 := 0x00\n                /// @src 0:2674:2681  \"listing\"\n                let _115_slot := var_listing_slot\n                let expr_256_slot := _115_slot\n                /// @src 0:2674:2688  \"listing.active\"\n                let _47 := add(expr_256_slot, 3)\n                /// @src 0:2674:2696  \"listing.active = false\"\n                update_storage_value_offset_bool_to_bool(_47, expr_29)\n            }\n            /// @src 0:60:2841  \"contract CardTrading {...\"\n            function store_literal_in_memory_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid address\")\n            }\n            function abi_encode_stringliteral_1462(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_1462(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 53 @src 0:532:771  \"function addCard(address to, uint cardId) external {...\"\n            function fun_addCard(var_to, var_cardId)\n            {\n                /// @src 0:602:604  \"to\"\n                let _1 := var_to\n                let expr := _1\n                /// @src 0:616:617  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:608:618  \"address(0)\"\n                let expr_2 := convert_rational_by_to_address(expr_1)\n                /// @src 0:602:618  \"to != address(0)\"\n                let expr_3 := iszero(eq(cleanup_address(expr), cleanup_address(expr_2)))\n                /// @src 0:594:638  \"require(to != address(0), \\\"Invalid address\\\")\"\n                require_helper_stringliteral(expr_3)\n                /// @src 0:657:663  \"cardId\"\n                let _2 := var_cardId\n                let expr_4 := _2\n                /// @src 0:666:667  \"9\"\n                let expr_5 := 0x09\n                /// @src 0:657:667  \"cardId < 9\"\n                let expr_6 := lt(cleanup_uint256(expr_4), convert_rational_by_to_uint256(expr_5))\n                /// @src 0:649:687  \"require(cardId < 9, \\\"Invalid card ID\\\")\"\n                require_helper_stringliteral_8239(expr_6)\n                /// @src 0:762:763  \"1\"\n                let expr_7 := 0x01\n                /// @src 0:733:763  \"cardInventory[to][cardId] += 1\"\n                let _3 := convert_t_rational_by_to_t_uint256(expr_7)\n                /// @src 0:733:746  \"cardInventory\"\n                let _120_slot := 0x00\n                let expr_44_slot := _120_slot\n                /// @src 0:747:749  \"to\"\n                let _4 := var_to\n                let expr_8 := _4\n                /// @src 0:733:750  \"cardInventory[to]\"\n                let _5 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_44_slot, expr_8)\n                let _123_slot := _5\n                let expr_47_slot := _123_slot\n                /// @src 0:751:757  \"cardId\"\n                let _6 := var_cardId\n                let expr_9 := _6\n                /// @src 0:733:758  \"cardInventory[to][cardId]\"\n                let _7, _8 := storage_array_index_access_uint(expr_47_slot, expr_9)\n                /// @src 0:733:763  \"cardInventory[to][cardId] += 1\"\n                let _9 := read_from_storage_split_dynamic_uint256(_7, _8)\n                let expr_10 := checked_add_uint256(_9, _3)\n                update_storage_value_uint256_to_uint256(_7, _8, expr_10)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212202bf27920b888ba98f069cf92a27eb763999994ff973bc523df85811461a739c964736f6c634300081c0033\"\n    }\n}\n",
					"hash": "07b839f5b02f2cbcd2dff2f25c0506f9c4c52aee4b73fae46276bceffc9b0d29",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"TradingGame.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "TradingGame.sol",
					"exportedSymbols": {
						"CardTrading": [
							274
						]
					},
					"id": 275,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CardTrading",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 274,
							"linearizedBaseContracts": [
								274
							],
							"name": "CardTrading",
							"nameLocation": "69:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "50580072",
									"id": 7,
									"mutability": "mutable",
									"name": "cardInventory",
									"nameLocation": "190:13:0",
									"nodeType": "VariableDeclaration",
									"scope": 274,
									"src": "155:48:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
										"typeString": "mapping(address => uint256[9])"
									},
									"typeName": {
										"id": 6,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "163:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "155:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
											"typeString": "mapping(address => uint256[9])"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"baseType": {
												"id": 3,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "174:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"id": 5,
											"length": {
												"hexValue": "39",
												"id": 4,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "179:1:0",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_9_by_1",
													"typeString": "int_const 9"
												},
												"value": "9"
											},
											"nodeType": "ArrayTypeName",
											"src": "174:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$9_storage_ptr",
												"typeString": "uint256[9]"
											}
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "CardTrading.Listing",
									"id": 16,
									"members": [
										{
											"constant": false,
											"id": 9,
											"mutability": "mutable",
											"name": "seller",
											"nameLocation": "318:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 16,
											"src": "310:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 8,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "310:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 11,
											"mutability": "mutable",
											"name": "offerCardId",
											"nameLocation": "340:11:0",
											"nodeType": "VariableDeclaration",
											"scope": 16,
											"src": "335:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 10,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "335:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 13,
											"mutability": "mutable",
											"name": "requestCardId",
											"nameLocation": "367:13:0",
											"nodeType": "VariableDeclaration",
											"scope": 16,
											"src": "362:18:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 12,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "362:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 15,
											"mutability": "mutable",
											"name": "active",
											"nameLocation": "396:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 16,
											"src": "391:11:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 14,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "391:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Listing",
									"nameLocation": "291:7:0",
									"nodeType": "StructDefinition",
									"scope": 274,
									"src": "284:126:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "de74e57b",
									"id": 20,
									"mutability": "mutable",
									"name": "listings",
									"nameLocation": "435:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 274,
									"src": "418:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_struct$_Listing_$16_storage_$dyn_storage",
										"typeString": "struct CardTrading.Listing[]"
									},
									"typeName": {
										"baseType": {
											"id": 18,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 17,
												"name": "Listing",
												"nameLocations": [
													"418:7:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 16,
												"src": "418:7:0"
											},
											"referencedDeclaration": 16,
											"src": "418:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
												"typeString": "struct CardTrading.Listing"
											}
										},
										"id": 19,
										"nodeType": "ArrayTypeName",
										"src": "418:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_struct$_Listing_$16_storage_$dyn_storage_ptr",
											"typeString": "struct CardTrading.Listing[]"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 52,
										"nodeType": "Block",
										"src": "583:188:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 28,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 22,
																"src": "602:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 31,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "616:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 30,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "608:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 29,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "608:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 32,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "608:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "602:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642061646472657373",
															"id": 34,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "620:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															},
															"value": "Invalid address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															}
														],
														"id": 27,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "594:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "594:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 36,
												"nodeType": "ExpressionStatement",
												"src": "594:44:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 38,
																"name": "cardId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "657:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "39",
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "666:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_9_by_1",
																	"typeString": "int_const 9"
																},
																"value": "9"
															},
															"src": "657:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642063617264204944",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "669:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															},
															"value": "Invalid card ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															}
														],
														"id": 37,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "649:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "649:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "649:38:0"
											},
											{
												"expression": {
													"id": 50,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 44,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "733:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 47,
															"indexExpression": {
																"id": 45,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 22,
																"src": "747:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "733:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 48,
														"indexExpression": {
															"id": 46,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 24,
															"src": "751:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "733:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 49,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "762:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "733:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 51,
												"nodeType": "ExpressionStatement",
												"src": "733:30:0"
											}
										]
									},
									"functionSelector": "f9c775ea",
									"id": 53,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addCard",
									"nameLocation": "541:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "557:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 53,
												"src": "549:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "549:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "566:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 53,
												"src": "561:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "561:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "548:25:0"
									},
									"returnParameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "583:0:0"
									},
									"scope": 274,
									"src": "532:239:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "908:407:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 68,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 63,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "927:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 66,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "941:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 65,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "933:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 64,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "933:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 67,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "933:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "927:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420726563697069656e74",
															"id": 69,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "945:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d",
																"typeString": "literal_string \"Invalid recipient\""
															},
															"value": "Invalid recipient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d",
																"typeString": "literal_string \"Invalid recipient\""
															}
														],
														"id": 62,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "919:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 70,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "919:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 71,
												"nodeType": "ExpressionStatement",
												"src": "919:46:0"
											},
											{
												"body": {
													"id": 122,
													"nodeType": "Block",
													"src": "1007:301:0",
													"statements": [
														{
															"assignments": [
																83
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 83,
																	"mutability": "mutable",
																	"name": "amount",
																	"nameLocation": "1027:6:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 122,
																	"src": "1022:11:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 82,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "1022:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 87,
															"initialValue": {
																"baseExpression": {
																	"id": 84,
																	"name": "cardsToSend",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 59,
																	"src": "1036:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$9_calldata_ptr",
																		"typeString": "uint256[9] calldata"
																	}
																},
																"id": 86,
																"indexExpression": {
																	"id": 85,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 73,
																	"src": "1048:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1036:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1022:28:0"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 90,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 88,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 83,
																	"src": "1069:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 89,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1078:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1069:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 121,
															"nodeType": "IfStatement",
															"src": "1065:232:0",
															"trueBody": {
																"id": 120,
																"nodeType": "Block",
																"src": "1081:216:0",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 99,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"baseExpression": {
																							"baseExpression": {
																								"id": 92,
																								"name": "cardInventory",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 7,
																								"src": "1108:13:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																									"typeString": "mapping(address => uint256[9] storage ref)"
																								}
																							},
																							"id": 95,
																							"indexExpression": {
																								"expression": {
																									"id": 93,
																									"name": "msg",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4294967281,
																									"src": "1122:3:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_magic_message",
																										"typeString": "msg"
																									}
																								},
																								"id": 94,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "1126:6:0",
																								"memberName": "sender",
																								"nodeType": "MemberAccess",
																								"src": "1122:10:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "1108:25:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_array$_t_uint256_$9_storage",
																								"typeString": "uint256[9] storage ref"
																							}
																						},
																						"id": 97,
																						"indexExpression": {
																							"id": 96,
																							"name": "i",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 73,
																							"src": "1134:1:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "1108:28:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": ">=",
																					"rightExpression": {
																						"id": 98,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 83,
																						"src": "1140:6:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "1108:38:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "4e6f7420656e6f75676820636172647320746f2073656e64",
																					"id": 100,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1148:26:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_6082b5416ef755c8ab4f27a5cfb1139cbe773e8555361d10c249df095e24d862",
																						"typeString": "literal_string \"Not enough cards to send\""
																					},
																					"value": "Not enough cards to send"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_6082b5416ef755c8ab4f27a5cfb1139cbe773e8555361d10c249df095e24d862",
																						"typeString": "literal_string \"Not enough cards to send\""
																					}
																				],
																				"id": 91,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "1100:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 101,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1100:75:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 102,
																		"nodeType": "ExpressionStatement",
																		"src": "1100:75:0"
																	},
																	{
																		"expression": {
																			"id": 110,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"baseExpression": {
																						"id": 103,
																						"name": "cardInventory",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 7,
																						"src": "1194:13:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																							"typeString": "mapping(address => uint256[9] storage ref)"
																						}
																					},
																					"id": 107,
																					"indexExpression": {
																						"expression": {
																							"id": 104,
																							"name": "msg",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967281,
																							"src": "1208:3:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_magic_message",
																								"typeString": "msg"
																							}
																						},
																						"id": 105,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "1212:6:0",
																						"memberName": "sender",
																						"nodeType": "MemberAccess",
																						"src": "1208:10:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "1194:25:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_uint256_$9_storage",
																						"typeString": "uint256[9] storage ref"
																					}
																				},
																				"id": 108,
																				"indexExpression": {
																					"id": 106,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 73,
																					"src": "1220:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "1194:28:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "-=",
																			"rightHandSide": {
																				"id": 109,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 83,
																				"src": "1226:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1194:38:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 111,
																		"nodeType": "ExpressionStatement",
																		"src": "1194:38:0"
																	},
																	{
																		"expression": {
																			"id": 118,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"baseExpression": {
																						"id": 112,
																						"name": "cardInventory",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 7,
																						"src": "1251:13:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																							"typeString": "mapping(address => uint256[9] storage ref)"
																						}
																					},
																					"id": 115,
																					"indexExpression": {
																						"id": 113,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 55,
																						"src": "1265:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "1251:17:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_uint256_$9_storage",
																						"typeString": "uint256[9] storage ref"
																					}
																				},
																				"id": 116,
																				"indexExpression": {
																					"id": 114,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 73,
																					"src": "1269:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "1251:20:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"id": 117,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 83,
																				"src": "1275:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1251:30:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 119,
																		"nodeType": "ExpressionStatement",
																		"src": "1251:30:0"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 78,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 76,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 73,
														"src": "995:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "39",
														"id": 77,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "999:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_9_by_1",
															"typeString": "int_const 9"
														},
														"value": "9"
													},
													"src": "995:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 123,
												"initializationExpression": {
													"assignments": [
														73
													],
													"declarations": [
														{
															"constant": false,
															"id": 73,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "988:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 123,
															"src": "983:6:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 72,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "983:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 75,
													"initialValue": {
														"hexValue": "30",
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "992:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "983:10:0"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 80,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1002:3:0",
														"subExpression": {
															"id": 79,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 73,
															"src": "1002:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 81,
													"nodeType": "ExpressionStatement",
													"src": "1002:3:0"
												},
												"nodeType": "ForStatement",
												"src": "978:330:0"
											}
										]
									},
									"functionSelector": "48d1c5b2",
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferCards",
									"nameLocation": "843:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "865:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "857:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "857:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "cardsToSend",
												"nameLocation": "886:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "869:28:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$9_calldata_ptr",
													"typeString": "uint256[9]"
												},
												"typeName": {
													"baseType": {
														"id": 56,
														"name": "uint",
														"nodeType": "ElementaryTypeName",
														"src": "869:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 58,
													"length": {
														"hexValue": "39",
														"id": 57,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "874:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_9_by_1",
															"typeString": "int_const 9"
														},
														"value": "9"
													},
													"nodeType": "ArrayTypeName",
													"src": "869:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$9_storage_ptr",
														"typeString": "uint256[9]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "856:42:0"
									},
									"returnParameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:0:0"
									},
									"scope": 274,
									"src": "834:481:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 167,
										"nodeType": "Block",
										"src": "1460:371:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 139,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 133,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 127,
																	"src": "1479:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "39",
																	"id": 134,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1493:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_9_by_1",
																		"typeString": "int_const 9"
																	},
																	"value": "9"
																},
																"src": "1479:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 138,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 136,
																	"name": "requestCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 129,
																	"src": "1498:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "39",
																	"id": 137,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1514:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_9_by_1",
																		"typeString": "int_const 9"
																	},
																	"value": "9"
																},
																"src": "1498:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1479:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642063617264204944",
															"id": 140,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1517:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															},
															"value": "Invalid card ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															}
														],
														"id": 132,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1471:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1471:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 142,
												"nodeType": "ExpressionStatement",
												"src": "1471:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 151,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 144,
																		"name": "cardInventory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 7,
																		"src": "1554:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																			"typeString": "mapping(address => uint256[9] storage ref)"
																		}
																	},
																	"id": 147,
																	"indexExpression": {
																		"expression": {
																			"id": 145,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1568:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 146,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1572:6:0",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1568:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1554:25:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$9_storage",
																		"typeString": "uint256[9] storage ref"
																	}
																},
																"id": 149,
																"indexExpression": {
																	"id": 148,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 127,
																	"src": "1580:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1554:38:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "31",
																"id": 150,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1596:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1554:43:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520646f6e2774206861766520746865206f6666657265642063617264",
															"id": 152,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1599:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0",
																"typeString": "literal_string \"You don't have the offered card\""
															},
															"value": "You don't have the offered card"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c83f14809be99a95186014008da405a94de7d3e85b2646ac9590117a325b64b0",
																"typeString": "literal_string \"You don't have the offered card\""
															}
														],
														"id": 143,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1546:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1546:87:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 154,
												"nodeType": "ExpressionStatement",
												"src": "1546:87:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 159,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1691:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 160,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1695:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1691:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 161,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 127,
																	"src": "1729:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 162,
																	"name": "requestCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 129,
																	"src": "1770:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "74727565",
																	"id": 163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1806:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 158,
																"name": "Listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 16,
																"src": "1660:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_struct$_Listing_$16_storage_ptr_$",
																	"typeString": "type(struct CardTrading.Listing storage pointer)"
																}
															},
															"id": 164,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "structConstructorCall",
															"lValueRequested": false,
															"nameLocations": [
																"1683:6:0",
																"1716:11:0",
																"1755:13:0",
																"1798:6:0"
															],
															"names": [
																"seller",
																"offerCardId",
																"requestCardId",
																"active"
															],
															"nodeType": "FunctionCall",
															"src": "1660:162:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$16_memory_ptr",
																"typeString": "struct CardTrading.Listing memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Listing_$16_memory_ptr",
																"typeString": "struct CardTrading.Listing memory"
															}
														],
														"expression": {
															"id": 155,
															"name": "listings",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 20,
															"src": "1646:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Listing_$16_storage_$dyn_storage",
																"typeString": "struct CardTrading.Listing storage ref[] storage ref"
															}
														},
														"id": 157,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1655:4:0",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "1646:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Listing_$16_storage_$dyn_storage_ptr_$_t_struct$_Listing_$16_storage_$returns$__$attached_to$_t_array$_t_struct$_Listing_$16_storage_$dyn_storage_ptr_$",
															"typeString": "function (struct CardTrading.Listing storage ref[] storage pointer,struct CardTrading.Listing storage ref)"
														}
													},
													"id": 165,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1646:177:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 166,
												"nodeType": "ExpressionStatement",
												"src": "1646:177:0"
											}
										]
									},
									"functionSelector": "a79123a9",
									"id": 168,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createListing",
									"nameLocation": "1399:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "offerCardId",
												"nameLocation": "1418:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1413:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1413:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "requestCardId",
												"nameLocation": "1436:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1431:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 128,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1431:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1412:38:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1460:0:0"
									},
									"scope": 274,
									"src": "1390:441:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 262,
										"nodeType": "Block",
										"src": "1934:770:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 174,
																"name": "listingId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 170,
																"src": "1953:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 175,
																	"name": "listings",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 20,
																	"src": "1965:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Listing_$16_storage_$dyn_storage",
																		"typeString": "struct CardTrading.Listing storage ref[] storage ref"
																	}
																},
																"id": 176,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1974:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "1965:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1953:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c6964206c697374696e67204944",
															"id": 178,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1982:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_06621c6d39177fcdbad6bb99c0642b8c7cd419ea508ac568edd78e990c8d4d0d",
																"typeString": "literal_string \"Invalid listing ID\""
															},
															"value": "Invalid listing ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_06621c6d39177fcdbad6bb99c0642b8c7cd419ea508ac568edd78e990c8d4d0d",
																"typeString": "literal_string \"Invalid listing ID\""
															}
														],
														"id": 173,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1945:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1945:58:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 180,
												"nodeType": "ExpressionStatement",
												"src": "1945:58:0"
											},
											{
												"assignments": [
													183
												],
												"declarations": [
													{
														"constant": false,
														"id": 183,
														"mutability": "mutable",
														"name": "listing",
														"nameLocation": "2030:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 262,
														"src": "2014:23:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
															"typeString": "struct CardTrading.Listing"
														},
														"typeName": {
															"id": 182,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 181,
																"name": "Listing",
																"nameLocations": [
																	"2014:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 16,
																"src": "2014:7:0"
															},
															"referencedDeclaration": 16,
															"src": "2014:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
																"typeString": "struct CardTrading.Listing"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 187,
												"initialValue": {
													"baseExpression": {
														"id": 184,
														"name": "listings",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "2040:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Listing_$16_storage_$dyn_storage",
															"typeString": "struct CardTrading.Listing storage ref[] storage ref"
														}
													},
													"id": 186,
													"indexExpression": {
														"id": 185,
														"name": "listingId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 170,
														"src": "2049:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2040:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Listing_$16_storage",
														"typeString": "struct CardTrading.Listing storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2014:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 189,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "2078:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 190,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2086:6:0",
															"memberName": "active",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 15,
															"src": "2078:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c697374696e67206973206e6f206c6f6e67657220616374697665",
															"id": 191,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2094:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d1d4967cbb82612b00f5b8a8b2b91ebc66f5c79abe15e43a957a6b62423fcc1a",
																"typeString": "literal_string \"Listing is no longer active\""
															},
															"value": "Listing is no longer active"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d1d4967cbb82612b00f5b8a8b2b91ebc66f5c79abe15e43a957a6b62423fcc1a",
																"typeString": "literal_string \"Listing is no longer active\""
															}
														],
														"id": 188,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2070:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2070:54:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 193,
												"nodeType": "ExpressionStatement",
												"src": "2070:54:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 199,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 195,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2143:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 196,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2147:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2143:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 197,
																	"name": "listing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 183,
																	"src": "2157:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
																		"typeString": "struct CardTrading.Listing storage pointer"
																	}
																},
																"id": 198,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2165:6:0",
																"memberName": "seller",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 9,
																"src": "2157:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2143:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f742061636365707420796f7572206f776e206c697374696e67",
															"id": 200,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2173:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_86c8351a62b307dbf122a5f1649df33f24d9d3317b26e4f9867eb32b143a2420",
																"typeString": "literal_string \"Cannot accept your own listing\""
															},
															"value": "Cannot accept your own listing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_86c8351a62b307dbf122a5f1649df33f24d9d3317b26e4f9867eb32b143a2420",
																"typeString": "literal_string \"Cannot accept your own listing\""
															}
														],
														"id": 194,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2135:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2135:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 202,
												"nodeType": "ExpressionStatement",
												"src": "2135:71:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 212,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 204,
																		"name": "cardInventory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 7,
																		"src": "2275:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																			"typeString": "mapping(address => uint256[9] storage ref)"
																		}
																	},
																	"id": 207,
																	"indexExpression": {
																		"expression": {
																			"id": 205,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2289:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 206,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2293:6:0",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2289:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2275:25:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$9_storage",
																		"typeString": "uint256[9] storage ref"
																	}
																},
																"id": 210,
																"indexExpression": {
																	"expression": {
																		"id": 208,
																		"name": "listing",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 183,
																		"src": "2301:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
																			"typeString": "struct CardTrading.Listing storage pointer"
																		}
																	},
																	"id": 209,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2309:13:0",
																	"memberName": "requestCardId",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 13,
																	"src": "2301:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2275:48:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "31",
																"id": 211,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2327:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "2275:53:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520646f206e6f74206861766520746865207265717565737465642063617264",
															"id": 213,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2330:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_79ce14e647f3562bcfbfd505c269392e55feb78748b500bd2d2386b2a970607d",
																"typeString": "literal_string \"You do not have the requested card\""
															},
															"value": "You do not have the requested card"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_79ce14e647f3562bcfbfd505c269392e55feb78748b500bd2d2386b2a970607d",
																"typeString": "literal_string \"You do not have the requested card\""
															}
														],
														"id": 203,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2267:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2267:100:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 215,
												"nodeType": "ExpressionStatement",
												"src": "2267:100:0"
											},
											{
												"expression": {
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 216,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "2410:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 221,
															"indexExpression": {
																"expression": {
																	"id": 217,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2424:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 218,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2428:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2424:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2410:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 222,
														"indexExpression": {
															"expression": {
																"id": 219,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "2436:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 220,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2444:13:0",
															"memberName": "requestCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 13,
															"src": "2436:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2410:48:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 223,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2462:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2410:53:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 225,
												"nodeType": "ExpressionStatement",
												"src": "2410:53:0"
											},
											{
												"expression": {
													"id": 234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 226,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "2474:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 231,
															"indexExpression": {
																"expression": {
																	"id": 227,
																	"name": "listing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 183,
																	"src": "2488:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
																		"typeString": "struct CardTrading.Listing storage pointer"
																	}
																},
																"id": 228,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2496:6:0",
																"memberName": "seller",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 9,
																"src": "2488:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2474:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 232,
														"indexExpression": {
															"expression": {
																"id": 229,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "2504:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 230,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2512:13:0",
															"memberName": "requestCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 13,
															"src": "2504:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2474:52:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 233,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2530:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2474:57:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 235,
												"nodeType": "ExpressionStatement",
												"src": "2474:57:0"
											},
											{
												"expression": {
													"id": 244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 236,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "2544:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 241,
															"indexExpression": {
																"expression": {
																	"id": 237,
																	"name": "listing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 183,
																	"src": "2558:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
																		"typeString": "struct CardTrading.Listing storage pointer"
																	}
																},
																"id": 238,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2566:6:0",
																"memberName": "seller",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 9,
																"src": "2558:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2544:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 242,
														"indexExpression": {
															"expression": {
																"id": 239,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "2574:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 240,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2582:11:0",
															"memberName": "offerCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 11,
															"src": "2574:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2544:50:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 243,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2598:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2544:55:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 245,
												"nodeType": "ExpressionStatement",
												"src": "2544:55:0"
											},
											{
												"expression": {
													"id": 254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 246,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "2610:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 251,
															"indexExpression": {
																"expression": {
																	"id": 247,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2624:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 248,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2628:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2624:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2610:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 252,
														"indexExpression": {
															"expression": {
																"id": 249,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "2636:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 250,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2644:11:0",
															"memberName": "offerCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 11,
															"src": "2636:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2610:46:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 253,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2660:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2610:51:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 255,
												"nodeType": "ExpressionStatement",
												"src": "2610:51:0"
											},
											{
												"expression": {
													"id": 260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 256,
															"name": "listing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 183,
															"src": "2674:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
																"typeString": "struct CardTrading.Listing storage pointer"
															}
														},
														"id": 258,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2682:6:0",
														"memberName": "active",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 15,
														"src": "2674:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 259,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2691:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2674:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 261,
												"nodeType": "ExpressionStatement",
												"src": "2674:22:0"
											}
										]
									},
									"functionSelector": "b0eceb7e",
									"id": 263,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "acceptListing",
									"nameLocation": "1895:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "listingId",
												"nameLocation": "1914:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "1909:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 169,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1909:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1908:16:0"
									},
									"returnParameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1934:0:0"
									},
									"scope": 274,
									"src": "1886:818:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 272,
										"nodeType": "Block",
										"src": "2804:34:0",
										"statements": [
											{
												"expression": {
													"id": 270,
													"name": "listings",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 20,
													"src": "2822:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Listing_$16_storage_$dyn_storage",
														"typeString": "struct CardTrading.Listing storage ref[] storage ref"
													}
												},
												"functionReturnParameters": 269,
												"id": 271,
												"nodeType": "Return",
												"src": "2815:15:0"
											}
										]
									},
									"functionSelector": "ae73ccec",
									"id": 273,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAllListings",
									"nameLocation": "2746:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2760:2:0"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "2786:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Listing_$16_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct CardTrading.Listing[]"
												},
												"typeName": {
													"baseType": {
														"id": 266,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 265,
															"name": "Listing",
															"nameLocations": [
																"2786:7:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 16,
															"src": "2786:7:0"
														},
														"referencedDeclaration": 16,
														"src": "2786:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Listing_$16_storage_ptr",
															"typeString": "struct CardTrading.Listing"
														}
													},
													"id": 267,
													"nodeType": "ArrayTypeName",
													"src": "2786:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Listing_$16_storage_$dyn_storage_ptr",
														"typeString": "struct CardTrading.Listing[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2785:18:0"
									},
									"scope": 274,
									"src": "2737:101:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 275,
							"src": "60:2781:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:2810:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}