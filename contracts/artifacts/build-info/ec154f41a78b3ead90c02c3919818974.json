{
	"id": "ec154f41a78b3ead90c02c3919818974",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"InventoryManager.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract InventoryManager {\r\n    mapping(address => uint[17]) public cardInventory;\r\n    \r\n    // Add owner variable to track contract owner\r\n    address public owner;\r\n\r\n    // No more modifier - we'll remove all authorization checks\r\n    \r\n    address public tradingContract;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        tradingContract = msg.sender;\r\n    }\r\n\r\n    // Allow the owner to update the trading contract at any time\r\n    function setTradingContract(address _contract) external {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        tradingContract = _contract;\r\n    }\r\n\r\n    // Anyone can add cards\r\n    function addCard(address to, uint cardId) external {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(cardId < 17, \"Invalid card ID\");\r\n        cardInventory[to][cardId] += 1;\r\n    }\r\n\r\n    // Anyone can transfer cards - this is needed for the trading to work\r\n    function transferCards(address from, address to, uint cardId, uint amount) external {\r\n        require(cardId < 17, \"Invalid card ID\");\r\n        require(cardInventory[from][cardId] >= amount, \"Not enough cards\");\r\n        cardInventory[from][cardId] -= amount;\r\n        cardInventory[to][cardId] += amount;\r\n    }\r\n\r\n    function getInventory(address user) external view returns (uint[17] memory) {\r\n        return cardInventory[user];\r\n    }\r\n\r\n    function hasCard(address user, uint cardId, uint amount) external view returns (bool) {\r\n        return cardInventory[user][cardId] >= amount;\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"InventoryManager.sol": {
				"InventoryManager": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								}
							],
							"name": "addCard",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "cardInventory",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getInventory",
							"outputs": [
								{
									"internalType": "uint256[17]",
									"name": "",
									"type": "uint256[17]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "hasCard",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								}
							],
							"name": "setTradingContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tradingContract",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferCards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardInventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInventory\",\"outputs\":[{\"internalType\":\"uint256[17]\",\"name\":\"\",\"type\":\"uint256[17]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hasCard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTradingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"InventoryManager.sol\":\"InventoryManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"InventoryManager.sol\":{\"keccak256\":\"0x9adeb51126fbccda4fb072a82eef0d34ca86e5daa92f80e636fe5a6591a674fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://991d723656b62025685e1e5c2e815261bcf88cee42d3e237c995a3feff051950\",\"dweb:/ipfs/QmYFsm5oacZzDUTKgLqJR3KDhrGEJJh6upQhokSVKDyqA2\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "InventoryManager.sol:InventoryManager",
								"label": "cardInventory",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_array(t_uint256)17_storage)"
							},
							{
								"astId": 9,
								"contract": "InventoryManager.sol:InventoryManager",
								"label": "owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 11,
								"contract": "InventoryManager.sol:InventoryManager",
								"label": "tradingContract",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)17_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[17]",
								"numberOfBytes": "544"
							},
							"t_mapping(t_address,t_array(t_uint256)17_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256[17])",
								"numberOfBytes": "32",
								"value": "t_array(t_uint256)17_storage"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 7824\n// Code size = 24311 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 2 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @29\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 9 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @21 if a0 != 0\n      : @17 (gas: 117)\n   504: ra = 0xa\n   507: sp = sp + 0xffffffffffffff20\n   511: u64 [sp + 0xd8] = ra\n   515: u64 [sp + 0xd0] = s0\n   519: u64 [sp + 0xc8] = s1\n   523: s0 = sp + 0xe0\n   527: sp = sp & 0xffffffffffffffe0\n   530: i32 a0 = sp + 0x20\n   533: ecalli 3 // 'caller'\n   535: a0 = u64 [sp + 0x28]\n   538: a1 = i32 [sp + 0x30]\n   541: a2 = u64 [sp + 0x20]\n   544: a0 = reverse a0\n   546: a3 = a0 << 0x20\n   549: a1 = reverse a1\n   551: a1 = a1 >> 0x20\n   554: a1 = a1 | a3\n   557: u64 [sp + 0x18] = a1\n   560: a0 = a0 >> 0x20\n   563: s1 = reverse a2\n   565: a1 = s1 << 0x20\n   568: a0 = a0 | a1\n   571: u64 [sp + 0x10] = a0\n   574: s1 = s1 >> 0x20\n   577: u64 [sp + 152] = 0\n   581: u64 [sp + 144] = 0\n   585: u64 [sp + 136] = 0\n   589: u64 [sp + 128] = 0x1\n   594: u64 [sp + 184] = 0\n   598: u64 [sp + 176] = 0\n   602: u64 [sp + 168] = 0\n   606: u64 [sp + 160] = 0\n   610: u32 [sp + 96] = 0x20\n   614: i32 a1 = sp + 0x80\n   618: i32 a3 = sp + 0xa0\n   622: i32 a4 = sp + 0x60\n   625: a2 = 0xffffffffffffffff\n   628: a0 = 0\n   630: ecalli 4 // 'get_storage'\n   632: a0 = u32 [sp + 0xb4]\n   636: a0 = a0 << 0x20\n   639: a1 = u64 [sp + 0xb8]\n   643: a0 = a0 | s1\n   646: u64 [sp + 152] = 0\n   650: u64 [sp + 144] = 0\n   654: u64 [sp + 136] = 0\n   658: u64 [sp + 128] = 0x1\n   663: u64 [sp + 0xb8] = a1\n   667: u64 [sp + 0xb0] = a0\n   671: a0 = u64 [sp + 0x10]\n   674: u64 [sp + 0xa8] = a0\n   678: a0 = u64 [sp + 0x18]\n   681: u64 [sp + 0xa0] = a0\n   685: i32 a1 = sp + 0x80\n   689: i32 a3 = sp + 0xa0\n   693: a2 = 0xffffffffffffffff\n   696: a4 = 0x20\n   699: a0 = 0\n   701: ecalli 8 // 'set_storage'\n   703: i32 a0 = sp + 0x40\n   706: ecalli 3 // 'caller'\n   708: a0 = u64 [sp + 0x48]\n   711: a1 = i32 [sp + 0x50]\n   714: a2 = u64 [sp + 0x40]\n   717: a0 = reverse a0\n   719: a3 = a0 << 0x20\n   722: a1 = reverse a1\n   724: a1 = a1 >> 0x20\n   727: a1 = a1 | a3\n   730: u64 [sp + 0x18] = a1\n   733: a0 = a0 >> 0x20\n   736: s1 = reverse a2\n   738: a1 = s1 << 0x20\n   741: a0 = a0 | a1\n   744: u64 [sp + 0x10] = a0\n   747: s1 = s1 >> 0x20\n   750: u64 [sp + 152] = 0\n   754: u64 [sp + 144] = 0\n   758: u64 [sp + 136] = 0\n   762: u64 [sp + 128] = 0x2\n   767: u64 [sp + 184] = 0\n   771: u64 [sp + 176] = 0\n   775: u64 [sp + 168] = 0\n   779: u64 [sp + 160] = 0\n   783: u32 [sp + 96] = 0x20\n   787: i32 a1 = sp + 0x80\n   791: i32 a3 = sp + 0xa0\n   795: i32 a4 = sp + 0x60\n   798: a2 = 0xffffffffffffffff\n   801: a0 = 0\n   803: ecalli 4 // 'get_storage'\n   805: a0 = u32 [sp + 0xb4]\n   809: a0 = a0 << 0x20\n   812: a1 = u64 [sp + 0xb8]\n   816: a0 = a0 | s1\n   819: u64 [sp + 152] = 0\n   823: u64 [sp + 144] = 0\n   827: u64 [sp + 136] = 0\n   831: u64 [sp + 128] = 0x2\n   836: u64 [sp + 0xb8] = a1\n   840: u64 [sp + 0xb0] = a0\n   844: a0 = u64 [sp + 0x10]\n   847: u64 [sp + 0xa8] = a0\n   851: a0 = u64 [sp + 0x18]\n   854: u64 [sp + 0xa0] = a0\n   858: i32 a1 = sp + 0x80\n   862: i32 a3 = sp + 0xa0\n   866: a2 = 0xffffffffffffffff\n   869: a4 = 0x20\n   872: a0 = 0\n   874: ecalli 8 // 'set_storage'\n   876: sp = s0 + 0xffffffffffffff20\n   880: ra = u64 [sp + 0xd8]\n   884: s0 = u64 [sp + 0xd0]\n   888: s1 = u64 [sp + 0xc8]\n   892: sp = sp + 0xe0\n   896: ret\n      : @18 [@dyn 5] (gas: 3)\n   898: a0 = 0x40\n   901: a1 = 0x20\n   904: ra = 12, jump @0\n      : @19 [@dyn 6] (gas: 100)\n   909: a1 = u8 [a0 + 0x11]\n   912: a2 = u8 [a0 + 0x10]\n   915: a3 = u8 [a0 + 0x12]\n   918: a4 = u8 [a0 + 0x13]\n   921: a1 = a1 << 0x8\n   924: a1 = a1 | a2\n   927: a3 = a3 << 0x10\n   930: a4 = a4 << 0x18\n   933: a3 = a3 | a4\n   936: a1 = a1 | a3\n   939: a2 = u8 [a0 + 0x15]\n   942: a3 = u8 [a0 + 0x14]\n   945: a4 = u8 [a0 + 0x16]\n   948: a5 = u8 [a0 + 0x17]\n   951: a2 = a2 << 0x8\n   954: a2 = a2 | a3\n   957: a4 = a4 << 0x10\n   960: a5 = a5 << 0x18\n   963: a4 = a4 | a5\n   966: a2 = a2 | a4\n   969: a2 = a2 << 0x20\n   972: t0 = a2 | a1\n   975: a2 = u8 [a0 + 0x1]\n   978: a3 = u8 [a0]\n   980: a4 = u8 [a0 + 0x2]\n   983: a5 = u8 [a0 + 0x3]\n   986: a2 = a2 << 0x8\n   989: a2 = a2 | a3\n   992: a4 = a4 << 0x10\n   995: a5 = a5 << 0x18\n   998: a4 = a4 | a5\n  1001: a2 = a2 | a4\n  1004: a3 = u8 [a0 + 0x5]\n  1007: a4 = u8 [a0 + 0x4]\n  1010: a5 = u8 [a0 + 0x6]\n  1013: s1 = u8 [a0 + 0x7]\n  1016: a3 = a3 << 0x8\n  1019: a3 = a3 | a4\n  1022: a5 = a5 << 0x10\n  1025: s1 = s1 << 0x18\n  1028: a5 = a5 | s1\n  1031: a3 = a3 | a5\n  1034: a3 = a3 << 0x20\n  1037: a2 = a2 | a3\n  1040: a3 = u8 [a0 + 0x19]\n  1043: a4 = u8 [a0 + 0x18]\n  1046: a5 = u8 [a0 + 0x1a]\n  1049: s1 = u8 [a0 + 0x1b]\n  1052: a3 = a3 << 0x8\n  1055: a3 = a3 | a4\n  1058: a5 = a5 << 0x10\n  1061: s1 = s1 << 0x18\n  1064: a5 = a5 | s1\n  1067: a3 = a3 | a5\n  1070: a4 = u8 [a0 + 0x1d]\n  1073: a5 = u8 [a0 + 0x1c]\n  1076: s1 = u8 [a0 + 0x1e]\n  1079: a1 = u8 [a0 + 0x1f]\n  1082: a4 = a4 << 0x8\n  1085: a4 = a4 | a5\n  1088: s1 = s1 << 0x10\n  1091: a1 = a1 << 0x18\n  1094: a1 = a1 | s1\n  1097: a1 = a1 | a4\n  1100: a1 = a1 << 0x20\n  1103: a3 = a3 | a1\n  1106: a1 = u8 [a0 + 0x9]\n  1109: a4 = u8 [a0 + 0x8]\n  1112: a5 = u8 [a0 + 0xa]\n  1115: s1 = u8 [a0 + 0xb]\n  1118: a1 = a1 << 0x8\n  1121: a1 = a1 | a4\n  1124: a5 = a5 << 0x10\n  1127: s1 = s1 << 0x18\n  1130: a5 = a5 | s1\n  1133: a1 = a1 | a5\n  1136: a4 = u8 [a0 + 0xd]\n  1139: a5 = u8 [a0 + 0xc]\n  1142: s1 = u8 [a0 + 0xe]\n  1145: a0 = u8 [a0 + 0xf]\n  1148: a4 = a4 << 0x8\n  1151: a4 = a4 | a5\n  1154: s1 = s1 << 0x10\n  1157: a0 = a0 << 0x18\n  1160: a0 = a0 | s1\n  1163: a0 = a0 | a4\n  1166: a0 = a0 << 0x20\n  1169: a0 = a0 | a1\n  1172: a0 = reverse a0\n  1174: s1 = reverse a3\n  1176: a1 = reverse a2\n  1178: a2 = reverse t0\n  1180: a1 = a1 | a2\n  1183: a2 = s1 | a0\n  1186: a2 = a2 | a1\n  1189: a2 = a2 >> 0x20\n  1192: a0 = a0 | a1\n  1195: a0 = a0 << 0x20\n  1198: a0 = a0 | a2\n  1201: jump @23 if a0 == 0\n      : @20 (gas: 1)\n  1204: trap\n      : @21 (gas: 3)\n  1205: a0 = 0\n  1207: a1 = 0\n  1209: ra = 14, jump @0\n      : @22 [@dyn 7] (gas: 5)\n  1214: i32 a1 = a0 + 0\n  1216: a0 = 0x1\n  1219: a2 = 0\n  1221: ecalli 6 // 'seal_return'\n  1223: fallthrough\n      : @23 (gas: 4)\n  1224: i32 s1 = s1 + 0\n  1226: a0 = s1\n  1228: a1 = 0\n  1230: ra = 16, jump @0\n      : @24 [@dyn 8] (gas: 5)\n  1235: i32 a0 = a0 + 0\n  1237: a1 = 0\n  1239: a2 = 0\n  1241: ecalli 0 // 'call_data_copy'\n  1242: fallthrough\n      : @25 (gas: 2)\n  1243: a1 = i32 [0x20008]\n  1248: jump @27 if a1 == 0\n      : @26 (gas: 4)\n  1251: a0 = 0x30010\n  1256: i32 a0 = a0 + 0\n  1258: ecalli 7 // 'set_immutable_data'\n  1260: fallthrough\n      : @27 (gas: 3)\n  1261: a0 = s1\n  1263: a1 = 0\n  1265: ra = 18, jump @0\n      : @28 [@dyn 9] (gas: 6)\n  1270: i32 a1 = a0 + 0\n  1272: a0 = 0\n  1274: a2 = 0\n  1276: ra = 0x14\n  1279: ecalli 6 // 'seal_return'\n  1281: fallthrough\n      : @29 [@dyn 10] (gas: 8)\n  1282: sp = sp + 0xffffffffffffffc0\n  1285: u64 [sp + 0x38] = ra\n  1288: u64 [sp + 0x30] = s0\n  1291: s0 = sp + 0x40\n  1294: sp = sp & 0xffffffffffffffe0\n  1297: a0 = 0x40\n  1300: a1 = 0x20\n  1303: ra = 22, jump @0\n      : @30 [@dyn 11] (gas: 34)\n  1308: u8 [a0 + 31] = 0x80\n  1313: u8 [a0 + 30] = 0\n  1316: u8 [a0 + 29] = 0\n  1319: u8 [a0 + 28] = 0\n  1322: u8 [a0 + 27] = 0\n  1325: u8 [a0 + 26] = 0\n  1328: u8 [a0 + 25] = 0\n  1331: u8 [a0 + 24] = 0\n  1334: u8 [a0 + 23] = 0\n  1337: u8 [a0 + 22] = 0\n  1340: u8 [a0 + 21] = 0\n  1343: u8 [a0 + 20] = 0\n  1346: u8 [a0 + 19] = 0\n  1349: u8 [a0 + 18] = 0\n  1352: u8 [a0 + 17] = 0\n  1355: u8 [a0 + 16] = 0\n  1358: u8 [a0 + 15] = 0\n  1361: u8 [a0 + 14] = 0\n  1364: u8 [a0 + 13] = 0\n  1367: u8 [a0 + 12] = 0\n  1370: u8 [a0 + 11] = 0\n  1373: u8 [a0 + 10] = 0\n  1376: u8 [a0 + 9] = 0\n  1379: u8 [a0 + 8] = 0\n  1382: u8 [a0 + 7] = 0\n  1385: u8 [a0 + 3] = 0\n  1388: u8 [a0 + 2] = 0\n  1391: u8 [a0 + 1] = 0\n  1394: u8 [a0 + 0] = 0\n  1396: a1 = i32 [0x20004]\n  1401: u8 [a0 + 6] = 0\n  1404: u8 [a0 + 5] = 0\n  1407: u8 [a0 + 4] = 0\n  1410: jump @47 if a1 <u 4\n      : @31 (gas: 4)\n  1415: i32 a0 = sp + 0\n  1417: a1 = 0\n  1419: ecalli 1 // 'call_data_load'\n  1421: fallthrough\n      : @32 (gas: 2)\n  1422: a0 = i32 [sp + 0x1c]\n  1425: jump @37 if a0 >s 1305119973\n      : @33 (gas: 2)\n  1432: a1 = 0xffffffff9e4bd000\n  1438: jump @41 if a0 >s 2655769320\n      : @34 (gas: 1)\n  1446: jump @48 if a0 == 2340930884\n      : @35 (gas: 1)\n  1454: jump @47 if a0 != 2376452955\n      : @36 (gas: 14)\n  1462: ra = 0x18\n  1465: sp = sp + 0xffffffffffffff60\n  1469: u64 [sp + 0x98] = ra\n  1473: u64 [sp + 0x90] = s0\n  1477: u64 [sp + 0x88] = s1\n  1481: s0 = sp + 0xa0\n  1485: sp = sp & 0xffffffffffffffe0\n  1488: u64 [sp + 56] = 0\n  1491: u64 [sp + 48] = 0\n  1494: u64 [sp + 40] = 0\n  1497: u64 [sp + 32] = 0\n  1500: i32 a0 = sp + 0x20\n  1503: ecalli 9 // 'value_transferred'\n  1505: jump @179\n      : @37 [@dyn 12] (gas: 2)\n  1508: a1 = 0x5be6f000\n  1514: jump @44 if a0 >s 1541862086\n      : @38 (gas: 1)\n  1521: jump @49 if a0 == 1305119974\n      : @39 (gas: 1)\n  1529: jump @47 if a0 != 1347944562\n      : @40 (gas: 14)\n  1536: ra = 0x1a\n  1539: sp = sp + 0xfffffffffffffec0\n  1543: u64 [sp + 0x138] = ra\n  1547: u64 [sp + 0x130] = s0\n  1551: u64 [sp + 0x128] = s1\n  1555: s0 = sp + 0x140\n  1559: sp = sp & 0xffffffffffffffe0\n  1562: u64 [sp + 280] = 0\n  1566: u64 [sp + 272] = 0\n  1570: u64 [sp + 264] = 0\n  1574: u64 [sp + 256] = 0\n  1578: i32 a0 = sp + 0x100\n  1582: ecalli 9 // 'value_transferred'\n  1584: jump @98\n      : @41 [@dyn 13] (gas: 2)\n  1587: i32 a1 = a1 + 0x2e9\n  1591: jump @50 if a0 == a1\n      : @42 (gas: 1)\n  1595: jump @47 if a0 != 4190598634\n      : @43 (gas: 1)\n  1602: ra = 28, jump @200\n      : @44 [@dyn 14] (gas: 2)\n  1607: i32 a1 = a1 + 0x2c7\n  1611: jump @51 if a0 == a1\n      : @45 (gas: 1)\n  1615: jump @47 if a0 != 1697981506\n      : @46 (gas: 1)\n  1622: ra = 30, jump @144\n      : @47 [@dyn 15] (gas: 1)\n  1627: ra = 32, jump @211\n      : @48 [@dyn 16] (gas: 14)\n  1632: ra = 0x22\n  1635: sp = sp + 0xfffffffffffffde0\n  1639: u64 [sp + 0x218] = ra\n  1643: u64 [sp + 0x210] = s0\n  1647: u64 [sp + 0x208] = s1\n  1651: s0 = sp + 0x220\n  1655: sp = sp & 0xffffffffffffffe0\n  1658: u64 [sp + 472] = 0\n  1662: u64 [sp + 464] = 0\n  1666: u64 [sp + 456] = 0\n  1670: u64 [sp + 448] = 0\n  1674: i32 a0 = sp + 0x1c0\n  1678: ecalli 9 // 'value_transferred'\n  1680: jump @156\n      : @49 [@dyn 17] (gas: 14)\n  1683: ra = 0x24\n  1686: sp = sp + 0xfffffffffffffe80\n  1690: u64 [sp + 0x178] = ra\n  1694: u64 [sp + 0x170] = s0\n  1698: u64 [sp + 0x168] = s1\n  1702: s0 = sp + 0x180\n  1706: sp = sp & 0xffffffffffffffe0\n  1709: u64 [sp + 344] = 0\n  1713: u64 [sp + 336] = 0\n  1717: u64 [sp + 328] = 0\n  1721: u64 [sp + 320] = 0\n  1725: i32 a0 = sp + 0x140\n  1729: ecalli 9 // 'value_transferred'\n  1731: jump @66\n      : @50 [@dyn 18] (gas: 14)\n  1734: ra = 0x26\n  1737: sp = sp + 0xffffffffffffff60\n  1741: u64 [sp + 0x98] = ra\n  1745: u64 [sp + 0x90] = s0\n  1749: u64 [sp + 0x88] = s1\n  1753: s0 = sp + 0xa0\n  1757: sp = sp & 0xffffffffffffffe0\n  1760: u64 [sp + 56] = 0\n  1763: u64 [sp + 48] = 0\n  1766: u64 [sp + 40] = 0\n  1769: u64 [sp + 32] = 0\n  1772: i32 a0 = sp + 0x20\n  1775: ecalli 9 // 'value_transferred'\n  1777: jump @190\n      : @51 [@dyn 19] (gas: 13)\n  1780: ra = 0x28\n  1783: sp = sp + 0xffffffffffffff80\n  1786: u64 [sp + 0x78] = ra\n  1789: u64 [sp + 0x70] = s0\n  1792: s0 = sp + 0x80\n  1796: sp = sp & 0xffffffffffffffe0\n  1799: u64 [sp + 56] = 0\n  1802: u64 [sp + 48] = 0\n  1805: u64 [sp + 40] = 0\n  1808: u64 [sp + 32] = 0\n  1811: i32 a0 = sp + 0x20\n  1814: ecalli 9 // 'value_transferred'\n  1816: jump @118\n      : @52 [@dyn 20] (gas: 7)\n  1819: sp = sp + 0xfffffffffffffff0\n  1822: u64 [sp + 0x8] = ra\n  1825: u64 [sp] = s0\n  1827: s0 = a0\n  1829: a0 = 0x40\n  1832: a1 = 0x20\n  1835: ra = 42, jump @0\n      : @53 [@dyn 21] (gas: 100)\n  1840: a1 = u8 [a0 + 0x1]\n  1843: a2 = u8 [a0]\n  1845: a3 = u8 [a0 + 0x2]\n  1848: a4 = u8 [a0 + 0x3]\n  1851: a1 = a1 << 0x8\n  1854: a1 = a1 | a2\n  1857: a3 = a3 << 0x10\n  1860: a4 = a4 << 0x18\n  1863: a3 = a3 | a4\n  1866: a1 = a1 | a3\n  1869: a2 = u8 [a0 + 0x5]\n  1872: a3 = u8 [a0 + 0x4]\n  1875: a4 = u8 [a0 + 0x6]\n  1878: a5 = u8 [a0 + 0x7]\n  1881: a2 = a2 << 0x8\n  1884: a2 = a2 | a3\n  1887: a4 = a4 << 0x10\n  1890: a5 = a5 << 0x18\n  1893: a4 = a4 | a5\n  1896: a2 = a2 | a4\n  1899: a2 = a2 << 0x20\n  1902: t0 = a2 | a1\n  1905: a2 = u8 [a0 + 0x9]\n  1908: a3 = u8 [a0 + 0x8]\n  1911: a4 = u8 [a0 + 0xa]\n  1914: a5 = u8 [a0 + 0xb]\n  1917: a2 = a2 << 0x8\n  1920: a2 = a2 | a3\n  1923: a4 = a4 << 0x10\n  1926: a5 = a5 << 0x18\n  1929: a4 = a4 | a5\n  1932: a2 = a2 | a4\n  1935: a3 = u8 [a0 + 0xd]\n  1938: a4 = u8 [a0 + 0xc]\n  1941: a5 = u8 [a0 + 0xe]\n  1944: a1 = u8 [a0 + 0xf]\n  1947: a3 = a3 << 0x8\n  1950: a3 = a3 | a4\n  1953: a5 = a5 << 0x10\n  1956: a1 = a1 << 0x18\n  1959: a1 = a1 | a5\n  1962: a1 = a1 | a3\n  1965: a1 = a1 << 0x20\n  1968: t1 = a1 | a2\n  1971: a1 = u8 [a0 + 0x11]\n  1974: a3 = u8 [a0 + 0x10]\n  1977: a4 = u8 [a0 + 0x12]\n  1980: a5 = u8 [a0 + 0x13]\n  1983: a1 = a1 << 0x8\n  1986: a1 = a1 | a3\n  1989: a4 = a4 << 0x10\n  1992: a5 = a5 << 0x18\n  1995: a4 = a4 | a5\n  1998: a1 = a1 | a4\n  2001: a3 = u8 [a0 + 0x15]\n  2004: a4 = u8 [a0 + 0x14]\n  2007: a5 = u8 [a0 + 0x16]\n  2010: a2 = u8 [a0 + 0x17]\n  2013: a3 = a3 << 0x8\n  2016: a3 = a3 | a4\n  2019: a5 = a5 << 0x10\n  2022: a2 = a2 << 0x18\n  2025: a2 = a2 | a5\n  2028: a2 = a2 | a3\n  2031: a2 = a2 << 0x20\n  2034: a3 = a2 | a1\n  2037: a1 = u8 [a0 + 0x19]\n  2040: a2 = u8 [a0 + 0x18]\n  2043: a4 = u8 [a0 + 0x1a]\n  2046: a5 = u8 [a0 + 0x1b]\n  2049: a1 = a1 << 0x8\n  2052: a1 = a1 | a2\n  2055: a4 = a4 << 0x10\n  2058: a5 = a5 << 0x18\n  2061: a4 = a4 | a5\n  2064: a1 = a1 | a4\n  2067: a2 = u8 [a0 + 0x1d]\n  2070: a4 = u8 [a0 + 0x1c]\n  2073: a5 = u8 [a0 + 0x1e]\n  2076: a0 = u8 [a0 + 0x1f]\n  2079: a2 = a2 << 0x8\n  2082: a2 = a2 | a4\n  2085: a5 = a5 << 0x10\n  2088: a0 = a0 << 0x18\n  2091: a0 = a0 | a5\n  2094: a0 = a0 | a2\n  2097: a0 = a0 << 0x20\n  2100: a0 = a0 | a1\n  2103: a0 = reverse a0\n  2105: a1 = reverse a3\n  2107: a2 = reverse t1\n  2109: a3 = reverse t0\n  2111: u64 [s0 + 0x18] = a3\n  2114: u64 [s0 + 0x10] = a2\n  2117: u64 [s0 + 0x8] = a1\n  2120: u64 [s0] = a0\n  2122: ra = u64 [sp + 0x8]\n  2125: s0 = u64 [sp]\n  2127: sp = sp + 0x10\n  2130: ret\n      : @54 (gas: 47)\n  2132: sp = sp + 0xffffffffffffff60\n  2136: u64 [sp + 0x98] = ra\n  2140: u64 [sp + 0x90] = s0\n  2144: u64 [sp + 0x88] = s1\n  2148: s0 = sp + 0xa0\n  2152: sp = sp & 0xffffffffffffffe0\n  2155: t0 = u64 [a1 + 0x10]\n  2158: a5 = u64 [a1 + 0x8]\n  2161: a3 = u64 [a2 + 0x8]\n  2164: ra = u64 [a1]\n  2166: a4 = u64 [a2]\n  2168: u64 [sp + 0x48] = a4\n  2171: t2 = u64 [a2 + 0x10]\n  2174: t1 = a3 ^ a5\n  2177: s1 = a3 <u a5\n  2180: a4 = a4 <u ra\n  2183: u64 [sp + 0x40] = a4\n  2186: s1 = a4 if t1 == 0\n  2189: t1 = u64 [a1 + 0x18]\n  2192: a1 = u64 [a2 + 0x18]\n  2195: u64 [sp + 0x38] = a1\n  2198: a2 = t2 - t0\n  2201: a1 = a2 - s1\n  2204: u64 [sp + 0x50] = a1\n  2207: a1 = a2 <u s1\n  2210: a4 = t2 <u t0\n  2213: u64 [sp + 0x58] = t1\n  2216: a2 = u64 [sp + 0x38]\n  2219: a2 = a2 - t1\n  2222: a2 = a2 - a4\n  2225: a2 = a2 - a1\n  2228: a1 = a3 - a5\n  2231: a3 = u64 [sp + 0x40]\n  2234: a1 = a1 - a3\n  2237: a3 = u64 [sp + 0x48]\n  2240: a3 = a3 - ra\n  2243: a4 = a1 >u 0\n  2245: a3 = a3 <u 0x60\n  2248: a3 = a3 ^ 0x1\n  2251: a3 = a4 if a1 != 0\n  2254: s1 = a2 >s 0\n  2256: a1 = u64 [sp + 0x50]\n  2259: a4 = a1 >u 0\n  2261: a4 = s1 if a2 != 0\n  2264: a1 = a1 | a2\n  2267: a3 = a4 if a1 != 0\n  2270: jump @63 if a3 == 0\n      : @55 (gas: 12)\n  2274: s1 = a0\n  2276: a0 = ra | t0\n  2279: u64 [sp + 0x50] = a5\n  2282: a1 = u64 [sp + 0x58]\n  2285: a1 = a1 | a5\n  2288: a0 = a0 | a1\n  2291: a0 = a0 >> 0x20\n  2294: u64 [sp + 0x38] = t0\n  2297: a1 = a1 | t0\n  2300: a1 = a1 << 0x20\n  2303: a0 = a0 | a1\n  2306: jump @62 if a0 != 0\n      : @56 (gas: 6)\n  2310: u64 [sp + 0x48] = ra\n  2313: i32 a1 = ra + 0\n  2315: i32 a0 = sp + 0x60\n  2318: u64 [sp + 0x40] = a1\n  2321: ecalli 1 // 'call_data_load'\n  2323: fallthrough\n      : @57 (gas: 10)\n  2324: a3 = u64 [sp + 0x70]\n  2327: a4 = u64 [sp + 0x78]\n  2330: a0 = 0x100000000\n  2340: a1 = a3 ^ a0\n  2343: a1 = a1 | a4\n  2346: a2 = a3 >> 0x20\n  2349: a2 = a2 <u 0x1\n  2352: a2 = 0 if a4 != 0\n  2354: a2 = 0 if a1 == 0\n  2356: jump @63 if a2 == 0\n      : @58 (gas: 13)\n  2360: u64 [sp + 0x28] = a4\n  2363: u64 [sp + 0x30] = a3\n  2366: a1 = u64 [sp + 0x38]\n  2369: a2 = u64 [sp + 0x58]\n  2372: a2 = a2 | a1\n  2375: a0 = 0xffffffe0\n  2385: a1 = u64 [sp + 0x48]\n  2388: a0 = a1 <u a0\n  2391: a1 = u64 [sp + 0x50]\n  2394: a0 = 0 if a1 != 0\n  2396: u64 [sp + 0x58] = a2\n  2399: a0 = 0 if a2 != 0\n  2401: jump @62 if a0 == 0\n      : @59 (gas: 9)\n  2405: a0 = u64 [sp + 0x68]\n  2408: u64 [sp + 0x20] = a0\n  2411: a0 = u64 [sp + 0x60]\n  2414: u64 [sp + 0x38] = a0\n  2417: a0 = u64 [sp + 0x40]\n  2420: i32 a1 = a0 + 0x20\n  2423: i32 a0 = sp + 0x60\n  2426: ecalli 1 // 'call_data_load'\n  2428: fallthrough\n      : @60 (gas: 8)\n  2429: a0 = 0xffffffc0\n  2439: a1 = u64 [sp + 0x48]\n  2442: a0 = a1 <u a0\n  2445: a1 = u64 [sp + 0x50]\n  2448: a0 = 0 if a1 != 0\n  2450: a1 = u64 [sp + 0x58]\n  2453: a0 = 0 if a1 != 0\n  2455: jump @62 if a0 == 0\n      : @61 (gas: 42)\n  2459: a0 = u64 [sp + 0x78]\n  2462: u64 [sp + 0x18] = a0\n  2465: a0 = u64 [sp + 0x70]\n  2468: u64 [sp + 0x48] = a0\n  2471: a0 = u64 [sp + 0x68]\n  2474: u64 [sp + 0x50] = a0\n  2477: a0 = u64 [sp + 0x60]\n  2480: u64 [sp + 0x58] = a0\n  2483: a0 = u64 [sp + 0x40]\n  2486: i32 a1 = a0 + 0x40\n  2489: i32 a0 = sp + 0x60\n  2492: ecalli 1 // 'call_data_load'\n  2494: a0 = u64 [sp + 0x78]\n  2497: a1 = u64 [sp + 0x70]\n  2500: a2 = u64 [sp + 0x68]\n  2503: a3 = u64 [sp + 0x60]\n  2506: u64 [s1 + 0x58] = a0\n  2509: u64 [s1 + 0x50] = a1\n  2512: u64 [s1 + 0x48] = a2\n  2515: u64 [s1 + 0x40] = a3\n  2518: a0 = u64 [sp + 0x18]\n  2521: u64 [s1 + 0x38] = a0\n  2524: a0 = u64 [sp + 0x48]\n  2527: u64 [s1 + 0x30] = a0\n  2530: a0 = u64 [sp + 0x50]\n  2533: u64 [s1 + 0x28] = a0\n  2536: a0 = u64 [sp + 0x58]\n  2539: u64 [s1 + 0x20] = a0\n  2542: a0 = u64 [sp + 0x28]\n  2545: u64 [s1 + 0x18] = a0\n  2548: a0 = u64 [sp + 0x30]\n  2551: u64 [s1 + 0x10] = a0\n  2554: a0 = u64 [sp + 0x20]\n  2557: u64 [s1 + 0x8] = a0\n  2560: a0 = u64 [sp + 0x38]\n  2563: u64 [s1] = a0\n  2565: sp = s0 + 0xffffffffffffff60\n  2569: ra = u64 [sp + 0x98]\n  2573: s0 = u64 [sp + 0x90]\n  2577: s1 = u64 [sp + 0x88]\n  2581: sp = sp + 0xa0\n  2585: ret\n      : @62 (gas: 1)\n  2587: trap\n      : @63 (gas: 3)\n  2588: a0 = 0\n  2590: a1 = 0\n  2592: ra = 44, jump @0\n      : @64 [@dyn 22] (gas: 6)\n  2597: i32 a1 = a0 + 0\n  2599: a0 = 0x1\n  2602: a2 = 0\n  2604: ra = 0x2e\n  2607: ecalli 6 // 'seal_return'\n  2609: fallthrough\n      : @65 [@dyn 23] (gas: 13)\n  2610: a2 = u64 [a1 + 0x10]\n  2613: a3 = u64 [a1 + 0x18]\n  2616: a4 = u64 [a1 + 0x8]\n  2619: a1 = u64 [a1]\n  2621: a3 = a3 | a4\n  2624: a1 = a1 | a2\n  2627: a1 = a1 | a3\n  2630: a1 = a1 >u 0\n  2632: u64 [a0 + 24] = 0\n  2635: u64 [a0 + 16] = 0\n  2638: u64 [a0 + 8] = 0\n  2641: u64 [a0] = a1\n  2643: ret\n      : @66 (gas: 8)\n  2645: a0 = u64 [sp + 0x150]\n  2649: a1 = u64 [sp + 0x158]\n  2653: a2 = u64 [sp + 0x148]\n  2657: a3 = u64 [sp + 0x140]\n  2661: a1 = a1 | a2\n  2664: a0 = a0 | a3\n  2667: a0 = a0 | a1\n  2670: jump @72 if a0 != 0\n      : @67 (gas: 13)\n  2674: a0 = u32 [0x20004]\n  2679: u64 [sp + 184] = 0\n  2683: u64 [sp + 176] = 0\n  2687: u64 [sp + 168] = 0\n  2691: u64 [sp + 0xa0] = a0\n  2695: u64 [sp + 216] = 0\n  2699: u64 [sp + 208] = 0\n  2703: u64 [sp + 192] = 0x4\n  2708: a0 = sp + 0xe0\n  2712: a1 = sp + 0xc0\n  2716: a2 = sp + 0xa0\n  2720: u64 [sp + 200] = 0\n  2724: ra = 48, jump @54\n      : @68 [@dyn 24] (gas: 63)\n  2729: a0 = u64 [sp + 0xe0]\n  2733: u64 [sp + 0x18] = a0\n  2736: t1 = u64 [sp + 0xe8]\n  2740: t2 = u64 [sp + 0xf0]\n  2744: ra = u64 [sp + 0xf8]\n  2748: t0 = u64 [sp + 0x100]\n  2752: a5 = u64 [sp + 0x108]\n  2756: s1 = u64 [sp + 0x110]\n  2760: a4 = u64 [sp + 0x118]\n  2764: a3 = u64 [sp + 0x120]\n  2768: a1 = u64 [sp + 0x128]\n  2772: a2 = u64 [sp + 0x130]\n  2776: a0 = u64 [sp + 0x138]\n  2780: u64 [sp + 0x38] = a0\n  2783: u64 [sp + 0x30] = a2\n  2786: u64 [sp + 0x28] = a1\n  2789: u64 [sp + 0x20] = a3\n  2792: u64 [sp + 0x58] = a4\n  2795: u64 [sp + 0x50] = s1\n  2798: u64 [sp + 0x48] = a5\n  2801: u64 [sp + 0x40] = t0\n  2804: u64 [sp + 0x78] = ra\n  2807: u64 [sp + 0x70] = t2\n  2810: u64 [sp + 0x68] = t1\n  2813: a0 = sp + 0x80\n  2817: a1 = sp + 0x60\n  2820: a2 = sp + 0x40\n  2823: a3 = sp + 0x20\n  2826: a4 = u64 [sp + 0x18]\n  2829: u64 [sp + 0x60] = a4\n  2832: ra = 0x32\n  2835: sp = sp + 0xffffffffffffff00\n  2839: u64 [sp + 0xf8] = ra\n  2843: u64 [sp + 0xf0] = s0\n  2847: u64 [sp + 0xe8] = s1\n  2851: s0 = sp + 0x100\n  2855: sp = sp & 0xffffffffffffffe0\n  2858: a4 = u64 [a3 + 0x18]\n  2861: u64 [sp + 0x38] = a4\n  2864: a4 = u64 [a3 + 0x10]\n  2867: u64 [sp + 0x58] = a4\n  2870: a4 = u64 [a3 + 0x8]\n  2873: u64 [sp + 0x40] = a4\n  2876: a3 = u64 [a3]\n  2878: u64 [sp + 0x48] = a3\n  2881: a3 = u64 [a2 + 0x8]\n  2884: u64 [sp + 0x30] = a3\n  2887: a3 = u64 [a2]\n  2889: u64 [sp + 0x28] = a3\n  2892: a3 = u64 [a2 + 0x18]\n  2895: u64 [sp + 0x20] = a3\n  2898: a2 = u64 [a2 + 0x10]\n  2901: u64 [sp + 0x18] = a2\n  2904: a2 = u64 [a1]\n  2906: u64 [sp + 0x10] = a2\n  2909: a2 = u64 [a1 + 0x8]\n  2912: u64 [sp + 0x8] = a2\n  2915: s1 = u32 [a1 + 0x10]\n  2918: u64 [sp + 0x50] = a0\n  2921: a1 = 0x20\n  2924: a0 = 0\n  2926: ra = 0xb0\n  2930: jump @0\n      : @69 [@dyn 25] (gas: 11)\n  2933: a0 = u64 [sp + 0x98]\n  2937: u64 [sp + 0x18] = a0\n  2940: a0 = u64 [sp + 0x90]\n  2944: u64 [sp + 0x8] = a0\n  2947: a0 = u64 [sp + 0x88]\n  2951: u64 [sp + 0x10] = a0\n  2954: a0 = u64 [sp + 0x80]\n  2958: u64 [sp] = a0\n  2960: a0 = 0x40\n  2963: a1 = 0x20\n  2966: ra = 52, jump @0\n      : @70 [@dyn 26] (gas: 100)\n  2971: a1 = u8 [a0 + 0x11]\n  2974: a2 = u8 [a0 + 0x10]\n  2977: a3 = u8 [a0 + 0x12]\n  2980: a4 = u8 [a0 + 0x13]\n  2983: a1 = a1 << 0x8\n  2986: a1 = a1 | a2\n  2989: a3 = a3 << 0x10\n  2992: a4 = a4 << 0x18\n  2995: a3 = a3 | a4\n  2998: a1 = a1 | a3\n  3001: a2 = u8 [a0 + 0x15]\n  3004: a3 = u8 [a0 + 0x14]\n  3007: a4 = u8 [a0 + 0x16]\n  3010: a5 = u8 [a0 + 0x17]\n  3013: a2 = a2 << 0x8\n  3016: a2 = a2 | a3\n  3019: a4 = a4 << 0x10\n  3022: a5 = a5 << 0x18\n  3025: a4 = a4 | a5\n  3028: a2 = a2 | a4\n  3031: a2 = a2 << 0x20\n  3034: t0 = a2 | a1\n  3037: a2 = u8 [a0 + 0x1]\n  3040: a3 = u8 [a0]\n  3042: a4 = u8 [a0 + 0x2]\n  3045: a5 = u8 [a0 + 0x3]\n  3048: a2 = a2 << 0x8\n  3051: a2 = a2 | a3\n  3054: a4 = a4 << 0x10\n  3057: a5 = a5 << 0x18\n  3060: a4 = a4 | a5\n  3063: a2 = a2 | a4\n  3066: a3 = u8 [a0 + 0x5]\n  3069: a4 = u8 [a0 + 0x4]\n  3072: a5 = u8 [a0 + 0x6]\n  3075: s1 = u8 [a0 + 0x7]\n  3078: a3 = a3 << 0x8\n  3081: a3 = a3 | a4\n  3084: a5 = a5 << 0x10\n  3087: s1 = s1 << 0x18\n  3090: a5 = a5 | s1\n  3093: a3 = a3 | a5\n  3096: a3 = a3 << 0x20\n  3099: a2 = a2 | a3\n  3102: a3 = u8 [a0 + 0x19]\n  3105: a4 = u8 [a0 + 0x18]\n  3108: a5 = u8 [a0 + 0x1a]\n  3111: s1 = u8 [a0 + 0x1b]\n  3114: a3 = a3 << 0x8\n  3117: a3 = a3 | a4\n  3120: a5 = a5 << 0x10\n  3123: s1 = s1 << 0x18\n  3126: a5 = a5 | s1\n  3129: a3 = a3 | a5\n  3132: a4 = u8 [a0 + 0x1d]\n  3135: a5 = u8 [a0 + 0x1c]\n  3138: s1 = u8 [a0 + 0x1e]\n  3141: a1 = u8 [a0 + 0x1f]\n  3144: a4 = a4 << 0x8\n  3147: a4 = a4 | a5\n  3150: s1 = s1 << 0x10\n  3153: a1 = a1 << 0x18\n  3156: a1 = a1 | s1\n  3159: a1 = a1 | a4\n  3162: a1 = a1 << 0x20\n  3165: a3 = a3 | a1\n  3168: a1 = u8 [a0 + 0x9]\n  3171: a4 = u8 [a0 + 0x8]\n  3174: a5 = u8 [a0 + 0xa]\n  3177: s1 = u8 [a0 + 0xb]\n  3180: a1 = a1 << 0x8\n  3183: a1 = a1 | a4\n  3186: a5 = a5 << 0x10\n  3189: s1 = s1 << 0x18\n  3192: a5 = a5 | s1\n  3195: a1 = a1 | a5\n  3198: a4 = u8 [a0 + 0xd]\n  3201: a5 = u8 [a0 + 0xc]\n  3204: s1 = u8 [a0 + 0xe]\n  3207: a0 = u8 [a0 + 0xf]\n  3210: a4 = a4 << 0x8\n  3213: a4 = a4 | a5\n  3216: s1 = s1 << 0x10\n  3219: a0 = a0 << 0x18\n  3222: a0 = a0 | s1\n  3225: a0 = a0 | a4\n  3228: a0 = a0 << 0x20\n  3231: a0 = a0 | a1\n  3234: a1 = reverse a0\n  3236: a0 = reverse a3\n  3238: a2 = reverse a2\n  3240: a3 = reverse t0\n  3242: a2 = a2 | a3\n  3245: a3 = a0 | a1\n  3248: a3 = a3 | a2\n  3251: a3 = a3 >> 0x20\n  3254: a1 = a1 | a2\n  3257: a1 = a1 << 0x20\n  3260: a1 = a1 | a3\n  3263: jump @74 if a1 == 0\n      : @71 (gas: 1)\n  3266: trap\n      : @72 (gas: 3)\n  3267: a0 = 0\n  3269: a1 = 0\n  3271: ra = 54, jump @0\n      : @73 [@dyn 27] (gas: 5)\n  3276: i32 a1 = a0 + 0\n  3278: a0 = 0x1\n  3281: a2 = 0\n  3283: ecalli 6 // 'seal_return'\n  3285: fallthrough\n      : @74 (gas: 13)\n  3286: a1 = u64 [sp + 0x8]\n  3289: a2 = u64 [sp]\n  3291: a1 = a1 | a2\n  3294: a2 = u64 [sp + 0x18]\n  3297: a3 = u64 [sp + 0x10]\n  3300: a2 = a2 | a3\n  3303: a1 = a1 | a2\n  3306: a1 = a1 >u 0\n  3308: u64 [sp + 0x18] = a1\n  3311: i32 s1 = a0 + 0\n  3313: a1 = 0x20\n  3316: a0 = s1\n  3318: ra = 56, jump @0\n      : @75 [@dyn 28] (gas: 36)\n  3323: u8 [a0 + 30] = 0\n  3326: u8 [a0 + 29] = 0\n  3329: u8 [a0 + 28] = 0\n  3332: u8 [a0 + 27] = 0\n  3335: u8 [a0 + 26] = 0\n  3338: u8 [a0 + 25] = 0\n  3341: u8 [a0 + 24] = 0\n  3344: u8 [a0 + 23] = 0\n  3347: u8 [a0 + 22] = 0\n  3350: u8 [a0 + 21] = 0\n  3353: u8 [a0 + 20] = 0\n  3356: u8 [a0 + 19] = 0\n  3359: u8 [a0 + 18] = 0\n  3362: u8 [a0 + 17] = 0\n  3365: u8 [a0 + 16] = 0\n  3368: u8 [a0 + 15] = 0\n  3371: u8 [a0 + 14] = 0\n  3374: u8 [a0 + 13] = 0\n  3377: u8 [a0 + 12] = 0\n  3380: u8 [a0 + 11] = 0\n  3383: u8 [a0 + 10] = 0\n  3386: u8 [a0 + 9] = 0\n  3389: u8 [a0 + 8] = 0\n  3392: u8 [a0 + 7] = 0\n  3395: u8 [a0 + 6] = 0\n  3398: u8 [a0 + 5] = 0\n  3401: u8 [a0 + 4] = 0\n  3404: u8 [a0 + 3] = 0\n  3407: u8 [a0 + 2] = 0\n  3410: u8 [a0 + 1] = 0\n  3413: u8 [a0 + 0] = 0\n  3415: a1 = u64 [sp + 0x18]\n  3418: u8 [a0 + 0x1f] = a1\n  3421: a1 = 0x20\n  3424: a0 = s1\n  3426: ra = 58, jump @0\n      : @76 [@dyn 29] (gas: 6)\n  3431: i32 a1 = a0 + 0\n  3433: a2 = 0x20\n  3436: a0 = 0\n  3438: ra = 0x3c\n  3441: ecalli 6 // 'seal_return'\n  3443: fallthrough\n      : @77 [@dyn 30] (gas: 47)\n  3444: sp = sp + 0xffffffffffffff80\n  3447: u64 [sp + 0x78] = ra\n  3450: u64 [sp + 0x70] = s0\n  3453: u64 [sp + 0x68] = s1\n  3456: s0 = sp + 0x80\n  3460: sp = sp & 0xffffffffffffffe0\n  3463: ra = u64 [a1 + 0x10]\n  3466: a5 = u64 [a1 + 0x8]\n  3469: a3 = u64 [a2 + 0x8]\n  3472: t1 = u64 [a1]\n  3474: a4 = u64 [a2]\n  3476: u64 [sp + 0x28] = a4\n  3479: t2 = u64 [a2 + 0x10]\n  3482: t0 = a3 ^ a5\n  3485: s1 = a3 <u a5\n  3488: a4 = a4 <u t1\n  3491: u64 [sp + 0x20] = a4\n  3494: s1 = a4 if t0 == 0\n  3497: t0 = u64 [a1 + 0x18]\n  3500: a1 = u64 [a2 + 0x18]\n  3503: u64 [sp + 0x18] = a1\n  3506: a2 = t2 - ra\n  3509: a1 = a2 - s1\n  3512: u64 [sp + 0x30] = a1\n  3515: a1 = a2 <u s1\n  3518: a4 = t2 <u ra\n  3521: u64 [sp + 0x38] = t0\n  3524: a2 = u64 [sp + 0x18]\n  3527: a2 = a2 - t0\n  3530: a2 = a2 - a4\n  3533: a2 = a2 - a1\n  3536: a1 = a3 - a5\n  3539: a3 = u64 [sp + 0x20]\n  3542: a1 = a1 - a3\n  3545: a3 = u64 [sp + 0x28]\n  3548: a3 = a3 - t1\n  3551: a4 = a1 >u 0\n  3553: a3 = a3 <u 0x40\n  3556: a3 = a3 ^ 0x1\n  3559: a3 = a4 if a1 != 0\n  3562: s1 = a2 >s 0\n  3564: a1 = u64 [sp + 0x30]\n  3567: a4 = a1 >u 0\n  3569: a4 = s1 if a2 != 0\n  3572: a1 = a1 | a2\n  3575: a3 = a4 if a1 != 0\n  3578: jump @84 if a3 == 0\n      : @78 (gas: 12)\n  3582: s1 = a0\n  3584: a0 = t1 | ra\n  3587: u64 [sp + 0x30] = a5\n  3590: a1 = u64 [sp + 0x38]\n  3593: a1 = a1 | a5\n  3596: a0 = a0 | a1\n  3599: a0 = a0 >> 0x20\n  3602: u64 [sp + 0x28] = ra\n  3605: a1 = a1 | ra\n  3608: a1 = a1 << 0x20\n  3611: a0 = a0 | a1\n  3614: jump @83 if a0 != 0\n      : @79 (gas: 6)\n  3618: u64 [sp + 0x20] = t1\n  3621: i32 a1 = t1 + 0\n  3623: i32 a0 = sp + 0x40\n  3626: u64 [sp + 0x8] = a1\n  3629: ecalli 1 // 'call_data_load'\n  3631: fallthrough\n      : @80 (gas: 10)\n  3632: a3 = u64 [sp + 0x50]\n  3635: a4 = u64 [sp + 0x58]\n  3638: a0 = 0x100000000\n  3648: a1 = a3 ^ a0\n  3651: a1 = a1 | a4\n  3654: a2 = a3 >> 0x20\n  3657: a2 = a2 <u 0x1\n  3660: a2 = 0 if a4 != 0\n  3662: a2 = 0 if a1 == 0\n  3664: jump @84 if a2 == 0\n      : @81 (gas: 12)\n  3668: u64 [sp + 0x10] = a4\n  3671: u64 [sp + 0x18] = a3\n  3674: a1 = u64 [sp + 0x28]\n  3677: a2 = u64 [sp + 0x38]\n  3680: a1 = a1 | a2\n  3683: a0 = 0xffffffe0\n  3693: a2 = u64 [sp + 0x20]\n  3696: a0 = a2 <u a0\n  3699: a2 = u64 [sp + 0x30]\n  3702: a0 = 0 if a2 != 0\n  3704: a0 = 0 if a1 != 0\n  3706: jump @83 if a0 == 0\n      : @82 (gas: 30)\n  3709: a0 = u64 [sp + 0x48]\n  3712: u64 [sp + 0x30] = a0\n  3715: a0 = u64 [sp + 0x40]\n  3718: u64 [sp + 0x38] = a0\n  3721: a0 = u64 [sp + 0x8]\n  3724: i32 a1 = a0 + 0x20\n  3727: i32 a0 = sp + 0x40\n  3730: ecalli 1 // 'call_data_load'\n  3732: a0 = u64 [sp + 0x58]\n  3735: a1 = u64 [sp + 0x50]\n  3738: a2 = u64 [sp + 0x48]\n  3741: a3 = u64 [sp + 0x40]\n  3744: u64 [s1 + 0x38] = a0\n  3747: u64 [s1 + 0x30] = a1\n  3750: u64 [s1 + 0x28] = a2\n  3753: u64 [s1 + 0x20] = a3\n  3756: a0 = u64 [sp + 0x10]\n  3759: u64 [s1 + 0x18] = a0\n  3762: a0 = u64 [sp + 0x18]\n  3765: u64 [s1 + 0x10] = a0\n  3768: a0 = u64 [sp + 0x30]\n  3771: u64 [s1 + 0x8] = a0\n  3774: a0 = u64 [sp + 0x38]\n  3777: u64 [s1] = a0\n  3779: sp = s0 + 0xffffffffffffff80\n  3782: ra = u64 [sp + 0x78]\n  3785: s0 = u64 [sp + 0x70]\n  3788: s1 = u64 [sp + 0x68]\n  3791: sp = sp + 0x80\n  3795: ret\n      : @83 (gas: 1)\n  3797: trap\n      : @84 (gas: 3)\n  3798: a0 = 0\n  3800: a1 = 0\n  3802: ra = 62, jump @0\n      : @85 [@dyn 31] (gas: 6)\n  3807: i32 a1 = a0 + 0\n  3809: a0 = 0x1\n  3812: a2 = 0\n  3814: ra = 0x40\n  3817: ecalli 6 // 'seal_return'\n  3819: fallthrough\n      : @86 [@dyn 32] (gas: 9)\n  3820: a2 = u64 [a1 + 0x18]\n  3823: a3 = u64 [a1 + 0x10]\n  3826: a4 = u64 [a1 + 0x8]\n  3829: a1 = u64 [a1]\n  3831: u64 [a0 + 0x18] = a2\n  3834: u64 [a0 + 0x10] = a3\n  3837: u64 [a0 + 0x8] = a4\n  3840: u64 [a0] = a1\n  3842: ret\n      : @87 [@dyn 33] (gas: 58)\n  3844: a1 = reverse s1\n  3846: a2 = u64 [sp + 0x8]\n  3849: a2 = reverse a2\n  3851: a3 = u64 [sp + 0x10]\n  3854: a3 = reverse a3\n  3856: a4 = a3 >> 0x38\n  3859: u8 [a0 + 0x1f] = a4\n  3862: a4 = a3 >> 0x30\n  3865: u8 [a0 + 0x1e] = a4\n  3868: a4 = a3 >> 0x28\n  3871: u8 [a0 + 0x1d] = a4\n  3874: a4 = a3 >> 0x20\n  3877: u8 [a0 + 0x1c] = a4\n  3880: a4 = a3 >> 0x18\n  3883: u8 [a0 + 0x1b] = a4\n  3886: a4 = a3 >> 0x10\n  3889: u8 [a0 + 0x1a] = a4\n  3892: a4 = a3 >> 0x8\n  3895: u8 [a0 + 0x19] = a4\n  3898: u8 [a0 + 0x18] = a3\n  3901: a3 = a2 >> 0x38\n  3904: u8 [a0 + 0x17] = a3\n  3907: a3 = a2 >> 0x30\n  3910: u8 [a0 + 0x16] = a3\n  3913: a3 = a2 >> 0x28\n  3916: u8 [a0 + 0x15] = a3\n  3919: a3 = a2 >> 0x20\n  3922: u8 [a0 + 0x14] = a3\n  3925: a3 = a2 >> 0x18\n  3928: u8 [a0 + 0x13] = a3\n  3931: a3 = a2 >> 0x10\n  3934: u8 [a0 + 0x12] = a3\n  3937: a3 = a2 >> 0x8\n  3940: u8 [a0 + 0x11] = a3\n  3943: u8 [a0 + 0x10] = a2\n  3946: a2 = a1 >> 0x38\n  3949: u8 [a0 + 0xf] = a2\n  3952: a2 = a1 >> 0x30\n  3955: u8 [a0 + 0xe] = a2\n  3958: a2 = a1 >> 0x28\n  3961: u8 [a0 + 0xd] = a2\n  3964: a2 = a1 >> 0x20\n  3967: u8 [a0 + 0xc] = a2\n  3970: u8 [a0 + 11] = 0\n  3973: u8 [a0 + 10] = 0\n  3976: u8 [a0 + 9] = 0\n  3979: u8 [a0 + 0x8] = a1\n  3982: u8 [a0 + 7] = 0\n  3985: u8 [a0 + 6] = 0\n  3988: u8 [a0 + 5] = 0\n  3991: u8 [a0 + 4] = 0\n  3994: u8 [a0 + 3] = 0\n  3997: u8 [a0 + 2] = 0\n  4000: u8 [a0 + 1] = 0\n  4003: u8 [a0 + 0] = 0\n  4005: a0 = 0x20\n  4008: a1 = 0x20\n  4011: ra = 68, jump @0\n      : @88 [@dyn 34] (gas: 35)\n  4016: u8 [a0 + 31] = 0\n  4019: u8 [a0 + 30] = 0\n  4022: u8 [a0 + 29] = 0\n  4025: u8 [a0 + 28] = 0\n  4028: u8 [a0 + 27] = 0\n  4031: u8 [a0 + 26] = 0\n  4034: u8 [a0 + 25] = 0\n  4037: u8 [a0 + 24] = 0\n  4040: u8 [a0 + 23] = 0\n  4043: u8 [a0 + 22] = 0\n  4046: u8 [a0 + 21] = 0\n  4049: u8 [a0 + 20] = 0\n  4052: u8 [a0 + 19] = 0\n  4055: u8 [a0 + 18] = 0\n  4058: u8 [a0 + 17] = 0\n  4061: u8 [a0 + 16] = 0\n  4064: u8 [a0 + 15] = 0\n  4067: u8 [a0 + 14] = 0\n  4070: u8 [a0 + 13] = 0\n  4073: u8 [a0 + 12] = 0\n  4076: u8 [a0 + 11] = 0\n  4079: u8 [a0 + 10] = 0\n  4082: u8 [a0 + 9] = 0\n  4085: u8 [a0 + 8] = 0\n  4088: u8 [a0 + 7] = 0\n  4091: u8 [a0 + 6] = 0\n  4094: u8 [a0 + 5] = 0\n  4097: u8 [a0 + 4] = 0\n  4100: u8 [a0 + 3] = 0\n  4103: u8 [a0 + 2] = 0\n  4106: u8 [a0 + 1] = 0\n  4109: u8 [a0 + 0] = 0\n  4111: a1 = 0x40\n  4114: a0 = 0\n  4116: ra = 70, jump @0\n      : @89 [@dyn 35] (gas: 5)\n  4121: i32 a0 = a0 + 0\n  4123: i32 a2 = sp + 0x60\n  4126: a1 = 0x40\n  4129: ecalli 5 // 'hash_keccak_256'\n  4131: fallthrough\n      : @90 (gas: 9)\n  4132: a4 = u64 [sp + 0x30]\n  4135: a5 = u64 [sp + 0x28]\n  4138: t1 = u64 [sp + 0x18]\n  4141: t0 = u64 [sp + 0x20]\n  4144: a0 = t1 | t0\n  4147: a1 = a5 <u 0x11\n  4150: a1 = 0 if a4 != 0\n  4152: a1 = 0 if a0 != 0\n  4154: jump @92 if a1 == 0\n      : @91 (gas: 52)\n  4158: a0 = u64 [sp + 0x60]\n  4161: a1 = u64 [sp + 0x68]\n  4164: a2 = u64 [sp + 0x78]\n  4167: a3 = u64 [sp + 0x70]\n  4170: a0 = reverse a0\n  4172: a1 = reverse a1\n  4174: a2 = reverse a2\n  4176: a3 = reverse a3\n  4178: a4 = a4 + a3\n  4181: a5 = a5 + a2\n  4184: a2 = a5 <u a2\n  4187: a4 = a4 + a2\n  4190: s1 = a4 ^ a3\n  4193: a3 = a4 <u a3\n  4196: a3 = a2 if s1 == 0\n  4199: a2 = a1 + t1\n  4202: a3 = a3 + a2\n  4205: s1 = a3 <u a2\n  4208: a1 = a2 <u a1\n  4211: a0 = a0 + t0\n  4214: a0 = a0 + a1\n  4217: a0 = a0 + s1\n  4220: u64 [sp + 0x40] = a5\n  4223: u64 [sp + 0x48] = a4\n  4226: u64 [sp + 0x50] = a3\n  4229: u64 [sp + 0x58] = a0\n  4232: u64 [sp + 120] = 0\n  4235: u64 [sp + 112] = 0\n  4238: u64 [sp + 104] = 0\n  4241: u64 [sp + 96] = 0\n  4244: u32 [sp + 128] = 0x20\n  4249: i32 a1 = sp + 0x40\n  4252: i32 a3 = sp + 0x60\n  4255: i32 a4 = sp + 0x80\n  4259: a2 = 0xffffffffffffffff\n  4262: a0 = 0\n  4264: ecalli 4 // 'get_storage'\n  4266: a0 = u64 [sp + 0x78]\n  4269: a1 = u64 [sp + 0x70]\n  4272: a2 = u64 [sp + 0x68]\n  4275: a3 = u64 [sp + 0x60]\n  4278: a4 = u64 [sp + 0x38]\n  4281: u64 [a4 + 0x18] = a0\n  4284: u64 [a4 + 0x10] = a1\n  4287: u64 [a4 + 0x8] = a2\n  4290: u64 [a4] = a3\n  4292: sp = s0 + 0xffffffffffffff60\n  4296: ra = u64 [sp + 0x98]\n  4300: s0 = u64 [sp + 0x90]\n  4304: s1 = u64 [sp + 0x88]\n  4308: sp = sp + 0xa0\n  4312: ret\n      : @92 (gas: 2)\n  4314: a0 = 0\n  4316: ra = 72, jump @0\n      : @93 [@dyn 36] (gas: 6)\n  4321: i32 a1 = a0 + 0\n  4323: a0 = 0x1\n  4326: a2 = 0\n  4328: ra = 0x4a\n  4331: ecalli 6 // 'seal_return'\n  4333: fallthrough\n      : @94 [@dyn 37] (gas: 17)\n  4334: sp = sp + 0xffffffffffffffa8\n  4337: u64 [sp + 0x50] = ra\n  4340: u64 [sp + 0x48] = s0\n  4343: u64 [sp + 0x40] = s1\n  4346: a3 = u64 [a1 + 0x10]\n  4349: s1 = u64 [a1 + 0x18]\n  4352: a5 = u64 [a1 + 0x8]\n  4355: s0 = u64 [a1]\n  4357: a4 = a5 | s1\n  4360: a1 = s0 | a3\n  4363: a1 = a1 | a4\n  4366: a1 = a1 >> 0x20\n  4369: a4 = a4 | a3\n  4372: a4 = a4 << 0x20\n  4375: a1 = a1 | a4\n  4378: u64 [sp + 0x38] = a0\n  4381: jump @97 if a1 != 0\n      : @95 (gas: 22)\n  4385: a0 = u64 [a2 + 0x18]\n  4388: u64 [sp] = a0\n  4390: a0 = u64 [a2 + 0x10]\n  4393: u64 [sp + 0x8] = a0\n  4396: a0 = u64 [a2 + 0x8]\n  4399: u64 [sp + 0x10] = a0\n  4402: a0 = u64 [a2]\n  4404: u64 [sp + 0x18] = a0\n  4407: a0 = s0 + 0x20\n  4410: u64 [sp + 0x30] = a0\n  4413: a0 = a0 <u s0\n  4416: a1 = a5 + a0\n  4419: u64 [sp + 0x28] = a1\n  4422: a1 = a1 <u a5\n  4425: a1 = a0 if a0 == 0\n  4428: a1 = a1 + a3\n  4431: u64 [sp + 0x20] = a1\n  4434: a0 = a1 <u a3\n  4437: s1 = s1 + a0\n  4440: i32 a0 = s0 + 0\n  4442: a1 = 0x20\n  4445: ra = 76, jump @0\n      : @96 [@dyn 38] (gas: 81)\n  4450: a1 = u64 [sp]\n  4452: a1 = reverse a1\n  4454: a2 = u64 [sp + 0x8]\n  4457: a2 = reverse a2\n  4459: a3 = u64 [sp + 0x10]\n  4462: a3 = reverse a3\n  4464: a4 = u64 [sp + 0x18]\n  4467: a4 = reverse a4\n  4469: a5 = a4 >> 0x38\n  4472: u8 [a0 + 0x1f] = a5\n  4475: a5 = a4 >> 0x30\n  4478: u8 [a0 + 0x1e] = a5\n  4481: a5 = a4 >> 0x28\n  4484: u8 [a0 + 0x1d] = a5\n  4487: a5 = a4 >> 0x20\n  4490: u8 [a0 + 0x1c] = a5\n  4493: a5 = a4 >> 0x18\n  4496: u8 [a0 + 0x1b] = a5\n  4499: a5 = a4 >> 0x10\n  4502: u8 [a0 + 0x1a] = a5\n  4505: a5 = a4 >> 0x8\n  4508: u8 [a0 + 0x19] = a5\n  4511: u8 [a0 + 0x18] = a4\n  4514: u8 [a0 + 0x10] = a3\n  4517: a4 = a3 >> 0x38\n  4520: u8 [a0 + 0x17] = a4\n  4523: a4 = a3 >> 0x30\n  4526: u8 [a0 + 0x16] = a4\n  4529: a4 = a3 >> 0x28\n  4532: u8 [a0 + 0x15] = a4\n  4535: a4 = a3 >> 0x20\n  4538: u8 [a0 + 0x14] = a4\n  4541: a4 = a3 >> 0x18\n  4544: u8 [a0 + 0x13] = a4\n  4547: a4 = a3 >> 0x10\n  4550: u8 [a0 + 0x12] = a4\n  4553: a3 = a3 >> 0x8\n  4556: u8 [a0 + 0x11] = a3\n  4559: u8 [a0 + 0x8] = a2\n  4562: a3 = a2 >> 0x38\n  4565: u8 [a0 + 0xf] = a3\n  4568: a3 = a2 >> 0x30\n  4571: u8 [a0 + 0xe] = a3\n  4574: a3 = a2 >> 0x28\n  4577: u8 [a0 + 0xd] = a3\n  4580: a3 = a2 >> 0x20\n  4583: u8 [a0 + 0xc] = a3\n  4586: a3 = a2 >> 0x18\n  4589: u8 [a0 + 0xb] = a3\n  4592: a3 = a2 >> 0x10\n  4595: u8 [a0 + 0xa] = a3\n  4598: a2 = a2 >> 0x8\n  4601: u8 [a0 + 0x9] = a2\n  4604: u8 [a0] = a1\n  4606: a2 = a1 >> 0x38\n  4609: u8 [a0 + 0x7] = a2\n  4612: a2 = a1 >> 0x30\n  4615: u8 [a0 + 0x6] = a2\n  4618: a2 = a1 >> 0x28\n  4621: u8 [a0 + 0x5] = a2\n  4624: a2 = a1 >> 0x20\n  4627: u8 [a0 + 0x4] = a2\n  4630: a2 = a1 >> 0x18\n  4633: u8 [a0 + 0x3] = a2\n  4636: a2 = a1 >> 0x10\n  4639: u8 [a0 + 0x2] = a2\n  4642: a1 = a1 >> 0x8\n  4645: u8 [a0 + 0x1] = a1\n  4648: a0 = u64 [sp + 0x38]\n  4651: a1 = u64 [sp + 0x30]\n  4654: u64 [a0] = a1\n  4656: a1 = u64 [sp + 0x28]\n  4659: u64 [a0 + 0x8] = a1\n  4662: a1 = u64 [sp + 0x20]\n  4665: u64 [a0 + 0x10] = a1\n  4668: u64 [a0 + 0x18] = s1\n  4671: ra = u64 [sp + 0x50]\n  4674: s0 = u64 [sp + 0x48]\n  4677: s1 = u64 [sp + 0x40]\n  4680: sp = sp + 0x58\n  4683: ret\n      : @97 (gas: 1)\n  4685: trap\n      : @98 (gas: 8)\n  4686: a0 = u64 [sp + 0x110]\n  4690: a1 = u64 [sp + 0x118]\n  4694: a2 = u64 [sp + 0x108]\n  4698: a3 = u64 [sp + 0x100]\n  4702: a1 = a1 | a2\n  4705: a0 = a0 | a3\n  4708: a0 = a0 | a1\n  4711: jump @104 if a0 != 0\n      : @99 (gas: 13)\n  4715: a0 = u32 [0x20004]\n  4720: u64 [sp + 152] = 0\n  4724: u64 [sp + 144] = 0\n  4728: u64 [sp + 136] = 0\n  4732: u64 [sp + 0x80] = a0\n  4736: u64 [sp + 184] = 0\n  4740: u64 [sp + 176] = 0\n  4744: u64 [sp + 160] = 0x4\n  4749: a0 = sp + 0xc0\n  4753: a1 = sp + 0xa0\n  4757: a2 = sp + 0x80\n  4761: u64 [sp + 168] = 0\n  4765: ra = 78, jump @77\n      : @100 [@dyn 39] (gas: 44)\n  4770: t0 = u64 [sp + 0xc0]\n  4774: a0 = u64 [sp + 0xc8]\n  4778: a1 = u64 [sp + 0xd0]\n  4782: a2 = u64 [sp + 0xd8]\n  4786: a4 = u64 [sp + 0xe0]\n  4790: a5 = u64 [sp + 0xe8]\n  4794: s1 = u64 [sp + 0xf0]\n  4798: a3 = u64 [sp + 0xf8]\n  4802: u64 [sp + 0x38] = a3\n  4805: u64 [sp + 0x30] = s1\n  4808: u64 [sp + 0x28] = a5\n  4811: u64 [sp + 0x20] = a4\n  4814: u64 [sp + 0x58] = a2\n  4817: u64 [sp + 0x50] = a1\n  4820: u64 [sp + 0x48] = a0\n  4823: a0 = sp + 0x60\n  4826: a1 = sp + 0x40\n  4829: a2 = sp + 0x20\n  4832: u64 [sp + 0x40] = t0\n  4835: ra = 0x50\n  4838: sp = sp + 0xffffffffffffff60\n  4842: u64 [sp + 0x98] = ra\n  4846: u64 [sp + 0x90] = s0\n  4850: u64 [sp + 0x88] = s1\n  4854: s0 = sp + 0xa0\n  4858: sp = sp & 0xffffffffffffffe0\n  4861: a3 = u64 [a2 + 0x8]\n  4864: u64 [sp + 0x30] = a3\n  4867: a3 = u64 [a2]\n  4869: u64 [sp + 0x28] = a3\n  4872: a3 = u64 [a2 + 0x18]\n  4875: u64 [sp + 0x20] = a3\n  4878: a2 = u64 [a2 + 0x10]\n  4881: u64 [sp + 0x18] = a2\n  4884: a2 = u64 [a1]\n  4886: u64 [sp + 0x10] = a2\n  4889: a2 = u64 [a1 + 0x8]\n  4892: u64 [sp + 0x8] = a2\n  4895: s1 = u32 [a1 + 0x10]\n  4898: u64 [sp + 0x38] = a0\n  4901: a1 = 0x20\n  4904: a0 = 0\n  4906: ra = 0x42\n  4909: jump @0\n      : @101 [@dyn 40] (gas: 11)\n  4912: a0 = u64 [sp + 0x78]\n  4915: u64 [sp] = a0\n  4917: a0 = u64 [sp + 0x70]\n  4920: u64 [sp + 0x8] = a0\n  4923: a0 = u64 [sp + 0x68]\n  4926: u64 [sp + 0x10] = a0\n  4929: a0 = u64 [sp + 0x60]\n  4932: u64 [sp + 0x18] = a0\n  4935: a0 = 0x40\n  4938: a1 = 0x20\n  4941: ra = 82, jump @0\n      : @102 [@dyn 41] (gas: 100)\n  4946: a1 = u8 [a0 + 0x11]\n  4949: a2 = u8 [a0 + 0x10]\n  4952: a3 = u8 [a0 + 0x12]\n  4955: a4 = u8 [a0 + 0x13]\n  4958: a1 = a1 << 0x8\n  4961: a1 = a1 | a2\n  4964: a3 = a3 << 0x10\n  4967: a4 = a4 << 0x18\n  4970: a3 = a3 | a4\n  4973: a1 = a1 | a3\n  4976: a2 = u8 [a0 + 0x15]\n  4979: a3 = u8 [a0 + 0x14]\n  4982: a4 = u8 [a0 + 0x16]\n  4985: a5 = u8 [a0 + 0x17]\n  4988: a2 = a2 << 0x8\n  4991: a2 = a2 | a3\n  4994: a4 = a4 << 0x10\n  4997: a5 = a5 << 0x18\n  5000: a4 = a4 | a5\n  5003: a2 = a2 | a4\n  5006: a2 = a2 << 0x20\n  5009: t0 = a2 | a1\n  5012: a2 = u8 [a0 + 0x1]\n  5015: a3 = u8 [a0]\n  5017: a4 = u8 [a0 + 0x2]\n  5020: a5 = u8 [a0 + 0x3]\n  5023: a2 = a2 << 0x8\n  5026: a2 = a2 | a3\n  5029: a4 = a4 << 0x10\n  5032: a5 = a5 << 0x18\n  5035: a4 = a4 | a5\n  5038: a2 = a2 | a4\n  5041: a3 = u8 [a0 + 0x5]\n  5044: a4 = u8 [a0 + 0x4]\n  5047: a5 = u8 [a0 + 0x6]\n  5050: s1 = u8 [a0 + 0x7]\n  5053: a3 = a3 << 0x8\n  5056: a3 = a3 | a4\n  5059: a5 = a5 << 0x10\n  5062: s1 = s1 << 0x18\n  5065: a5 = a5 | s1\n  5068: a3 = a3 | a5\n  5071: a3 = a3 << 0x20\n  5074: a2 = a2 | a3\n  5077: a3 = u8 [a0 + 0x19]\n  5080: a4 = u8 [a0 + 0x18]\n  5083: a5 = u8 [a0 + 0x1a]\n  5086: s1 = u8 [a0 + 0x1b]\n  5089: a3 = a3 << 0x8\n  5092: a3 = a3 | a4\n  5095: a5 = a5 << 0x10\n  5098: s1 = s1 << 0x18\n  5101: a5 = a5 | s1\n  5104: a3 = a3 | a5\n  5107: a4 = u8 [a0 + 0x1d]\n  5110: a5 = u8 [a0 + 0x1c]\n  5113: s1 = u8 [a0 + 0x1e]\n  5116: a1 = u8 [a0 + 0x1f]\n  5119: a4 = a4 << 0x8\n  5122: a4 = a4 | a5\n  5125: s1 = s1 << 0x10\n  5128: a1 = a1 << 0x18\n  5131: a1 = a1 | s1\n  5134: a1 = a1 | a4\n  5137: a1 = a1 << 0x20\n  5140: a3 = a3 | a1\n  5143: a1 = u8 [a0 + 0x9]\n  5146: a4 = u8 [a0 + 0x8]\n  5149: a5 = u8 [a0 + 0xa]\n  5152: s1 = u8 [a0 + 0xb]\n  5155: a1 = a1 << 0x8\n  5158: a1 = a1 | a4\n  5161: a5 = a5 << 0x10\n  5164: s1 = s1 << 0x18\n  5167: a5 = a5 | s1\n  5170: a1 = a1 | a5\n  5173: a4 = u8 [a0 + 0xd]\n  5176: a5 = u8 [a0 + 0xc]\n  5179: s1 = u8 [a0 + 0xe]\n  5182: a0 = u8 [a0 + 0xf]\n  5185: a4 = a4 << 0x8\n  5188: a4 = a4 | a5\n  5191: s1 = s1 << 0x10\n  5194: a0 = a0 << 0x18\n  5197: a0 = a0 | s1\n  5200: a0 = a0 | a4\n  5203: a0 = a0 << 0x20\n  5206: a0 = a0 | a1\n  5209: a1 = reverse a0\n  5211: a0 = reverse a3\n  5213: a2 = reverse a2\n  5215: a3 = reverse t0\n  5217: a2 = a2 | a3\n  5220: a3 = a0 | a1\n  5223: a3 = a3 | a2\n  5226: a3 = a3 >> 0x20\n  5229: a1 = a1 | a2\n  5232: a1 = a1 << 0x20\n  5235: a1 = a1 | a3\n  5238: jump @106 if a1 == 0\n      : @103 (gas: 1)\n  5241: trap\n      : @104 (gas: 3)\n  5242: a0 = 0\n  5244: a1 = 0\n  5246: ra = 84, jump @0\n      : @105 [@dyn 42] (gas: 5)\n  5251: i32 a1 = a0 + 0\n  5253: a0 = 0x1\n  5256: a2 = 0\n  5258: ecalli 6 // 'seal_return'\n  5260: fallthrough\n      : @106 (gas: 4)\n  5261: i32 s1 = a0 + 0\n  5263: a1 = 0x20\n  5266: a0 = s1\n  5268: ra = 86, jump @0\n      : @107 [@dyn 43] (gas: 71)\n  5273: a1 = u64 [sp]\n  5275: a1 = reverse a1\n  5277: a2 = u64 [sp + 0x8]\n  5280: a2 = reverse a2\n  5282: a3 = u64 [sp + 0x10]\n  5285: a3 = reverse a3\n  5287: a4 = u64 [sp + 0x18]\n  5290: a4 = reverse a4\n  5292: a5 = a4 >> 0x38\n  5295: u8 [a0 + 0x1f] = a5\n  5298: a5 = a4 >> 0x30\n  5301: u8 [a0 + 0x1e] = a5\n  5304: a5 = a4 >> 0x28\n  5307: u8 [a0 + 0x1d] = a5\n  5310: a5 = a4 >> 0x20\n  5313: u8 [a0 + 0x1c] = a5\n  5316: a5 = a4 >> 0x18\n  5319: u8 [a0 + 0x1b] = a5\n  5322: a5 = a4 >> 0x10\n  5325: u8 [a0 + 0x1a] = a5\n  5328: a5 = a4 >> 0x8\n  5331: u8 [a0 + 0x19] = a5\n  5334: u8 [a0 + 0x18] = a4\n  5337: u8 [a0 + 0x10] = a3\n  5340: a4 = a3 >> 0x38\n  5343: u8 [a0 + 0x17] = a4\n  5346: a4 = a3 >> 0x30\n  5349: u8 [a0 + 0x16] = a4\n  5352: a4 = a3 >> 0x28\n  5355: u8 [a0 + 0x15] = a4\n  5358: a4 = a3 >> 0x20\n  5361: u8 [a0 + 0x14] = a4\n  5364: a4 = a3 >> 0x18\n  5367: u8 [a0 + 0x13] = a4\n  5370: a4 = a3 >> 0x10\n  5373: u8 [a0 + 0x12] = a4\n  5376: a3 = a3 >> 0x8\n  5379: u8 [a0 + 0x11] = a3\n  5382: u8 [a0 + 0x8] = a2\n  5385: a3 = a2 >> 0x38\n  5388: u8 [a0 + 0xf] = a3\n  5391: a3 = a2 >> 0x30\n  5394: u8 [a0 + 0xe] = a3\n  5397: a3 = a2 >> 0x28\n  5400: u8 [a0 + 0xd] = a3\n  5403: a3 = a2 >> 0x20\n  5406: u8 [a0 + 0xc] = a3\n  5409: a3 = a2 >> 0x18\n  5412: u8 [a0 + 0xb] = a3\n  5415: a3 = a2 >> 0x10\n  5418: u8 [a0 + 0xa] = a3\n  5421: a2 = a2 >> 0x8\n  5424: u8 [a0 + 0x9] = a2\n  5427: u8 [a0] = a1\n  5429: a2 = a1 >> 0x38\n  5432: u8 [a0 + 0x7] = a2\n  5435: a2 = a1 >> 0x30\n  5438: u8 [a0 + 0x6] = a2\n  5441: a2 = a1 >> 0x28\n  5444: u8 [a0 + 0x5] = a2\n  5447: a2 = a1 >> 0x20\n  5450: u8 [a0 + 0x4] = a2\n  5453: a2 = a1 >> 0x18\n  5456: u8 [a0 + 0x3] = a2\n  5459: a2 = a1 >> 0x10\n  5462: u8 [a0 + 0x2] = a2\n  5465: a1 = a1 >> 0x8\n  5468: u8 [a0 + 0x1] = a1\n  5471: a1 = 0x20\n  5474: a0 = s1\n  5476: ra = 88, jump @0\n      : @108 [@dyn 44] (gas: 6)\n  5481: i32 a1 = a0 + 0\n  5483: a2 = 0x20\n  5486: a0 = 0\n  5488: ra = 0x5a\n  5491: ecalli 6 // 'seal_return'\n  5493: fallthrough\n      : @109 [@dyn 45] (gas: 52)\n  5494: sp = sp + 0xffffffffffffff80\n  5497: u64 [sp + 0x78] = ra\n  5500: u64 [sp + 0x70] = s0\n  5503: u64 [sp + 0x68] = s1\n  5506: s0 = sp + 0x80\n  5510: sp = sp & 0xffffffffffffffe0\n  5513: t2 = u64 [a1 + 0x10]\n  5516: a5 = u64 [a1 + 0x8]\n  5519: t0 = u64 [a2 + 0x8]\n  5522: s1 = u64 [a1]\n  5524: u64 [sp + 0x10] = s1\n  5527: a4 = u64 [a2]\n  5529: u64 [sp + 0x18] = a4\n  5532: ra = u64 [a2 + 0x10]\n  5535: a3 = t0 ^ a5\n  5538: u64 [sp + 0x38] = a3\n  5541: a3 = t0 <u a5\n  5544: a4 = a4 <u s1\n  5547: t1 = u64 [sp + 0x38]\n  5550: a3 = a4 if t1 == 0\n  5553: t1 = a4\n  5555: a1 = u64 [a1 + 0x18]\n  5558: u64 [sp + 0x38] = a1\n  5561: a1 = u64 [a2 + 0x18]\n  5564: u64 [sp + 0x20] = a1\n  5567: a1 = ra - t2\n  5570: a2 = a1 - a3\n  5573: u64 [sp + 0x28] = a2\n  5576: a2 = a1 <u a3\n  5579: u64 [sp + 0x30] = t2\n  5582: a3 = ra <u t2\n  5585: a1 = u64 [sp + 0x38]\n  5588: a4 = u64 [sp + 0x20]\n  5591: a1 = a4 - a1\n  5594: a1 = a1 - a3\n  5597: t2 = a1 - a2\n  5600: s1 = t0 - a5\n  5603: a2 = s1 - t1\n  5606: t0 = u64 [sp + 0x10]\n  5609: a1 = u64 [sp + 0x18]\n  5612: a3 = a1 - t0\n  5615: a4 = a2 >u 0\n  5617: a3 = a3 <u 0x20\n  5620: a3 = a3 ^ 0x1\n  5623: a3 = a4 if a2 != 0\n  5626: a2 = t2 >s 0\n  5628: a1 = u64 [sp + 0x28]\n  5631: a4 = a1 >u 0\n  5633: a4 = a2 if t2 != 0\n  5636: a1 = a1 | t2\n  5639: a3 = a4 if a1 != 0\n  5642: jump @115 if a3 == 0\n      : @110 (gas: 11)\n  5645: s1 = a0\n  5647: a2 = u64 [sp + 0x30]\n  5650: a0 = t0 | a2\n  5653: a1 = u64 [sp + 0x38]\n  5656: a1 = a1 | a5\n  5659: a0 = a0 | a1\n  5662: a0 = a0 >> 0x20\n  5665: a1 = a1 | a2\n  5668: a1 = a1 << 0x20\n  5671: a0 = a0 | a1\n  5674: jump @114 if a0 != 0\n      : @111 (gas: 4)\n  5677: i32 a1 = t0 + 0\n  5679: i32 a0 = sp + 0x40\n  5682: ecalli 1 // 'call_data_load'\n  5684: fallthrough\n      : @112 (gas: 10)\n  5685: a0 = u64 [sp + 0x50]\n  5688: a1 = u64 [sp + 0x58]\n  5691: a2 = 0x100000000\n  5701: a2 = a2 ^ a0\n  5704: a2 = a2 | a1\n  5707: a3 = a0 >> 0x20\n  5710: a3 = a3 <u 0x1\n  5713: a3 = 0 if a1 != 0\n  5715: a3 = 0 if a2 == 0\n  5717: jump @115 if a3 == 0\n      : @113 (gas: 12)\n  5720: a2 = u64 [sp + 0x48]\n  5723: a3 = u64 [sp + 0x40]\n  5726: u64 [s1 + 0x8] = a2\n  5729: u64 [s1] = a3\n  5731: u64 [s1 + 0x10] = a0\n  5734: u64 [s1 + 0x18] = a1\n  5737: sp = s0 + 0xffffffffffffff80\n  5740: ra = u64 [sp + 0x78]\n  5743: s0 = u64 [sp + 0x70]\n  5746: s1 = u64 [sp + 0x68]\n  5749: sp = sp + 0x80\n  5753: ret\n      : @114 (gas: 1)\n  5755: trap\n      : @115 (gas: 3)\n  5756: a0 = 0\n  5758: a1 = 0\n  5760: ra = 92, jump @0\n      : @116 [@dyn 46] (gas: 6)\n  5765: i32 a1 = a0 + 0\n  5767: a0 = 0x1\n  5770: a2 = 0\n  5772: ra = 0x5e\n  5775: ecalli 6 // 'seal_return'\n  5777: fallthrough\n      : @117 [@dyn 47] (gas: 9)\n  5778: a2 = u64 [a1 + 0x18]\n  5781: a3 = u64 [a1 + 0x10]\n  5784: a4 = u64 [a1 + 0x8]\n  5787: a1 = u64 [a1]\n  5789: u64 [a0 + 0x18] = a2\n  5792: u64 [a0 + 0x10] = a3\n  5795: u64 [a0 + 0x8] = a4\n  5798: u64 [a0] = a1\n  5800: ret\n      : @118 (gas: 8)\n  5802: a0 = u64 [sp + 0x30]\n  5805: a1 = u64 [sp + 0x38]\n  5808: a2 = u64 [sp + 0x28]\n  5811: a3 = u64 [sp + 0x20]\n  5814: a1 = a1 | a2\n  5817: a0 = a0 | a3\n  5820: a0 = a0 | a1\n  5823: jump @126 if a0 != 0\n      : @119 (gas: 2)\n  5827: a0 = i32 [0x20004]\n  5832: jump @126 if a0 <=u 35\n      : @120 (gas: 4)\n  5837: i32 a0 = sp + 0x40\n  5840: a1 = 0x4\n  5843: ecalli 1 // 'call_data_load'\n  5845: fallthrough\n      : @121 (gas: 10)\n  5846: a0 = u64 [sp + 0x50]\n  5849: a1 = u64 [sp + 0x58]\n  5852: a2 = 0x100000000\n  5862: a2 = a2 ^ a0\n  5865: a2 = a2 | a1\n  5868: a3 = a0 >> 0x20\n  5871: a3 = a3 <u 0x1\n  5874: a3 = 0 if a1 != 0\n  5876: a3 = 0 if a2 == 0\n  5878: jump @126 if a3 == 0\n      : @122 (gas: 53)\n  5882: a2 = u64 [sp + 0x48]\n  5885: a3 = u64 [sp + 0x40]\n  5888: u64 [sp + 0x8] = a2\n  5891: u64 [sp] = a3\n  5893: u64 [sp + 0x10] = a0\n  5896: a0 = sp\n  5898: u64 [sp + 0x18] = a1\n  5901: ra = 0x60\n  5904: sp = sp + 0xfffffffffffffee0\n  5908: u64 [sp + 0x118] = ra\n  5912: u64 [sp + 0x110] = s0\n  5916: u64 [sp + 0x108] = s1\n  5920: s0 = sp + 0x120\n  5924: sp = sp & 0xffffffffffffffe0\n  5927: a1 = u64 [a0 + 0x10]\n  5930: u64 [sp + 0x18] = a1\n  5933: a1 = u64 [a0 + 0x8]\n  5936: u64 [sp + 0x20] = a1\n  5939: a0 = u64 [a0]\n  5941: u64 [sp + 0x28] = a0\n  5944: i32 a0 = sp + 0x80\n  5948: ecalli 3 // 'caller'\n  5950: a0 = u64 [sp + 0x88]\n  5954: a1 = u64 [sp + 0x80]\n  5958: a2 = i32 [sp + 0x90]\n  5962: a0 = reverse a0\n  5964: a3 = a0 >> 0x20\n  5967: s1 = reverse a1\n  5969: a1 = s1 << 0x20\n  5972: a1 = a1 | a3\n  5975: u64 [sp + 0x38] = a1\n  5978: a0 = a0 << 0x20\n  5981: a1 = reverse a2\n  5983: a1 = a1 >> 0x20\n  5986: a0 = a0 | a1\n  5989: u64 [sp + 0x30] = a0\n  5992: s1 = s1 >> 0x20\n  5995: u64 [sp + 216] = 0\n  5999: u64 [sp + 208] = 0\n  6003: u64 [sp + 200] = 0\n  6007: u64 [sp + 192] = 0x1\n  6012: u64 [sp + 248] = 0\n  6016: u64 [sp + 240] = 0\n  6020: u64 [sp + 232] = 0\n  6024: u64 [sp + 224] = 0\n  6028: u32 [sp + 160] = 0x20\n  6033: i32 a1 = sp + 0xc0\n  6037: i32 a3 = sp + 0xe0\n  6041: i32 a4 = sp + 0xa0\n  6045: a2 = 0xffffffffffffffff\n  6048: a0 = 0\n  6050: ecalli 4 // 'get_storage'\n  6052: jump @232\n      : @123 [@dyn 48] (gas: 3)\n  6055: a0 = 0x40\n  6058: a1 = 0x20\n  6061: ra = 98, jump @0\n      : @124 [@dyn 49] (gas: 100)\n  6066: a1 = u8 [a0 + 0x11]\n  6069: a2 = u8 [a0 + 0x10]\n  6072: a3 = u8 [a0 + 0x12]\n  6075: a4 = u8 [a0 + 0x13]\n  6078: a1 = a1 << 0x8\n  6081: a1 = a1 | a2\n  6084: a3 = a3 << 0x10\n  6087: a4 = a4 << 0x18\n  6090: a3 = a3 | a4\n  6093: a1 = a1 | a3\n  6096: a2 = u8 [a0 + 0x15]\n  6099: a3 = u8 [a0 + 0x14]\n  6102: a4 = u8 [a0 + 0x16]\n  6105: a5 = u8 [a0 + 0x17]\n  6108: a2 = a2 << 0x8\n  6111: a2 = a2 | a3\n  6114: a4 = a4 << 0x10\n  6117: a5 = a5 << 0x18\n  6120: a4 = a4 | a5\n  6123: a2 = a2 | a4\n  6126: a2 = a2 << 0x20\n  6129: t0 = a2 | a1\n  6132: a2 = u8 [a0 + 0x1]\n  6135: a3 = u8 [a0]\n  6137: a4 = u8 [a0 + 0x2]\n  6140: a5 = u8 [a0 + 0x3]\n  6143: a2 = a2 << 0x8\n  6146: a2 = a2 | a3\n  6149: a4 = a4 << 0x10\n  6152: a5 = a5 << 0x18\n  6155: a4 = a4 | a5\n  6158: a2 = a2 | a4\n  6161: a3 = u8 [a0 + 0x5]\n  6164: a4 = u8 [a0 + 0x4]\n  6167: a5 = u8 [a0 + 0x6]\n  6170: a1 = u8 [a0 + 0x7]\n  6173: a3 = a3 << 0x8\n  6176: a3 = a3 | a4\n  6179: a5 = a5 << 0x10\n  6182: a1 = a1 << 0x18\n  6185: a1 = a1 | a5\n  6188: a1 = a1 | a3\n  6191: a1 = a1 << 0x20\n  6194: t1 = a1 | a2\n  6197: a1 = u8 [a0 + 0x19]\n  6200: a3 = u8 [a0 + 0x18]\n  6203: a4 = u8 [a0 + 0x1a]\n  6206: a5 = u8 [a0 + 0x1b]\n  6209: a1 = a1 << 0x8\n  6212: a1 = a1 | a3\n  6215: a4 = a4 << 0x10\n  6218: a5 = a5 << 0x18\n  6221: a4 = a4 | a5\n  6224: a1 = a1 | a4\n  6227: a3 = u8 [a0 + 0x1d]\n  6230: a4 = u8 [a0 + 0x1c]\n  6233: a5 = u8 [a0 + 0x1e]\n  6236: a2 = u8 [a0 + 0x1f]\n  6239: a3 = a3 << 0x8\n  6242: a3 = a3 | a4\n  6245: a5 = a5 << 0x10\n  6248: a2 = a2 << 0x18\n  6251: a2 = a2 | a5\n  6254: a2 = a2 | a3\n  6257: a2 = a2 << 0x20\n  6260: a3 = a2 | a1\n  6263: a1 = u8 [a0 + 0x9]\n  6266: a2 = u8 [a0 + 0x8]\n  6269: a4 = u8 [a0 + 0xa]\n  6272: a5 = u8 [a0 + 0xb]\n  6275: a1 = a1 << 0x8\n  6278: a1 = a1 | a2\n  6281: a4 = a4 << 0x10\n  6284: a5 = a5 << 0x18\n  6287: a4 = a4 | a5\n  6290: a1 = a1 | a4\n  6293: a2 = u8 [a0 + 0xd]\n  6296: a4 = u8 [a0 + 0xc]\n  6299: a5 = u8 [a0 + 0xe]\n  6302: a0 = u8 [a0 + 0xf]\n  6305: a2 = a2 << 0x8\n  6308: a2 = a2 | a4\n  6311: a5 = a5 << 0x10\n  6314: a0 = a0 << 0x18\n  6317: a0 = a0 | a5\n  6320: a0 = a0 | a2\n  6323: a0 = a0 << 0x20\n  6326: a0 = a0 | a1\n  6329: a1 = reverse a0\n  6331: a0 = reverse a3\n  6333: a2 = reverse t1\n  6335: a3 = reverse t0\n  6337: a2 = a2 | a3\n  6340: a3 = a0 | a1\n  6343: a3 = a3 | a2\n  6346: a3 = a3 >> 0x20\n  6349: a1 = a1 | a2\n  6352: a1 = a1 << 0x20\n  6355: a1 = a1 | a3\n  6358: jump @128 if a1 == 0\n      : @125 (gas: 1)\n  6361: trap\n      : @126 (gas: 3)\n  6362: a0 = 0\n  6364: a1 = 0\n  6366: ra = 100, jump @0\n      : @127 [@dyn 50] (gas: 7)\n  6371: i32 a1 = a0 + 0\n  6373: a0 = 0x1\n  6376: a2 = 0\n  6378: ecalli 6 // 'seal_return'\n  6380: i32 a0 = a0 + 0\n  6382: ra = 0x66\n  6385: jump @0\n      : @128 (gas: 2)\n  6388: i32 a0 = a0 + 0\n  6390: ra = 102, jump @0\n      : @129 [@dyn 51] (gas: 6)\n  6395: i32 a1 = a0 + 0\n  6397: a0 = 0\n  6399: a2 = 0\n  6401: ra = 0x68\n  6404: ecalli 6 // 'seal_return'\n  6406: fallthrough\n      : @130 [@dyn 52] (gas: 45)\n  6407: sp = sp + 0xffffffffffffff40\n  6411: u64 [sp + 0xb8] = ra\n  6415: u64 [sp + 0xb0] = s0\n  6419: u64 [sp + 0xa8] = s1\n  6423: s0 = sp + 0xc0\n  6427: sp = sp & 0xffffffffffffffe0\n  6430: ra = u64 [a1 + 0x10]\n  6433: t2 = u64 [a1 + 0x8]\n  6436: t0 = u64 [a2 + 0x8]\n  6439: a5 = u64 [a1]\n  6441: u64 [sp + 0x78] = a5\n  6444: a3 = u64 [a2]\n  6446: u64 [sp + 0x68] = a3\n  6449: a4 = u64 [a2 + 0x10]\n  6452: t1 = t0 ^ t2\n  6455: s1 = t0 <u t2\n  6458: a3 = a3 <u a5\n  6461: s1 = a3 if t1 == 0\n  6464: t1 = u64 [a1 + 0x18]\n  6467: a5 = u64 [a2 + 0x18]\n  6470: a2 = a4 - ra\n  6473: a1 = a2 - s1\n  6476: u64 [sp + 0x70] = a1\n  6479: a1 = a2 <u s1\n  6482: a4 = a4 <u ra\n  6485: u64 [sp + 0x60] = t1\n  6488: a2 = a5 - t1\n  6491: a5 = u64 [sp + 0x78]\n  6494: a2 = a2 - a4\n  6497: a2 = a2 - a1\n  6500: a1 = t0 - t2\n  6503: a1 = a1 - a3\n  6506: a3 = u64 [sp + 0x68]\n  6509: a3 = a3 - a5\n  6512: a4 = a1 >u 0\n  6514: a3 = a3 <u 0x80\n  6518: a3 = a3 ^ 0x1\n  6521: a3 = a4 if a1 != 0\n  6524: s1 = a2 >s 0\n  6526: a1 = u64 [sp + 0x70]\n  6529: a4 = a1 >u 0\n  6531: a4 = s1 if a2 != 0\n  6534: a1 = a1 | a2\n  6537: a3 = a4 if a1 != 0\n  6540: jump @142 if a3 == 0\n      : @131 (gas: 12)\n  6544: s1 = a0\n  6546: a0 = a5 | ra\n  6549: u64 [sp + 0x70] = t2\n  6552: a1 = u64 [sp + 0x60]\n  6555: a1 = t2 | a1\n  6558: a0 = a0 | a1\n  6561: a0 = a0 >> 0x20\n  6564: u64 [sp + 0x58] = ra\n  6567: a1 = a1 | ra\n  6570: a1 = a1 << 0x20\n  6573: a0 = a0 | a1\n  6576: jump @141 if a0 != 0\n      : @132 (gas: 5)\n  6580: i32 a1 = a5 + 0\n  6582: i32 a0 = sp + 0x80\n  6586: u64 [sp + 0x68] = a1\n  6589: ecalli 1 // 'call_data_load'\n  6591: fallthrough\n      : @133 (gas: 10)\n  6592: a3 = u64 [sp + 0x90]\n  6596: a4 = u64 [sp + 0x98]\n  6600: a0 = 0x100000000\n  6610: a1 = a3 ^ a0\n  6613: a1 = a1 | a4\n  6616: a2 = a3 >> 0x20\n  6619: a2 = a2 <u 0x1\n  6622: a2 = 0 if a4 != 0\n  6624: a2 = 0 if a1 == 0\n  6626: jump @142 if a2 == 0\n      : @134 (gas: 13)\n  6630: u64 [sp + 0x48] = a4\n  6633: u64 [sp + 0x50] = a3\n  6636: a1 = u64 [sp + 0x58]\n  6639: a2 = u64 [sp + 0x60]\n  6642: a2 = a2 | a1\n  6645: a0 = 0xffffffe0\n  6655: a1 = u64 [sp + 0x78]\n  6658: a0 = a1 <u a0\n  6661: a1 = u64 [sp + 0x70]\n  6664: a0 = 0 if a1 != 0\n  6666: u64 [sp + 0x60] = a2\n  6669: a0 = 0 if a2 != 0\n  6671: jump @141 if a0 == 0\n      : @135 (gas: 9)\n  6675: a0 = u64 [sp + 0x88]\n  6679: u64 [sp + 0x40] = a0\n  6682: a0 = u64 [sp + 0x80]\n  6686: u64 [sp + 0x58] = a0\n  6689: a0 = u64 [sp + 0x68]\n  6692: i32 a1 = a0 + 0x20\n  6695: i32 a0 = sp + 0x80\n  6699: ecalli 1 // 'call_data_load'\n  6701: fallthrough\n      : @136 (gas: 10)\n  6702: a3 = u64 [sp + 0x90]\n  6706: a4 = u64 [sp + 0x98]\n  6710: a0 = 0x100000000\n  6720: a1 = a3 ^ a0\n  6723: a1 = a1 | a4\n  6726: a2 = a3 >> 0x20\n  6729: a2 = a2 <u 0x1\n  6732: a2 = 0 if a4 != 0\n  6734: a2 = 0 if a1 == 0\n  6736: jump @142 if a2 == 0\n      : @137 (gas: 10)\n  6740: u64 [sp + 0x30] = a4\n  6743: u64 [sp + 0x38] = a3\n  6746: a0 = 0xffffffc0\n  6756: a1 = u64 [sp + 0x78]\n  6759: a0 = a1 <u a0\n  6762: a1 = u64 [sp + 0x70]\n  6765: a0 = 0 if a1 != 0\n  6767: a1 = u64 [sp + 0x60]\n  6770: a0 = 0 if a1 != 0\n  6772: jump @141 if a0 == 0\n      : @138 (gas: 9)\n  6776: a0 = u64 [sp + 0x88]\n  6780: u64 [sp + 0x20] = a0\n  6783: a0 = u64 [sp + 0x80]\n  6787: u64 [sp + 0x28] = a0\n  6790: a0 = u64 [sp + 0x68]\n  6793: i32 a1 = a0 + 0x40\n  6796: i32 a0 = sp + 0x80\n  6800: ecalli 1 // 'call_data_load'\n  6802: fallthrough\n      : @139 (gas: 8)\n  6803: a0 = 0xffffffa0\n  6813: a1 = u64 [sp + 0x78]\n  6816: a0 = a1 <u a0\n  6819: a1 = u64 [sp + 0x70]\n  6822: a0 = 0 if a1 != 0\n  6824: a1 = u64 [sp + 0x60]\n  6827: a0 = 0 if a1 != 0\n  6829: jump @141 if a0 == 0\n      : @140 (gas: 50)\n  6833: a0 = u64 [sp + 0x98]\n  6837: u64 [sp + 0x18] = a0\n  6840: a0 = u64 [sp + 0x90]\n  6844: u64 [sp + 0x60] = a0\n  6847: a0 = u64 [sp + 0x88]\n  6851: u64 [sp + 0x70] = a0\n  6854: a0 = u64 [sp + 0x80]\n  6858: u64 [sp + 0x78] = a0\n  6861: a0 = u64 [sp + 0x68]\n  6864: i32 a1 = a0 + 0x60\n  6867: i32 a0 = sp + 0x80\n  6871: ecalli 1 // 'call_data_load'\n  6873: a0 = u64 [sp + 0x98]\n  6877: a1 = u64 [sp + 0x90]\n  6881: a2 = u64 [sp + 0x88]\n  6885: a3 = u64 [sp + 0x80]\n  6889: u64 [s1 + 0x78] = a0\n  6892: u64 [s1 + 0x70] = a1\n  6895: u64 [s1 + 0x68] = a2\n  6898: u64 [s1 + 0x60] = a3\n  6901: a0 = u64 [sp + 0x18]\n  6904: u64 [s1 + 0x58] = a0\n  6907: a0 = u64 [sp + 0x60]\n  6910: u64 [s1 + 0x50] = a0\n  6913: a0 = u64 [sp + 0x70]\n  6916: u64 [s1 + 0x48] = a0\n  6919: a0 = u64 [sp + 0x78]\n  6922: u64 [s1 + 0x40] = a0\n  6925: a0 = u64 [sp + 0x30]\n  6928: u64 [s1 + 0x38] = a0\n  6931: a0 = u64 [sp + 0x38]\n  6934: u64 [s1 + 0x30] = a0\n  6937: a0 = u64 [sp + 0x20]\n  6940: u64 [s1 + 0x28] = a0\n  6943: a0 = u64 [sp + 0x28]\n  6946: u64 [s1 + 0x20] = a0\n  6949: a0 = u64 [sp + 0x48]\n  6952: u64 [s1 + 0x18] = a0\n  6955: a0 = u64 [sp + 0x50]\n  6958: u64 [s1 + 0x10] = a0\n  6961: a0 = u64 [sp + 0x40]\n  6964: u64 [s1 + 0x8] = a0\n  6967: a0 = u64 [sp + 0x58]\n  6970: u64 [s1] = a0\n  6972: sp = s0 + 0xffffffffffffff40\n  6976: ra = u64 [sp + 0xb8]\n  6980: s0 = u64 [sp + 0xb0]\n  6984: s1 = u64 [sp + 0xa8]\n  6988: sp = sp + 0xc0\n  6992: ret\n      : @141 (gas: 1)\n  6994: trap\n      : @142 (gas: 3)\n  6995: a0 = 0\n  6997: a1 = 0\n  6999: ra = 106, jump @0\n      : @143 [@dyn 53] (gas: 6)\n  7004: i32 a1 = a0 + 0\n  7006: a0 = 0x1\n  7009: a2 = 0\n  7011: ra = 0x6c\n  7014: ecalli 6 // 'seal_return'\n  7016: fallthrough\n      : @144 [@dyn 54] (gas: 13)\n  7017: sp = sp + 0xfffffffffffffe40\n  7021: u64 [sp + 0x1b8] = ra\n  7025: u64 [sp + 0x1b0] = s0\n  7029: u64 [sp + 0x1a8] = s1\n  7033: s0 = sp + 0x1c0\n  7037: sp = sp & 0xffffffffffffffe0\n  7040: u64 [sp + 408] = 0\n  7044: u64 [sp + 400] = 0\n  7048: u64 [sp + 392] = 0\n  7052: u64 [sp + 384] = 0\n  7056: i32 a0 = sp + 0x180\n  7060: ecalli 9 // 'value_transferred'\n  7062: fallthrough\n      : @145 (gas: 8)\n  7063: a0 = u64 [sp + 0x190]\n  7067: a1 = u64 [sp + 0x198]\n  7071: a2 = u64 [sp + 0x188]\n  7075: a3 = u64 [sp + 0x180]\n  7079: a1 = a1 | a2\n  7082: a0 = a0 | a3\n  7085: a0 = a0 | a1\n  7088: jump @151 if a0 != 0\n      : @146 (gas: 13)\n  7092: a0 = u32 [0x20004]\n  7097: u64 [sp + 216] = 0\n  7101: u64 [sp + 208] = 0\n  7105: u64 [sp + 200] = 0\n  7109: u64 [sp + 0xc0] = a0\n  7113: u64 [sp + 248] = 0\n  7117: u64 [sp + 240] = 0\n  7121: u64 [sp + 224] = 0x4\n  7126: a0 = sp + 0x100\n  7130: a1 = sp + 0xe0\n  7134: a2 = sp + 0xc0\n  7138: u64 [sp + 232] = 0\n  7142: ra = 110, jump @130\n      : @147 [@dyn 55] (gas: 47)\n  7147: a0 = u64 [sp + 0x100]\n  7151: u64 [sp + 0x38] = a0\n  7154: a0 = u64 [sp + 0x108]\n  7158: u64 [sp + 0x30] = a0\n  7161: a0 = u64 [sp + 0x110]\n  7165: u64 [sp + 0x28] = a0\n  7168: a0 = u64 [sp + 0x118]\n  7172: u64 [sp + 0x20] = a0\n  7175: a0 = u64 [sp + 0x120]\n  7179: u64 [sp + 0x18] = a0\n  7182: ra = u64 [sp + 0x128]\n  7186: t2 = u64 [sp + 0x130]\n  7190: t1 = u64 [sp + 0x138]\n  7194: t0 = u64 [sp + 0x140]\n  7198: s1 = u64 [sp + 0x148]\n  7202: a5 = u64 [sp + 0x150]\n  7206: a4 = u64 [sp + 0x158]\n  7210: a3 = u64 [sp + 0x160]\n  7214: a2 = u64 [sp + 0x168]\n  7218: a1 = u64 [sp + 0x170]\n  7222: a0 = u64 [sp + 0x178]\n  7226: u64 [sp + 0x58] = a0\n  7229: u64 [sp + 0x50] = a1\n  7232: u64 [sp + 0x48] = a2\n  7235: u64 [sp + 0x40] = a3\n  7238: u64 [sp + 0x78] = a4\n  7241: u64 [sp + 0x70] = a5\n  7244: u64 [sp + 0x68] = s1\n  7247: u64 [sp + 0x60] = t0\n  7250: u64 [sp + 0x98] = t1\n  7254: u64 [sp + 0x90] = t2\n  7258: u64 [sp + 0x88] = ra\n  7262: a0 = u64 [sp + 0x18]\n  7265: u64 [sp + 0x80] = a0\n  7269: a0 = u64 [sp + 0x20]\n  7272: u64 [sp + 0xb8] = a0\n  7276: a0 = u64 [sp + 0x28]\n  7279: u64 [sp + 0xb0] = a0\n  7283: a0 = u64 [sp + 0x30]\n  7286: u64 [sp + 0xa8] = a0\n  7290: a0 = sp + 0xa0\n  7294: a1 = sp + 0x80\n  7298: a2 = sp + 0x60\n  7301: a3 = sp + 0x40\n  7304: a4 = u64 [sp + 0x38]\n  7307: u64 [sp + 0xa0] = a4\n  7311: ra = 112, jump @259\n      : @148 [@dyn 56] (gas: 3)\n  7316: a0 = 0x40\n  7319: a1 = 0x20\n  7322: ra = 114, jump @0\n      : @149 [@dyn 57] (gas: 100)\n  7327: a1 = u8 [a0 + 0x11]\n  7330: a2 = u8 [a0 + 0x10]\n  7333: a3 = u8 [a0 + 0x12]\n  7336: a4 = u8 [a0 + 0x13]\n  7339: a1 = a1 << 0x8\n  7342: a1 = a1 | a2\n  7345: a3 = a3 << 0x10\n  7348: a4 = a4 << 0x18\n  7351: a3 = a3 | a4\n  7354: a1 = a1 | a3\n  7357: a2 = u8 [a0 + 0x15]\n  7360: a3 = u8 [a0 + 0x14]\n  7363: a4 = u8 [a0 + 0x16]\n  7366: a5 = u8 [a0 + 0x17]\n  7369: a2 = a2 << 0x8\n  7372: a2 = a2 | a3\n  7375: a4 = a4 << 0x10\n  7378: a5 = a5 << 0x18\n  7381: a4 = a4 | a5\n  7384: a2 = a2 | a4\n  7387: a2 = a2 << 0x20\n  7390: t0 = a2 | a1\n  7393: a2 = u8 [a0 + 0x1]\n  7396: a3 = u8 [a0]\n  7398: a4 = u8 [a0 + 0x2]\n  7401: a5 = u8 [a0 + 0x3]\n  7404: a2 = a2 << 0x8\n  7407: a2 = a2 | a3\n  7410: a4 = a4 << 0x10\n  7413: a5 = a5 << 0x18\n  7416: a4 = a4 | a5\n  7419: a2 = a2 | a4\n  7422: a3 = u8 [a0 + 0x5]\n  7425: a4 = u8 [a0 + 0x4]\n  7428: a5 = u8 [a0 + 0x6]\n  7431: s1 = u8 [a0 + 0x7]\n  7434: a3 = a3 << 0x8\n  7437: a3 = a3 | a4\n  7440: a5 = a5 << 0x10\n  7443: s1 = s1 << 0x18\n  7446: a5 = a5 | s1\n  7449: a3 = a3 | a5\n  7452: a3 = a3 << 0x20\n  7455: a2 = a2 | a3\n  7458: a3 = u8 [a0 + 0x19]\n  7461: a4 = u8 [a0 + 0x18]\n  7464: a5 = u8 [a0 + 0x1a]\n  7467: s1 = u8 [a0 + 0x1b]\n  7470: a3 = a3 << 0x8\n  7473: a3 = a3 | a4\n  7476: a5 = a5 << 0x10\n  7479: s1 = s1 << 0x18\n  7482: a5 = a5 | s1\n  7485: a3 = a3 | a5\n  7488: a4 = u8 [a0 + 0x1d]\n  7491: a5 = u8 [a0 + 0x1c]\n  7494: s1 = u8 [a0 + 0x1e]\n  7497: a1 = u8 [a0 + 0x1f]\n  7500: a4 = a4 << 0x8\n  7503: a4 = a4 | a5\n  7506: s1 = s1 << 0x10\n  7509: a1 = a1 << 0x18\n  7512: a1 = a1 | s1\n  7515: a1 = a1 | a4\n  7518: a1 = a1 << 0x20\n  7521: a3 = a3 | a1\n  7524: a1 = u8 [a0 + 0x9]\n  7527: a4 = u8 [a0 + 0x8]\n  7530: a5 = u8 [a0 + 0xa]\n  7533: s1 = u8 [a0 + 0xb]\n  7536: a1 = a1 << 0x8\n  7539: a1 = a1 | a4\n  7542: a5 = a5 << 0x10\n  7545: s1 = s1 << 0x18\n  7548: a5 = a5 | s1\n  7551: a1 = a1 | a5\n  7554: a4 = u8 [a0 + 0xd]\n  7557: a5 = u8 [a0 + 0xc]\n  7560: s1 = u8 [a0 + 0xe]\n  7563: a0 = u8 [a0 + 0xf]\n  7566: a4 = a4 << 0x8\n  7569: a4 = a4 | a5\n  7572: s1 = s1 << 0x10\n  7575: a0 = a0 << 0x18\n  7578: a0 = a0 | s1\n  7581: a0 = a0 | a4\n  7584: a0 = a0 << 0x20\n  7587: a0 = a0 | a1\n  7590: a1 = reverse a0\n  7592: a0 = reverse a3\n  7594: a2 = reverse a2\n  7596: a3 = reverse t0\n  7598: a2 = a2 | a3\n  7601: a3 = a0 | a1\n  7604: a3 = a3 | a2\n  7607: a3 = a3 >> 0x20\n  7610: a1 = a1 | a2\n  7613: a1 = a1 << 0x20\n  7616: a1 = a1 | a3\n  7619: jump @153 if a1 == 0\n      : @150 (gas: 1)\n  7622: trap\n      : @151 (gas: 3)\n  7623: a0 = 0\n  7625: a1 = 0\n  7627: ra = 116, jump @0\n      : @152 [@dyn 58] (gas: 7)\n  7632: i32 a1 = a0 + 0\n  7634: a0 = 0x1\n  7637: a2 = 0\n  7639: ecalli 6 // 'seal_return'\n  7641: i32 a0 = a0 + 0\n  7643: ra = 0x76\n  7646: jump @0\n      : @153 (gas: 2)\n  7649: i32 a0 = a0 + 0\n  7651: ra = 118, jump @0\n      : @154 [@dyn 59] (gas: 6)\n  7656: i32 a1 = a0 + 0\n  7658: a0 = 0\n  7660: a2 = 0\n  7662: ra = 0x78\n  7665: ecalli 6 // 'seal_return'\n  7667: fallthrough\n      : @155 [@dyn 60] (gas: 6)\n  7668: u64 [a0 + 24] = 0\n  7671: u64 [a0 + 16] = 0\n  7674: u64 [a0 + 8] = 0\n  7677: a1 = 0x11\n  7680: u64 [a0] = a1\n  7682: ret\n      : @156 (gas: 8)\n  7684: a0 = u64 [sp + 0x1d0]\n  7688: a1 = u64 [sp + 0x1d8]\n  7692: a2 = u64 [sp + 0x1c8]\n  7696: a3 = u64 [sp + 0x1c0]\n  7700: a1 = a1 | a2\n  7703: a0 = a0 | a3\n  7706: a0 = a0 | a1\n  7709: jump @170 if a0 != 0\n      : @157 (gas: 2)\n  7713: a0 = i32 [0x20004]\n  7718: jump @170 if a0 <=u 35\n      : @158 (gas: 4)\n  7723: i32 a0 = sp + 0x1e0\n  7727: a1 = 0x4\n  7730: ecalli 1 // 'call_data_load'\n  7732: fallthrough\n      : @159 (gas: 10)\n  7733: a0 = u64 [sp + 0x1f0]\n  7737: a2 = u64 [sp + 0x1f8]\n  7741: a1 = 0x100000000\n  7751: a1 = a1 ^ a0\n  7754: a1 = a1 | a2\n  7757: a3 = a0 >> 0x20\n  7760: a3 = a3 <u 0x1\n  7763: a3 = 0 if a2 != 0\n  7765: a3 = 0 if a1 == 0\n  7767: jump @170 if a3 == 0\n      : @160 (gas: 30)\n  7771: a1 = u64 [sp + 0x1e8]\n  7775: a3 = u64 [sp + 0x1e0]\n  7779: u64 [sp + 0x188] = a1\n  7783: u64 [sp + 0x180] = a3\n  7787: u64 [sp + 0x190] = a0\n  7791: a0 = sp + 0x1a0\n  7795: a1 = sp + 0x180\n  7799: u64 [sp + 0x198] = a2\n  7803: ra = 0x7a\n  7806: sp = sp + 0xffffffffffffff20\n  7810: u64 [sp + 0xd8] = ra\n  7814: u64 [sp + 0xd0] = s0\n  7818: u64 [sp + 0xc8] = s1\n  7822: s0 = sp + 0xe0\n  7826: sp = sp & 0xffffffffffffffe0\n  7829: a2 = u64 [a1 + 0x10]\n  7832: u64 [sp] = a2\n  7834: a2 = u64 [a1 + 0x8]\n  7837: u64 [sp + 0x8] = a2\n  7840: a1 = u64 [a1]\n  7842: u64 [sp + 0x10] = a1\n  7845: u64 [sp + 0x18] = a0\n  7848: u64 [sp + 120] = 0\n  7851: u64 [sp + 112] = 0\n  7854: u64 [sp + 96] = 0x220\n  7859: a0 = sp + 0x80\n  7863: a1 = sp + 0x60\n  7866: u64 [sp + 104] = 0\n  7869: ra = 0x134\n  7873: jump @297\n      : @161 [@dyn 61] (gas: 10)\n  7876: a0 = u64 [sp + 0x1b8]\n  7880: u64 [sp + 0x158] = a0\n  7884: a0 = u64 [sp + 0x1b0]\n  7888: u64 [sp + 0x168] = a0\n  7892: a0 = u64 [sp + 0x1a8]\n  7896: u64 [sp + 0x150] = a0\n  7900: s1 = u64 [sp + 0x1a0]\n  7904: a0 = 0x40\n  7907: a1 = 0x20\n  7910: ra = 124, jump @0\n      : @162 [@dyn 62] (gas: 108)\n  7915: ra = s1\n  7917: a1 = u8 [a0 + 0x19]\n  7920: a2 = u8 [a0 + 0x18]\n  7923: a3 = u8 [a0 + 0x1a]\n  7926: a4 = u8 [a0 + 0x1b]\n  7929: a1 = a1 << 0x8\n  7932: a1 = a1 | a2\n  7935: a3 = a3 << 0x10\n  7938: a4 = a4 << 0x18\n  7941: a3 = a3 | a4\n  7944: a1 = a1 | a3\n  7947: a2 = u8 [a0 + 0x1d]\n  7950: a3 = u8 [a0 + 0x1c]\n  7953: a4 = u8 [a0 + 0x1e]\n  7956: a5 = u8 [a0 + 0x1f]\n  7959: a2 = a2 << 0x8\n  7962: a2 = a2 | a3\n  7965: a4 = a4 << 0x10\n  7968: a5 = a5 << 0x18\n  7971: a4 = a4 | a5\n  7974: a2 = a2 | a4\n  7977: a2 = a2 << 0x20\n  7980: t0 = a2 | a1\n  7983: a2 = u8 [a0 + 0x11]\n  7986: a3 = u8 [a0 + 0x10]\n  7989: a4 = u8 [a0 + 0x12]\n  7992: a5 = u8 [a0 + 0x13]\n  7995: a2 = a2 << 0x8\n  7998: a2 = a2 | a3\n  8001: a4 = a4 << 0x10\n  8004: a5 = a5 << 0x18\n  8007: a4 = a4 | a5\n  8010: a2 = a2 | a4\n  8013: a3 = u8 [a0 + 0x15]\n  8016: a4 = u8 [a0 + 0x14]\n  8019: a5 = u8 [a0 + 0x16]\n  8022: s1 = u8 [a0 + 0x17]\n  8025: a3 = a3 << 0x8\n  8028: a3 = a3 | a4\n  8031: a5 = a5 << 0x10\n  8034: s1 = s1 << 0x18\n  8037: a5 = a5 | s1\n  8040: a3 = a3 | a5\n  8043: a3 = a3 << 0x20\n  8046: a2 = a2 | a3\n  8049: a3 = u8 [a0 + 0x9]\n  8052: a4 = u8 [a0 + 0x8]\n  8055: a5 = u8 [a0 + 0xa]\n  8058: s1 = u8 [a0 + 0xb]\n  8061: a3 = a3 << 0x8\n  8064: a3 = a3 | a4\n  8067: a5 = a5 << 0x10\n  8070: s1 = s1 << 0x18\n  8073: a5 = a5 | s1\n  8076: a3 = a3 | a5\n  8079: a4 = u8 [a0 + 0xd]\n  8082: a5 = u8 [a0 + 0xc]\n  8085: s1 = u8 [a0 + 0xe]\n  8088: a1 = u8 [a0 + 0xf]\n  8091: a4 = a4 << 0x8\n  8094: a4 = a4 | a5\n  8097: s1 = s1 << 0x10\n  8100: a1 = a1 << 0x18\n  8103: a1 = a1 | s1\n  8106: a1 = a1 | a4\n  8109: a1 = a1 << 0x20\n  8112: a3 = a3 | a1\n  8115: a1 = u8 [a0 + 0x1]\n  8118: a4 = u8 [a0]\n  8120: a5 = u8 [a0 + 0x2]\n  8123: s1 = u8 [a0 + 0x3]\n  8126: a1 = a1 << 0x8\n  8129: a1 = a1 | a4\n  8132: a5 = a5 << 0x10\n  8135: s1 = s1 << 0x18\n  8138: a5 = a5 | s1\n  8141: a1 = a1 | a5\n  8144: a4 = u8 [a0 + 0x5]\n  8147: a5 = u8 [a0 + 0x4]\n  8150: s1 = u8 [a0 + 0x6]\n  8153: a0 = u8 [a0 + 0x7]\n  8156: a4 = a4 << 0x8\n  8159: a4 = a4 | a5\n  8162: s1 = s1 << 0x10\n  8165: a0 = a0 << 0x18\n  8168: a0 = a0 | s1\n  8171: a0 = a0 | a4\n  8174: a4 = u64 [sp + 0x158]\n  8178: a0 = a0 << 0x20\n  8181: a0 = a0 | a1\n  8184: t1 = reverse a0\n  8186: a1 = reverse a3\n  8188: a5 = reverse a2\n  8190: a0 = reverse t0\n  8192: t0 = u64 [sp + 0x150]\n  8196: u64 [sp + 320] = 0\n  8200: u64 [sp + 328] = 0\n  8204: a2 = 0\n  8206: a3 = 0\n  8208: u64 [sp + 0x20] = a0\n  8211: u64 [sp + 0x170] = a0\n  8215: u64 [sp + 0x8] = a5\n  8218: s1 = a5\n  8220: u64 [sp + 0x18] = a1\n  8223: t2 = a1\n  8225: u64 [sp + 0x10] = t1\n  8228: u64 [sp + 0x178] = t1\n  8232: fallthrough\n      : @163 (gas: 9)\n  8233: a5 = u64 [sp + 0x168]\n  8237: a0 = ra | a5\n  8240: a1 = t0 | a4\n  8243: a0 = a0 | a1\n  8246: a0 = a0 >> 0x20\n  8249: a1 = a1 | a5\n  8252: a1 = a1 << 0x20\n  8255: a0 = a0 | a1\n  8258: jump @169 if a0 != 0\n      : @164 (gas: 10)\n  8262: u64 [sp + 0x128] = a3\n  8266: u64 [sp + 0x130] = a2\n  8270: u64 [sp + 0x150] = t0\n  8274: u64 [sp + 0x158] = a4\n  8278: u64 [sp + 0x138] = ra\n  8282: i32 a0 = ra + 0\n  8284: a1 = 0x20\n  8287: u64 [sp + 0x160] = s1\n  8291: s1 = t2\n  8293: ra = 126, jump @0\n      : @165 [@dyn 63] (gas: 12)\n  8298: a4 = s1\n  8300: s1 = u64 [sp + 0x160]\n  8304: a5 = u64 [sp + 0x170]\n  8308: a1 = a5 | a4\n  8311: a3 = u64 [sp + 0x178]\n  8315: a2 = s1 | a3\n  8318: a1 = a1 | a2\n  8321: a1 = a1 >> 0x20\n  8324: a2 = a2 | a4\n  8327: a2 = a2 << 0x20\n  8330: a1 = a1 | a2\n  8333: jump @169 if a1 != 0\n      : @166 (gas: 69)\n  8337: a1 = u8 [a0]\n  8339: u64 [sp + 0x120] = a1\n  8343: a1 = u8 [a0 + 0x1]\n  8346: u64 [sp + 0x118] = a1\n  8350: a1 = u8 [a0 + 0x2]\n  8353: u64 [sp + 0x110] = a1\n  8357: a1 = u8 [a0 + 0x3]\n  8360: u64 [sp + 0x108] = a1\n  8364: a1 = u8 [a0 + 0x4]\n  8367: u64 [sp + 0x100] = a1\n  8371: a1 = u8 [a0 + 0x5]\n  8374: u64 [sp + 0xf8] = a1\n  8378: a1 = u8 [a0 + 0x6]\n  8381: u64 [sp + 0xf0] = a1\n  8385: a1 = u8 [a0 + 0x7]\n  8388: u64 [sp + 0xe8] = a1\n  8392: a1 = u8 [a0 + 0x8]\n  8395: u64 [sp + 0xe0] = a1\n  8399: a1 = u8 [a0 + 0x9]\n  8402: u64 [sp + 0xd8] = a1\n  8406: a1 = u8 [a0 + 0xa]\n  8409: u64 [sp + 0xd0] = a1\n  8413: a1 = u8 [a0 + 0xb]\n  8416: u64 [sp + 0xc8] = a1\n  8420: a1 = u8 [a0 + 0xc]\n  8423: u64 [sp + 0xc0] = a1\n  8427: a1 = u8 [a0 + 0xd]\n  8430: u64 [sp + 0xb8] = a1\n  8434: a1 = u8 [a0 + 0xe]\n  8437: u64 [sp + 0xb0] = a1\n  8441: a1 = u8 [a0 + 0xf]\n  8444: u64 [sp + 0xa8] = a1\n  8448: a1 = u8 [a0 + 0x10]\n  8451: u64 [sp + 0x98] = a1\n  8455: a1 = u8 [a0 + 0x11]\n  8458: u64 [sp + 0x90] = a1\n  8462: a1 = u8 [a0 + 0x12]\n  8465: u64 [sp + 0x88] = a1\n  8469: a1 = u8 [a0 + 0x13]\n  8472: u64 [sp + 0x80] = a1\n  8476: a1 = u8 [a0 + 0x14]\n  8479: u64 [sp + 0x78] = a1\n  8482: a1 = u8 [a0 + 0x15]\n  8485: u64 [sp + 0x70] = a1\n  8488: a1 = u8 [a0 + 0x16]\n  8491: u64 [sp + 0x68] = a1\n  8494: a1 = u8 [a0 + 0x17]\n  8497: u64 [sp + 0x60] = a1\n  8500: a1 = u8 [a0 + 0x18]\n  8503: u64 [sp + 0x58] = a1\n  8506: a1 = u8 [a0 + 0x19]\n  8509: u64 [sp + 0x50] = a1\n  8512: a1 = u8 [a0 + 0x1a]\n  8515: u64 [sp + 0x48] = a1\n  8518: a1 = u8 [a0 + 0x1b]\n  8521: u64 [sp + 0x40] = a1\n  8524: a1 = u8 [a0 + 0x1c]\n  8527: u64 [sp + 0x38] = a1\n  8530: a1 = u8 [a0 + 0x1d]\n  8533: u64 [sp + 0x30] = a1\n  8536: a1 = u8 [a0 + 0x1e]\n  8539: u64 [sp + 0x28] = a1\n  8542: s1 = u8 [a0 + 0x1f]\n  8545: i32 a0 = a5 + 0\n  8547: a1 = 0x20\n  8550: u64 [sp + 0x178] = a3\n  8554: u64 [sp + 0xa0] = a4\n  8558: u64 [sp + 0x170] = a5\n  8562: ra = 128, jump @0\n      : @167 [@dyn 64] (gas: 114)\n  8568: u8 [a0 + 0x1f] = s1\n  8571: a1 = u64 [sp + 0x28]\n  8574: u8 [a0 + 0x1e] = a1\n  8577: a1 = u64 [sp + 0x30]\n  8580: u8 [a0 + 0x1d] = a1\n  8583: a1 = u64 [sp + 0x38]\n  8586: u8 [a0 + 0x1c] = a1\n  8589: a1 = u64 [sp + 0x40]\n  8592: u8 [a0 + 0x1b] = a1\n  8595: a1 = u64 [sp + 0x48]\n  8598: u8 [a0 + 0x1a] = a1\n  8601: a1 = u64 [sp + 0x50]\n  8604: u8 [a0 + 0x19] = a1\n  8607: a1 = u64 [sp + 0x58]\n  8610: u8 [a0 + 0x18] = a1\n  8613: a1 = u64 [sp + 0x60]\n  8616: u8 [a0 + 0x17] = a1\n  8619: a1 = u64 [sp + 0x68]\n  8622: u8 [a0 + 0x16] = a1\n  8625: a1 = u64 [sp + 0x70]\n  8628: u8 [a0 + 0x15] = a1\n  8631: a1 = u64 [sp + 0x78]\n  8634: u8 [a0 + 0x14] = a1\n  8637: a1 = u64 [sp + 0x80]\n  8641: u8 [a0 + 0x13] = a1\n  8644: a1 = u64 [sp + 0x88]\n  8648: u8 [a0 + 0x12] = a1\n  8651: a1 = u64 [sp + 0x90]\n  8655: u8 [a0 + 0x11] = a1\n  8658: a1 = u64 [sp + 0x98]\n  8662: u8 [a0 + 0x10] = a1\n  8665: a1 = u64 [sp + 0xa8]\n  8669: u8 [a0 + 0xf] = a1\n  8672: a1 = u64 [sp + 0xb0]\n  8676: u8 [a0 + 0xe] = a1\n  8679: a1 = u64 [sp + 0xb8]\n  8683: u8 [a0 + 0xd] = a1\n  8686: a1 = u64 [sp + 0xc0]\n  8690: u8 [a0 + 0xc] = a1\n  8693: a1 = u64 [sp + 0xc8]\n  8697: u8 [a0 + 0xb] = a1\n  8700: a1 = u64 [sp + 0xd0]\n  8704: u8 [a0 + 0xa] = a1\n  8707: a1 = u64 [sp + 0xd8]\n  8711: u8 [a0 + 0x9] = a1\n  8714: a1 = u64 [sp + 0xe0]\n  8718: u8 [a0 + 0x8] = a1\n  8721: a1 = u64 [sp + 0xe8]\n  8725: u8 [a0 + 0x7] = a1\n  8728: a1 = u64 [sp + 0xf0]\n  8732: u8 [a0 + 0x6] = a1\n  8735: a1 = u64 [sp + 0xf8]\n  8739: u8 [a0 + 0x5] = a1\n  8742: a1 = u64 [sp + 0x100]\n  8746: u8 [a0 + 0x4] = a1\n  8749: a1 = u64 [sp + 0x108]\n  8753: u8 [a0 + 0x3] = a1\n  8756: a1 = u64 [sp + 0x110]\n  8760: u8 [a0 + 0x2] = a1\n  8763: a1 = u64 [sp + 0x118]\n  8767: u8 [a0 + 0x1] = a1\n  8770: a1 = u64 [sp + 0x120]\n  8774: u8 [a0] = a1\n  8776: a1 = u64 [sp + 0x170]\n  8780: a0 = a1 + 0x20\n  8783: u64 [sp + 0x120] = a0\n  8787: a2 = a0 <u a1\n  8790: a1 = u64 [sp + 0x160]\n  8794: a0 = a1 + a2\n  8797: u64 [sp + 0x118] = a0\n  8801: a3 = a0 <u a1\n  8804: a3 = a2 if a2 == 0\n  8807: a0 = u64 [sp + 0xa0]\n  8811: t2 = a0 + a3\n  8814: a3 = t2 <u a0\n  8817: a0 = u64 [sp + 0x178]\n  8821: a0 = a0 + a3\n  8824: u64 [sp + 0x178] = a0\n  8828: a0 = u64 [sp + 0x138]\n  8832: ra = a0 + 0x20\n  8835: a5 = ra <u a0\n  8838: a0 = u64 [sp + 0x150]\n  8842: t0 = a0 + a5\n  8845: s1 = t0 <u a0\n  8848: s1 = a5 if a5 == 0\n  8851: a2 = u64 [sp + 0x140]\n  8855: a5 = a2 <u 0x10\n  8858: a2 = a2 + 0x1\n  8861: a0 = u64 [sp + 0x148]\n  8865: a5 = 0 if a0 != 0\n  8867: a1 = a2 <u 0x1\n  8870: a1 = a1 + a0\n  8873: a0 = a2 | a1\n  8876: a0 = a0 <u 0x1\n  8879: a4 = u64 [sp + 0x130]\n  8883: a0 = a0 + a4\n  8886: t1 = a0 <u a4\n  8889: a3 = u64 [sp + 0x128]\n  8893: a4 = a4 | a3\n  8896: a3 = a3 + t1\n  8899: a5 = 0 if a4 != 0\n  8901: a4 = u64 [sp + 0x168]\n  8905: s1 = s1 + a4\n  8908: a4 = s1 <u a4\n  8911: t1 = u64 [sp + 0x158]\n  8915: a4 = a4 + t1\n  8918: u64 [sp + 0x140] = a2\n  8922: u64 [sp + 0x148] = a1\n  8926: a2 = a0\n  8928: u64 [sp + 0x168] = s1\n  8932: a0 = u64 [sp + 0x120]\n  8936: u64 [sp + 0x170] = a0\n  8940: s1 = u64 [sp + 0x118]\n  8944: jump @163 if a5 != 0\n      : @168 (gas: 12)\n  8948: a2 = u64 [sp + 0x20]\n  8951: a3 = u64 [sp + 0x18]\n  8954: a0 = a2 | a3\n  8957: a1 = u64 [sp + 0x10]\n  8960: a4 = u64 [sp + 0x8]\n  8963: a1 = a1 | a4\n  8966: a0 = a0 | a1\n  8969: a0 = a0 >> 0x20\n  8972: a1 = a1 | a3\n  8975: a1 = a1 << 0x20\n  8978: a0 = a0 | a1\n  8981: jump @172 if a0 == 0\n      : @169 (gas: 1)\n  8984: trap\n      : @170 (gas: 3)\n  8985: a0 = 0\n  8987: a1 = 0\n  8989: ra = 130, jump @0\n      : @171 [@dyn 65] (gas: 5)\n  8995: i32 a1 = a0 + 0\n  8997: a0 = 0x1\n  9000: a2 = 0\n  9002: ecalli 6 // 'seal_return'\n  9004: fallthrough\n      : @172 (gas: 3)\n  9005: i32 a0 = a2 + 0\n  9007: a1 = 0x220\n  9011: ra = 132, jump @0\n      : @173 [@dyn 66] (gas: 6)\n  9017: i32 a1 = a0 + 0\n  9019: a2 = 0x220\n  9023: a0 = 0\n  9025: ra = 0x86\n  9029: ecalli 6 // 'seal_return'\n  9031: fallthrough\n      : @174 [@dyn 67] (gas: 19)\n  9032: t0 = u64 [a0 + 0x18]\n  9035: t1 = u64 [a1 + 0x18]\n  9038: a4 = u64 [a0 + 0x10]\n  9041: a5 = u64 [a0 + 0x8]\n  9044: a2 = u64 [a1 + 0x8]\n  9047: t2 = u64 [a0]\n  9049: a3 = u64 [a1]\n  9051: a1 = u64 [a1 + 0x10]\n  9054: a0 = a2 ^ a5\n  9057: a2 = a2 <u a5\n  9060: a3 = a3 <u t2\n  9063: a3 = a2 if a0 != 0\n  9066: a0 = a1 - a4\n  9069: a0 = a0 <u a3\n  9072: a1 = a1 <u a4\n  9075: a2 = t1 - t0\n  9078: a2 = a2 - a1\n  9081: a2 = a2 - a0\n  9084: jump @176 if a2 <s 0\n      : @175 (gas: 1)\n  9087: ret\n      : @176 (gas: 5)\n  9089: sp = sp + 0xfffffffffffffff8\n  9092: u64 [sp] = ra\n  9094: a0 = 0\n  9096: a1 = 0\n  9098: ra = 136, jump @0\n      : @177 [@dyn 68] (gas: 6)\n  9104: i32 a1 = a0 + 0\n  9106: a0 = 0x1\n  9109: a2 = 0\n  9111: ra = 0x8a\n  9115: ecalli 6 // 'seal_return'\n  9117: fallthrough\n      : @178 [@dyn 69] (gas: 194)\n  9118: sp = sp + 0xffffffffffffffa0\n  9121: u64 [sp + 0x58] = ra\n  9124: u64 [sp + 0x50] = s0\n  9127: u64 [sp + 0x48] = s1\n  9130: u64 [sp] = a0\n  9132: t1 = u64 [a1]\n  9134: ra = u64 [a1 + 0x8]\n  9137: a4 = u64 [a1 + 0x10]\n  9140: a1 = u64 [a1 + 0x18]\n  9143: t0 = u64 [a2]\n  9145: a3 = u64 [a2 + 0x8]\n  9148: t2 = u64 [a2 + 0x18]\n  9151: a2 = u64 [a2 + 0x10]\n  9154: s0 = t0 >> 0x3d\n  9157: s1 = a3 << 0x3\n  9160: s0 = s0 | s1\n  9163: a3 = a3 >> 0x3d\n  9166: s1 = a2 << 0x3\n  9169: a3 = a3 | s1\n  9172: a2 = a2 >> 0x3d\n  9175: t2 = t2 << 0x3\n  9178: s1 = t2 | a2\n  9181: t2 = t0 << 0x3\n  9184: a2 = s1 >u 0\n  9186: a5 = a3 >u 0\n  9188: a5 = a2 if s1 != 0\n  9191: a0 = s0 >u 0\n  9193: a2 = t2 <u 0x100\n  9197: t2 = a2 ^ 0x1\n  9200: t2 = a0 if s0 != 0\n  9203: a3 = a3 | s1\n  9206: t2 = a5 if a3 != 0\n  9209: u8 [sp + 71] = 0\n  9212: u8 [sp + 70] = 0\n  9215: u8 [sp + 69] = 0\n  9218: u8 [sp + 68] = 0\n  9221: u8 [sp + 67] = 0\n  9224: u8 [sp + 66] = 0\n  9227: u8 [sp + 65] = 0\n  9230: u8 [sp + 64] = 0\n  9233: u8 [sp + 63] = 0\n  9236: u8 [sp + 62] = 0\n  9239: u8 [sp + 61] = 0\n  9242: u8 [sp + 60] = 0\n  9245: u8 [sp + 59] = 0\n  9248: u8 [sp + 58] = 0\n  9251: u8 [sp + 57] = 0\n  9254: u8 [sp + 56] = 0\n  9257: u8 [sp + 55] = 0\n  9260: u8 [sp + 54] = 0\n  9263: u8 [sp + 53] = 0\n  9266: u8 [sp + 52] = 0\n  9269: u8 [sp + 51] = 0\n  9272: u8 [sp + 50] = 0\n  9275: u8 [sp + 49] = 0\n  9278: u8 [sp + 48] = 0\n  9281: u8 [sp + 47] = 0\n  9284: u8 [sp + 46] = 0\n  9287: u8 [sp + 45] = 0\n  9290: u8 [sp + 44] = 0\n  9293: u8 [sp + 43] = 0\n  9296: u8 [sp + 42] = 0\n  9299: u8 [sp + 41] = 0\n  9302: u8 [sp + 40] = 0\n  9305: u8 [sp + 0x20] = a1\n  9308: u8 [sp + 0x18] = a4\n  9311: u8 [sp + 0x10] = ra\n  9314: u8 [sp + 0x8] = t1\n  9317: a0 = a1 >> 0x38\n  9320: u8 [sp + 0x27] = a0\n  9323: a0 = a1 >> 0x30\n  9326: u8 [sp + 0x26] = a0\n  9329: a0 = a1 >> 0x28\n  9332: u8 [sp + 0x25] = a0\n  9335: a0 = a1 >> 0x20\n  9338: u8 [sp + 0x24] = a0\n  9341: a0 = a1 >> 0x18\n  9344: u8 [sp + 0x23] = a0\n  9347: a0 = a1 >> 0x10\n  9350: u8 [sp + 0x22] = a0\n  9353: a1 = a1 >> 0x8\n  9356: u8 [sp + 0x21] = a1\n  9359: a0 = a4 >> 0x38\n  9362: u8 [sp + 0x1f] = a0\n  9365: a0 = a4 >> 0x30\n  9368: u8 [sp + 0x1e] = a0\n  9371: a0 = a4 >> 0x28\n  9374: u8 [sp + 0x1d] = a0\n  9377: a0 = a4 >> 0x20\n  9380: u8 [sp + 0x1c] = a0\n  9383: a0 = a4 >> 0x18\n  9386: u8 [sp + 0x1b] = a0\n  9389: a0 = a4 >> 0x10\n  9392: u8 [sp + 0x1a] = a0\n  9395: a4 = a4 >> 0x8\n  9398: u8 [sp + 0x19] = a4\n  9401: a0 = ra >> 0x38\n  9404: u8 [sp + 0x17] = a0\n  9407: a0 = ra >> 0x30\n  9410: u8 [sp + 0x16] = a0\n  9413: a0 = ra >> 0x28\n  9416: u8 [sp + 0x15] = a0\n  9419: a0 = ra >> 0x20\n  9422: u8 [sp + 0x14] = a0\n  9425: a0 = ra >> 0x18\n  9428: u8 [sp + 0x13] = a0\n  9431: a0 = ra >> 0x10\n  9434: u8 [sp + 0x12] = a0\n  9437: a0 = ra >> 0x8\n  9440: u8 [sp + 0x11] = a0\n  9443: a0 = t1 >> 0x38\n  9446: u8 [sp + 0xf] = a0\n  9449: a0 = t1 >> 0x30\n  9452: u8 [sp + 0xe] = a0\n  9455: a0 = t1 >> 0x28\n  9458: u8 [sp + 0xd] = a0\n  9461: a0 = t1 >> 0x20\n  9464: u8 [sp + 0xc] = a0\n  9467: a0 = t1 >> 0x18\n  9470: u8 [sp + 0xb] = a0\n  9473: a0 = t1 >> 0x10\n  9476: u8 [sp + 0xa] = a0\n  9479: a0 = t1 >> 0x8\n  9482: u8 [sp + 0x9] = a0\n  9485: a1 = t0 & 0x1f\n  9488: a0 = sp + 0x8\n  9491: a1 = a1 + a0\n  9494: a0 = u8 [a1 + 0x9]\n  9497: a2 = u8 [a1 + 0x8]\n  9500: a3 = u8 [a1 + 0xa]\n  9503: a4 = u8 [a1 + 0xb]\n  9506: a0 = a0 << 0x8\n  9509: a0 = a0 | a2\n  9512: a3 = a3 << 0x10\n  9515: a4 = a4 << 0x18\n  9518: a3 = a3 | a4\n  9521: a0 = a0 | a3\n  9524: a2 = u8 [a1 + 0xd]\n  9527: a3 = u8 [a1 + 0xc]\n  9530: a4 = u8 [a1 + 0xe]\n  9533: a5 = u8 [a1 + 0xf]\n  9536: a2 = a2 << 0x8\n  9539: a2 = a2 | a3\n  9542: a4 = a4 << 0x10\n  9545: a5 = a5 << 0x18\n  9548: a4 = a4 | a5\n  9551: a2 = a2 | a4\n  9554: a2 = a2 << 0x20\n  9557: a3 = a2 | a0\n  9560: a0 = u8 [a1 + 0x1]\n  9563: a2 = u8 [a1]\n  9565: a4 = u8 [a1 + 0x2]\n  9568: a5 = u8 [a1 + 0x3]\n  9571: a0 = a0 << 0x8\n  9574: a0 = a0 | a2\n  9577: a4 = a4 << 0x10\n  9580: a5 = a5 << 0x18\n  9583: a4 = a4 | a5\n  9586: a0 = a0 | a4\n  9589: a2 = u8 [a1 + 0x5]\n  9592: a4 = u8 [a1 + 0x4]\n  9595: a5 = u8 [a1 + 0x6]\n  9598: s1 = u8 [a1 + 0x7]\n  9601: a2 = a2 << 0x8\n  9604: a2 = a2 | a4\n  9607: a5 = a5 << 0x10\n  9610: s1 = s1 << 0x18\n  9613: a5 = a5 | s1\n  9616: a2 = a2 | a5\n  9619: a2 = a2 << 0x20\n  9622: a0 = a0 | a2\n  9625: a2 = u8 [a1 + 0x11]\n  9628: a4 = u8 [a1 + 0x10]\n  9631: a5 = u8 [a1 + 0x12]\n  9634: a1 = u8 [a1 + 0x13]\n  9637: a2 = a2 << 0x8\n  9640: a2 = a2 | a4\n  9643: a5 = a5 << 0x10\n  9646: a1 = a1 << 0x18\n  9649: a1 = a1 | a5\n  9652: a1 = a1 | a2\n  9655: a0 = 0 if t2 != 0\n  9657: a3 = 0 if t2 != 0\n  9659: a1 = 0 if t2 != 0\n  9661: a2 = u64 [sp]\n  9663: u64 [a2 + 24] = 0\n  9666: u64 [a2 + 0x10] = a1\n  9669: u64 [a2 + 0x8] = a3\n  9672: u64 [a2] = a0\n  9674: ra = u64 [sp + 0x58]\n  9677: s0 = u64 [sp + 0x50]\n  9680: s1 = u64 [sp + 0x48]\n  9683: sp = sp + 0x60\n  9686: ret\n      : @179 (gas: 8)\n  9688: a0 = u64 [sp + 0x30]\n  9691: a1 = u64 [sp + 0x38]\n  9694: a2 = u64 [sp + 0x28]\n  9697: a3 = u64 [sp + 0x20]\n  9700: a1 = a1 | a2\n  9703: a0 = a0 | a3\n  9706: a0 = a0 | a1\n  9709: jump @184 if a0 != 0\n      : @180 (gas: 2)\n  9713: a0 = i32 [0x20004]\n  9718: jump @184 if a0 <=u 3\n      : @181 (gas: 24)\n  9723: u64 [sp + 88] = 0\n  9726: u64 [sp + 80] = 0\n  9729: u64 [sp + 72] = 0\n  9732: u64 [sp + 64] = 0x1\n  9736: u64 [sp + 120] = 0\n  9739: u64 [sp + 112] = 0\n  9742: u64 [sp + 104] = 0\n  9745: u64 [sp + 96] = 0\n  9748: u32 [sp + 128] = 0x20\n  9753: i32 a1 = sp + 0x40\n  9756: i32 a3 = sp + 0x60\n  9759: i32 a4 = sp + 0x80\n  9763: a2 = 0xffffffffffffffff\n  9766: a0 = 0\n  9768: ecalli 4 // 'get_storage'\n  9770: a0 = u64 [sp + 0x70]\n  9773: u64 [sp + 0x8] = a0\n  9776: a0 = u64 [sp + 0x68]\n  9779: u64 [sp + 0x10] = a0\n  9782: a0 = u64 [sp + 0x60]\n  9785: u64 [sp + 0x18] = a0\n  9788: a0 = 0x40\n  9791: a1 = 0x20\n  9794: ra = 140, jump @0\n      : @182 [@dyn 70] (gas: 100)\n  9800: a1 = u8 [a0 + 0x11]\n  9803: a2 = u8 [a0 + 0x10]\n  9806: a3 = u8 [a0 + 0x12]\n  9809: a4 = u8 [a0 + 0x13]\n  9812: a1 = a1 << 0x8\n  9815: a1 = a1 | a2\n  9818: a3 = a3 << 0x10\n  9821: a4 = a4 << 0x18\n  9824: a3 = a3 | a4\n  9827: a1 = a1 | a3\n  9830: a2 = u8 [a0 + 0x15]\n  9833: a3 = u8 [a0 + 0x14]\n  9836: a4 = u8 [a0 + 0x16]\n  9839: a5 = u8 [a0 + 0x17]\n  9842: a2 = a2 << 0x8\n  9845: a2 = a2 | a3\n  9848: a4 = a4 << 0x10\n  9851: a5 = a5 << 0x18\n  9854: a4 = a4 | a5\n  9857: a2 = a2 | a4\n  9860: a2 = a2 << 0x20\n  9863: t0 = a2 | a1\n  9866: a2 = u8 [a0 + 0x1]\n  9869: a3 = u8 [a0]\n  9871: a4 = u8 [a0 + 0x2]\n  9874: a5 = u8 [a0 + 0x3]\n  9877: a2 = a2 << 0x8\n  9880: a2 = a2 | a3\n  9883: a4 = a4 << 0x10\n  9886: a5 = a5 << 0x18\n  9889: a4 = a4 | a5\n  9892: a2 = a2 | a4\n  9895: a3 = u8 [a0 + 0x5]\n  9898: a4 = u8 [a0 + 0x4]\n  9901: a5 = u8 [a0 + 0x6]\n  9904: s1 = u8 [a0 + 0x7]\n  9907: a3 = a3 << 0x8\n  9910: a3 = a3 | a4\n  9913: a5 = a5 << 0x10\n  9916: s1 = s1 << 0x18\n  9919: a5 = a5 | s1\n  9922: a3 = a3 | a5\n  9925: a3 = a3 << 0x20\n  9928: a2 = a2 | a3\n  9931: a3 = u8 [a0 + 0x19]\n  9934: a4 = u8 [a0 + 0x18]\n  9937: a5 = u8 [a0 + 0x1a]\n  9940: s1 = u8 [a0 + 0x1b]\n  9943: a3 = a3 << 0x8\n  9946: a3 = a3 | a4\n  9949: a5 = a5 << 0x10\n  9952: s1 = s1 << 0x18\n  9955: a5 = a5 | s1\n  9958: a3 = a3 | a5\n  9961: a4 = u8 [a0 + 0x1d]\n  9964: a5 = u8 [a0 + 0x1c]\n  9967: s1 = u8 [a0 + 0x1e]\n  9970: a1 = u8 [a0 + 0x1f]\n  9973: a4 = a4 << 0x8\n  9976: a4 = a4 | a5\n  9979: s1 = s1 << 0x10\n  9982: a1 = a1 << 0x18\n  9985: a1 = a1 | s1\n  9988: a1 = a1 | a4\n  9991: a1 = a1 << 0x20\n  9994: a3 = a3 | a1\n  9997: a1 = u8 [a0 + 0x9]\n 10000: a4 = u8 [a0 + 0x8]\n 10003: a5 = u8 [a0 + 0xa]\n 10006: s1 = u8 [a0 + 0xb]\n 10009: a1 = a1 << 0x8\n 10012: a1 = a1 | a4\n 10015: a5 = a5 << 0x10\n 10018: s1 = s1 << 0x18\n 10021: a5 = a5 | s1\n 10024: a1 = a1 | a5\n 10027: a4 = u8 [a0 + 0xd]\n 10030: a5 = u8 [a0 + 0xc]\n 10033: s1 = u8 [a0 + 0xe]\n 10036: a0 = u8 [a0 + 0xf]\n 10039: a4 = a4 << 0x8\n 10042: a4 = a4 | a5\n 10045: s1 = s1 << 0x10\n 10048: a0 = a0 << 0x18\n 10051: a0 = a0 | s1\n 10054: a0 = a0 | a4\n 10057: a0 = a0 << 0x20\n 10060: a0 = a0 | a1\n 10063: a1 = reverse a0\n 10065: a0 = reverse a3\n 10067: a2 = reverse a2\n 10069: a3 = reverse t0\n 10071: a2 = a2 | a3\n 10074: a3 = a0 | a1\n 10077: a3 = a3 | a2\n 10080: a3 = a3 >> 0x20\n 10083: a1 = a1 | a2\n 10086: a1 = a1 << 0x20\n 10089: a1 = a1 | a3\n 10092: jump @186 if a1 == 0\n      : @183 (gas: 1)\n 10095: trap\n      : @184 (gas: 3)\n 10096: a0 = 0\n 10098: a1 = 0\n 10100: ra = 142, jump @0\n      : @185 [@dyn 71] (gas: 5)\n 10106: i32 a1 = a0 + 0\n 10108: a0 = 0x1\n 10111: a2 = 0\n 10113: ecalli 6 // 'seal_return'\n 10115: fallthrough\n      : @186 (gas: 7)\n 10116: a1 = u64 [sp + 0x8]\n 10119: a1 = a1 << 0x20\n 10122: s1 = a1 >> 0x20\n 10125: i32 a0 = a0 + 0\n 10127: u64 [sp + 0x8] = a0\n 10130: a1 = 0x20\n 10133: ra = 144, jump @0\n      : @187 [@dyn 72] (gas: 58)\n 10139: a1 = reverse s1\n 10141: a2 = u64 [sp + 0x10]\n 10144: a2 = reverse a2\n 10146: a3 = u64 [sp + 0x18]\n 10149: a3 = reverse a3\n 10151: a4 = a3 >> 0x38\n 10154: u8 [a0 + 0x1f] = a4\n 10157: a4 = a3 >> 0x30\n 10160: u8 [a0 + 0x1e] = a4\n 10163: a4 = a3 >> 0x28\n 10166: u8 [a0 + 0x1d] = a4\n 10169: a4 = a3 >> 0x20\n 10172: u8 [a0 + 0x1c] = a4\n 10175: a4 = a3 >> 0x18\n 10178: u8 [a0 + 0x1b] = a4\n 10181: a4 = a3 >> 0x10\n 10184: u8 [a0 + 0x1a] = a4\n 10187: a4 = a3 >> 0x8\n 10190: u8 [a0 + 0x19] = a4\n 10193: u8 [a0 + 0x18] = a3\n 10196: u8 [a0 + 0x10] = a2\n 10199: u8 [a0 + 11] = 0\n 10202: u8 [a0 + 10] = 0\n 10205: u8 [a0 + 9] = 0\n 10208: u8 [a0 + 7] = 0\n 10211: u8 [a0 + 6] = 0\n 10214: u8 [a0 + 5] = 0\n 10217: u8 [a0 + 4] = 0\n 10220: u8 [a0 + 3] = 0\n 10223: u8 [a0 + 2] = 0\n 10226: u8 [a0 + 1] = 0\n 10229: u8 [a0 + 0] = 0\n 10231: a3 = a2 >> 0x38\n 10234: u8 [a0 + 0x17] = a3\n 10237: a3 = a2 >> 0x30\n 10240: u8 [a0 + 0x16] = a3\n 10243: a3 = a2 >> 0x28\n 10246: u8 [a0 + 0x15] = a3\n 10249: a3 = a2 >> 0x20\n 10252: u8 [a0 + 0x14] = a3\n 10255: a3 = a2 >> 0x18\n 10258: u8 [a0 + 0x13] = a3\n 10261: a3 = a2 >> 0x10\n 10264: u8 [a0 + 0x12] = a3\n 10267: a2 = a2 >> 0x8\n 10270: u8 [a0 + 0x11] = a2\n 10273: u8 [a0 + 0x8] = a1\n 10276: a2 = a1 >> 0x38\n 10279: u8 [a0 + 0xf] = a2\n 10282: a2 = a1 >> 0x30\n 10285: u8 [a0 + 0xe] = a2\n 10288: a2 = a1 >> 0x28\n 10291: u8 [a0 + 0xd] = a2\n 10294: a1 = a1 >> 0x20\n 10297: u8 [a0 + 0xc] = a1\n 10300: a1 = 0x20\n 10303: a0 = u64 [sp + 0x8]\n 10306: ra = 146, jump @0\n      : @188 [@dyn 73] (gas: 6)\n 10312: i32 a1 = a0 + 0\n 10314: a2 = 0x20\n 10317: a0 = 0\n 10319: ra = 0x94\n 10323: ecalli 6 // 'seal_return'\n 10325: fallthrough\n      : @189 [@dyn 74] (gas: 35)\n 10326: sp = sp + 0xffffffffffffffa0\n 10329: u64 [sp + 0x58] = ra\n 10332: u64 [sp + 0x50] = s0\n 10335: u64 [sp + 0x48] = s1\n 10338: s0 = sp + 0x60\n 10341: sp = sp & 0xffffffffffffffe0\n 10344: s1 = a0\n 10346: u64 [sp + 24] = 0\n 10349: u64 [sp + 16] = 0\n 10352: u64 [sp + 8] = 0\n 10355: u64 [sp + 0] = 0x2\n 10358: u64 [sp + 56] = 0\n 10361: u64 [sp + 48] = 0\n 10364: u64 [sp + 40] = 0\n 10367: u64 [sp + 32] = 0\n 10370: u32 [sp + 64] = 0x20\n 10374: i32 a1 = sp + 0\n 10376: i32 a3 = sp + 0x20\n 10379: i32 a4 = sp + 0x40\n 10382: a2 = 0xffffffffffffffff\n 10385: a0 = 0\n 10387: ecalli 4 // 'get_storage'\n 10389: a0 = u32 [sp + 0x30]\n 10392: a1 = u64 [sp + 0x28]\n 10395: a2 = u64 [sp + 0x20]\n 10398: u64 [s1 + 24] = 0\n 10401: u64 [s1 + 0x10] = a0\n 10404: u64 [s1 + 0x8] = a1\n 10407: u64 [s1] = a2\n 10409: sp = s0 + 0xffffffffffffffa0\n 10412: ra = u64 [sp + 0x58]\n 10415: s0 = u64 [sp + 0x50]\n 10418: s1 = u64 [sp + 0x48]\n 10421: sp = sp + 0x60\n 10424: ret\n      : @190 (gas: 8)\n 10426: a0 = u64 [sp + 0x30]\n 10429: a1 = u64 [sp + 0x38]\n 10432: a2 = u64 [sp + 0x28]\n 10435: a3 = u64 [sp + 0x20]\n 10438: a1 = a1 | a2\n 10441: a0 = a0 | a3\n 10444: a0 = a0 | a1\n 10447: jump @195 if a0 != 0\n      : @191 (gas: 2)\n 10451: a0 = i32 [0x20004]\n 10456: jump @195 if a0 <=u 3\n      : @192 (gas: 24)\n 10461: u64 [sp + 88] = 0\n 10464: u64 [sp + 80] = 0\n 10467: u64 [sp + 72] = 0\n 10470: u64 [sp + 64] = 0x2\n 10474: u64 [sp + 120] = 0\n 10477: u64 [sp + 112] = 0\n 10480: u64 [sp + 104] = 0\n 10483: u64 [sp + 96] = 0\n 10486: u32 [sp + 128] = 0x20\n 10491: i32 a1 = sp + 0x40\n 10494: i32 a3 = sp + 0x60\n 10497: i32 a4 = sp + 0x80\n 10501: a2 = 0xffffffffffffffff\n 10504: a0 = 0\n 10506: ecalli 4 // 'get_storage'\n 10508: a0 = u64 [sp + 0x70]\n 10511: u64 [sp + 0x8] = a0\n 10514: a0 = u64 [sp + 0x68]\n 10517: u64 [sp + 0x10] = a0\n 10520: a0 = u64 [sp + 0x60]\n 10523: u64 [sp + 0x18] = a0\n 10526: a0 = 0x40\n 10529: a1 = 0x20\n 10532: ra = 150, jump @0\n      : @193 [@dyn 75] (gas: 100)\n 10538: a1 = u8 [a0 + 0x11]\n 10541: a2 = u8 [a0 + 0x10]\n 10544: a3 = u8 [a0 + 0x12]\n 10547: a4 = u8 [a0 + 0x13]\n 10550: a1 = a1 << 0x8\n 10553: a1 = a1 | a2\n 10556: a3 = a3 << 0x10\n 10559: a4 = a4 << 0x18\n 10562: a3 = a3 | a4\n 10565: a1 = a1 | a3\n 10568: a2 = u8 [a0 + 0x15]\n 10571: a3 = u8 [a0 + 0x14]\n 10574: a4 = u8 [a0 + 0x16]\n 10577: a5 = u8 [a0 + 0x17]\n 10580: a2 = a2 << 0x8\n 10583: a2 = a2 | a3\n 10586: a4 = a4 << 0x10\n 10589: a5 = a5 << 0x18\n 10592: a4 = a4 | a5\n 10595: a2 = a2 | a4\n 10598: a2 = a2 << 0x20\n 10601: t0 = a2 | a1\n 10604: a2 = u8 [a0 + 0x1]\n 10607: a3 = u8 [a0]\n 10609: a4 = u8 [a0 + 0x2]\n 10612: a5 = u8 [a0 + 0x3]\n 10615: a2 = a2 << 0x8\n 10618: a2 = a2 | a3\n 10621: a4 = a4 << 0x10\n 10624: a5 = a5 << 0x18\n 10627: a4 = a4 | a5\n 10630: a2 = a2 | a4\n 10633: a3 = u8 [a0 + 0x5]\n 10636: a4 = u8 [a0 + 0x4]\n 10639: a5 = u8 [a0 + 0x6]\n 10642: s1 = u8 [a0 + 0x7]\n 10645: a3 = a3 << 0x8\n 10648: a3 = a3 | a4\n 10651: a5 = a5 << 0x10\n 10654: s1 = s1 << 0x18\n 10657: a5 = a5 | s1\n 10660: a3 = a3 | a5\n 10663: a3 = a3 << 0x20\n 10666: a2 = a2 | a3\n 10669: a3 = u8 [a0 + 0x19]\n 10672: a4 = u8 [a0 + 0x18]\n 10675: a5 = u8 [a0 + 0x1a]\n 10678: s1 = u8 [a0 + 0x1b]\n 10681: a3 = a3 << 0x8\n 10684: a3 = a3 | a4\n 10687: a5 = a5 << 0x10\n 10690: s1 = s1 << 0x18\n 10693: a5 = a5 | s1\n 10696: a3 = a3 | a5\n 10699: a4 = u8 [a0 + 0x1d]\n 10702: a5 = u8 [a0 + 0x1c]\n 10705: s1 = u8 [a0 + 0x1e]\n 10708: a1 = u8 [a0 + 0x1f]\n 10711: a4 = a4 << 0x8\n 10714: a4 = a4 | a5\n 10717: s1 = s1 << 0x10\n 10720: a1 = a1 << 0x18\n 10723: a1 = a1 | s1\n 10726: a1 = a1 | a4\n 10729: a1 = a1 << 0x20\n 10732: a3 = a3 | a1\n 10735: a1 = u8 [a0 + 0x9]\n 10738: a4 = u8 [a0 + 0x8]\n 10741: a5 = u8 [a0 + 0xa]\n 10744: s1 = u8 [a0 + 0xb]\n 10747: a1 = a1 << 0x8\n 10750: a1 = a1 | a4\n 10753: a5 = a5 << 0x10\n 10756: s1 = s1 << 0x18\n 10759: a5 = a5 | s1\n 10762: a1 = a1 | a5\n 10765: a4 = u8 [a0 + 0xd]\n 10768: a5 = u8 [a0 + 0xc]\n 10771: s1 = u8 [a0 + 0xe]\n 10774: a0 = u8 [a0 + 0xf]\n 10777: a4 = a4 << 0x8\n 10780: a4 = a4 | a5\n 10783: s1 = s1 << 0x10\n 10786: a0 = a0 << 0x18\n 10789: a0 = a0 | s1\n 10792: a0 = a0 | a4\n 10795: a0 = a0 << 0x20\n 10798: a0 = a0 | a1\n 10801: a1 = reverse a0\n 10803: a0 = reverse a3\n 10805: a2 = reverse a2\n 10807: a3 = reverse t0\n 10809: a2 = a2 | a3\n 10812: a3 = a0 | a1\n 10815: a3 = a3 | a2\n 10818: a3 = a3 >> 0x20\n 10821: a1 = a1 | a2\n 10824: a1 = a1 << 0x20\n 10827: a1 = a1 | a3\n 10830: jump @197 if a1 == 0\n      : @194 (gas: 1)\n 10833: trap\n      : @195 (gas: 3)\n 10834: a0 = 0\n 10836: a1 = 0\n 10838: ra = 152, jump @0\n      : @196 [@dyn 76] (gas: 5)\n 10844: i32 a1 = a0 + 0\n 10846: a0 = 0x1\n 10849: a2 = 0\n 10851: ecalli 6 // 'seal_return'\n 10853: fallthrough\n      : @197 (gas: 7)\n 10854: a1 = u64 [sp + 0x8]\n 10857: a1 = a1 << 0x20\n 10860: s1 = a1 >> 0x20\n 10863: i32 a0 = a0 + 0\n 10865: u64 [sp + 0x8] = a0\n 10868: a1 = 0x20\n 10871: ra = 154, jump @0\n      : @198 [@dyn 77] (gas: 58)\n 10877: a1 = reverse s1\n 10879: a2 = u64 [sp + 0x10]\n 10882: a2 = reverse a2\n 10884: a3 = u64 [sp + 0x18]\n 10887: a3 = reverse a3\n 10889: a4 = a3 >> 0x38\n 10892: u8 [a0 + 0x1f] = a4\n 10895: a4 = a3 >> 0x30\n 10898: u8 [a0 + 0x1e] = a4\n 10901: a4 = a3 >> 0x28\n 10904: u8 [a0 + 0x1d] = a4\n 10907: a4 = a3 >> 0x20\n 10910: u8 [a0 + 0x1c] = a4\n 10913: a4 = a3 >> 0x18\n 10916: u8 [a0 + 0x1b] = a4\n 10919: a4 = a3 >> 0x10\n 10922: u8 [a0 + 0x1a] = a4\n 10925: a4 = a3 >> 0x8\n 10928: u8 [a0 + 0x19] = a4\n 10931: u8 [a0 + 0x18] = a3\n 10934: u8 [a0 + 0x10] = a2\n 10937: u8 [a0 + 11] = 0\n 10940: u8 [a0 + 10] = 0\n 10943: u8 [a0 + 9] = 0\n 10946: u8 [a0 + 7] = 0\n 10949: u8 [a0 + 6] = 0\n 10952: u8 [a0 + 5] = 0\n 10955: u8 [a0 + 4] = 0\n 10958: u8 [a0 + 3] = 0\n 10961: u8 [a0 + 2] = 0\n 10964: u8 [a0 + 1] = 0\n 10967: u8 [a0 + 0] = 0\n 10969: a3 = a2 >> 0x38\n 10972: u8 [a0 + 0x17] = a3\n 10975: a3 = a2 >> 0x30\n 10978: u8 [a0 + 0x16] = a3\n 10981: a3 = a2 >> 0x28\n 10984: u8 [a0 + 0x15] = a3\n 10987: a3 = a2 >> 0x20\n 10990: u8 [a0 + 0x14] = a3\n 10993: a3 = a2 >> 0x18\n 10996: u8 [a0 + 0x13] = a3\n 10999: a3 = a2 >> 0x10\n 11002: u8 [a0 + 0x12] = a3\n 11005: a2 = a2 >> 0x8\n 11008: u8 [a0 + 0x11] = a2\n 11011: u8 [a0 + 0x8] = a1\n 11014: a2 = a1 >> 0x38\n 11017: u8 [a0 + 0xf] = a2\n 11020: a2 = a1 >> 0x30\n 11023: u8 [a0 + 0xe] = a2\n 11026: a2 = a1 >> 0x28\n 11029: u8 [a0 + 0xd] = a2\n 11032: a1 = a1 >> 0x20\n 11035: u8 [a0 + 0xc] = a1\n 11038: a1 = 0x20\n 11041: a0 = u64 [sp + 0x8]\n 11044: ra = 156, jump @0\n      : @199 [@dyn 78] (gas: 6)\n 11050: i32 a1 = a0 + 0\n 11052: a2 = 0x20\n 11055: a0 = 0\n 11057: ra = 0x9e\n 11061: ecalli 6 // 'seal_return'\n 11063: fallthrough\n      : @200 [@dyn 79] (gas: 12)\n 11064: sp = sp + 0xffffffffffffff00\n 11068: u64 [sp + 0xf8] = ra\n 11072: u64 [sp + 0xf0] = s0\n 11076: s0 = sp + 0x100\n 11080: sp = sp & 0xffffffffffffffe0\n 11083: u64 [sp + 216] = 0\n 11087: u64 [sp + 208] = 0\n 11091: u64 [sp + 200] = 0\n 11095: u64 [sp + 192] = 0\n 11099: i32 a0 = sp + 0xc0\n 11103: ecalli 9 // 'value_transferred'\n 11105: fallthrough\n      : @201 (gas: 8)\n 11106: a0 = u64 [sp + 0xd0]\n 11110: a1 = u64 [sp + 0xd8]\n 11114: a2 = u64 [sp + 0xc8]\n 11118: a3 = u64 [sp + 0xc0]\n 11122: a1 = a1 | a2\n 11125: a0 = a0 | a3\n 11128: a0 = a0 | a1\n 11131: jump @207 if a0 != 0\n      : @202 (gas: 13)\n 11135: a0 = u32 [0x20004]\n 11140: u64 [sp + 88] = 0\n 11143: u64 [sp + 80] = 0\n 11146: u64 [sp + 72] = 0\n 11149: u64 [sp + 0x40] = a0\n 11152: u64 [sp + 120] = 0\n 11155: u64 [sp + 112] = 0\n 11158: u64 [sp + 96] = 0x4\n 11162: a0 = sp + 0x80\n 11166: a1 = sp + 0x60\n 11169: a2 = sp + 0x40\n 11172: u64 [sp + 104] = 0\n 11175: ra = 160, jump @77\n      : @203 [@dyn 80] (gas: 19)\n 11181: t0 = u64 [sp + 0x80]\n 11185: t1 = u64 [sp + 0x88]\n 11189: a1 = u64 [sp + 0x90]\n 11193: a3 = u64 [sp + 0x98]\n 11197: a4 = u64 [sp + 0xa0]\n 11201: a5 = u64 [sp + 0xa8]\n 11205: a2 = u64 [sp + 0xb0]\n 11209: a0 = u64 [sp + 0xb8]\n 11213: u64 [sp + 0x18] = a0\n 11216: u64 [sp + 0x10] = a2\n 11219: u64 [sp + 0x8] = a5\n 11222: u64 [sp] = a4\n 11224: u64 [sp + 0x38] = a3\n 11227: u64 [sp + 0x30] = a1\n 11230: u64 [sp + 0x28] = t1\n 11233: a0 = sp + 0x20\n 11236: a1 = sp\n 11238: u64 [sp + 0x20] = t0\n 11241: ra = 162, jump @356\n      : @204 [@dyn 81] (gas: 3)\n 11247: a0 = 0x40\n 11250: a1 = 0x20\n 11253: ra = 164, jump @0\n      : @205 [@dyn 82] (gas: 100)\n 11259: a1 = u8 [a0 + 0x11]\n 11262: a2 = u8 [a0 + 0x10]\n 11265: a3 = u8 [a0 + 0x12]\n 11268: a4 = u8 [a0 + 0x13]\n 11271: a1 = a1 << 0x8\n 11274: a1 = a1 | a2\n 11277: a3 = a3 << 0x10\n 11280: a4 = a4 << 0x18\n 11283: a3 = a3 | a4\n 11286: a1 = a1 | a3\n 11289: a2 = u8 [a0 + 0x15]\n 11292: a3 = u8 [a0 + 0x14]\n 11295: a4 = u8 [a0 + 0x16]\n 11298: a5 = u8 [a0 + 0x17]\n 11301: a2 = a2 << 0x8\n 11304: a2 = a2 | a3\n 11307: a4 = a4 << 0x10\n 11310: a5 = a5 << 0x18\n 11313: a4 = a4 | a5\n 11316: a2 = a2 | a4\n 11319: a2 = a2 << 0x20\n 11322: t0 = a2 | a1\n 11325: a2 = u8 [a0 + 0x1]\n 11328: a3 = u8 [a0]\n 11330: a4 = u8 [a0 + 0x2]\n 11333: a5 = u8 [a0 + 0x3]\n 11336: a2 = a2 << 0x8\n 11339: a2 = a2 | a3\n 11342: a4 = a4 << 0x10\n 11345: a5 = a5 << 0x18\n 11348: a4 = a4 | a5\n 11351: a2 = a2 | a4\n 11354: a3 = u8 [a0 + 0x5]\n 11357: a4 = u8 [a0 + 0x4]\n 11360: a5 = u8 [a0 + 0x6]\n 11363: a1 = u8 [a0 + 0x7]\n 11366: a3 = a3 << 0x8\n 11369: a3 = a3 | a4\n 11372: a5 = a5 << 0x10\n 11375: a1 = a1 << 0x18\n 11378: a1 = a1 | a5\n 11381: a1 = a1 | a3\n 11384: a1 = a1 << 0x20\n 11387: t1 = a1 | a2\n 11390: a1 = u8 [a0 + 0x19]\n 11393: a3 = u8 [a0 + 0x18]\n 11396: a4 = u8 [a0 + 0x1a]\n 11399: a5 = u8 [a0 + 0x1b]\n 11402: a1 = a1 << 0x8\n 11405: a1 = a1 | a3\n 11408: a4 = a4 << 0x10\n 11411: a5 = a5 << 0x18\n 11414: a4 = a4 | a5\n 11417: a1 = a1 | a4\n 11420: a3 = u8 [a0 + 0x1d]\n 11423: a4 = u8 [a0 + 0x1c]\n 11426: a5 = u8 [a0 + 0x1e]\n 11429: a2 = u8 [a0 + 0x1f]\n 11432: a3 = a3 << 0x8\n 11435: a3 = a3 | a4\n 11438: a5 = a5 << 0x10\n 11441: a2 = a2 << 0x18\n 11444: a2 = a2 | a5\n 11447: a2 = a2 | a3\n 11450: a2 = a2 << 0x20\n 11453: a3 = a2 | a1\n 11456: a1 = u8 [a0 + 0x9]\n 11459: a2 = u8 [a0 + 0x8]\n 11462: a4 = u8 [a0 + 0xa]\n 11465: a5 = u8 [a0 + 0xb]\n 11468: a1 = a1 << 0x8\n 11471: a1 = a1 | a2\n 11474: a4 = a4 << 0x10\n 11477: a5 = a5 << 0x18\n 11480: a4 = a4 | a5\n 11483: a1 = a1 | a4\n 11486: a2 = u8 [a0 + 0xd]\n 11489: a4 = u8 [a0 + 0xc]\n 11492: a5 = u8 [a0 + 0xe]\n 11495: a0 = u8 [a0 + 0xf]\n 11498: a2 = a2 << 0x8\n 11501: a2 = a2 | a4\n 11504: a5 = a5 << 0x10\n 11507: a0 = a0 << 0x18\n 11510: a0 = a0 | a5\n 11513: a0 = a0 | a2\n 11516: a0 = a0 << 0x20\n 11519: a0 = a0 | a1\n 11522: a1 = reverse a0\n 11524: a0 = reverse a3\n 11526: a2 = reverse t1\n 11528: a3 = reverse t0\n 11530: a2 = a2 | a3\n 11533: a3 = a0 | a1\n 11536: a3 = a3 | a2\n 11539: a3 = a3 >> 0x20\n 11542: a1 = a1 | a2\n 11545: a1 = a1 << 0x20\n 11548: a1 = a1 | a3\n 11551: jump @209 if a1 == 0\n      : @206 (gas: 1)\n 11554: trap\n      : @207 (gas: 3)\n 11555: a0 = 0\n 11557: a1 = 0\n 11559: ra = 166, jump @0\n      : @208 [@dyn 83] (gas: 7)\n 11565: i32 a1 = a0 + 0\n 11567: a0 = 0x1\n 11570: a2 = 0\n 11572: ecalli 6 // 'seal_return'\n 11574: i32 a0 = a0 + 0\n 11576: ra = 0xa8\n 11580: jump @0\n      : @209 (gas: 2)\n 11583: i32 a0 = a0 + 0\n 11585: ra = 168, jump @0\n      : @210 [@dyn 84] (gas: 6)\n 11591: i32 a1 = a0 + 0\n 11593: a0 = 0\n 11595: a2 = 0\n 11597: ra = 0xaa\n 11601: ecalli 6 // 'seal_return'\n 11603: fallthrough\n      : @211 [@dyn 85] (gas: 5)\n 11604: sp = sp + 0xfffffffffffffff8\n 11607: u64 [sp] = ra\n 11609: a0 = 0\n 11611: a1 = 0\n 11613: ra = 172, jump @0\n      : @212 [@dyn 86] (gas: 6)\n 11619: i32 a1 = a0 + 0\n 11621: a0 = 0x1\n 11624: a2 = 0\n 11626: ra = 0xae\n 11630: ecalli 6 // 'seal_return'\n 11632: fallthrough\n      : @213 [@dyn 87] (gas: 5)\n 11633: u64 [a0 + 24] = 0\n 11636: u64 [a0 + 16] = 0\n 11639: u64 [a0 + 8] = 0\n 11642: u64 [a0 + 0] = 0\n 11644: ret\n      : @214 [@dyn 88] (gas: 58)\n 11646: a1 = reverse s1\n 11648: a2 = u64 [sp + 0x8]\n 11651: a2 = reverse a2\n 11653: a3 = u64 [sp + 0x10]\n 11656: a3 = reverse a3\n 11658: a4 = a3 >> 0x38\n 11661: u8 [a0 + 0x1f] = a4\n 11664: a4 = a3 >> 0x30\n 11667: u8 [a0 + 0x1e] = a4\n 11670: a4 = a3 >> 0x28\n 11673: u8 [a0 + 0x1d] = a4\n 11676: a4 = a3 >> 0x20\n 11679: u8 [a0 + 0x1c] = a4\n 11682: a4 = a3 >> 0x18\n 11685: u8 [a0 + 0x1b] = a4\n 11688: a4 = a3 >> 0x10\n 11691: u8 [a0 + 0x1a] = a4\n 11694: a4 = a3 >> 0x8\n 11697: u8 [a0 + 0x19] = a4\n 11700: u8 [a0 + 0x18] = a3\n 11703: a3 = a2 >> 0x38\n 11706: u8 [a0 + 0x17] = a3\n 11709: a3 = a2 >> 0x30\n 11712: u8 [a0 + 0x16] = a3\n 11715: a3 = a2 >> 0x28\n 11718: u8 [a0 + 0x15] = a3\n 11721: a3 = a2 >> 0x20\n 11724: u8 [a0 + 0x14] = a3\n 11727: a3 = a2 >> 0x18\n 11730: u8 [a0 + 0x13] = a3\n 11733: a3 = a2 >> 0x10\n 11736: u8 [a0 + 0x12] = a3\n 11739: a3 = a2 >> 0x8\n 11742: u8 [a0 + 0x11] = a3\n 11745: u8 [a0 + 0x10] = a2\n 11748: a2 = a1 >> 0x38\n 11751: u8 [a0 + 0xf] = a2\n 11754: a2 = a1 >> 0x30\n 11757: u8 [a0 + 0xe] = a2\n 11760: a2 = a1 >> 0x28\n 11763: u8 [a0 + 0xd] = a2\n 11766: a2 = a1 >> 0x20\n 11769: u8 [a0 + 0xc] = a2\n 11772: u8 [a0 + 11] = 0\n 11775: u8 [a0 + 10] = 0\n 11778: u8 [a0 + 9] = 0\n 11781: u8 [a0 + 0x8] = a1\n 11784: u8 [a0 + 7] = 0\n 11787: u8 [a0 + 6] = 0\n 11790: u8 [a0 + 5] = 0\n 11793: u8 [a0 + 4] = 0\n 11796: u8 [a0 + 3] = 0\n 11799: u8 [a0 + 2] = 0\n 11802: u8 [a0 + 1] = 0\n 11805: u8 [a0 + 0] = 0\n 11807: a0 = 0x20\n 11810: a1 = 0x20\n 11813: ra = 178, jump @0\n      : @215 [@dyn 89] (gas: 35)\n 11819: u8 [a0 + 31] = 0\n 11822: u8 [a0 + 30] = 0\n 11825: u8 [a0 + 29] = 0\n 11828: u8 [a0 + 28] = 0\n 11831: u8 [a0 + 27] = 0\n 11834: u8 [a0 + 26] = 0\n 11837: u8 [a0 + 25] = 0\n 11840: u8 [a0 + 24] = 0\n 11843: u8 [a0 + 23] = 0\n 11846: u8 [a0 + 22] = 0\n 11849: u8 [a0 + 21] = 0\n 11852: u8 [a0 + 20] = 0\n 11855: u8 [a0 + 19] = 0\n 11858: u8 [a0 + 18] = 0\n 11861: u8 [a0 + 17] = 0\n 11864: u8 [a0 + 16] = 0\n 11867: u8 [a0 + 15] = 0\n 11870: u8 [a0 + 14] = 0\n 11873: u8 [a0 + 13] = 0\n 11876: u8 [a0 + 12] = 0\n 11879: u8 [a0 + 11] = 0\n 11882: u8 [a0 + 10] = 0\n 11885: u8 [a0 + 9] = 0\n 11888: u8 [a0 + 8] = 0\n 11891: u8 [a0 + 7] = 0\n 11894: u8 [a0 + 6] = 0\n 11897: u8 [a0 + 5] = 0\n 11900: u8 [a0 + 4] = 0\n 11903: u8 [a0 + 3] = 0\n 11906: u8 [a0 + 2] = 0\n 11909: u8 [a0 + 1] = 0\n 11912: u8 [a0 + 0] = 0\n 11914: a1 = 0x40\n 11917: a0 = 0\n 11919: ra = 180, jump @0\n      : @216 [@dyn 90] (gas: 5)\n 11925: i32 a0 = a0 + 0\n 11927: i32 a2 = sp + 0xc0\n 11931: a1 = 0x40\n 11934: ecalli 5 // 'hash_keccak_256'\n 11936: fallthrough\n      : @217 (gas: 9)\n 11937: a4 = u64 [sp + 0x30]\n 11940: a5 = u64 [sp + 0x28]\n 11943: t1 = u64 [sp + 0x18]\n 11946: t0 = u64 [sp + 0x20]\n 11949: a0 = t1 | t0\n 11952: a1 = a5 <u 0x11\n 11955: a1 = 0 if a4 != 0\n 11957: a1 = 0 if a0 != 0\n 11959: jump @219 if a1 == 0\n      : @218 (gas: 68)\n 11963: a0 = u64 [sp + 0xc0]\n 11967: a1 = u64 [sp + 0xc8]\n 11971: a2 = u64 [sp + 0xd8]\n 11975: a3 = u64 [sp + 0xd0]\n 11979: a0 = reverse a0\n 11981: a1 = reverse a1\n 11983: a2 = reverse a2\n 11985: a3 = reverse a3\n 11987: a4 = a4 + a3\n 11990: a5 = a5 + a2\n 11993: a2 = a5 <u a2\n 11996: a4 = a4 + a2\n 11999: s1 = a4 ^ a3\n 12002: a3 = a4 <u a3\n 12005: a3 = a2 if s1 == 0\n 12008: a2 = a1 + t1\n 12011: a3 = a3 + a2\n 12014: s1 = a3 <u a2\n 12017: a1 = a2 <u a1\n 12020: a0 = a0 + t0\n 12023: a0 = a0 + a1\n 12026: a0 = a0 + s1\n 12029: u64 [sp + 0xa0] = a5\n 12033: u64 [sp + 0xa8] = a4\n 12037: u64 [sp + 0xb0] = a3\n 12041: u64 [sp + 0xb8] = a0\n 12045: u64 [sp + 216] = 0\n 12049: u64 [sp + 208] = 0\n 12053: u64 [sp + 200] = 0\n 12057: u64 [sp + 192] = 0\n 12061: u32 [sp + 224] = 0x20\n 12066: i32 a1 = sp + 0xa0\n 12070: i32 a3 = sp + 0xc0\n 12074: i32 a4 = sp + 0xe0\n 12078: a2 = 0xffffffffffffffff\n 12081: a0 = 0\n 12083: ecalli 4 // 'get_storage'\n 12085: a0 = u64 [sp + 0xd8]\n 12089: t0 = u64 [sp + 0xc0]\n 12093: a2 = u64 [sp + 0xd0]\n 12097: a3 = u64 [sp + 0xc8]\n 12101: a1 = u64 [sp + 0x38]\n 12104: a4 = a0 ^ a1\n 12107: s1 = a0 <u a1\n 12110: a0 = u64 [sp + 0x58]\n 12113: a5 = a2 <u a0\n 12116: a5 = s1 if a4 != 0\n 12119: a1 = u64 [sp + 0x40]\n 12122: s1 = a3 ^ a1\n 12125: a3 = a3 <u a1\n 12128: a1 = u64 [sp + 0x48]\n 12131: a1 = t0 <u a1\n 12134: a1 = a3 if s1 != 0\n 12137: a0 = a0 ^ a2\n 12140: a0 = a0 | a4\n 12143: a1 = a5 if a0 != 0\n 12146: a0 = a1 ^ 0x1\n 12149: a1 = u64 [sp + 0x50]\n 12152: u64 [a1 + 24] = 0\n 12155: u64 [a1 + 16] = 0\n 12158: u64 [a1 + 8] = 0\n 12161: u64 [a1] = a0\n 12163: sp = s0 + 0xffffffffffffff00\n 12167: ra = u64 [sp + 0xf8]\n 12171: s0 = u64 [sp + 0xf0]\n 12175: s1 = u64 [sp + 0xe8]\n 12179: sp = sp + 0x100\n 12183: ret\n      : @219 (gas: 8)\n 12185: u64 [sp + 144] = 0\n 12189: u64 [sp + 136] = 0\n 12193: u64 [sp + 128] = 0\n 12197: a0 = 0x4e487b7100000000\n 12207: a1 = sp + 0x80\n 12211: u64 [sp + 0x98] = a0\n 12215: a0 = 0\n 12217: ra = 182, jump @8\n      : @220 [@dyn 91] (gas: 7)\n 12223: u64 [sp + 120] = 0\n 12226: u64 [sp + 112] = 0\n 12229: u64 [sp + 96] = 0x32\n 12233: a0 = 0x4\n 12236: a1 = sp + 0x60\n 12239: u64 [sp + 104] = 0\n 12242: ra = 184, jump @8\n      : @221 [@dyn 92] (gas: 3)\n 12248: a1 = 0x24\n 12251: a0 = 0\n 12253: ra = 186, jump @0\n      : @222 [@dyn 93] (gas: 6)\n 12259: i32 a1 = a0 + 0\n 12261: a0 = 0x1\n 12264: a2 = 0x24\n 12267: ra = 0xbc\n 12271: ecalli 6 // 'seal_return'\n 12273: fallthrough\n      : @223 [@dyn 94] (gas: 9)\n 12274: a2 = u64 [a1 + 0x18]\n 12277: a3 = u64 [a1 + 0x10]\n 12280: a4 = u64 [a1 + 0x8]\n 12283: a1 = u64 [a1]\n 12285: u64 [a0 + 0x18] = a2\n 12288: u64 [a0 + 0x10] = a3\n 12291: u64 [a0 + 0x8] = a4\n 12294: u64 [a0] = a1\n 12296: ret\n      : @224 (gas: 17)\n 12298: sp = sp + 0xffffffffffffffa0\n 12301: u64 [sp + 0x58] = ra\n 12304: u64 [sp + 0x50] = s0\n 12307: u64 [sp + 0x48] = s1\n 12310: a3 = u64 [a1 + 0x18]\n 12313: a4 = u64 [a1 + 0x10]\n 12316: a5 = u64 [a1 + 0x8]\n 12319: s1 = u64 [a1]\n 12321: a1 = a5 | a3\n 12324: a2 = s1 | a4\n 12327: a2 = a2 | a1\n 12330: a2 = a2 >> 0x20\n 12333: a1 = a1 | a4\n 12336: a1 = a1 << 0x20\n 12339: a1 = a1 | a2\n 12342: u64 [sp + 0x28] = a0\n 12345: jump @231 if a1 != 0\n      : @225 (gas: 19)\n 12349: a0 = s1 + 0x20\n 12352: u64 [sp + 0x30] = a0\n 12355: a0 = a0 <u s1\n 12358: a1 = a5 + a0\n 12361: u64 [sp + 0x40] = a1\n 12364: u64 [sp + 0x8] = a5\n 12367: s0 = a1 <u a5\n 12370: s0 = a0 if a0 == 0\n 12373: s0 = s0 + a4\n 12376: u64 [sp + 0x10] = a4\n 12379: a0 = s0 <u a4\n 12382: u64 [sp + 0x18] = a3\n 12385: a0 = a0 + a3\n 12388: u64 [sp + 0x38] = a0\n 12391: u64 [sp] = s1\n 12393: i32 a0 = s1 + 0\n 12395: a1 = 0x20\n 12398: s1 = 0x20\n 12401: ra = 190, jump @0\n      : @226 [@dyn 95] (gas: 45)\n 12407: u8 [a0 + 0x1f] = s1\n 12410: a1 = u64 [sp + 0x30]\n 12413: s1 = a1\n 12415: a1 = a1 | s0\n 12418: a2 = u64 [sp + 0x40]\n 12421: a4 = u64 [sp + 0x38]\n 12424: a2 = a2 | a4\n 12427: a1 = a1 | a2\n 12430: a1 = a1 >> 0x20\n 12433: u64 [sp + 0x20] = s0\n 12436: a2 = a2 | s0\n 12439: a2 = a2 << 0x20\n 12442: a1 = a1 | a2\n 12445: u8 [a0 + 30] = 0\n 12448: u8 [a0 + 29] = 0\n 12451: u8 [a0 + 28] = 0\n 12454: u8 [a0 + 27] = 0\n 12457: u8 [a0 + 26] = 0\n 12460: u8 [a0 + 25] = 0\n 12463: u8 [a0 + 24] = 0\n 12466: u8 [a0 + 23] = 0\n 12469: u8 [a0 + 22] = 0\n 12472: u8 [a0 + 21] = 0\n 12475: u8 [a0 + 20] = 0\n 12478: u8 [a0 + 19] = 0\n 12481: u8 [a0 + 18] = 0\n 12484: u8 [a0 + 17] = 0\n 12487: u8 [a0 + 16] = 0\n 12490: u8 [a0 + 15] = 0\n 12493: u8 [a0 + 14] = 0\n 12496: u8 [a0 + 13] = 0\n 12499: u8 [a0 + 12] = 0\n 12502: u8 [a0 + 11] = 0\n 12505: u8 [a0 + 10] = 0\n 12508: u8 [a0 + 9] = 0\n 12511: u8 [a0 + 8] = 0\n 12514: u8 [a0 + 7] = 0\n 12517: u8 [a0 + 6] = 0\n 12520: u8 [a0 + 5] = 0\n 12523: u8 [a0 + 4] = 0\n 12526: u8 [a0 + 3] = 0\n 12529: u8 [a0 + 2] = 0\n 12532: u8 [a0 + 1] = 0\n 12535: u8 [a0 + 0] = 0\n 12537: jump @231 if a1 != 0\n      : @227 (gas: 4)\n 12541: i32 s0 = s1 + 0\n 12543: a1 = 0x20\n 12546: a0 = s0\n 12548: ra = 192, jump @0\n      : @228 [@dyn 96] (gas: 41)\n 12554: u8 [a0 + 31] = 0x9\n 12558: u8 [a0 + 30] = 0\n 12561: u8 [a0 + 29] = 0\n 12564: u8 [a0 + 28] = 0\n 12567: u8 [a0 + 27] = 0\n 12570: u8 [a0 + 26] = 0\n 12573: u8 [a0 + 25] = 0\n 12576: u8 [a0 + 24] = 0\n 12579: u8 [a0 + 23] = 0\n 12582: u8 [a0 + 22] = 0\n 12585: u8 [a0 + 21] = 0\n 12588: u8 [a0 + 20] = 0\n 12591: u8 [a0 + 19] = 0\n 12594: u8 [a0 + 18] = 0\n 12597: u8 [a0 + 17] = 0\n 12600: u8 [a0 + 16] = 0\n 12603: u8 [a0 + 15] = 0\n 12606: u8 [a0 + 14] = 0\n 12609: u8 [a0 + 13] = 0\n 12612: u8 [a0 + 12] = 0\n 12615: u8 [a0 + 11] = 0\n 12618: u8 [a0 + 10] = 0\n 12621: u8 [a0 + 9] = 0\n 12624: u8 [a0 + 8] = 0\n 12627: u8 [a0 + 7] = 0\n 12630: u8 [a0 + 6] = 0\n 12633: u8 [a0 + 5] = 0\n 12636: u8 [a0 + 4] = 0\n 12639: u8 [a0 + 3] = 0\n 12642: u8 [a0 + 2] = 0\n 12645: u8 [a0 + 1] = 0\n 12648: a1 = u64 [sp + 0x20]\n 12651: a2 = u64 [sp + 0x38]\n 12654: a1 = a1 | a2\n 12657: a2 = 0xffffffe0\n 12667: a2 = s1 <u a2\n 12670: a3 = u64 [sp + 0x40]\n 12673: a2 = 0 if a3 != 0\n 12675: a2 = 0 if a1 != 0\n 12677: u8 [a0 + 0] = 0\n 12679: jump @231 if a2 == 0\n      : @229 (gas: 3)\n 12683: i32 a0 = s0 + 0x20\n 12686: a1 = 0x20\n 12689: ra = 194, jump @0\n      : @230 [@dyn 97] (gas: 54)\n 12695: u8 [a0 + 31] = 0\n 12698: u8 [a0 + 30] = 0\n 12701: u8 [a0 + 29] = 0\n 12704: u8 [a0 + 28] = 0\n 12707: u8 [a0 + 27] = 0\n 12710: u8 [a0 + 26] = 0\n 12713: u8 [a0 + 25] = 0\n 12716: u8 [a0 + 24] = 0\n 12719: u8 [a0 + 23] = 0\n 12722: u8 [a0 + 22] = 0\n 12725: u8 [a0 + 21] = 0\n 12728: u8 [a0 + 20] = 0\n 12731: u8 [a0 + 19] = 0\n 12734: u8 [a0 + 18] = 0\n 12737: u8 [a0 + 17] = 0\n 12740: u8 [a0 + 16] = 0\n 12743: u8 [a0 + 15] = 0\n 12746: u8 [a0 + 14] = 0\n 12749: u8 [a0 + 13] = 0\n 12752: u8 [a0 + 12] = 0\n 12755: u8 [a0 + 11] = 0\n 12758: u8 [a0 + 10] = 0\n 12761: u8 [a0 + 9] = 0\n 12764: u8 [a0 + 8] = 0x72\n 12768: u8 [a0 + 7] = 0x65\n 12772: u8 [a0 + 6] = 0x6e\n 12776: u8 [a0 + 5] = 0x77\n 12780: u8 [a0 + 4] = 0x6f\n 12784: u8 [a0 + 3] = 0x20\n 12788: u8 [a0 + 2] = 0x74\n 12792: u8 [a0 + 1] = 0x6f\n 12796: u8 [a0 + 0] = 0x4e\n 12799: a1 = u64 [sp]\n 12801: a0 = a1 + 0x60\n 12804: a1 = a0 <u a1\n 12807: a3 = u64 [sp + 0x8]\n 12810: a2 = a3 + a1\n 12813: a3 = a2 <u a3\n 12816: a3 = a1 if a1 == 0\n 12819: a1 = u64 [sp + 0x10]\n 12822: a3 = a3 + a1\n 12825: a1 = a3 <u a1\n 12828: a4 = u64 [sp + 0x18]\n 12831: a1 = a1 + a4\n 12834: a4 = u64 [sp + 0x28]\n 12837: u64 [a4] = a0\n 12839: u64 [a4 + 0x8] = a2\n 12842: u64 [a4 + 0x10] = a3\n 12845: u64 [a4 + 0x18] = a1\n 12848: ra = u64 [sp + 0x58]\n 12851: s0 = u64 [sp + 0x50]\n 12854: s1 = u64 [sp + 0x48]\n 12857: sp = sp + 0x60\n 12860: ret\n      : @231 (gas: 1)\n 12862: trap\n      : @232 (gas: 11)\n 12863: a0 = u32 [sp + 0xf0]\n 12867: a1 = u64 [sp + 0xe0]\n 12871: a2 = u64 [sp + 0xe8]\n 12875: a0 = a0 ^ s1\n 12878: a3 = u64 [sp + 0x30]\n 12881: a1 = a1 ^ a3\n 12884: a0 = a0 | a1\n 12887: a1 = u64 [sp + 0x38]\n 12890: a1 = a1 ^ a2\n 12893: a0 = a0 | a1\n 12896: jump @234 if a0 != 0\n      : @233 (gas: 44)\n 12900: s1 = u64 [sp + 0x18]\n 12903: s1 = s1 << 0x20\n 12906: s1 = s1 >> 0x20\n 12909: u64 [sp + 216] = 0\n 12913: u64 [sp + 208] = 0\n 12917: u64 [sp + 200] = 0\n 12921: u64 [sp + 192] = 0x2\n 12926: u64 [sp + 248] = 0\n 12930: u64 [sp + 240] = 0\n 12934: u64 [sp + 232] = 0\n 12938: u64 [sp + 224] = 0\n 12942: u32 [sp + 160] = 0x20\n 12947: i32 a1 = sp + 0xc0\n 12951: i32 a3 = sp + 0xe0\n 12955: i32 a4 = sp + 0xa0\n 12959: a2 = 0xffffffffffffffff\n 12962: a0 = 0\n 12964: ecalli 4 // 'get_storage'\n 12966: a0 = u32 [sp + 0xf4]\n 12970: a0 = a0 << 0x20\n 12973: a1 = u64 [sp + 0xf8]\n 12977: a0 = a0 | s1\n 12980: u64 [sp + 216] = 0\n 12984: u64 [sp + 208] = 0\n 12988: u64 [sp + 200] = 0\n 12992: u64 [sp + 192] = 0x2\n 12997: u64 [sp + 0xf8] = a1\n 13001: u64 [sp + 0xf0] = a0\n 13005: a0 = u64 [sp + 0x20]\n 13008: u64 [sp + 0xe8] = a0\n 13012: a0 = u64 [sp + 0x28]\n 13015: u64 [sp + 0xe0] = a0\n 13019: i32 a1 = sp + 0xc0\n 13023: i32 a3 = sp + 0xe0\n 13027: a2 = 0xffffffffffffffff\n 13030: a4 = 0x20\n 13033: a0 = 0\n 13035: ecalli 8 // 'set_storage'\n 13037: sp = s0 + 0xfffffffffffffee0\n 13041: ra = u64 [sp + 0x118]\n 13045: s0 = u64 [sp + 0x110]\n 13049: s1 = u64 [sp + 0x108]\n 13053: sp = sp + 0x120\n 13057: ret\n      : @234 (gas: 3)\n 13059: a0 = 0x40\n 13062: a1 = 0x20\n 13065: ra = 196, jump @0\n      : @235 [@dyn 98] (gas: 103)\n 13071: a1 = u8 [a0 + 0x11]\n 13074: a2 = u8 [a0 + 0x10]\n 13077: a3 = u8 [a0 + 0x12]\n 13080: a4 = u8 [a0 + 0x13]\n 13083: a1 = a1 << 0x8\n 13086: a1 = a1 | a2\n 13089: a3 = a3 << 0x10\n 13092: a4 = a4 << 0x18\n 13095: a3 = a3 | a4\n 13098: a1 = a1 | a3\n 13101: a2 = u8 [a0 + 0x15]\n 13104: a3 = u8 [a0 + 0x14]\n 13107: a4 = u8 [a0 + 0x16]\n 13110: a5 = u8 [a0 + 0x17]\n 13113: a2 = a2 << 0x8\n 13116: a2 = a2 | a3\n 13119: a4 = a4 << 0x10\n 13122: a5 = a5 << 0x18\n 13125: a4 = a4 | a5\n 13128: a2 = a2 | a4\n 13131: a2 = a2 << 0x20\n 13134: t0 = a2 | a1\n 13137: a2 = u8 [a0 + 0x1]\n 13140: a3 = u8 [a0]\n 13142: a4 = u8 [a0 + 0x2]\n 13145: a5 = u8 [a0 + 0x3]\n 13148: a2 = a2 << 0x8\n 13151: a2 = a2 | a3\n 13154: a4 = a4 << 0x10\n 13157: a5 = a5 << 0x18\n 13160: a4 = a4 | a5\n 13163: a2 = a2 | a4\n 13166: a3 = u8 [a0 + 0x5]\n 13169: a4 = u8 [a0 + 0x4]\n 13172: a5 = u8 [a0 + 0x6]\n 13175: s1 = u8 [a0 + 0x7]\n 13178: a3 = a3 << 0x8\n 13181: a3 = a3 | a4\n 13184: a5 = a5 << 0x10\n 13187: s1 = s1 << 0x18\n 13190: a5 = a5 | s1\n 13193: a3 = a3 | a5\n 13196: a3 = a3 << 0x20\n 13199: a2 = a2 | a3\n 13202: a3 = u8 [a0 + 0x19]\n 13205: a4 = u8 [a0 + 0x18]\n 13208: a5 = u8 [a0 + 0x1a]\n 13211: s1 = u8 [a0 + 0x1b]\n 13214: a3 = a3 << 0x8\n 13217: a3 = a3 | a4\n 13220: a5 = a5 << 0x10\n 13223: s1 = s1 << 0x18\n 13226: a5 = a5 | s1\n 13229: a3 = a3 | a5\n 13232: a4 = u8 [a0 + 0x1d]\n 13235: a5 = u8 [a0 + 0x1c]\n 13238: s1 = u8 [a0 + 0x1e]\n 13241: a1 = u8 [a0 + 0x1f]\n 13244: a4 = a4 << 0x8\n 13247: a4 = a4 | a5\n 13250: s1 = s1 << 0x10\n 13253: a1 = a1 << 0x18\n 13256: a1 = a1 | s1\n 13259: a1 = a1 | a4\n 13262: a1 = a1 << 0x20\n 13265: a3 = a3 | a1\n 13268: a1 = u8 [a0 + 0x9]\n 13271: a4 = u8 [a0 + 0x8]\n 13274: a5 = u8 [a0 + 0xa]\n 13277: s1 = u8 [a0 + 0xb]\n 13280: a1 = a1 << 0x8\n 13283: a1 = a1 | a4\n 13286: a5 = a5 << 0x10\n 13289: s1 = s1 << 0x18\n 13292: a5 = a5 | s1\n 13295: a1 = a1 | a5\n 13298: a4 = u8 [a0 + 0xd]\n 13301: a5 = u8 [a0 + 0xc]\n 13304: s1 = u8 [a0 + 0xe]\n 13307: a0 = u8 [a0 + 0xf]\n 13310: a4 = a4 << 0x8\n 13313: a4 = a4 | a5\n 13316: s1 = s1 << 0x10\n 13319: a0 = a0 << 0x18\n 13322: a0 = a0 | s1\n 13325: a0 = a0 | a4\n 13328: a0 = a0 << 0x20\n 13331: a0 = a0 | a1\n 13334: s1 = reverse a0\n 13336: a1 = reverse a3\n 13338: a2 = reverse a2\n 13340: a0 = reverse t0\n 13342: u64 [sp + 0x38] = a0\n 13345: u64 [sp + 0x30] = a2\n 13348: a0 = a0 | a2\n 13351: a2 = a1\n 13353: a1 = a1 | s1\n 13356: a1 = a1 | a0\n 13359: a1 = a1 >> 0x20\n 13362: a0 = a0 | s1\n 13365: a0 = a0 << 0x20\n 13368: a0 = a0 | a1\n 13371: jump @239 if a0 != 0\n      : @236 (gas: 5)\n 13375: u64 [sp + 0x28] = a2\n 13378: i32 a0 = a2 + 0\n 13380: a1 = 0x20\n 13383: u64 [sp + 0x20] = a0\n 13386: ra = 198, jump @0\n      : @237 [@dyn 99] (gas: 50)\n 13392: u8 [a0 + 31] = 0\n 13395: u8 [a0 + 30] = 0\n 13398: u8 [a0 + 29] = 0\n 13401: u8 [a0 + 28] = 0\n 13404: u8 [a0 + 27] = 0\n 13407: u8 [a0 + 26] = 0\n 13410: u8 [a0 + 25] = 0\n 13413: u8 [a0 + 24] = 0\n 13416: u8 [a0 + 23] = 0\n 13419: u8 [a0 + 22] = 0\n 13422: u8 [a0 + 21] = 0\n 13425: u8 [a0 + 20] = 0\n 13428: u8 [a0 + 19] = 0\n 13431: u8 [a0 + 18] = 0\n 13434: u8 [a0 + 17] = 0\n 13437: u8 [a0 + 16] = 0\n 13440: u8 [a0 + 15] = 0\n 13443: u8 [a0 + 14] = 0\n 13446: u8 [a0 + 13] = 0\n 13449: u8 [a0 + 12] = 0\n 13452: u8 [a0 + 11] = 0\n 13455: u8 [a0 + 10] = 0\n 13458: u8 [a0 + 9] = 0\n 13461: u8 [a0 + 8] = 0\n 13464: u8 [a0 + 7] = 0\n 13467: u8 [a0 + 6] = 0\n 13470: u8 [a0 + 5] = 0\n 13473: u8 [a0 + 4] = 0\n 13476: u8 [a0 + 3] = 0xa0\n 13481: u8 [a0 + 2] = 0x79\n 13485: u8 [a0 + 1] = 0xc3\n 13490: u8 [a0 + 0] = 0x8\n 13493: a1 = u64 [sp + 0x28]\n 13496: a0 = a1 + 0x4\n 13499: a1 = a0 <u a1\n 13502: a3 = u64 [sp + 0x38]\n 13505: a2 = a3 + a1\n 13508: a3 = a2 <u a3\n 13511: a3 = a1 if a1 == 0\n 13514: a3 = a3 + s1\n 13517: a1 = a3 <u s1\n 13520: a4 = u64 [sp + 0x30]\n 13523: a4 = a4 + a1\n 13526: u64 [sp + 0x48] = a2\n 13529: u64 [sp + 0x40] = a0\n 13532: u64 [sp + 0x50] = a3\n 13535: a0 = sp + 0x60\n 13538: a1 = sp + 0x40\n 13541: u64 [sp + 0x58] = a4\n 13544: ra = 200, jump @224\n      : @238 [@dyn 100] (gas: 30)\n 13550: a0 = u64 [sp + 0x68]\n 13553: t0 = u64 [sp + 0x78]\n 13556: t1 = u64 [sp + 0x60]\n 13559: a3 = u64 [sp + 0x70]\n 13562: a1 = u64 [sp + 0x38]\n 13565: a4 = a0 ^ a1\n 13568: a5 = a0 <u a1\n 13571: t2 = a1\n 13573: a2 = u64 [sp + 0x28]\n 13576: a1 = t1 <u a2\n 13579: a5 = a1 if a4 == 0\n 13582: a4 = a3 - s1\n 13585: a3 = a3 <u s1\n 13588: s1 = u64 [sp + 0x30]\n 13591: s1 = t0 - s1\n 13594: s1 = s1 - a3\n 13597: a3 = a4 <u a5\n 13600: s1 = s1 - a3\n 13603: a4 = a4 - a5\n 13606: a0 = a0 - t2\n 13609: a1 = a0 - a1\n 13612: a0 = t1 - a2\n 13615: a1 = a1 | s1\n 13618: a2 = a0 | a4\n 13621: a2 = a2 | a1\n 13624: a1 = a1 | a4\n 13627: a2 = a2 >> 0x20\n 13630: a1 = a1 << 0x20\n 13633: a1 = a1 | a2\n 13636: jump @240 if a1 == 0\n      : @239 (gas: 1)\n 13639: trap\n      : @240 (gas: 4)\n 13640: i32 s1 = a0 + 0\n 13642: a0 = u64 [sp + 0x20]\n 13645: a1 = s1\n 13647: ra = 202, jump @0\n      : @241 [@dyn 101] (gas: 6)\n 13653: i32 a1 = a0 + 0\n 13655: a0 = 0x1\n 13658: a2 = s1\n 13660: ra = 0xcc\n 13664: ecalli 6 // 'seal_return'\n 13666: fallthrough\n      : @242 [@dyn 102] (gas: 9)\n 13667: a2 = u64 [a1 + 0x18]\n 13670: a3 = u64 [a1 + 0x10]\n 13673: a4 = u64 [a1 + 0x8]\n 13676: a1 = u64 [a1]\n 13678: u64 [a0 + 0x18] = a2\n 13681: u64 [a0 + 0x10] = a3\n 13684: u64 [a0 + 0x8] = a4\n 13687: u64 [a0] = a1\n 13689: ret\n      : @243 (gas: 17)\n 13691: sp = sp + 0xffffffffffffffa0\n 13694: u64 [sp + 0x58] = ra\n 13697: u64 [sp + 0x50] = s0\n 13700: u64 [sp + 0x48] = s1\n 13703: a3 = u64 [a1 + 0x18]\n 13706: a4 = u64 [a1 + 0x10]\n 13709: a5 = u64 [a1 + 0x8]\n 13712: s1 = u64 [a1]\n 13714: a1 = a5 | a3\n 13717: a2 = s1 | a4\n 13720: a2 = a2 | a1\n 13723: a2 = a2 >> 0x20\n 13726: a1 = a1 | a4\n 13729: a1 = a1 << 0x20\n 13732: a1 = a1 | a2\n 13735: u64 [sp + 0x28] = a0\n 13738: jump @250 if a1 != 0\n      : @244 (gas: 19)\n 13742: a0 = s1 + 0x20\n 13745: u64 [sp + 0x30] = a0\n 13748: a0 = a0 <u s1\n 13751: a1 = a5 + a0\n 13754: u64 [sp + 0x40] = a1\n 13757: u64 [sp + 0x8] = a5\n 13760: s0 = a1 <u a5\n 13763: s0 = a0 if a0 == 0\n 13766: s0 = s0 + a4\n 13769: u64 [sp + 0x10] = a4\n 13772: a0 = s0 <u a4\n 13775: u64 [sp + 0x18] = a3\n 13778: a0 = a0 + a3\n 13781: u64 [sp + 0x38] = a0\n 13784: u64 [sp] = s1\n 13786: i32 a0 = s1 + 0\n 13788: a1 = 0x20\n 13791: s1 = 0x20\n 13794: ra = 206, jump @0\n      : @245 [@dyn 103] (gas: 45)\n 13800: u8 [a0 + 0x1f] = s1\n 13803: a1 = u64 [sp + 0x30]\n 13806: s1 = a1\n 13808: a1 = a1 | s0\n 13811: a2 = u64 [sp + 0x40]\n 13814: a4 = u64 [sp + 0x38]\n 13817: a2 = a2 | a4\n 13820: a1 = a1 | a2\n 13823: a1 = a1 >> 0x20\n 13826: u64 [sp + 0x20] = s0\n 13829: a2 = a2 | s0\n 13832: a2 = a2 << 0x20\n 13835: a1 = a1 | a2\n 13838: u8 [a0 + 30] = 0\n 13841: u8 [a0 + 29] = 0\n 13844: u8 [a0 + 28] = 0\n 13847: u8 [a0 + 27] = 0\n 13850: u8 [a0 + 26] = 0\n 13853: u8 [a0 + 25] = 0\n 13856: u8 [a0 + 24] = 0\n 13859: u8 [a0 + 23] = 0\n 13862: u8 [a0 + 22] = 0\n 13865: u8 [a0 + 21] = 0\n 13868: u8 [a0 + 20] = 0\n 13871: u8 [a0 + 19] = 0\n 13874: u8 [a0 + 18] = 0\n 13877: u8 [a0 + 17] = 0\n 13880: u8 [a0 + 16] = 0\n 13883: u8 [a0 + 15] = 0\n 13886: u8 [a0 + 14] = 0\n 13889: u8 [a0 + 13] = 0\n 13892: u8 [a0 + 12] = 0\n 13895: u8 [a0 + 11] = 0\n 13898: u8 [a0 + 10] = 0\n 13901: u8 [a0 + 9] = 0\n 13904: u8 [a0 + 8] = 0\n 13907: u8 [a0 + 7] = 0\n 13910: u8 [a0 + 6] = 0\n 13913: u8 [a0 + 5] = 0\n 13916: u8 [a0 + 4] = 0\n 13919: u8 [a0 + 3] = 0\n 13922: u8 [a0 + 2] = 0\n 13925: u8 [a0 + 1] = 0\n 13928: u8 [a0 + 0] = 0\n 13930: jump @250 if a1 != 0\n      : @246 (gas: 4)\n 13934: i32 s0 = s1 + 0\n 13936: a1 = 0x20\n 13939: a0 = s0\n 13941: ra = 208, jump @0\n      : @247 [@dyn 104] (gas: 41)\n 13947: u8 [a0 + 31] = 0xf\n 13951: u8 [a0 + 30] = 0\n 13954: u8 [a0 + 29] = 0\n 13957: u8 [a0 + 28] = 0\n 13960: u8 [a0 + 27] = 0\n 13963: u8 [a0 + 26] = 0\n 13966: u8 [a0 + 25] = 0\n 13969: u8 [a0 + 24] = 0\n 13972: u8 [a0 + 23] = 0\n 13975: u8 [a0 + 22] = 0\n 13978: u8 [a0 + 21] = 0\n 13981: u8 [a0 + 20] = 0\n 13984: u8 [a0 + 19] = 0\n 13987: u8 [a0 + 18] = 0\n 13990: u8 [a0 + 17] = 0\n 13993: u8 [a0 + 16] = 0\n 13996: u8 [a0 + 15] = 0\n 13999: u8 [a0 + 14] = 0\n 14002: u8 [a0 + 13] = 0\n 14005: u8 [a0 + 12] = 0\n 14008: u8 [a0 + 11] = 0\n 14011: u8 [a0 + 10] = 0\n 14014: u8 [a0 + 9] = 0\n 14017: u8 [a0 + 8] = 0\n 14020: u8 [a0 + 7] = 0\n 14023: u8 [a0 + 6] = 0\n 14026: u8 [a0 + 5] = 0\n 14029: u8 [a0 + 4] = 0\n 14032: u8 [a0 + 3] = 0\n 14035: u8 [a0 + 2] = 0\n 14038: u8 [a0 + 1] = 0\n 14041: a1 = u64 [sp + 0x20]\n 14044: a2 = u64 [sp + 0x38]\n 14047: a1 = a1 | a2\n 14050: a2 = 0xffffffe0\n 14060: a2 = s1 <u a2\n 14063: a3 = u64 [sp + 0x40]\n 14066: a2 = 0 if a3 != 0\n 14068: a2 = 0 if a1 != 0\n 14070: u8 [a0 + 0] = 0\n 14072: jump @250 if a2 == 0\n      : @248 (gas: 3)\n 14076: i32 a0 = s0 + 0x20\n 14079: a1 = 0x20\n 14082: ra = 210, jump @0\n      : @249 [@dyn 105] (gas: 55)\n 14088: u8 [a0 + 31] = 0\n 14091: u8 [a0 + 30] = 0\n 14094: u8 [a0 + 29] = 0\n 14097: u8 [a0 + 28] = 0\n 14100: u8 [a0 + 27] = 0\n 14103: u8 [a0 + 26] = 0\n 14106: u8 [a0 + 25] = 0\n 14109: u8 [a0 + 24] = 0\n 14112: u8 [a0 + 23] = 0\n 14115: u8 [a0 + 22] = 0\n 14118: u8 [a0 + 21] = 0\n 14121: u8 [a0 + 20] = 0\n 14124: u8 [a0 + 19] = 0\n 14127: u8 [a0 + 18] = 0\n 14130: u8 [a0 + 17] = 0\n 14133: u8 [a0 + 16] = 0\n 14136: u8 [a0 + 15] = 0\n 14139: u8 [a0 + 14] = 0x44\n 14143: u8 [a0 + 13] = 0x49\n 14147: a5 = 0x20\n 14150: u8 [a0 + 0xc] = a5\n 14153: u8 [a0 + 11] = 0x64\n 14157: u8 [a0 + 10] = 0x72\n 14161: u8 [a0 + 9] = 0x61\n 14165: u8 [a0 + 8] = 0x63\n 14169: u8 [a0 + 0x7] = a5\n 14172: u8 [a0 + 6] = 0x64\n 14176: u8 [a0 + 5] = 0x69\n 14180: u8 [a0 + 4] = 0x6c\n 14184: u8 [a0 + 3] = 0x61\n 14188: u8 [a0 + 2] = 0x76\n 14192: u8 [a0 + 1] = 0x6e\n 14196: u8 [a0 + 0] = 0x49\n 14199: a1 = u64 [sp]\n 14201: a0 = a1 + 0x60\n 14204: a1 = a0 <u a1\n 14207: a3 = u64 [sp + 0x8]\n 14210: a2 = a3 + a1\n 14213: a3 = a2 <u a3\n 14216: a3 = a1 if a1 == 0\n 14219: a1 = u64 [sp + 0x10]\n 14222: a3 = a3 + a1\n 14225: a1 = a3 <u a1\n 14228: a4 = u64 [sp + 0x18]\n 14231: a1 = a1 + a4\n 14234: a4 = u64 [sp + 0x28]\n 14237: u64 [a4] = a0\n 14239: u64 [a4 + 0x8] = a2\n 14242: u64 [a4 + 0x10] = a3\n 14245: u64 [a4 + 0x18] = a1\n 14248: ra = u64 [sp + 0x58]\n 14251: s0 = u64 [sp + 0x50]\n 14254: s1 = u64 [sp + 0x48]\n 14257: sp = sp + 0x60\n 14260: ret\n      : @250 (gas: 1)\n 14262: trap\n      : @251 (gas: 17)\n 14263: sp = sp + 0xffffffffffffffa0\n 14266: u64 [sp + 0x58] = ra\n 14269: u64 [sp + 0x50] = s0\n 14272: u64 [sp + 0x48] = s1\n 14275: a3 = u64 [a1 + 0x18]\n 14278: a4 = u64 [a1 + 0x10]\n 14281: a5 = u64 [a1 + 0x8]\n 14284: s1 = u64 [a1]\n 14286: a1 = a5 | a3\n 14289: a2 = s1 | a4\n 14292: a2 = a2 | a1\n 14295: a2 = a2 >> 0x20\n 14298: a1 = a1 | a4\n 14301: a1 = a1 << 0x20\n 14304: a1 = a1 | a2\n 14307: u64 [sp + 0x28] = a0\n 14310: jump @258 if a1 != 0\n      : @252 (gas: 19)\n 14314: a0 = s1 + 0x20\n 14317: u64 [sp + 0x30] = a0\n 14320: a0 = a0 <u s1\n 14323: a1 = a5 + a0\n 14326: u64 [sp + 0x40] = a1\n 14329: u64 [sp + 0x8] = a5\n 14332: s0 = a1 <u a5\n 14335: s0 = a0 if a0 == 0\n 14338: s0 = s0 + a4\n 14341: u64 [sp + 0x10] = a4\n 14344: a0 = s0 <u a4\n 14347: u64 [sp + 0x18] = a3\n 14350: a0 = a0 + a3\n 14353: u64 [sp + 0x38] = a0\n 14356: u64 [sp] = s1\n 14358: i32 a0 = s1 + 0\n 14360: a1 = 0x20\n 14363: s1 = 0x20\n 14366: ra = 212, jump @0\n      : @253 [@dyn 106] (gas: 45)\n 14372: u8 [a0 + 0x1f] = s1\n 14375: a1 = u64 [sp + 0x30]\n 14378: s1 = a1\n 14380: a1 = a1 | s0\n 14383: a2 = u64 [sp + 0x40]\n 14386: a4 = u64 [sp + 0x38]\n 14389: a2 = a2 | a4\n 14392: a1 = a1 | a2\n 14395: a1 = a1 >> 0x20\n 14398: u64 [sp + 0x20] = s0\n 14401: a2 = a2 | s0\n 14404: a2 = a2 << 0x20\n 14407: a1 = a1 | a2\n 14410: u8 [a0 + 30] = 0\n 14413: u8 [a0 + 29] = 0\n 14416: u8 [a0 + 28] = 0\n 14419: u8 [a0 + 27] = 0\n 14422: u8 [a0 + 26] = 0\n 14425: u8 [a0 + 25] = 0\n 14428: u8 [a0 + 24] = 0\n 14431: u8 [a0 + 23] = 0\n 14434: u8 [a0 + 22] = 0\n 14437: u8 [a0 + 21] = 0\n 14440: u8 [a0 + 20] = 0\n 14443: u8 [a0 + 19] = 0\n 14446: u8 [a0 + 18] = 0\n 14449: u8 [a0 + 17] = 0\n 14452: u8 [a0 + 16] = 0\n 14455: u8 [a0 + 15] = 0\n 14458: u8 [a0 + 14] = 0\n 14461: u8 [a0 + 13] = 0\n 14464: u8 [a0 + 12] = 0\n 14467: u8 [a0 + 11] = 0\n 14470: u8 [a0 + 10] = 0\n 14473: u8 [a0 + 9] = 0\n 14476: u8 [a0 + 8] = 0\n 14479: u8 [a0 + 7] = 0\n 14482: u8 [a0 + 6] = 0\n 14485: u8 [a0 + 5] = 0\n 14488: u8 [a0 + 4] = 0\n 14491: u8 [a0 + 3] = 0\n 14494: u8 [a0 + 2] = 0\n 14497: u8 [a0 + 1] = 0\n 14500: u8 [a0 + 0] = 0\n 14502: jump @258 if a1 != 0\n      : @254 (gas: 4)\n 14506: i32 s0 = s1 + 0\n 14508: a1 = 0x20\n 14511: a0 = s0\n 14513: ra = 214, jump @0\n      : @255 [@dyn 107] (gas: 41)\n 14519: u8 [a0 + 31] = 0x10\n 14523: u8 [a0 + 30] = 0\n 14526: u8 [a0 + 29] = 0\n 14529: u8 [a0 + 28] = 0\n 14532: u8 [a0 + 27] = 0\n 14535: u8 [a0 + 26] = 0\n 14538: u8 [a0 + 25] = 0\n 14541: u8 [a0 + 24] = 0\n 14544: u8 [a0 + 23] = 0\n 14547: u8 [a0 + 22] = 0\n 14550: u8 [a0 + 21] = 0\n 14553: u8 [a0 + 20] = 0\n 14556: u8 [a0 + 19] = 0\n 14559: u8 [a0 + 18] = 0\n 14562: u8 [a0 + 17] = 0\n 14565: u8 [a0 + 16] = 0\n 14568: u8 [a0 + 15] = 0\n 14571: u8 [a0 + 14] = 0\n 14574: u8 [a0 + 13] = 0\n 14577: u8 [a0 + 12] = 0\n 14580: u8 [a0 + 11] = 0\n 14583: u8 [a0 + 10] = 0\n 14586: u8 [a0 + 9] = 0\n 14589: u8 [a0 + 8] = 0\n 14592: u8 [a0 + 7] = 0\n 14595: u8 [a0 + 6] = 0\n 14598: u8 [a0 + 5] = 0\n 14601: u8 [a0 + 4] = 0\n 14604: u8 [a0 + 3] = 0\n 14607: u8 [a0 + 2] = 0\n 14610: u8 [a0 + 1] = 0\n 14613: a1 = u64 [sp + 0x20]\n 14616: a2 = u64 [sp + 0x38]\n 14619: a1 = a1 | a2\n 14622: a2 = 0xffffffe0\n 14632: a2 = s1 <u a2\n 14635: a3 = u64 [sp + 0x40]\n 14638: a2 = 0 if a3 != 0\n 14640: a2 = 0 if a1 != 0\n 14642: u8 [a0 + 0] = 0\n 14644: jump @258 if a2 == 0\n      : @256 (gas: 3)\n 14648: i32 a0 = s0 + 0x20\n 14651: a1 = 0x20\n 14654: ra = 216, jump @0\n      : @257 [@dyn 108] (gas: 54)\n 14660: u8 [a0 + 31] = 0\n 14663: u8 [a0 + 30] = 0\n 14666: u8 [a0 + 29] = 0\n 14669: u8 [a0 + 28] = 0\n 14672: u8 [a0 + 27] = 0\n 14675: u8 [a0 + 26] = 0\n 14678: u8 [a0 + 25] = 0\n 14681: u8 [a0 + 24] = 0\n 14684: u8 [a0 + 23] = 0\n 14687: u8 [a0 + 22] = 0\n 14690: u8 [a0 + 21] = 0\n 14693: u8 [a0 + 20] = 0\n 14696: u8 [a0 + 19] = 0\n 14699: u8 [a0 + 18] = 0\n 14702: u8 [a0 + 17] = 0\n 14705: u8 [a0 + 16] = 0\n 14708: u8 [a0 + 15] = 0x73\n 14712: u8 [a0 + 14] = 0x64\n 14716: u8 [a0 + 13] = 0x72\n 14720: u8 [a0 + 12] = 0x61\n 14724: u8 [a0 + 11] = 0x63\n 14728: u8 [a0 + 10] = 0x20\n 14732: u8 [a0 + 9] = 0x68\n 14736: u8 [a0 + 8] = 0x67\n 14740: u8 [a0 + 7] = 0x75\n 14744: u8 [a0 + 6] = 0x6f\n 14748: u8 [a0 + 5] = 0x6e\n 14752: u8 [a0 + 4] = 0x65\n 14756: u8 [a0 + 3] = 0x20\n 14760: u8 [a0 + 2] = 0x74\n 14764: u8 [a0 + 1] = 0x6f\n 14768: u8 [a0 + 0] = 0x4e\n 14771: a1 = u64 [sp]\n 14773: a0 = a1 + 0x60\n 14776: a1 = a0 <u a1\n 14779: a3 = u64 [sp + 0x8]\n 14782: a2 = a3 + a1\n 14785: a3 = a2 <u a3\n 14788: a3 = a1 if a1 == 0\n 14791: a1 = u64 [sp + 0x10]\n 14794: a3 = a3 + a1\n 14797: a1 = a3 <u a1\n 14800: a4 = u64 [sp + 0x18]\n 14803: a1 = a1 + a4\n 14806: a4 = u64 [sp + 0x28]\n 14809: u64 [a4] = a0\n 14811: u64 [a4 + 0x8] = a2\n 14814: u64 [a4 + 0x10] = a3\n 14817: u64 [a4 + 0x18] = a1\n 14820: ra = u64 [sp + 0x58]\n 14823: s0 = u64 [sp + 0x50]\n 14826: s1 = u64 [sp + 0x48]\n 14829: sp = sp + 0x60\n 14832: ret\n      : @258 (gas: 1)\n 14834: trap\n      : @259 (gas: 19)\n 14835: sp = sp + 0xfffffffffffffd80\n 14839: u64 [sp + 0x278] = ra\n 14843: u64 [sp + 0x270] = s0\n 14847: u64 [sp + 0x268] = s1\n 14851: s0 = sp + 0x280\n 14855: sp = sp & 0xffffffffffffffe0\n 14858: a4 = u64 [a2 + 0x18]\n 14861: a5 = u64 [a2 + 0x10]\n 14864: s1 = u64 [a2]\n 14866: a2 = u64 [a2 + 0x8]\n 14869: u64 [sp + 0xd8] = a4\n 14873: u64 [sp + 0xd0] = a5\n 14877: a5 = a5 | a4\n 14880: u64 [sp + 0xc8] = s1\n 14884: a4 = s1 <u 0x11\n 14887: u64 [sp + 0xc0] = a2\n 14891: a4 = 0 if a2 != 0\n 14893: a4 = 0 if a5 != 0\n 14895: jump @276 if a4 == 0\n      : @260 (gas: 24)\n 14899: a2 = u64 [a3 + 0x18]\n 14902: u64 [sp + 0xf8] = a2\n 14906: a2 = u64 [a3 + 0x10]\n 14909: u64 [sp + 0xf0] = a2\n 14913: a2 = u64 [a3 + 0x8]\n 14916: u64 [sp + 0xe0] = a2\n 14920: a2 = u64 [a3]\n 14922: u64 [sp + 0xe8] = a2\n 14926: a2 = u64 [a1 + 0x10]\n 14929: u64 [sp + 0xa0] = a2\n 14933: a2 = u64 [a1 + 0x8]\n 14936: u64 [sp + 0x98] = a2\n 14940: a1 = u64 [a1]\n 14942: u64 [sp + 0x90] = a1\n 14946: a1 = u64 [a0 + 0x10]\n 14949: a2 = u64 [a0 + 0x8]\n 14952: u64 [sp + 0xb0] = a2\n 14956: a0 = u64 [a0]\n 14958: u64 [sp + 0xb8] = a0\n 14962: a1 = a1 << 0x20\n 14965: s1 = a1 >> 0x20\n 14968: a1 = 0x20\n 14971: a0 = 0\n 14973: ra = 218, jump @0\n      : @261 [@dyn 109] (gas: 79)\n 14979: a3 = reverse s1\n 14981: a1 = u64 [sp + 0xb0]\n 14985: a4 = reverse a1\n 14987: a1 = u64 [sp + 0xb8]\n 14991: a2 = reverse a1\n 14993: a1 = a2 >> 0x38\n 14996: u64 [sp + 0xb8] = a1\n 15000: u8 [a0 + 0x1f] = a1\n 15003: a1 = a2 >> 0x30\n 15006: u64 [sp + 0xb0] = a1\n 15010: u8 [a0 + 0x1e] = a1\n 15013: a1 = a2 >> 0x28\n 15016: u64 [sp + 0xa8] = a1\n 15020: u8 [a0 + 0x1d] = a1\n 15023: a1 = a2 >> 0x20\n 15026: u64 [sp + 0x88] = a1\n 15030: u8 [a0 + 0x1c] = a1\n 15033: a1 = a2 >> 0x18\n 15036: u64 [sp + 0x80] = a1\n 15040: u8 [a0 + 0x1b] = a1\n 15043: a1 = a2 >> 0x10\n 15046: u64 [sp + 0x78] = a1\n 15049: u8 [a0 + 0x1a] = a1\n 15052: a1 = a2 >> 0x8\n 15055: u64 [sp + 0x70] = a1\n 15058: u8 [a0 + 0x19] = a1\n 15061: u64 [sp + 0x68] = a2\n 15064: u8 [a0 + 0x18] = a2\n 15067: u8 [a0 + 0x10] = a4\n 15070: u8 [a0 + 11] = 0\n 15073: u8 [a0 + 10] = 0\n 15076: u8 [a0 + 9] = 0\n 15079: u8 [a0 + 7] = 0\n 15082: u8 [a0 + 6] = 0\n 15085: u8 [a0 + 5] = 0\n 15088: u8 [a0 + 4] = 0\n 15091: u8 [a0 + 3] = 0\n 15094: u8 [a0 + 2] = 0\n 15097: u8 [a0 + 1] = 0\n 15100: u8 [a0 + 0] = 0\n 15102: a1 = a4 >> 0x38\n 15105: u64 [sp + 0x50] = a1\n 15108: u8 [a0 + 0x17] = a1\n 15111: a1 = a4 >> 0x30\n 15114: u64 [sp + 0x48] = a1\n 15117: u8 [a0 + 0x16] = a1\n 15120: a1 = a4 >> 0x28\n 15123: u64 [sp + 0x40] = a1\n 15126: u8 [a0 + 0x15] = a1\n 15129: a1 = a4 >> 0x20\n 15132: u64 [sp + 0x38] = a1\n 15135: u8 [a0 + 0x14] = a1\n 15138: a1 = a4 >> 0x18\n 15141: u64 [sp + 0x30] = a1\n 15144: u8 [a0 + 0x13] = a1\n 15147: a1 = a4 >> 0x10\n 15150: u64 [sp + 0x28] = a1\n 15153: u8 [a0 + 0x12] = a1\n 15156: u64 [sp + 0x58] = a4\n 15159: a4 = a4 >> 0x8\n 15162: u64 [sp + 0x20] = a4\n 15165: u8 [a0 + 0x11] = a4\n 15168: u8 [a0 + 0x8] = a3\n 15171: a1 = a3 >> 0x38\n 15174: u64 [sp + 0x18] = a1\n 15177: u8 [a0 + 0xf] = a1\n 15180: a1 = a3 >> 0x30\n 15183: u64 [sp + 0x10] = a1\n 15186: u8 [a0 + 0xe] = a1\n 15189: a1 = a3 >> 0x28\n 15192: u64 [sp + 0x8] = a1\n 15195: u8 [a0 + 0xd] = a1\n 15198: u64 [sp + 0x60] = a3\n 15201: a3 = a3 >> 0x20\n 15204: u64 [sp] = a3\n 15206: u8 [a0 + 0xc] = a3\n 15209: a0 = 0x20\n 15212: a1 = 0x20\n 15215: ra = 220, jump @0\n      : @262 [@dyn 110] (gas: 35)\n 15221: u8 [a0 + 31] = 0\n 15224: u8 [a0 + 30] = 0\n 15227: u8 [a0 + 29] = 0\n 15230: u8 [a0 + 28] = 0\n 15233: u8 [a0 + 27] = 0\n 15236: u8 [a0 + 26] = 0\n 15239: u8 [a0 + 25] = 0\n 15242: u8 [a0 + 24] = 0\n 15245: u8 [a0 + 23] = 0\n 15248: u8 [a0 + 22] = 0\n 15251: u8 [a0 + 21] = 0\n 15254: u8 [a0 + 20] = 0\n 15257: u8 [a0 + 19] = 0\n 15260: u8 [a0 + 18] = 0\n 15263: u8 [a0 + 17] = 0\n 15266: u8 [a0 + 16] = 0\n 15269: u8 [a0 + 15] = 0\n 15272: u8 [a0 + 14] = 0\n 15275: u8 [a0 + 13] = 0\n 15278: u8 [a0 + 12] = 0\n 15281: u8 [a0 + 11] = 0\n 15284: u8 [a0 + 10] = 0\n 15287: u8 [a0 + 9] = 0\n 15290: u8 [a0 + 8] = 0\n 15293: u8 [a0 + 7] = 0\n 15296: u8 [a0 + 6] = 0\n 15299: u8 [a0 + 5] = 0\n 15302: u8 [a0 + 4] = 0\n 15305: u8 [a0 + 3] = 0\n 15308: u8 [a0 + 2] = 0\n 15311: u8 [a0 + 1] = 0\n 15314: u8 [a0 + 0] = 0\n 15316: a1 = 0x40\n 15319: a0 = 0\n 15321: ra = 222, jump @0\n      : @263 [@dyn 111] (gas: 46)\n 15327: i32 a0 = a0 + 0\n 15329: i32 a2 = sp + 0x240\n 15333: a1 = 0x40\n 15336: ecalli 5 // 'hash_keccak_256'\n 15338: a0 = u64 [sp + 0x258]\n 15342: a1 = u64 [sp + 0x250]\n 15346: a2 = u64 [sp + 0x248]\n 15350: a3 = u64 [sp + 0x240]\n 15354: a0 = reverse a0\n 15356: a1 = reverse a1\n 15358: a4 = u64 [sp + 0xc0]\n 15362: a4 = a4 + a1\n 15365: a5 = u64 [sp + 0xc8]\n 15369: a5 = a5 + a0\n 15372: a0 = a5 <u a0\n 15375: a4 = a4 + a0\n 15378: s1 = a4 ^ a1\n 15381: a1 = a4 <u a1\n 15384: a1 = a0 if s1 == 0\n 15387: s1 = reverse a3\n 15389: a2 = reverse a2\n 15391: a3 = u64 [sp + 0xd0]\n 15395: a3 = a3 + a2\n 15398: a0 = u64 [sp + 0xd8]\n 15402: a0 = a0 + s1\n 15405: a2 = a3 <u a2\n 15408: a0 = a0 + a2\n 15411: a1 = a1 + a3\n 15414: a2 = a1 <u a3\n 15417: a0 = a0 + a2\n 15420: u64 [sp + 0x228] = a4\n 15424: u64 [sp + 0x220] = a5\n 15428: u64 [sp + 0x230] = a1\n 15432: u64 [sp + 0x238] = a0\n 15436: u64 [sp + 600] = 0\n 15440: u64 [sp + 592] = 0\n 15444: u64 [sp + 584] = 0\n 15448: u64 [sp + 576] = 0\n 15452: u32 [sp + 512] = 0x20\n 15457: i32 a1 = sp + 0x220\n 15461: i32 a3 = sp + 0x240\n 15465: i32 a4 = sp + 0x200\n 15469: a2 = 0xffffffffffffffff\n 15472: a0 = 0\n 15474: ecalli 4 // 'get_storage'\n 15476: fallthrough\n      : @264 (gas: 20)\n 15477: a0 = u64 [sp + 0x258]\n 15481: t0 = u64 [sp + 0x240]\n 15485: a2 = u64 [sp + 0x250]\n 15489: a3 = u64 [sp + 0x248]\n 15493: a1 = u64 [sp + 0xf8]\n 15497: a4 = a0 ^ a1\n 15500: s1 = a0 <u a1\n 15503: a0 = u64 [sp + 0xf0]\n 15507: a5 = a2 <u a0\n 15510: a5 = s1 if a4 != 0\n 15513: a1 = u64 [sp + 0xe0]\n 15517: s1 = a3 ^ a1\n 15520: a3 = a3 <u a1\n 15523: a1 = u64 [sp + 0xe8]\n 15527: a1 = t0 <u a1\n 15530: a1 = a3 if s1 != 0\n 15533: a0 = a0 ^ a2\n 15536: a0 = a0 | a4\n 15539: a1 = a5 if a0 != 0\n 15542: jump @281 if a1 != 0\n      : @265 (gas: 3)\n 15546: a1 = 0x20\n 15549: a0 = 0\n 15551: ra = 224, jump @0\n      : @266 [@dyn 112] (gas: 59)\n 15557: a1 = u64 [sp + 0x58]\n 15560: u8 [a0 + 0x10] = a1\n 15563: a1 = u64 [sp + 0x18]\n 15566: u8 [a0 + 0xf] = a1\n 15569: a1 = u64 [sp + 0x10]\n 15572: u8 [a0 + 0xe] = a1\n 15575: a1 = u64 [sp + 0x8]\n 15578: u8 [a0 + 0xd] = a1\n 15581: a1 = u64 [sp]\n 15583: u8 [a0 + 0xc] = a1\n 15586: a2 = u64 [sp + 0x60]\n 15589: a1 = a2 >> 0x18\n 15592: u8 [a0 + 0xb] = a1\n 15595: a1 = a2 >> 0x10\n 15598: u8 [a0 + 0xa] = a1\n 15601: a1 = a2 >> 0x8\n 15604: u8 [a0 + 0x9] = a1\n 15607: u8 [a0 + 0x8] = a2\n 15610: a1 = u64 [sp + 0x68]\n 15613: u8 [a0 + 0x18] = a1\n 15616: a1 = u64 [sp + 0x50]\n 15619: u8 [a0 + 0x17] = a1\n 15622: a1 = u64 [sp + 0x48]\n 15625: u8 [a0 + 0x16] = a1\n 15628: a1 = u64 [sp + 0x40]\n 15631: u8 [a0 + 0x15] = a1\n 15634: a1 = u64 [sp + 0x38]\n 15637: u8 [a0 + 0x14] = a1\n 15640: a1 = u64 [sp + 0x30]\n 15643: u8 [a0 + 0x13] = a1\n 15646: a1 = u64 [sp + 0x28]\n 15649: u8 [a0 + 0x12] = a1\n 15652: a1 = u64 [sp + 0x20]\n 15655: u8 [a0 + 0x11] = a1\n 15658: a1 = u64 [sp + 0xb8]\n 15662: u8 [a0 + 0x1f] = a1\n 15665: a1 = u64 [sp + 0xb0]\n 15669: u8 [a0 + 0x1e] = a1\n 15672: a1 = u64 [sp + 0xa8]\n 15676: u8 [a0 + 0x1d] = a1\n 15679: a1 = u64 [sp + 0x88]\n 15683: u8 [a0 + 0x1c] = a1\n 15686: a1 = u64 [sp + 0x80]\n 15690: u8 [a0 + 0x1b] = a1\n 15693: a1 = u64 [sp + 0x78]\n 15696: u8 [a0 + 0x1a] = a1\n 15699: a1 = u64 [sp + 0x70]\n 15702: u8 [a0 + 0x19] = a1\n 15705: u8 [a0 + 7] = 0\n 15708: u8 [a0 + 6] = 0\n 15711: u8 [a0 + 5] = 0\n 15714: u8 [a0 + 4] = 0\n 15717: u8 [a0 + 3] = 0\n 15720: u8 [a0 + 2] = 0\n 15723: u8 [a0 + 1] = 0\n 15726: u8 [a0 + 0] = 0\n 15728: a0 = 0x20\n 15731: a1 = 0x20\n 15734: ra = 226, jump @0\n      : @267 [@dyn 113] (gas: 35)\n 15740: u8 [a0 + 31] = 0\n 15743: u8 [a0 + 30] = 0\n 15746: u8 [a0 + 29] = 0\n 15749: u8 [a0 + 28] = 0\n 15752: u8 [a0 + 27] = 0\n 15755: u8 [a0 + 26] = 0\n 15758: u8 [a0 + 25] = 0\n 15761: u8 [a0 + 24] = 0\n 15764: u8 [a0 + 23] = 0\n 15767: u8 [a0 + 22] = 0\n 15770: u8 [a0 + 21] = 0\n 15773: u8 [a0 + 20] = 0\n 15776: u8 [a0 + 19] = 0\n 15779: u8 [a0 + 18] = 0\n 15782: u8 [a0 + 17] = 0\n 15785: u8 [a0 + 16] = 0\n 15788: u8 [a0 + 15] = 0\n 15791: u8 [a0 + 14] = 0\n 15794: u8 [a0 + 13] = 0\n 15797: u8 [a0 + 12] = 0\n 15800: u8 [a0 + 11] = 0\n 15803: u8 [a0 + 10] = 0\n 15806: u8 [a0 + 9] = 0\n 15809: u8 [a0 + 8] = 0\n 15812: u8 [a0 + 7] = 0\n 15815: u8 [a0 + 6] = 0\n 15818: u8 [a0 + 5] = 0\n 15821: u8 [a0 + 4] = 0\n 15824: u8 [a0 + 3] = 0\n 15827: u8 [a0 + 2] = 0\n 15830: u8 [a0 + 1] = 0\n 15833: u8 [a0 + 0] = 0\n 15835: a1 = 0x40\n 15838: a0 = 0\n 15840: ra = 228, jump @0\n      : @268 [@dyn 114] (gas: 50)\n 15846: i32 a0 = a0 + 0\n 15848: i32 a2 = sp + 0x240\n 15852: a1 = 0x40\n 15855: ecalli 5 // 'hash_keccak_256'\n 15857: a0 = u64 [sp + 0x258]\n 15861: a1 = u64 [sp + 0x250]\n 15865: a2 = u64 [sp + 0x248]\n 15869: a3 = u64 [sp + 0x240]\n 15873: a0 = reverse a0\n 15875: a1 = reverse a1\n 15877: a4 = u64 [sp + 0xc0]\n 15881: a4 = a4 + a1\n 15884: a5 = u64 [sp + 0xc8]\n 15888: a5 = a5 + a0\n 15891: a0 = a5 <u a0\n 15894: s1 = a4 + a0\n 15897: a4 = s1 ^ a1\n 15900: a1 = s1 <u a1\n 15903: a1 = a0 if a4 == 0\n 15906: a0 = reverse a3\n 15908: a2 = reverse a2\n 15910: a3 = u64 [sp + 0xd0]\n 15914: a3 = a3 + a2\n 15917: a4 = u64 [sp + 0xd8]\n 15921: a0 = a0 + a4\n 15924: a2 = a3 <u a2\n 15927: a0 = a0 + a2\n 15930: a2 = a3 + a1\n 15933: a1 = a2 <u a3\n 15936: a1 = a1 + a0\n 15939: u32 [sp + 512] = 0x20\n 15944: u64 [sp + 0xb0] = s1\n 15948: u64 [sp + 0x228] = s1\n 15952: u64 [sp + 0xb8] = a5\n 15956: u64 [sp + 0x220] = a5\n 15960: u64 [sp + 0xa8] = a2\n 15964: u64 [sp + 0x230] = a2\n 15968: u64 [sp + 0x88] = a1\n 15972: u64 [sp + 0x238] = a1\n 15976: u64 [sp + 600] = 0\n 15980: u64 [sp + 592] = 0\n 15984: u64 [sp + 584] = 0\n 15988: u64 [sp + 576] = 0\n 15992: i32 a1 = sp + 0x220\n 15996: i32 a3 = sp + 0x240\n 16000: i32 a4 = sp + 0x200\n 16004: a2 = 0xffffffffffffffff\n 16007: a0 = 0\n 16009: ecalli 4 // 'get_storage'\n 16011: fallthrough\n      : @269 (gas: 22)\n 16012: t1 = u64 [sp + 0x258]\n 16016: a3 = u64 [sp + 0x250]\n 16020: t0 = u64 [sp + 0x248]\n 16024: a2 = u64 [sp + 0x240]\n 16028: a4 = u64 [sp + 0xf8]\n 16032: a0 = t1 ^ a4\n 16035: a4 = t1 <u a4\n 16038: a5 = u64 [sp + 0xf0]\n 16042: a1 = a3 <u a5\n 16045: u64 [sp + 0x80] = a1\n 16049: a4 = a1 if a0 == 0\n 16052: a1 = u64 [sp + 0xe0]\n 16056: ra = t0 ^ a1\n 16059: s1 = t0 <u a1\n 16062: a1 = u64 [sp + 0xe8]\n 16066: u64 [sp + 0x60] = a2\n 16069: t2 = a2 <u a1\n 16072: s1 = t2 if ra == 0\n 16075: a5 = a5 ^ a3\n 16078: a0 = a0 | a5\n 16081: a4 = s1 if a0 == 0\n 16084: jump @288 if a4 != 0\n      : @270 (gas: 73)\n 16088: a0 = u64 [sp + 0xf0]\n 16092: a0 = a3 - a0\n 16095: a1 = a0 - s1\n 16098: u64 [sp + 0x78] = a1\n 16101: a0 = a0 <u s1\n 16104: a1 = u64 [sp + 0xf8]\n 16108: a2 = t1 - a1\n 16111: a1 = u64 [sp + 0x80]\n 16115: a2 = a2 - a1\n 16118: a2 = a2 - a0\n 16121: u64 [sp + 0x70] = a2\n 16124: a0 = 0xffffffff\n 16134: u64 [sp + 0x80] = a0\n 16138: a0 = u64 [sp + 0xe0]\n 16142: a0 = t0 - a0\n 16145: a0 = a0 - t2\n 16148: u64 [sp + 0x68] = a0\n 16151: a0 = u64 [sp + 0xe8]\n 16155: a1 = u64 [sp + 0x60]\n 16158: a0 = a1 - a0\n 16161: u64 [sp + 0x60] = a0\n 16164: a0 = u64 [sp + 0xa8]\n 16168: u64 [sp + 0x230] = a0\n 16172: a0 = u64 [sp + 0xb0]\n 16176: u64 [sp + 0x228] = a0\n 16180: a0 = u64 [sp + 0xb8]\n 16184: u64 [sp + 0x220] = a0\n 16188: s1 = u64 [sp + 0x88]\n 16192: u64 [sp + 0x238] = s1\n 16196: u64 [sp + 600] = 0\n 16200: u64 [sp + 592] = 0\n 16204: u64 [sp + 584] = 0\n 16208: u64 [sp + 576] = 0\n 16212: u32 [sp + 512] = 0x20\n 16217: i32 a1 = sp + 0x220\n 16221: i32 a3 = sp + 0x240\n 16225: i32 a4 = sp + 0x200\n 16229: a2 = 0xffffffffffffffff\n 16232: a0 = 0\n 16234: ecalli 4 // 'get_storage'\n 16236: u64 [sp + 0x238] = s1\n 16240: a0 = u64 [sp + 0xa8]\n 16244: u64 [sp + 0x230] = a0\n 16248: a0 = u64 [sp + 0xb0]\n 16252: u64 [sp + 0x228] = a0\n 16256: a0 = u64 [sp + 0xb8]\n 16260: u64 [sp + 0x220] = a0\n 16264: a0 = u64 [sp + 0x70]\n 16267: u64 [sp + 0x258] = a0\n 16271: a0 = u64 [sp + 0x78]\n 16274: u64 [sp + 0x250] = a0\n 16278: a0 = u64 [sp + 0x68]\n 16281: u64 [sp + 0x248] = a0\n 16285: a0 = u64 [sp + 0x60]\n 16288: u64 [sp + 0x240] = a0\n 16292: i32 a1 = sp + 0x220\n 16296: i32 a3 = sp + 0x240\n 16300: a2 = 0xffffffffffffffff\n 16303: a4 = 0x20\n 16306: a0 = 0\n 16308: ecalli 8 // 'set_storage'\n 16310: a0 = u64 [sp + 0x90]\n 16314: a0 = a0 & 0xffffffffffffffff\n 16317: u64 [sp + 0xb8] = a0\n 16321: a0 = u64 [sp + 0x98]\n 16325: a0 = a0 & 0xffffffffffffffff\n 16328: u64 [sp + 0xb0] = a0\n 16332: a0 = u64 [sp + 0xa0]\n 16336: s1 = u64 [sp + 0x80]\n 16340: s1 = s1 & a0\n 16343: a1 = 0x20\n 16346: a0 = 0\n 16348: ra = 230, jump @0\n      : @271 [@dyn 115] (gas: 58)\n 16354: a1 = reverse s1\n 16356: a2 = u64 [sp + 0xb0]\n 16360: a2 = reverse a2\n 16362: a3 = u64 [sp + 0xb8]\n 16366: a3 = reverse a3\n 16368: a4 = a3 >> 0x38\n 16371: u8 [a0 + 0x1f] = a4\n 16374: a4 = a3 >> 0x30\n 16377: u8 [a0 + 0x1e] = a4\n 16380: a4 = a3 >> 0x28\n 16383: u8 [a0 + 0x1d] = a4\n 16386: a4 = a3 >> 0x20\n 16389: u8 [a0 + 0x1c] = a4\n 16392: a4 = a3 >> 0x18\n 16395: u8 [a0 + 0x1b] = a4\n 16398: a4 = a3 >> 0x10\n 16401: u8 [a0 + 0x1a] = a4\n 16404: a4 = a3 >> 0x8\n 16407: u8 [a0 + 0x19] = a4\n 16410: u8 [a0 + 0x18] = a3\n 16413: a3 = a2 >> 0x38\n 16416: u8 [a0 + 0x17] = a3\n 16419: a3 = a2 >> 0x30\n 16422: u8 [a0 + 0x16] = a3\n 16425: a3 = a2 >> 0x28\n 16428: u8 [a0 + 0x15] = a3\n 16431: a3 = a2 >> 0x20\n 16434: u8 [a0 + 0x14] = a3\n 16437: a3 = a2 >> 0x18\n 16440: u8 [a0 + 0x13] = a3\n 16443: a3 = a2 >> 0x10\n 16446: u8 [a0 + 0x12] = a3\n 16449: a3 = a2 >> 0x8\n 16452: u8 [a0 + 0x11] = a3\n 16455: u8 [a0 + 0x10] = a2\n 16458: a2 = a1 >> 0x38\n 16461: u8 [a0 + 0xf] = a2\n 16464: a2 = a1 >> 0x30\n 16467: u8 [a0 + 0xe] = a2\n 16470: a2 = a1 >> 0x28\n 16473: u8 [a0 + 0xd] = a2\n 16476: a2 = a1 >> 0x20\n 16479: u8 [a0 + 0xc] = a2\n 16482: u8 [a0 + 11] = 0\n 16485: u8 [a0 + 10] = 0\n 16488: u8 [a0 + 9] = 0\n 16491: u8 [a0 + 0x8] = a1\n 16494: u8 [a0 + 7] = 0\n 16497: u8 [a0 + 6] = 0\n 16500: u8 [a0 + 5] = 0\n 16503: u8 [a0 + 4] = 0\n 16506: u8 [a0 + 3] = 0\n 16509: u8 [a0 + 2] = 0\n 16512: u8 [a0 + 1] = 0\n 16515: u8 [a0 + 0] = 0\n 16517: a0 = 0x20\n 16520: a1 = 0x20\n 16523: ra = 232, jump @0\n      : @272 [@dyn 116] (gas: 35)\n 16529: u8 [a0 + 31] = 0\n 16532: u8 [a0 + 30] = 0\n 16535: u8 [a0 + 29] = 0\n 16538: u8 [a0 + 28] = 0\n 16541: u8 [a0 + 27] = 0\n 16544: u8 [a0 + 26] = 0\n 16547: u8 [a0 + 25] = 0\n 16550: u8 [a0 + 24] = 0\n 16553: u8 [a0 + 23] = 0\n 16556: u8 [a0 + 22] = 0\n 16559: u8 [a0 + 21] = 0\n 16562: u8 [a0 + 20] = 0\n 16565: u8 [a0 + 19] = 0\n 16568: u8 [a0 + 18] = 0\n 16571: u8 [a0 + 17] = 0\n 16574: u8 [a0 + 16] = 0\n 16577: u8 [a0 + 15] = 0\n 16580: u8 [a0 + 14] = 0\n 16583: u8 [a0 + 13] = 0\n 16586: u8 [a0 + 12] = 0\n 16589: u8 [a0 + 11] = 0\n 16592: u8 [a0 + 10] = 0\n 16595: u8 [a0 + 9] = 0\n 16598: u8 [a0 + 8] = 0\n 16601: u8 [a0 + 7] = 0\n 16604: u8 [a0 + 6] = 0\n 16607: u8 [a0 + 5] = 0\n 16610: u8 [a0 + 4] = 0\n 16613: u8 [a0 + 3] = 0\n 16616: u8 [a0 + 2] = 0\n 16619: u8 [a0 + 1] = 0\n 16622: u8 [a0 + 0] = 0\n 16624: a1 = 0x40\n 16627: a0 = 0\n 16629: ra = 234, jump @0\n      : @273 [@dyn 117] (gas: 50)\n 16635: i32 a0 = a0 + 0\n 16637: i32 a2 = sp + 0x240\n 16641: a1 = 0x40\n 16644: ecalli 5 // 'hash_keccak_256'\n 16646: a0 = u64 [sp + 0x240]\n 16650: a1 = u64 [sp + 0x248]\n 16654: a2 = u64 [sp + 0x258]\n 16658: a3 = u64 [sp + 0x250]\n 16662: a0 = reverse a0\n 16664: a1 = reverse a1\n 16666: a2 = reverse a2\n 16668: a3 = reverse a3\n 16670: a4 = u64 [sp + 0xc0]\n 16674: a4 = a4 + a3\n 16677: a5 = u64 [sp + 0xc8]\n 16681: a5 = a5 + a2\n 16684: a2 = a5 <u a2\n 16687: s1 = a4 + a2\n 16690: a4 = s1 ^ a3\n 16693: a3 = s1 <u a3\n 16696: a3 = a2 if a4 == 0\n 16699: a2 = u64 [sp + 0xd0]\n 16703: a2 = a2 + a1\n 16706: a3 = a3 + a2\n 16709: t0 = a3 <u a2\n 16712: a4 = u64 [sp + 0xd8]\n 16716: a0 = a0 + a4\n 16719: a1 = a2 <u a1\n 16722: a0 = a0 + a1\n 16725: a0 = a0 + t0\n 16728: u64 [sp + 0xd0] = s1\n 16732: u64 [sp + 0x228] = s1\n 16736: u64 [sp + 0xd8] = a5\n 16740: u64 [sp + 0x220] = a5\n 16744: u64 [sp + 0xc8] = a3\n 16748: u64 [sp + 0x230] = a3\n 16752: u64 [sp + 0xc0] = a0\n 16756: u64 [sp + 0x238] = a0\n 16760: u64 [sp + 600] = 0\n 16764: u64 [sp + 592] = 0\n 16768: u64 [sp + 584] = 0\n 16772: u64 [sp + 576] = 0\n 16776: u32 [sp + 512] = 0x20\n 16781: i32 a1 = sp + 0x220\n 16785: i32 a3 = sp + 0x240\n 16789: i32 a4 = sp + 0x200\n 16793: a2 = 0xffffffffffffffff\n 16796: a0 = 0\n 16798: ecalli 4 // 'get_storage'\n 16800: fallthrough\n      : @274 (gas: 37)\n 16801: a3 = u64 [sp + 0x248]\n 16805: a1 = u64 [sp + 0x240]\n 16809: t0 = u64 [sp + 0x258]\n 16813: a2 = u64 [sp + 0x250]\n 16817: a5 = u64 [sp + 0xe0]\n 16821: a5 = a5 + a3\n 16824: a0 = u64 [sp + 0xe8]\n 16828: a0 = a0 + a1\n 16831: u64 [sp + 0xe8] = a0\n 16835: a4 = a0 <u a1\n 16838: a5 = a5 + a4\n 16841: t1 = a5 ^ a3\n 16844: u64 [sp + 0xe0] = a5\n 16848: a3 = a5 <u a3\n 16851: a5 = a4 ^ 0x1\n 16854: a4 = a3 if t1 != 0\n 16857: a0 = u64 [sp + 0xf0]\n 16861: a0 = a0 + a2\n 16864: s1 = a0 + a4\n 16867: a4 = s1 <u a0\n 16870: a1 = u64 [sp + 0xf8]\n 16874: a1 = a1 + t0\n 16877: a0 = a0 <u a2\n 16880: a0 = a0 + a1\n 16883: a4 = a4 + a0\n 16886: a0 = s1 <u a2\n 16889: a1 = a4 ^ t0\n 16892: u64 [sp + 0xf8] = a4\n 16896: a4 = a4 <u t0\n 16899: a4 = a0 if a1 == 0\n 16902: a0 = a4 ^ 0x1\n 16905: a2 = a2 ^ s1\n 16908: a1 = a1 | a2\n 16911: a2 = a3 ^ 0x1\n 16914: a5 = a2 if t1 != 0\n 16917: a5 = a0 if a1 != 0\n 16920: jump @290 if a5 == 0\n      : @275 (gas: 46)\n 16924: a0 = u64 [sp + 0xc8]\n 16928: u64 [sp + 0x230] = a0\n 16932: a0 = u64 [sp + 0xd0]\n 16936: u64 [sp + 0x228] = a0\n 16940: a0 = u64 [sp + 0xd8]\n 16944: u64 [sp + 0x220] = a0\n 16948: a0 = u64 [sp + 0xc0]\n 16952: u64 [sp + 0x238] = a0\n 16956: u64 [sp + 600] = 0\n 16960: u64 [sp + 592] = 0\n 16964: u64 [sp + 584] = 0\n 16968: u64 [sp + 576] = 0\n 16972: u32 [sp + 512] = 0x20\n 16977: i32 a1 = sp + 0x220\n 16981: i32 a3 = sp + 0x240\n 16985: i32 a4 = sp + 0x200\n 16989: a2 = 0xffffffffffffffff\n 16992: a0 = 0\n 16994: ecalli 4 // 'get_storage'\n 16996: a0 = u64 [sp + 0xc0]\n 17000: u64 [sp + 0x238] = a0\n 17004: a0 = u64 [sp + 0xc8]\n 17008: u64 [sp + 0x230] = a0\n 17012: a0 = u64 [sp + 0xd0]\n 17016: u64 [sp + 0x228] = a0\n 17020: a0 = u64 [sp + 0xd8]\n 17024: u64 [sp + 0x220] = a0\n 17028: a0 = u64 [sp + 0xf8]\n 17032: u64 [sp + 0x258] = a0\n 17036: u64 [sp + 0x250] = s1\n 17040: a0 = u64 [sp + 0xe0]\n 17044: u64 [sp + 0x248] = a0\n 17048: a0 = u64 [sp + 0xe8]\n 17052: u64 [sp + 0x240] = a0\n 17056: i32 a1 = sp + 0x220\n 17060: i32 a3 = sp + 0x240\n 17064: a2 = 0xffffffffffffffff\n 17067: a4 = 0x20\n 17070: a0 = 0\n 17072: ecalli 8 // 'set_storage'\n 17074: sp = s0 + 0xfffffffffffffd80\n 17078: ra = u64 [sp + 0x278]\n 17082: s0 = u64 [sp + 0x270]\n 17086: s1 = u64 [sp + 0x268]\n 17090: sp = sp + 0x280\n 17094: ret\n      : @276 (gas: 3)\n 17096: a0 = 0x40\n 17099: a1 = 0x20\n 17102: ra = 236, jump @0\n      : @277 [@dyn 118] (gas: 103)\n 17108: a1 = u8 [a0 + 0x11]\n 17111: a2 = u8 [a0 + 0x10]\n 17114: a3 = u8 [a0 + 0x12]\n 17117: a4 = u8 [a0 + 0x13]\n 17120: a1 = a1 << 0x8\n 17123: a1 = a1 | a2\n 17126: a3 = a3 << 0x10\n 17129: a4 = a4 << 0x18\n 17132: a3 = a3 | a4\n 17135: a1 = a1 | a3\n 17138: a2 = u8 [a0 + 0x15]\n 17141: a3 = u8 [a0 + 0x14]\n 17144: a4 = u8 [a0 + 0x16]\n 17147: a5 = u8 [a0 + 0x17]\n 17150: a2 = a2 << 0x8\n 17153: a2 = a2 | a3\n 17156: a4 = a4 << 0x10\n 17159: a5 = a5 << 0x18\n 17162: a4 = a4 | a5\n 17165: a2 = a2 | a4\n 17168: a2 = a2 << 0x20\n 17171: t0 = a2 | a1\n 17174: a2 = u8 [a0 + 0x1]\n 17177: a3 = u8 [a0]\n 17179: a4 = u8 [a0 + 0x2]\n 17182: a5 = u8 [a0 + 0x3]\n 17185: a2 = a2 << 0x8\n 17188: a2 = a2 | a3\n 17191: a4 = a4 << 0x10\n 17194: a5 = a5 << 0x18\n 17197: a4 = a4 | a5\n 17200: a2 = a2 | a4\n 17203: a3 = u8 [a0 + 0x5]\n 17206: a4 = u8 [a0 + 0x4]\n 17209: a5 = u8 [a0 + 0x6]\n 17212: s1 = u8 [a0 + 0x7]\n 17215: a3 = a3 << 0x8\n 17218: a3 = a3 | a4\n 17221: a5 = a5 << 0x10\n 17224: s1 = s1 << 0x18\n 17227: a5 = a5 | s1\n 17230: a3 = a3 | a5\n 17233: a3 = a3 << 0x20\n 17236: a2 = a2 | a3\n 17239: a3 = u8 [a0 + 0x19]\n 17242: a4 = u8 [a0 + 0x18]\n 17245: a5 = u8 [a0 + 0x1a]\n 17248: s1 = u8 [a0 + 0x1b]\n 17251: a3 = a3 << 0x8\n 17254: a3 = a3 | a4\n 17257: a5 = a5 << 0x10\n 17260: s1 = s1 << 0x18\n 17263: a5 = a5 | s1\n 17266: a3 = a3 | a5\n 17269: a4 = u8 [a0 + 0x1d]\n 17272: a5 = u8 [a0 + 0x1c]\n 17275: s1 = u8 [a0 + 0x1e]\n 17278: a1 = u8 [a0 + 0x1f]\n 17281: a4 = a4 << 0x8\n 17284: a4 = a4 | a5\n 17287: s1 = s1 << 0x10\n 17290: a1 = a1 << 0x18\n 17293: a1 = a1 | s1\n 17296: a1 = a1 | a4\n 17299: a1 = a1 << 0x20\n 17302: a3 = a3 | a1\n 17305: a1 = u8 [a0 + 0x9]\n 17308: a4 = u8 [a0 + 0x8]\n 17311: a5 = u8 [a0 + 0xa]\n 17314: s1 = u8 [a0 + 0xb]\n 17317: a1 = a1 << 0x8\n 17320: a1 = a1 | a4\n 17323: a5 = a5 << 0x10\n 17326: s1 = s1 << 0x18\n 17329: a5 = a5 | s1\n 17332: a1 = a1 | a5\n 17335: a4 = u8 [a0 + 0xd]\n 17338: a5 = u8 [a0 + 0xc]\n 17341: s1 = u8 [a0 + 0xe]\n 17344: a0 = u8 [a0 + 0xf]\n 17347: a4 = a4 << 0x8\n 17350: a4 = a4 | a5\n 17353: s1 = s1 << 0x10\n 17356: a0 = a0 << 0x18\n 17359: a0 = a0 | s1\n 17362: a0 = a0 | a4\n 17365: a0 = a0 << 0x20\n 17368: a0 = a0 | a1\n 17371: s1 = reverse a0\n 17373: a1 = reverse a3\n 17375: a2 = reverse a2\n 17377: a0 = reverse t0\n 17379: u64 [sp + 0xf8] = a0\n 17383: u64 [sp + 0xf0] = a2\n 17387: a0 = a0 | a2\n 17390: a2 = a1\n 17392: a1 = a1 | s1\n 17395: a1 = a1 | a0\n 17398: a1 = a1 >> 0x20\n 17401: a0 = a0 | s1\n 17404: a0 = a0 << 0x20\n 17407: a0 = a0 | a1\n 17410: jump @287 if a0 != 0\n      : @278 (gas: 5)\n 17414: u64 [sp + 0xe8] = a2\n 17418: i32 a0 = a2 + 0\n 17420: a1 = 0x20\n 17423: u64 [sp + 0xe0] = a0\n 17427: ra = 238, jump @0\n      : @279 [@dyn 119] (gas: 50)\n 17433: u8 [a0 + 31] = 0\n 17436: u8 [a0 + 30] = 0\n 17439: u8 [a0 + 29] = 0\n 17442: u8 [a0 + 28] = 0\n 17445: u8 [a0 + 27] = 0\n 17448: u8 [a0 + 26] = 0\n 17451: u8 [a0 + 25] = 0\n 17454: u8 [a0 + 24] = 0\n 17457: u8 [a0 + 23] = 0\n 17460: u8 [a0 + 22] = 0\n 17463: u8 [a0 + 21] = 0\n 17466: u8 [a0 + 20] = 0\n 17469: u8 [a0 + 19] = 0\n 17472: u8 [a0 + 18] = 0\n 17475: u8 [a0 + 17] = 0\n 17478: u8 [a0 + 16] = 0\n 17481: u8 [a0 + 15] = 0\n 17484: u8 [a0 + 14] = 0\n 17487: u8 [a0 + 13] = 0\n 17490: u8 [a0 + 12] = 0\n 17493: u8 [a0 + 11] = 0\n 17496: u8 [a0 + 10] = 0\n 17499: u8 [a0 + 9] = 0\n 17502: u8 [a0 + 8] = 0\n 17505: u8 [a0 + 7] = 0\n 17508: u8 [a0 + 6] = 0\n 17511: u8 [a0 + 5] = 0\n 17514: u8 [a0 + 4] = 0\n 17517: u8 [a0 + 3] = 0xa0\n 17522: u8 [a0 + 2] = 0x79\n 17526: u8 [a0 + 1] = 0xc3\n 17531: u8 [a0 + 0] = 0x8\n 17534: a1 = u64 [sp + 0xe8]\n 17538: a0 = a1 + 0x4\n 17541: a1 = a0 <u a1\n 17544: a3 = u64 [sp + 0xf8]\n 17548: a2 = a3 + a1\n 17551: a3 = a2 <u a3\n 17554: a3 = a1 if a1 == 0\n 17557: a3 = a3 + s1\n 17560: a1 = a3 <u s1\n 17563: a4 = u64 [sp + 0xf0]\n 17567: a4 = a4 + a1\n 17570: u64 [sp + 0x108] = a2\n 17574: u64 [sp + 0x100] = a0\n 17578: u64 [sp + 0x110] = a3\n 17582: a0 = sp + 0x120\n 17586: a1 = sp + 0x100\n 17590: u64 [sp + 0x118] = a4\n 17594: ra = 240, jump @243\n      : @280 [@dyn 120] (gas: 5)\n 17600: a0 = u64 [sp + 0x128]\n 17604: t0 = u64 [sp + 0x138]\n 17608: t1 = u64 [sp + 0x120]\n 17612: a3 = u64 [sp + 0x130]\n 17616: jump @286\n      : @281 (gas: 3)\n 17619: a0 = 0x40\n 17622: a1 = 0x20\n 17625: ra = 242, jump @0\n      : @282 [@dyn 121] (gas: 103)\n 17631: a1 = u8 [a0 + 0x11]\n 17634: a2 = u8 [a0 + 0x10]\n 17637: a3 = u8 [a0 + 0x12]\n 17640: a4 = u8 [a0 + 0x13]\n 17643: a1 = a1 << 0x8\n 17646: a1 = a1 | a2\n 17649: a3 = a3 << 0x10\n 17652: a4 = a4 << 0x18\n 17655: a3 = a3 | a4\n 17658: a1 = a1 | a3\n 17661: a2 = u8 [a0 + 0x15]\n 17664: a3 = u8 [a0 + 0x14]\n 17667: a4 = u8 [a0 + 0x16]\n 17670: a5 = u8 [a0 + 0x17]\n 17673: a2 = a2 << 0x8\n 17676: a2 = a2 | a3\n 17679: a4 = a4 << 0x10\n 17682: a5 = a5 << 0x18\n 17685: a4 = a4 | a5\n 17688: a2 = a2 | a4\n 17691: a2 = a2 << 0x20\n 17694: t0 = a2 | a1\n 17697: a2 = u8 [a0 + 0x1]\n 17700: a3 = u8 [a0]\n 17702: a4 = u8 [a0 + 0x2]\n 17705: a5 = u8 [a0 + 0x3]\n 17708: a2 = a2 << 0x8\n 17711: a2 = a2 | a3\n 17714: a4 = a4 << 0x10\n 17717: a5 = a5 << 0x18\n 17720: a4 = a4 | a5\n 17723: a2 = a2 | a4\n 17726: a3 = u8 [a0 + 0x5]\n 17729: a4 = u8 [a0 + 0x4]\n 17732: a5 = u8 [a0 + 0x6]\n 17735: s1 = u8 [a0 + 0x7]\n 17738: a3 = a3 << 0x8\n 17741: a3 = a3 | a4\n 17744: a5 = a5 << 0x10\n 17747: s1 = s1 << 0x18\n 17750: a5 = a5 | s1\n 17753: a3 = a3 | a5\n 17756: a3 = a3 << 0x20\n 17759: a2 = a2 | a3\n 17762: a3 = u8 [a0 + 0x19]\n 17765: a4 = u8 [a0 + 0x18]\n 17768: a5 = u8 [a0 + 0x1a]\n 17771: s1 = u8 [a0 + 0x1b]\n 17774: a3 = a3 << 0x8\n 17777: a3 = a3 | a4\n 17780: a5 = a5 << 0x10\n 17783: s1 = s1 << 0x18\n 17786: a5 = a5 | s1\n 17789: a3 = a3 | a5\n 17792: a4 = u8 [a0 + 0x1d]\n 17795: a5 = u8 [a0 + 0x1c]\n 17798: s1 = u8 [a0 + 0x1e]\n 17801: a1 = u8 [a0 + 0x1f]\n 17804: a4 = a4 << 0x8\n 17807: a4 = a4 | a5\n 17810: s1 = s1 << 0x10\n 17813: a1 = a1 << 0x18\n 17816: a1 = a1 | s1\n 17819: a1 = a1 | a4\n 17822: a1 = a1 << 0x20\n 17825: a3 = a3 | a1\n 17828: a1 = u8 [a0 + 0x9]\n 17831: a4 = u8 [a0 + 0x8]\n 17834: a5 = u8 [a0 + 0xa]\n 17837: s1 = u8 [a0 + 0xb]\n 17840: a1 = a1 << 0x8\n 17843: a1 = a1 | a4\n 17846: a5 = a5 << 0x10\n 17849: s1 = s1 << 0x18\n 17852: a5 = a5 | s1\n 17855: a1 = a1 | a5\n 17858: a4 = u8 [a0 + 0xd]\n 17861: a5 = u8 [a0 + 0xc]\n 17864: s1 = u8 [a0 + 0xe]\n 17867: a0 = u8 [a0 + 0xf]\n 17870: a4 = a4 << 0x8\n 17873: a4 = a4 | a5\n 17876: s1 = s1 << 0x10\n 17879: a0 = a0 << 0x18\n 17882: a0 = a0 | s1\n 17885: a0 = a0 | a4\n 17888: a0 = a0 << 0x20\n 17891: a0 = a0 | a1\n 17894: s1 = reverse a0\n 17896: a1 = reverse a3\n 17898: a2 = reverse a2\n 17900: a0 = reverse t0\n 17902: u64 [sp + 0xf8] = a0\n 17906: u64 [sp + 0xf0] = a2\n 17910: a0 = a0 | a2\n 17913: a2 = a1\n 17915: a1 = a1 | s1\n 17918: a1 = a1 | a0\n 17921: a1 = a1 >> 0x20\n 17924: a0 = a0 | s1\n 17927: a0 = a0 << 0x20\n 17930: a0 = a0 | a1\n 17933: jump @287 if a0 != 0\n      : @283 (gas: 5)\n 17937: u64 [sp + 0xe8] = a2\n 17941: i32 a0 = a2 + 0\n 17943: a1 = 0x20\n 17946: u64 [sp + 0xe0] = a0\n 17950: ra = 244, jump @0\n      : @284 [@dyn 122] (gas: 50)\n 17956: u8 [a0 + 31] = 0\n 17959: u8 [a0 + 30] = 0\n 17962: u8 [a0 + 29] = 0\n 17965: u8 [a0 + 28] = 0\n 17968: u8 [a0 + 27] = 0\n 17971: u8 [a0 + 26] = 0\n 17974: u8 [a0 + 25] = 0\n 17977: u8 [a0 + 24] = 0\n 17980: u8 [a0 + 23] = 0\n 17983: u8 [a0 + 22] = 0\n 17986: u8 [a0 + 21] = 0\n 17989: u8 [a0 + 20] = 0\n 17992: u8 [a0 + 19] = 0\n 17995: u8 [a0 + 18] = 0\n 17998: u8 [a0 + 17] = 0\n 18001: u8 [a0 + 16] = 0\n 18004: u8 [a0 + 15] = 0\n 18007: u8 [a0 + 14] = 0\n 18010: u8 [a0 + 13] = 0\n 18013: u8 [a0 + 12] = 0\n 18016: u8 [a0 + 11] = 0\n 18019: u8 [a0 + 10] = 0\n 18022: u8 [a0 + 9] = 0\n 18025: u8 [a0 + 8] = 0\n 18028: u8 [a0 + 7] = 0\n 18031: u8 [a0 + 6] = 0\n 18034: u8 [a0 + 5] = 0\n 18037: u8 [a0 + 4] = 0\n 18040: u8 [a0 + 3] = 0xa0\n 18045: u8 [a0 + 2] = 0x79\n 18049: u8 [a0 + 1] = 0xc3\n 18054: u8 [a0 + 0] = 0x8\n 18057: a1 = u64 [sp + 0xe8]\n 18061: a0 = a1 + 0x4\n 18064: a1 = a0 <u a1\n 18067: a3 = u64 [sp + 0xf8]\n 18071: a2 = a3 + a1\n 18074: a3 = a2 <u a3\n 18077: a3 = a1 if a1 == 0\n 18080: a3 = a3 + s1\n 18083: a1 = a3 <u s1\n 18086: a4 = u64 [sp + 0xf0]\n 18090: a4 = a4 + a1\n 18093: u64 [sp + 0x148] = a2\n 18097: u64 [sp + 0x140] = a0\n 18101: u64 [sp + 0x150] = a3\n 18105: a0 = sp + 0x160\n 18109: a1 = sp + 0x140\n 18113: u64 [sp + 0x158] = a4\n 18117: ra = 246, jump @251\n      : @285 [@dyn 123] (gas: 5)\n 18123: a0 = u64 [sp + 0x168]\n 18127: t0 = u64 [sp + 0x178]\n 18131: t1 = u64 [sp + 0x160]\n 18135: a3 = u64 [sp + 0x170]\n 18139: fallthrough\n      : @286 (gas: 26)\n 18140: a1 = u64 [sp + 0xf8]\n 18144: a4 = a0 ^ a1\n 18147: a5 = a0 <u a1\n 18150: t2 = a1\n 18152: a2 = u64 [sp + 0xe8]\n 18156: a1 = t1 <u a2\n 18159: a5 = a1 if a4 == 0\n 18162: a4 = a3 - s1\n 18165: a3 = a3 <u s1\n 18168: s1 = u64 [sp + 0xf0]\n 18172: s1 = t0 - s1\n 18175: s1 = s1 - a3\n 18178: a3 = a4 <u a5\n 18181: s1 = s1 - a3\n 18184: a4 = a4 - a5\n 18187: a0 = a0 - t2\n 18190: a1 = a0 - a1\n 18193: a0 = t1 - a2\n 18196: a1 = a1 | s1\n 18199: a2 = a0 | a4\n 18202: a2 = a2 | a1\n 18205: a1 = a1 | a4\n 18208: a2 = a2 >> 0x20\n 18211: a1 = a1 << 0x20\n 18214: a1 = a1 | a2\n 18217: jump @294 if a1 == 0\n      : @287 (gas: 1)\n 18221: trap\n      : @288 (gas: 8)\n 18222: u64 [sp + 432] = 0\n 18226: u64 [sp + 424] = 0\n 18230: u64 [sp + 416] = 0\n 18234: a0 = 0x4e487b7100000000\n 18244: a1 = sp + 0x1a0\n 18248: u64 [sp + 0x1b8] = a0\n 18252: a0 = 0\n 18254: ra = 248, jump @8\n      : @289 [@dyn 124] (gas: 8)\n 18260: u64 [sp + 408] = 0\n 18264: u64 [sp + 400] = 0\n 18268: u64 [sp + 384] = 0x11\n 18273: a0 = 0x4\n 18276: a1 = sp + 0x180\n 18280: u64 [sp + 392] = 0\n 18284: ra = 0xfc\n 18288: jump @8\n      : @290 (gas: 8)\n 18291: u64 [sp + 496] = 0\n 18295: u64 [sp + 488] = 0\n 18299: u64 [sp + 480] = 0\n 18303: a0 = 0x4e487b7100000000\n 18313: a1 = sp + 0x1e0\n 18317: u64 [sp + 0x1f8] = a0\n 18321: a0 = 0\n 18323: ra = 250, jump @8\n      : @291 [@dyn 125] (gas: 7)\n 18329: u64 [sp + 472] = 0\n 18333: u64 [sp + 464] = 0\n 18337: u64 [sp + 448] = 0x11\n 18342: a0 = 0x4\n 18345: a1 = sp + 0x1c0\n 18349: u64 [sp + 456] = 0\n 18353: ra = 252, jump @8\n      : @292 [@dyn 126] (gas: 3)\n 18359: a1 = 0x24\n 18362: a0 = 0\n 18364: ra = 254, jump @0\n      : @293 [@dyn 127] (gas: 5)\n 18370: i32 a1 = a0 + 0\n 18372: a0 = 0x1\n 18375: a2 = 0x24\n 18378: ecalli 6 // 'seal_return'\n 18380: fallthrough\n      : @294 (gas: 4)\n 18381: i32 s1 = a0 + 0\n 18383: a0 = u64 [sp + 0xe0]\n 18387: a1 = s1\n 18389: ra = 256, jump @0\n      : @295 [@dyn 128] (gas: 6)\n 18395: i32 a1 = a0 + 0\n 18397: a0 = 0x1\n 18400: a2 = s1\n 18402: ra = 0x102\n 18406: ecalli 6 // 'seal_return'\n 18408: fallthrough\n      : @296 [@dyn 129] (gas: 18)\n 18409: a2 = u64 [a1]\n 18411: t0 = u64 [a1 + 0x18]\n 18414: a4 = u64 [a1 + 0x8]\n 18417: a1 = u64 [a1 + 0x10]\n 18420: a5 = a2 + 0x1f\n 18423: a2 = a5 <u a2\n 18426: a3 = a4 + a2\n 18429: a4 = a3 <u a4\n 18432: a4 = a2 if a2 == 0\n 18435: a4 = a4 + a1\n 18438: a1 = a4 <u a1\n 18441: a1 = a1 + t0\n 18444: a5 = a5 & 0xffffffffffffffe0\n 18447: u64 [a0] = a5\n 18449: u64 [a0 + 0x8] = a3\n 18452: u64 [a0 + 0x10] = a4\n 18455: u64 [a0 + 0x18] = a1\n 18458: ret\n      : @297 (gas: 18)\n 18460: sp = sp + 0xffffffffffffff60\n 18464: u64 [sp + 0x98] = ra\n 18468: u64 [sp + 0x90] = s0\n 18472: u64 [sp + 0x88] = s1\n 18476: s0 = sp + 0xa0\n 18480: sp = sp & 0xfffffffffffffff0\n 18483: a2 = u64 [a1 + 0x18]\n 18486: u64 [sp + 0x30] = a2\n 18489: a2 = u64 [a1 + 0x10]\n 18492: u64 [sp + 0x28] = a2\n 18495: a2 = u64 [a1 + 0x8]\n 18498: u64 [sp + 0x20] = a2\n 18501: a1 = u64 [a1]\n 18503: u64 [sp + 0x18] = a1\n 18506: u64 [sp + 0x38] = a0\n 18509: a0 = 0x40\n 18512: a1 = 0x20\n 18515: ra = 260, jump @0\n      : @298 [@dyn 130] (gas: 130)\n 18521: a1 = u8 [a0 + 0x19]\n 18524: a2 = u8 [a0 + 0x18]\n 18527: a3 = u8 [a0 + 0x1a]\n 18530: a4 = u8 [a0 + 0x1b]\n 18533: a1 = a1 << 0x8\n 18536: a1 = a1 | a2\n 18539: a3 = a3 << 0x10\n 18542: a4 = a4 << 0x18\n 18545: a3 = a3 | a4\n 18548: a1 = a1 | a3\n 18551: a2 = u8 [a0 + 0x1d]\n 18554: a3 = u8 [a0 + 0x1c]\n 18557: a4 = u8 [a0 + 0x1e]\n 18560: a5 = u8 [a0 + 0x1f]\n 18563: a2 = a2 << 0x8\n 18566: a2 = a2 | a3\n 18569: a4 = a4 << 0x10\n 18572: a5 = a5 << 0x18\n 18575: a4 = a4 | a5\n 18578: a2 = a2 | a4\n 18581: a2 = a2 << 0x20\n 18584: t0 = a2 | a1\n 18587: a2 = u8 [a0 + 0x11]\n 18590: a3 = u8 [a0 + 0x10]\n 18593: a4 = u8 [a0 + 0x12]\n 18596: a5 = u8 [a0 + 0x13]\n 18599: a2 = a2 << 0x8\n 18602: a2 = a2 | a3\n 18605: a4 = a4 << 0x10\n 18608: a5 = a5 << 0x18\n 18611: a4 = a4 | a5\n 18614: a2 = a2 | a4\n 18617: a3 = u8 [a0 + 0x15]\n 18620: a4 = u8 [a0 + 0x14]\n 18623: a5 = u8 [a0 + 0x16]\n 18626: s1 = u8 [a0 + 0x17]\n 18629: a3 = a3 << 0x8\n 18632: a3 = a3 | a4\n 18635: a5 = a5 << 0x10\n 18638: s1 = s1 << 0x18\n 18641: a5 = a5 | s1\n 18644: a3 = a3 | a5\n 18647: a3 = a3 << 0x20\n 18650: a2 = a2 | a3\n 18653: a3 = u8 [a0 + 0x9]\n 18656: a4 = u8 [a0 + 0x8]\n 18659: a5 = u8 [a0 + 0xa]\n 18662: s1 = u8 [a0 + 0xb]\n 18665: a3 = a3 << 0x8\n 18668: a3 = a3 | a4\n 18671: a5 = a5 << 0x10\n 18674: s1 = s1 << 0x18\n 18677: a5 = a5 | s1\n 18680: a3 = a3 | a5\n 18683: a4 = u8 [a0 + 0xd]\n 18686: a5 = u8 [a0 + 0xc]\n 18689: s1 = u8 [a0 + 0xe]\n 18692: a1 = u8 [a0 + 0xf]\n 18695: a4 = a4 << 0x8\n 18698: a4 = a4 | a5\n 18701: s1 = s1 << 0x10\n 18704: a1 = a1 << 0x18\n 18707: a1 = a1 | s1\n 18710: a1 = a1 | a4\n 18713: a1 = a1 << 0x20\n 18716: a3 = a3 | a1\n 18719: a1 = u8 [a0 + 0x1]\n 18722: a4 = u8 [a0]\n 18724: a5 = u8 [a0 + 0x2]\n 18727: s1 = u8 [a0 + 0x3]\n 18730: a1 = a1 << 0x8\n 18733: a1 = a1 | a4\n 18736: a5 = a5 << 0x10\n 18739: s1 = s1 << 0x18\n 18742: a5 = a5 | s1\n 18745: a1 = a1 | a5\n 18748: a4 = u8 [a0 + 0x5]\n 18751: a5 = u8 [a0 + 0x4]\n 18754: s1 = u8 [a0 + 0x6]\n 18757: a0 = u8 [a0 + 0x7]\n 18760: a4 = a4 << 0x8\n 18763: a4 = a4 | a5\n 18766: s1 = s1 << 0x10\n 18769: a0 = a0 << 0x18\n 18772: a0 = a0 | s1\n 18775: a0 = a0 | a4\n 18778: a0 = a0 << 0x20\n 18781: a0 = a0 | a1\n 18784: t1 = reverse a0\n 18786: t2 = reverse a3\n 18788: s1 = reverse a2\n 18790: a5 = reverse t0\n 18792: a1 = u64 [sp + 0x18]\n 18795: a0 = a1 + 0x1f\n 18798: a1 = a0 <u a1\n 18801: a3 = u64 [sp + 0x20]\n 18804: a2 = a3 + a1\n 18807: a3 = a2 <u a3\n 18810: a3 = a1 if a1 == 0\n 18813: a1 = u64 [sp + 0x28]\n 18816: a3 = a3 + a1\n 18819: a1 = a3 <u a1\n 18822: a4 = u64 [sp + 0x30]\n 18825: a1 = a1 + a4\n 18828: a0 = a0 & 0xffffffffffffffe0\n 18831: a0 = a0 + a5\n 18834: u64 [sp + 0x28] = a5\n 18837: u64 [sp + 0x10] = a0\n 18840: a4 = a0 <u a5\n 18843: a2 = a2 + s1\n 18846: a5 = a2 + a4\n 18849: a2 = a5 ^ s1\n 18852: u64 [sp + 0x30] = s1\n 18855: a0 = a5 <u s1\n 18858: a0 = a4 if a2 == 0\n 18861: a3 = a3 + t2\n 18864: a4 = a3 + a0\n 18867: s1 = a4 <u a3\n 18870: a2 = a3 <u t2\n 18873: a1 = a1 + t1\n 18876: a1 = a1 + a2\n 18879: s1 = s1 + a1\n 18882: a1 = a4 >u 0\n 18884: a2 = s1 >u 0\n 18886: a2 = a1 if s1 == 0\n 18889: a1 = a4 | s1\n 18892: u64 [sp + 0x8] = a5\n 18895: a3 = a5 >u 0\n 18897: a3 = a2 if a1 != 0\n 18900: jump @302 if a3 != 0\n      : @299 (gas: 8)\n 18904: a1 = a4 <u t2\n 18907: a2 = s1 ^ t1\n 18910: a3 = s1 <u t1\n 18913: a3 = a1 if a2 == 0\n 18916: a1 = a4 ^ t2\n 18919: a1 = a1 | a2\n 18922: a0 = a3 if a1 != 0\n 18925: jump @302 if a0 != 0\n      : @300 (gas: 6)\n 18929: a0 = 0x40\n 18932: a1 = 0x20\n 18935: u64 [sp + 0x20] = t2\n 18938: u64 [sp + 0x18] = t1\n 18941: u64 [sp] = a4\n 18943: ra = 262, jump @0\n      : @301 [@dyn 131] (gas: 82)\n 18949: a1 = reverse s1\n 18951: a2 = u64 [sp]\n 18953: a2 = reverse a2\n 18955: a3 = u64 [sp + 0x8]\n 18958: a3 = reverse a3\n 18960: a4 = u64 [sp + 0x10]\n 18963: a4 = reverse a4\n 18965: u8 [a0 + 0x18] = a4\n 18968: a5 = a4 >> 0x38\n 18971: u8 [a0 + 0x1f] = a5\n 18974: a5 = a4 >> 0x30\n 18977: u8 [a0 + 0x1e] = a5\n 18980: a5 = a4 >> 0x28\n 18983: u8 [a0 + 0x1d] = a5\n 18986: a5 = a4 >> 0x20\n 18989: u8 [a0 + 0x1c] = a5\n 18992: a5 = a4 >> 0x18\n 18995: u8 [a0 + 0x1b] = a5\n 18998: a5 = a4 >> 0x10\n 19001: u8 [a0 + 0x1a] = a5\n 19004: a4 = a4 >> 0x8\n 19007: u8 [a0 + 0x19] = a4\n 19010: u8 [a0 + 0x10] = a3\n 19013: a4 = a3 >> 0x38\n 19016: u8 [a0 + 0x17] = a4\n 19019: a4 = a3 >> 0x30\n 19022: u8 [a0 + 0x16] = a4\n 19025: a4 = a3 >> 0x28\n 19028: u8 [a0 + 0x15] = a4\n 19031: a4 = a3 >> 0x20\n 19034: u8 [a0 + 0x14] = a4\n 19037: a4 = a3 >> 0x18\n 19040: u8 [a0 + 0x13] = a4\n 19043: a4 = a3 >> 0x10\n 19046: u8 [a0 + 0x12] = a4\n 19049: a3 = a3 >> 0x8\n 19052: u8 [a0 + 0x11] = a3\n 19055: u8 [a0 + 0x8] = a2\n 19058: a3 = a2 >> 0x38\n 19061: u8 [a0 + 0xf] = a3\n 19064: a3 = a2 >> 0x30\n 19067: u8 [a0 + 0xe] = a3\n 19070: a3 = a2 >> 0x28\n 19073: u8 [a0 + 0xd] = a3\n 19076: a3 = a2 >> 0x20\n 19079: u8 [a0 + 0xc] = a3\n 19082: a3 = a2 >> 0x18\n 19085: u8 [a0 + 0xb] = a3\n 19088: a3 = a2 >> 0x10\n 19091: u8 [a0 + 0xa] = a3\n 19094: a2 = a2 >> 0x8\n 19097: u8 [a0 + 0x9] = a2\n 19100: u8 [a0] = a1\n 19102: a2 = a1 >> 0x38\n 19105: u8 [a0 + 0x7] = a2\n 19108: a2 = a1 >> 0x30\n 19111: u8 [a0 + 0x6] = a2\n 19114: a2 = a1 >> 0x28\n 19117: u8 [a0 + 0x5] = a2\n 19120: a2 = a1 >> 0x20\n 19123: u8 [a0 + 0x4] = a2\n 19126: a2 = a1 >> 0x18\n 19129: u8 [a0 + 0x3] = a2\n 19132: a2 = a1 >> 0x10\n 19135: u8 [a0 + 0x2] = a2\n 19138: a1 = a1 >> 0x8\n 19141: u8 [a0 + 0x1] = a1\n 19144: a0 = u64 [sp + 0x38]\n 19147: a1 = u64 [sp + 0x28]\n 19150: u64 [a0] = a1\n 19152: a1 = u64 [sp + 0x18]\n 19155: u64 [a0 + 0x18] = a1\n 19158: a1 = u64 [sp + 0x30]\n 19161: u64 [a0 + 0x8] = a1\n 19164: a1 = u64 [sp + 0x20]\n 19167: u64 [a0 + 0x10] = a1\n 19170: sp = s0 + 0xffffffffffffff60\n 19174: ra = u64 [sp + 0x98]\n 19178: s0 = u64 [sp + 0x90]\n 19182: s1 = u64 [sp + 0x88]\n 19186: sp = sp + 0xa0\n 19190: ret\n      : @302 (gas: 8)\n 19192: u64 [sp + 112] = 0\n 19195: u64 [sp + 104] = 0\n 19198: u64 [sp + 96] = 0\n 19201: a0 = 0x4e487b7100000000\n 19211: a1 = sp + 0x60\n 19214: u64 [sp + 0x78] = a0\n 19217: a0 = 0\n 19219: ra = 264, jump @8\n      : @303 [@dyn 132] (gas: 7)\n 19225: u64 [sp + 88] = 0\n 19228: u64 [sp + 80] = 0\n 19231: u64 [sp + 64] = 0x41\n 19235: a0 = 0x4\n 19238: a1 = sp + 0x40\n 19241: u64 [sp + 72] = 0\n 19244: ra = 266, jump @8\n      : @304 [@dyn 133] (gas: 3)\n 19250: a1 = 0x24\n 19253: a0 = 0\n 19255: ra = 268, jump @0\n      : @305 [@dyn 134] (gas: 6)\n 19261: i32 a1 = a0 + 0\n 19263: a0 = 0x1\n 19266: a2 = 0x24\n 19269: ra = 0x10e\n 19273: ecalli 6 // 'seal_return'\n 19275: fallthrough\n      : @306 [@dyn 135] (gas: 7)\n 19276: a4 = u64 [a1 + 0x18]\n 19279: a3 = u64 [a1 + 0x10]\n 19282: a2 = u64 [a1 + 0x8]\n 19285: t0 = a3 | a4\n 19288: a5 = a2 <u 0x1\n 19291: a5 = 0 if t0 != 0\n 19293: jump @308 if a5 == 0\n      : @307 (gas: 16)\n 19296: a1 = u64 [a1]\n 19298: a5 = a3 >> 0x3b\n 19301: a4 = a4 << 0x5\n 19304: a4 = a4 | a5\n 19307: a5 = a2 >> 0x3b\n 19310: a3 = a3 << 0x5\n 19313: a3 = a3 | a5\n 19316: a5 = a1 >> 0x3b\n 19319: a2 = a2 << 0x5\n 19322: a2 = a2 | a5\n 19325: a1 = a1 << 0x5\n 19328: u64 [a0] = a1\n 19330: u64 [a0 + 0x8] = a2\n 19333: u64 [a0 + 0x10] = a3\n 19336: u64 [a0 + 0x18] = a4\n 19339: ret\n      : @308 (gas: 13)\n 19341: sp = sp + 0xffffffffffffffb0\n 19344: u64 [sp + 0x48] = ra\n 19347: u64 [sp + 0x40] = s0\n 19350: s0 = sp + 0x50\n 19353: sp = sp & 0xfffffffffffffff0\n 19356: u64 [sp + 48] = 0\n 19359: u64 [sp + 40] = 0\n 19362: u64 [sp + 32] = 0\n 19365: a0 = 0x4e487b7100000000\n 19375: a1 = sp + 0x20\n 19378: u64 [sp + 0x38] = a0\n 19381: a0 = 0\n 19383: ra = 272, jump @8\n      : @309 [@dyn 136] (gas: 7)\n 19389: u64 [sp + 24] = 0\n 19392: u64 [sp + 16] = 0\n 19395: u64 [sp + 0] = 0x41\n 19398: a0 = 0x4\n 19401: a1 = sp\n 19403: u64 [sp + 8] = 0\n 19406: ra = 274, jump @8\n      : @310 [@dyn 137] (gas: 3)\n 19412: a1 = 0x24\n 19415: a0 = 0\n 19417: ra = 276, jump @0\n      : @311 [@dyn 138] (gas: 6)\n 19423: i32 a1 = a0 + 0\n 19425: a0 = 0x1\n 19428: a2 = 0x24\n 19431: ra = 0x116\n 19435: ecalli 6 // 'seal_return'\n 19437: fallthrough\n      : @312 [@dyn 139] (gas: 13)\n 19438: sp = sp + 0xffffffffffffff60\n 19442: u64 [sp + 0x98] = ra\n 19446: u64 [sp + 0x90] = s0\n 19450: u64 [sp + 0x88] = s1\n 19454: s0 = sp + 0xa0\n 19458: sp = sp & 0xfffffffffffffff0\n 19461: a4 = u64 [a1 + 0x18]\n 19464: a3 = u64 [a1 + 0x10]\n 19467: a2 = u64 [a1 + 0x8]\n 19470: s1 = a3 | a4\n 19473: a5 = a2 <u 0x1\n 19476: a5 = 0 if s1 != 0\n 19478: jump @315 if a5 == 0\n      : @313 (gas: 19)\n 19481: s1 = a0\n 19483: a0 = u64 [a1]\n 19485: a1 = a3 >> 0x3b\n 19488: a4 = a4 << 0x5\n 19491: a4 = a4 | a1\n 19494: a1 = a2 >> 0x3b\n 19497: a3 = a3 << 0x5\n 19500: a1 = a1 | a3\n 19503: a3 = a0 >> 0x3b\n 19506: a2 = a2 << 0x5\n 19509: a2 = a2 | a3\n 19512: a0 = a0 << 0x5\n 19515: u64 [sp + 0x40] = a0\n 19518: u64 [sp + 0x48] = a2\n 19521: u64 [sp + 0x50] = a1\n 19524: a0 = sp + 0x60\n 19527: a1 = sp + 0x40\n 19530: u64 [sp + 0x58] = a4\n 19533: ra = 280, jump @297\n      : @314 [@dyn 140] (gas: 14)\n 19539: a0 = u64 [sp + 0x70]\n 19542: a1 = u64 [sp + 0x78]\n 19545: a2 = u64 [sp + 0x60]\n 19548: a3 = u64 [sp + 0x68]\n 19551: u64 [s1 + 0x10] = a0\n 19554: u64 [s1 + 0x18] = a1\n 19557: u64 [s1] = a2\n 19559: u64 [s1 + 0x8] = a3\n 19562: sp = s0 + 0xffffffffffffff60\n 19566: ra = u64 [sp + 0x98]\n 19570: s0 = u64 [sp + 0x90]\n 19574: s1 = u64 [sp + 0x88]\n 19578: sp = sp + 0xa0\n 19582: ret\n      : @315 (gas: 8)\n 19584: u64 [sp + 48] = 0\n 19587: u64 [sp + 40] = 0\n 19590: u64 [sp + 32] = 0\n 19593: a0 = 0x4e487b7100000000\n 19603: a1 = sp + 0x20\n 19606: u64 [sp + 0x38] = a0\n 19609: a0 = 0\n 19611: ra = 282, jump @8\n      : @316 [@dyn 141] (gas: 7)\n 19617: u64 [sp + 24] = 0\n 19620: u64 [sp + 16] = 0\n 19623: u64 [sp + 0] = 0x41\n 19626: a0 = 0x4\n 19629: a1 = sp\n 19631: u64 [sp + 8] = 0\n 19634: ra = 284, jump @8\n      : @317 [@dyn 142] (gas: 3)\n 19640: a1 = 0x24\n 19643: a0 = 0\n 19645: ra = 286, jump @0\n      : @318 [@dyn 143] (gas: 6)\n 19651: i32 a1 = a0 + 0\n 19653: a0 = 0x1\n 19656: a2 = 0x24\n 19659: ra = 0x120\n 19663: ecalli 6 // 'seal_return'\n 19665: fallthrough\n      : @319 [@dyn 144] (gas: 16)\n 19666: sp = sp + 0xffffffffffffffe8\n 19669: u64 [sp + 0x10] = ra\n 19672: u64 [sp + 0x8] = s0\n 19675: u64 [sp] = s1\n 19677: a2 = u64 [a1 + 0x10]\n 19680: a3 = u64 [a1 + 0x18]\n 19683: a4 = u64 [a1 + 0x8]\n 19686: s1 = u64 [a1]\n 19688: a3 = a3 | a4\n 19691: a1 = s1 | a2\n 19694: a1 = a1 | a3\n 19697: a1 = a1 >> 0x20\n 19700: a2 = a2 | a3\n 19703: a2 = a2 << 0x20\n 19706: a1 = a1 | a2\n 19709: jump @323 if a1 != 0\n      : @320 (gas: 12)\n 19712: a2 = u64 [a0 + 0x18]\n 19715: a3 = u64 [a0 + 0x10]\n 19718: a1 = u64 [a0]\n 19720: a0 = u64 [a0 + 0x8]\n 19723: a4 = a1 | a3\n 19726: a0 = a0 | a2\n 19729: a4 = a4 | a0\n 19732: a4 = a4 >> 0x20\n 19735: a0 = a0 | a3\n 19738: a0 = a0 << 0x20\n 19741: a0 = a0 | a4\n 19744: jump @323 if a0 != 0\n      : @321 (gas: 5)\n 19747: s0 = i32 [0x20004]\n 19752: i32 a0 = a1 + 0\n 19754: i32 s1 = s1 + 0\n 19756: a1 = s1\n 19758: ra = 290, jump @0\n      : @322 [@dyn 145] (gas: 9)\n 19764: i32 a0 = a0 + 0\n 19766: a1 = s1\n 19768: a2 = s0\n 19770: ra = u64 [sp + 0x10]\n 19773: s0 = u64 [sp + 0x8]\n 19776: s1 = u64 [sp]\n 19778: sp = sp + 0x18\n 19781: ecalli 0 // 'call_data_copy'\n 19782: ret\n      : @323 (gas: 1)\n 19784: trap\n      : @324 (gas: 18)\n 19785: sp = sp + 0xfffffffffffffea0\n 19789: u64 [sp + 0x158] = ra\n 19793: u64 [sp + 0x150] = s0\n 19797: u64 [sp + 0x148] = s1\n 19801: s0 = sp + 0x160\n 19805: sp = sp & 0xffffffffffffffe0\n 19808: a2 = u64 [a1 + 0x18]\n 19811: u64 [sp + 0x90] = a2\n 19815: a2 = u64 [a1 + 0x10]\n 19818: u64 [sp + 0x88] = a2\n 19822: a2 = u64 [a1 + 0x8]\n 19825: u64 [sp + 0xb8] = a2\n 19829: a1 = u64 [a1]\n 19831: u64 [sp + 0xb0] = a1\n 19835: u64 [sp + 0x8] = a0\n 19838: a0 = 0x40\n 19841: a1 = 0x20\n 19844: ra = 292, jump @0\n      : @325 [@dyn 146] (gas: 112)\n 19850: u64 [sp + 112] = 0\n 19853: u64 [sp + 120] = 0\n 19856: u64 [sp + 128] = 0\n 19860: ra = 0\n 19862: a1 = u8 [a0 + 0x19]\n 19865: a2 = u8 [a0 + 0x18]\n 19868: a3 = u8 [a0 + 0x1a]\n 19871: a4 = u8 [a0 + 0x1b]\n 19874: a1 = a1 << 0x8\n 19877: a1 = a1 | a2\n 19880: a3 = a3 << 0x10\n 19883: a4 = a4 << 0x18\n 19886: a3 = a3 | a4\n 19889: a1 = a1 | a3\n 19892: a2 = u8 [a0 + 0x1d]\n 19895: a3 = u8 [a0 + 0x1c]\n 19898: a4 = u8 [a0 + 0x1e]\n 19901: a5 = u8 [a0 + 0x1f]\n 19904: a2 = a2 << 0x8\n 19907: a2 = a2 | a3\n 19910: a4 = a4 << 0x10\n 19913: a5 = a5 << 0x18\n 19916: a4 = a4 | a5\n 19919: a2 = a2 | a4\n 19922: a2 = a2 << 0x20\n 19925: t0 = a2 | a1\n 19928: a2 = u8 [a0 + 0x11]\n 19931: a3 = u8 [a0 + 0x10]\n 19934: a4 = u8 [a0 + 0x12]\n 19937: a5 = u8 [a0 + 0x13]\n 19940: a2 = a2 << 0x8\n 19943: a2 = a2 | a3\n 19946: a4 = a4 << 0x10\n 19949: a5 = a5 << 0x18\n 19952: a4 = a4 | a5\n 19955: a2 = a2 | a4\n 19958: a3 = u8 [a0 + 0x15]\n 19961: a4 = u8 [a0 + 0x14]\n 19964: a5 = u8 [a0 + 0x16]\n 19967: s1 = u8 [a0 + 0x17]\n 19970: a3 = a3 << 0x8\n 19973: a3 = a3 | a4\n 19976: a5 = a5 << 0x10\n 19979: s1 = s1 << 0x18\n 19982: a5 = a5 | s1\n 19985: a3 = a3 | a5\n 19988: a3 = a3 << 0x20\n 19991: a2 = a2 | a3\n 19994: a3 = u8 [a0 + 0x9]\n 19997: a4 = u8 [a0 + 0x8]\n 20000: a5 = u8 [a0 + 0xa]\n 20003: s1 = u8 [a0 + 0xb]\n 20006: a3 = a3 << 0x8\n 20009: a3 = a3 | a4\n 20012: a5 = a5 << 0x10\n 20015: s1 = s1 << 0x18\n 20018: a5 = a5 | s1\n 20021: a3 = a3 | a5\n 20024: a4 = u8 [a0 + 0xd]\n 20027: a5 = u8 [a0 + 0xc]\n 20030: s1 = u8 [a0 + 0xe]\n 20033: a1 = u8 [a0 + 0xf]\n 20036: a4 = a4 << 0x8\n 20039: a4 = a4 | a5\n 20042: s1 = s1 << 0x10\n 20045: a1 = a1 << 0x18\n 20048: a1 = a1 | s1\n 20051: a1 = a1 | a4\n 20054: a1 = a1 << 0x20\n 20057: a3 = a3 | a1\n 20060: a1 = u8 [a0 + 0x1]\n 20063: a4 = u8 [a0]\n 20065: a5 = u8 [a0 + 0x2]\n 20068: s1 = u8 [a0 + 0x3]\n 20071: a1 = a1 << 0x8\n 20074: a1 = a1 | a4\n 20077: a5 = a5 << 0x10\n 20080: s1 = s1 << 0x18\n 20083: a5 = a5 | s1\n 20086: a1 = a1 | a5\n 20089: a4 = u8 [a0 + 0x5]\n 20092: a5 = u8 [a0 + 0x4]\n 20095: s1 = u8 [a0 + 0x6]\n 20098: a0 = u8 [a0 + 0x7]\n 20101: a4 = a4 << 0x8\n 20104: a4 = a4 | a5\n 20107: s1 = s1 << 0x10\n 20110: a0 = a0 << 0x18\n 20113: a0 = a0 | s1\n 20116: a0 = a0 | a4\n 20119: a0 = a0 << 0x20\n 20122: a0 = a0 | a1\n 20125: a1 = u64 [sp + 0x88]\n 20129: a4 = reverse a0\n 20131: a0 = reverse a3\n 20133: a3 = reverse a2\n 20135: a2 = u64 [sp + 0x90]\n 20139: a5 = reverse t0\n 20141: i32 s1 = sp + 0x100\n 20145: u64 [sp + 0x40] = s1\n 20148: i32 s1 = sp + 0x120\n 20152: u64 [sp + 0x38] = s1\n 20155: i32 s1 = sp + 0x140\n 20159: u64 [sp + 0x30] = s1\n 20162: u64 [sp + 0x10] = a5\n 20165: u64 [sp + 0x18] = a3\n 20168: u64 [sp + 0xa0] = a3\n 20172: u64 [sp + 0x28] = a0\n 20175: s1 = a0\n 20177: u64 [sp + 0x20] = a4\n 20180: u64 [sp + 0xa8] = a4\n 20184: fallthrough\n      : @326 (gas: 22)\n 20185: u64 [sp + 0x98] = a5\n 20189: u64 [sp + 0x68] = ra\n 20192: u64 [sp + 0x88] = a1\n 20196: u64 [sp + 0x110] = a1\n 20200: a0 = u64 [sp + 0xb8]\n 20204: u64 [sp + 0x108] = a0\n 20208: a0 = u64 [sp + 0xb0]\n 20212: u64 [sp + 0x100] = a0\n 20216: u64 [sp + 0x90] = a2\n 20220: u64 [sp + 0x118] = a2\n 20224: u64 [sp + 312] = 0\n 20228: u64 [sp + 304] = 0\n 20232: u64 [sp + 296] = 0\n 20236: u64 [sp + 288] = 0\n 20240: u32 [sp + 320] = 0x20\n 20245: a2 = 0xffffffffffffffff\n 20248: a0 = 0\n 20250: a1 = u64 [sp + 0x40]\n 20253: a3 = u64 [sp + 0x38]\n 20256: a4 = u64 [sp + 0x30]\n 20259: ecalli 4 // 'get_storage'\n 20261: fallthrough\n      : @327 (gas: 12)\n 20262: a2 = u64 [sp + 0x98]\n 20266: a0 = a2 | s1\n 20269: a1 = u64 [sp + 0xa8]\n 20273: a3 = u64 [sp + 0xa0]\n 20277: a1 = a1 | a3\n 20280: a0 = a0 | a1\n 20283: a0 = a0 >> 0x20\n 20286: u64 [sp + 0x60] = s1\n 20289: a1 = a1 | s1\n 20292: a1 = a1 << 0x20\n 20295: a0 = a0 | a1\n 20298: jump @333 if a0 != 0\n      : @328 (gas: 10)\n 20302: a0 = u64 [sp + 0x138]\n 20306: u64 [sp + 0x58] = a0\n 20309: a0 = u64 [sp + 0x130]\n 20313: u64 [sp + 0x50] = a0\n 20316: a0 = u64 [sp + 0x128]\n 20320: u64 [sp + 0x48] = a0\n 20323: s1 = u64 [sp + 0x120]\n 20327: i32 a0 = a2 + 0\n 20329: a1 = 0x20\n 20332: ra = 294, jump @0\n      : @329 [@dyn 147] (gas: 118)\n 20338: a1 = reverse s1\n 20340: a2 = a1 >> 0x38\n 20343: u8 [a0 + 0x1f] = a2\n 20346: a2 = a1 >> 0x30\n 20349: u8 [a0 + 0x1e] = a2\n 20352: a2 = a1 >> 0x28\n 20355: u8 [a0 + 0x1d] = a2\n 20358: a2 = a1 >> 0x20\n 20361: u8 [a0 + 0x1c] = a2\n 20364: a2 = a1 >> 0x18\n 20367: u8 [a0 + 0x1b] = a2\n 20370: a2 = a1 >> 0x10\n 20373: u8 [a0 + 0x1a] = a2\n 20376: a2 = a1 >> 0x8\n 20379: u8 [a0 + 0x19] = a2\n 20382: u8 [a0 + 0x18] = a1\n 20385: a1 = u64 [sp + 0x48]\n 20388: a1 = reverse a1\n 20390: a2 = a1 >> 0x38\n 20393: u8 [a0 + 0x17] = a2\n 20396: a2 = a1 >> 0x30\n 20399: u8 [a0 + 0x16] = a2\n 20402: a2 = a1 >> 0x28\n 20405: u8 [a0 + 0x15] = a2\n 20408: a2 = a1 >> 0x20\n 20411: u8 [a0 + 0x14] = a2\n 20414: a2 = a1 >> 0x18\n 20417: u8 [a0 + 0x13] = a2\n 20420: a2 = a1 >> 0x10\n 20423: u8 [a0 + 0x12] = a2\n 20426: u8 [a0 + 0x10] = a1\n 20429: a1 = a1 >> 0x8\n 20432: u8 [a0 + 0x11] = a1\n 20435: a1 = u64 [sp + 0x50]\n 20438: a1 = reverse a1\n 20440: a2 = a1 >> 0x38\n 20443: u8 [a0 + 0xf] = a2\n 20446: a2 = a1 >> 0x30\n 20449: u8 [a0 + 0xe] = a2\n 20452: a2 = a1 >> 0x28\n 20455: u8 [a0 + 0xd] = a2\n 20458: a2 = a1 >> 0x20\n 20461: u8 [a0 + 0xc] = a2\n 20464: a2 = a1 >> 0x18\n 20467: u8 [a0 + 0xb] = a2\n 20470: a2 = a1 >> 0x10\n 20473: u8 [a0 + 0xa] = a2\n 20476: a2 = u64 [sp + 0x58]\n 20479: a2 = reverse a2\n 20481: u8 [a0 + 0x8] = a1\n 20484: a1 = a1 >> 0x8\n 20487: u8 [a0 + 0x9] = a1\n 20490: u8 [a0] = a2\n 20492: a1 = a2 >> 0x38\n 20495: u8 [a0 + 0x7] = a1\n 20498: a1 = a2 >> 0x30\n 20501: u8 [a0 + 0x6] = a1\n 20504: a1 = a2 >> 0x28\n 20507: u8 [a0 + 0x5] = a1\n 20510: a1 = a2 >> 0x20\n 20513: u8 [a0 + 0x4] = a1\n 20516: a1 = a2 >> 0x18\n 20519: u8 [a0 + 0x3] = a1\n 20522: a1 = a2 >> 0x10\n 20525: u8 [a0 + 0x2] = a1\n 20528: a2 = a2 >> 0x8\n 20531: u8 [a0 + 0x1] = a2\n 20534: a0 = u64 [sp + 0x98]\n 20538: a1 = a0 + 0x20\n 20541: u64 [sp + 0x58] = a1\n 20544: a2 = a1 <u a0\n 20547: a0 = u64 [sp + 0xa0]\n 20551: t1 = a0 + a2\n 20554: a3 = t1 <u a0\n 20557: a3 = a2 if a2 == 0\n 20560: a0 = u64 [sp + 0x60]\n 20563: t2 = a0 + a3\n 20566: a3 = t2 <u a0\n 20569: a0 = u64 [sp + 0xa8]\n 20573: a0 = a0 + a3\n 20576: u64 [sp + 0xa8] = a0\n 20580: a1 = u64 [sp + 0xb0]\n 20584: a1 = a1 + 0x1\n 20587: a3 = a1 <u 0x1\n 20590: a2 = u64 [sp + 0xb8]\n 20594: a2 = a2 + a3\n 20597: s1 = u64 [sp + 0x70]\n 20600: a3 = s1 <u 0x10\n 20603: s1 = s1 + 0x1\n 20606: a5 = s1 <u 0x1\n 20609: a0 = u64 [sp + 0x78]\n 20612: a3 = 0 if a0 != 0\n 20614: a5 = a5 + a0\n 20617: a4 = s1 | a5\n 20620: a4 = a4 <u 0x1\n 20623: a0 = u64 [sp + 0x80]\n 20627: a4 = a4 + a0\n 20630: t0 = a4 <u a0\n 20633: ra = u64 [sp + 0x68]\n 20636: a0 = a0 | ra\n 20639: ra = ra + t0\n 20642: a3 = 0 if a0 != 0\n 20644: u64 [sp + 0xb8] = a2\n 20648: u64 [sp + 0xb0] = a1\n 20652: a1 = a1 | a2\n 20655: a1 = a1 <u 0x1\n 20658: a0 = u64 [sp + 0x88]\n 20662: a1 = a1 + a0\n 20665: a2 = a1 <u a0\n 20668: a0 = u64 [sp + 0x90]\n 20672: a2 = a2 + a0\n 20675: u64 [sp + 0x70] = s1\n 20678: u64 [sp + 0x78] = a5\n 20681: u64 [sp + 0x80] = a4\n 20685: a5 = u64 [sp + 0x58]\n 20688: u64 [sp + 0xa0] = t1\n 20692: s1 = t2\n 20694: jump @326 if a3 != 0\n      : @330 (gas: 9)\n 20698: a5 = u64 [sp + 0x10]\n 20701: a0 = a5 <u 0xfffffffffffffde0\n 20705: a4 = u64 [sp + 0x18]\n 20708: a0 = 0 if a4 != 0\n 20710: a2 = u64 [sp + 0x28]\n 20713: a3 = u64 [sp + 0x20]\n 20716: a1 = a2 | a3\n 20719: a0 = 0 if a1 != 0\n 20721: jump @334 if a0 == 0\n      : @331 (gas: 14)\n 20725: a0 = a5 + 0x220\n 20729: u64 [sp + 0xb8] = a0\n 20733: s1 = a0 <u a5\n 20736: a0 = a4 + s1\n 20739: u64 [sp + 0xb0] = a0\n 20743: a1 = a0 <u a4\n 20746: a1 = s1 if s1 == 0\n 20749: s1 = a2 + a1\n 20752: a0 = s1 <u a2\n 20755: a0 = a0 + a3\n 20758: u64 [sp + 0xa8] = a0\n 20762: a0 = 0x40\n 20765: a1 = 0x20\n 20768: ra = 296, jump @0\n      : @332 [@dyn 148] (gas: 82)\n 20774: a1 = u64 [sp + 0xa8]\n 20778: a1 = reverse a1\n 20780: a2 = reverse s1\n 20782: a3 = u64 [sp + 0xb0]\n 20786: a3 = reverse a3\n 20788: a4 = u64 [sp + 0xb8]\n 20792: a4 = reverse a4\n 20794: u8 [a0 + 0x18] = a4\n 20797: a5 = a4 >> 0x38\n 20800: u8 [a0 + 0x1f] = a5\n 20803: a5 = a4 >> 0x30\n 20806: u8 [a0 + 0x1e] = a5\n 20809: a5 = a4 >> 0x28\n 20812: u8 [a0 + 0x1d] = a5\n 20815: a5 = a4 >> 0x20\n 20818: u8 [a0 + 0x1c] = a5\n 20821: a5 = a4 >> 0x18\n 20824: u8 [a0 + 0x1b] = a5\n 20827: a5 = a4 >> 0x10\n 20830: u8 [a0 + 0x1a] = a5\n 20833: a4 = a4 >> 0x8\n 20836: u8 [a0 + 0x19] = a4\n 20839: u8 [a0 + 0x10] = a3\n 20842: a4 = a3 >> 0x38\n 20845: u8 [a0 + 0x17] = a4\n 20848: a4 = a3 >> 0x30\n 20851: u8 [a0 + 0x16] = a4\n 20854: a4 = a3 >> 0x28\n 20857: u8 [a0 + 0x15] = a4\n 20860: a4 = a3 >> 0x20\n 20863: u8 [a0 + 0x14] = a4\n 20866: a4 = a3 >> 0x18\n 20869: u8 [a0 + 0x13] = a4\n 20872: a4 = a3 >> 0x10\n 20875: u8 [a0 + 0x12] = a4\n 20878: a3 = a3 >> 0x8\n 20881: u8 [a0 + 0x11] = a3\n 20884: u8 [a0 + 0x8] = a2\n 20887: a3 = a2 >> 0x38\n 20890: u8 [a0 + 0xf] = a3\n 20893: a3 = a2 >> 0x30\n 20896: u8 [a0 + 0xe] = a3\n 20899: a3 = a2 >> 0x28\n 20902: u8 [a0 + 0xd] = a3\n 20905: a3 = a2 >> 0x20\n 20908: u8 [a0 + 0xc] = a3\n 20911: a3 = a2 >> 0x18\n 20914: u8 [a0 + 0xb] = a3\n 20917: a3 = a2 >> 0x10\n 20920: u8 [a0 + 0xa] = a3\n 20923: a2 = a2 >> 0x8\n 20926: u8 [a0 + 0x9] = a2\n 20929: u8 [a0] = a1\n 20931: a2 = a1 >> 0x38\n 20934: u8 [a0 + 0x7] = a2\n 20937: a2 = a1 >> 0x30\n 20940: u8 [a0 + 0x6] = a2\n 20943: a2 = a1 >> 0x28\n 20946: u8 [a0 + 0x5] = a2\n 20949: a2 = a1 >> 0x20\n 20952: u8 [a0 + 0x4] = a2\n 20955: a2 = a1 >> 0x18\n 20958: u8 [a0 + 0x3] = a2\n 20961: a2 = a1 >> 0x10\n 20964: u8 [a0 + 0x2] = a2\n 20967: a1 = a1 >> 0x8\n 20970: u8 [a0 + 0x1] = a1\n 20973: a0 = u64 [sp + 0x8]\n 20976: a1 = u64 [sp + 0x10]\n 20979: u64 [a0] = a1\n 20981: a1 = u64 [sp + 0x20]\n 20984: u64 [a0 + 0x18] = a1\n 20987: a1 = u64 [sp + 0x18]\n 20990: u64 [a0 + 0x8] = a1\n 20993: a1 = u64 [sp + 0x28]\n 20996: u64 [a0 + 0x10] = a1\n 20999: sp = s0 + 0xfffffffffffffea0\n 21003: ra = u64 [sp + 0x158]\n 21007: s0 = u64 [sp + 0x150]\n 21011: s1 = u64 [sp + 0x148]\n 21015: sp = sp + 0x160\n 21019: ret\n      : @333 (gas: 1)\n 21021: trap\n      : @334 (gas: 8)\n 21022: u64 [sp + 240] = 0\n 21026: u64 [sp + 232] = 0\n 21030: u64 [sp + 224] = 0\n 21034: a0 = 0x4e487b7100000000\n 21044: a1 = sp + 0xe0\n 21048: u64 [sp + 0xf8] = a0\n 21052: a0 = 0\n 21054: ra = 298, jump @8\n      : @335 [@dyn 149] (gas: 7)\n 21060: u64 [sp + 216] = 0\n 21064: u64 [sp + 208] = 0\n 21068: u64 [sp + 192] = 0x41\n 21073: a0 = 0x4\n 21076: a1 = sp + 0xc0\n 21080: u64 [sp + 200] = 0\n 21084: ra = 300, jump @8\n      : @336 [@dyn 150] (gas: 3)\n 21090: a1 = 0x24\n 21093: a0 = 0\n 21095: ra = 302, jump @0\n      : @337 [@dyn 151] (gas: 6)\n 21101: i32 a1 = a0 + 0\n 21103: a0 = 0x1\n 21106: a2 = 0x24\n 21109: ra = 0x130\n 21113: ecalli 6 // 'seal_return'\n 21115: fallthrough\n      : @338 [@dyn 152] (gas: 18)\n 21116: sp = sp + 0xffffffffffffffa0\n 21119: u64 [sp + 0x58] = ra\n 21122: u64 [sp + 0x50] = s0\n 21125: u64 [sp + 0x48] = s1\n 21128: s0 = sp + 0x60\n 21131: sp = sp & 0xfffffffffffffff0\n 21134: a2 = u64 [a1]\n 21136: a3 = u64 [a1 + 0x8]\n 21139: a4 = u64 [a1 + 0x10]\n 21142: a1 = u64 [a1 + 0x18]\n 21145: s1 = a0\n 21147: u64 [sp + 0x18] = a1\n 21150: u64 [sp + 0x10] = a4\n 21153: u64 [sp + 0x8] = a3\n 21156: a0 = sp + 0x20\n 21159: a1 = sp\n 21161: u64 [sp] = a2\n 21163: ra = 306, jump @324\n      : @339 [@dyn 153] (gas: 14)\n 21169: a0 = u64 [sp + 0x30]\n 21172: a1 = u64 [sp + 0x38]\n 21175: a2 = u64 [sp + 0x20]\n 21178: a3 = u64 [sp + 0x28]\n 21181: u64 [s1 + 0x10] = a0\n 21184: u64 [s1 + 0x18] = a1\n 21187: u64 [s1] = a2\n 21189: u64 [s1 + 0x8] = a3\n 21192: sp = s0 + 0xffffffffffffffa0\n 21195: ra = u64 [sp + 0x58]\n 21198: s0 = u64 [sp + 0x50]\n 21201: s1 = u64 [sp + 0x48]\n 21204: sp = sp + 0x60\n 21207: ret\n      : @340 [@dyn 154] (gas: 12)\n 21209: a1 = u64 [sp + 0x98]\n 21213: a2 = u64 [sp + 0x90]\n 21217: a3 = u64 [sp + 0x88]\n 21221: a0 = u64 [sp + 0x80]\n 21225: a1 = a1 | a3\n 21228: a3 = a0 | a2\n 21231: a3 = a3 | a1\n 21234: a3 = a3 >> 0x20\n 21237: a1 = a1 | a2\n 21240: a1 = a1 << 0x20\n 21243: a1 = a1 | a3\n 21246: jump @347 if a1 != 0\n      : @341 (gas: 4)\n 21250: s1 = i32 [0x20004]\n 21255: i32 a0 = a0 + 0\n 21257: a1 = 0x220\n 21261: ra = 310, jump @0\n      : @342 [@dyn 155] (gas: 10)\n 21267: i32 a0 = a0 + 0\n 21269: a1 = 0x220\n 21273: a2 = s1\n 21275: ecalli 0 // 'call_data_copy'\n 21276: a0 = u64 [sp]\n 21278: a0 = a0 << 0x20\n 21281: s1 = a0 >> 0x20\n 21284: a1 = 0x20\n 21287: a0 = 0\n 21289: ra = 312, jump @0\n      : @343 [@dyn 156] (gas: 58)\n 21295: a1 = reverse s1\n 21297: a2 = u64 [sp + 0x8]\n 21300: a2 = reverse a2\n 21302: a3 = u64 [sp + 0x10]\n 21305: a3 = reverse a3\n 21307: a4 = a3 >> 0x38\n 21310: u8 [a0 + 0x1f] = a4\n 21313: a4 = a3 >> 0x30\n 21316: u8 [a0 + 0x1e] = a4\n 21319: a4 = a3 >> 0x28\n 21322: u8 [a0 + 0x1d] = a4\n 21325: a4 = a3 >> 0x20\n 21328: u8 [a0 + 0x1c] = a4\n 21331: a4 = a3 >> 0x18\n 21334: u8 [a0 + 0x1b] = a4\n 21337: a4 = a3 >> 0x10\n 21340: u8 [a0 + 0x1a] = a4\n 21343: a4 = a3 >> 0x8\n 21346: u8 [a0 + 0x19] = a4\n 21349: u8 [a0 + 0x18] = a3\n 21352: a3 = a2 >> 0x38\n 21355: u8 [a0 + 0x17] = a3\n 21358: a3 = a2 >> 0x30\n 21361: u8 [a0 + 0x16] = a3\n 21364: a3 = a2 >> 0x28\n 21367: u8 [a0 + 0x15] = a3\n 21370: a3 = a2 >> 0x20\n 21373: u8 [a0 + 0x14] = a3\n 21376: a3 = a2 >> 0x18\n 21379: u8 [a0 + 0x13] = a3\n 21382: a3 = a2 >> 0x10\n 21385: u8 [a0 + 0x12] = a3\n 21388: a3 = a2 >> 0x8\n 21391: u8 [a0 + 0x11] = a3\n 21394: u8 [a0 + 0x10] = a2\n 21397: a2 = a1 >> 0x38\n 21400: u8 [a0 + 0xf] = a2\n 21403: a2 = a1 >> 0x30\n 21406: u8 [a0 + 0xe] = a2\n 21409: a2 = a1 >> 0x28\n 21412: u8 [a0 + 0xd] = a2\n 21415: a2 = a1 >> 0x20\n 21418: u8 [a0 + 0xc] = a2\n 21421: u8 [a0 + 11] = 0\n 21424: u8 [a0 + 10] = 0\n 21427: u8 [a0 + 9] = 0\n 21430: u8 [a0 + 0x8] = a1\n 21433: u8 [a0 + 7] = 0\n 21436: u8 [a0 + 6] = 0\n 21439: u8 [a0 + 5] = 0\n 21442: u8 [a0 + 4] = 0\n 21445: u8 [a0 + 3] = 0\n 21448: u8 [a0 + 2] = 0\n 21451: u8 [a0 + 1] = 0\n 21454: u8 [a0 + 0] = 0\n 21456: a0 = 0x20\n 21459: a1 = 0x20\n 21462: ra = 314, jump @0\n      : @344 [@dyn 157] (gas: 35)\n 21468: u8 [a0 + 31] = 0\n 21471: u8 [a0 + 30] = 0\n 21474: u8 [a0 + 29] = 0\n 21477: u8 [a0 + 28] = 0\n 21480: u8 [a0 + 27] = 0\n 21483: u8 [a0 + 26] = 0\n 21486: u8 [a0 + 25] = 0\n 21489: u8 [a0 + 24] = 0\n 21492: u8 [a0 + 23] = 0\n 21495: u8 [a0 + 22] = 0\n 21498: u8 [a0 + 21] = 0\n 21501: u8 [a0 + 20] = 0\n 21504: u8 [a0 + 19] = 0\n 21507: u8 [a0 + 18] = 0\n 21510: u8 [a0 + 17] = 0\n 21513: u8 [a0 + 16] = 0\n 21516: u8 [a0 + 15] = 0\n 21519: u8 [a0 + 14] = 0\n 21522: u8 [a0 + 13] = 0\n 21525: u8 [a0 + 12] = 0\n 21528: u8 [a0 + 11] = 0\n 21531: u8 [a0 + 10] = 0\n 21534: u8 [a0 + 9] = 0\n 21537: u8 [a0 + 8] = 0\n 21540: u8 [a0 + 7] = 0\n 21543: u8 [a0 + 6] = 0\n 21546: u8 [a0 + 5] = 0\n 21549: u8 [a0 + 4] = 0\n 21552: u8 [a0 + 3] = 0\n 21555: u8 [a0 + 2] = 0\n 21558: u8 [a0 + 1] = 0\n 21561: u8 [a0 + 0] = 0\n 21563: a1 = 0x40\n 21566: a0 = 0\n 21568: ra = 316, jump @0\n      : @345 [@dyn 158] (gas: 19)\n 21574: i32 a0 = a0 + 0\n 21576: i32 a2 = sp + 0xa0\n 21580: a1 = 0x40\n 21583: ecalli 5 // 'hash_keccak_256'\n 21585: a0 = u64 [sp + 0xb8]\n 21589: a1 = u64 [sp + 0xb0]\n 21593: a2 = u64 [sp + 0xa8]\n 21597: a3 = u64 [sp + 0xa0]\n 21601: a4 = reverse a0\n 21603: a0 = reverse a1\n 21605: a1 = reverse a2\n 21607: a2 = reverse a3\n 21609: u64 [sp + 0x38] = a2\n 21612: u64 [sp + 0x30] = a1\n 21615: u64 [sp + 0x28] = a0\n 21618: a0 = sp + 0x40\n 21621: a1 = sp + 0x20\n 21624: u64 [sp + 0x20] = a4\n 21627: ra = 318, jump @324\n      : @346 [@dyn 159] (gas: 15)\n 21633: a0 = u64 [sp + 0x50]\n 21636: a1 = u64 [sp + 0x58]\n 21639: a2 = u64 [sp + 0x40]\n 21642: a3 = u64 [sp + 0x48]\n 21645: a4 = u64 [sp + 0x18]\n 21648: u64 [a4 + 0x10] = a0\n 21651: u64 [a4 + 0x18] = a1\n 21654: u64 [a4] = a2\n 21656: u64 [a4 + 0x8] = a3\n 21659: sp = s0 + 0xffffffffffffff20\n 21663: ra = u64 [sp + 0xd8]\n 21667: s0 = u64 [sp + 0xd0]\n 21671: s1 = u64 [sp + 0xc8]\n 21675: sp = sp + 0xe0\n 21679: ret\n      : @347 (gas: 1)\n 21681: trap\n      : @348 (gas: 17)\n 21682: sp = sp + 0xffffffffffffffa0\n 21685: u64 [sp + 0x58] = ra\n 21688: u64 [sp + 0x50] = s0\n 21691: u64 [sp + 0x48] = s1\n 21694: a3 = u64 [a1 + 0x18]\n 21697: a4 = u64 [a1 + 0x10]\n 21700: a5 = u64 [a1 + 0x8]\n 21703: s1 = u64 [a1]\n 21705: a1 = a5 | a3\n 21708: a2 = s1 | a4\n 21711: a2 = a2 | a1\n 21714: a2 = a2 >> 0x20\n 21717: a1 = a1 | a4\n 21720: a1 = a1 << 0x20\n 21723: a1 = a1 | a2\n 21726: u64 [sp + 0x28] = a0\n 21729: jump @355 if a1 != 0\n      : @349 (gas: 19)\n 21733: a0 = s1 + 0x20\n 21736: u64 [sp + 0x30] = a0\n 21739: a0 = a0 <u s1\n 21742: a1 = a5 + a0\n 21745: u64 [sp + 0x40] = a1\n 21748: u64 [sp + 0x8] = a5\n 21751: s0 = a1 <u a5\n 21754: s0 = a0 if a0 == 0\n 21757: s0 = s0 + a4\n 21760: u64 [sp + 0x10] = a4\n 21763: a0 = s0 <u a4\n 21766: u64 [sp + 0x18] = a3\n 21769: a0 = a0 + a3\n 21772: u64 [sp + 0x38] = a0\n 21775: u64 [sp] = s1\n 21777: i32 a0 = s1 + 0\n 21779: a1 = 0x20\n 21782: s1 = 0x20\n 21785: ra = 320, jump @0\n      : @350 [@dyn 160] (gas: 45)\n 21791: u8 [a0 + 0x1f] = s1\n 21794: a1 = u64 [sp + 0x30]\n 21797: s1 = a1\n 21799: a1 = a1 | s0\n 21802: a2 = u64 [sp + 0x40]\n 21805: a4 = u64 [sp + 0x38]\n 21808: a2 = a2 | a4\n 21811: a1 = a1 | a2\n 21814: a1 = a1 >> 0x20\n 21817: u64 [sp + 0x20] = s0\n 21820: a2 = a2 | s0\n 21823: a2 = a2 << 0x20\n 21826: a1 = a1 | a2\n 21829: u8 [a0 + 30] = 0\n 21832: u8 [a0 + 29] = 0\n 21835: u8 [a0 + 28] = 0\n 21838: u8 [a0 + 27] = 0\n 21841: u8 [a0 + 26] = 0\n 21844: u8 [a0 + 25] = 0\n 21847: u8 [a0 + 24] = 0\n 21850: u8 [a0 + 23] = 0\n 21853: u8 [a0 + 22] = 0\n 21856: u8 [a0 + 21] = 0\n 21859: u8 [a0 + 20] = 0\n 21862: u8 [a0 + 19] = 0\n 21865: u8 [a0 + 18] = 0\n 21868: u8 [a0 + 17] = 0\n 21871: u8 [a0 + 16] = 0\n 21874: u8 [a0 + 15] = 0\n 21877: u8 [a0 + 14] = 0\n 21880: u8 [a0 + 13] = 0\n 21883: u8 [a0 + 12] = 0\n 21886: u8 [a0 + 11] = 0\n 21889: u8 [a0 + 10] = 0\n 21892: u8 [a0 + 9] = 0\n 21895: u8 [a0 + 8] = 0\n 21898: u8 [a0 + 7] = 0\n 21901: u8 [a0 + 6] = 0\n 21904: u8 [a0 + 5] = 0\n 21907: u8 [a0 + 4] = 0\n 21910: u8 [a0 + 3] = 0\n 21913: u8 [a0 + 2] = 0\n 21916: u8 [a0 + 1] = 0\n 21919: u8 [a0 + 0] = 0\n 21921: jump @355 if a1 != 0\n      : @351 (gas: 4)\n 21925: i32 s0 = s1 + 0\n 21927: a1 = 0x20\n 21930: a0 = s0\n 21932: ra = 322, jump @0\n      : @352 [@dyn 161] (gas: 41)\n 21938: u8 [a0 + 31] = 0xf\n 21942: u8 [a0 + 30] = 0\n 21945: u8 [a0 + 29] = 0\n 21948: u8 [a0 + 28] = 0\n 21951: u8 [a0 + 27] = 0\n 21954: u8 [a0 + 26] = 0\n 21957: u8 [a0 + 25] = 0\n 21960: u8 [a0 + 24] = 0\n 21963: u8 [a0 + 23] = 0\n 21966: u8 [a0 + 22] = 0\n 21969: u8 [a0 + 21] = 0\n 21972: u8 [a0 + 20] = 0\n 21975: u8 [a0 + 19] = 0\n 21978: u8 [a0 + 18] = 0\n 21981: u8 [a0 + 17] = 0\n 21984: u8 [a0 + 16] = 0\n 21987: u8 [a0 + 15] = 0\n 21990: u8 [a0 + 14] = 0\n 21993: u8 [a0 + 13] = 0\n 21996: u8 [a0 + 12] = 0\n 21999: u8 [a0 + 11] = 0\n 22002: u8 [a0 + 10] = 0\n 22005: u8 [a0 + 9] = 0\n 22008: u8 [a0 + 8] = 0\n 22011: u8 [a0 + 7] = 0\n 22014: u8 [a0 + 6] = 0\n 22017: u8 [a0 + 5] = 0\n 22020: u8 [a0 + 4] = 0\n 22023: u8 [a0 + 3] = 0\n 22026: u8 [a0 + 2] = 0\n 22029: u8 [a0 + 1] = 0\n 22032: a1 = u64 [sp + 0x20]\n 22035: a2 = u64 [sp + 0x38]\n 22038: a1 = a1 | a2\n 22041: a2 = 0xffffffe0\n 22051: a2 = s1 <u a2\n 22054: a3 = u64 [sp + 0x40]\n 22057: a2 = 0 if a3 != 0\n 22059: a2 = 0 if a1 != 0\n 22061: u8 [a0 + 0] = 0\n 22063: jump @355 if a2 == 0\n      : @353 (gas: 3)\n 22067: i32 a0 = s0 + 0x20\n 22070: a1 = 0x20\n 22073: ra = 324, jump @0\n      : @354 [@dyn 162] (gas: 54)\n 22079: u8 [a0 + 31] = 0\n 22082: u8 [a0 + 30] = 0\n 22085: u8 [a0 + 29] = 0\n 22088: u8 [a0 + 28] = 0\n 22091: u8 [a0 + 27] = 0\n 22094: u8 [a0 + 26] = 0\n 22097: u8 [a0 + 25] = 0\n 22100: u8 [a0 + 24] = 0\n 22103: u8 [a0 + 23] = 0\n 22106: u8 [a0 + 22] = 0\n 22109: u8 [a0 + 21] = 0\n 22112: u8 [a0 + 20] = 0\n 22115: u8 [a0 + 19] = 0\n 22118: u8 [a0 + 18] = 0\n 22121: u8 [a0 + 17] = 0\n 22124: u8 [a0 + 16] = 0\n 22127: u8 [a0 + 15] = 0\n 22130: u8 [a0 + 14] = 0x73\n 22134: u8 [a0 + 13] = 0x73\n 22138: u8 [a0 + 12] = 0x65\n 22142: u8 [a0 + 11] = 0x72\n 22146: u8 [a0 + 10] = 0x64\n 22150: u8 [a0 + 9] = 0x64\n 22154: u8 [a0 + 8] = 0x61\n 22158: u8 [a0 + 7] = 0x20\n 22162: u8 [a0 + 6] = 0x64\n 22166: u8 [a0 + 5] = 0x69\n 22170: u8 [a0 + 4] = 0x6c\n 22174: u8 [a0 + 3] = 0x61\n 22178: u8 [a0 + 2] = 0x76\n 22182: u8 [a0 + 1] = 0x6e\n 22186: u8 [a0 + 0] = 0x49\n 22189: a1 = u64 [sp]\n 22191: a0 = a1 + 0x60\n 22194: a1 = a0 <u a1\n 22197: a3 = u64 [sp + 0x8]\n 22200: a2 = a3 + a1\n 22203: a3 = a2 <u a3\n 22206: a3 = a1 if a1 == 0\n 22209: a1 = u64 [sp + 0x10]\n 22212: a3 = a3 + a1\n 22215: a1 = a3 <u a1\n 22218: a4 = u64 [sp + 0x18]\n 22221: a1 = a1 + a4\n 22224: a4 = u64 [sp + 0x28]\n 22227: u64 [a4] = a0\n 22229: u64 [a4 + 0x8] = a2\n 22232: u64 [a4 + 0x10] = a3\n 22235: u64 [a4 + 0x18] = a1\n 22238: ra = u64 [sp + 0x58]\n 22241: s0 = u64 [sp + 0x50]\n 22244: s1 = u64 [sp + 0x48]\n 22247: sp = sp + 0x60\n 22250: ret\n      : @355 (gas: 1)\n 22252: trap\n      : @356 (gas: 12)\n 22253: sp = sp + 0xfffffffffffffe80\n 22257: u64 [sp + 0x178] = ra\n 22261: u64 [sp + 0x170] = s0\n 22265: u64 [sp + 0x168] = s1\n 22269: s0 = sp + 0x180\n 22273: sp = sp & 0xffffffffffffffe0\n 22276: a3 = u32 [a0 + 0x10]\n 22279: a2 = u64 [a0]\n 22281: s1 = u64 [a0 + 0x8]\n 22284: a0 = a2 | a3\n 22287: a0 = a0 | s1\n 22290: jump @364 if a0 == 0\n      : @357 (gas: 15)\n 22294: u64 [sp + 0x10] = a3\n 22297: u64 [sp + 0x18] = a2\n 22300: a2 = u64 [a1 + 0x18]\n 22303: a0 = u64 [a1]\n 22305: a3 = u64 [a1 + 0x8]\n 22308: a1 = u64 [a1 + 0x10]\n 22311: u64 [sp + 0x28] = a0\n 22314: a0 = a0 <u 0x11\n 22317: u64 [sp + 0x20] = a3\n 22320: a0 = 0 if a3 != 0\n 22322: u64 [sp + 0x38] = a2\n 22325: u64 [sp + 0x30] = a1\n 22328: a1 = a1 | a2\n 22331: a0 = 0 if a1 != 0\n 22333: jump @369 if a0 == 0\n      : @358 (gas: 3)\n 22337: a1 = 0x20\n 22340: a0 = 0\n 22342: ra = 326, jump @0\n      : @359 [@dyn 163] (gas: 58)\n 22348: a1 = u64 [sp + 0x10]\n 22351: a1 = reverse a1\n 22353: a2 = reverse s1\n 22355: a3 = u64 [sp + 0x18]\n 22358: a3 = reverse a3\n 22360: a4 = a3 >> 0x38\n 22363: u8 [a0 + 0x1f] = a4\n 22366: a4 = a3 >> 0x30\n 22369: u8 [a0 + 0x1e] = a4\n 22372: a4 = a3 >> 0x28\n 22375: u8 [a0 + 0x1d] = a4\n 22378: a4 = a3 >> 0x20\n 22381: u8 [a0 + 0x1c] = a4\n 22384: a4 = a3 >> 0x18\n 22387: u8 [a0 + 0x1b] = a4\n 22390: a4 = a3 >> 0x10\n 22393: u8 [a0 + 0x1a] = a4\n 22396: a4 = a3 >> 0x8\n 22399: u8 [a0 + 0x19] = a4\n 22402: u8 [a0 + 0x18] = a3\n 22405: u8 [a0 + 0x10] = a2\n 22408: u8 [a0 + 11] = 0\n 22411: u8 [a0 + 10] = 0\n 22414: u8 [a0 + 9] = 0\n 22417: u8 [a0 + 7] = 0\n 22420: u8 [a0 + 6] = 0\n 22423: u8 [a0 + 5] = 0\n 22426: u8 [a0 + 4] = 0\n 22429: u8 [a0 + 3] = 0\n 22432: u8 [a0 + 2] = 0\n 22435: u8 [a0 + 1] = 0\n 22438: u8 [a0 + 0] = 0\n 22440: a3 = a2 >> 0x38\n 22443: u8 [a0 + 0x17] = a3\n 22446: a3 = a2 >> 0x30\n 22449: u8 [a0 + 0x16] = a3\n 22452: a3 = a2 >> 0x28\n 22455: u8 [a0 + 0x15] = a3\n 22458: a3 = a2 >> 0x20\n 22461: u8 [a0 + 0x14] = a3\n 22464: a3 = a2 >> 0x18\n 22467: u8 [a0 + 0x13] = a3\n 22470: a3 = a2 >> 0x10\n 22473: u8 [a0 + 0x12] = a3\n 22476: a2 = a2 >> 0x8\n 22479: u8 [a0 + 0x11] = a2\n 22482: u8 [a0 + 0x8] = a1\n 22485: a2 = a1 >> 0x38\n 22488: u8 [a0 + 0xf] = a2\n 22491: a2 = a1 >> 0x30\n 22494: u8 [a0 + 0xe] = a2\n 22497: a2 = a1 >> 0x28\n 22500: u8 [a0 + 0xd] = a2\n 22503: a1 = a1 >> 0x20\n 22506: u8 [a0 + 0xc] = a1\n 22509: a0 = 0x20\n 22512: a1 = 0x20\n 22515: ra = 328, jump @0\n      : @360 [@dyn 164] (gas: 35)\n 22521: u8 [a0 + 31] = 0\n 22524: u8 [a0 + 30] = 0\n 22527: u8 [a0 + 29] = 0\n 22530: u8 [a0 + 28] = 0\n 22533: u8 [a0 + 27] = 0\n 22536: u8 [a0 + 26] = 0\n 22539: u8 [a0 + 25] = 0\n 22542: u8 [a0 + 24] = 0\n 22545: u8 [a0 + 23] = 0\n 22548: u8 [a0 + 22] = 0\n 22551: u8 [a0 + 21] = 0\n 22554: u8 [a0 + 20] = 0\n 22557: u8 [a0 + 19] = 0\n 22560: u8 [a0 + 18] = 0\n 22563: u8 [a0 + 17] = 0\n 22566: u8 [a0 + 16] = 0\n 22569: u8 [a0 + 15] = 0\n 22572: u8 [a0 + 14] = 0\n 22575: u8 [a0 + 13] = 0\n 22578: u8 [a0 + 12] = 0\n 22581: u8 [a0 + 11] = 0\n 22584: u8 [a0 + 10] = 0\n 22587: u8 [a0 + 9] = 0\n 22590: u8 [a0 + 8] = 0\n 22593: u8 [a0 + 7] = 0\n 22596: u8 [a0 + 6] = 0\n 22599: u8 [a0 + 5] = 0\n 22602: u8 [a0 + 4] = 0\n 22605: u8 [a0 + 3] = 0\n 22608: u8 [a0 + 2] = 0\n 22611: u8 [a0 + 1] = 0\n 22614: u8 [a0 + 0] = 0\n 22616: a1 = 0x40\n 22619: a0 = 0\n 22621: ra = 330, jump @0\n      : @361 [@dyn 165] (gas: 50)\n 22627: i32 a0 = a0 + 0\n 22629: i32 a2 = sp + 0x140\n 22633: a1 = 0x40\n 22636: ecalli 5 // 'hash_keccak_256'\n 22638: a0 = u64 [sp + 0x140]\n 22642: a1 = u64 [sp + 0x148]\n 22646: a2 = u64 [sp + 0x158]\n 22650: a3 = u64 [sp + 0x150]\n 22654: a0 = reverse a0\n 22656: a1 = reverse a1\n 22658: a2 = reverse a2\n 22660: a3 = reverse a3\n 22662: a4 = u64 [sp + 0x20]\n 22665: a4 = a4 + a3\n 22668: a5 = u64 [sp + 0x28]\n 22671: a5 = a5 + a2\n 22674: a2 = a5 <u a2\n 22677: s1 = a4 + a2\n 22680: a4 = s1 ^ a3\n 22683: a3 = s1 <u a3\n 22686: a3 = a2 if a4 == 0\n 22689: a2 = u64 [sp + 0x30]\n 22692: a2 = a2 + a1\n 22695: a3 = a3 + a2\n 22698: t0 = a3 <u a2\n 22701: a4 = u64 [sp + 0x38]\n 22704: a0 = a0 + a4\n 22707: a1 = a2 <u a1\n 22710: a0 = a0 + a1\n 22713: a0 = a0 + t0\n 22716: u64 [sp + 0x30] = s1\n 22719: u64 [sp + 0x128] = s1\n 22723: u64 [sp + 0x38] = a5\n 22726: u64 [sp + 0x120] = a5\n 22730: u64 [sp + 0x28] = a3\n 22733: u64 [sp + 0x130] = a3\n 22737: u64 [sp + 0x20] = a0\n 22740: u64 [sp + 0x138] = a0\n 22744: u64 [sp + 344] = 0\n 22748: u64 [sp + 336] = 0\n 22752: u64 [sp + 328] = 0\n 22756: u64 [sp + 320] = 0\n 22760: u32 [sp + 256] = 0x20\n 22765: i32 a1 = sp + 0x120\n 22769: i32 a3 = sp + 0x140\n 22773: i32 a4 = sp + 0x100\n 22777: a2 = 0xffffffffffffffff\n 22780: a0 = 0\n 22782: ecalli 4 // 'get_storage'\n 22784: fallthrough\n      : @362 (gas: 19)\n 22785: s1 = u64 [sp + 0x140]\n 22789: a0 = u64 [sp + 0x158]\n 22793: a1 = u64 [sp + 0x148]\n 22797: a2 = u64 [sp + 0x150]\n 22801: s1 = s1 + 0x1\n 22804: a3 = s1 <u 0x1\n 22807: a3 = a3 + a1\n 22810: a1 = s1 | a3\n 22813: a1 = a1 <u 0x1\n 22816: a4 = a2 + a1\n 22819: a1 = a4 <u a2\n 22822: a0 = a0 + a1\n 22825: u64 [sp + 0x18] = a3\n 22828: u64 [sp + 0x8] = a0\n 22831: a0 = a0 | a3\n 22834: u64 [sp + 0x10] = a4\n 22837: a1 = s1 | a4\n 22840: a0 = a0 | a1\n 22843: jump @376 if a0 == 0\n      : @363 (gas: 46)\n 22847: a0 = u64 [sp + 0x28]\n 22850: u64 [sp + 0x130] = a0\n 22854: a0 = u64 [sp + 0x30]\n 22857: u64 [sp + 0x128] = a0\n 22861: a0 = u64 [sp + 0x38]\n 22864: u64 [sp + 0x120] = a0\n 22868: a0 = u64 [sp + 0x20]\n 22871: u64 [sp + 0x138] = a0\n 22875: u64 [sp + 344] = 0\n 22879: u64 [sp + 336] = 0\n 22883: u64 [sp + 328] = 0\n 22887: u64 [sp + 320] = 0\n 22891: u32 [sp + 256] = 0x20\n 22896: i32 a1 = sp + 0x120\n 22900: i32 a3 = sp + 0x140\n 22904: i32 a4 = sp + 0x100\n 22908: a2 = 0xffffffffffffffff\n 22911: a0 = 0\n 22913: ecalli 4 // 'get_storage'\n 22915: a0 = u64 [sp + 0x20]\n 22918: u64 [sp + 0x138] = a0\n 22922: a0 = u64 [sp + 0x28]\n 22925: u64 [sp + 0x130] = a0\n 22929: a0 = u64 [sp + 0x30]\n 22932: u64 [sp + 0x128] = a0\n 22936: a0 = u64 [sp + 0x38]\n 22939: u64 [sp + 0x120] = a0\n 22943: a0 = u64 [sp + 0x8]\n 22946: u64 [sp + 0x158] = a0\n 22950: a0 = u64 [sp + 0x10]\n 22953: u64 [sp + 0x150] = a0\n 22957: a0 = u64 [sp + 0x18]\n 22960: u64 [sp + 0x148] = a0\n 22964: u64 [sp + 0x140] = s1\n 22968: i32 a1 = sp + 0x120\n 22972: i32 a3 = sp + 0x140\n 22976: a2 = 0xffffffffffffffff\n 22979: a4 = 0x20\n 22982: a0 = 0\n 22984: ecalli 8 // 'set_storage'\n 22986: sp = s0 + 0xfffffffffffffe80\n 22990: ra = u64 [sp + 0x178]\n 22994: s0 = u64 [sp + 0x170]\n 22998: s1 = u64 [sp + 0x168]\n 23002: sp = sp + 0x180\n 23006: ret\n      : @364 (gas: 3)\n 23008: a0 = 0x40\n 23011: a1 = 0x20\n 23014: ra = 332, jump @0\n      : @365 [@dyn 166] (gas: 103)\n 23020: a1 = u8 [a0 + 0x11]\n 23023: a2 = u8 [a0 + 0x10]\n 23026: a3 = u8 [a0 + 0x12]\n 23029: a4 = u8 [a0 + 0x13]\n 23032: a1 = a1 << 0x8\n 23035: a1 = a1 | a2\n 23038: a3 = a3 << 0x10\n 23041: a4 = a4 << 0x18\n 23044: a3 = a3 | a4\n 23047: a1 = a1 | a3\n 23050: a2 = u8 [a0 + 0x15]\n 23053: a3 = u8 [a0 + 0x14]\n 23056: a4 = u8 [a0 + 0x16]\n 23059: a5 = u8 [a0 + 0x17]\n 23062: a2 = a2 << 0x8\n 23065: a2 = a2 | a3\n 23068: a4 = a4 << 0x10\n 23071: a5 = a5 << 0x18\n 23074: a4 = a4 | a5\n 23077: a2 = a2 | a4\n 23080: a2 = a2 << 0x20\n 23083: t0 = a2 | a1\n 23086: a2 = u8 [a0 + 0x1]\n 23089: a3 = u8 [a0]\n 23091: a4 = u8 [a0 + 0x2]\n 23094: a5 = u8 [a0 + 0x3]\n 23097: a2 = a2 << 0x8\n 23100: a2 = a2 | a3\n 23103: a4 = a4 << 0x10\n 23106: a5 = a5 << 0x18\n 23109: a4 = a4 | a5\n 23112: a2 = a2 | a4\n 23115: a3 = u8 [a0 + 0x5]\n 23118: a4 = u8 [a0 + 0x4]\n 23121: a5 = u8 [a0 + 0x6]\n 23124: s1 = u8 [a0 + 0x7]\n 23127: a3 = a3 << 0x8\n 23130: a3 = a3 | a4\n 23133: a5 = a5 << 0x10\n 23136: s1 = s1 << 0x18\n 23139: a5 = a5 | s1\n 23142: a3 = a3 | a5\n 23145: a3 = a3 << 0x20\n 23148: a2 = a2 | a3\n 23151: a3 = u8 [a0 + 0x19]\n 23154: a4 = u8 [a0 + 0x18]\n 23157: a5 = u8 [a0 + 0x1a]\n 23160: s1 = u8 [a0 + 0x1b]\n 23163: a3 = a3 << 0x8\n 23166: a3 = a3 | a4\n 23169: a5 = a5 << 0x10\n 23172: s1 = s1 << 0x18\n 23175: a5 = a5 | s1\n 23178: a3 = a3 | a5\n 23181: a4 = u8 [a0 + 0x1d]\n 23184: a5 = u8 [a0 + 0x1c]\n 23187: s1 = u8 [a0 + 0x1e]\n 23190: a1 = u8 [a0 + 0x1f]\n 23193: a4 = a4 << 0x8\n 23196: a4 = a4 | a5\n 23199: s1 = s1 << 0x10\n 23202: a1 = a1 << 0x18\n 23205: a1 = a1 | s1\n 23208: a1 = a1 | a4\n 23211: a1 = a1 << 0x20\n 23214: a3 = a3 | a1\n 23217: a1 = u8 [a0 + 0x9]\n 23220: a4 = u8 [a0 + 0x8]\n 23223: a5 = u8 [a0 + 0xa]\n 23226: s1 = u8 [a0 + 0xb]\n 23229: a1 = a1 << 0x8\n 23232: a1 = a1 | a4\n 23235: a5 = a5 << 0x10\n 23238: s1 = s1 << 0x18\n 23241: a5 = a5 | s1\n 23244: a1 = a1 | a5\n 23247: a4 = u8 [a0 + 0xd]\n 23250: a5 = u8 [a0 + 0xc]\n 23253: s1 = u8 [a0 + 0xe]\n 23256: a0 = u8 [a0 + 0xf]\n 23259: a4 = a4 << 0x8\n 23262: a4 = a4 | a5\n 23265: s1 = s1 << 0x10\n 23268: a0 = a0 << 0x18\n 23271: a0 = a0 | s1\n 23274: a0 = a0 | a4\n 23277: a0 = a0 << 0x20\n 23280: a0 = a0 | a1\n 23283: s1 = reverse a0\n 23285: a1 = reverse a3\n 23287: a2 = reverse a2\n 23289: a0 = reverse t0\n 23291: u64 [sp + 0x38] = a0\n 23294: u64 [sp + 0x30] = a2\n 23297: a0 = a0 | a2\n 23300: a2 = a1\n 23302: a1 = a1 | s1\n 23305: a1 = a1 | a0\n 23308: a1 = a1 >> 0x20\n 23311: a0 = a0 | s1\n 23314: a0 = a0 << 0x20\n 23317: a0 = a0 | a1\n 23320: jump @375 if a0 != 0\n      : @366 (gas: 5)\n 23324: u64 [sp + 0x28] = a2\n 23327: i32 a0 = a2 + 0\n 23329: a1 = 0x20\n 23332: u64 [sp + 0x20] = a0\n 23335: ra = 334, jump @0\n      : @367 [@dyn 167] (gas: 50)\n 23341: u8 [a0 + 31] = 0\n 23344: u8 [a0 + 30] = 0\n 23347: u8 [a0 + 29] = 0\n 23350: u8 [a0 + 28] = 0\n 23353: u8 [a0 + 27] = 0\n 23356: u8 [a0 + 26] = 0\n 23359: u8 [a0 + 25] = 0\n 23362: u8 [a0 + 24] = 0\n 23365: u8 [a0 + 23] = 0\n 23368: u8 [a0 + 22] = 0\n 23371: u8 [a0 + 21] = 0\n 23374: u8 [a0 + 20] = 0\n 23377: u8 [a0 + 19] = 0\n 23380: u8 [a0 + 18] = 0\n 23383: u8 [a0 + 17] = 0\n 23386: u8 [a0 + 16] = 0\n 23389: u8 [a0 + 15] = 0\n 23392: u8 [a0 + 14] = 0\n 23395: u8 [a0 + 13] = 0\n 23398: u8 [a0 + 12] = 0\n 23401: u8 [a0 + 11] = 0\n 23404: u8 [a0 + 10] = 0\n 23407: u8 [a0 + 9] = 0\n 23410: u8 [a0 + 8] = 0\n 23413: u8 [a0 + 7] = 0\n 23416: u8 [a0 + 6] = 0\n 23419: u8 [a0 + 5] = 0\n 23422: u8 [a0 + 4] = 0\n 23425: u8 [a0 + 3] = 0xa0\n 23430: u8 [a0 + 2] = 0x79\n 23434: u8 [a0 + 1] = 0xc3\n 23439: u8 [a0 + 0] = 0x8\n 23442: a1 = u64 [sp + 0x28]\n 23445: a0 = a1 + 0x4\n 23448: a1 = a0 <u a1\n 23451: a3 = u64 [sp + 0x38]\n 23454: a2 = a3 + a1\n 23457: a3 = a2 <u a3\n 23460: a3 = a1 if a1 == 0\n 23463: a3 = a3 + s1\n 23466: a1 = a3 <u s1\n 23469: a4 = u64 [sp + 0x30]\n 23472: a4 = a4 + a1\n 23475: u64 [sp + 0x48] = a2\n 23478: u64 [sp + 0x40] = a0\n 23481: u64 [sp + 0x50] = a3\n 23484: a0 = sp + 0x60\n 23487: a1 = sp + 0x40\n 23490: u64 [sp + 0x58] = a4\n 23493: ra = 336, jump @348\n      : @368 [@dyn 168] (gas: 5)\n 23499: a0 = u64 [sp + 0x68]\n 23502: t0 = u64 [sp + 0x78]\n 23505: t1 = u64 [sp + 0x60]\n 23508: a3 = u64 [sp + 0x70]\n 23511: jump @374\n      : @369 (gas: 3)\n 23514: a0 = 0x40\n 23517: a1 = 0x20\n 23520: ra = 338, jump @0\n      : @370 [@dyn 169] (gas: 103)\n 23526: a1 = u8 [a0 + 0x11]\n 23529: a2 = u8 [a0 + 0x10]\n 23532: a3 = u8 [a0 + 0x12]\n 23535: a4 = u8 [a0 + 0x13]\n 23538: a1 = a1 << 0x8\n 23541: a1 = a1 | a2\n 23544: a3 = a3 << 0x10\n 23547: a4 = a4 << 0x18\n 23550: a3 = a3 | a4\n 23553: a1 = a1 | a3\n 23556: a2 = u8 [a0 + 0x15]\n 23559: a3 = u8 [a0 + 0x14]\n 23562: a4 = u8 [a0 + 0x16]\n 23565: a5 = u8 [a0 + 0x17]\n 23568: a2 = a2 << 0x8\n 23571: a2 = a2 | a3\n 23574: a4 = a4 << 0x10\n 23577: a5 = a5 << 0x18\n 23580: a4 = a4 | a5\n 23583: a2 = a2 | a4\n 23586: a2 = a2 << 0x20\n 23589: t0 = a2 | a1\n 23592: a2 = u8 [a0 + 0x1]\n 23595: a3 = u8 [a0]\n 23597: a4 = u8 [a0 + 0x2]\n 23600: a5 = u8 [a0 + 0x3]\n 23603: a2 = a2 << 0x8\n 23606: a2 = a2 | a3\n 23609: a4 = a4 << 0x10\n 23612: a5 = a5 << 0x18\n 23615: a4 = a4 | a5\n 23618: a2 = a2 | a4\n 23621: a3 = u8 [a0 + 0x5]\n 23624: a4 = u8 [a0 + 0x4]\n 23627: a5 = u8 [a0 + 0x6]\n 23630: s1 = u8 [a0 + 0x7]\n 23633: a3 = a3 << 0x8\n 23636: a3 = a3 | a4\n 23639: a5 = a5 << 0x10\n 23642: s1 = s1 << 0x18\n 23645: a5 = a5 | s1\n 23648: a3 = a3 | a5\n 23651: a3 = a3 << 0x20\n 23654: a2 = a2 | a3\n 23657: a3 = u8 [a0 + 0x19]\n 23660: a4 = u8 [a0 + 0x18]\n 23663: a5 = u8 [a0 + 0x1a]\n 23666: s1 = u8 [a0 + 0x1b]\n 23669: a3 = a3 << 0x8\n 23672: a3 = a3 | a4\n 23675: a5 = a5 << 0x10\n 23678: s1 = s1 << 0x18\n 23681: a5 = a5 | s1\n 23684: a3 = a3 | a5\n 23687: a4 = u8 [a0 + 0x1d]\n 23690: a5 = u8 [a0 + 0x1c]\n 23693: s1 = u8 [a0 + 0x1e]\n 23696: a1 = u8 [a0 + 0x1f]\n 23699: a4 = a4 << 0x8\n 23702: a4 = a4 | a5\n 23705: s1 = s1 << 0x10\n 23708: a1 = a1 << 0x18\n 23711: a1 = a1 | s1\n 23714: a1 = a1 | a4\n 23717: a1 = a1 << 0x20\n 23720: a3 = a3 | a1\n 23723: a1 = u8 [a0 + 0x9]\n 23726: a4 = u8 [a0 + 0x8]\n 23729: a5 = u8 [a0 + 0xa]\n 23732: s1 = u8 [a0 + 0xb]\n 23735: a1 = a1 << 0x8\n 23738: a1 = a1 | a4\n 23741: a5 = a5 << 0x10\n 23744: s1 = s1 << 0x18\n 23747: a5 = a5 | s1\n 23750: a1 = a1 | a5\n 23753: a4 = u8 [a0 + 0xd]\n 23756: a5 = u8 [a0 + 0xc]\n 23759: s1 = u8 [a0 + 0xe]\n 23762: a0 = u8 [a0 + 0xf]\n 23765: a4 = a4 << 0x8\n 23768: a4 = a4 | a5\n 23771: s1 = s1 << 0x10\n 23774: a0 = a0 << 0x18\n 23777: a0 = a0 | s1\n 23780: a0 = a0 | a4\n 23783: a0 = a0 << 0x20\n 23786: a0 = a0 | a1\n 23789: s1 = reverse a0\n 23791: a1 = reverse a3\n 23793: a2 = reverse a2\n 23795: a0 = reverse t0\n 23797: u64 [sp + 0x38] = a0\n 23800: u64 [sp + 0x30] = a2\n 23803: a0 = a0 | a2\n 23806: a2 = a1\n 23808: a1 = a1 | s1\n 23811: a1 = a1 | a0\n 23814: a1 = a1 >> 0x20\n 23817: a0 = a0 | s1\n 23820: a0 = a0 << 0x20\n 23823: a0 = a0 | a1\n 23826: jump @375 if a0 != 0\n      : @371 (gas: 5)\n 23830: u64 [sp + 0x28] = a2\n 23833: i32 a0 = a2 + 0\n 23835: a1 = 0x20\n 23838: u64 [sp + 0x20] = a0\n 23841: ra = 340, jump @0\n      : @372 [@dyn 170] (gas: 50)\n 23847: u8 [a0 + 31] = 0\n 23850: u8 [a0 + 30] = 0\n 23853: u8 [a0 + 29] = 0\n 23856: u8 [a0 + 28] = 0\n 23859: u8 [a0 + 27] = 0\n 23862: u8 [a0 + 26] = 0\n 23865: u8 [a0 + 25] = 0\n 23868: u8 [a0 + 24] = 0\n 23871: u8 [a0 + 23] = 0\n 23874: u8 [a0 + 22] = 0\n 23877: u8 [a0 + 21] = 0\n 23880: u8 [a0 + 20] = 0\n 23883: u8 [a0 + 19] = 0\n 23886: u8 [a0 + 18] = 0\n 23889: u8 [a0 + 17] = 0\n 23892: u8 [a0 + 16] = 0\n 23895: u8 [a0 + 15] = 0\n 23898: u8 [a0 + 14] = 0\n 23901: u8 [a0 + 13] = 0\n 23904: u8 [a0 + 12] = 0\n 23907: u8 [a0 + 11] = 0\n 23910: u8 [a0 + 10] = 0\n 23913: u8 [a0 + 9] = 0\n 23916: u8 [a0 + 8] = 0\n 23919: u8 [a0 + 7] = 0\n 23922: u8 [a0 + 6] = 0\n 23925: u8 [a0 + 5] = 0\n 23928: u8 [a0 + 4] = 0\n 23931: u8 [a0 + 3] = 0xa0\n 23936: u8 [a0 + 2] = 0x79\n 23940: u8 [a0 + 1] = 0xc3\n 23945: u8 [a0 + 0] = 0x8\n 23948: a1 = u64 [sp + 0x28]\n 23951: a0 = a1 + 0x4\n 23954: a1 = a0 <u a1\n 23957: a3 = u64 [sp + 0x38]\n 23960: a2 = a3 + a1\n 23963: a3 = a2 <u a3\n 23966: a3 = a1 if a1 == 0\n 23969: a3 = a3 + s1\n 23972: a1 = a3 <u s1\n 23975: a4 = u64 [sp + 0x30]\n 23978: a4 = a4 + a1\n 23981: u64 [sp + 0x88] = a2\n 23985: u64 [sp + 0x80] = a0\n 23989: u64 [sp + 0x90] = a3\n 23993: a0 = sp + 0xa0\n 23997: a1 = sp + 0x80\n 24001: u64 [sp + 0x98] = a4\n 24005: ra = 342, jump @243\n      : @373 [@dyn 171] (gas: 5)\n 24011: a0 = u64 [sp + 0xa8]\n 24015: t0 = u64 [sp + 0xb8]\n 24019: t1 = u64 [sp + 0xa0]\n 24023: a3 = u64 [sp + 0xb0]\n 24027: fallthrough\n      : @374 (gas: 26)\n 24028: a1 = u64 [sp + 0x38]\n 24031: a4 = a0 ^ a1\n 24034: a5 = a0 <u a1\n 24037: t2 = a1\n 24039: a2 = u64 [sp + 0x28]\n 24042: a1 = t1 <u a2\n 24045: a5 = a1 if a4 == 0\n 24048: a4 = a3 - s1\n 24051: a3 = a3 <u s1\n 24054: s1 = u64 [sp + 0x30]\n 24057: s1 = t0 - s1\n 24060: s1 = s1 - a3\n 24063: a3 = a4 <u a5\n 24066: s1 = s1 - a3\n 24069: a4 = a4 - a5\n 24072: a0 = a0 - t2\n 24075: a1 = a0 - a1\n 24078: a0 = t1 - a2\n 24081: a1 = a1 | s1\n 24084: a2 = a0 | a4\n 24087: a2 = a2 | a1\n 24090: a1 = a1 | a4\n 24093: a2 = a2 >> 0x20\n 24096: a1 = a1 << 0x20\n 24099: a1 = a1 | a2\n 24102: jump @380 if a1 == 0\n      : @375 (gas: 1)\n 24105: trap\n      : @376 (gas: 8)\n 24106: u64 [sp + 240] = 0\n 24110: u64 [sp + 232] = 0\n 24114: u64 [sp + 224] = 0\n 24118: a0 = 0x4e487b7100000000\n 24128: a1 = sp + 0xe0\n 24132: u64 [sp + 0xf8] = a0\n 24136: a0 = 0\n 24138: ra = 344, jump @8\n      : @377 [@dyn 172] (gas: 7)\n 24144: u64 [sp + 216] = 0\n 24148: u64 [sp + 208] = 0\n 24152: u64 [sp + 192] = 0x11\n 24157: a0 = 0x4\n 24160: a1 = sp + 0xc0\n 24164: u64 [sp + 200] = 0\n 24168: ra = 346, jump @8\n      : @378 [@dyn 173] (gas: 3)\n 24174: a1 = 0x24\n 24177: a0 = 0\n 24179: ra = 348, jump @0\n      : @379 [@dyn 174] (gas: 5)\n 24185: i32 a1 = a0 + 0\n 24187: a0 = 0x1\n 24190: a2 = 0x24\n 24193: ecalli 6 // 'seal_return'\n 24195: fallthrough\n      : @380 (gas: 4)\n 24196: i32 s1 = a0 + 0\n 24198: a0 = u64 [sp + 0x20]\n 24201: a1 = s1\n 24203: ra = 350, jump @0\n      : @381 [@dyn 175] (gas: 7)\n 24209: i32 a1 = a0 + 0\n 24211: a0 = 0x1\n 24214: a2 = s1\n 24216: ecalli 6 // 'seal_return'\n 24218: a0 = 0\n 24220: ra = 0x160\n 24224: jump @10\n      : @382 [export #0: 'call'] (gas: 2)\n 24227: a0 = 0\n 24229: ra = 352, jump @10\n      : @383 [@dyn 176] [export #1: 'deploy'] (gas: 2)\n 24235: a0 = 0x1\n 24238: ra = 354, jump @10\n      : @384 [@dyn 177] (gas: 9)\n 24244: sp = sp + 0xffffffffffffffc0\n 24247: u64 [sp + 0x38] = ra\n 24250: u64 [sp + 0x30] = s0\n 24253: u64 [sp + 0x28] = s1\n 24256: s0 = sp + 0x40\n 24259: sp = sp & 0xfffffffffffffff0\n 24262: s1 = a0\n 24264: a0 = sp\n 24266: ra = 356, jump @52\n      : @385 [@dyn 178] (gas: 14)\n 24272: a0 = u64 [sp + 0x10]\n 24275: a1 = u64 [sp + 0x18]\n 24278: a2 = u64 [sp]\n 24280: a3 = u64 [sp + 0x8]\n 24283: u64 [s1 + 0x10] = a0\n 24286: u64 [s1 + 0x18] = a1\n 24289: u64 [s1] = a2\n 24291: u64 [s1 + 0x8] = a3\n 24294: sp = s0 + 0xffffffffffffffc0\n 24297: ra = u64 [sp + 0x38]\n 24300: s0 = u64 [sp + 0x30]\n 24303: s1 = u64 [sp + 0x28]\n 24306: sp = sp + 0x40\n 24309: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"addCard(address,uint256)": "f9c775ea",
							"cardInventory(address,uint256)": "50580072",
							"getInventory(address)": "8b87c544",
							"hasCard(address,uint256,uint256)": "4dca8ce6",
							"owner()": "8da5cb5b",
							"setTradingContract(address)": "5be6f2c7",
							"tradingContract()": "9e4bd2e9",
							"transferCards(address,address,uint256,uint256)": "65352442"
						}
					},
					"irOptimized": "/// @use-src 0:\"InventoryManager.sol\"\nobject \"InventoryManager_157\" {\n    code {\n        {\n            /// @src 0:60:1591  \"contract InventoryManager {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            constructor_InventoryManager()\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"InventoryManager_157_deployed\"), datasize(\"InventoryManager_157_deployed\"))\n            return(_1, datasize(\"InventoryManager_157_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function prepare_store_address(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_address_to_address(slot, value)\n        {\n            let convertedValue := convert_address_to_address(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n        }\n        /// @ast-id 25 @src 0:345:435  \"constructor() {...\"\n        function constructor_InventoryManager()\n        {\n            /// @src 0:378:388  \"msg.sender\"\n            let expr := caller()\n            /// @src 0:370:388  \"owner = msg.sender\"\n            update_storage_value_offset_address_to_address(0x01, expr)\n            /// @src 0:417:427  \"msg.sender\"\n            let expr_1 := caller()\n            /// @src 0:399:427  \"tradingContract = msg.sender\"\n            update_storage_value_offset_address_to_address(0x02, expr_1)\n        }\n    }\n    /// @use-src 0:\"InventoryManager.sol\"\n    object \"InventoryManager_157_deployed\" {\n        code {\n            {\n                /// @src 0:60:1591  \"contract InventoryManager {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x4dca8ce6 { external_fun_hasCard() }\n                    case 0x50580072 { external_fun_cardInventory() }\n                    case 0x5be6f2c7 {\n                        external_fun_setTradingContract()\n                    }\n                    case 0x65352442 { external_fun_transferCards() }\n                    case 0x8b87c544 { external_fun_getInventory() }\n                    case 0x8da5cb5b { external_fun_owner() }\n                    case 0x9e4bd2e9 {\n                        external_fun_tradingContract()\n                    }\n                    case 0xf9c775ea { external_fun_addCard() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_uint256(add(headStart, offset_2), dataEnd)\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            function external_fun_hasCard()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_addresst_uint256t_uint256(4, calldatasize())\n                let ret := fun_hasCard(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_addresst_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_array_uint256_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_uint256_storage(value) -> length\n            { length := 0x11 }\n            function array_dataslot_array_uint256_storage(ptr) -> data\n            { data := ptr }\n            function storage_array_index_access_uint(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_uint256_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_uint256_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 7 @src 0:93:142  \"mapping(address => uint[17]) public cardInventory\"\n            function getter_fun_cardInventory(key, key_1) -> ret\n            {\n                let slot := 0\n                let offset := 0\n                slot := mapping_index_access_mapping_address_array_uint256_storage_of_address(slot, key)\n                if iszero(lt(key_1, array_length_array_uint256_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_uint(slot, key_1)\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:60:1591  \"contract InventoryManager {...\"\n            function abi_encode_uint256_to_uint256_fromStack(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256_fromStack(value0, add(headStart, 0))\n            }\n            function external_fun_cardInventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                let ret := getter_fun_cardInventory(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_setTradingContract()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_setTradingContract(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_addresst_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n            {\n                if slt(sub(dataEnd, headStart), 128)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_address(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_uint256(add(headStart, offset_2), dataEnd)\n                let offset_3 := 96\n                value3 := abi_decode_uint256(add(headStart, offset_3), dataEnd)\n            }\n            function external_fun_transferCards()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2, param_3 := abi_decode_addresst_addresst_uint256t_uint256(4, calldatasize())\n                fun_transferCards(param, param_1, param_2, param_3)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_array_uint256(value) -> length\n            { length := 0x11 }\n            function array_storeLengthForEncoding_array_uint256(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function array_dataslot_array_uint256(ptr) -> data\n            { data := ptr }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encodeUpdatedPos_uint256(value0, pos) -> updatedPos\n            {\n                abi_encode_uint256_to_uint256(value0, pos)\n                updatedPos := add(pos, 0x20)\n            }\n            function array_nextElement_array_uint256(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_uint256(value, pos)\n            {\n                let length := array_length_array_uint256(value)\n                pos := array_storeLengthForEncoding_array_uint256(pos, length)\n                let baseRef := array_dataslot_array_uint256(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_uint256(elementValue0, pos)\n                    srcPtr := array_nextElement_array_uint256(srcPtr)\n                }\n            }\n            function abi_encode_array_uint256_memory_ptr(headStart, value0) -> tail\n            {\n                tail := add(headStart, 544)\n                abi_encode_array_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_getInventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := fun_getInventory(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_uint256_memory_ptr(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 9 @src 0:206:226  \"address public owner\"\n            function getter_fun_owner() -> ret\n            {\n                let slot := 1\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:60:1591  \"contract InventoryManager {...\"\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_owner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_owner()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 11 @src 0:306:336  \"address public tradingContract\"\n            function getter_fun_tradingContract() -> ret\n            {\n                let slot := 2\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:60:1591  \"contract InventoryManager {...\"\n            function external_fun_tradingContract()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_tradingContract()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_addCard()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                fun_addCard(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function zero_value_for_split_bool() -> ret\n            { ret := 0 }\n            /// @ast-id 156 @src 0:1439:1588  \"function hasCard(address user, uint cardId, uint amount) external view returns (bool) {...\"\n            function fun_hasCard(var_user, var_cardId, var_amount) -> var\n            {\n                /// @src 0:1519:1523  \"bool\"\n                let zero_bool := zero_value_for_split_bool()\n                var := zero_bool\n                /// @src 0:1543:1556  \"cardInventory\"\n                let _2_slot := 0x00\n                let expr_147_slot := _2_slot\n                /// @src 0:1557:1561  \"user\"\n                let _1 := var_user\n                let expr := _1\n                /// @src 0:1543:1562  \"cardInventory[user]\"\n                let _2 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_147_slot, expr)\n                let _5_slot := _2\n                let expr_149_slot := _5_slot\n                /// @src 0:1563:1569  \"cardId\"\n                let _3 := var_cardId\n                let expr_1 := _3\n                /// @src 0:1543:1570  \"cardInventory[user][cardId]\"\n                let _4, _5 := storage_array_index_access_uint(expr_149_slot, expr_1)\n                let _6 := read_from_storage_split_dynamic_uint256(_4, _5)\n                let expr_2 := _6\n                /// @src 0:1574:1580  \"amount\"\n                let _7 := var_amount\n                let expr_3 := _7\n                /// @src 0:1543:1580  \"cardInventory[user][cardId] >= amount\"\n                let expr_4 := iszero(lt(cleanup_uint256(expr_2), cleanup_uint256(expr_3)))\n                /// @src 0:1536:1580  \"return cardInventory[user][cardId] >= amount\"\n                var := expr_4\n                leave\n            }\n            /// @src 0:60:1591  \"contract InventoryManager {...\"\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not owner\")\n            }\n            function abi_encode_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 9)\n                store_literal_in_memory_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_c266(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682(tail)\n            }\n            function require_helper_stringliteral_c266(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_c266(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            /// @ast-id 43 @src 0:510:664  \"function setTradingContract(address _contract) external {...\"\n            function fun_setTradingContract(var_contract)\n            {\n                /// @src 0:585:595  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:599:604  \"owner\"\n                let _1 := read_from_storage_split_offset_address(0x01)\n                let expr_1 := _1\n                /// @src 0:585:604  \"msg.sender == owner\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 0:577:618  \"require(msg.sender == owner, \\\"Not owner\\\")\"\n                require_helper_stringliteral_c266(expr_2)\n                /// @src 0:647:656  \"_contract\"\n                let _2 := var_contract\n                let expr_3 := _2\n                /// @src 0:629:656  \"tradingContract = _contract\"\n                update_storage_value_offset_address_to_address(0x02, expr_3)\n            }\n            /// @src 0:60:1591  \"contract InventoryManager {...\"\n            function cleanup_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by_1(value)))\n            }\n            function store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid card ID\")\n            }\n            function abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_8239(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(tail)\n            }\n            function require_helper_stringliteral_8239(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8239(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not enough cards\")\n            }\n            function abi_encode_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 16)\n                store_literal_in_memory_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_83e8(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(tail)\n            }\n            function require_helper_stringliteral_83e8(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_83e8(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, not(0))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_uint256_to_uint256(slot, offset, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @ast-id 122 @src 0:989:1302  \"function transferCards(address from, address to, uint cardId, uint amount) external {...\"\n            function fun_transferCards(var_from, var_to, var_cardId, var_amount)\n            {\n                /// @src 0:1092:1098  \"cardId\"\n                let _1 := var_cardId\n                let expr := _1\n                /// @src 0:1101:1103  \"17\"\n                let expr_1 := 0x11\n                /// @src 0:1092:1103  \"cardId < 17\"\n                let expr_2 := lt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:1084:1123  \"require(cardId < 17, \\\"Invalid card ID\\\")\"\n                require_helper_stringliteral_8239(expr_2)\n                /// @src 0:1142:1155  \"cardInventory\"\n                let _slot := 0x00\n                let expr_95_slot := _slot\n                /// @src 0:1156:1160  \"from\"\n                let _2 := var_from\n                let expr_3 := _2\n                /// @src 0:1142:1161  \"cardInventory[from]\"\n                let _3 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_95_slot, expr_3)\n                let _17_slot := _3\n                let expr_97_slot := _17_slot\n                /// @src 0:1162:1168  \"cardId\"\n                let _4 := var_cardId\n                let expr_4 := _4\n                /// @src 0:1142:1169  \"cardInventory[from][cardId]\"\n                let _5, _6 := storage_array_index_access_uint(expr_97_slot, expr_4)\n                let _7 := read_from_storage_split_dynamic_uint256(_5, _6)\n                let expr_5 := _7\n                /// @src 0:1173:1179  \"amount\"\n                let _8 := var_amount\n                let expr_6 := _8\n                /// @src 0:1142:1179  \"cardInventory[from][cardId] >= amount\"\n                let expr_7 := iszero(lt(cleanup_uint256(expr_5), cleanup_uint256(expr_6)))\n                /// @src 0:1134:1200  \"require(cardInventory[from][cardId] >= amount, \\\"Not enough cards\\\")\"\n                require_helper_stringliteral_83e8(expr_7)\n                /// @src 0:1242:1248  \"amount\"\n                let _9 := var_amount\n                let expr_8 := _9\n                /// @src 0:1211:1224  \"cardInventory\"\n                let _24_slot := 0x00\n                let expr_105_slot := _24_slot\n                /// @src 0:1225:1229  \"from\"\n                let _10 := var_from\n                let expr_9 := _10\n                /// @src 0:1211:1230  \"cardInventory[from]\"\n                let _11 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_105_slot, expr_9)\n                let _27_slot := _11\n                let expr_108_slot := _27_slot\n                /// @src 0:1231:1237  \"cardId\"\n                let _12 := var_cardId\n                let expr_10 := _12\n                /// @src 0:1211:1238  \"cardInventory[from][cardId]\"\n                let _13, _14 := storage_array_index_access_uint(expr_108_slot, expr_10)\n                /// @src 0:1211:1248  \"cardInventory[from][cardId] -= amount\"\n                let _15 := read_from_storage_split_dynamic_uint256(_13, _14)\n                let expr_11 := checked_sub_uint256(_15, expr_8)\n                update_storage_value_uint256_to_uint256(_13, _14, expr_11)\n                /// @src 0:1288:1294  \"amount\"\n                let _16 := var_amount\n                let expr_12 := _16\n                /// @src 0:1259:1272  \"cardInventory\"\n                let _33_slot := 0x00\n                let expr_113_slot := _33_slot\n                /// @src 0:1273:1275  \"to\"\n                let _17 := var_to\n                let expr_13 := _17\n                /// @src 0:1259:1276  \"cardInventory[to]\"\n                let _18 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_113_slot, expr_13)\n                let _36_slot := _18\n                let expr_116_slot := _36_slot\n                /// @src 0:1277:1283  \"cardId\"\n                let _19 := var_cardId\n                let expr_14 := _19\n                /// @src 0:1259:1284  \"cardInventory[to][cardId]\"\n                let _20, _21 := storage_array_index_access_uint(expr_116_slot, expr_14)\n                /// @src 0:1259:1294  \"cardInventory[to][cardId] += amount\"\n                let _22 := read_from_storage_split_dynamic_uint256(_20, _21)\n                let expr_15 := checked_add_uint256(_22, expr_12)\n                update_storage_value_uint256_to_uint256(_20, _21, expr_15)\n            }\n            /// @src 0:60:1591  \"contract InventoryManager {...\"\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_array_uint256(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n            }\n            function allocate_memory_array_array_uint256(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_uint256(length)\n                memPtr := allocate_memory(allocSize)\n            }\n            function zero_memory_chunk_uint256(dataStart, dataSizeInBytes)\n            {\n                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)\n            }\n            function allocate_and_zero_memory_array_array_uint256(length) -> memPtr\n            {\n                memPtr := allocate_memory_array_array_uint256(length)\n                let dataStart := memPtr\n                let dataSize := array_allocation_size_array_uint256(length)\n                zero_memory_chunk_uint256(dataStart, dataSize)\n            }\n            function zero_value_for_split_array_uint256() -> ret\n            {\n                ret := allocate_and_zero_memory_array_array_uint256(17)\n            }\n            function array_storeLengthForEncoding_array_uint256_memory_ptr(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function array_nextElement_array_uint256_storage(ptr) -> next\n            { next := add(ptr, 0x01) }\n            function abi_encode_array_uint256_storage(value, pos)\n            {\n                let length := array_length_array_uint256_storage(value)\n                pos := array_storeLengthForEncoding_array_uint256_memory_ptr(pos, length)\n                let baseRef := array_dataslot_array_uint256_storage(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := read_from_storage_offset_uint256(srcPtr)\n                    pos := abi_encodeUpdatedPos_uint256(elementValue0, pos)\n                    srcPtr := array_nextElement_array_uint256_storage(srcPtr)\n                }\n            }\n            function abi_encodeUpdatedPos_array_uint256_storage(value0, pos) -> updatedPos\n            {\n                abi_encode_array_uint256_storage(value0, pos)\n                updatedPos := add(pos, 0x0220)\n            }\n            function copy_array_from_storage_to_memory_array_uint(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_array_uint256_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function convert_array_array_uint256_storage_to_array_uint256(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_uint(value)\n            }\n            /// @ast-id 136 @src 0:1310:1431  \"function getInventory(address user) external view returns (uint[17] memory) {...\"\n            function fun_getInventory(var_user) -> var_mpos\n            {\n                /// @src 0:1369:1384  \"uint[17] memory\"\n                let zero_array_uint256_mpos := zero_value_for_split_array_uint256()\n                var_mpos := zero_array_uint256_mpos\n                /// @src 0:1404:1417  \"cardInventory\"\n                let _42_slot := 0x00\n                let expr_slot := _42_slot\n                /// @src 0:1418:1422  \"user\"\n                let _1 := var_user\n                let expr := _1\n                /// @src 0:1404:1423  \"cardInventory[user]\"\n                let _2 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_slot, expr)\n                let _45_slot := _2\n                let expr_133_slot := _45_slot\n                /// @src 0:1397:1423  \"return cardInventory[user]\"\n                var_mpos := convert_array_array_uint256_storage_to_array_uint256(expr_133_slot)\n                leave\n            }\n            /// @src 0:60:1591  \"contract InventoryManager {...\"\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_t_rational_by(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            function store_literal_in_memory_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid address\")\n            }\n            function abi_encode_stringliteral(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            /// @ast-id 76 @src 0:701:906  \"function addCard(address to, uint cardId) external {...\"\n            function fun_addCard(var_to, var_cardId)\n            {\n                /// @src 0:771:773  \"to\"\n                let _1 := var_to\n                let expr := _1\n                /// @src 0:785:786  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:777:787  \"address(0)\"\n                let expr_2 := convert_rational_by_to_address(expr_1)\n                /// @src 0:771:787  \"to != address(0)\"\n                let expr_3 := iszero(eq(cleanup_address(expr), cleanup_address(expr_2)))\n                /// @src 0:763:807  \"require(to != address(0), \\\"Invalid address\\\")\"\n                require_helper_stringliteral(expr_3)\n                /// @src 0:826:832  \"cardId\"\n                let _2 := var_cardId\n                let expr_4 := _2\n                /// @src 0:835:837  \"17\"\n                let expr_5 := 0x11\n                /// @src 0:826:837  \"cardId < 17\"\n                let expr_6 := lt(cleanup_uint256(expr_4), convert_rational_by_to_uint256(expr_5))\n                /// @src 0:818:857  \"require(cardId < 17, \\\"Invalid card ID\\\")\"\n                require_helper_stringliteral_8239(expr_6)\n                /// @src 0:897:898  \"1\"\n                let expr_7 := 0x01\n                /// @src 0:868:898  \"cardInventory[to][cardId] += 1\"\n                let _3 := convert_t_rational_by_to_t_uint256(expr_7)\n                /// @src 0:868:881  \"cardInventory\"\n                let _49_slot := 0x00\n                let expr_67_slot := _49_slot\n                /// @src 0:882:884  \"to\"\n                let _4 := var_to\n                let expr_8 := _4\n                /// @src 0:868:885  \"cardInventory[to]\"\n                let _5 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_67_slot, expr_8)\n                let _52_slot := _5\n                let expr_70_slot := _52_slot\n                /// @src 0:886:892  \"cardId\"\n                let _6 := var_cardId\n                let expr_9 := _6\n                /// @src 0:868:893  \"cardInventory[to][cardId]\"\n                let _7, _8 := storage_array_index_access_uint(expr_70_slot, expr_9)\n                /// @src 0:868:898  \"cardInventory[to][cardId] += 1\"\n                let _9 := read_from_storage_split_dynamic_uint256(_7, _8)\n                let expr_10 := checked_add_uint256(_9, _3)\n                update_storage_value_uint256_to_uint256(_7, _8, expr_10)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220eba054b8a8b3ac05becfaabdc50e43eba6c91a41a147e795435a5e46b568a55864736f6c634300081c0033\"\n    }\n}\n",
					"hash": "881e89cd9d3568adc3e4cf1d0fece9149fad7e27a17cf4bc143b512ddbbaaae6",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"InventoryManager.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "InventoryManager.sol",
					"exportedSymbols": {
						"InventoryManager": [
							157
						]
					},
					"id": 158,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "InventoryManager",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 157,
							"linearizedBaseContracts": [
								157
							],
							"name": "InventoryManager",
							"nameLocation": "69:16:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "50580072",
									"id": 7,
									"mutability": "mutable",
									"name": "cardInventory",
									"nameLocation": "129:13:0",
									"nodeType": "VariableDeclaration",
									"scope": 157,
									"src": "93:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$17_storage_$",
										"typeString": "mapping(address => uint256[17])"
									},
									"typeName": {
										"id": 6,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "101:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "93:28:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$17_storage_$",
											"typeString": "mapping(address => uint256[17])"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"baseType": {
												"id": 3,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "112:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"id": 5,
											"length": {
												"hexValue": "3137",
												"id": 4,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "117:2:0",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_17_by_1",
													"typeString": "int_const 17"
												},
												"value": "17"
											},
											"nodeType": "ArrayTypeName",
											"src": "112:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$17_storage_ptr",
												"typeString": "uint256[17]"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 9,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "221:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 157,
									"src": "206:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 8,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "206:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9e4bd2e9",
									"id": 11,
									"mutability": "mutable",
									"name": "tradingContract",
									"nameLocation": "321:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 157,
									"src": "306:30:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 10,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "306:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 24,
										"nodeType": "Block",
										"src": "359:76:0",
										"statements": [
											{
												"expression": {
													"id": 17,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 14,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "370:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 15,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "378:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 16,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "382:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "378:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "370:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 18,
												"nodeType": "ExpressionStatement",
												"src": "370:18:0"
											},
											{
												"expression": {
													"id": 22,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 19,
														"name": "tradingContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "399:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 20,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "417:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 21,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "421:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "417:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "399:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 23,
												"nodeType": "ExpressionStatement",
												"src": "399:28:0"
											}
										]
									},
									"id": 25,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "356:2:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "359:0:0"
									},
									"scope": 157,
									"src": "345:90:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 42,
										"nodeType": "Block",
										"src": "566:98:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 34,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 31,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "585:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 32,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "589:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "585:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 33,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 9,
																"src": "599:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "585:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f74206f776e6572",
															"id": 35,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "606:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
																"typeString": "literal_string \"Not owner\""
															},
															"value": "Not owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
																"typeString": "literal_string \"Not owner\""
															}
														],
														"id": 30,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "577:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "577:41:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 37,
												"nodeType": "ExpressionStatement",
												"src": "577:41:0"
											},
											{
												"expression": {
													"id": 40,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 38,
														"name": "tradingContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "629:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 39,
														"name": "_contract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "647:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "629:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 41,
												"nodeType": "ExpressionStatement",
												"src": "629:27:0"
											}
										]
									},
									"functionSelector": "5be6f2c7",
									"id": 43,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setTradingContract",
									"nameLocation": "519:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "546:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "538:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "538:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "537:19:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "566:0:0"
									},
									"scope": 157,
									"src": "510:154:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 75,
										"nodeType": "Block",
										"src": "752:154:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 51,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 45,
																"src": "771:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 54,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "785:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 53,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "777:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 52,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "777:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 55,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "777:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "771:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642061646472657373",
															"id": 57,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "789:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															},
															"value": "Invalid address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															}
														],
														"id": 50,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "763:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 58,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "763:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 59,
												"nodeType": "ExpressionStatement",
												"src": "763:44:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 61,
																"name": "cardId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 47,
																"src": "826:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "3137",
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "835:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_17_by_1",
																	"typeString": "int_const 17"
																},
																"value": "17"
															},
															"src": "826:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642063617264204944",
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "839:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															},
															"value": "Invalid card ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															}
														],
														"id": 60,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "818:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "818:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "818:39:0"
											},
											{
												"expression": {
													"id": 73,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 67,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "868:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$17_storage_$",
																	"typeString": "mapping(address => uint256[17] storage ref)"
																}
															},
															"id": 70,
															"indexExpression": {
																"id": 68,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 45,
																"src": "882:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "868:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$17_storage",
																"typeString": "uint256[17] storage ref"
															}
														},
														"id": 71,
														"indexExpression": {
															"id": 69,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 47,
															"src": "886:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "868:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "897:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "868:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 74,
												"nodeType": "ExpressionStatement",
												"src": "868:30:0"
											}
										]
									},
									"functionSelector": "f9c775ea",
									"id": 76,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addCard",
									"nameLocation": "710:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "726:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "718:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 44,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "718:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "735:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "730:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 46,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "730:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "717:25:0"
									},
									"returnParameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "752:0:0"
									},
									"scope": 157,
									"src": "701:205:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 121,
										"nodeType": "Block",
										"src": "1073:229:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 90,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 88,
																"name": "cardId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 82,
																"src": "1092:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "3137",
																"id": 89,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1101:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_17_by_1",
																	"typeString": "int_const 17"
																},
																"value": "17"
															},
															"src": "1092:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642063617264204944",
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1105:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															},
															"value": "Invalid card ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															}
														],
														"id": 87,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1084:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 92,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1084:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 93,
												"nodeType": "ExpressionStatement",
												"src": "1084:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 95,
																		"name": "cardInventory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 7,
																		"src": "1142:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$17_storage_$",
																			"typeString": "mapping(address => uint256[17] storage ref)"
																		}
																	},
																	"id": 97,
																	"indexExpression": {
																		"id": 96,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 78,
																		"src": "1156:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1142:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$17_storage",
																		"typeString": "uint256[17] storage ref"
																	}
																},
																"id": 99,
																"indexExpression": {
																	"id": 98,
																	"name": "cardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 82,
																	"src": "1162:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1142:27:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 100,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 84,
																"src": "1173:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1142:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420656e6f756768206361726473",
															"id": 102,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1181:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c",
																"typeString": "literal_string \"Not enough cards\""
															},
															"value": "Not enough cards"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c",
																"typeString": "literal_string \"Not enough cards\""
															}
														],
														"id": 94,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1134:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1134:66:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "1134:66:0"
											},
											{
												"expression": {
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 105,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "1211:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$17_storage_$",
																	"typeString": "mapping(address => uint256[17] storage ref)"
																}
															},
															"id": 108,
															"indexExpression": {
																"id": 106,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 78,
																"src": "1225:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1211:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$17_storage",
																"typeString": "uint256[17] storage ref"
															}
														},
														"id": 109,
														"indexExpression": {
															"id": 107,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "1231:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1211:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 110,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1242:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1211:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 112,
												"nodeType": "ExpressionStatement",
												"src": "1211:37:0"
											},
											{
												"expression": {
													"id": 119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 113,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "1259:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$17_storage_$",
																	"typeString": "mapping(address => uint256[17] storage ref)"
																}
															},
															"id": 116,
															"indexExpression": {
																"id": 114,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 80,
																"src": "1273:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1259:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$17_storage",
																"typeString": "uint256[17] storage ref"
															}
														},
														"id": 117,
														"indexExpression": {
															"id": 115,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "1277:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1259:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 118,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1288:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1259:35:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 120,
												"nodeType": "ExpressionStatement",
												"src": "1259:35:0"
											}
										]
									},
									"functionSelector": "65352442",
									"id": 122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferCards",
									"nameLocation": "998:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1020:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "1012:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 77,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1034:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "1026:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 79,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1026:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "1043:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "1038:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 81,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1038:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1056:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "1051:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 83,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1051:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:52:0"
									},
									"returnParameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1073:0:0"
									},
									"scope": 157,
									"src": "989:313:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 135,
										"nodeType": "Block",
										"src": "1386:45:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 131,
														"name": "cardInventory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "1404:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$17_storage_$",
															"typeString": "mapping(address => uint256[17] storage ref)"
														}
													},
													"id": 133,
													"indexExpression": {
														"id": 132,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 124,
														"src": "1418:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1404:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$17_storage",
														"typeString": "uint256[17] storage ref"
													}
												},
												"functionReturnParameters": 130,
												"id": 134,
												"nodeType": "Return",
												"src": "1397:26:0"
											}
										]
									},
									"functionSelector": "8b87c544",
									"id": 136,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getInventory",
									"nameLocation": "1319:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1340:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "1332:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1332:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1331:14:0"
									},
									"returnParameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "1369:15:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$17_memory_ptr",
													"typeString": "uint256[17]"
												},
												"typeName": {
													"baseType": {
														"id": 126,
														"name": "uint",
														"nodeType": "ElementaryTypeName",
														"src": "1369:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 128,
													"length": {
														"hexValue": "3137",
														"id": 127,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1374:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_17_by_1",
															"typeString": "int_const 17"
														},
														"value": "17"
													},
													"nodeType": "ArrayTypeName",
													"src": "1369:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$17_storage_ptr",
														"typeString": "uint256[17]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1368:17:0"
									},
									"scope": 157,
									"src": "1310:121:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 155,
										"nodeType": "Block",
										"src": "1525:63:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"baseExpression": {
																"id": 147,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "1543:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$17_storage_$",
																	"typeString": "mapping(address => uint256[17] storage ref)"
																}
															},
															"id": 149,
															"indexExpression": {
																"id": 148,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 138,
																"src": "1557:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1543:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$17_storage",
																"typeString": "uint256[17] storage ref"
															}
														},
														"id": 151,
														"indexExpression": {
															"id": 150,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 140,
															"src": "1563:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1543:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 152,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 142,
														"src": "1574:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1543:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 146,
												"id": 154,
												"nodeType": "Return",
												"src": "1536:44:0"
											}
										]
									},
									"functionSelector": "4dca8ce6",
									"id": 156,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasCard",
									"nameLocation": "1448:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1464:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "1456:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 137,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1456:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "1475:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "1470:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 139,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1470:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1488:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "1483:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1483:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1455:40:0"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "1519:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 144,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1519:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1518:6:0"
									},
									"scope": 157,
									"src": "1439:149:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 158,
							"src": "60:1531:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:1560:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}