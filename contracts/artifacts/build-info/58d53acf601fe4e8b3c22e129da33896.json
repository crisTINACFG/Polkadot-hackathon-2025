{
	"id": "58d53acf601fe4e8b3c22e129da33896",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"InventoryManager.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract InventoryManager {\r\n    mapping(address => uint[9]) public cardInventory;\r\n\r\n    modifier onlyTradingContract() {\r\n        require(msg.sender == tradingContract, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    address public tradingContract;\r\n\r\n    constructor() {\r\n        tradingContract = msg.sender;\r\n    }\r\n\r\n    function setTradingContract(address _contract) external {\r\n        require(tradingContract == address(0), \"Already set\");\r\n        tradingContract = _contract;\r\n    }\r\n\r\n    function addCard(address to, uint cardId) external onlyTradingContract {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(cardId < 9, \"Invalid card ID\");\r\n        cardInventory[to][cardId] += 1;\r\n    }\r\n\r\n    function transferCards(address from, address to, uint cardId, uint amount) external onlyTradingContract {\r\n        require(cardId < 9, \"Invalid card ID\");\r\n        require(cardInventory[from][cardId] >= amount, \"Not enough cards\");\r\n        cardInventory[from][cardId] -= amount;\r\n        cardInventory[to][cardId] += amount;\r\n    }\r\n\r\n    function getInventory(address user) external view returns (uint[9] memory) {\r\n        return cardInventory[user];\r\n    }\r\n\r\n    function hasCard(address user, uint cardId, uint amount) external view returns (bool) {\r\n        return cardInventory[user][cardId] >= amount;\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"InventoryManager.sol": {
				"InventoryManager": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								}
							],
							"name": "addCard",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "cardInventory",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getInventory",
							"outputs": [
								{
									"internalType": "uint256[9]",
									"name": "",
									"type": "uint256[9]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "hasCard",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								}
							],
							"name": "setTradingContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tradingContract",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferCards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardInventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInventory\",\"outputs\":[{\"internalType\":\"uint256[9]\",\"name\":\"\",\"type\":\"uint256[9]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hasCard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTradingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"InventoryManager.sol\":\"InventoryManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"InventoryManager.sol\":{\"keccak256\":\"0x818b2fe8125bea3def361da8f72c367f8e084e019ecf4de3f274c961823a8f54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2c0907050d9a00745a2b0de8ddfc0db667f55d1e92c5bc53199d3fdb8e40698\",\"dweb:/ipfs/QmTTpqs5y8D6BbWTkg9EpZEF5DGEnQzV8NkfarBKxHwoJP\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "InventoryManager.sol:InventoryManager",
								"label": "cardInventory",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_array(t_uint256)9_storage)"
							},
							{
								"astId": 21,
								"contract": "InventoryManager.sol:InventoryManager",
								"label": "tradingContract",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)9_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[9]",
								"numberOfBytes": "288"
							},
							"t_mapping(t_address,t_array(t_uint256)9_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256[9])",
								"numberOfBytes": "32",
								"value": "t_array(t_uint256)9_storage"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 9634\n// Code size = 30299 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 2 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffff20\n   342: u64 [sp + 0xd8] = ra\n   346: u64 [sp + 0xd0] = s0\n   350: u64 [sp + 0xc8] = s1\n   354: s0 = sp + 0xe0\n   358: sp = sp & 0xffffffffffffffe0\n   361: a0 = 0x40\n   364: a1 = 0x20\n   367: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   372: u8 [a0 + 31] = 0x80\n   377: u8 [a0 + 30] = 0\n   380: u8 [a0 + 29] = 0\n   383: u8 [a0 + 28] = 0\n   386: u8 [a0 + 27] = 0\n   389: u8 [a0 + 26] = 0\n   392: u8 [a0 + 25] = 0\n   395: u8 [a0 + 24] = 0\n   398: u8 [a0 + 23] = 0\n   401: u8 [a0 + 22] = 0\n   404: u8 [a0 + 21] = 0\n   407: u8 [a0 + 20] = 0\n   410: u8 [a0 + 19] = 0\n   413: u8 [a0 + 18] = 0\n   416: u8 [a0 + 17] = 0\n   419: u8 [a0 + 16] = 0\n   422: u8 [a0 + 15] = 0\n   425: u8 [a0 + 14] = 0\n   428: u8 [a0 + 13] = 0\n   431: u8 [a0 + 12] = 0\n   434: u8 [a0 + 11] = 0\n   437: u8 [a0 + 10] = 0\n   440: u8 [a0 + 9] = 0\n   443: u8 [a0 + 8] = 0\n   446: u8 [a0 + 7] = 0\n   449: u8 [a0 + 6] = 0\n   452: u8 [a0 + 5] = 0\n   455: u8 [a0 + 4] = 0\n   458: u8 [a0 + 3] = 0\n   461: u8 [a0 + 2] = 0\n   464: u8 [a0 + 1] = 0\n   467: u8 [a0 + 0] = 0\n   469: u64 [sp + 56] = 0\n   472: u64 [sp + 32] = 0\n   475: u64 [sp + 40] = 0\n   478: u64 [sp + 48] = 0\n   481: i32 a0 = sp + 0x20\n   484: ecalli 9 // 'value_transferred'\n   486: fallthrough\n      : @16 (gas: 8)\n   487: a0 = u64 [sp + 0x30]\n   490: a1 = u64 [sp + 0x38]\n   493: a2 = u64 [sp + 0x28]\n   496: a3 = u64 [sp + 0x20]\n   499: a1 = a1 | a2\n   502: a0 = a0 | a3\n   505: a0 = a0 | a1\n   508: jump @20 if a0 != 0\n      : @17 (gas: 55)\n   512: i32 a0 = sp + 0x40\n   515: ecalli 3 // 'caller'\n   517: a0 = u64 [sp + 0x48]\n   520: a1 = i32 [sp + 0x50]\n   523: a2 = u64 [sp + 0x40]\n   526: a0 = reverse a0\n   528: a3 = a0 << 0x20\n   531: a1 = reverse a1\n   533: a1 = a1 >> 0x20\n   536: a1 = a1 | a3\n   539: u64 [sp + 0x18] = a1\n   542: a0 = a0 >> 0x20\n   545: s1 = reverse a2\n   547: a1 = s1 << 0x20\n   550: a0 = a0 | a1\n   553: u64 [sp + 0x10] = a0\n   556: s1 = s1 >> 0x20\n   559: u64 [sp + 152] = 0\n   563: u64 [sp + 144] = 0\n   567: u64 [sp + 136] = 0\n   571: u64 [sp + 128] = 0x1\n   576: u64 [sp + 184] = 0\n   580: u64 [sp + 176] = 0\n   584: u64 [sp + 168] = 0\n   588: u64 [sp + 160] = 0\n   592: u32 [sp + 96] = 0x20\n   596: i32 a1 = sp + 0x80\n   600: i32 a3 = sp + 0xa0\n   604: i32 a4 = sp + 0x60\n   607: a2 = 0xffffffffffffffff\n   610: a0 = 0\n   612: ecalli 4 // 'get_storage'\n   614: a0 = u32 [sp + 0xb4]\n   618: a0 = a0 << 0x20\n   621: a1 = u64 [sp + 0xb8]\n   625: a0 = a0 | s1\n   628: u64 [sp + 152] = 0\n   632: u64 [sp + 144] = 0\n   636: u64 [sp + 136] = 0\n   640: u64 [sp + 128] = 0x1\n   645: u64 [sp + 0xb8] = a1\n   649: u64 [sp + 0xb0] = a0\n   653: a0 = u64 [sp + 0x10]\n   656: u64 [sp + 0xa8] = a0\n   660: a0 = u64 [sp + 0x18]\n   663: u64 [sp + 0xa0] = a0\n   667: i32 a1 = sp + 0x80\n   671: i32 a3 = sp + 0xa0\n   675: a2 = 0xffffffffffffffff\n   678: a4 = 0x20\n   681: a0 = 0\n   683: ecalli 8 // 'set_storage'\n   685: a0 = 0x40\n   688: a1 = 0x20\n   691: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   696: a1 = u8 [a0 + 0x11]\n   699: a2 = u8 [a0 + 0x10]\n   702: a3 = u8 [a0 + 0x12]\n   705: a4 = u8 [a0 + 0x13]\n   708: a1 = a1 << 0x8\n   711: a1 = a1 | a2\n   714: a3 = a3 << 0x10\n   717: a4 = a4 << 0x18\n   720: a3 = a3 | a4\n   723: a1 = a1 | a3\n   726: a2 = u8 [a0 + 0x15]\n   729: a3 = u8 [a0 + 0x14]\n   732: a4 = u8 [a0 + 0x16]\n   735: a5 = u8 [a0 + 0x17]\n   738: a2 = a2 << 0x8\n   741: a2 = a2 | a3\n   744: a4 = a4 << 0x10\n   747: a5 = a5 << 0x18\n   750: a4 = a4 | a5\n   753: a2 = a2 | a4\n   756: a2 = a2 << 0x20\n   759: t0 = a2 | a1\n   762: a2 = u8 [a0 + 0x1]\n   765: a3 = u8 [a0]\n   767: a4 = u8 [a0 + 0x2]\n   770: a5 = u8 [a0 + 0x3]\n   773: a2 = a2 << 0x8\n   776: a2 = a2 | a3\n   779: a4 = a4 << 0x10\n   782: a5 = a5 << 0x18\n   785: a4 = a4 | a5\n   788: a2 = a2 | a4\n   791: a3 = u8 [a0 + 0x5]\n   794: a4 = u8 [a0 + 0x4]\n   797: a5 = u8 [a0 + 0x6]\n   800: s1 = u8 [a0 + 0x7]\n   803: a3 = a3 << 0x8\n   806: a3 = a3 | a4\n   809: a5 = a5 << 0x10\n   812: s1 = s1 << 0x18\n   815: a5 = a5 | s1\n   818: a3 = a3 | a5\n   821: a3 = a3 << 0x20\n   824: a2 = a2 | a3\n   827: a3 = u8 [a0 + 0x19]\n   830: a4 = u8 [a0 + 0x18]\n   833: a5 = u8 [a0 + 0x1a]\n   836: s1 = u8 [a0 + 0x1b]\n   839: a3 = a3 << 0x8\n   842: a3 = a3 | a4\n   845: a5 = a5 << 0x10\n   848: s1 = s1 << 0x18\n   851: a5 = a5 | s1\n   854: a3 = a3 | a5\n   857: a4 = u8 [a0 + 0x1d]\n   860: a5 = u8 [a0 + 0x1c]\n   863: s1 = u8 [a0 + 0x1e]\n   866: a1 = u8 [a0 + 0x1f]\n   869: a4 = a4 << 0x8\n   872: a4 = a4 | a5\n   875: s1 = s1 << 0x10\n   878: a1 = a1 << 0x18\n   881: a1 = a1 | s1\n   884: a1 = a1 | a4\n   887: a1 = a1 << 0x20\n   890: a3 = a3 | a1\n   893: a1 = u8 [a0 + 0x9]\n   896: a4 = u8 [a0 + 0x8]\n   899: a5 = u8 [a0 + 0xa]\n   902: s1 = u8 [a0 + 0xb]\n   905: a1 = a1 << 0x8\n   908: a1 = a1 | a4\n   911: a5 = a5 << 0x10\n   914: s1 = s1 << 0x18\n   917: a5 = a5 | s1\n   920: a1 = a1 | a5\n   923: a4 = u8 [a0 + 0xd]\n   926: a5 = u8 [a0 + 0xc]\n   929: s1 = u8 [a0 + 0xe]\n   932: a0 = u8 [a0 + 0xf]\n   935: a4 = a4 << 0x8\n   938: a4 = a4 | a5\n   941: s1 = s1 << 0x10\n   944: a0 = a0 << 0x18\n   947: a0 = a0 | s1\n   950: a0 = a0 | a4\n   953: a0 = a0 << 0x20\n   956: a0 = a0 | a1\n   959: a0 = reverse a0\n   961: s1 = reverse a3\n   963: a1 = reverse a2\n   965: a2 = reverse t0\n   967: a1 = a1 | a2\n   970: a2 = s1 | a0\n   973: a2 = a2 | a1\n   976: a2 = a2 >> 0x20\n   979: a0 = a0 | a1\n   982: a0 = a0 << 0x20\n   985: a0 = a0 | a2\n   988: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   991: trap\n      : @20 (gas: 3)\n   992: a0 = 0\n   994: a1 = 0\n   996: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n  1001: i32 a1 = a0 + 0\n  1003: a0 = 0x1\n  1006: a2 = 0\n  1008: ecalli 6 // 'seal_return'\n  1010: fallthrough\n      : @22 (gas: 4)\n  1011: i32 s1 = s1 + 0\n  1013: a0 = s1\n  1015: a1 = 0\n  1017: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n  1022: i32 a0 = a0 + 0\n  1024: a1 = 0\n  1026: a2 = 0\n  1028: ecalli 0 // 'call_data_copy'\n  1029: fallthrough\n      : @24 (gas: 2)\n  1030: a1 = i32 [0x20008]\n  1035: jump @26 if a1 == 0\n      : @25 (gas: 4)\n  1038: a0 = 0x30010\n  1043: i32 a0 = a0 + 0\n  1045: ecalli 7 // 'set_immutable_data'\n  1047: fallthrough\n      : @26 (gas: 3)\n  1048: a0 = s1\n  1050: a1 = 0\n  1052: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n  1057: i32 a1 = a0 + 0\n  1059: a0 = 0\n  1061: a2 = 0\n  1063: ra = 0x12\n  1066: ecalli 6 // 'seal_return'\n  1068: fallthrough\n      : @28 [@dyn 9] (gas: 8)\n  1069: sp = sp + 0xffffffffffffffc0\n  1072: u64 [sp + 0x38] = ra\n  1075: u64 [sp + 0x30] = s0\n  1078: s0 = sp + 0x40\n  1081: sp = sp & 0xffffffffffffffe0\n  1084: a0 = 0x40\n  1087: a1 = 0x20\n  1090: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 34)\n  1095: u8 [a0 + 31] = 0x80\n  1100: u8 [a0 + 30] = 0\n  1103: u8 [a0 + 29] = 0\n  1106: u8 [a0 + 28] = 0\n  1109: u8 [a0 + 27] = 0\n  1112: u8 [a0 + 26] = 0\n  1115: u8 [a0 + 25] = 0\n  1118: u8 [a0 + 24] = 0\n  1121: u8 [a0 + 23] = 0\n  1124: u8 [a0 + 22] = 0\n  1127: u8 [a0 + 21] = 0\n  1130: u8 [a0 + 20] = 0\n  1133: u8 [a0 + 19] = 0\n  1136: u8 [a0 + 18] = 0\n  1139: u8 [a0 + 17] = 0\n  1142: u8 [a0 + 16] = 0\n  1145: u8 [a0 + 15] = 0\n  1148: u8 [a0 + 14] = 0\n  1151: u8 [a0 + 13] = 0\n  1154: u8 [a0 + 12] = 0\n  1157: u8 [a0 + 11] = 0\n  1160: u8 [a0 + 10] = 0\n  1163: u8 [a0 + 9] = 0\n  1166: u8 [a0 + 8] = 0\n  1169: u8 [a0 + 7] = 0\n  1172: u8 [a0 + 3] = 0\n  1175: u8 [a0 + 2] = 0\n  1178: u8 [a0 + 1] = 0\n  1181: u8 [a0 + 0] = 0\n  1183: a1 = i32 [0x20004]\n  1188: u8 [a0 + 6] = 0\n  1191: u8 [a0 + 5] = 0\n  1194: u8 [a0 + 4] = 0\n  1197: jump @43 if a1 <u 4\n      : @30 (gas: 4)\n  1202: i32 a0 = sp + 0\n  1204: a1 = 0\n  1206: ecalli 1 // 'call_data_load'\n  1208: fallthrough\n      : @31 (gas: 2)\n  1209: a0 = i32 [sp + 0x1c]\n  1212: jump @36 if a0 <=s 1305119973\n      : @32 (gas: 2)\n  1219: a1 = 0x5be6f000\n  1225: jump @40 if a0 >s 1541862086\n      : @33 (gas: 1)\n  1232: jump @45 if a0 == 1305119974\n      : @34 (gas: 1)\n  1240: jump @43 if a0 != 1347944562\n      : @35 (gas: 14)\n  1247: ra = 0x16\n  1250: sp = sp + 0xfffffffffffffec0\n  1254: u64 [sp + 0x138] = ra\n  1258: u64 [sp + 0x130] = s0\n  1262: u64 [sp + 0x128] = s1\n  1266: s0 = sp + 0x140\n  1270: sp = sp & 0xffffffffffffffe0\n  1273: u64 [sp + 280] = 0\n  1277: u64 [sp + 272] = 0\n  1281: u64 [sp + 264] = 0\n  1285: u64 [sp + 256] = 0\n  1289: i32 a0 = sp + 0x100\n  1293: ecalli 9 // 'value_transferred'\n  1295: jump @94\n      : @36 [@dyn 11] (gas: 1)\n  1298: jump @44 if a0 == 2340930884\n      : @37 (gas: 1)\n  1305: jump @47 if a0 == 2655769321\n      : @38 (gas: 1)\n  1313: jump @43 if a0 != 4190598634\n      : @39 (gas: 1)\n  1320: ra = 24, jump @220\n      : @40 [@dyn 12] (gas: 2)\n  1325: i32 a1 = a1 + 0x2c7\n  1329: jump @46 if a0 == a1\n      : @41 (gas: 1)\n  1332: jump @43 if a0 != 1697981506\n      : @42 (gas: 1)\n  1339: ra = 26, jump @140\n      : @43 [@dyn 13] (gas: 1)\n  1344: ra = 28, jump @231\n      : @44 [@dyn 14] (gas: 14)\n  1349: ra = 0x1e\n  1352: sp = sp + 0xfffffffffffffee0\n  1356: u64 [sp + 0x118] = ra\n  1360: u64 [sp + 0x110] = s0\n  1364: u64 [sp + 0x108] = s1\n  1368: s0 = sp + 0x120\n  1372: sp = sp & 0xffffffffffffffe0\n  1375: u64 [sp + 216] = 0\n  1379: u64 [sp + 208] = 0\n  1383: u64 [sp + 200] = 0\n  1387: u64 [sp + 192] = 0\n  1391: i32 a0 = sp + 0xc0\n  1395: ecalli 9 // 'value_transferred'\n  1397: jump @192\n      : @45 [@dyn 15] (gas: 14)\n  1400: ra = 0x20\n  1403: sp = sp + 0xfffffffffffffe80\n  1407: u64 [sp + 0x178] = ra\n  1411: u64 [sp + 0x170] = s0\n  1415: u64 [sp + 0x168] = s1\n  1419: s0 = sp + 0x180\n  1423: sp = sp & 0xffffffffffffffe0\n  1426: u64 [sp + 344] = 0\n  1430: u64 [sp + 336] = 0\n  1434: u64 [sp + 328] = 0\n  1438: u64 [sp + 320] = 0\n  1442: i32 a0 = sp + 0x140\n  1446: ecalli 9 // 'value_transferred'\n  1448: jump @62\n      : @46 [@dyn 16] (gas: 13)\n  1451: ra = 0x22\n  1454: sp = sp + 0xffffffffffffff80\n  1457: u64 [sp + 0x78] = ra\n  1460: u64 [sp + 0x70] = s0\n  1463: s0 = sp + 0x80\n  1467: sp = sp & 0xffffffffffffffe0\n  1470: u64 [sp + 56] = 0\n  1473: u64 [sp + 48] = 0\n  1476: u64 [sp + 40] = 0\n  1479: u64 [sp + 32] = 0\n  1482: i32 a0 = sp + 0x20\n  1485: ecalli 9 // 'value_transferred'\n  1487: jump @114\n      : @47 [@dyn 17] (gas: 14)\n  1490: ra = 0x24\n  1493: sp = sp + 0xffffffffffffff60\n  1497: u64 [sp + 0x98] = ra\n  1501: u64 [sp + 0x90] = s0\n  1505: u64 [sp + 0x88] = s1\n  1509: s0 = sp + 0xa0\n  1513: sp = sp & 0xffffffffffffffe0\n  1516: u64 [sp + 56] = 0\n  1519: u64 [sp + 48] = 0\n  1522: u64 [sp + 40] = 0\n  1525: u64 [sp + 32] = 0\n  1528: i32 a0 = sp + 0x20\n  1531: ecalli 9 // 'value_transferred'\n  1533: jump @210\n      : @48 [@dyn 18] (gas: 7)\n  1536: sp = sp + 0xfffffffffffffff0\n  1539: u64 [sp + 0x8] = ra\n  1542: u64 [sp] = s0\n  1544: s0 = a0\n  1546: a0 = 0x40\n  1549: a1 = 0x20\n  1552: ra = 38, jump @0\n      : @49 [@dyn 19] (gas: 100)\n  1557: a1 = u8 [a0 + 0x1]\n  1560: a2 = u8 [a0]\n  1562: a3 = u8 [a0 + 0x2]\n  1565: a4 = u8 [a0 + 0x3]\n  1568: a1 = a1 << 0x8\n  1571: a1 = a1 | a2\n  1574: a3 = a3 << 0x10\n  1577: a4 = a4 << 0x18\n  1580: a3 = a3 | a4\n  1583: a1 = a1 | a3\n  1586: a2 = u8 [a0 + 0x5]\n  1589: a3 = u8 [a0 + 0x4]\n  1592: a4 = u8 [a0 + 0x6]\n  1595: a5 = u8 [a0 + 0x7]\n  1598: a2 = a2 << 0x8\n  1601: a2 = a2 | a3\n  1604: a4 = a4 << 0x10\n  1607: a5 = a5 << 0x18\n  1610: a4 = a4 | a5\n  1613: a2 = a2 | a4\n  1616: a2 = a2 << 0x20\n  1619: t0 = a2 | a1\n  1622: a2 = u8 [a0 + 0x9]\n  1625: a3 = u8 [a0 + 0x8]\n  1628: a4 = u8 [a0 + 0xa]\n  1631: a5 = u8 [a0 + 0xb]\n  1634: a2 = a2 << 0x8\n  1637: a2 = a2 | a3\n  1640: a4 = a4 << 0x10\n  1643: a5 = a5 << 0x18\n  1646: a4 = a4 | a5\n  1649: a2 = a2 | a4\n  1652: a3 = u8 [a0 + 0xd]\n  1655: a4 = u8 [a0 + 0xc]\n  1658: a5 = u8 [a0 + 0xe]\n  1661: a1 = u8 [a0 + 0xf]\n  1664: a3 = a3 << 0x8\n  1667: a3 = a3 | a4\n  1670: a5 = a5 << 0x10\n  1673: a1 = a1 << 0x18\n  1676: a1 = a1 | a5\n  1679: a1 = a1 | a3\n  1682: a1 = a1 << 0x20\n  1685: t1 = a1 | a2\n  1688: a1 = u8 [a0 + 0x11]\n  1691: a3 = u8 [a0 + 0x10]\n  1694: a4 = u8 [a0 + 0x12]\n  1697: a5 = u8 [a0 + 0x13]\n  1700: a1 = a1 << 0x8\n  1703: a1 = a1 | a3\n  1706: a4 = a4 << 0x10\n  1709: a5 = a5 << 0x18\n  1712: a4 = a4 | a5\n  1715: a1 = a1 | a4\n  1718: a3 = u8 [a0 + 0x15]\n  1721: a4 = u8 [a0 + 0x14]\n  1724: a5 = u8 [a0 + 0x16]\n  1727: a2 = u8 [a0 + 0x17]\n  1730: a3 = a3 << 0x8\n  1733: a3 = a3 | a4\n  1736: a5 = a5 << 0x10\n  1739: a2 = a2 << 0x18\n  1742: a2 = a2 | a5\n  1745: a2 = a2 | a3\n  1748: a2 = a2 << 0x20\n  1751: a3 = a2 | a1\n  1754: a1 = u8 [a0 + 0x19]\n  1757: a2 = u8 [a0 + 0x18]\n  1760: a4 = u8 [a0 + 0x1a]\n  1763: a5 = u8 [a0 + 0x1b]\n  1766: a1 = a1 << 0x8\n  1769: a1 = a1 | a2\n  1772: a4 = a4 << 0x10\n  1775: a5 = a5 << 0x18\n  1778: a4 = a4 | a5\n  1781: a1 = a1 | a4\n  1784: a2 = u8 [a0 + 0x1d]\n  1787: a4 = u8 [a0 + 0x1c]\n  1790: a5 = u8 [a0 + 0x1e]\n  1793: a0 = u8 [a0 + 0x1f]\n  1796: a2 = a2 << 0x8\n  1799: a2 = a2 | a4\n  1802: a5 = a5 << 0x10\n  1805: a0 = a0 << 0x18\n  1808: a0 = a0 | a5\n  1811: a0 = a0 | a2\n  1814: a0 = a0 << 0x20\n  1817: a0 = a0 | a1\n  1820: a0 = reverse a0\n  1822: a1 = reverse a3\n  1824: a2 = reverse t1\n  1826: a3 = reverse t0\n  1828: u64 [s0 + 0x18] = a3\n  1831: u64 [s0 + 0x10] = a2\n  1834: u64 [s0 + 0x8] = a1\n  1837: u64 [s0] = a0\n  1839: ra = u64 [sp + 0x8]\n  1842: s0 = u64 [sp]\n  1844: sp = sp + 0x10\n  1847: ret\n      : @50 (gas: 47)\n  1849: sp = sp + 0xffffffffffffff60\n  1853: u64 [sp + 0x98] = ra\n  1857: u64 [sp + 0x90] = s0\n  1861: u64 [sp + 0x88] = s1\n  1865: s0 = sp + 0xa0\n  1869: sp = sp & 0xffffffffffffffe0\n  1872: t0 = u64 [a1 + 0x10]\n  1875: a5 = u64 [a1 + 0x8]\n  1878: a3 = u64 [a2 + 0x8]\n  1881: ra = u64 [a1]\n  1883: a4 = u64 [a2]\n  1885: u64 [sp + 0x48] = a4\n  1888: t2 = u64 [a2 + 0x10]\n  1891: t1 = a3 ^ a5\n  1894: s1 = a3 <u a5\n  1897: a4 = a4 <u ra\n  1900: u64 [sp + 0x40] = a4\n  1903: s1 = a4 if t1 == 0\n  1906: t1 = u64 [a1 + 0x18]\n  1909: a1 = u64 [a2 + 0x18]\n  1912: u64 [sp + 0x38] = a1\n  1915: a2 = t2 - t0\n  1918: a1 = a2 - s1\n  1921: u64 [sp + 0x50] = a1\n  1924: a1 = a2 <u s1\n  1927: a4 = t2 <u t0\n  1930: u64 [sp + 0x58] = t1\n  1933: a2 = u64 [sp + 0x38]\n  1936: a2 = a2 - t1\n  1939: a2 = a2 - a4\n  1942: a2 = a2 - a1\n  1945: a1 = a3 - a5\n  1948: a3 = u64 [sp + 0x40]\n  1951: a1 = a1 - a3\n  1954: a3 = u64 [sp + 0x48]\n  1957: a3 = a3 - ra\n  1960: a4 = a1 >u 0\n  1962: a3 = a3 <u 0x60\n  1965: a3 = a3 ^ 0x1\n  1968: a3 = a4 if a1 != 0\n  1971: s1 = a2 >s 0\n  1973: a1 = u64 [sp + 0x50]\n  1976: a4 = a1 >u 0\n  1978: a4 = s1 if a2 != 0\n  1981: a1 = a1 | a2\n  1984: a3 = a4 if a1 != 0\n  1987: jump @59 if a3 == 0\n      : @51 (gas: 12)\n  1991: s1 = a0\n  1993: a0 = ra | t0\n  1996: u64 [sp + 0x50] = a5\n  1999: a1 = u64 [sp + 0x58]\n  2002: a1 = a1 | a5\n  2005: a0 = a0 | a1\n  2008: a0 = a0 >> 0x20\n  2011: u64 [sp + 0x38] = t0\n  2014: a1 = a1 | t0\n  2017: a1 = a1 << 0x20\n  2020: a0 = a0 | a1\n  2023: jump @58 if a0 != 0\n      : @52 (gas: 6)\n  2027: u64 [sp + 0x48] = ra\n  2030: i32 a1 = ra + 0\n  2032: i32 a0 = sp + 0x60\n  2035: u64 [sp + 0x40] = a1\n  2038: ecalli 1 // 'call_data_load'\n  2040: fallthrough\n      : @53 (gas: 10)\n  2041: a3 = u64 [sp + 0x70]\n  2044: a4 = u64 [sp + 0x78]\n  2047: a0 = 0x100000000\n  2057: a1 = a3 ^ a0\n  2060: a1 = a1 | a4\n  2063: a2 = a3 >> 0x20\n  2066: a2 = a2 <u 0x1\n  2069: a2 = 0 if a4 != 0\n  2071: a2 = 0 if a1 == 0\n  2073: jump @59 if a2 == 0\n      : @54 (gas: 13)\n  2077: u64 [sp + 0x28] = a4\n  2080: u64 [sp + 0x30] = a3\n  2083: a1 = u64 [sp + 0x38]\n  2086: a2 = u64 [sp + 0x58]\n  2089: a2 = a2 | a1\n  2092: a0 = 0xffffffe0\n  2102: a1 = u64 [sp + 0x48]\n  2105: a0 = a1 <u a0\n  2108: a1 = u64 [sp + 0x50]\n  2111: a0 = 0 if a1 != 0\n  2113: u64 [sp + 0x58] = a2\n  2116: a0 = 0 if a2 != 0\n  2118: jump @58 if a0 == 0\n      : @55 (gas: 9)\n  2122: a0 = u64 [sp + 0x68]\n  2125: u64 [sp + 0x20] = a0\n  2128: a0 = u64 [sp + 0x60]\n  2131: u64 [sp + 0x38] = a0\n  2134: a0 = u64 [sp + 0x40]\n  2137: i32 a1 = a0 + 0x20\n  2140: i32 a0 = sp + 0x60\n  2143: ecalli 1 // 'call_data_load'\n  2145: fallthrough\n      : @56 (gas: 8)\n  2146: a0 = 0xffffffc0\n  2156: a1 = u64 [sp + 0x48]\n  2159: a0 = a1 <u a0\n  2162: a1 = u64 [sp + 0x50]\n  2165: a0 = 0 if a1 != 0\n  2167: a1 = u64 [sp + 0x58]\n  2170: a0 = 0 if a1 != 0\n  2172: jump @58 if a0 == 0\n      : @57 (gas: 42)\n  2176: a0 = u64 [sp + 0x78]\n  2179: u64 [sp + 0x18] = a0\n  2182: a0 = u64 [sp + 0x70]\n  2185: u64 [sp + 0x48] = a0\n  2188: a0 = u64 [sp + 0x68]\n  2191: u64 [sp + 0x50] = a0\n  2194: a0 = u64 [sp + 0x60]\n  2197: u64 [sp + 0x58] = a0\n  2200: a0 = u64 [sp + 0x40]\n  2203: i32 a1 = a0 + 0x40\n  2206: i32 a0 = sp + 0x60\n  2209: ecalli 1 // 'call_data_load'\n  2211: a0 = u64 [sp + 0x78]\n  2214: a1 = u64 [sp + 0x70]\n  2217: a2 = u64 [sp + 0x68]\n  2220: a3 = u64 [sp + 0x60]\n  2223: u64 [s1 + 0x58] = a0\n  2226: u64 [s1 + 0x50] = a1\n  2229: u64 [s1 + 0x48] = a2\n  2232: u64 [s1 + 0x40] = a3\n  2235: a0 = u64 [sp + 0x18]\n  2238: u64 [s1 + 0x38] = a0\n  2241: a0 = u64 [sp + 0x48]\n  2244: u64 [s1 + 0x30] = a0\n  2247: a0 = u64 [sp + 0x50]\n  2250: u64 [s1 + 0x28] = a0\n  2253: a0 = u64 [sp + 0x58]\n  2256: u64 [s1 + 0x20] = a0\n  2259: a0 = u64 [sp + 0x28]\n  2262: u64 [s1 + 0x18] = a0\n  2265: a0 = u64 [sp + 0x30]\n  2268: u64 [s1 + 0x10] = a0\n  2271: a0 = u64 [sp + 0x20]\n  2274: u64 [s1 + 0x8] = a0\n  2277: a0 = u64 [sp + 0x38]\n  2280: u64 [s1] = a0\n  2282: sp = s0 + 0xffffffffffffff60\n  2286: ra = u64 [sp + 0x98]\n  2290: s0 = u64 [sp + 0x90]\n  2294: s1 = u64 [sp + 0x88]\n  2298: sp = sp + 0xa0\n  2302: ret\n      : @58 (gas: 1)\n  2304: trap\n      : @59 (gas: 3)\n  2305: a0 = 0\n  2307: a1 = 0\n  2309: ra = 40, jump @0\n      : @60 [@dyn 20] (gas: 6)\n  2314: i32 a1 = a0 + 0\n  2316: a0 = 0x1\n  2319: a2 = 0\n  2321: ra = 0x2a\n  2324: ecalli 6 // 'seal_return'\n  2326: fallthrough\n      : @61 [@dyn 21] (gas: 13)\n  2327: a2 = u64 [a1 + 0x10]\n  2330: a3 = u64 [a1 + 0x18]\n  2333: a4 = u64 [a1 + 0x8]\n  2336: a1 = u64 [a1]\n  2338: a3 = a3 | a4\n  2341: a1 = a1 | a2\n  2344: a1 = a1 | a3\n  2347: a1 = a1 >u 0\n  2349: u64 [a0 + 24] = 0\n  2352: u64 [a0 + 16] = 0\n  2355: u64 [a0 + 8] = 0\n  2358: u64 [a0] = a1\n  2360: ret\n      : @62 (gas: 8)\n  2362: a0 = u64 [sp + 0x150]\n  2366: a1 = u64 [sp + 0x158]\n  2370: a2 = u64 [sp + 0x148]\n  2374: a3 = u64 [sp + 0x140]\n  2378: a1 = a1 | a2\n  2381: a0 = a0 | a3\n  2384: a0 = a0 | a1\n  2387: jump @68 if a0 != 0\n      : @63 (gas: 13)\n  2391: a0 = u32 [0x20004]\n  2396: u64 [sp + 184] = 0\n  2400: u64 [sp + 176] = 0\n  2404: u64 [sp + 168] = 0\n  2408: u64 [sp + 0xa0] = a0\n  2412: u64 [sp + 216] = 0\n  2416: u64 [sp + 208] = 0\n  2420: u64 [sp + 192] = 0x4\n  2425: a0 = sp + 0xe0\n  2429: a1 = sp + 0xc0\n  2433: a2 = sp + 0xa0\n  2437: u64 [sp + 200] = 0\n  2441: ra = 44, jump @50\n      : @64 [@dyn 22] (gas: 63)\n  2446: a0 = u64 [sp + 0xe0]\n  2450: u64 [sp + 0x18] = a0\n  2453: t1 = u64 [sp + 0xe8]\n  2457: t2 = u64 [sp + 0xf0]\n  2461: ra = u64 [sp + 0xf8]\n  2465: t0 = u64 [sp + 0x100]\n  2469: a5 = u64 [sp + 0x108]\n  2473: s1 = u64 [sp + 0x110]\n  2477: a4 = u64 [sp + 0x118]\n  2481: a3 = u64 [sp + 0x120]\n  2485: a1 = u64 [sp + 0x128]\n  2489: a2 = u64 [sp + 0x130]\n  2493: a0 = u64 [sp + 0x138]\n  2497: u64 [sp + 0x38] = a0\n  2500: u64 [sp + 0x30] = a2\n  2503: u64 [sp + 0x28] = a1\n  2506: u64 [sp + 0x20] = a3\n  2509: u64 [sp + 0x58] = a4\n  2512: u64 [sp + 0x50] = s1\n  2515: u64 [sp + 0x48] = a5\n  2518: u64 [sp + 0x40] = t0\n  2521: u64 [sp + 0x78] = ra\n  2524: u64 [sp + 0x70] = t2\n  2527: u64 [sp + 0x68] = t1\n  2530: a0 = sp + 0x80\n  2534: a1 = sp + 0x60\n  2537: a2 = sp + 0x40\n  2540: a3 = sp + 0x20\n  2543: a4 = u64 [sp + 0x18]\n  2546: u64 [sp + 0x60] = a4\n  2549: ra = 0x2e\n  2552: sp = sp + 0xffffffffffffff00\n  2556: u64 [sp + 0xf8] = ra\n  2560: u64 [sp + 0xf0] = s0\n  2564: u64 [sp + 0xe8] = s1\n  2568: s0 = sp + 0x100\n  2572: sp = sp & 0xffffffffffffffe0\n  2575: a4 = u64 [a3 + 0x18]\n  2578: u64 [sp + 0x38] = a4\n  2581: a4 = u64 [a3 + 0x10]\n  2584: u64 [sp + 0x58] = a4\n  2587: a4 = u64 [a3 + 0x8]\n  2590: u64 [sp + 0x40] = a4\n  2593: a3 = u64 [a3]\n  2595: u64 [sp + 0x48] = a3\n  2598: a3 = u64 [a2 + 0x8]\n  2601: u64 [sp + 0x30] = a3\n  2604: a3 = u64 [a2]\n  2606: u64 [sp + 0x28] = a3\n  2609: a3 = u64 [a2 + 0x18]\n  2612: u64 [sp + 0x20] = a3\n  2615: a2 = u64 [a2 + 0x10]\n  2618: u64 [sp + 0x18] = a2\n  2621: a2 = u64 [a1]\n  2623: u64 [sp + 0x10] = a2\n  2626: a2 = u64 [a1 + 0x8]\n  2629: u64 [sp + 0x8] = a2\n  2632: s1 = u32 [a1 + 0x10]\n  2635: u64 [sp + 0x50] = a0\n  2638: a1 = 0x20\n  2641: a0 = 0\n  2643: ra = 0xc4\n  2647: jump @0\n      : @65 [@dyn 23] (gas: 11)\n  2650: a0 = u64 [sp + 0x98]\n  2654: u64 [sp + 0x18] = a0\n  2657: a0 = u64 [sp + 0x90]\n  2661: u64 [sp + 0x8] = a0\n  2664: a0 = u64 [sp + 0x88]\n  2668: u64 [sp + 0x10] = a0\n  2671: a0 = u64 [sp + 0x80]\n  2675: u64 [sp] = a0\n  2677: a0 = 0x40\n  2680: a1 = 0x20\n  2683: ra = 48, jump @0\n      : @66 [@dyn 24] (gas: 100)\n  2688: a1 = u8 [a0 + 0x11]\n  2691: a2 = u8 [a0 + 0x10]\n  2694: a3 = u8 [a0 + 0x12]\n  2697: a4 = u8 [a0 + 0x13]\n  2700: a1 = a1 << 0x8\n  2703: a1 = a1 | a2\n  2706: a3 = a3 << 0x10\n  2709: a4 = a4 << 0x18\n  2712: a3 = a3 | a4\n  2715: a1 = a1 | a3\n  2718: a2 = u8 [a0 + 0x15]\n  2721: a3 = u8 [a0 + 0x14]\n  2724: a4 = u8 [a0 + 0x16]\n  2727: a5 = u8 [a0 + 0x17]\n  2730: a2 = a2 << 0x8\n  2733: a2 = a2 | a3\n  2736: a4 = a4 << 0x10\n  2739: a5 = a5 << 0x18\n  2742: a4 = a4 | a5\n  2745: a2 = a2 | a4\n  2748: a2 = a2 << 0x20\n  2751: t0 = a2 | a1\n  2754: a2 = u8 [a0 + 0x1]\n  2757: a3 = u8 [a0]\n  2759: a4 = u8 [a0 + 0x2]\n  2762: a5 = u8 [a0 + 0x3]\n  2765: a2 = a2 << 0x8\n  2768: a2 = a2 | a3\n  2771: a4 = a4 << 0x10\n  2774: a5 = a5 << 0x18\n  2777: a4 = a4 | a5\n  2780: a2 = a2 | a4\n  2783: a3 = u8 [a0 + 0x5]\n  2786: a4 = u8 [a0 + 0x4]\n  2789: a5 = u8 [a0 + 0x6]\n  2792: s1 = u8 [a0 + 0x7]\n  2795: a3 = a3 << 0x8\n  2798: a3 = a3 | a4\n  2801: a5 = a5 << 0x10\n  2804: s1 = s1 << 0x18\n  2807: a5 = a5 | s1\n  2810: a3 = a3 | a5\n  2813: a3 = a3 << 0x20\n  2816: a2 = a2 | a3\n  2819: a3 = u8 [a0 + 0x19]\n  2822: a4 = u8 [a0 + 0x18]\n  2825: a5 = u8 [a0 + 0x1a]\n  2828: s1 = u8 [a0 + 0x1b]\n  2831: a3 = a3 << 0x8\n  2834: a3 = a3 | a4\n  2837: a5 = a5 << 0x10\n  2840: s1 = s1 << 0x18\n  2843: a5 = a5 | s1\n  2846: a3 = a3 | a5\n  2849: a4 = u8 [a0 + 0x1d]\n  2852: a5 = u8 [a0 + 0x1c]\n  2855: s1 = u8 [a0 + 0x1e]\n  2858: a1 = u8 [a0 + 0x1f]\n  2861: a4 = a4 << 0x8\n  2864: a4 = a4 | a5\n  2867: s1 = s1 << 0x10\n  2870: a1 = a1 << 0x18\n  2873: a1 = a1 | s1\n  2876: a1 = a1 | a4\n  2879: a1 = a1 << 0x20\n  2882: a3 = a3 | a1\n  2885: a1 = u8 [a0 + 0x9]\n  2888: a4 = u8 [a0 + 0x8]\n  2891: a5 = u8 [a0 + 0xa]\n  2894: s1 = u8 [a0 + 0xb]\n  2897: a1 = a1 << 0x8\n  2900: a1 = a1 | a4\n  2903: a5 = a5 << 0x10\n  2906: s1 = s1 << 0x18\n  2909: a5 = a5 | s1\n  2912: a1 = a1 | a5\n  2915: a4 = u8 [a0 + 0xd]\n  2918: a5 = u8 [a0 + 0xc]\n  2921: s1 = u8 [a0 + 0xe]\n  2924: a0 = u8 [a0 + 0xf]\n  2927: a4 = a4 << 0x8\n  2930: a4 = a4 | a5\n  2933: s1 = s1 << 0x10\n  2936: a0 = a0 << 0x18\n  2939: a0 = a0 | s1\n  2942: a0 = a0 | a4\n  2945: a0 = a0 << 0x20\n  2948: a0 = a0 | a1\n  2951: a1 = reverse a0\n  2953: a0 = reverse a3\n  2955: a2 = reverse a2\n  2957: a3 = reverse t0\n  2959: a2 = a2 | a3\n  2962: a3 = a0 | a1\n  2965: a3 = a3 | a2\n  2968: a3 = a3 >> 0x20\n  2971: a1 = a1 | a2\n  2974: a1 = a1 << 0x20\n  2977: a1 = a1 | a3\n  2980: jump @70 if a1 == 0\n      : @67 (gas: 1)\n  2983: trap\n      : @68 (gas: 3)\n  2984: a0 = 0\n  2986: a1 = 0\n  2988: ra = 50, jump @0\n      : @69 [@dyn 25] (gas: 5)\n  2993: i32 a1 = a0 + 0\n  2995: a0 = 0x1\n  2998: a2 = 0\n  3000: ecalli 6 // 'seal_return'\n  3002: fallthrough\n      : @70 (gas: 13)\n  3003: a1 = u64 [sp + 0x8]\n  3006: a2 = u64 [sp]\n  3008: a1 = a1 | a2\n  3011: a2 = u64 [sp + 0x18]\n  3014: a3 = u64 [sp + 0x10]\n  3017: a2 = a2 | a3\n  3020: a1 = a1 | a2\n  3023: a1 = a1 >u 0\n  3025: u64 [sp + 0x18] = a1\n  3028: i32 s1 = a0 + 0\n  3030: a1 = 0x20\n  3033: a0 = s1\n  3035: ra = 52, jump @0\n      : @71 [@dyn 26] (gas: 36)\n  3040: u8 [a0 + 30] = 0\n  3043: u8 [a0 + 29] = 0\n  3046: u8 [a0 + 28] = 0\n  3049: u8 [a0 + 27] = 0\n  3052: u8 [a0 + 26] = 0\n  3055: u8 [a0 + 25] = 0\n  3058: u8 [a0 + 24] = 0\n  3061: u8 [a0 + 23] = 0\n  3064: u8 [a0 + 22] = 0\n  3067: u8 [a0 + 21] = 0\n  3070: u8 [a0 + 20] = 0\n  3073: u8 [a0 + 19] = 0\n  3076: u8 [a0 + 18] = 0\n  3079: u8 [a0 + 17] = 0\n  3082: u8 [a0 + 16] = 0\n  3085: u8 [a0 + 15] = 0\n  3088: u8 [a0 + 14] = 0\n  3091: u8 [a0 + 13] = 0\n  3094: u8 [a0 + 12] = 0\n  3097: u8 [a0 + 11] = 0\n  3100: u8 [a0 + 10] = 0\n  3103: u8 [a0 + 9] = 0\n  3106: u8 [a0 + 8] = 0\n  3109: u8 [a0 + 7] = 0\n  3112: u8 [a0 + 6] = 0\n  3115: u8 [a0 + 5] = 0\n  3118: u8 [a0 + 4] = 0\n  3121: u8 [a0 + 3] = 0\n  3124: u8 [a0 + 2] = 0\n  3127: u8 [a0 + 1] = 0\n  3130: u8 [a0 + 0] = 0\n  3132: a1 = u64 [sp + 0x18]\n  3135: u8 [a0 + 0x1f] = a1\n  3138: a1 = 0x20\n  3141: a0 = s1\n  3143: ra = 54, jump @0\n      : @72 [@dyn 27] (gas: 6)\n  3148: i32 a1 = a0 + 0\n  3150: a2 = 0x20\n  3153: a0 = 0\n  3155: ra = 0x38\n  3158: ecalli 6 // 'seal_return'\n  3160: fallthrough\n      : @73 [@dyn 28] (gas: 47)\n  3161: sp = sp + 0xffffffffffffff80\n  3164: u64 [sp + 0x78] = ra\n  3167: u64 [sp + 0x70] = s0\n  3170: u64 [sp + 0x68] = s1\n  3173: s0 = sp + 0x80\n  3177: sp = sp & 0xffffffffffffffe0\n  3180: ra = u64 [a1 + 0x10]\n  3183: a5 = u64 [a1 + 0x8]\n  3186: a3 = u64 [a2 + 0x8]\n  3189: t1 = u64 [a1]\n  3191: a4 = u64 [a2]\n  3193: u64 [sp + 0x28] = a4\n  3196: t2 = u64 [a2 + 0x10]\n  3199: t0 = a3 ^ a5\n  3202: s1 = a3 <u a5\n  3205: a4 = a4 <u t1\n  3208: u64 [sp + 0x20] = a4\n  3211: s1 = a4 if t0 == 0\n  3214: t0 = u64 [a1 + 0x18]\n  3217: a1 = u64 [a2 + 0x18]\n  3220: u64 [sp + 0x18] = a1\n  3223: a2 = t2 - ra\n  3226: a1 = a2 - s1\n  3229: u64 [sp + 0x30] = a1\n  3232: a1 = a2 <u s1\n  3235: a4 = t2 <u ra\n  3238: u64 [sp + 0x38] = t0\n  3241: a2 = u64 [sp + 0x18]\n  3244: a2 = a2 - t0\n  3247: a2 = a2 - a4\n  3250: a2 = a2 - a1\n  3253: a1 = a3 - a5\n  3256: a3 = u64 [sp + 0x20]\n  3259: a1 = a1 - a3\n  3262: a3 = u64 [sp + 0x28]\n  3265: a3 = a3 - t1\n  3268: a4 = a1 >u 0\n  3270: a3 = a3 <u 0x40\n  3273: a3 = a3 ^ 0x1\n  3276: a3 = a4 if a1 != 0\n  3279: s1 = a2 >s 0\n  3281: a1 = u64 [sp + 0x30]\n  3284: a4 = a1 >u 0\n  3286: a4 = s1 if a2 != 0\n  3289: a1 = a1 | a2\n  3292: a3 = a4 if a1 != 0\n  3295: jump @80 if a3 == 0\n      : @74 (gas: 12)\n  3299: s1 = a0\n  3301: a0 = t1 | ra\n  3304: u64 [sp + 0x30] = a5\n  3307: a1 = u64 [sp + 0x38]\n  3310: a1 = a1 | a5\n  3313: a0 = a0 | a1\n  3316: a0 = a0 >> 0x20\n  3319: u64 [sp + 0x28] = ra\n  3322: a1 = a1 | ra\n  3325: a1 = a1 << 0x20\n  3328: a0 = a0 | a1\n  3331: jump @79 if a0 != 0\n      : @75 (gas: 6)\n  3335: u64 [sp + 0x20] = t1\n  3338: i32 a1 = t1 + 0\n  3340: i32 a0 = sp + 0x40\n  3343: u64 [sp + 0x8] = a1\n  3346: ecalli 1 // 'call_data_load'\n  3348: fallthrough\n      : @76 (gas: 10)\n  3349: a3 = u64 [sp + 0x50]\n  3352: a4 = u64 [sp + 0x58]\n  3355: a0 = 0x100000000\n  3365: a1 = a3 ^ a0\n  3368: a1 = a1 | a4\n  3371: a2 = a3 >> 0x20\n  3374: a2 = a2 <u 0x1\n  3377: a2 = 0 if a4 != 0\n  3379: a2 = 0 if a1 == 0\n  3381: jump @80 if a2 == 0\n      : @77 (gas: 12)\n  3385: u64 [sp + 0x10] = a4\n  3388: u64 [sp + 0x18] = a3\n  3391: a1 = u64 [sp + 0x28]\n  3394: a2 = u64 [sp + 0x38]\n  3397: a1 = a1 | a2\n  3400: a0 = 0xffffffe0\n  3410: a2 = u64 [sp + 0x20]\n  3413: a0 = a2 <u a0\n  3416: a2 = u64 [sp + 0x30]\n  3419: a0 = 0 if a2 != 0\n  3421: a0 = 0 if a1 != 0\n  3423: jump @79 if a0 == 0\n      : @78 (gas: 30)\n  3426: a0 = u64 [sp + 0x48]\n  3429: u64 [sp + 0x30] = a0\n  3432: a0 = u64 [sp + 0x40]\n  3435: u64 [sp + 0x38] = a0\n  3438: a0 = u64 [sp + 0x8]\n  3441: i32 a1 = a0 + 0x20\n  3444: i32 a0 = sp + 0x40\n  3447: ecalli 1 // 'call_data_load'\n  3449: a0 = u64 [sp + 0x58]\n  3452: a1 = u64 [sp + 0x50]\n  3455: a2 = u64 [sp + 0x48]\n  3458: a3 = u64 [sp + 0x40]\n  3461: u64 [s1 + 0x38] = a0\n  3464: u64 [s1 + 0x30] = a1\n  3467: u64 [s1 + 0x28] = a2\n  3470: u64 [s1 + 0x20] = a3\n  3473: a0 = u64 [sp + 0x10]\n  3476: u64 [s1 + 0x18] = a0\n  3479: a0 = u64 [sp + 0x18]\n  3482: u64 [s1 + 0x10] = a0\n  3485: a0 = u64 [sp + 0x30]\n  3488: u64 [s1 + 0x8] = a0\n  3491: a0 = u64 [sp + 0x38]\n  3494: u64 [s1] = a0\n  3496: sp = s0 + 0xffffffffffffff80\n  3499: ra = u64 [sp + 0x78]\n  3502: s0 = u64 [sp + 0x70]\n  3505: s1 = u64 [sp + 0x68]\n  3508: sp = sp + 0x80\n  3512: ret\n      : @79 (gas: 1)\n  3514: trap\n      : @80 (gas: 3)\n  3515: a0 = 0\n  3517: a1 = 0\n  3519: ra = 58, jump @0\n      : @81 [@dyn 29] (gas: 6)\n  3524: i32 a1 = a0 + 0\n  3526: a0 = 0x1\n  3529: a2 = 0\n  3531: ra = 0x3c\n  3534: ecalli 6 // 'seal_return'\n  3536: fallthrough\n      : @82 [@dyn 30] (gas: 9)\n  3537: a2 = u64 [a1 + 0x18]\n  3540: a3 = u64 [a1 + 0x10]\n  3543: a4 = u64 [a1 + 0x8]\n  3546: a1 = u64 [a1]\n  3548: u64 [a0 + 0x18] = a2\n  3551: u64 [a0 + 0x10] = a3\n  3554: u64 [a0 + 0x8] = a4\n  3557: u64 [a0] = a1\n  3559: ret\n      : @83 [@dyn 31] (gas: 58)\n  3561: a1 = reverse s1\n  3563: a2 = u64 [sp + 0x8]\n  3566: a2 = reverse a2\n  3568: a3 = u64 [sp + 0x10]\n  3571: a3 = reverse a3\n  3573: a4 = a3 >> 0x38\n  3576: u8 [a0 + 0x1f] = a4\n  3579: a4 = a3 >> 0x30\n  3582: u8 [a0 + 0x1e] = a4\n  3585: a4 = a3 >> 0x28\n  3588: u8 [a0 + 0x1d] = a4\n  3591: a4 = a3 >> 0x20\n  3594: u8 [a0 + 0x1c] = a4\n  3597: a4 = a3 >> 0x18\n  3600: u8 [a0 + 0x1b] = a4\n  3603: a4 = a3 >> 0x10\n  3606: u8 [a0 + 0x1a] = a4\n  3609: a4 = a3 >> 0x8\n  3612: u8 [a0 + 0x19] = a4\n  3615: u8 [a0 + 0x18] = a3\n  3618: a3 = a2 >> 0x38\n  3621: u8 [a0 + 0x17] = a3\n  3624: a3 = a2 >> 0x30\n  3627: u8 [a0 + 0x16] = a3\n  3630: a3 = a2 >> 0x28\n  3633: u8 [a0 + 0x15] = a3\n  3636: a3 = a2 >> 0x20\n  3639: u8 [a0 + 0x14] = a3\n  3642: a3 = a2 >> 0x18\n  3645: u8 [a0 + 0x13] = a3\n  3648: a3 = a2 >> 0x10\n  3651: u8 [a0 + 0x12] = a3\n  3654: a3 = a2 >> 0x8\n  3657: u8 [a0 + 0x11] = a3\n  3660: u8 [a0 + 0x10] = a2\n  3663: a2 = a1 >> 0x38\n  3666: u8 [a0 + 0xf] = a2\n  3669: a2 = a1 >> 0x30\n  3672: u8 [a0 + 0xe] = a2\n  3675: a2 = a1 >> 0x28\n  3678: u8 [a0 + 0xd] = a2\n  3681: a2 = a1 >> 0x20\n  3684: u8 [a0 + 0xc] = a2\n  3687: u8 [a0 + 11] = 0\n  3690: u8 [a0 + 10] = 0\n  3693: u8 [a0 + 9] = 0\n  3696: u8 [a0 + 0x8] = a1\n  3699: u8 [a0 + 7] = 0\n  3702: u8 [a0 + 6] = 0\n  3705: u8 [a0 + 5] = 0\n  3708: u8 [a0 + 4] = 0\n  3711: u8 [a0 + 3] = 0\n  3714: u8 [a0 + 2] = 0\n  3717: u8 [a0 + 1] = 0\n  3720: u8 [a0 + 0] = 0\n  3722: a0 = 0x20\n  3725: a1 = 0x20\n  3728: ra = 64, jump @0\n      : @84 [@dyn 32] (gas: 35)\n  3733: u8 [a0 + 31] = 0\n  3736: u8 [a0 + 30] = 0\n  3739: u8 [a0 + 29] = 0\n  3742: u8 [a0 + 28] = 0\n  3745: u8 [a0 + 27] = 0\n  3748: u8 [a0 + 26] = 0\n  3751: u8 [a0 + 25] = 0\n  3754: u8 [a0 + 24] = 0\n  3757: u8 [a0 + 23] = 0\n  3760: u8 [a0 + 22] = 0\n  3763: u8 [a0 + 21] = 0\n  3766: u8 [a0 + 20] = 0\n  3769: u8 [a0 + 19] = 0\n  3772: u8 [a0 + 18] = 0\n  3775: u8 [a0 + 17] = 0\n  3778: u8 [a0 + 16] = 0\n  3781: u8 [a0 + 15] = 0\n  3784: u8 [a0 + 14] = 0\n  3787: u8 [a0 + 13] = 0\n  3790: u8 [a0 + 12] = 0\n  3793: u8 [a0 + 11] = 0\n  3796: u8 [a0 + 10] = 0\n  3799: u8 [a0 + 9] = 0\n  3802: u8 [a0 + 8] = 0\n  3805: u8 [a0 + 7] = 0\n  3808: u8 [a0 + 6] = 0\n  3811: u8 [a0 + 5] = 0\n  3814: u8 [a0 + 4] = 0\n  3817: u8 [a0 + 3] = 0\n  3820: u8 [a0 + 2] = 0\n  3823: u8 [a0 + 1] = 0\n  3826: u8 [a0 + 0] = 0\n  3828: a1 = 0x40\n  3831: a0 = 0\n  3833: ra = 66, jump @0\n      : @85 [@dyn 33] (gas: 5)\n  3838: i32 a0 = a0 + 0\n  3840: i32 a2 = sp + 0x60\n  3843: a1 = 0x40\n  3846: ecalli 5 // 'hash_keccak_256'\n  3848: fallthrough\n      : @86 (gas: 9)\n  3849: a4 = u64 [sp + 0x30]\n  3852: a5 = u64 [sp + 0x28]\n  3855: t1 = u64 [sp + 0x18]\n  3858: t0 = u64 [sp + 0x20]\n  3861: a0 = t1 | t0\n  3864: a1 = a5 <u 0x9\n  3867: a1 = 0 if a4 != 0\n  3869: a1 = 0 if a0 != 0\n  3871: jump @88 if a1 == 0\n      : @87 (gas: 52)\n  3875: a0 = u64 [sp + 0x60]\n  3878: a1 = u64 [sp + 0x68]\n  3881: a2 = u64 [sp + 0x78]\n  3884: a3 = u64 [sp + 0x70]\n  3887: a0 = reverse a0\n  3889: a1 = reverse a1\n  3891: a2 = reverse a2\n  3893: a3 = reverse a3\n  3895: a4 = a4 + a3\n  3898: a5 = a5 + a2\n  3901: a2 = a5 <u a2\n  3904: a4 = a4 + a2\n  3907: s1 = a4 ^ a3\n  3910: a3 = a4 <u a3\n  3913: a3 = a2 if s1 == 0\n  3916: a2 = a1 + t1\n  3919: a3 = a3 + a2\n  3922: s1 = a3 <u a2\n  3925: a1 = a2 <u a1\n  3928: a0 = a0 + t0\n  3931: a0 = a0 + a1\n  3934: a0 = a0 + s1\n  3937: u64 [sp + 0x40] = a5\n  3940: u64 [sp + 0x48] = a4\n  3943: u64 [sp + 0x50] = a3\n  3946: u64 [sp + 0x58] = a0\n  3949: u64 [sp + 120] = 0\n  3952: u64 [sp + 112] = 0\n  3955: u64 [sp + 104] = 0\n  3958: u64 [sp + 96] = 0\n  3961: u32 [sp + 128] = 0x20\n  3966: i32 a1 = sp + 0x40\n  3969: i32 a3 = sp + 0x60\n  3972: i32 a4 = sp + 0x80\n  3976: a2 = 0xffffffffffffffff\n  3979: a0 = 0\n  3981: ecalli 4 // 'get_storage'\n  3983: a0 = u64 [sp + 0x78]\n  3986: a1 = u64 [sp + 0x70]\n  3989: a2 = u64 [sp + 0x68]\n  3992: a3 = u64 [sp + 0x60]\n  3995: a4 = u64 [sp + 0x38]\n  3998: u64 [a4 + 0x18] = a0\n  4001: u64 [a4 + 0x10] = a1\n  4004: u64 [a4 + 0x8] = a2\n  4007: u64 [a4] = a3\n  4009: sp = s0 + 0xffffffffffffff60\n  4013: ra = u64 [sp + 0x98]\n  4017: s0 = u64 [sp + 0x90]\n  4021: s1 = u64 [sp + 0x88]\n  4025: sp = sp + 0xa0\n  4029: ret\n      : @88 (gas: 2)\n  4031: a0 = 0\n  4033: ra = 68, jump @0\n      : @89 [@dyn 34] (gas: 6)\n  4038: i32 a1 = a0 + 0\n  4040: a0 = 0x1\n  4043: a2 = 0\n  4045: ra = 0x46\n  4048: ecalli 6 // 'seal_return'\n  4050: fallthrough\n      : @90 [@dyn 35] (gas: 17)\n  4051: sp = sp + 0xffffffffffffffa8\n  4054: u64 [sp + 0x50] = ra\n  4057: u64 [sp + 0x48] = s0\n  4060: u64 [sp + 0x40] = s1\n  4063: a3 = u64 [a1 + 0x10]\n  4066: s1 = u64 [a1 + 0x18]\n  4069: a5 = u64 [a1 + 0x8]\n  4072: s0 = u64 [a1]\n  4074: a4 = a5 | s1\n  4077: a1 = s0 | a3\n  4080: a1 = a1 | a4\n  4083: a1 = a1 >> 0x20\n  4086: a4 = a4 | a3\n  4089: a4 = a4 << 0x20\n  4092: a1 = a1 | a4\n  4095: u64 [sp + 0x38] = a0\n  4098: jump @93 if a1 != 0\n      : @91 (gas: 22)\n  4102: a0 = u64 [a2 + 0x18]\n  4105: u64 [sp] = a0\n  4107: a0 = u64 [a2 + 0x10]\n  4110: u64 [sp + 0x8] = a0\n  4113: a0 = u64 [a2 + 0x8]\n  4116: u64 [sp + 0x10] = a0\n  4119: a0 = u64 [a2]\n  4121: u64 [sp + 0x18] = a0\n  4124: a0 = s0 + 0x20\n  4127: u64 [sp + 0x30] = a0\n  4130: a0 = a0 <u s0\n  4133: a1 = a5 + a0\n  4136: u64 [sp + 0x28] = a1\n  4139: a1 = a1 <u a5\n  4142: a1 = a0 if a0 == 0\n  4145: a1 = a1 + a3\n  4148: u64 [sp + 0x20] = a1\n  4151: a0 = a1 <u a3\n  4154: s1 = s1 + a0\n  4157: i32 a0 = s0 + 0\n  4159: a1 = 0x20\n  4162: ra = 72, jump @0\n      : @92 [@dyn 36] (gas: 81)\n  4167: a1 = u64 [sp]\n  4169: a1 = reverse a1\n  4171: a2 = u64 [sp + 0x8]\n  4174: a2 = reverse a2\n  4176: a3 = u64 [sp + 0x10]\n  4179: a3 = reverse a3\n  4181: a4 = u64 [sp + 0x18]\n  4184: a4 = reverse a4\n  4186: a5 = a4 >> 0x38\n  4189: u8 [a0 + 0x1f] = a5\n  4192: a5 = a4 >> 0x30\n  4195: u8 [a0 + 0x1e] = a5\n  4198: a5 = a4 >> 0x28\n  4201: u8 [a0 + 0x1d] = a5\n  4204: a5 = a4 >> 0x20\n  4207: u8 [a0 + 0x1c] = a5\n  4210: a5 = a4 >> 0x18\n  4213: u8 [a0 + 0x1b] = a5\n  4216: a5 = a4 >> 0x10\n  4219: u8 [a0 + 0x1a] = a5\n  4222: a5 = a4 >> 0x8\n  4225: u8 [a0 + 0x19] = a5\n  4228: u8 [a0 + 0x18] = a4\n  4231: u8 [a0 + 0x10] = a3\n  4234: a4 = a3 >> 0x38\n  4237: u8 [a0 + 0x17] = a4\n  4240: a4 = a3 >> 0x30\n  4243: u8 [a0 + 0x16] = a4\n  4246: a4 = a3 >> 0x28\n  4249: u8 [a0 + 0x15] = a4\n  4252: a4 = a3 >> 0x20\n  4255: u8 [a0 + 0x14] = a4\n  4258: a4 = a3 >> 0x18\n  4261: u8 [a0 + 0x13] = a4\n  4264: a4 = a3 >> 0x10\n  4267: u8 [a0 + 0x12] = a4\n  4270: a3 = a3 >> 0x8\n  4273: u8 [a0 + 0x11] = a3\n  4276: u8 [a0 + 0x8] = a2\n  4279: a3 = a2 >> 0x38\n  4282: u8 [a0 + 0xf] = a3\n  4285: a3 = a2 >> 0x30\n  4288: u8 [a0 + 0xe] = a3\n  4291: a3 = a2 >> 0x28\n  4294: u8 [a0 + 0xd] = a3\n  4297: a3 = a2 >> 0x20\n  4300: u8 [a0 + 0xc] = a3\n  4303: a3 = a2 >> 0x18\n  4306: u8 [a0 + 0xb] = a3\n  4309: a3 = a2 >> 0x10\n  4312: u8 [a0 + 0xa] = a3\n  4315: a2 = a2 >> 0x8\n  4318: u8 [a0 + 0x9] = a2\n  4321: u8 [a0] = a1\n  4323: a2 = a1 >> 0x38\n  4326: u8 [a0 + 0x7] = a2\n  4329: a2 = a1 >> 0x30\n  4332: u8 [a0 + 0x6] = a2\n  4335: a2 = a1 >> 0x28\n  4338: u8 [a0 + 0x5] = a2\n  4341: a2 = a1 >> 0x20\n  4344: u8 [a0 + 0x4] = a2\n  4347: a2 = a1 >> 0x18\n  4350: u8 [a0 + 0x3] = a2\n  4353: a2 = a1 >> 0x10\n  4356: u8 [a0 + 0x2] = a2\n  4359: a1 = a1 >> 0x8\n  4362: u8 [a0 + 0x1] = a1\n  4365: a0 = u64 [sp + 0x38]\n  4368: a1 = u64 [sp + 0x30]\n  4371: u64 [a0] = a1\n  4373: a1 = u64 [sp + 0x28]\n  4376: u64 [a0 + 0x8] = a1\n  4379: a1 = u64 [sp + 0x20]\n  4382: u64 [a0 + 0x10] = a1\n  4385: u64 [a0 + 0x18] = s1\n  4388: ra = u64 [sp + 0x50]\n  4391: s0 = u64 [sp + 0x48]\n  4394: s1 = u64 [sp + 0x40]\n  4397: sp = sp + 0x58\n  4400: ret\n      : @93 (gas: 1)\n  4402: trap\n      : @94 (gas: 8)\n  4403: a0 = u64 [sp + 0x110]\n  4407: a1 = u64 [sp + 0x118]\n  4411: a2 = u64 [sp + 0x108]\n  4415: a3 = u64 [sp + 0x100]\n  4419: a1 = a1 | a2\n  4422: a0 = a0 | a3\n  4425: a0 = a0 | a1\n  4428: jump @100 if a0 != 0\n      : @95 (gas: 13)\n  4432: a0 = u32 [0x20004]\n  4437: u64 [sp + 152] = 0\n  4441: u64 [sp + 144] = 0\n  4445: u64 [sp + 136] = 0\n  4449: u64 [sp + 0x80] = a0\n  4453: u64 [sp + 184] = 0\n  4457: u64 [sp + 176] = 0\n  4461: u64 [sp + 160] = 0x4\n  4466: a0 = sp + 0xc0\n  4470: a1 = sp + 0xa0\n  4474: a2 = sp + 0x80\n  4478: u64 [sp + 168] = 0\n  4482: ra = 74, jump @73\n      : @96 [@dyn 37] (gas: 44)\n  4487: t0 = u64 [sp + 0xc0]\n  4491: a0 = u64 [sp + 0xc8]\n  4495: a1 = u64 [sp + 0xd0]\n  4499: a2 = u64 [sp + 0xd8]\n  4503: a4 = u64 [sp + 0xe0]\n  4507: a5 = u64 [sp + 0xe8]\n  4511: s1 = u64 [sp + 0xf0]\n  4515: a3 = u64 [sp + 0xf8]\n  4519: u64 [sp + 0x38] = a3\n  4522: u64 [sp + 0x30] = s1\n  4525: u64 [sp + 0x28] = a5\n  4528: u64 [sp + 0x20] = a4\n  4531: u64 [sp + 0x58] = a2\n  4534: u64 [sp + 0x50] = a1\n  4537: u64 [sp + 0x48] = a0\n  4540: a0 = sp + 0x60\n  4543: a1 = sp + 0x40\n  4546: a2 = sp + 0x20\n  4549: u64 [sp + 0x40] = t0\n  4552: ra = 0x4c\n  4555: sp = sp + 0xffffffffffffff60\n  4559: u64 [sp + 0x98] = ra\n  4563: u64 [sp + 0x90] = s0\n  4567: u64 [sp + 0x88] = s1\n  4571: s0 = sp + 0xa0\n  4575: sp = sp & 0xffffffffffffffe0\n  4578: a3 = u64 [a2 + 0x8]\n  4581: u64 [sp + 0x30] = a3\n  4584: a3 = u64 [a2]\n  4586: u64 [sp + 0x28] = a3\n  4589: a3 = u64 [a2 + 0x18]\n  4592: u64 [sp + 0x20] = a3\n  4595: a2 = u64 [a2 + 0x10]\n  4598: u64 [sp + 0x18] = a2\n  4601: a2 = u64 [a1]\n  4603: u64 [sp + 0x10] = a2\n  4606: a2 = u64 [a1 + 0x8]\n  4609: u64 [sp + 0x8] = a2\n  4612: s1 = u32 [a1 + 0x10]\n  4615: u64 [sp + 0x38] = a0\n  4618: a1 = 0x20\n  4621: a0 = 0\n  4623: ra = 0x3e\n  4626: jump @0\n      : @97 [@dyn 38] (gas: 11)\n  4629: a0 = u64 [sp + 0x78]\n  4632: u64 [sp] = a0\n  4634: a0 = u64 [sp + 0x70]\n  4637: u64 [sp + 0x8] = a0\n  4640: a0 = u64 [sp + 0x68]\n  4643: u64 [sp + 0x10] = a0\n  4646: a0 = u64 [sp + 0x60]\n  4649: u64 [sp + 0x18] = a0\n  4652: a0 = 0x40\n  4655: a1 = 0x20\n  4658: ra = 78, jump @0\n      : @98 [@dyn 39] (gas: 100)\n  4663: a1 = u8 [a0 + 0x11]\n  4666: a2 = u8 [a0 + 0x10]\n  4669: a3 = u8 [a0 + 0x12]\n  4672: a4 = u8 [a0 + 0x13]\n  4675: a1 = a1 << 0x8\n  4678: a1 = a1 | a2\n  4681: a3 = a3 << 0x10\n  4684: a4 = a4 << 0x18\n  4687: a3 = a3 | a4\n  4690: a1 = a1 | a3\n  4693: a2 = u8 [a0 + 0x15]\n  4696: a3 = u8 [a0 + 0x14]\n  4699: a4 = u8 [a0 + 0x16]\n  4702: a5 = u8 [a0 + 0x17]\n  4705: a2 = a2 << 0x8\n  4708: a2 = a2 | a3\n  4711: a4 = a4 << 0x10\n  4714: a5 = a5 << 0x18\n  4717: a4 = a4 | a5\n  4720: a2 = a2 | a4\n  4723: a2 = a2 << 0x20\n  4726: t0 = a2 | a1\n  4729: a2 = u8 [a0 + 0x1]\n  4732: a3 = u8 [a0]\n  4734: a4 = u8 [a0 + 0x2]\n  4737: a5 = u8 [a0 + 0x3]\n  4740: a2 = a2 << 0x8\n  4743: a2 = a2 | a3\n  4746: a4 = a4 << 0x10\n  4749: a5 = a5 << 0x18\n  4752: a4 = a4 | a5\n  4755: a2 = a2 | a4\n  4758: a3 = u8 [a0 + 0x5]\n  4761: a4 = u8 [a0 + 0x4]\n  4764: a5 = u8 [a0 + 0x6]\n  4767: s1 = u8 [a0 + 0x7]\n  4770: a3 = a3 << 0x8\n  4773: a3 = a3 | a4\n  4776: a5 = a5 << 0x10\n  4779: s1 = s1 << 0x18\n  4782: a5 = a5 | s1\n  4785: a3 = a3 | a5\n  4788: a3 = a3 << 0x20\n  4791: a2 = a2 | a3\n  4794: a3 = u8 [a0 + 0x19]\n  4797: a4 = u8 [a0 + 0x18]\n  4800: a5 = u8 [a0 + 0x1a]\n  4803: s1 = u8 [a0 + 0x1b]\n  4806: a3 = a3 << 0x8\n  4809: a3 = a3 | a4\n  4812: a5 = a5 << 0x10\n  4815: s1 = s1 << 0x18\n  4818: a5 = a5 | s1\n  4821: a3 = a3 | a5\n  4824: a4 = u8 [a0 + 0x1d]\n  4827: a5 = u8 [a0 + 0x1c]\n  4830: s1 = u8 [a0 + 0x1e]\n  4833: a1 = u8 [a0 + 0x1f]\n  4836: a4 = a4 << 0x8\n  4839: a4 = a4 | a5\n  4842: s1 = s1 << 0x10\n  4845: a1 = a1 << 0x18\n  4848: a1 = a1 | s1\n  4851: a1 = a1 | a4\n  4854: a1 = a1 << 0x20\n  4857: a3 = a3 | a1\n  4860: a1 = u8 [a0 + 0x9]\n  4863: a4 = u8 [a0 + 0x8]\n  4866: a5 = u8 [a0 + 0xa]\n  4869: s1 = u8 [a0 + 0xb]\n  4872: a1 = a1 << 0x8\n  4875: a1 = a1 | a4\n  4878: a5 = a5 << 0x10\n  4881: s1 = s1 << 0x18\n  4884: a5 = a5 | s1\n  4887: a1 = a1 | a5\n  4890: a4 = u8 [a0 + 0xd]\n  4893: a5 = u8 [a0 + 0xc]\n  4896: s1 = u8 [a0 + 0xe]\n  4899: a0 = u8 [a0 + 0xf]\n  4902: a4 = a4 << 0x8\n  4905: a4 = a4 | a5\n  4908: s1 = s1 << 0x10\n  4911: a0 = a0 << 0x18\n  4914: a0 = a0 | s1\n  4917: a0 = a0 | a4\n  4920: a0 = a0 << 0x20\n  4923: a0 = a0 | a1\n  4926: a1 = reverse a0\n  4928: a0 = reverse a3\n  4930: a2 = reverse a2\n  4932: a3 = reverse t0\n  4934: a2 = a2 | a3\n  4937: a3 = a0 | a1\n  4940: a3 = a3 | a2\n  4943: a3 = a3 >> 0x20\n  4946: a1 = a1 | a2\n  4949: a1 = a1 << 0x20\n  4952: a1 = a1 | a3\n  4955: jump @102 if a1 == 0\n      : @99 (gas: 1)\n  4958: trap\n      : @100 (gas: 3)\n  4959: a0 = 0\n  4961: a1 = 0\n  4963: ra = 80, jump @0\n      : @101 [@dyn 40] (gas: 5)\n  4968: i32 a1 = a0 + 0\n  4970: a0 = 0x1\n  4973: a2 = 0\n  4975: ecalli 6 // 'seal_return'\n  4977: fallthrough\n      : @102 (gas: 4)\n  4978: i32 s1 = a0 + 0\n  4980: a1 = 0x20\n  4983: a0 = s1\n  4985: ra = 82, jump @0\n      : @103 [@dyn 41] (gas: 71)\n  4990: a1 = u64 [sp]\n  4992: a1 = reverse a1\n  4994: a2 = u64 [sp + 0x8]\n  4997: a2 = reverse a2\n  4999: a3 = u64 [sp + 0x10]\n  5002: a3 = reverse a3\n  5004: a4 = u64 [sp + 0x18]\n  5007: a4 = reverse a4\n  5009: a5 = a4 >> 0x38\n  5012: u8 [a0 + 0x1f] = a5\n  5015: a5 = a4 >> 0x30\n  5018: u8 [a0 + 0x1e] = a5\n  5021: a5 = a4 >> 0x28\n  5024: u8 [a0 + 0x1d] = a5\n  5027: a5 = a4 >> 0x20\n  5030: u8 [a0 + 0x1c] = a5\n  5033: a5 = a4 >> 0x18\n  5036: u8 [a0 + 0x1b] = a5\n  5039: a5 = a4 >> 0x10\n  5042: u8 [a0 + 0x1a] = a5\n  5045: a5 = a4 >> 0x8\n  5048: u8 [a0 + 0x19] = a5\n  5051: u8 [a0 + 0x18] = a4\n  5054: u8 [a0 + 0x10] = a3\n  5057: a4 = a3 >> 0x38\n  5060: u8 [a0 + 0x17] = a4\n  5063: a4 = a3 >> 0x30\n  5066: u8 [a0 + 0x16] = a4\n  5069: a4 = a3 >> 0x28\n  5072: u8 [a0 + 0x15] = a4\n  5075: a4 = a3 >> 0x20\n  5078: u8 [a0 + 0x14] = a4\n  5081: a4 = a3 >> 0x18\n  5084: u8 [a0 + 0x13] = a4\n  5087: a4 = a3 >> 0x10\n  5090: u8 [a0 + 0x12] = a4\n  5093: a3 = a3 >> 0x8\n  5096: u8 [a0 + 0x11] = a3\n  5099: u8 [a0 + 0x8] = a2\n  5102: a3 = a2 >> 0x38\n  5105: u8 [a0 + 0xf] = a3\n  5108: a3 = a2 >> 0x30\n  5111: u8 [a0 + 0xe] = a3\n  5114: a3 = a2 >> 0x28\n  5117: u8 [a0 + 0xd] = a3\n  5120: a3 = a2 >> 0x20\n  5123: u8 [a0 + 0xc] = a3\n  5126: a3 = a2 >> 0x18\n  5129: u8 [a0 + 0xb] = a3\n  5132: a3 = a2 >> 0x10\n  5135: u8 [a0 + 0xa] = a3\n  5138: a2 = a2 >> 0x8\n  5141: u8 [a0 + 0x9] = a2\n  5144: u8 [a0] = a1\n  5146: a2 = a1 >> 0x38\n  5149: u8 [a0 + 0x7] = a2\n  5152: a2 = a1 >> 0x30\n  5155: u8 [a0 + 0x6] = a2\n  5158: a2 = a1 >> 0x28\n  5161: u8 [a0 + 0x5] = a2\n  5164: a2 = a1 >> 0x20\n  5167: u8 [a0 + 0x4] = a2\n  5170: a2 = a1 >> 0x18\n  5173: u8 [a0 + 0x3] = a2\n  5176: a2 = a1 >> 0x10\n  5179: u8 [a0 + 0x2] = a2\n  5182: a1 = a1 >> 0x8\n  5185: u8 [a0 + 0x1] = a1\n  5188: a1 = 0x20\n  5191: a0 = s1\n  5193: ra = 84, jump @0\n      : @104 [@dyn 42] (gas: 6)\n  5198: i32 a1 = a0 + 0\n  5200: a2 = 0x20\n  5203: a0 = 0\n  5205: ra = 0x56\n  5208: ecalli 6 // 'seal_return'\n  5210: fallthrough\n      : @105 [@dyn 43] (gas: 52)\n  5211: sp = sp + 0xffffffffffffff80\n  5214: u64 [sp + 0x78] = ra\n  5217: u64 [sp + 0x70] = s0\n  5220: u64 [sp + 0x68] = s1\n  5223: s0 = sp + 0x80\n  5227: sp = sp & 0xffffffffffffffe0\n  5230: t2 = u64 [a1 + 0x10]\n  5233: a5 = u64 [a1 + 0x8]\n  5236: t0 = u64 [a2 + 0x8]\n  5239: s1 = u64 [a1]\n  5241: u64 [sp + 0x10] = s1\n  5244: a4 = u64 [a2]\n  5246: u64 [sp + 0x18] = a4\n  5249: ra = u64 [a2 + 0x10]\n  5252: a3 = t0 ^ a5\n  5255: u64 [sp + 0x38] = a3\n  5258: a3 = t0 <u a5\n  5261: a4 = a4 <u s1\n  5264: t1 = u64 [sp + 0x38]\n  5267: a3 = a4 if t1 == 0\n  5270: t1 = a4\n  5272: a1 = u64 [a1 + 0x18]\n  5275: u64 [sp + 0x38] = a1\n  5278: a1 = u64 [a2 + 0x18]\n  5281: u64 [sp + 0x20] = a1\n  5284: a1 = ra - t2\n  5287: a2 = a1 - a3\n  5290: u64 [sp + 0x28] = a2\n  5293: a2 = a1 <u a3\n  5296: u64 [sp + 0x30] = t2\n  5299: a3 = ra <u t2\n  5302: a1 = u64 [sp + 0x38]\n  5305: a4 = u64 [sp + 0x20]\n  5308: a1 = a4 - a1\n  5311: a1 = a1 - a3\n  5314: t2 = a1 - a2\n  5317: s1 = t0 - a5\n  5320: a2 = s1 - t1\n  5323: t0 = u64 [sp + 0x10]\n  5326: a1 = u64 [sp + 0x18]\n  5329: a3 = a1 - t0\n  5332: a4 = a2 >u 0\n  5334: a3 = a3 <u 0x20\n  5337: a3 = a3 ^ 0x1\n  5340: a3 = a4 if a2 != 0\n  5343: a2 = t2 >s 0\n  5345: a1 = u64 [sp + 0x28]\n  5348: a4 = a1 >u 0\n  5350: a4 = a2 if t2 != 0\n  5353: a1 = a1 | t2\n  5356: a3 = a4 if a1 != 0\n  5359: jump @111 if a3 == 0\n      : @106 (gas: 11)\n  5362: s1 = a0\n  5364: a2 = u64 [sp + 0x30]\n  5367: a0 = t0 | a2\n  5370: a1 = u64 [sp + 0x38]\n  5373: a1 = a1 | a5\n  5376: a0 = a0 | a1\n  5379: a0 = a0 >> 0x20\n  5382: a1 = a1 | a2\n  5385: a1 = a1 << 0x20\n  5388: a0 = a0 | a1\n  5391: jump @110 if a0 != 0\n      : @107 (gas: 4)\n  5394: i32 a1 = t0 + 0\n  5396: i32 a0 = sp + 0x40\n  5399: ecalli 1 // 'call_data_load'\n  5401: fallthrough\n      : @108 (gas: 10)\n  5402: a0 = u64 [sp + 0x50]\n  5405: a1 = u64 [sp + 0x58]\n  5408: a2 = 0x100000000\n  5418: a2 = a2 ^ a0\n  5421: a2 = a2 | a1\n  5424: a3 = a0 >> 0x20\n  5427: a3 = a3 <u 0x1\n  5430: a3 = 0 if a1 != 0\n  5432: a3 = 0 if a2 == 0\n  5434: jump @111 if a3 == 0\n      : @109 (gas: 12)\n  5437: a2 = u64 [sp + 0x48]\n  5440: a3 = u64 [sp + 0x40]\n  5443: u64 [s1 + 0x8] = a2\n  5446: u64 [s1] = a3\n  5448: u64 [s1 + 0x10] = a0\n  5451: u64 [s1 + 0x18] = a1\n  5454: sp = s0 + 0xffffffffffffff80\n  5457: ra = u64 [sp + 0x78]\n  5460: s0 = u64 [sp + 0x70]\n  5463: s1 = u64 [sp + 0x68]\n  5466: sp = sp + 0x80\n  5470: ret\n      : @110 (gas: 1)\n  5472: trap\n      : @111 (gas: 3)\n  5473: a0 = 0\n  5475: a1 = 0\n  5477: ra = 88, jump @0\n      : @112 [@dyn 44] (gas: 6)\n  5482: i32 a1 = a0 + 0\n  5484: a0 = 0x1\n  5487: a2 = 0\n  5489: ra = 0x5a\n  5492: ecalli 6 // 'seal_return'\n  5494: fallthrough\n      : @113 [@dyn 45] (gas: 9)\n  5495: a2 = u64 [a1 + 0x18]\n  5498: a3 = u64 [a1 + 0x10]\n  5501: a4 = u64 [a1 + 0x8]\n  5504: a1 = u64 [a1]\n  5506: u64 [a0 + 0x18] = a2\n  5509: u64 [a0 + 0x10] = a3\n  5512: u64 [a0 + 0x8] = a4\n  5515: u64 [a0] = a1\n  5517: ret\n      : @114 (gas: 8)\n  5519: a0 = u64 [sp + 0x30]\n  5522: a1 = u64 [sp + 0x38]\n  5525: a2 = u64 [sp + 0x28]\n  5528: a3 = u64 [sp + 0x20]\n  5531: a1 = a1 | a2\n  5534: a0 = a0 | a3\n  5537: a0 = a0 | a1\n  5540: jump @122 if a0 != 0\n      : @115 (gas: 2)\n  5544: a0 = i32 [0x20004]\n  5549: jump @122 if a0 <=u 35\n      : @116 (gas: 4)\n  5554: i32 a0 = sp + 0x40\n  5557: a1 = 0x4\n  5560: ecalli 1 // 'call_data_load'\n  5562: fallthrough\n      : @117 (gas: 10)\n  5563: a0 = u64 [sp + 0x50]\n  5566: a1 = u64 [sp + 0x58]\n  5569: a2 = 0x100000000\n  5579: a2 = a2 ^ a0\n  5582: a2 = a2 | a1\n  5585: a3 = a0 >> 0x20\n  5588: a3 = a3 <u 0x1\n  5591: a3 = 0 if a1 != 0\n  5593: a3 = 0 if a2 == 0\n  5595: jump @122 if a3 == 0\n      : @118 (gas: 37)\n  5599: a2 = u64 [sp + 0x48]\n  5602: a3 = u64 [sp + 0x40]\n  5605: u64 [sp + 0x8] = a2\n  5608: u64 [sp] = a3\n  5610: u64 [sp + 0x10] = a0\n  5613: a0 = sp\n  5615: u64 [sp + 0x18] = a1\n  5618: ra = 0x5c\n  5621: sp = sp + 0xffffffffffffff20\n  5625: u64 [sp + 0xd8] = ra\n  5629: u64 [sp + 0xd0] = s0\n  5633: u64 [sp + 0xc8] = s1\n  5637: s0 = sp + 0xe0\n  5641: sp = sp & 0xffffffffffffffe0\n  5644: a1 = u64 [a0 + 0x10]\n  5647: u64 [sp + 0x18] = a1\n  5650: a1 = u64 [a0 + 0x8]\n  5653: u64 [sp + 0x10] = a1\n  5656: a0 = u64 [a0]\n  5658: u64 [sp + 0x8] = a0\n  5661: s1 = 0xffffffffffffffff\n  5664: u64 [sp + 152] = 0\n  5668: u64 [sp + 144] = 0\n  5672: u64 [sp + 136] = 0\n  5676: u64 [sp + 128] = 0x1\n  5681: u64 [sp + 184] = 0\n  5685: u64 [sp + 176] = 0\n  5689: u64 [sp + 168] = 0\n  5693: u64 [sp + 160] = 0\n  5697: u32 [sp + 96] = 0x20\n  5701: i32 a1 = sp + 0x80\n  5705: i32 a3 = sp + 0xa0\n  5709: i32 a4 = sp + 0x60\n  5712: a2 = 0xffffffffffffffff\n  5715: a0 = 0\n  5717: ecalli 4 // 'get_storage'\n  5719: jump @252\n      : @119 [@dyn 46] (gas: 3)\n  5722: a0 = 0x40\n  5725: a1 = 0x20\n  5728: ra = 94, jump @0\n      : @120 [@dyn 47] (gas: 100)\n  5733: a1 = u8 [a0 + 0x11]\n  5736: a2 = u8 [a0 + 0x10]\n  5739: a3 = u8 [a0 + 0x12]\n  5742: a4 = u8 [a0 + 0x13]\n  5745: a1 = a1 << 0x8\n  5748: a1 = a1 | a2\n  5751: a3 = a3 << 0x10\n  5754: a4 = a4 << 0x18\n  5757: a3 = a3 | a4\n  5760: a1 = a1 | a3\n  5763: a2 = u8 [a0 + 0x15]\n  5766: a3 = u8 [a0 + 0x14]\n  5769: a4 = u8 [a0 + 0x16]\n  5772: a5 = u8 [a0 + 0x17]\n  5775: a2 = a2 << 0x8\n  5778: a2 = a2 | a3\n  5781: a4 = a4 << 0x10\n  5784: a5 = a5 << 0x18\n  5787: a4 = a4 | a5\n  5790: a2 = a2 | a4\n  5793: a2 = a2 << 0x20\n  5796: t0 = a2 | a1\n  5799: a2 = u8 [a0 + 0x1]\n  5802: a3 = u8 [a0]\n  5804: a4 = u8 [a0 + 0x2]\n  5807: a5 = u8 [a0 + 0x3]\n  5810: a2 = a2 << 0x8\n  5813: a2 = a2 | a3\n  5816: a4 = a4 << 0x10\n  5819: a5 = a5 << 0x18\n  5822: a4 = a4 | a5\n  5825: a2 = a2 | a4\n  5828: a3 = u8 [a0 + 0x5]\n  5831: a4 = u8 [a0 + 0x4]\n  5834: a5 = u8 [a0 + 0x6]\n  5837: a1 = u8 [a0 + 0x7]\n  5840: a3 = a3 << 0x8\n  5843: a3 = a3 | a4\n  5846: a5 = a5 << 0x10\n  5849: a1 = a1 << 0x18\n  5852: a1 = a1 | a5\n  5855: a1 = a1 | a3\n  5858: a1 = a1 << 0x20\n  5861: t1 = a1 | a2\n  5864: a1 = u8 [a0 + 0x19]\n  5867: a3 = u8 [a0 + 0x18]\n  5870: a4 = u8 [a0 + 0x1a]\n  5873: a5 = u8 [a0 + 0x1b]\n  5876: a1 = a1 << 0x8\n  5879: a1 = a1 | a3\n  5882: a4 = a4 << 0x10\n  5885: a5 = a5 << 0x18\n  5888: a4 = a4 | a5\n  5891: a1 = a1 | a4\n  5894: a3 = u8 [a0 + 0x1d]\n  5897: a4 = u8 [a0 + 0x1c]\n  5900: a5 = u8 [a0 + 0x1e]\n  5903: a2 = u8 [a0 + 0x1f]\n  5906: a3 = a3 << 0x8\n  5909: a3 = a3 | a4\n  5912: a5 = a5 << 0x10\n  5915: a2 = a2 << 0x18\n  5918: a2 = a2 | a5\n  5921: a2 = a2 | a3\n  5924: a2 = a2 << 0x20\n  5927: a3 = a2 | a1\n  5930: a1 = u8 [a0 + 0x9]\n  5933: a2 = u8 [a0 + 0x8]\n  5936: a4 = u8 [a0 + 0xa]\n  5939: a5 = u8 [a0 + 0xb]\n  5942: a1 = a1 << 0x8\n  5945: a1 = a1 | a2\n  5948: a4 = a4 << 0x10\n  5951: a5 = a5 << 0x18\n  5954: a4 = a4 | a5\n  5957: a1 = a1 | a4\n  5960: a2 = u8 [a0 + 0xd]\n  5963: a4 = u8 [a0 + 0xc]\n  5966: a5 = u8 [a0 + 0xe]\n  5969: a0 = u8 [a0 + 0xf]\n  5972: a2 = a2 << 0x8\n  5975: a2 = a2 | a4\n  5978: a5 = a5 << 0x10\n  5981: a0 = a0 << 0x18\n  5984: a0 = a0 | a5\n  5987: a0 = a0 | a2\n  5990: a0 = a0 << 0x20\n  5993: a0 = a0 | a1\n  5996: a1 = reverse a0\n  5998: a0 = reverse a3\n  6000: a2 = reverse t1\n  6002: a3 = reverse t0\n  6004: a2 = a2 | a3\n  6007: a3 = a0 | a1\n  6010: a3 = a3 | a2\n  6013: a3 = a3 >> 0x20\n  6016: a1 = a1 | a2\n  6019: a1 = a1 << 0x20\n  6022: a1 = a1 | a3\n  6025: jump @124 if a1 == 0\n      : @121 (gas: 1)\n  6028: trap\n      : @122 (gas: 3)\n  6029: a0 = 0\n  6031: a1 = 0\n  6033: ra = 96, jump @0\n      : @123 [@dyn 48] (gas: 7)\n  6038: i32 a1 = a0 + 0\n  6040: a0 = 0x1\n  6043: a2 = 0\n  6045: ecalli 6 // 'seal_return'\n  6047: i32 a0 = a0 + 0\n  6049: ra = 0x62\n  6052: jump @0\n      : @124 (gas: 2)\n  6055: i32 a0 = a0 + 0\n  6057: ra = 98, jump @0\n      : @125 [@dyn 49] (gas: 6)\n  6062: i32 a1 = a0 + 0\n  6064: a0 = 0\n  6066: a2 = 0\n  6068: ra = 0x64\n  6071: ecalli 6 // 'seal_return'\n  6073: fallthrough\n      : @126 [@dyn 50] (gas: 45)\n  6074: sp = sp + 0xffffffffffffff40\n  6078: u64 [sp + 0xb8] = ra\n  6082: u64 [sp + 0xb0] = s0\n  6086: u64 [sp + 0xa8] = s1\n  6090: s0 = sp + 0xc0\n  6094: sp = sp & 0xffffffffffffffe0\n  6097: ra = u64 [a1 + 0x10]\n  6100: t2 = u64 [a1 + 0x8]\n  6103: t0 = u64 [a2 + 0x8]\n  6106: a5 = u64 [a1]\n  6108: u64 [sp + 0x78] = a5\n  6111: a3 = u64 [a2]\n  6113: u64 [sp + 0x68] = a3\n  6116: a4 = u64 [a2 + 0x10]\n  6119: t1 = t0 ^ t2\n  6122: s1 = t0 <u t2\n  6125: a3 = a3 <u a5\n  6128: s1 = a3 if t1 == 0\n  6131: t1 = u64 [a1 + 0x18]\n  6134: a5 = u64 [a2 + 0x18]\n  6137: a2 = a4 - ra\n  6140: a1 = a2 - s1\n  6143: u64 [sp + 0x70] = a1\n  6146: a1 = a2 <u s1\n  6149: a4 = a4 <u ra\n  6152: u64 [sp + 0x60] = t1\n  6155: a2 = a5 - t1\n  6158: a5 = u64 [sp + 0x78]\n  6161: a2 = a2 - a4\n  6164: a2 = a2 - a1\n  6167: a1 = t0 - t2\n  6170: a1 = a1 - a3\n  6173: a3 = u64 [sp + 0x68]\n  6176: a3 = a3 - a5\n  6179: a4 = a1 >u 0\n  6181: a3 = a3 <u 0x80\n  6185: a3 = a3 ^ 0x1\n  6188: a3 = a4 if a1 != 0\n  6191: s1 = a2 >s 0\n  6193: a1 = u64 [sp + 0x70]\n  6196: a4 = a1 >u 0\n  6198: a4 = s1 if a2 != 0\n  6201: a1 = a1 | a2\n  6204: a3 = a4 if a1 != 0\n  6207: jump @138 if a3 == 0\n      : @127 (gas: 12)\n  6211: s1 = a0\n  6213: a0 = a5 | ra\n  6216: u64 [sp + 0x70] = t2\n  6219: a1 = u64 [sp + 0x60]\n  6222: a1 = t2 | a1\n  6225: a0 = a0 | a1\n  6228: a0 = a0 >> 0x20\n  6231: u64 [sp + 0x58] = ra\n  6234: a1 = a1 | ra\n  6237: a1 = a1 << 0x20\n  6240: a0 = a0 | a1\n  6243: jump @137 if a0 != 0\n      : @128 (gas: 5)\n  6247: i32 a1 = a5 + 0\n  6249: i32 a0 = sp + 0x80\n  6253: u64 [sp + 0x68] = a1\n  6256: ecalli 1 // 'call_data_load'\n  6258: fallthrough\n      : @129 (gas: 10)\n  6259: a3 = u64 [sp + 0x90]\n  6263: a4 = u64 [sp + 0x98]\n  6267: a0 = 0x100000000\n  6277: a1 = a3 ^ a0\n  6280: a1 = a1 | a4\n  6283: a2 = a3 >> 0x20\n  6286: a2 = a2 <u 0x1\n  6289: a2 = 0 if a4 != 0\n  6291: a2 = 0 if a1 == 0\n  6293: jump @138 if a2 == 0\n      : @130 (gas: 13)\n  6297: u64 [sp + 0x48] = a4\n  6300: u64 [sp + 0x50] = a3\n  6303: a1 = u64 [sp + 0x58]\n  6306: a2 = u64 [sp + 0x60]\n  6309: a2 = a2 | a1\n  6312: a0 = 0xffffffe0\n  6322: a1 = u64 [sp + 0x78]\n  6325: a0 = a1 <u a0\n  6328: a1 = u64 [sp + 0x70]\n  6331: a0 = 0 if a1 != 0\n  6333: u64 [sp + 0x60] = a2\n  6336: a0 = 0 if a2 != 0\n  6338: jump @137 if a0 == 0\n      : @131 (gas: 9)\n  6342: a0 = u64 [sp + 0x88]\n  6346: u64 [sp + 0x40] = a0\n  6349: a0 = u64 [sp + 0x80]\n  6353: u64 [sp + 0x58] = a0\n  6356: a0 = u64 [sp + 0x68]\n  6359: i32 a1 = a0 + 0x20\n  6362: i32 a0 = sp + 0x80\n  6366: ecalli 1 // 'call_data_load'\n  6368: fallthrough\n      : @132 (gas: 10)\n  6369: a3 = u64 [sp + 0x90]\n  6373: a4 = u64 [sp + 0x98]\n  6377: a0 = 0x100000000\n  6387: a1 = a3 ^ a0\n  6390: a1 = a1 | a4\n  6393: a2 = a3 >> 0x20\n  6396: a2 = a2 <u 0x1\n  6399: a2 = 0 if a4 != 0\n  6401: a2 = 0 if a1 == 0\n  6403: jump @138 if a2 == 0\n      : @133 (gas: 10)\n  6407: u64 [sp + 0x30] = a4\n  6410: u64 [sp + 0x38] = a3\n  6413: a0 = 0xffffffc0\n  6423: a1 = u64 [sp + 0x78]\n  6426: a0 = a1 <u a0\n  6429: a1 = u64 [sp + 0x70]\n  6432: a0 = 0 if a1 != 0\n  6434: a1 = u64 [sp + 0x60]\n  6437: a0 = 0 if a1 != 0\n  6439: jump @137 if a0 == 0\n      : @134 (gas: 9)\n  6443: a0 = u64 [sp + 0x88]\n  6447: u64 [sp + 0x20] = a0\n  6450: a0 = u64 [sp + 0x80]\n  6454: u64 [sp + 0x28] = a0\n  6457: a0 = u64 [sp + 0x68]\n  6460: i32 a1 = a0 + 0x40\n  6463: i32 a0 = sp + 0x80\n  6467: ecalli 1 // 'call_data_load'\n  6469: fallthrough\n      : @135 (gas: 8)\n  6470: a0 = 0xffffffa0\n  6480: a1 = u64 [sp + 0x78]\n  6483: a0 = a1 <u a0\n  6486: a1 = u64 [sp + 0x70]\n  6489: a0 = 0 if a1 != 0\n  6491: a1 = u64 [sp + 0x60]\n  6494: a0 = 0 if a1 != 0\n  6496: jump @137 if a0 == 0\n      : @136 (gas: 50)\n  6500: a0 = u64 [sp + 0x98]\n  6504: u64 [sp + 0x18] = a0\n  6507: a0 = u64 [sp + 0x90]\n  6511: u64 [sp + 0x60] = a0\n  6514: a0 = u64 [sp + 0x88]\n  6518: u64 [sp + 0x70] = a0\n  6521: a0 = u64 [sp + 0x80]\n  6525: u64 [sp + 0x78] = a0\n  6528: a0 = u64 [sp + 0x68]\n  6531: i32 a1 = a0 + 0x60\n  6534: i32 a0 = sp + 0x80\n  6538: ecalli 1 // 'call_data_load'\n  6540: a0 = u64 [sp + 0x98]\n  6544: a1 = u64 [sp + 0x90]\n  6548: a2 = u64 [sp + 0x88]\n  6552: a3 = u64 [sp + 0x80]\n  6556: u64 [s1 + 0x78] = a0\n  6559: u64 [s1 + 0x70] = a1\n  6562: u64 [s1 + 0x68] = a2\n  6565: u64 [s1 + 0x60] = a3\n  6568: a0 = u64 [sp + 0x18]\n  6571: u64 [s1 + 0x58] = a0\n  6574: a0 = u64 [sp + 0x60]\n  6577: u64 [s1 + 0x50] = a0\n  6580: a0 = u64 [sp + 0x70]\n  6583: u64 [s1 + 0x48] = a0\n  6586: a0 = u64 [sp + 0x78]\n  6589: u64 [s1 + 0x40] = a0\n  6592: a0 = u64 [sp + 0x30]\n  6595: u64 [s1 + 0x38] = a0\n  6598: a0 = u64 [sp + 0x38]\n  6601: u64 [s1 + 0x30] = a0\n  6604: a0 = u64 [sp + 0x20]\n  6607: u64 [s1 + 0x28] = a0\n  6610: a0 = u64 [sp + 0x28]\n  6613: u64 [s1 + 0x20] = a0\n  6616: a0 = u64 [sp + 0x48]\n  6619: u64 [s1 + 0x18] = a0\n  6622: a0 = u64 [sp + 0x50]\n  6625: u64 [s1 + 0x10] = a0\n  6628: a0 = u64 [sp + 0x40]\n  6631: u64 [s1 + 0x8] = a0\n  6634: a0 = u64 [sp + 0x58]\n  6637: u64 [s1] = a0\n  6639: sp = s0 + 0xffffffffffffff40\n  6643: ra = u64 [sp + 0xb8]\n  6647: s0 = u64 [sp + 0xb0]\n  6651: s1 = u64 [sp + 0xa8]\n  6655: sp = sp + 0xc0\n  6659: ret\n      : @137 (gas: 1)\n  6661: trap\n      : @138 (gas: 3)\n  6662: a0 = 0\n  6664: a1 = 0\n  6666: ra = 102, jump @0\n      : @139 [@dyn 51] (gas: 6)\n  6671: i32 a1 = a0 + 0\n  6673: a0 = 0x1\n  6676: a2 = 0\n  6678: ra = 0x68\n  6681: ecalli 6 // 'seal_return'\n  6683: fallthrough\n      : @140 [@dyn 52] (gas: 13)\n  6684: sp = sp + 0xfffffffffffffe40\n  6688: u64 [sp + 0x1b8] = ra\n  6692: u64 [sp + 0x1b0] = s0\n  6696: u64 [sp + 0x1a8] = s1\n  6700: s0 = sp + 0x1c0\n  6704: sp = sp & 0xffffffffffffffe0\n  6707: u64 [sp + 408] = 0\n  6711: u64 [sp + 400] = 0\n  6715: u64 [sp + 392] = 0\n  6719: u64 [sp + 384] = 0\n  6723: i32 a0 = sp + 0x180\n  6727: ecalli 9 // 'value_transferred'\n  6729: fallthrough\n      : @141 (gas: 8)\n  6730: a0 = u64 [sp + 0x190]\n  6734: a1 = u64 [sp + 0x198]\n  6738: a2 = u64 [sp + 0x188]\n  6742: a3 = u64 [sp + 0x180]\n  6746: a1 = a1 | a2\n  6749: a0 = a0 | a3\n  6752: a0 = a0 | a1\n  6755: jump @147 if a0 != 0\n      : @142 (gas: 13)\n  6759: a0 = u32 [0x20004]\n  6764: u64 [sp + 216] = 0\n  6768: u64 [sp + 208] = 0\n  6772: u64 [sp + 200] = 0\n  6776: u64 [sp + 0xc0] = a0\n  6780: u64 [sp + 248] = 0\n  6784: u64 [sp + 240] = 0\n  6788: u64 [sp + 224] = 0x4\n  6793: a0 = sp + 0x100\n  6797: a1 = sp + 0xe0\n  6801: a2 = sp + 0xc0\n  6805: u64 [sp + 232] = 0\n  6809: ra = 106, jump @126\n      : @143 [@dyn 53] (gas: 47)\n  6814: a0 = u64 [sp + 0x100]\n  6818: u64 [sp + 0x38] = a0\n  6821: a0 = u64 [sp + 0x108]\n  6825: u64 [sp + 0x30] = a0\n  6828: a0 = u64 [sp + 0x110]\n  6832: u64 [sp + 0x28] = a0\n  6835: a0 = u64 [sp + 0x118]\n  6839: u64 [sp + 0x20] = a0\n  6842: a0 = u64 [sp + 0x120]\n  6846: u64 [sp + 0x18] = a0\n  6849: ra = u64 [sp + 0x128]\n  6853: t2 = u64 [sp + 0x130]\n  6857: t1 = u64 [sp + 0x138]\n  6861: t0 = u64 [sp + 0x140]\n  6865: s1 = u64 [sp + 0x148]\n  6869: a5 = u64 [sp + 0x150]\n  6873: a4 = u64 [sp + 0x158]\n  6877: a3 = u64 [sp + 0x160]\n  6881: a2 = u64 [sp + 0x168]\n  6885: a1 = u64 [sp + 0x170]\n  6889: a0 = u64 [sp + 0x178]\n  6893: u64 [sp + 0x58] = a0\n  6896: u64 [sp + 0x50] = a1\n  6899: u64 [sp + 0x48] = a2\n  6902: u64 [sp + 0x40] = a3\n  6905: u64 [sp + 0x78] = a4\n  6908: u64 [sp + 0x70] = a5\n  6911: u64 [sp + 0x68] = s1\n  6914: u64 [sp + 0x60] = t0\n  6917: u64 [sp + 0x98] = t1\n  6921: u64 [sp + 0x90] = t2\n  6925: u64 [sp + 0x88] = ra\n  6929: a0 = u64 [sp + 0x18]\n  6932: u64 [sp + 0x80] = a0\n  6936: a0 = u64 [sp + 0x20]\n  6939: u64 [sp + 0xb8] = a0\n  6943: a0 = u64 [sp + 0x28]\n  6946: u64 [sp + 0xb0] = a0\n  6950: a0 = u64 [sp + 0x30]\n  6953: u64 [sp + 0xa8] = a0\n  6957: a0 = sp + 0xa0\n  6961: a1 = sp + 0x80\n  6965: a2 = sp + 0x60\n  6968: a3 = sp + 0x40\n  6971: a4 = u64 [sp + 0x38]\n  6974: u64 [sp + 0xa0] = a4\n  6978: ra = 108, jump @274\n      : @144 [@dyn 54] (gas: 3)\n  6983: a0 = 0x40\n  6986: a1 = 0x20\n  6989: ra = 110, jump @0\n      : @145 [@dyn 55] (gas: 100)\n  6994: a1 = u8 [a0 + 0x11]\n  6997: a2 = u8 [a0 + 0x10]\n  7000: a3 = u8 [a0 + 0x12]\n  7003: a4 = u8 [a0 + 0x13]\n  7006: a1 = a1 << 0x8\n  7009: a1 = a1 | a2\n  7012: a3 = a3 << 0x10\n  7015: a4 = a4 << 0x18\n  7018: a3 = a3 | a4\n  7021: a1 = a1 | a3\n  7024: a2 = u8 [a0 + 0x15]\n  7027: a3 = u8 [a0 + 0x14]\n  7030: a4 = u8 [a0 + 0x16]\n  7033: a5 = u8 [a0 + 0x17]\n  7036: a2 = a2 << 0x8\n  7039: a2 = a2 | a3\n  7042: a4 = a4 << 0x10\n  7045: a5 = a5 << 0x18\n  7048: a4 = a4 | a5\n  7051: a2 = a2 | a4\n  7054: a2 = a2 << 0x20\n  7057: t0 = a2 | a1\n  7060: a2 = u8 [a0 + 0x1]\n  7063: a3 = u8 [a0]\n  7065: a4 = u8 [a0 + 0x2]\n  7068: a5 = u8 [a0 + 0x3]\n  7071: a2 = a2 << 0x8\n  7074: a2 = a2 | a3\n  7077: a4 = a4 << 0x10\n  7080: a5 = a5 << 0x18\n  7083: a4 = a4 | a5\n  7086: a2 = a2 | a4\n  7089: a3 = u8 [a0 + 0x5]\n  7092: a4 = u8 [a0 + 0x4]\n  7095: a5 = u8 [a0 + 0x6]\n  7098: s1 = u8 [a0 + 0x7]\n  7101: a3 = a3 << 0x8\n  7104: a3 = a3 | a4\n  7107: a5 = a5 << 0x10\n  7110: s1 = s1 << 0x18\n  7113: a5 = a5 | s1\n  7116: a3 = a3 | a5\n  7119: a3 = a3 << 0x20\n  7122: a2 = a2 | a3\n  7125: a3 = u8 [a0 + 0x19]\n  7128: a4 = u8 [a0 + 0x18]\n  7131: a5 = u8 [a0 + 0x1a]\n  7134: s1 = u8 [a0 + 0x1b]\n  7137: a3 = a3 << 0x8\n  7140: a3 = a3 | a4\n  7143: a5 = a5 << 0x10\n  7146: s1 = s1 << 0x18\n  7149: a5 = a5 | s1\n  7152: a3 = a3 | a5\n  7155: a4 = u8 [a0 + 0x1d]\n  7158: a5 = u8 [a0 + 0x1c]\n  7161: s1 = u8 [a0 + 0x1e]\n  7164: a1 = u8 [a0 + 0x1f]\n  7167: a4 = a4 << 0x8\n  7170: a4 = a4 | a5\n  7173: s1 = s1 << 0x10\n  7176: a1 = a1 << 0x18\n  7179: a1 = a1 | s1\n  7182: a1 = a1 | a4\n  7185: a1 = a1 << 0x20\n  7188: a3 = a3 | a1\n  7191: a1 = u8 [a0 + 0x9]\n  7194: a4 = u8 [a0 + 0x8]\n  7197: a5 = u8 [a0 + 0xa]\n  7200: s1 = u8 [a0 + 0xb]\n  7203: a1 = a1 << 0x8\n  7206: a1 = a1 | a4\n  7209: a5 = a5 << 0x10\n  7212: s1 = s1 << 0x18\n  7215: a5 = a5 | s1\n  7218: a1 = a1 | a5\n  7221: a4 = u8 [a0 + 0xd]\n  7224: a5 = u8 [a0 + 0xc]\n  7227: s1 = u8 [a0 + 0xe]\n  7230: a0 = u8 [a0 + 0xf]\n  7233: a4 = a4 << 0x8\n  7236: a4 = a4 | a5\n  7239: s1 = s1 << 0x10\n  7242: a0 = a0 << 0x18\n  7245: a0 = a0 | s1\n  7248: a0 = a0 | a4\n  7251: a0 = a0 << 0x20\n  7254: a0 = a0 | a1\n  7257: a1 = reverse a0\n  7259: a0 = reverse a3\n  7261: a2 = reverse a2\n  7263: a3 = reverse t0\n  7265: a2 = a2 | a3\n  7268: a3 = a0 | a1\n  7271: a3 = a3 | a2\n  7274: a3 = a3 >> 0x20\n  7277: a1 = a1 | a2\n  7280: a1 = a1 << 0x20\n  7283: a1 = a1 | a3\n  7286: jump @149 if a1 == 0\n      : @146 (gas: 1)\n  7289: trap\n      : @147 (gas: 3)\n  7290: a0 = 0\n  7292: a1 = 0\n  7294: ra = 112, jump @0\n      : @148 [@dyn 56] (gas: 7)\n  7299: i32 a1 = a0 + 0\n  7301: a0 = 0x1\n  7304: a2 = 0\n  7306: ecalli 6 // 'seal_return'\n  7308: i32 a0 = a0 + 0\n  7310: ra = 0x72\n  7313: jump @0\n      : @149 (gas: 2)\n  7316: i32 a0 = a0 + 0\n  7318: ra = 114, jump @0\n      : @150 [@dyn 57] (gas: 6)\n  7323: i32 a1 = a0 + 0\n  7325: a0 = 0\n  7327: a2 = 0\n  7329: ra = 0x74\n  7332: ecalli 6 // 'seal_return'\n  7334: fallthrough\n      : @151 [@dyn 58] (gas: 6)\n  7335: u64 [a0 + 24] = 0\n  7338: u64 [a0 + 16] = 0\n  7341: u64 [a0 + 8] = 0\n  7344: a1 = 0x9\n  7347: u64 [a0] = a1\n  7349: ret\n      : @152 (gas: 19)\n  7351: sp = sp + 0xfffffffffffffea0\n  7355: u64 [sp + 0x158] = ra\n  7359: u64 [sp + 0x150] = s0\n  7363: u64 [sp + 0x148] = s1\n  7367: a4 = u64 [a0 + 0x10]\n  7370: a5 = u64 [a0 + 0x18]\n  7373: a2 = u64 [a0 + 0x8]\n  7376: a3 = u64 [a0]\n  7378: u64 [sp + 0x138] = a2\n  7382: u64 [sp + 0x118] = a5\n  7386: a0 = a2 | a5\n  7389: a2 = a3 | a4\n  7392: a2 = a2 | a0\n  7395: a2 = a2 >> 0x20\n  7398: u64 [sp + 0x120] = a4\n  7402: a0 = a0 | a4\n  7405: a0 = a0 << 0x20\n  7408: a0 = a0 | a2\n  7411: jump @154 if a0 == 0\n      : @153 (gas: 1)\n  7414: jump @191\n      : @154 (gas: 10)\n  7417: a0 = u64 [a1 + 0x18]\n  7420: u64 [sp + 0x108] = a0\n  7424: s0 = u64 [a1 + 0x10]\n  7427: s1 = u64 [a1 + 0x8]\n  7430: a0 = u64 [a1]\n  7432: u64 [sp + 0x140] = a0\n  7436: u64 [sp + 0x130] = a3\n  7440: i32 a0 = a3 + 0\n  7442: a1 = 0x20\n  7445: ra = 118, jump @0\n      : @155 [@dyn 59] (gas: 12)\n  7450: a3 = u64 [sp + 0x140]\n  7454: a1 = a3 | s0\n  7457: u64 [sp + 0x128] = s1\n  7461: a2 = u64 [sp + 0x108]\n  7465: a2 = a2 | s1\n  7468: a1 = a1 | a2\n  7471: a1 = a1 >> 0x20\n  7474: u64 [sp + 0xf8] = s0\n  7478: a2 = a2 | s0\n  7481: a2 = a2 << 0x20\n  7484: a1 = a1 | a2\n  7487: jump @157 if a1 == 0\n      : @156 (gas: 1)\n  7490: jump @191\n      : @157 (gas: 65)\n  7493: a1 = u8 [a0]\n  7495: u64 [sp + 0x100] = a1\n  7499: a1 = u8 [a0 + 0x1]\n  7502: u64 [sp + 0x110] = a1\n  7506: a1 = u8 [a0 + 0x2]\n  7509: u64 [sp + 0xf0] = a1\n  7513: a1 = u8 [a0 + 0x3]\n  7516: u64 [sp + 0xe8] = a1\n  7520: a1 = u8 [a0 + 0x4]\n  7523: u64 [sp + 0xe0] = a1\n  7527: a1 = u8 [a0 + 0x5]\n  7530: u64 [sp + 0xd8] = a1\n  7534: a1 = u8 [a0 + 0x6]\n  7537: u64 [sp + 0xd0] = a1\n  7541: a1 = u8 [a0 + 0x7]\n  7544: u64 [sp + 0xc8] = a1\n  7548: a1 = u8 [a0 + 0x8]\n  7551: u64 [sp + 0xc0] = a1\n  7555: a1 = u8 [a0 + 0x9]\n  7558: u64 [sp + 0xb8] = a1\n  7562: a1 = u8 [a0 + 0xa]\n  7565: u64 [sp + 0xb0] = a1\n  7569: a1 = u8 [a0 + 0xb]\n  7572: u64 [sp + 0xa8] = a1\n  7576: a1 = u8 [a0 + 0xc]\n  7579: u64 [sp + 0xa0] = a1\n  7583: a1 = u8 [a0 + 0xd]\n  7586: u64 [sp + 0x98] = a1\n  7590: a1 = u8 [a0 + 0xe]\n  7593: u64 [sp + 0x90] = a1\n  7597: a1 = u8 [a0 + 0xf]\n  7600: u64 [sp + 0x88] = a1\n  7604: a1 = u8 [a0 + 0x10]\n  7607: u64 [sp + 0x80] = a1\n  7611: a1 = u8 [a0 + 0x11]\n  7614: u64 [sp + 0x78] = a1\n  7617: a1 = u8 [a0 + 0x12]\n  7620: u64 [sp + 0x70] = a1\n  7623: a1 = u8 [a0 + 0x13]\n  7626: u64 [sp + 0x68] = a1\n  7629: a1 = u8 [a0 + 0x14]\n  7632: u64 [sp + 0x60] = a1\n  7635: a1 = u8 [a0 + 0x15]\n  7638: u64 [sp + 0x58] = a1\n  7641: a1 = u8 [a0 + 0x16]\n  7644: u64 [sp + 0x50] = a1\n  7647: a1 = u8 [a0 + 0x17]\n  7650: u64 [sp + 0x48] = a1\n  7653: a1 = u8 [a0 + 0x18]\n  7656: u64 [sp + 0x40] = a1\n  7659: a1 = u8 [a0 + 0x19]\n  7662: u64 [sp + 0x38] = a1\n  7665: a1 = u8 [a0 + 0x1a]\n  7668: u64 [sp + 0x30] = a1\n  7671: a1 = u8 [a0 + 0x1b]\n  7674: u64 [sp + 0x28] = a1\n  7677: a1 = u8 [a0 + 0x1c]\n  7680: u64 [sp + 0x20] = a1\n  7683: a1 = u8 [a0 + 0x1d]\n  7686: u64 [sp + 0x18] = a1\n  7689: s1 = u8 [a0 + 0x1e]\n  7692: s0 = u8 [a0 + 0x1f]\n  7695: i32 a0 = a3 + 0\n  7697: a1 = 0x20\n  7700: ra = 120, jump @0\n      : @158 [@dyn 60] (gas: 79)\n  7705: u8 [a0 + 0x1f] = s0\n  7708: u8 [a0 + 0x1e] = s1\n  7711: a1 = u64 [sp + 0x18]\n  7714: u8 [a0 + 0x1d] = a1\n  7717: a1 = u64 [sp + 0x20]\n  7720: u8 [a0 + 0x1c] = a1\n  7723: a1 = u64 [sp + 0x28]\n  7726: u8 [a0 + 0x1b] = a1\n  7729: a1 = u64 [sp + 0x30]\n  7732: u8 [a0 + 0x1a] = a1\n  7735: a1 = u64 [sp + 0x38]\n  7738: u8 [a0 + 0x19] = a1\n  7741: a1 = u64 [sp + 0x40]\n  7744: u8 [a0 + 0x18] = a1\n  7747: a1 = u64 [sp + 0x48]\n  7750: u8 [a0 + 0x17] = a1\n  7753: a1 = u64 [sp + 0x50]\n  7756: u8 [a0 + 0x16] = a1\n  7759: a1 = u64 [sp + 0x58]\n  7762: u8 [a0 + 0x15] = a1\n  7765: a1 = u64 [sp + 0x60]\n  7768: u8 [a0 + 0x14] = a1\n  7771: a1 = u64 [sp + 0x68]\n  7774: u8 [a0 + 0x13] = a1\n  7777: a1 = u64 [sp + 0x70]\n  7780: u8 [a0 + 0x12] = a1\n  7783: a1 = u64 [sp + 0x78]\n  7786: u8 [a0 + 0x11] = a1\n  7789: a1 = u64 [sp + 0x80]\n  7793: u8 [a0 + 0x10] = a1\n  7796: a1 = u64 [sp + 0x88]\n  7800: u8 [a0 + 0xf] = a1\n  7803: a1 = u64 [sp + 0x90]\n  7807: u8 [a0 + 0xe] = a1\n  7810: a1 = u64 [sp + 0x98]\n  7814: u8 [a0 + 0xd] = a1\n  7817: a1 = u64 [sp + 0xa0]\n  7821: u8 [a0 + 0xc] = a1\n  7824: a1 = u64 [sp + 0xa8]\n  7828: u8 [a0 + 0xb] = a1\n  7831: a1 = u64 [sp + 0xb0]\n  7835: u8 [a0 + 0xa] = a1\n  7838: a1 = u64 [sp + 0xb8]\n  7842: u8 [a0 + 0x9] = a1\n  7845: a1 = u64 [sp + 0xc0]\n  7849: u8 [a0 + 0x8] = a1\n  7852: a1 = u64 [sp + 0xc8]\n  7856: u8 [a0 + 0x7] = a1\n  7859: a1 = u64 [sp + 0xd0]\n  7863: u8 [a0 + 0x6] = a1\n  7866: a1 = u64 [sp + 0xd8]\n  7870: u8 [a0 + 0x5] = a1\n  7873: a1 = u64 [sp + 0xe0]\n  7877: u8 [a0 + 0x4] = a1\n  7880: a1 = u64 [sp + 0xe8]\n  7884: u8 [a0 + 0x3] = a1\n  7887: a1 = u64 [sp + 0xf0]\n  7891: u8 [a0 + 0x2] = a1\n  7894: a1 = u64 [sp + 0x110]\n  7898: u8 [a0 + 0x1] = a1\n  7901: a3 = u64 [sp + 0x120]\n  7905: a1 = a3 >u 0\n  7907: a5 = u64 [sp + 0x118]\n  7911: a4 = a5 >u 0\n  7913: a4 = a1 if a5 == 0\n  7916: s0 = 0xffffffdf\n  7926: a2 = u64 [sp + 0x130]\n  7930: a1 = s0 <u a2\n  7933: a5 = a5 | a3\n  7936: a3 = u64 [sp + 0x138]\n  7940: s1 = a3 >u 0\n  7942: u64 [sp + 0x110] = s1\n  7946: a1 = s1 if a3 != 0\n  7949: u64 [sp + 0x120] = a4\n  7953: u64 [sp + 0x118] = a5\n  7957: a1 = a4 if a5 != 0\n  7960: a3 = u64 [sp + 0x100]\n  7964: u8 [a0] = a3\n  7966: jump @191 if a1 != 0\n      : @159 (gas: 3)\n  7970: i32 a0 = a2 + 0x20\n  7973: a1 = 0x20\n  7976: ra = 122, jump @0\n      : @160 [@dyn 61] (gas: 16)\n  7981: a2 = u64 [sp + 0xf8]\n  7985: a1 = a2 >u 0\n  7987: s1 = u64 [sp + 0x108]\n  7991: a4 = s1 >u 0\n  7993: a4 = a1 if s1 == 0\n  7996: t0 = u64 [sp + 0x140]\n  8000: a1 = s0 <u t0\n  8003: a3 = u64 [sp + 0x128]\n  8007: a5 = a3 >u 0\n  8009: u64 [sp + 0x100] = a5\n  8013: a1 = a5 if a3 != 0\n  8016: a3 = a2 | s1\n  8019: u64 [sp + 0x108] = a4\n  8023: u64 [sp + 0xf8] = a3\n  8027: a1 = a4 if a3 != 0\n  8030: jump @191 if a1 != 0\n      : @161 (gas: 65)\n  8034: a1 = u8 [a0]\n  8036: u64 [sp + 0xf0] = a1\n  8040: a1 = u8 [a0 + 0x1]\n  8043: u64 [sp + 0xe8] = a1\n  8047: a1 = u8 [a0 + 0x2]\n  8050: u64 [sp + 0xe0] = a1\n  8054: a1 = u8 [a0 + 0x3]\n  8057: u64 [sp + 0xd8] = a1\n  8061: a1 = u8 [a0 + 0x4]\n  8064: u64 [sp + 0xd0] = a1\n  8068: a1 = u8 [a0 + 0x5]\n  8071: u64 [sp + 0xc8] = a1\n  8075: a1 = u8 [a0 + 0x6]\n  8078: u64 [sp + 0xc0] = a1\n  8082: a1 = u8 [a0 + 0x7]\n  8085: u64 [sp + 0xb8] = a1\n  8089: a1 = u8 [a0 + 0x8]\n  8092: u64 [sp + 0xb0] = a1\n  8096: a1 = u8 [a0 + 0x9]\n  8099: u64 [sp + 0xa8] = a1\n  8103: a1 = u8 [a0 + 0xa]\n  8106: u64 [sp + 0xa0] = a1\n  8110: a1 = u8 [a0 + 0xb]\n  8113: u64 [sp + 0x98] = a1\n  8117: a1 = u8 [a0 + 0xc]\n  8120: u64 [sp + 0x90] = a1\n  8124: a1 = u8 [a0 + 0xd]\n  8127: u64 [sp + 0x88] = a1\n  8131: a1 = u8 [a0 + 0xe]\n  8134: u64 [sp + 0x80] = a1\n  8138: a1 = u8 [a0 + 0xf]\n  8141: u64 [sp + 0x78] = a1\n  8144: a1 = u8 [a0 + 0x10]\n  8147: u64 [sp + 0x70] = a1\n  8150: a1 = u8 [a0 + 0x11]\n  8153: u64 [sp + 0x68] = a1\n  8156: a1 = u8 [a0 + 0x12]\n  8159: u64 [sp + 0x60] = a1\n  8162: a1 = u8 [a0 + 0x13]\n  8165: u64 [sp + 0x58] = a1\n  8168: a1 = u8 [a0 + 0x14]\n  8171: u64 [sp + 0x50] = a1\n  8174: a1 = u8 [a0 + 0x15]\n  8177: u64 [sp + 0x48] = a1\n  8180: a1 = u8 [a0 + 0x16]\n  8183: u64 [sp + 0x40] = a1\n  8186: a1 = u8 [a0 + 0x17]\n  8189: u64 [sp + 0x38] = a1\n  8192: a1 = u8 [a0 + 0x18]\n  8195: u64 [sp + 0x30] = a1\n  8198: a1 = u8 [a0 + 0x19]\n  8201: u64 [sp + 0x28] = a1\n  8204: a1 = u8 [a0 + 0x1a]\n  8207: u64 [sp + 0x20] = a1\n  8210: a1 = u8 [a0 + 0x1b]\n  8213: u64 [sp + 0x18] = a1\n  8216: a1 = u8 [a0 + 0x1c]\n  8219: u64 [sp + 0x10] = a1\n  8222: a1 = u8 [a0 + 0x1d]\n  8225: u64 [sp + 0x8] = a1\n  8228: s0 = u8 [a0 + 0x1e]\n  8231: s1 = u8 [a0 + 0x1f]\n  8234: i32 a0 = t0 + 0x20\n  8237: a1 = 0x20\n  8240: ra = 124, jump @0\n      : @162 [@dyn 62] (gas: 72)\n  8245: u8 [a0 + 0x1f] = s1\n  8248: u8 [a0 + 0x1e] = s0\n  8251: a1 = u64 [sp + 0x8]\n  8254: u8 [a0 + 0x1d] = a1\n  8257: a1 = u64 [sp + 0x10]\n  8260: u8 [a0 + 0x1c] = a1\n  8263: a1 = u64 [sp + 0x18]\n  8266: u8 [a0 + 0x1b] = a1\n  8269: a1 = u64 [sp + 0x20]\n  8272: u8 [a0 + 0x1a] = a1\n  8275: a1 = u64 [sp + 0x28]\n  8278: u8 [a0 + 0x19] = a1\n  8281: a1 = u64 [sp + 0x30]\n  8284: u8 [a0 + 0x18] = a1\n  8287: a1 = u64 [sp + 0x38]\n  8290: u8 [a0 + 0x17] = a1\n  8293: a1 = u64 [sp + 0x40]\n  8296: u8 [a0 + 0x16] = a1\n  8299: a1 = u64 [sp + 0x48]\n  8302: u8 [a0 + 0x15] = a1\n  8305: a1 = u64 [sp + 0x50]\n  8308: u8 [a0 + 0x14] = a1\n  8311: a1 = u64 [sp + 0x58]\n  8314: u8 [a0 + 0x13] = a1\n  8317: a1 = u64 [sp + 0x60]\n  8320: u8 [a0 + 0x12] = a1\n  8323: a1 = u64 [sp + 0x68]\n  8326: u8 [a0 + 0x11] = a1\n  8329: a1 = u64 [sp + 0x70]\n  8332: u8 [a0 + 0x10] = a1\n  8335: a1 = u64 [sp + 0x78]\n  8338: u8 [a0 + 0xf] = a1\n  8341: a1 = u64 [sp + 0x80]\n  8345: u8 [a0 + 0xe] = a1\n  8348: a1 = u64 [sp + 0x88]\n  8352: u8 [a0 + 0xd] = a1\n  8355: a1 = u64 [sp + 0x90]\n  8359: u8 [a0 + 0xc] = a1\n  8362: a1 = u64 [sp + 0x98]\n  8366: u8 [a0 + 0xb] = a1\n  8369: a1 = u64 [sp + 0xa0]\n  8373: u8 [a0 + 0xa] = a1\n  8376: a1 = u64 [sp + 0xa8]\n  8380: u8 [a0 + 0x9] = a1\n  8383: a1 = u64 [sp + 0xb0]\n  8387: u8 [a0 + 0x8] = a1\n  8390: a1 = u64 [sp + 0xb8]\n  8394: u8 [a0 + 0x7] = a1\n  8397: a1 = u64 [sp + 0xc0]\n  8401: u8 [a0 + 0x6] = a1\n  8404: a1 = u64 [sp + 0xc8]\n  8408: u8 [a0 + 0x5] = a1\n  8411: a1 = u64 [sp + 0xd0]\n  8415: u8 [a0 + 0x4] = a1\n  8418: a1 = u64 [sp + 0xd8]\n  8422: u8 [a0 + 0x3] = a1\n  8425: a1 = u64 [sp + 0xe0]\n  8429: u8 [a0 + 0x2] = a1\n  8432: a1 = u64 [sp + 0xe8]\n  8436: u8 [a0 + 0x1] = a1\n  8439: s0 = 0xffffffbf\n  8449: a2 = u64 [sp + 0x130]\n  8453: a1 = s0 <u a2\n  8456: a3 = u64 [sp + 0x138]\n  8460: a4 = u64 [sp + 0x110]\n  8464: a1 = a4 if a3 != 0\n  8467: a3 = u64 [sp + 0x120]\n  8471: a4 = u64 [sp + 0x118]\n  8475: a1 = a3 if a4 != 0\n  8478: a3 = u64 [sp + 0xf0]\n  8482: u8 [a0] = a3\n  8484: jump @191 if a1 != 0\n      : @163 (gas: 3)\n  8488: i32 a0 = a2 + 0x40\n  8491: a1 = 0x20\n  8494: ra = 126, jump @0\n      : @164 [@dyn 63] (gas: 9)\n  8499: a2 = u64 [sp + 0x140]\n  8503: a1 = s0 <u a2\n  8506: a3 = u64 [sp + 0x128]\n  8510: a4 = u64 [sp + 0x100]\n  8514: a1 = a4 if a3 != 0\n  8517: a3 = u64 [sp + 0x108]\n  8521: a4 = u64 [sp + 0xf8]\n  8525: a1 = a3 if a4 != 0\n  8528: jump @191 if a1 != 0\n      : @165 (gas: 65)\n  8532: a1 = u8 [a0]\n  8534: u64 [sp + 0xf0] = a1\n  8538: a1 = u8 [a0 + 0x1]\n  8541: u64 [sp + 0xe8] = a1\n  8545: a1 = u8 [a0 + 0x2]\n  8548: u64 [sp + 0xe0] = a1\n  8552: a1 = u8 [a0 + 0x3]\n  8555: u64 [sp + 0xd8] = a1\n  8559: a1 = u8 [a0 + 0x4]\n  8562: u64 [sp + 0xd0] = a1\n  8566: a1 = u8 [a0 + 0x5]\n  8569: u64 [sp + 0xc8] = a1\n  8573: a1 = u8 [a0 + 0x6]\n  8576: u64 [sp + 0xc0] = a1\n  8580: a1 = u8 [a0 + 0x7]\n  8583: u64 [sp + 0xb8] = a1\n  8587: a1 = u8 [a0 + 0x8]\n  8590: u64 [sp + 0xb0] = a1\n  8594: a1 = u8 [a0 + 0x9]\n  8597: u64 [sp + 0xa8] = a1\n  8601: a1 = u8 [a0 + 0xa]\n  8604: u64 [sp + 0xa0] = a1\n  8608: a1 = u8 [a0 + 0xb]\n  8611: u64 [sp + 0x98] = a1\n  8615: a1 = u8 [a0 + 0xc]\n  8618: u64 [sp + 0x90] = a1\n  8622: a1 = u8 [a0 + 0xd]\n  8625: u64 [sp + 0x88] = a1\n  8629: a1 = u8 [a0 + 0xe]\n  8632: u64 [sp + 0x80] = a1\n  8636: a1 = u8 [a0 + 0xf]\n  8639: u64 [sp + 0x78] = a1\n  8642: a1 = u8 [a0 + 0x10]\n  8645: u64 [sp + 0x70] = a1\n  8648: a1 = u8 [a0 + 0x11]\n  8651: u64 [sp + 0x68] = a1\n  8654: a1 = u8 [a0 + 0x12]\n  8657: u64 [sp + 0x60] = a1\n  8660: a1 = u8 [a0 + 0x13]\n  8663: u64 [sp + 0x58] = a1\n  8666: a1 = u8 [a0 + 0x14]\n  8669: u64 [sp + 0x50] = a1\n  8672: a1 = u8 [a0 + 0x15]\n  8675: u64 [sp + 0x48] = a1\n  8678: a1 = u8 [a0 + 0x16]\n  8681: u64 [sp + 0x40] = a1\n  8684: a1 = u8 [a0 + 0x17]\n  8687: u64 [sp + 0x38] = a1\n  8690: a1 = u8 [a0 + 0x18]\n  8693: u64 [sp + 0x30] = a1\n  8696: a1 = u8 [a0 + 0x19]\n  8699: u64 [sp + 0x28] = a1\n  8702: a1 = u8 [a0 + 0x1a]\n  8705: u64 [sp + 0x20] = a1\n  8708: a1 = u8 [a0 + 0x1b]\n  8711: u64 [sp + 0x18] = a1\n  8714: a1 = u8 [a0 + 0x1c]\n  8717: u64 [sp + 0x10] = a1\n  8720: a1 = u8 [a0 + 0x1d]\n  8723: u64 [sp + 0x8] = a1\n  8726: s0 = u8 [a0 + 0x1e]\n  8729: s1 = u8 [a0 + 0x1f]\n  8732: i32 a0 = a2 + 0x40\n  8735: a1 = 0x20\n  8738: ra = 128, jump @0\n      : @166 [@dyn 64] (gas: 72)\n  8744: u8 [a0 + 0x1f] = s1\n  8747: u8 [a0 + 0x1e] = s0\n  8750: a1 = u64 [sp + 0x8]\n  8753: u8 [a0 + 0x1d] = a1\n  8756: a1 = u64 [sp + 0x10]\n  8759: u8 [a0 + 0x1c] = a1\n  8762: a1 = u64 [sp + 0x18]\n  8765: u8 [a0 + 0x1b] = a1\n  8768: a1 = u64 [sp + 0x20]\n  8771: u8 [a0 + 0x1a] = a1\n  8774: a1 = u64 [sp + 0x28]\n  8777: u8 [a0 + 0x19] = a1\n  8780: a1 = u64 [sp + 0x30]\n  8783: u8 [a0 + 0x18] = a1\n  8786: a1 = u64 [sp + 0x38]\n  8789: u8 [a0 + 0x17] = a1\n  8792: a1 = u64 [sp + 0x40]\n  8795: u8 [a0 + 0x16] = a1\n  8798: a1 = u64 [sp + 0x48]\n  8801: u8 [a0 + 0x15] = a1\n  8804: a1 = u64 [sp + 0x50]\n  8807: u8 [a0 + 0x14] = a1\n  8810: a1 = u64 [sp + 0x58]\n  8813: u8 [a0 + 0x13] = a1\n  8816: a1 = u64 [sp + 0x60]\n  8819: u8 [a0 + 0x12] = a1\n  8822: a1 = u64 [sp + 0x68]\n  8825: u8 [a0 + 0x11] = a1\n  8828: a1 = u64 [sp + 0x70]\n  8831: u8 [a0 + 0x10] = a1\n  8834: a1 = u64 [sp + 0x78]\n  8837: u8 [a0 + 0xf] = a1\n  8840: a1 = u64 [sp + 0x80]\n  8844: u8 [a0 + 0xe] = a1\n  8847: a1 = u64 [sp + 0x88]\n  8851: u8 [a0 + 0xd] = a1\n  8854: a1 = u64 [sp + 0x90]\n  8858: u8 [a0 + 0xc] = a1\n  8861: a1 = u64 [sp + 0x98]\n  8865: u8 [a0 + 0xb] = a1\n  8868: a1 = u64 [sp + 0xa0]\n  8872: u8 [a0 + 0xa] = a1\n  8875: a1 = u64 [sp + 0xa8]\n  8879: u8 [a0 + 0x9] = a1\n  8882: a1 = u64 [sp + 0xb0]\n  8886: u8 [a0 + 0x8] = a1\n  8889: a1 = u64 [sp + 0xb8]\n  8893: u8 [a0 + 0x7] = a1\n  8896: a1 = u64 [sp + 0xc0]\n  8900: u8 [a0 + 0x6] = a1\n  8903: a1 = u64 [sp + 0xc8]\n  8907: u8 [a0 + 0x5] = a1\n  8910: a1 = u64 [sp + 0xd0]\n  8914: u8 [a0 + 0x4] = a1\n  8917: a1 = u64 [sp + 0xd8]\n  8921: u8 [a0 + 0x3] = a1\n  8924: a1 = u64 [sp + 0xe0]\n  8928: u8 [a0 + 0x2] = a1\n  8931: a1 = u64 [sp + 0xe8]\n  8935: u8 [a0 + 0x1] = a1\n  8938: s0 = 0xffffff9f\n  8948: a2 = u64 [sp + 0x130]\n  8952: a1 = s0 <u a2\n  8955: a3 = u64 [sp + 0x138]\n  8959: a4 = u64 [sp + 0x110]\n  8963: a1 = a4 if a3 != 0\n  8966: a3 = u64 [sp + 0x120]\n  8970: a4 = u64 [sp + 0x118]\n  8974: a1 = a3 if a4 != 0\n  8977: a3 = u64 [sp + 0xf0]\n  8981: u8 [a0] = a3\n  8983: jump @191 if a1 != 0\n      : @167 (gas: 3)\n  8987: i32 a0 = a2 + 0x60\n  8990: a1 = 0x20\n  8993: ra = 130, jump @0\n      : @168 [@dyn 65] (gas: 9)\n  8999: a2 = u64 [sp + 0x140]\n  9003: a1 = s0 <u a2\n  9006: a3 = u64 [sp + 0x128]\n  9010: a4 = u64 [sp + 0x100]\n  9014: a1 = a4 if a3 != 0\n  9017: a3 = u64 [sp + 0x108]\n  9021: a4 = u64 [sp + 0xf8]\n  9025: a1 = a3 if a4 != 0\n  9028: jump @191 if a1 != 0\n      : @169 (gas: 65)\n  9032: a1 = u8 [a0]\n  9034: u64 [sp + 0xf0] = a1\n  9038: a1 = u8 [a0 + 0x1]\n  9041: u64 [sp + 0xe8] = a1\n  9045: a1 = u8 [a0 + 0x2]\n  9048: u64 [sp + 0xe0] = a1\n  9052: a1 = u8 [a0 + 0x3]\n  9055: u64 [sp + 0xd8] = a1\n  9059: a1 = u8 [a0 + 0x4]\n  9062: u64 [sp + 0xd0] = a1\n  9066: a1 = u8 [a0 + 0x5]\n  9069: u64 [sp + 0xc8] = a1\n  9073: a1 = u8 [a0 + 0x6]\n  9076: u64 [sp + 0xc0] = a1\n  9080: a1 = u8 [a0 + 0x7]\n  9083: u64 [sp + 0xb8] = a1\n  9087: a1 = u8 [a0 + 0x8]\n  9090: u64 [sp + 0xb0] = a1\n  9094: a1 = u8 [a0 + 0x9]\n  9097: u64 [sp + 0xa8] = a1\n  9101: a1 = u8 [a0 + 0xa]\n  9104: u64 [sp + 0xa0] = a1\n  9108: a1 = u8 [a0 + 0xb]\n  9111: u64 [sp + 0x98] = a1\n  9115: a1 = u8 [a0 + 0xc]\n  9118: u64 [sp + 0x90] = a1\n  9122: a1 = u8 [a0 + 0xd]\n  9125: u64 [sp + 0x88] = a1\n  9129: a1 = u8 [a0 + 0xe]\n  9132: u64 [sp + 0x80] = a1\n  9136: a1 = u8 [a0 + 0xf]\n  9139: u64 [sp + 0x78] = a1\n  9142: a1 = u8 [a0 + 0x10]\n  9145: u64 [sp + 0x70] = a1\n  9148: a1 = u8 [a0 + 0x11]\n  9151: u64 [sp + 0x68] = a1\n  9154: a1 = u8 [a0 + 0x12]\n  9157: u64 [sp + 0x60] = a1\n  9160: a1 = u8 [a0 + 0x13]\n  9163: u64 [sp + 0x58] = a1\n  9166: a1 = u8 [a0 + 0x14]\n  9169: u64 [sp + 0x50] = a1\n  9172: a1 = u8 [a0 + 0x15]\n  9175: u64 [sp + 0x48] = a1\n  9178: a1 = u8 [a0 + 0x16]\n  9181: u64 [sp + 0x40] = a1\n  9184: a1 = u8 [a0 + 0x17]\n  9187: u64 [sp + 0x38] = a1\n  9190: a1 = u8 [a0 + 0x18]\n  9193: u64 [sp + 0x30] = a1\n  9196: a1 = u8 [a0 + 0x19]\n  9199: u64 [sp + 0x28] = a1\n  9202: a1 = u8 [a0 + 0x1a]\n  9205: u64 [sp + 0x20] = a1\n  9208: a1 = u8 [a0 + 0x1b]\n  9211: u64 [sp + 0x18] = a1\n  9214: a1 = u8 [a0 + 0x1c]\n  9217: u64 [sp + 0x10] = a1\n  9220: a1 = u8 [a0 + 0x1d]\n  9223: u64 [sp + 0x8] = a1\n  9226: s0 = u8 [a0 + 0x1e]\n  9229: s1 = u8 [a0 + 0x1f]\n  9232: i32 a0 = a2 + 0x60\n  9235: a1 = 0x20\n  9238: ra = 132, jump @0\n      : @170 [@dyn 66] (gas: 72)\n  9244: u8 [a0 + 0x1f] = s1\n  9247: u8 [a0 + 0x1e] = s0\n  9250: a1 = u64 [sp + 0x8]\n  9253: u8 [a0 + 0x1d] = a1\n  9256: a1 = u64 [sp + 0x10]\n  9259: u8 [a0 + 0x1c] = a1\n  9262: a1 = u64 [sp + 0x18]\n  9265: u8 [a0 + 0x1b] = a1\n  9268: a1 = u64 [sp + 0x20]\n  9271: u8 [a0 + 0x1a] = a1\n  9274: a1 = u64 [sp + 0x28]\n  9277: u8 [a0 + 0x19] = a1\n  9280: a1 = u64 [sp + 0x30]\n  9283: u8 [a0 + 0x18] = a1\n  9286: a1 = u64 [sp + 0x38]\n  9289: u8 [a0 + 0x17] = a1\n  9292: a1 = u64 [sp + 0x40]\n  9295: u8 [a0 + 0x16] = a1\n  9298: a1 = u64 [sp + 0x48]\n  9301: u8 [a0 + 0x15] = a1\n  9304: a1 = u64 [sp + 0x50]\n  9307: u8 [a0 + 0x14] = a1\n  9310: a1 = u64 [sp + 0x58]\n  9313: u8 [a0 + 0x13] = a1\n  9316: a1 = u64 [sp + 0x60]\n  9319: u8 [a0 + 0x12] = a1\n  9322: a1 = u64 [sp + 0x68]\n  9325: u8 [a0 + 0x11] = a1\n  9328: a1 = u64 [sp + 0x70]\n  9331: u8 [a0 + 0x10] = a1\n  9334: a1 = u64 [sp + 0x78]\n  9337: u8 [a0 + 0xf] = a1\n  9340: a1 = u64 [sp + 0x80]\n  9344: u8 [a0 + 0xe] = a1\n  9347: a1 = u64 [sp + 0x88]\n  9351: u8 [a0 + 0xd] = a1\n  9354: a1 = u64 [sp + 0x90]\n  9358: u8 [a0 + 0xc] = a1\n  9361: a1 = u64 [sp + 0x98]\n  9365: u8 [a0 + 0xb] = a1\n  9368: a1 = u64 [sp + 0xa0]\n  9372: u8 [a0 + 0xa] = a1\n  9375: a1 = u64 [sp + 0xa8]\n  9379: u8 [a0 + 0x9] = a1\n  9382: a1 = u64 [sp + 0xb0]\n  9386: u8 [a0 + 0x8] = a1\n  9389: a1 = u64 [sp + 0xb8]\n  9393: u8 [a0 + 0x7] = a1\n  9396: a1 = u64 [sp + 0xc0]\n  9400: u8 [a0 + 0x6] = a1\n  9403: a1 = u64 [sp + 0xc8]\n  9407: u8 [a0 + 0x5] = a1\n  9410: a1 = u64 [sp + 0xd0]\n  9414: u8 [a0 + 0x4] = a1\n  9417: a1 = u64 [sp + 0xd8]\n  9421: u8 [a0 + 0x3] = a1\n  9424: a1 = u64 [sp + 0xe0]\n  9428: u8 [a0 + 0x2] = a1\n  9431: a1 = u64 [sp + 0xe8]\n  9435: u8 [a0 + 0x1] = a1\n  9438: s0 = 0xffffff7f\n  9448: a2 = u64 [sp + 0x130]\n  9452: a1 = s0 <u a2\n  9455: a3 = u64 [sp + 0x138]\n  9459: a4 = u64 [sp + 0x110]\n  9463: a1 = a4 if a3 != 0\n  9466: a3 = u64 [sp + 0x120]\n  9470: a4 = u64 [sp + 0x118]\n  9474: a1 = a3 if a4 != 0\n  9477: a3 = u64 [sp + 0xf0]\n  9481: u8 [a0] = a3\n  9483: jump @191 if a1 != 0\n      : @171 (gas: 3)\n  9487: i32 a0 = a2 + 0x80\n  9491: a1 = 0x20\n  9494: ra = 134, jump @0\n      : @172 [@dyn 67] (gas: 9)\n  9500: a2 = u64 [sp + 0x140]\n  9504: a1 = s0 <u a2\n  9507: a3 = u64 [sp + 0x128]\n  9511: a4 = u64 [sp + 0x100]\n  9515: a1 = a4 if a3 != 0\n  9518: a3 = u64 [sp + 0x108]\n  9522: a4 = u64 [sp + 0xf8]\n  9526: a1 = a3 if a4 != 0\n  9529: jump @191 if a1 != 0\n      : @173 (gas: 65)\n  9533: a1 = u8 [a0]\n  9535: u64 [sp + 0xf0] = a1\n  9539: a1 = u8 [a0 + 0x1]\n  9542: u64 [sp + 0xe8] = a1\n  9546: a1 = u8 [a0 + 0x2]\n  9549: u64 [sp + 0xe0] = a1\n  9553: a1 = u8 [a0 + 0x3]\n  9556: u64 [sp + 0xd8] = a1\n  9560: a1 = u8 [a0 + 0x4]\n  9563: u64 [sp + 0xd0] = a1\n  9567: a1 = u8 [a0 + 0x5]\n  9570: u64 [sp + 0xc8] = a1\n  9574: a1 = u8 [a0 + 0x6]\n  9577: u64 [sp + 0xc0] = a1\n  9581: a1 = u8 [a0 + 0x7]\n  9584: u64 [sp + 0xb8] = a1\n  9588: a1 = u8 [a0 + 0x8]\n  9591: u64 [sp + 0xb0] = a1\n  9595: a1 = u8 [a0 + 0x9]\n  9598: u64 [sp + 0xa8] = a1\n  9602: a1 = u8 [a0 + 0xa]\n  9605: u64 [sp + 0xa0] = a1\n  9609: a1 = u8 [a0 + 0xb]\n  9612: u64 [sp + 0x98] = a1\n  9616: a1 = u8 [a0 + 0xc]\n  9619: u64 [sp + 0x90] = a1\n  9623: a1 = u8 [a0 + 0xd]\n  9626: u64 [sp + 0x88] = a1\n  9630: a1 = u8 [a0 + 0xe]\n  9633: u64 [sp + 0x80] = a1\n  9637: a1 = u8 [a0 + 0xf]\n  9640: u64 [sp + 0x78] = a1\n  9643: a1 = u8 [a0 + 0x10]\n  9646: u64 [sp + 0x70] = a1\n  9649: a1 = u8 [a0 + 0x11]\n  9652: u64 [sp + 0x68] = a1\n  9655: a1 = u8 [a0 + 0x12]\n  9658: u64 [sp + 0x60] = a1\n  9661: a1 = u8 [a0 + 0x13]\n  9664: u64 [sp + 0x58] = a1\n  9667: a1 = u8 [a0 + 0x14]\n  9670: u64 [sp + 0x50] = a1\n  9673: a1 = u8 [a0 + 0x15]\n  9676: u64 [sp + 0x48] = a1\n  9679: a1 = u8 [a0 + 0x16]\n  9682: u64 [sp + 0x40] = a1\n  9685: a1 = u8 [a0 + 0x17]\n  9688: u64 [sp + 0x38] = a1\n  9691: a1 = u8 [a0 + 0x18]\n  9694: u64 [sp + 0x30] = a1\n  9697: a1 = u8 [a0 + 0x19]\n  9700: u64 [sp + 0x28] = a1\n  9703: a1 = u8 [a0 + 0x1a]\n  9706: u64 [sp + 0x20] = a1\n  9709: a1 = u8 [a0 + 0x1b]\n  9712: u64 [sp + 0x18] = a1\n  9715: a1 = u8 [a0 + 0x1c]\n  9718: u64 [sp + 0x10] = a1\n  9721: a1 = u8 [a0 + 0x1d]\n  9724: u64 [sp + 0x8] = a1\n  9727: s0 = u8 [a0 + 0x1e]\n  9730: s1 = u8 [a0 + 0x1f]\n  9733: i32 a0 = a2 + 0x80\n  9737: a1 = 0x20\n  9740: ra = 136, jump @0\n      : @174 [@dyn 68] (gas: 72)\n  9746: u8 [a0 + 0x1f] = s1\n  9749: u8 [a0 + 0x1e] = s0\n  9752: a1 = u64 [sp + 0x8]\n  9755: u8 [a0 + 0x1d] = a1\n  9758: a1 = u64 [sp + 0x10]\n  9761: u8 [a0 + 0x1c] = a1\n  9764: a1 = u64 [sp + 0x18]\n  9767: u8 [a0 + 0x1b] = a1\n  9770: a1 = u64 [sp + 0x20]\n  9773: u8 [a0 + 0x1a] = a1\n  9776: a1 = u64 [sp + 0x28]\n  9779: u8 [a0 + 0x19] = a1\n  9782: a1 = u64 [sp + 0x30]\n  9785: u8 [a0 + 0x18] = a1\n  9788: a1 = u64 [sp + 0x38]\n  9791: u8 [a0 + 0x17] = a1\n  9794: a1 = u64 [sp + 0x40]\n  9797: u8 [a0 + 0x16] = a1\n  9800: a1 = u64 [sp + 0x48]\n  9803: u8 [a0 + 0x15] = a1\n  9806: a1 = u64 [sp + 0x50]\n  9809: u8 [a0 + 0x14] = a1\n  9812: a1 = u64 [sp + 0x58]\n  9815: u8 [a0 + 0x13] = a1\n  9818: a1 = u64 [sp + 0x60]\n  9821: u8 [a0 + 0x12] = a1\n  9824: a1 = u64 [sp + 0x68]\n  9827: u8 [a0 + 0x11] = a1\n  9830: a1 = u64 [sp + 0x70]\n  9833: u8 [a0 + 0x10] = a1\n  9836: a1 = u64 [sp + 0x78]\n  9839: u8 [a0 + 0xf] = a1\n  9842: a1 = u64 [sp + 0x80]\n  9846: u8 [a0 + 0xe] = a1\n  9849: a1 = u64 [sp + 0x88]\n  9853: u8 [a0 + 0xd] = a1\n  9856: a1 = u64 [sp + 0x90]\n  9860: u8 [a0 + 0xc] = a1\n  9863: a1 = u64 [sp + 0x98]\n  9867: u8 [a0 + 0xb] = a1\n  9870: a1 = u64 [sp + 0xa0]\n  9874: u8 [a0 + 0xa] = a1\n  9877: a1 = u64 [sp + 0xa8]\n  9881: u8 [a0 + 0x9] = a1\n  9884: a1 = u64 [sp + 0xb0]\n  9888: u8 [a0 + 0x8] = a1\n  9891: a1 = u64 [sp + 0xb8]\n  9895: u8 [a0 + 0x7] = a1\n  9898: a1 = u64 [sp + 0xc0]\n  9902: u8 [a0 + 0x6] = a1\n  9905: a1 = u64 [sp + 0xc8]\n  9909: u8 [a0 + 0x5] = a1\n  9912: a1 = u64 [sp + 0xd0]\n  9916: u8 [a0 + 0x4] = a1\n  9919: a1 = u64 [sp + 0xd8]\n  9923: u8 [a0 + 0x3] = a1\n  9926: a1 = u64 [sp + 0xe0]\n  9930: u8 [a0 + 0x2] = a1\n  9933: a1 = u64 [sp + 0xe8]\n  9937: u8 [a0 + 0x1] = a1\n  9940: s0 = 0xffffff5f\n  9950: a2 = u64 [sp + 0x130]\n  9954: a1 = s0 <u a2\n  9957: a3 = u64 [sp + 0x138]\n  9961: a4 = u64 [sp + 0x110]\n  9965: a1 = a4 if a3 != 0\n  9968: a3 = u64 [sp + 0x120]\n  9972: a4 = u64 [sp + 0x118]\n  9976: a1 = a3 if a4 != 0\n  9979: a3 = u64 [sp + 0xf0]\n  9983: u8 [a0] = a3\n  9985: jump @191 if a1 != 0\n      : @175 (gas: 3)\n  9989: i32 a0 = a2 + 0xa0\n  9993: a1 = 0x20\n  9996: ra = 138, jump @0\n      : @176 [@dyn 69] (gas: 9)\n 10002: a2 = u64 [sp + 0x140]\n 10006: a1 = s0 <u a2\n 10009: a3 = u64 [sp + 0x128]\n 10013: a4 = u64 [sp + 0x100]\n 10017: a1 = a4 if a3 != 0\n 10020: a3 = u64 [sp + 0x108]\n 10024: a4 = u64 [sp + 0xf8]\n 10028: a1 = a3 if a4 != 0\n 10031: jump @191 if a1 != 0\n      : @177 (gas: 65)\n 10035: a1 = u8 [a0]\n 10037: u64 [sp + 0xf0] = a1\n 10041: a1 = u8 [a0 + 0x1]\n 10044: u64 [sp + 0xe8] = a1\n 10048: a1 = u8 [a0 + 0x2]\n 10051: u64 [sp + 0xe0] = a1\n 10055: a1 = u8 [a0 + 0x3]\n 10058: u64 [sp + 0xd8] = a1\n 10062: a1 = u8 [a0 + 0x4]\n 10065: u64 [sp + 0xd0] = a1\n 10069: a1 = u8 [a0 + 0x5]\n 10072: u64 [sp + 0xc8] = a1\n 10076: a1 = u8 [a0 + 0x6]\n 10079: u64 [sp + 0xc0] = a1\n 10083: a1 = u8 [a0 + 0x7]\n 10086: u64 [sp + 0xb8] = a1\n 10090: a1 = u8 [a0 + 0x8]\n 10093: u64 [sp + 0xb0] = a1\n 10097: a1 = u8 [a0 + 0x9]\n 10100: u64 [sp + 0xa8] = a1\n 10104: a1 = u8 [a0 + 0xa]\n 10107: u64 [sp + 0xa0] = a1\n 10111: a1 = u8 [a0 + 0xb]\n 10114: u64 [sp + 0x98] = a1\n 10118: a1 = u8 [a0 + 0xc]\n 10121: u64 [sp + 0x90] = a1\n 10125: a1 = u8 [a0 + 0xd]\n 10128: u64 [sp + 0x88] = a1\n 10132: a1 = u8 [a0 + 0xe]\n 10135: u64 [sp + 0x80] = a1\n 10139: a1 = u8 [a0 + 0xf]\n 10142: u64 [sp + 0x78] = a1\n 10145: a1 = u8 [a0 + 0x10]\n 10148: u64 [sp + 0x70] = a1\n 10151: a1 = u8 [a0 + 0x11]\n 10154: u64 [sp + 0x68] = a1\n 10157: a1 = u8 [a0 + 0x12]\n 10160: u64 [sp + 0x60] = a1\n 10163: a1 = u8 [a0 + 0x13]\n 10166: u64 [sp + 0x58] = a1\n 10169: a1 = u8 [a0 + 0x14]\n 10172: u64 [sp + 0x50] = a1\n 10175: a1 = u8 [a0 + 0x15]\n 10178: u64 [sp + 0x48] = a1\n 10181: a1 = u8 [a0 + 0x16]\n 10184: u64 [sp + 0x40] = a1\n 10187: a1 = u8 [a0 + 0x17]\n 10190: u64 [sp + 0x38] = a1\n 10193: a1 = u8 [a0 + 0x18]\n 10196: u64 [sp + 0x30] = a1\n 10199: a1 = u8 [a0 + 0x19]\n 10202: u64 [sp + 0x28] = a1\n 10205: a1 = u8 [a0 + 0x1a]\n 10208: u64 [sp + 0x20] = a1\n 10211: a1 = u8 [a0 + 0x1b]\n 10214: u64 [sp + 0x18] = a1\n 10217: a1 = u8 [a0 + 0x1c]\n 10220: u64 [sp + 0x10] = a1\n 10223: a1 = u8 [a0 + 0x1d]\n 10226: u64 [sp + 0x8] = a1\n 10229: s0 = u8 [a0 + 0x1e]\n 10232: s1 = u8 [a0 + 0x1f]\n 10235: i32 a0 = a2 + 0xa0\n 10239: a1 = 0x20\n 10242: ra = 140, jump @0\n      : @178 [@dyn 70] (gas: 72)\n 10248: u8 [a0 + 0x1f] = s1\n 10251: u8 [a0 + 0x1e] = s0\n 10254: a1 = u64 [sp + 0x8]\n 10257: u8 [a0 + 0x1d] = a1\n 10260: a1 = u64 [sp + 0x10]\n 10263: u8 [a0 + 0x1c] = a1\n 10266: a1 = u64 [sp + 0x18]\n 10269: u8 [a0 + 0x1b] = a1\n 10272: a1 = u64 [sp + 0x20]\n 10275: u8 [a0 + 0x1a] = a1\n 10278: a1 = u64 [sp + 0x28]\n 10281: u8 [a0 + 0x19] = a1\n 10284: a1 = u64 [sp + 0x30]\n 10287: u8 [a0 + 0x18] = a1\n 10290: a1 = u64 [sp + 0x38]\n 10293: u8 [a0 + 0x17] = a1\n 10296: a1 = u64 [sp + 0x40]\n 10299: u8 [a0 + 0x16] = a1\n 10302: a1 = u64 [sp + 0x48]\n 10305: u8 [a0 + 0x15] = a1\n 10308: a1 = u64 [sp + 0x50]\n 10311: u8 [a0 + 0x14] = a1\n 10314: a1 = u64 [sp + 0x58]\n 10317: u8 [a0 + 0x13] = a1\n 10320: a1 = u64 [sp + 0x60]\n 10323: u8 [a0 + 0x12] = a1\n 10326: a1 = u64 [sp + 0x68]\n 10329: u8 [a0 + 0x11] = a1\n 10332: a1 = u64 [sp + 0x70]\n 10335: u8 [a0 + 0x10] = a1\n 10338: a1 = u64 [sp + 0x78]\n 10341: u8 [a0 + 0xf] = a1\n 10344: a1 = u64 [sp + 0x80]\n 10348: u8 [a0 + 0xe] = a1\n 10351: a1 = u64 [sp + 0x88]\n 10355: u8 [a0 + 0xd] = a1\n 10358: a1 = u64 [sp + 0x90]\n 10362: u8 [a0 + 0xc] = a1\n 10365: a1 = u64 [sp + 0x98]\n 10369: u8 [a0 + 0xb] = a1\n 10372: a1 = u64 [sp + 0xa0]\n 10376: u8 [a0 + 0xa] = a1\n 10379: a1 = u64 [sp + 0xa8]\n 10383: u8 [a0 + 0x9] = a1\n 10386: a1 = u64 [sp + 0xb0]\n 10390: u8 [a0 + 0x8] = a1\n 10393: a1 = u64 [sp + 0xb8]\n 10397: u8 [a0 + 0x7] = a1\n 10400: a1 = u64 [sp + 0xc0]\n 10404: u8 [a0 + 0x6] = a1\n 10407: a1 = u64 [sp + 0xc8]\n 10411: u8 [a0 + 0x5] = a1\n 10414: a1 = u64 [sp + 0xd0]\n 10418: u8 [a0 + 0x4] = a1\n 10421: a1 = u64 [sp + 0xd8]\n 10425: u8 [a0 + 0x3] = a1\n 10428: a1 = u64 [sp + 0xe0]\n 10432: u8 [a0 + 0x2] = a1\n 10435: a1 = u64 [sp + 0xe8]\n 10439: u8 [a0 + 0x1] = a1\n 10442: s0 = 0xffffff3f\n 10452: a2 = u64 [sp + 0x130]\n 10456: a1 = s0 <u a2\n 10459: a3 = u64 [sp + 0x138]\n 10463: a4 = u64 [sp + 0x110]\n 10467: a1 = a4 if a3 != 0\n 10470: a3 = u64 [sp + 0x120]\n 10474: a4 = u64 [sp + 0x118]\n 10478: a1 = a3 if a4 != 0\n 10481: a3 = u64 [sp + 0xf0]\n 10485: u8 [a0] = a3\n 10487: jump @191 if a1 != 0\n      : @179 (gas: 3)\n 10491: i32 a0 = a2 + 0xc0\n 10495: a1 = 0x20\n 10498: ra = 142, jump @0\n      : @180 [@dyn 71] (gas: 9)\n 10504: a2 = u64 [sp + 0x140]\n 10508: a1 = s0 <u a2\n 10511: a3 = u64 [sp + 0x128]\n 10515: a4 = u64 [sp + 0x100]\n 10519: a1 = a4 if a3 != 0\n 10522: a3 = u64 [sp + 0x108]\n 10526: a4 = u64 [sp + 0xf8]\n 10530: a1 = a3 if a4 != 0\n 10533: jump @191 if a1 != 0\n      : @181 (gas: 65)\n 10537: a1 = u8 [a0]\n 10539: u64 [sp + 0xf0] = a1\n 10543: a1 = u8 [a0 + 0x1]\n 10546: u64 [sp + 0xe8] = a1\n 10550: a1 = u8 [a0 + 0x2]\n 10553: u64 [sp + 0xe0] = a1\n 10557: a1 = u8 [a0 + 0x3]\n 10560: u64 [sp + 0xd8] = a1\n 10564: a1 = u8 [a0 + 0x4]\n 10567: u64 [sp + 0xd0] = a1\n 10571: a1 = u8 [a0 + 0x5]\n 10574: u64 [sp + 0xc8] = a1\n 10578: a1 = u8 [a0 + 0x6]\n 10581: u64 [sp + 0xc0] = a1\n 10585: a1 = u8 [a0 + 0x7]\n 10588: u64 [sp + 0xb8] = a1\n 10592: a1 = u8 [a0 + 0x8]\n 10595: u64 [sp + 0xb0] = a1\n 10599: a1 = u8 [a0 + 0x9]\n 10602: u64 [sp + 0xa8] = a1\n 10606: a1 = u8 [a0 + 0xa]\n 10609: u64 [sp + 0xa0] = a1\n 10613: a1 = u8 [a0 + 0xb]\n 10616: u64 [sp + 0x98] = a1\n 10620: a1 = u8 [a0 + 0xc]\n 10623: u64 [sp + 0x90] = a1\n 10627: a1 = u8 [a0 + 0xd]\n 10630: u64 [sp + 0x88] = a1\n 10634: a1 = u8 [a0 + 0xe]\n 10637: u64 [sp + 0x80] = a1\n 10641: a1 = u8 [a0 + 0xf]\n 10644: u64 [sp + 0x78] = a1\n 10647: a1 = u8 [a0 + 0x10]\n 10650: u64 [sp + 0x70] = a1\n 10653: a1 = u8 [a0 + 0x11]\n 10656: u64 [sp + 0x68] = a1\n 10659: a1 = u8 [a0 + 0x12]\n 10662: u64 [sp + 0x60] = a1\n 10665: a1 = u8 [a0 + 0x13]\n 10668: u64 [sp + 0x58] = a1\n 10671: a1 = u8 [a0 + 0x14]\n 10674: u64 [sp + 0x50] = a1\n 10677: a1 = u8 [a0 + 0x15]\n 10680: u64 [sp + 0x48] = a1\n 10683: a1 = u8 [a0 + 0x16]\n 10686: u64 [sp + 0x40] = a1\n 10689: a1 = u8 [a0 + 0x17]\n 10692: u64 [sp + 0x38] = a1\n 10695: a1 = u8 [a0 + 0x18]\n 10698: u64 [sp + 0x30] = a1\n 10701: a1 = u8 [a0 + 0x19]\n 10704: u64 [sp + 0x28] = a1\n 10707: a1 = u8 [a0 + 0x1a]\n 10710: u64 [sp + 0x20] = a1\n 10713: a1 = u8 [a0 + 0x1b]\n 10716: u64 [sp + 0x18] = a1\n 10719: a1 = u8 [a0 + 0x1c]\n 10722: u64 [sp + 0x10] = a1\n 10725: a1 = u8 [a0 + 0x1d]\n 10728: u64 [sp + 0x8] = a1\n 10731: s0 = u8 [a0 + 0x1e]\n 10734: s1 = u8 [a0 + 0x1f]\n 10737: i32 a0 = a2 + 0xc0\n 10741: a1 = 0x20\n 10744: ra = 144, jump @0\n      : @182 [@dyn 72] (gas: 72)\n 10750: u8 [a0 + 0x1f] = s1\n 10753: u8 [a0 + 0x1e] = s0\n 10756: a1 = u64 [sp + 0x8]\n 10759: u8 [a0 + 0x1d] = a1\n 10762: a1 = u64 [sp + 0x10]\n 10765: u8 [a0 + 0x1c] = a1\n 10768: a1 = u64 [sp + 0x18]\n 10771: u8 [a0 + 0x1b] = a1\n 10774: a1 = u64 [sp + 0x20]\n 10777: u8 [a0 + 0x1a] = a1\n 10780: a1 = u64 [sp + 0x28]\n 10783: u8 [a0 + 0x19] = a1\n 10786: a1 = u64 [sp + 0x30]\n 10789: u8 [a0 + 0x18] = a1\n 10792: a1 = u64 [sp + 0x38]\n 10795: u8 [a0 + 0x17] = a1\n 10798: a1 = u64 [sp + 0x40]\n 10801: u8 [a0 + 0x16] = a1\n 10804: a1 = u64 [sp + 0x48]\n 10807: u8 [a0 + 0x15] = a1\n 10810: a1 = u64 [sp + 0x50]\n 10813: u8 [a0 + 0x14] = a1\n 10816: a1 = u64 [sp + 0x58]\n 10819: u8 [a0 + 0x13] = a1\n 10822: a1 = u64 [sp + 0x60]\n 10825: u8 [a0 + 0x12] = a1\n 10828: a1 = u64 [sp + 0x68]\n 10831: u8 [a0 + 0x11] = a1\n 10834: a1 = u64 [sp + 0x70]\n 10837: u8 [a0 + 0x10] = a1\n 10840: a1 = u64 [sp + 0x78]\n 10843: u8 [a0 + 0xf] = a1\n 10846: a1 = u64 [sp + 0x80]\n 10850: u8 [a0 + 0xe] = a1\n 10853: a1 = u64 [sp + 0x88]\n 10857: u8 [a0 + 0xd] = a1\n 10860: a1 = u64 [sp + 0x90]\n 10864: u8 [a0 + 0xc] = a1\n 10867: a1 = u64 [sp + 0x98]\n 10871: u8 [a0 + 0xb] = a1\n 10874: a1 = u64 [sp + 0xa0]\n 10878: u8 [a0 + 0xa] = a1\n 10881: a1 = u64 [sp + 0xa8]\n 10885: u8 [a0 + 0x9] = a1\n 10888: a1 = u64 [sp + 0xb0]\n 10892: u8 [a0 + 0x8] = a1\n 10895: a1 = u64 [sp + 0xb8]\n 10899: u8 [a0 + 0x7] = a1\n 10902: a1 = u64 [sp + 0xc0]\n 10906: u8 [a0 + 0x6] = a1\n 10909: a1 = u64 [sp + 0xc8]\n 10913: u8 [a0 + 0x5] = a1\n 10916: a1 = u64 [sp + 0xd0]\n 10920: u8 [a0 + 0x4] = a1\n 10923: a1 = u64 [sp + 0xd8]\n 10927: u8 [a0 + 0x3] = a1\n 10930: a1 = u64 [sp + 0xe0]\n 10934: u8 [a0 + 0x2] = a1\n 10937: a1 = u64 [sp + 0xe8]\n 10941: u8 [a0 + 0x1] = a1\n 10944: s0 = 0xffffff1f\n 10954: a2 = u64 [sp + 0x130]\n 10958: a1 = s0 <u a2\n 10961: a3 = u64 [sp + 0x138]\n 10965: a4 = u64 [sp + 0x110]\n 10969: a1 = a4 if a3 != 0\n 10972: a3 = u64 [sp + 0x120]\n 10976: a4 = u64 [sp + 0x118]\n 10980: a1 = a3 if a4 != 0\n 10983: a3 = u64 [sp + 0xf0]\n 10987: u8 [a0] = a3\n 10989: jump @191 if a1 != 0\n      : @183 (gas: 3)\n 10993: i32 a0 = a2 + 0xe0\n 10997: a1 = 0x20\n 11000: ra = 146, jump @0\n      : @184 [@dyn 73] (gas: 9)\n 11006: a2 = u64 [sp + 0x140]\n 11010: a1 = s0 <u a2\n 11013: a3 = u64 [sp + 0x128]\n 11017: a4 = u64 [sp + 0x100]\n 11021: a1 = a4 if a3 != 0\n 11024: a3 = u64 [sp + 0x108]\n 11028: a4 = u64 [sp + 0xf8]\n 11032: a1 = a3 if a4 != 0\n 11035: jump @191 if a1 != 0\n      : @185 (gas: 66)\n 11039: a1 = u8 [a0]\n 11041: u64 [sp + 0xf0] = a1\n 11045: a1 = u8 [a0 + 0x1]\n 11048: u64 [sp + 0xe8] = a1\n 11052: a1 = u8 [a0 + 0x2]\n 11055: u64 [sp + 0xe0] = a1\n 11059: a1 = u8 [a0 + 0x3]\n 11062: u64 [sp + 0xd8] = a1\n 11066: a1 = u8 [a0 + 0x4]\n 11069: u64 [sp + 0xd0] = a1\n 11073: a1 = u8 [a0 + 0x5]\n 11076: u64 [sp + 0xc8] = a1\n 11080: a1 = u8 [a0 + 0x6]\n 11083: u64 [sp + 0xc0] = a1\n 11087: a1 = u8 [a0 + 0x7]\n 11090: u64 [sp + 0xb8] = a1\n 11094: a1 = u8 [a0 + 0x8]\n 11097: u64 [sp + 0xb0] = a1\n 11101: a1 = u8 [a0 + 0x9]\n 11104: u64 [sp + 0xa8] = a1\n 11108: a1 = u8 [a0 + 0xa]\n 11111: u64 [sp + 0xa0] = a1\n 11115: a1 = u8 [a0 + 0xb]\n 11118: u64 [sp + 0x98] = a1\n 11122: a1 = u8 [a0 + 0xc]\n 11125: u64 [sp + 0x90] = a1\n 11129: a1 = u8 [a0 + 0xd]\n 11132: u64 [sp + 0x88] = a1\n 11136: a1 = u8 [a0 + 0xe]\n 11139: u64 [sp + 0x80] = a1\n 11143: a1 = u8 [a0 + 0xf]\n 11146: u64 [sp + 0x78] = a1\n 11149: a1 = u8 [a0 + 0x10]\n 11152: u64 [sp + 0x70] = a1\n 11155: a1 = u8 [a0 + 0x11]\n 11158: u64 [sp + 0x68] = a1\n 11161: a1 = u8 [a0 + 0x12]\n 11164: u64 [sp + 0x60] = a1\n 11167: a1 = u8 [a0 + 0x13]\n 11170: u64 [sp + 0x58] = a1\n 11173: a1 = u8 [a0 + 0x14]\n 11176: u64 [sp + 0x50] = a1\n 11179: a1 = u8 [a0 + 0x15]\n 11182: u64 [sp + 0x48] = a1\n 11185: a1 = u8 [a0 + 0x16]\n 11188: u64 [sp + 0x40] = a1\n 11191: a1 = u8 [a0 + 0x17]\n 11194: u64 [sp + 0x38] = a1\n 11197: a1 = u8 [a0 + 0x18]\n 11200: u64 [sp + 0x30] = a1\n 11203: a1 = u8 [a0 + 0x19]\n 11206: u64 [sp + 0x28] = a1\n 11209: a1 = u8 [a0 + 0x1a]\n 11212: u64 [sp + 0x20] = a1\n 11215: a1 = u8 [a0 + 0x1b]\n 11218: u64 [sp + 0x18] = a1\n 11221: a1 = u8 [a0 + 0x1c]\n 11224: u64 [sp + 0x10] = a1\n 11227: a1 = u8 [a0 + 0x1d]\n 11230: u64 [sp + 0x8] = a1\n 11233: a1 = u8 [a0 + 0x1e]\n 11236: u64 [sp] = a1\n 11238: s1 = u8 [a0 + 0x1f]\n 11241: i32 a0 = a2 + 0xe0\n 11245: a1 = 0x20\n 11248: ra = 148, jump @0\n      : @186 [@dyn 74] (gas: 73)\n 11254: s0 = 0xfffffeff\n 11264: a2 = u64 [sp + 0x130]\n 11268: a1 = s0 <u a2\n 11271: a3 = u64 [sp + 0x138]\n 11275: a4 = u64 [sp + 0x110]\n 11279: a1 = a4 if a3 != 0\n 11282: a3 = u64 [sp + 0x120]\n 11286: a4 = u64 [sp + 0x118]\n 11290: a1 = a3 if a4 != 0\n 11293: u8 [a0 + 0x1f] = s1\n 11296: a3 = u64 [sp]\n 11298: u8 [a0 + 0x1e] = a3\n 11301: a3 = u64 [sp + 0x8]\n 11304: u8 [a0 + 0x1d] = a3\n 11307: a3 = u64 [sp + 0x10]\n 11310: u8 [a0 + 0x1c] = a3\n 11313: a3 = u64 [sp + 0x18]\n 11316: u8 [a0 + 0x1b] = a3\n 11319: a3 = u64 [sp + 0x20]\n 11322: u8 [a0 + 0x1a] = a3\n 11325: a3 = u64 [sp + 0x28]\n 11328: u8 [a0 + 0x19] = a3\n 11331: a3 = u64 [sp + 0x30]\n 11334: u8 [a0 + 0x18] = a3\n 11337: a3 = u64 [sp + 0x38]\n 11340: u8 [a0 + 0x17] = a3\n 11343: a3 = u64 [sp + 0x40]\n 11346: u8 [a0 + 0x16] = a3\n 11349: a3 = u64 [sp + 0x48]\n 11352: u8 [a0 + 0x15] = a3\n 11355: a3 = u64 [sp + 0x50]\n 11358: u8 [a0 + 0x14] = a3\n 11361: a3 = u64 [sp + 0x58]\n 11364: u8 [a0 + 0x13] = a3\n 11367: a3 = u64 [sp + 0x60]\n 11370: u8 [a0 + 0x12] = a3\n 11373: a3 = u64 [sp + 0x68]\n 11376: u8 [a0 + 0x11] = a3\n 11379: a3 = u64 [sp + 0x70]\n 11382: u8 [a0 + 0x10] = a3\n 11385: a3 = u64 [sp + 0x78]\n 11388: u8 [a0 + 0xf] = a3\n 11391: a3 = u64 [sp + 0x80]\n 11395: u8 [a0 + 0xe] = a3\n 11398: a3 = u64 [sp + 0x88]\n 11402: u8 [a0 + 0xd] = a3\n 11405: a3 = u64 [sp + 0x90]\n 11409: u8 [a0 + 0xc] = a3\n 11412: a3 = u64 [sp + 0x98]\n 11416: u8 [a0 + 0xb] = a3\n 11419: a3 = u64 [sp + 0xa0]\n 11423: u8 [a0 + 0xa] = a3\n 11426: a3 = u64 [sp + 0xa8]\n 11430: u8 [a0 + 0x9] = a3\n 11433: a3 = u64 [sp + 0xb0]\n 11437: u8 [a0 + 0x8] = a3\n 11440: a3 = u64 [sp + 0xb8]\n 11444: u8 [a0 + 0x7] = a3\n 11447: a3 = u64 [sp + 0xc0]\n 11451: u8 [a0 + 0x6] = a3\n 11454: a3 = u64 [sp + 0xc8]\n 11458: u8 [a0 + 0x5] = a3\n 11461: a3 = u64 [sp + 0xd0]\n 11465: u8 [a0 + 0x4] = a3\n 11468: a3 = u64 [sp + 0xd8]\n 11472: u8 [a0 + 0x3] = a3\n 11475: a3 = u64 [sp + 0xe0]\n 11479: u8 [a0 + 0x2] = a3\n 11482: a3 = u64 [sp + 0xe8]\n 11486: u8 [a0 + 0x1] = a3\n 11489: a3 = u64 [sp + 0xf0]\n 11493: u8 [a0] = a3\n 11495: jump @191 if a1 != 0\n      : @187 (gas: 3)\n 11499: i32 a0 = a2 + 0x100\n 11503: a1 = 0x20\n 11506: ra = 150, jump @0\n      : @188 [@dyn 75] (gas: 9)\n 11512: a2 = u64 [sp + 0x140]\n 11516: a1 = s0 <u a2\n 11519: a3 = u64 [sp + 0x128]\n 11523: a4 = u64 [sp + 0x100]\n 11527: a1 = a4 if a3 != 0\n 11530: a3 = u64 [sp + 0x108]\n 11534: a4 = u64 [sp + 0xf8]\n 11538: a1 = a3 if a4 != 0\n 11541: jump @191 if a1 != 0\n      : @189 (gas: 65)\n 11545: a1 = u8 [a0]\n 11547: u64 [sp + 0x138] = a1\n 11551: a1 = u8 [a0 + 0x1]\n 11554: u64 [sp + 0x130] = a1\n 11558: a1 = u8 [a0 + 0x2]\n 11561: u64 [sp + 0x128] = a1\n 11565: a1 = u8 [a0 + 0x3]\n 11568: u64 [sp + 0x120] = a1\n 11572: a1 = u8 [a0 + 0x4]\n 11575: u64 [sp + 0x118] = a1\n 11579: a1 = u8 [a0 + 0x5]\n 11582: u64 [sp + 0x110] = a1\n 11586: a1 = u8 [a0 + 0x6]\n 11589: u64 [sp + 0x108] = a1\n 11593: a1 = u8 [a0 + 0x7]\n 11596: u64 [sp + 0x100] = a1\n 11600: a1 = u8 [a0 + 0x8]\n 11603: u64 [sp + 0xf8] = a1\n 11607: a1 = u8 [a0 + 0x9]\n 11610: u64 [sp + 0xf0] = a1\n 11614: a1 = u8 [a0 + 0xa]\n 11617: u64 [sp + 0xe8] = a1\n 11621: a1 = u8 [a0 + 0xb]\n 11624: u64 [sp + 0xe0] = a1\n 11628: a1 = u8 [a0 + 0xc]\n 11631: u64 [sp + 0xd8] = a1\n 11635: a1 = u8 [a0 + 0xd]\n 11638: u64 [sp + 0xd0] = a1\n 11642: a1 = u8 [a0 + 0xe]\n 11645: u64 [sp + 0xc8] = a1\n 11649: a1 = u8 [a0 + 0xf]\n 11652: u64 [sp + 0xc0] = a1\n 11656: a1 = u8 [a0 + 0x10]\n 11659: u64 [sp + 0xb8] = a1\n 11663: a1 = u8 [a0 + 0x11]\n 11666: u64 [sp + 0xb0] = a1\n 11670: a1 = u8 [a0 + 0x12]\n 11673: u64 [sp + 0xa8] = a1\n 11677: a1 = u8 [a0 + 0x13]\n 11680: u64 [sp + 0xa0] = a1\n 11684: a1 = u8 [a0 + 0x14]\n 11687: u64 [sp + 0x98] = a1\n 11691: a1 = u8 [a0 + 0x15]\n 11694: u64 [sp + 0x90] = a1\n 11698: a1 = u8 [a0 + 0x16]\n 11701: u64 [sp + 0x88] = a1\n 11705: a1 = u8 [a0 + 0x17]\n 11708: u64 [sp + 0x80] = a1\n 11712: a1 = u8 [a0 + 0x18]\n 11715: u64 [sp + 0x78] = a1\n 11718: a1 = u8 [a0 + 0x19]\n 11721: u64 [sp + 0x70] = a1\n 11724: a1 = u8 [a0 + 0x1a]\n 11727: u64 [sp + 0x68] = a1\n 11730: a1 = u8 [a0 + 0x1b]\n 11733: u64 [sp + 0x60] = a1\n 11736: a1 = u8 [a0 + 0x1c]\n 11739: u64 [sp + 0x58] = a1\n 11742: a1 = u8 [a0 + 0x1d]\n 11745: u64 [sp + 0x50] = a1\n 11748: s0 = u8 [a0 + 0x1e]\n 11751: s1 = u8 [a0 + 0x1f]\n 11754: i32 a0 = a2 + 0x100\n 11758: a1 = 0x20\n 11761: ra = 152, jump @0\n      : @190 [@dyn 76] (gas: 67)\n 11767: u8 [a0 + 0x1f] = s1\n 11770: u8 [a0 + 0x1e] = s0\n 11773: a1 = u64 [sp + 0x50]\n 11776: u8 [a0 + 0x1d] = a1\n 11779: a1 = u64 [sp + 0x58]\n 11782: u8 [a0 + 0x1c] = a1\n 11785: a1 = u64 [sp + 0x60]\n 11788: u8 [a0 + 0x1b] = a1\n 11791: a1 = u64 [sp + 0x68]\n 11794: u8 [a0 + 0x1a] = a1\n 11797: a1 = u64 [sp + 0x70]\n 11800: u8 [a0 + 0x19] = a1\n 11803: a1 = u64 [sp + 0x78]\n 11806: u8 [a0 + 0x18] = a1\n 11809: a1 = u64 [sp + 0x80]\n 11813: u8 [a0 + 0x17] = a1\n 11816: a1 = u64 [sp + 0x88]\n 11820: u8 [a0 + 0x16] = a1\n 11823: a1 = u64 [sp + 0x90]\n 11827: u8 [a0 + 0x15] = a1\n 11830: a1 = u64 [sp + 0x98]\n 11834: u8 [a0 + 0x14] = a1\n 11837: a1 = u64 [sp + 0xa0]\n 11841: u8 [a0 + 0x13] = a1\n 11844: a1 = u64 [sp + 0xa8]\n 11848: u8 [a0 + 0x12] = a1\n 11851: a1 = u64 [sp + 0xb0]\n 11855: u8 [a0 + 0x11] = a1\n 11858: a1 = u64 [sp + 0xb8]\n 11862: u8 [a0 + 0x10] = a1\n 11865: a1 = u64 [sp + 0xc0]\n 11869: u8 [a0 + 0xf] = a1\n 11872: a1 = u64 [sp + 0xc8]\n 11876: u8 [a0 + 0xe] = a1\n 11879: a1 = u64 [sp + 0xd0]\n 11883: u8 [a0 + 0xd] = a1\n 11886: a1 = u64 [sp + 0xd8]\n 11890: u8 [a0 + 0xc] = a1\n 11893: a1 = u64 [sp + 0xe0]\n 11897: u8 [a0 + 0xb] = a1\n 11900: a1 = u64 [sp + 0xe8]\n 11904: u8 [a0 + 0xa] = a1\n 11907: a1 = u64 [sp + 0xf0]\n 11911: u8 [a0 + 0x9] = a1\n 11914: a1 = u64 [sp + 0xf8]\n 11918: u8 [a0 + 0x8] = a1\n 11921: a1 = u64 [sp + 0x100]\n 11925: u8 [a0 + 0x7] = a1\n 11928: a1 = u64 [sp + 0x108]\n 11932: u8 [a0 + 0x6] = a1\n 11935: a1 = u64 [sp + 0x110]\n 11939: u8 [a0 + 0x5] = a1\n 11942: a1 = u64 [sp + 0x118]\n 11946: u8 [a0 + 0x4] = a1\n 11949: a1 = u64 [sp + 0x120]\n 11953: u8 [a0 + 0x3] = a1\n 11956: a1 = u64 [sp + 0x128]\n 11960: u8 [a0 + 0x2] = a1\n 11963: a1 = u64 [sp + 0x130]\n 11967: u8 [a0 + 0x1] = a1\n 11970: a1 = u64 [sp + 0x138]\n 11974: u8 [a0] = a1\n 11976: ra = u64 [sp + 0x158]\n 11980: s0 = u64 [sp + 0x150]\n 11984: s1 = u64 [sp + 0x148]\n 11988: sp = sp + 0x160\n 11992: ret\n      : @191 (gas: 1)\n 11994: trap\n      : @192 (gas: 8)\n 11995: a0 = u64 [sp + 0xd0]\n 11999: a1 = u64 [sp + 0xd8]\n 12003: a2 = u64 [sp + 0xc8]\n 12007: a3 = u64 [sp + 0xc0]\n 12011: a1 = a1 | a2\n 12014: a0 = a0 | a3\n 12017: a0 = a0 | a1\n 12020: jump @201 if a0 != 0\n      : @193 (gas: 2)\n 12024: a0 = i32 [0x20004]\n 12029: jump @201 if a0 <=u 35\n      : @194 (gas: 4)\n 12034: i32 a0 = sp + 0xe0\n 12038: a1 = 0x4\n 12041: ecalli 1 // 'call_data_load'\n 12043: fallthrough\n      : @195 (gas: 10)\n 12044: a0 = u64 [sp + 0xf0]\n 12048: a2 = u64 [sp + 0xf8]\n 12052: a1 = 0x100000000\n 12062: a1 = a1 ^ a0\n 12065: a1 = a1 | a2\n 12068: a3 = a0 >> 0x20\n 12071: a3 = a3 <u 0x1\n 12074: a3 = 0 if a2 != 0\n 12076: a3 = 0 if a1 == 0\n 12078: jump @201 if a3 == 0\n      : @196 (gas: 30)\n 12082: a1 = u64 [sp + 0xe8]\n 12086: a3 = u64 [sp + 0xe0]\n 12090: u64 [sp + 0x88] = a1\n 12094: u64 [sp + 0x80] = a3\n 12098: u64 [sp + 0x90] = a0\n 12102: a0 = sp + 0xa0\n 12106: a1 = sp + 0x80\n 12110: u64 [sp + 0x98] = a2\n 12114: ra = 0x9a\n 12118: sp = sp + 0xffffffffffffff20\n 12122: u64 [sp + 0xd8] = ra\n 12126: u64 [sp + 0xd0] = s0\n 12130: u64 [sp + 0xc8] = s1\n 12134: s0 = sp + 0xe0\n 12138: sp = sp & 0xffffffffffffffe0\n 12141: a2 = u64 [a1 + 0x10]\n 12144: u64 [sp] = a2\n 12146: a2 = u64 [a1 + 0x8]\n 12149: u64 [sp + 0x8] = a2\n 12152: a1 = u64 [a1]\n 12154: u64 [sp + 0x10] = a1\n 12157: u64 [sp + 0x18] = a0\n 12160: u64 [sp + 120] = 0\n 12163: u64 [sp + 112] = 0\n 12166: u64 [sp + 96] = 0x120\n 12171: a0 = sp + 0x80\n 12175: a1 = sp + 0x60\n 12178: u64 [sp + 104] = 0\n 12181: ra = 0x15e\n 12185: jump @342\n      : @197 [@dyn 77] (gas: 11)\n 12188: a0 = u64 [sp + 0xa0]\n 12192: u64 [sp + 0x38] = a0\n 12195: a0 = u64 [sp + 0xa8]\n 12199: u64 [sp + 0x30] = a0\n 12202: a0 = u64 [sp + 0xb0]\n 12206: u64 [sp + 0x28] = a0\n 12209: a0 = u64 [sp + 0xb8]\n 12213: u64 [sp + 0x20] = a0\n 12216: a0 = 0x40\n 12219: a1 = 0x20\n 12222: ra = 156, jump @0\n      : @198 [@dyn 78] (gas: 110)\n 12228: a1 = u8 [a0 + 0x1]\n 12231: a2 = u8 [a0]\n 12233: a3 = u8 [a0 + 0x2]\n 12236: a4 = u8 [a0 + 0x3]\n 12239: a1 = a1 << 0x8\n 12242: a1 = a1 | a2\n 12245: a3 = a3 << 0x10\n 12248: a4 = a4 << 0x18\n 12251: a3 = a3 | a4\n 12254: a1 = a1 | a3\n 12257: a2 = u8 [a0 + 0x5]\n 12260: a3 = u8 [a0 + 0x4]\n 12263: a4 = u8 [a0 + 0x6]\n 12266: a5 = u8 [a0 + 0x7]\n 12269: a2 = a2 << 0x8\n 12272: a2 = a2 | a3\n 12275: a4 = a4 << 0x10\n 12278: a5 = a5 << 0x18\n 12281: a4 = a4 | a5\n 12284: a2 = a2 | a4\n 12287: a2 = a2 << 0x20\n 12290: t0 = a2 | a1\n 12293: a2 = u8 [a0 + 0x9]\n 12296: a3 = u8 [a0 + 0x8]\n 12299: a4 = u8 [a0 + 0xa]\n 12302: a5 = u8 [a0 + 0xb]\n 12305: a2 = a2 << 0x8\n 12308: a2 = a2 | a3\n 12311: a4 = a4 << 0x10\n 12314: a5 = a5 << 0x18\n 12317: a4 = a4 | a5\n 12320: a2 = a2 | a4\n 12323: a3 = u8 [a0 + 0xd]\n 12326: a4 = u8 [a0 + 0xc]\n 12329: a5 = u8 [a0 + 0xe]\n 12332: s1 = u8 [a0 + 0xf]\n 12335: a3 = a3 << 0x8\n 12338: a3 = a3 | a4\n 12341: a5 = a5 << 0x10\n 12344: s1 = s1 << 0x18\n 12347: a5 = a5 | s1\n 12350: a3 = a3 | a5\n 12353: a3 = a3 << 0x20\n 12356: a2 = a2 | a3\n 12359: a3 = u8 [a0 + 0x11]\n 12362: a4 = u8 [a0 + 0x10]\n 12365: a5 = u8 [a0 + 0x12]\n 12368: s1 = u8 [a0 + 0x13]\n 12371: a3 = a3 << 0x8\n 12374: a3 = a3 | a4\n 12377: a5 = a5 << 0x10\n 12380: s1 = s1 << 0x18\n 12383: a5 = a5 | s1\n 12386: a3 = a3 | a5\n 12389: a4 = u8 [a0 + 0x15]\n 12392: a5 = u8 [a0 + 0x14]\n 12395: s1 = u8 [a0 + 0x16]\n 12398: a1 = u8 [a0 + 0x17]\n 12401: a4 = a4 << 0x8\n 12404: a4 = a4 | a5\n 12407: s1 = s1 << 0x10\n 12410: a1 = a1 << 0x18\n 12413: a1 = a1 | s1\n 12416: a1 = a1 | a4\n 12419: a1 = a1 << 0x20\n 12422: a3 = a3 | a1\n 12425: a1 = u8 [a0 + 0x19]\n 12428: a4 = u8 [a0 + 0x18]\n 12431: a5 = u8 [a0 + 0x1a]\n 12434: s1 = u8 [a0 + 0x1b]\n 12437: a1 = a1 << 0x8\n 12440: a1 = a1 | a4\n 12443: a5 = a5 << 0x10\n 12446: s1 = s1 << 0x18\n 12449: a5 = a5 | s1\n 12452: a1 = a1 | a5\n 12455: a4 = u8 [a0 + 0x1d]\n 12458: a5 = u8 [a0 + 0x1c]\n 12461: s1 = u8 [a0 + 0x1e]\n 12464: a0 = u8 [a0 + 0x1f]\n 12467: a4 = a4 << 0x8\n 12470: a4 = a4 | a5\n 12473: s1 = s1 << 0x10\n 12476: a0 = a0 << 0x18\n 12479: a0 = a0 | s1\n 12482: a0 = a0 | a4\n 12485: a0 = a0 << 0x20\n 12488: a0 = a0 | a1\n 12491: a4 = reverse a0\n 12493: u64 [sp + 0x8] = a4\n 12496: a1 = reverse a3\n 12498: u64 [sp + 0x10] = a1\n 12501: s1 = reverse a2\n 12503: a2 = reverse t0\n 12505: u64 [sp + 0x18] = a2\n 12508: a0 = u64 [sp + 0x20]\n 12511: u64 [sp + 0x78] = a0\n 12514: a0 = u64 [sp + 0x28]\n 12517: u64 [sp + 0x70] = a0\n 12520: a0 = u64 [sp + 0x30]\n 12523: u64 [sp + 0x68] = a0\n 12526: a0 = u64 [sp + 0x38]\n 12529: u64 [sp + 0x60] = a0\n 12532: u64 [sp + 0x58] = a2\n 12535: u64 [sp + 0x50] = s1\n 12538: u64 [sp + 0x48] = a1\n 12541: a0 = sp + 0x60\n 12544: a1 = sp + 0x40\n 12547: u64 [sp + 0x40] = a4\n 12550: ra = 158, jump @152\n      : @199 [@dyn 79] (gas: 11)\n 12556: a2 = u64 [sp + 0x8]\n 12559: a0 = u64 [sp + 0x18]\n 12562: a1 = u64 [sp + 0x10]\n 12565: a0 = a0 | a1\n 12568: a1 = a2 | s1\n 12571: a1 = a1 | a0\n 12574: a1 = a1 >> 0x20\n 12577: a0 = a0 | s1\n 12580: a0 = a0 << 0x20\n 12583: a0 = a0 | a1\n 12586: jump @203 if a0 == 0\n      : @200 (gas: 1)\n 12589: trap\n      : @201 (gas: 3)\n 12590: a0 = 0\n 12592: a1 = 0\n 12594: ra = 160, jump @0\n      : @202 [@dyn 80] (gas: 5)\n 12600: i32 a1 = a0 + 0\n 12602: a0 = 0x1\n 12605: a2 = 0\n 12607: ecalli 6 // 'seal_return'\n 12609: fallthrough\n      : @203 (gas: 3)\n 12610: i32 a0 = a2 + 0\n 12612: a1 = 0x120\n 12616: ra = 162, jump @0\n      : @204 [@dyn 81] (gas: 6)\n 12622: i32 a1 = a0 + 0\n 12624: a2 = 0x120\n 12628: a0 = 0\n 12630: ra = 0xa4\n 12634: ecalli 6 // 'seal_return'\n 12636: fallthrough\n      : @205 [@dyn 82] (gas: 19)\n 12637: t0 = u64 [a0 + 0x18]\n 12640: t1 = u64 [a1 + 0x18]\n 12643: a4 = u64 [a0 + 0x10]\n 12646: a5 = u64 [a0 + 0x8]\n 12649: a2 = u64 [a1 + 0x8]\n 12652: t2 = u64 [a0]\n 12654: a3 = u64 [a1]\n 12656: a1 = u64 [a1 + 0x10]\n 12659: a0 = a2 ^ a5\n 12662: a2 = a2 <u a5\n 12665: a3 = a3 <u t2\n 12668: a3 = a2 if a0 != 0\n 12671: a0 = a1 - a4\n 12674: a0 = a0 <u a3\n 12677: a1 = a1 <u a4\n 12680: a2 = t1 - t0\n 12683: a2 = a2 - a1\n 12686: a2 = a2 - a0\n 12689: jump @207 if a2 <s 0\n      : @206 (gas: 1)\n 12692: ret\n      : @207 (gas: 5)\n 12694: sp = sp + 0xfffffffffffffff8\n 12697: u64 [sp] = ra\n 12699: a0 = 0\n 12701: a1 = 0\n 12703: ra = 166, jump @0\n      : @208 [@dyn 83] (gas: 6)\n 12709: i32 a1 = a0 + 0\n 12711: a0 = 0x1\n 12714: a2 = 0\n 12716: ra = 0xa8\n 12720: ecalli 6 // 'seal_return'\n 12722: fallthrough\n      : @209 [@dyn 84] (gas: 194)\n 12723: sp = sp + 0xffffffffffffffa0\n 12726: u64 [sp + 0x58] = ra\n 12729: u64 [sp + 0x50] = s0\n 12732: u64 [sp + 0x48] = s1\n 12735: u64 [sp] = a0\n 12737: t1 = u64 [a1]\n 12739: ra = u64 [a1 + 0x8]\n 12742: a4 = u64 [a1 + 0x10]\n 12745: a1 = u64 [a1 + 0x18]\n 12748: t0 = u64 [a2]\n 12750: a3 = u64 [a2 + 0x8]\n 12753: t2 = u64 [a2 + 0x18]\n 12756: a2 = u64 [a2 + 0x10]\n 12759: s0 = t0 >> 0x3d\n 12762: s1 = a3 << 0x3\n 12765: s0 = s0 | s1\n 12768: a3 = a3 >> 0x3d\n 12771: s1 = a2 << 0x3\n 12774: a3 = a3 | s1\n 12777: a2 = a2 >> 0x3d\n 12780: t2 = t2 << 0x3\n 12783: s1 = t2 | a2\n 12786: t2 = t0 << 0x3\n 12789: a2 = s1 >u 0\n 12791: a5 = a3 >u 0\n 12793: a5 = a2 if s1 != 0\n 12796: a0 = s0 >u 0\n 12798: a2 = t2 <u 0x100\n 12802: t2 = a2 ^ 0x1\n 12805: t2 = a0 if s0 != 0\n 12808: a3 = a3 | s1\n 12811: t2 = a5 if a3 != 0\n 12814: u8 [sp + 71] = 0\n 12817: u8 [sp + 70] = 0\n 12820: u8 [sp + 69] = 0\n 12823: u8 [sp + 68] = 0\n 12826: u8 [sp + 67] = 0\n 12829: u8 [sp + 66] = 0\n 12832: u8 [sp + 65] = 0\n 12835: u8 [sp + 64] = 0\n 12838: u8 [sp + 63] = 0\n 12841: u8 [sp + 62] = 0\n 12844: u8 [sp + 61] = 0\n 12847: u8 [sp + 60] = 0\n 12850: u8 [sp + 59] = 0\n 12853: u8 [sp + 58] = 0\n 12856: u8 [sp + 57] = 0\n 12859: u8 [sp + 56] = 0\n 12862: u8 [sp + 55] = 0\n 12865: u8 [sp + 54] = 0\n 12868: u8 [sp + 53] = 0\n 12871: u8 [sp + 52] = 0\n 12874: u8 [sp + 51] = 0\n 12877: u8 [sp + 50] = 0\n 12880: u8 [sp + 49] = 0\n 12883: u8 [sp + 48] = 0\n 12886: u8 [sp + 47] = 0\n 12889: u8 [sp + 46] = 0\n 12892: u8 [sp + 45] = 0\n 12895: u8 [sp + 44] = 0\n 12898: u8 [sp + 43] = 0\n 12901: u8 [sp + 42] = 0\n 12904: u8 [sp + 41] = 0\n 12907: u8 [sp + 40] = 0\n 12910: u8 [sp + 0x20] = a1\n 12913: u8 [sp + 0x18] = a4\n 12916: u8 [sp + 0x10] = ra\n 12919: u8 [sp + 0x8] = t1\n 12922: a0 = a1 >> 0x38\n 12925: u8 [sp + 0x27] = a0\n 12928: a0 = a1 >> 0x30\n 12931: u8 [sp + 0x26] = a0\n 12934: a0 = a1 >> 0x28\n 12937: u8 [sp + 0x25] = a0\n 12940: a0 = a1 >> 0x20\n 12943: u8 [sp + 0x24] = a0\n 12946: a0 = a1 >> 0x18\n 12949: u8 [sp + 0x23] = a0\n 12952: a0 = a1 >> 0x10\n 12955: u8 [sp + 0x22] = a0\n 12958: a1 = a1 >> 0x8\n 12961: u8 [sp + 0x21] = a1\n 12964: a0 = a4 >> 0x38\n 12967: u8 [sp + 0x1f] = a0\n 12970: a0 = a4 >> 0x30\n 12973: u8 [sp + 0x1e] = a0\n 12976: a0 = a4 >> 0x28\n 12979: u8 [sp + 0x1d] = a0\n 12982: a0 = a4 >> 0x20\n 12985: u8 [sp + 0x1c] = a0\n 12988: a0 = a4 >> 0x18\n 12991: u8 [sp + 0x1b] = a0\n 12994: a0 = a4 >> 0x10\n 12997: u8 [sp + 0x1a] = a0\n 13000: a4 = a4 >> 0x8\n 13003: u8 [sp + 0x19] = a4\n 13006: a0 = ra >> 0x38\n 13009: u8 [sp + 0x17] = a0\n 13012: a0 = ra >> 0x30\n 13015: u8 [sp + 0x16] = a0\n 13018: a0 = ra >> 0x28\n 13021: u8 [sp + 0x15] = a0\n 13024: a0 = ra >> 0x20\n 13027: u8 [sp + 0x14] = a0\n 13030: a0 = ra >> 0x18\n 13033: u8 [sp + 0x13] = a0\n 13036: a0 = ra >> 0x10\n 13039: u8 [sp + 0x12] = a0\n 13042: a0 = ra >> 0x8\n 13045: u8 [sp + 0x11] = a0\n 13048: a0 = t1 >> 0x38\n 13051: u8 [sp + 0xf] = a0\n 13054: a0 = t1 >> 0x30\n 13057: u8 [sp + 0xe] = a0\n 13060: a0 = t1 >> 0x28\n 13063: u8 [sp + 0xd] = a0\n 13066: a0 = t1 >> 0x20\n 13069: u8 [sp + 0xc] = a0\n 13072: a0 = t1 >> 0x18\n 13075: u8 [sp + 0xb] = a0\n 13078: a0 = t1 >> 0x10\n 13081: u8 [sp + 0xa] = a0\n 13084: a0 = t1 >> 0x8\n 13087: u8 [sp + 0x9] = a0\n 13090: a1 = t0 & 0x1f\n 13093: a0 = sp + 0x8\n 13096: a1 = a1 + a0\n 13099: a0 = u8 [a1 + 0x9]\n 13102: a2 = u8 [a1 + 0x8]\n 13105: a3 = u8 [a1 + 0xa]\n 13108: a4 = u8 [a1 + 0xb]\n 13111: a0 = a0 << 0x8\n 13114: a0 = a0 | a2\n 13117: a3 = a3 << 0x10\n 13120: a4 = a4 << 0x18\n 13123: a3 = a3 | a4\n 13126: a0 = a0 | a3\n 13129: a2 = u8 [a1 + 0xd]\n 13132: a3 = u8 [a1 + 0xc]\n 13135: a4 = u8 [a1 + 0xe]\n 13138: a5 = u8 [a1 + 0xf]\n 13141: a2 = a2 << 0x8\n 13144: a2 = a2 | a3\n 13147: a4 = a4 << 0x10\n 13150: a5 = a5 << 0x18\n 13153: a4 = a4 | a5\n 13156: a2 = a2 | a4\n 13159: a2 = a2 << 0x20\n 13162: a3 = a2 | a0\n 13165: a0 = u8 [a1 + 0x1]\n 13168: a2 = u8 [a1]\n 13170: a4 = u8 [a1 + 0x2]\n 13173: a5 = u8 [a1 + 0x3]\n 13176: a0 = a0 << 0x8\n 13179: a0 = a0 | a2\n 13182: a4 = a4 << 0x10\n 13185: a5 = a5 << 0x18\n 13188: a4 = a4 | a5\n 13191: a0 = a0 | a4\n 13194: a2 = u8 [a1 + 0x5]\n 13197: a4 = u8 [a1 + 0x4]\n 13200: a5 = u8 [a1 + 0x6]\n 13203: s1 = u8 [a1 + 0x7]\n 13206: a2 = a2 << 0x8\n 13209: a2 = a2 | a4\n 13212: a5 = a5 << 0x10\n 13215: s1 = s1 << 0x18\n 13218: a5 = a5 | s1\n 13221: a2 = a2 | a5\n 13224: a2 = a2 << 0x20\n 13227: a0 = a0 | a2\n 13230: a2 = u8 [a1 + 0x11]\n 13233: a4 = u8 [a1 + 0x10]\n 13236: a5 = u8 [a1 + 0x12]\n 13239: a1 = u8 [a1 + 0x13]\n 13242: a2 = a2 << 0x8\n 13245: a2 = a2 | a4\n 13248: a5 = a5 << 0x10\n 13251: a1 = a1 << 0x18\n 13254: a1 = a1 | a5\n 13257: a1 = a1 | a2\n 13260: a0 = 0 if t2 != 0\n 13262: a3 = 0 if t2 != 0\n 13264: a1 = 0 if t2 != 0\n 13266: a2 = u64 [sp]\n 13268: u64 [a2 + 24] = 0\n 13271: u64 [a2 + 0x10] = a1\n 13274: u64 [a2 + 0x8] = a3\n 13277: u64 [a2] = a0\n 13279: ra = u64 [sp + 0x58]\n 13282: s0 = u64 [sp + 0x50]\n 13285: s1 = u64 [sp + 0x48]\n 13288: sp = sp + 0x60\n 13291: ret\n      : @210 (gas: 8)\n 13293: a0 = u64 [sp + 0x30]\n 13296: a1 = u64 [sp + 0x38]\n 13299: a2 = u64 [sp + 0x28]\n 13302: a3 = u64 [sp + 0x20]\n 13305: a1 = a1 | a2\n 13308: a0 = a0 | a3\n 13311: a0 = a0 | a1\n 13314: jump @215 if a0 != 0\n      : @211 (gas: 2)\n 13318: a0 = i32 [0x20004]\n 13323: jump @215 if a0 <=u 3\n      : @212 (gas: 24)\n 13328: u64 [sp + 88] = 0\n 13331: u64 [sp + 80] = 0\n 13334: u64 [sp + 72] = 0\n 13337: u64 [sp + 64] = 0x1\n 13341: u64 [sp + 120] = 0\n 13344: u64 [sp + 112] = 0\n 13347: u64 [sp + 104] = 0\n 13350: u64 [sp + 96] = 0\n 13353: u32 [sp + 128] = 0x20\n 13358: i32 a1 = sp + 0x40\n 13361: i32 a3 = sp + 0x60\n 13364: i32 a4 = sp + 0x80\n 13368: a2 = 0xffffffffffffffff\n 13371: a0 = 0\n 13373: ecalli 4 // 'get_storage'\n 13375: a0 = u64 [sp + 0x70]\n 13378: u64 [sp + 0x8] = a0\n 13381: a0 = u64 [sp + 0x68]\n 13384: u64 [sp + 0x10] = a0\n 13387: a0 = u64 [sp + 0x60]\n 13390: u64 [sp + 0x18] = a0\n 13393: a0 = 0x40\n 13396: a1 = 0x20\n 13399: ra = 170, jump @0\n      : @213 [@dyn 85] (gas: 100)\n 13405: a1 = u8 [a0 + 0x11]\n 13408: a2 = u8 [a0 + 0x10]\n 13411: a3 = u8 [a0 + 0x12]\n 13414: a4 = u8 [a0 + 0x13]\n 13417: a1 = a1 << 0x8\n 13420: a1 = a1 | a2\n 13423: a3 = a3 << 0x10\n 13426: a4 = a4 << 0x18\n 13429: a3 = a3 | a4\n 13432: a1 = a1 | a3\n 13435: a2 = u8 [a0 + 0x15]\n 13438: a3 = u8 [a0 + 0x14]\n 13441: a4 = u8 [a0 + 0x16]\n 13444: a5 = u8 [a0 + 0x17]\n 13447: a2 = a2 << 0x8\n 13450: a2 = a2 | a3\n 13453: a4 = a4 << 0x10\n 13456: a5 = a5 << 0x18\n 13459: a4 = a4 | a5\n 13462: a2 = a2 | a4\n 13465: a2 = a2 << 0x20\n 13468: t0 = a2 | a1\n 13471: a2 = u8 [a0 + 0x1]\n 13474: a3 = u8 [a0]\n 13476: a4 = u8 [a0 + 0x2]\n 13479: a5 = u8 [a0 + 0x3]\n 13482: a2 = a2 << 0x8\n 13485: a2 = a2 | a3\n 13488: a4 = a4 << 0x10\n 13491: a5 = a5 << 0x18\n 13494: a4 = a4 | a5\n 13497: a2 = a2 | a4\n 13500: a3 = u8 [a0 + 0x5]\n 13503: a4 = u8 [a0 + 0x4]\n 13506: a5 = u8 [a0 + 0x6]\n 13509: s1 = u8 [a0 + 0x7]\n 13512: a3 = a3 << 0x8\n 13515: a3 = a3 | a4\n 13518: a5 = a5 << 0x10\n 13521: s1 = s1 << 0x18\n 13524: a5 = a5 | s1\n 13527: a3 = a3 | a5\n 13530: a3 = a3 << 0x20\n 13533: a2 = a2 | a3\n 13536: a3 = u8 [a0 + 0x19]\n 13539: a4 = u8 [a0 + 0x18]\n 13542: a5 = u8 [a0 + 0x1a]\n 13545: s1 = u8 [a0 + 0x1b]\n 13548: a3 = a3 << 0x8\n 13551: a3 = a3 | a4\n 13554: a5 = a5 << 0x10\n 13557: s1 = s1 << 0x18\n 13560: a5 = a5 | s1\n 13563: a3 = a3 | a5\n 13566: a4 = u8 [a0 + 0x1d]\n 13569: a5 = u8 [a0 + 0x1c]\n 13572: s1 = u8 [a0 + 0x1e]\n 13575: a1 = u8 [a0 + 0x1f]\n 13578: a4 = a4 << 0x8\n 13581: a4 = a4 | a5\n 13584: s1 = s1 << 0x10\n 13587: a1 = a1 << 0x18\n 13590: a1 = a1 | s1\n 13593: a1 = a1 | a4\n 13596: a1 = a1 << 0x20\n 13599: a3 = a3 | a1\n 13602: a1 = u8 [a0 + 0x9]\n 13605: a4 = u8 [a0 + 0x8]\n 13608: a5 = u8 [a0 + 0xa]\n 13611: s1 = u8 [a0 + 0xb]\n 13614: a1 = a1 << 0x8\n 13617: a1 = a1 | a4\n 13620: a5 = a5 << 0x10\n 13623: s1 = s1 << 0x18\n 13626: a5 = a5 | s1\n 13629: a1 = a1 | a5\n 13632: a4 = u8 [a0 + 0xd]\n 13635: a5 = u8 [a0 + 0xc]\n 13638: s1 = u8 [a0 + 0xe]\n 13641: a0 = u8 [a0 + 0xf]\n 13644: a4 = a4 << 0x8\n 13647: a4 = a4 | a5\n 13650: s1 = s1 << 0x10\n 13653: a0 = a0 << 0x18\n 13656: a0 = a0 | s1\n 13659: a0 = a0 | a4\n 13662: a0 = a0 << 0x20\n 13665: a0 = a0 | a1\n 13668: a1 = reverse a0\n 13670: a0 = reverse a3\n 13672: a2 = reverse a2\n 13674: a3 = reverse t0\n 13676: a2 = a2 | a3\n 13679: a3 = a0 | a1\n 13682: a3 = a3 | a2\n 13685: a3 = a3 >> 0x20\n 13688: a1 = a1 | a2\n 13691: a1 = a1 << 0x20\n 13694: a1 = a1 | a3\n 13697: jump @217 if a1 == 0\n      : @214 (gas: 1)\n 13700: trap\n      : @215 (gas: 3)\n 13701: a0 = 0\n 13703: a1 = 0\n 13705: ra = 172, jump @0\n      : @216 [@dyn 86] (gas: 5)\n 13711: i32 a1 = a0 + 0\n 13713: a0 = 0x1\n 13716: a2 = 0\n 13718: ecalli 6 // 'seal_return'\n 13720: fallthrough\n      : @217 (gas: 7)\n 13721: a1 = u64 [sp + 0x8]\n 13724: a1 = a1 << 0x20\n 13727: s1 = a1 >> 0x20\n 13730: i32 a0 = a0 + 0\n 13732: u64 [sp + 0x8] = a0\n 13735: a1 = 0x20\n 13738: ra = 174, jump @0\n      : @218 [@dyn 87] (gas: 58)\n 13744: a1 = reverse s1\n 13746: a2 = u64 [sp + 0x10]\n 13749: a2 = reverse a2\n 13751: a3 = u64 [sp + 0x18]\n 13754: a3 = reverse a3\n 13756: a4 = a3 >> 0x38\n 13759: u8 [a0 + 0x1f] = a4\n 13762: a4 = a3 >> 0x30\n 13765: u8 [a0 + 0x1e] = a4\n 13768: a4 = a3 >> 0x28\n 13771: u8 [a0 + 0x1d] = a4\n 13774: a4 = a3 >> 0x20\n 13777: u8 [a0 + 0x1c] = a4\n 13780: a4 = a3 >> 0x18\n 13783: u8 [a0 + 0x1b] = a4\n 13786: a4 = a3 >> 0x10\n 13789: u8 [a0 + 0x1a] = a4\n 13792: a4 = a3 >> 0x8\n 13795: u8 [a0 + 0x19] = a4\n 13798: u8 [a0 + 0x18] = a3\n 13801: u8 [a0 + 0x10] = a2\n 13804: u8 [a0 + 11] = 0\n 13807: u8 [a0 + 10] = 0\n 13810: u8 [a0 + 9] = 0\n 13813: u8 [a0 + 7] = 0\n 13816: u8 [a0 + 6] = 0\n 13819: u8 [a0 + 5] = 0\n 13822: u8 [a0 + 4] = 0\n 13825: u8 [a0 + 3] = 0\n 13828: u8 [a0 + 2] = 0\n 13831: u8 [a0 + 1] = 0\n 13834: u8 [a0 + 0] = 0\n 13836: a3 = a2 >> 0x38\n 13839: u8 [a0 + 0x17] = a3\n 13842: a3 = a2 >> 0x30\n 13845: u8 [a0 + 0x16] = a3\n 13848: a3 = a2 >> 0x28\n 13851: u8 [a0 + 0x15] = a3\n 13854: a3 = a2 >> 0x20\n 13857: u8 [a0 + 0x14] = a3\n 13860: a3 = a2 >> 0x18\n 13863: u8 [a0 + 0x13] = a3\n 13866: a3 = a2 >> 0x10\n 13869: u8 [a0 + 0x12] = a3\n 13872: a2 = a2 >> 0x8\n 13875: u8 [a0 + 0x11] = a2\n 13878: u8 [a0 + 0x8] = a1\n 13881: a2 = a1 >> 0x38\n 13884: u8 [a0 + 0xf] = a2\n 13887: a2 = a1 >> 0x30\n 13890: u8 [a0 + 0xe] = a2\n 13893: a2 = a1 >> 0x28\n 13896: u8 [a0 + 0xd] = a2\n 13899: a1 = a1 >> 0x20\n 13902: u8 [a0 + 0xc] = a1\n 13905: a1 = 0x20\n 13908: a0 = u64 [sp + 0x8]\n 13911: ra = 176, jump @0\n      : @219 [@dyn 88] (gas: 6)\n 13917: i32 a1 = a0 + 0\n 13919: a2 = 0x20\n 13922: a0 = 0\n 13924: ra = 0xb2\n 13928: ecalli 6 // 'seal_return'\n 13930: fallthrough\n      : @220 [@dyn 89] (gas: 12)\n 13931: sp = sp + 0xffffffffffffff00\n 13935: u64 [sp + 0xf8] = ra\n 13939: u64 [sp + 0xf0] = s0\n 13943: s0 = sp + 0x100\n 13947: sp = sp & 0xffffffffffffffe0\n 13950: u64 [sp + 216] = 0\n 13954: u64 [sp + 208] = 0\n 13958: u64 [sp + 200] = 0\n 13962: u64 [sp + 192] = 0\n 13966: i32 a0 = sp + 0xc0\n 13970: ecalli 9 // 'value_transferred'\n 13972: fallthrough\n      : @221 (gas: 8)\n 13973: a0 = u64 [sp + 0xd0]\n 13977: a1 = u64 [sp + 0xd8]\n 13981: a2 = u64 [sp + 0xc8]\n 13985: a3 = u64 [sp + 0xc0]\n 13989: a1 = a1 | a2\n 13992: a0 = a0 | a3\n 13995: a0 = a0 | a1\n 13998: jump @227 if a0 != 0\n      : @222 (gas: 13)\n 14002: a0 = u32 [0x20004]\n 14007: u64 [sp + 88] = 0\n 14010: u64 [sp + 80] = 0\n 14013: u64 [sp + 72] = 0\n 14016: u64 [sp + 0x40] = a0\n 14019: u64 [sp + 120] = 0\n 14022: u64 [sp + 112] = 0\n 14025: u64 [sp + 96] = 0x4\n 14029: a0 = sp + 0x80\n 14033: a1 = sp + 0x60\n 14036: a2 = sp + 0x40\n 14039: u64 [sp + 104] = 0\n 14042: ra = 180, jump @73\n      : @223 [@dyn 90] (gas: 19)\n 14048: t0 = u64 [sp + 0x80]\n 14052: t1 = u64 [sp + 0x88]\n 14056: a1 = u64 [sp + 0x90]\n 14060: a3 = u64 [sp + 0x98]\n 14064: a4 = u64 [sp + 0xa0]\n 14068: a5 = u64 [sp + 0xa8]\n 14072: a2 = u64 [sp + 0xb0]\n 14076: a0 = u64 [sp + 0xb8]\n 14080: u64 [sp + 0x18] = a0\n 14083: u64 [sp + 0x10] = a2\n 14086: u64 [sp + 0x8] = a5\n 14089: u64 [sp] = a4\n 14091: u64 [sp + 0x38] = a3\n 14094: u64 [sp + 0x30] = a1\n 14097: u64 [sp + 0x28] = t1\n 14100: a0 = sp + 0x20\n 14103: a1 = sp\n 14105: u64 [sp + 0x20] = t0\n 14108: ra = 182, jump @393\n      : @224 [@dyn 91] (gas: 3)\n 14114: a0 = 0x40\n 14117: a1 = 0x20\n 14120: ra = 184, jump @0\n      : @225 [@dyn 92] (gas: 100)\n 14126: a1 = u8 [a0 + 0x11]\n 14129: a2 = u8 [a0 + 0x10]\n 14132: a3 = u8 [a0 + 0x12]\n 14135: a4 = u8 [a0 + 0x13]\n 14138: a1 = a1 << 0x8\n 14141: a1 = a1 | a2\n 14144: a3 = a3 << 0x10\n 14147: a4 = a4 << 0x18\n 14150: a3 = a3 | a4\n 14153: a1 = a1 | a3\n 14156: a2 = u8 [a0 + 0x15]\n 14159: a3 = u8 [a0 + 0x14]\n 14162: a4 = u8 [a0 + 0x16]\n 14165: a5 = u8 [a0 + 0x17]\n 14168: a2 = a2 << 0x8\n 14171: a2 = a2 | a3\n 14174: a4 = a4 << 0x10\n 14177: a5 = a5 << 0x18\n 14180: a4 = a4 | a5\n 14183: a2 = a2 | a4\n 14186: a2 = a2 << 0x20\n 14189: t0 = a2 | a1\n 14192: a2 = u8 [a0 + 0x1]\n 14195: a3 = u8 [a0]\n 14197: a4 = u8 [a0 + 0x2]\n 14200: a5 = u8 [a0 + 0x3]\n 14203: a2 = a2 << 0x8\n 14206: a2 = a2 | a3\n 14209: a4 = a4 << 0x10\n 14212: a5 = a5 << 0x18\n 14215: a4 = a4 | a5\n 14218: a2 = a2 | a4\n 14221: a3 = u8 [a0 + 0x5]\n 14224: a4 = u8 [a0 + 0x4]\n 14227: a5 = u8 [a0 + 0x6]\n 14230: a1 = u8 [a0 + 0x7]\n 14233: a3 = a3 << 0x8\n 14236: a3 = a3 | a4\n 14239: a5 = a5 << 0x10\n 14242: a1 = a1 << 0x18\n 14245: a1 = a1 | a5\n 14248: a1 = a1 | a3\n 14251: a1 = a1 << 0x20\n 14254: t1 = a1 | a2\n 14257: a1 = u8 [a0 + 0x19]\n 14260: a3 = u8 [a0 + 0x18]\n 14263: a4 = u8 [a0 + 0x1a]\n 14266: a5 = u8 [a0 + 0x1b]\n 14269: a1 = a1 << 0x8\n 14272: a1 = a1 | a3\n 14275: a4 = a4 << 0x10\n 14278: a5 = a5 << 0x18\n 14281: a4 = a4 | a5\n 14284: a1 = a1 | a4\n 14287: a3 = u8 [a0 + 0x1d]\n 14290: a4 = u8 [a0 + 0x1c]\n 14293: a5 = u8 [a0 + 0x1e]\n 14296: a2 = u8 [a0 + 0x1f]\n 14299: a3 = a3 << 0x8\n 14302: a3 = a3 | a4\n 14305: a5 = a5 << 0x10\n 14308: a2 = a2 << 0x18\n 14311: a2 = a2 | a5\n 14314: a2 = a2 | a3\n 14317: a2 = a2 << 0x20\n 14320: a3 = a2 | a1\n 14323: a1 = u8 [a0 + 0x9]\n 14326: a2 = u8 [a0 + 0x8]\n 14329: a4 = u8 [a0 + 0xa]\n 14332: a5 = u8 [a0 + 0xb]\n 14335: a1 = a1 << 0x8\n 14338: a1 = a1 | a2\n 14341: a4 = a4 << 0x10\n 14344: a5 = a5 << 0x18\n 14347: a4 = a4 | a5\n 14350: a1 = a1 | a4\n 14353: a2 = u8 [a0 + 0xd]\n 14356: a4 = u8 [a0 + 0xc]\n 14359: a5 = u8 [a0 + 0xe]\n 14362: a0 = u8 [a0 + 0xf]\n 14365: a2 = a2 << 0x8\n 14368: a2 = a2 | a4\n 14371: a5 = a5 << 0x10\n 14374: a0 = a0 << 0x18\n 14377: a0 = a0 | a5\n 14380: a0 = a0 | a2\n 14383: a0 = a0 << 0x20\n 14386: a0 = a0 | a1\n 14389: a1 = reverse a0\n 14391: a0 = reverse a3\n 14393: a2 = reverse t1\n 14395: a3 = reverse t0\n 14397: a2 = a2 | a3\n 14400: a3 = a0 | a1\n 14403: a3 = a3 | a2\n 14406: a3 = a3 >> 0x20\n 14409: a1 = a1 | a2\n 14412: a1 = a1 << 0x20\n 14415: a1 = a1 | a3\n 14418: jump @229 if a1 == 0\n      : @226 (gas: 1)\n 14421: trap\n      : @227 (gas: 3)\n 14422: a0 = 0\n 14424: a1 = 0\n 14426: ra = 186, jump @0\n      : @228 [@dyn 93] (gas: 7)\n 14432: i32 a1 = a0 + 0\n 14434: a0 = 0x1\n 14437: a2 = 0\n 14439: ecalli 6 // 'seal_return'\n 14441: i32 a0 = a0 + 0\n 14443: ra = 0xbc\n 14447: jump @0\n      : @229 (gas: 2)\n 14450: i32 a0 = a0 + 0\n 14452: ra = 188, jump @0\n      : @230 [@dyn 94] (gas: 6)\n 14458: i32 a1 = a0 + 0\n 14460: a0 = 0\n 14462: a2 = 0\n 14464: ra = 0xbe\n 14468: ecalli 6 // 'seal_return'\n 14470: fallthrough\n      : @231 [@dyn 95] (gas: 5)\n 14471: sp = sp + 0xfffffffffffffff8\n 14474: u64 [sp] = ra\n 14476: a0 = 0\n 14478: a1 = 0\n 14480: ra = 192, jump @0\n      : @232 [@dyn 96] (gas: 6)\n 14486: i32 a1 = a0 + 0\n 14488: a0 = 0x1\n 14491: a2 = 0\n 14493: ra = 0xc2\n 14497: ecalli 6 // 'seal_return'\n 14499: fallthrough\n      : @233 [@dyn 97] (gas: 5)\n 14500: u64 [a0 + 24] = 0\n 14503: u64 [a0 + 16] = 0\n 14506: u64 [a0 + 8] = 0\n 14509: u64 [a0 + 0] = 0\n 14511: ret\n      : @234 [@dyn 98] (gas: 58)\n 14513: a1 = reverse s1\n 14515: a2 = u64 [sp + 0x8]\n 14518: a2 = reverse a2\n 14520: a3 = u64 [sp + 0x10]\n 14523: a3 = reverse a3\n 14525: a4 = a3 >> 0x38\n 14528: u8 [a0 + 0x1f] = a4\n 14531: a4 = a3 >> 0x30\n 14534: u8 [a0 + 0x1e] = a4\n 14537: a4 = a3 >> 0x28\n 14540: u8 [a0 + 0x1d] = a4\n 14543: a4 = a3 >> 0x20\n 14546: u8 [a0 + 0x1c] = a4\n 14549: a4 = a3 >> 0x18\n 14552: u8 [a0 + 0x1b] = a4\n 14555: a4 = a3 >> 0x10\n 14558: u8 [a0 + 0x1a] = a4\n 14561: a4 = a3 >> 0x8\n 14564: u8 [a0 + 0x19] = a4\n 14567: u8 [a0 + 0x18] = a3\n 14570: a3 = a2 >> 0x38\n 14573: u8 [a0 + 0x17] = a3\n 14576: a3 = a2 >> 0x30\n 14579: u8 [a0 + 0x16] = a3\n 14582: a3 = a2 >> 0x28\n 14585: u8 [a0 + 0x15] = a3\n 14588: a3 = a2 >> 0x20\n 14591: u8 [a0 + 0x14] = a3\n 14594: a3 = a2 >> 0x18\n 14597: u8 [a0 + 0x13] = a3\n 14600: a3 = a2 >> 0x10\n 14603: u8 [a0 + 0x12] = a3\n 14606: a3 = a2 >> 0x8\n 14609: u8 [a0 + 0x11] = a3\n 14612: u8 [a0 + 0x10] = a2\n 14615: a2 = a1 >> 0x38\n 14618: u8 [a0 + 0xf] = a2\n 14621: a2 = a1 >> 0x30\n 14624: u8 [a0 + 0xe] = a2\n 14627: a2 = a1 >> 0x28\n 14630: u8 [a0 + 0xd] = a2\n 14633: a2 = a1 >> 0x20\n 14636: u8 [a0 + 0xc] = a2\n 14639: u8 [a0 + 11] = 0\n 14642: u8 [a0 + 10] = 0\n 14645: u8 [a0 + 9] = 0\n 14648: u8 [a0 + 0x8] = a1\n 14651: u8 [a0 + 7] = 0\n 14654: u8 [a0 + 6] = 0\n 14657: u8 [a0 + 5] = 0\n 14660: u8 [a0 + 4] = 0\n 14663: u8 [a0 + 3] = 0\n 14666: u8 [a0 + 2] = 0\n 14669: u8 [a0 + 1] = 0\n 14672: u8 [a0 + 0] = 0\n 14674: a0 = 0x20\n 14677: a1 = 0x20\n 14680: ra = 198, jump @0\n      : @235 [@dyn 99] (gas: 35)\n 14686: u8 [a0 + 31] = 0\n 14689: u8 [a0 + 30] = 0\n 14692: u8 [a0 + 29] = 0\n 14695: u8 [a0 + 28] = 0\n 14698: u8 [a0 + 27] = 0\n 14701: u8 [a0 + 26] = 0\n 14704: u8 [a0 + 25] = 0\n 14707: u8 [a0 + 24] = 0\n 14710: u8 [a0 + 23] = 0\n 14713: u8 [a0 + 22] = 0\n 14716: u8 [a0 + 21] = 0\n 14719: u8 [a0 + 20] = 0\n 14722: u8 [a0 + 19] = 0\n 14725: u8 [a0 + 18] = 0\n 14728: u8 [a0 + 17] = 0\n 14731: u8 [a0 + 16] = 0\n 14734: u8 [a0 + 15] = 0\n 14737: u8 [a0 + 14] = 0\n 14740: u8 [a0 + 13] = 0\n 14743: u8 [a0 + 12] = 0\n 14746: u8 [a0 + 11] = 0\n 14749: u8 [a0 + 10] = 0\n 14752: u8 [a0 + 9] = 0\n 14755: u8 [a0 + 8] = 0\n 14758: u8 [a0 + 7] = 0\n 14761: u8 [a0 + 6] = 0\n 14764: u8 [a0 + 5] = 0\n 14767: u8 [a0 + 4] = 0\n 14770: u8 [a0 + 3] = 0\n 14773: u8 [a0 + 2] = 0\n 14776: u8 [a0 + 1] = 0\n 14779: u8 [a0 + 0] = 0\n 14781: a1 = 0x40\n 14784: a0 = 0\n 14786: ra = 200, jump @0\n      : @236 [@dyn 100] (gas: 5)\n 14792: i32 a0 = a0 + 0\n 14794: i32 a2 = sp + 0xc0\n 14798: a1 = 0x40\n 14801: ecalli 5 // 'hash_keccak_256'\n 14803: fallthrough\n      : @237 (gas: 9)\n 14804: a4 = u64 [sp + 0x30]\n 14807: a5 = u64 [sp + 0x28]\n 14810: t1 = u64 [sp + 0x18]\n 14813: t0 = u64 [sp + 0x20]\n 14816: a0 = t1 | t0\n 14819: a1 = a5 <u 0x9\n 14822: a1 = 0 if a4 != 0\n 14824: a1 = 0 if a0 != 0\n 14826: jump @239 if a1 == 0\n      : @238 (gas: 68)\n 14830: a0 = u64 [sp + 0xc0]\n 14834: a1 = u64 [sp + 0xc8]\n 14838: a2 = u64 [sp + 0xd8]\n 14842: a3 = u64 [sp + 0xd0]\n 14846: a0 = reverse a0\n 14848: a1 = reverse a1\n 14850: a2 = reverse a2\n 14852: a3 = reverse a3\n 14854: a4 = a4 + a3\n 14857: a5 = a5 + a2\n 14860: a2 = a5 <u a2\n 14863: a4 = a4 + a2\n 14866: s1 = a4 ^ a3\n 14869: a3 = a4 <u a3\n 14872: a3 = a2 if s1 == 0\n 14875: a2 = a1 + t1\n 14878: a3 = a3 + a2\n 14881: s1 = a3 <u a2\n 14884: a1 = a2 <u a1\n 14887: a0 = a0 + t0\n 14890: a0 = a0 + a1\n 14893: a0 = a0 + s1\n 14896: u64 [sp + 0xa0] = a5\n 14900: u64 [sp + 0xa8] = a4\n 14904: u64 [sp + 0xb0] = a3\n 14908: u64 [sp + 0xb8] = a0\n 14912: u64 [sp + 216] = 0\n 14916: u64 [sp + 208] = 0\n 14920: u64 [sp + 200] = 0\n 14924: u64 [sp + 192] = 0\n 14928: u32 [sp + 224] = 0x20\n 14933: i32 a1 = sp + 0xa0\n 14937: i32 a3 = sp + 0xc0\n 14941: i32 a4 = sp + 0xe0\n 14945: a2 = 0xffffffffffffffff\n 14948: a0 = 0\n 14950: ecalli 4 // 'get_storage'\n 14952: a0 = u64 [sp + 0xd8]\n 14956: t0 = u64 [sp + 0xc0]\n 14960: a2 = u64 [sp + 0xd0]\n 14964: a3 = u64 [sp + 0xc8]\n 14968: a1 = u64 [sp + 0x38]\n 14971: a4 = a0 ^ a1\n 14974: s1 = a0 <u a1\n 14977: a0 = u64 [sp + 0x58]\n 14980: a5 = a2 <u a0\n 14983: a5 = s1 if a4 != 0\n 14986: a1 = u64 [sp + 0x40]\n 14989: s1 = a3 ^ a1\n 14992: a3 = a3 <u a1\n 14995: a1 = u64 [sp + 0x48]\n 14998: a1 = t0 <u a1\n 15001: a1 = a3 if s1 != 0\n 15004: a0 = a0 ^ a2\n 15007: a0 = a0 | a4\n 15010: a1 = a5 if a0 != 0\n 15013: a0 = a1 ^ 0x1\n 15016: a1 = u64 [sp + 0x50]\n 15019: u64 [a1 + 24] = 0\n 15022: u64 [a1 + 16] = 0\n 15025: u64 [a1 + 8] = 0\n 15028: u64 [a1] = a0\n 15030: sp = s0 + 0xffffffffffffff00\n 15034: ra = u64 [sp + 0xf8]\n 15038: s0 = u64 [sp + 0xf0]\n 15042: s1 = u64 [sp + 0xe8]\n 15046: sp = sp + 0x100\n 15050: ret\n      : @239 (gas: 8)\n 15052: u64 [sp + 144] = 0\n 15056: u64 [sp + 136] = 0\n 15060: u64 [sp + 128] = 0\n 15064: a0 = 0x4e487b7100000000\n 15074: a1 = sp + 0x80\n 15078: u64 [sp + 0x98] = a0\n 15082: a0 = 0\n 15084: ra = 202, jump @8\n      : @240 [@dyn 101] (gas: 7)\n 15090: u64 [sp + 120] = 0\n 15093: u64 [sp + 112] = 0\n 15096: u64 [sp + 96] = 0x32\n 15100: a0 = 0x4\n 15103: a1 = sp + 0x60\n 15106: u64 [sp + 104] = 0\n 15109: ra = 204, jump @8\n      : @241 [@dyn 102] (gas: 3)\n 15115: a1 = 0x24\n 15118: a0 = 0\n 15120: ra = 206, jump @0\n      : @242 [@dyn 103] (gas: 6)\n 15126: i32 a1 = a0 + 0\n 15128: a0 = 0x1\n 15131: a2 = 0x24\n 15134: ra = 0xd0\n 15138: ecalli 6 // 'seal_return'\n 15140: fallthrough\n      : @243 [@dyn 104] (gas: 9)\n 15141: a2 = u64 [a1 + 0x18]\n 15144: a3 = u64 [a1 + 0x10]\n 15147: a4 = u64 [a1 + 0x8]\n 15150: a1 = u64 [a1]\n 15152: u64 [a0 + 0x18] = a2\n 15155: u64 [a0 + 0x10] = a3\n 15158: u64 [a0 + 0x8] = a4\n 15161: u64 [a0] = a1\n 15163: ret\n      : @244 (gas: 17)\n 15165: sp = sp + 0xffffffffffffffa0\n 15168: u64 [sp + 0x58] = ra\n 15171: u64 [sp + 0x50] = s0\n 15174: u64 [sp + 0x48] = s1\n 15177: a3 = u64 [a1 + 0x18]\n 15180: a4 = u64 [a1 + 0x10]\n 15183: a5 = u64 [a1 + 0x8]\n 15186: s1 = u64 [a1]\n 15188: a1 = a5 | a3\n 15191: a2 = s1 | a4\n 15194: a2 = a2 | a1\n 15197: a2 = a2 >> 0x20\n 15200: a1 = a1 | a4\n 15203: a1 = a1 << 0x20\n 15206: a1 = a1 | a2\n 15209: u64 [sp + 0x28] = a0\n 15212: jump @251 if a1 != 0\n      : @245 (gas: 19)\n 15216: a0 = s1 + 0x20\n 15219: u64 [sp + 0x30] = a0\n 15222: a0 = a0 <u s1\n 15225: a1 = a5 + a0\n 15228: u64 [sp + 0x40] = a1\n 15231: u64 [sp + 0x8] = a5\n 15234: s0 = a1 <u a5\n 15237: s0 = a0 if a0 == 0\n 15240: s0 = s0 + a4\n 15243: u64 [sp + 0x10] = a4\n 15246: a0 = s0 <u a4\n 15249: u64 [sp + 0x18] = a3\n 15252: a0 = a0 + a3\n 15255: u64 [sp + 0x38] = a0\n 15258: u64 [sp] = s1\n 15260: i32 a0 = s1 + 0\n 15262: a1 = 0x20\n 15265: s1 = 0x20\n 15268: ra = 210, jump @0\n      : @246 [@dyn 105] (gas: 45)\n 15274: u8 [a0 + 0x1f] = s1\n 15277: a1 = u64 [sp + 0x30]\n 15280: s1 = a1\n 15282: a1 = a1 | s0\n 15285: a2 = u64 [sp + 0x40]\n 15288: a4 = u64 [sp + 0x38]\n 15291: a2 = a2 | a4\n 15294: a1 = a1 | a2\n 15297: a1 = a1 >> 0x20\n 15300: u64 [sp + 0x20] = s0\n 15303: a2 = a2 | s0\n 15306: a2 = a2 << 0x20\n 15309: a1 = a1 | a2\n 15312: u8 [a0 + 30] = 0\n 15315: u8 [a0 + 29] = 0\n 15318: u8 [a0 + 28] = 0\n 15321: u8 [a0 + 27] = 0\n 15324: u8 [a0 + 26] = 0\n 15327: u8 [a0 + 25] = 0\n 15330: u8 [a0 + 24] = 0\n 15333: u8 [a0 + 23] = 0\n 15336: u8 [a0 + 22] = 0\n 15339: u8 [a0 + 21] = 0\n 15342: u8 [a0 + 20] = 0\n 15345: u8 [a0 + 19] = 0\n 15348: u8 [a0 + 18] = 0\n 15351: u8 [a0 + 17] = 0\n 15354: u8 [a0 + 16] = 0\n 15357: u8 [a0 + 15] = 0\n 15360: u8 [a0 + 14] = 0\n 15363: u8 [a0 + 13] = 0\n 15366: u8 [a0 + 12] = 0\n 15369: u8 [a0 + 11] = 0\n 15372: u8 [a0 + 10] = 0\n 15375: u8 [a0 + 9] = 0\n 15378: u8 [a0 + 8] = 0\n 15381: u8 [a0 + 7] = 0\n 15384: u8 [a0 + 6] = 0\n 15387: u8 [a0 + 5] = 0\n 15390: u8 [a0 + 4] = 0\n 15393: u8 [a0 + 3] = 0\n 15396: u8 [a0 + 2] = 0\n 15399: u8 [a0 + 1] = 0\n 15402: u8 [a0 + 0] = 0\n 15404: jump @251 if a1 != 0\n      : @247 (gas: 4)\n 15408: i32 s0 = s1 + 0\n 15410: a1 = 0x20\n 15413: a0 = s0\n 15415: ra = 212, jump @0\n      : @248 [@dyn 106] (gas: 41)\n 15421: u8 [a0 + 31] = 0xb\n 15425: u8 [a0 + 30] = 0\n 15428: u8 [a0 + 29] = 0\n 15431: u8 [a0 + 28] = 0\n 15434: u8 [a0 + 27] = 0\n 15437: u8 [a0 + 26] = 0\n 15440: u8 [a0 + 25] = 0\n 15443: u8 [a0 + 24] = 0\n 15446: u8 [a0 + 23] = 0\n 15449: u8 [a0 + 22] = 0\n 15452: u8 [a0 + 21] = 0\n 15455: u8 [a0 + 20] = 0\n 15458: u8 [a0 + 19] = 0\n 15461: u8 [a0 + 18] = 0\n 15464: u8 [a0 + 17] = 0\n 15467: u8 [a0 + 16] = 0\n 15470: u8 [a0 + 15] = 0\n 15473: u8 [a0 + 14] = 0\n 15476: u8 [a0 + 13] = 0\n 15479: u8 [a0 + 12] = 0\n 15482: u8 [a0 + 11] = 0\n 15485: u8 [a0 + 10] = 0\n 15488: u8 [a0 + 9] = 0\n 15491: u8 [a0 + 8] = 0\n 15494: u8 [a0 + 7] = 0\n 15497: u8 [a0 + 6] = 0\n 15500: u8 [a0 + 5] = 0\n 15503: u8 [a0 + 4] = 0\n 15506: u8 [a0 + 3] = 0\n 15509: u8 [a0 + 2] = 0\n 15512: u8 [a0 + 1] = 0\n 15515: a1 = u64 [sp + 0x20]\n 15518: a2 = u64 [sp + 0x38]\n 15521: a1 = a1 | a2\n 15524: a2 = 0xffffffe0\n 15534: a2 = s1 <u a2\n 15537: a3 = u64 [sp + 0x40]\n 15540: a2 = 0 if a3 != 0\n 15542: a2 = 0 if a1 != 0\n 15544: u8 [a0 + 0] = 0\n 15546: jump @251 if a2 == 0\n      : @249 (gas: 3)\n 15550: i32 a0 = s0 + 0x20\n 15553: a1 = 0x20\n 15556: ra = 214, jump @0\n      : @250 [@dyn 107] (gas: 54)\n 15562: u8 [a0 + 31] = 0\n 15565: u8 [a0 + 30] = 0\n 15568: u8 [a0 + 29] = 0\n 15571: u8 [a0 + 28] = 0\n 15574: u8 [a0 + 27] = 0\n 15577: u8 [a0 + 26] = 0\n 15580: u8 [a0 + 25] = 0\n 15583: u8 [a0 + 24] = 0\n 15586: u8 [a0 + 23] = 0\n 15589: u8 [a0 + 22] = 0\n 15592: u8 [a0 + 21] = 0\n 15595: u8 [a0 + 20] = 0\n 15598: u8 [a0 + 19] = 0\n 15601: u8 [a0 + 18] = 0\n 15604: u8 [a0 + 17] = 0\n 15607: u8 [a0 + 16] = 0\n 15610: u8 [a0 + 15] = 0\n 15613: u8 [a0 + 14] = 0\n 15616: u8 [a0 + 13] = 0\n 15619: u8 [a0 + 12] = 0\n 15622: u8 [a0 + 11] = 0\n 15625: u8 [a0 + 10] = 0x74\n 15629: u8 [a0 + 9] = 0x65\n 15633: u8 [a0 + 8] = 0x73\n 15637: u8 [a0 + 7] = 0x20\n 15641: u8 [a0 + 6] = 0x79\n 15645: u8 [a0 + 5] = 0x64\n 15649: u8 [a0 + 4] = 0x61\n 15653: u8 [a0 + 3] = 0x65\n 15657: u8 [a0 + 2] = 0x72\n 15661: u8 [a0 + 1] = 0x6c\n 15665: u8 [a0 + 0] = 0x41\n 15668: a1 = u64 [sp]\n 15670: a0 = a1 + 0x60\n 15673: a1 = a0 <u a1\n 15676: a3 = u64 [sp + 0x8]\n 15679: a2 = a3 + a1\n 15682: a3 = a2 <u a3\n 15685: a3 = a1 if a1 == 0\n 15688: a1 = u64 [sp + 0x10]\n 15691: a3 = a3 + a1\n 15694: a1 = a3 <u a1\n 15697: a4 = u64 [sp + 0x18]\n 15700: a1 = a1 + a4\n 15703: a4 = u64 [sp + 0x28]\n 15706: u64 [a4] = a0\n 15708: u64 [a4 + 0x8] = a2\n 15711: u64 [a4 + 0x10] = a3\n 15714: u64 [a4 + 0x18] = a1\n 15717: ra = u64 [sp + 0x58]\n 15720: s0 = u64 [sp + 0x50]\n 15723: s1 = u64 [sp + 0x48]\n 15726: sp = sp + 0x60\n 15729: ret\n      : @251 (gas: 1)\n 15731: trap\n      : @252 (gas: 6)\n 15732: a0 = u64 [sp + 0xa0]\n 15736: a1 = u32 [sp + 0xb0]\n 15740: a2 = u64 [sp + 0xa8]\n 15744: a0 = a0 | a1\n 15747: a0 = a0 | a2\n 15750: jump @254 if a0 != 0\n      : @253 (gas: 50)\n 15754: a0 = 0xffffffff\n 15764: a1 = u64 [sp + 0x8]\n 15767: a1 = a1 & 0xffffffffffffffff\n 15770: u64 [sp + 0x8] = a1\n 15773: a1 = u64 [sp + 0x10]\n 15776: a1 = a1 & 0xffffffffffffffff\n 15779: u64 [sp + 0x10] = a1\n 15782: s1 = u64 [sp + 0x18]\n 15785: s1 = s1 & a0\n 15788: u64 [sp + 152] = 0\n 15792: u64 [sp + 144] = 0\n 15796: u64 [sp + 136] = 0\n 15800: u64 [sp + 128] = 0x1\n 15805: u64 [sp + 184] = 0\n 15809: u64 [sp + 176] = 0\n 15813: u64 [sp + 168] = 0\n 15817: u64 [sp + 160] = 0\n 15821: u32 [sp + 96] = 0x20\n 15825: i32 a1 = sp + 0x80\n 15829: i32 a3 = sp + 0xa0\n 15833: i32 a4 = sp + 0x60\n 15836: a2 = 0xffffffffffffffff\n 15839: a0 = 0\n 15841: ecalli 4 // 'get_storage'\n 15843: a0 = u32 [sp + 0xb4]\n 15847: a0 = a0 << 0x20\n 15850: a1 = u64 [sp + 0xb8]\n 15854: a0 = a0 | s1\n 15857: u64 [sp + 152] = 0\n 15861: u64 [sp + 144] = 0\n 15865: u64 [sp + 136] = 0\n 15869: u64 [sp + 128] = 0x1\n 15874: u64 [sp + 0xb8] = a1\n 15878: u64 [sp + 0xb0] = a0\n 15882: a0 = u64 [sp + 0x10]\n 15885: u64 [sp + 0xa8] = a0\n 15889: a0 = u64 [sp + 0x8]\n 15892: u64 [sp + 0xa0] = a0\n 15896: i32 a1 = sp + 0x80\n 15900: i32 a3 = sp + 0xa0\n 15904: a2 = 0xffffffffffffffff\n 15907: a4 = 0x20\n 15910: a0 = 0\n 15912: ecalli 8 // 'set_storage'\n 15914: sp = s0 + 0xffffffffffffff20\n 15918: ra = u64 [sp + 0xd8]\n 15922: s0 = u64 [sp + 0xd0]\n 15926: s1 = u64 [sp + 0xc8]\n 15930: sp = sp + 0xe0\n 15934: ret\n      : @254 (gas: 3)\n 15936: a0 = 0x40\n 15939: a1 = 0x20\n 15942: ra = 216, jump @0\n      : @255 [@dyn 108] (gas: 103)\n 15948: a1 = u8 [a0 + 0x11]\n 15951: a2 = u8 [a0 + 0x10]\n 15954: a3 = u8 [a0 + 0x12]\n 15957: a4 = u8 [a0 + 0x13]\n 15960: a1 = a1 << 0x8\n 15963: a1 = a1 | a2\n 15966: a3 = a3 << 0x10\n 15969: a4 = a4 << 0x18\n 15972: a3 = a3 | a4\n 15975: a1 = a1 | a3\n 15978: a2 = u8 [a0 + 0x15]\n 15981: a3 = u8 [a0 + 0x14]\n 15984: a4 = u8 [a0 + 0x16]\n 15987: a5 = u8 [a0 + 0x17]\n 15990: a2 = a2 << 0x8\n 15993: a2 = a2 | a3\n 15996: a4 = a4 << 0x10\n 15999: a5 = a5 << 0x18\n 16002: a4 = a4 | a5\n 16005: a2 = a2 | a4\n 16008: a2 = a2 << 0x20\n 16011: t0 = a2 | a1\n 16014: a2 = u8 [a0 + 0x1]\n 16017: a3 = u8 [a0]\n 16019: a4 = u8 [a0 + 0x2]\n 16022: a5 = u8 [a0 + 0x3]\n 16025: a2 = a2 << 0x8\n 16028: a2 = a2 | a3\n 16031: a4 = a4 << 0x10\n 16034: a5 = a5 << 0x18\n 16037: a4 = a4 | a5\n 16040: a2 = a2 | a4\n 16043: a3 = u8 [a0 + 0x5]\n 16046: a4 = u8 [a0 + 0x4]\n 16049: a5 = u8 [a0 + 0x6]\n 16052: s1 = u8 [a0 + 0x7]\n 16055: a3 = a3 << 0x8\n 16058: a3 = a3 | a4\n 16061: a5 = a5 << 0x10\n 16064: s1 = s1 << 0x18\n 16067: a5 = a5 | s1\n 16070: a3 = a3 | a5\n 16073: a3 = a3 << 0x20\n 16076: a2 = a2 | a3\n 16079: a3 = u8 [a0 + 0x19]\n 16082: a4 = u8 [a0 + 0x18]\n 16085: a5 = u8 [a0 + 0x1a]\n 16088: s1 = u8 [a0 + 0x1b]\n 16091: a3 = a3 << 0x8\n 16094: a3 = a3 | a4\n 16097: a5 = a5 << 0x10\n 16100: s1 = s1 << 0x18\n 16103: a5 = a5 | s1\n 16106: a3 = a3 | a5\n 16109: a4 = u8 [a0 + 0x1d]\n 16112: a5 = u8 [a0 + 0x1c]\n 16115: s1 = u8 [a0 + 0x1e]\n 16118: a1 = u8 [a0 + 0x1f]\n 16121: a4 = a4 << 0x8\n 16124: a4 = a4 | a5\n 16127: s1 = s1 << 0x10\n 16130: a1 = a1 << 0x18\n 16133: a1 = a1 | s1\n 16136: a1 = a1 | a4\n 16139: a1 = a1 << 0x20\n 16142: a3 = a3 | a1\n 16145: a1 = u8 [a0 + 0x9]\n 16148: a4 = u8 [a0 + 0x8]\n 16151: a5 = u8 [a0 + 0xa]\n 16154: s1 = u8 [a0 + 0xb]\n 16157: a1 = a1 << 0x8\n 16160: a1 = a1 | a4\n 16163: a5 = a5 << 0x10\n 16166: s1 = s1 << 0x18\n 16169: a5 = a5 | s1\n 16172: a1 = a1 | a5\n 16175: a4 = u8 [a0 + 0xd]\n 16178: a5 = u8 [a0 + 0xc]\n 16181: s1 = u8 [a0 + 0xe]\n 16184: a0 = u8 [a0 + 0xf]\n 16187: a4 = a4 << 0x8\n 16190: a4 = a4 | a5\n 16193: s1 = s1 << 0x10\n 16196: a0 = a0 << 0x18\n 16199: a0 = a0 | s1\n 16202: a0 = a0 | a4\n 16205: a0 = a0 << 0x20\n 16208: a0 = a0 | a1\n 16211: s1 = reverse a0\n 16213: a1 = reverse a3\n 16215: a2 = reverse a2\n 16217: a0 = reverse t0\n 16219: u64 [sp + 0x18] = a0\n 16222: u64 [sp + 0x10] = a2\n 16225: a0 = a0 | a2\n 16228: a2 = a1\n 16230: a1 = a1 | s1\n 16233: a1 = a1 | a0\n 16236: a1 = a1 >> 0x20\n 16239: a0 = a0 | s1\n 16242: a0 = a0 << 0x20\n 16245: a0 = a0 | a1\n 16248: jump @259 if a0 != 0\n      : @256 (gas: 5)\n 16252: u64 [sp + 0x8] = a2\n 16255: i32 a0 = a2 + 0\n 16257: a1 = 0x20\n 16260: u64 [sp] = a0\n 16262: ra = 218, jump @0\n      : @257 [@dyn 109] (gas: 50)\n 16268: u8 [a0 + 31] = 0\n 16271: u8 [a0 + 30] = 0\n 16274: u8 [a0 + 29] = 0\n 16277: u8 [a0 + 28] = 0\n 16280: u8 [a0 + 27] = 0\n 16283: u8 [a0 + 26] = 0\n 16286: u8 [a0 + 25] = 0\n 16289: u8 [a0 + 24] = 0\n 16292: u8 [a0 + 23] = 0\n 16295: u8 [a0 + 22] = 0\n 16298: u8 [a0 + 21] = 0\n 16301: u8 [a0 + 20] = 0\n 16304: u8 [a0 + 19] = 0\n 16307: u8 [a0 + 18] = 0\n 16310: u8 [a0 + 17] = 0\n 16313: u8 [a0 + 16] = 0\n 16316: u8 [a0 + 15] = 0\n 16319: u8 [a0 + 14] = 0\n 16322: u8 [a0 + 13] = 0\n 16325: u8 [a0 + 12] = 0\n 16328: u8 [a0 + 11] = 0\n 16331: u8 [a0 + 10] = 0\n 16334: u8 [a0 + 9] = 0\n 16337: u8 [a0 + 8] = 0\n 16340: u8 [a0 + 7] = 0\n 16343: u8 [a0 + 6] = 0\n 16346: u8 [a0 + 5] = 0\n 16349: u8 [a0 + 4] = 0\n 16352: u8 [a0 + 3] = 0xa0\n 16357: u8 [a0 + 2] = 0x79\n 16361: u8 [a0 + 1] = 0xc3\n 16366: u8 [a0 + 0] = 0x8\n 16369: a1 = u64 [sp + 0x8]\n 16372: a0 = a1 + 0x4\n 16375: a1 = a0 <u a1\n 16378: a3 = u64 [sp + 0x18]\n 16381: a2 = a3 + a1\n 16384: a3 = a2 <u a3\n 16387: a3 = a1 if a1 == 0\n 16390: a3 = a3 + s1\n 16393: a1 = a3 <u s1\n 16396: a4 = u64 [sp + 0x10]\n 16399: a4 = a4 + a1\n 16402: u64 [sp + 0x28] = a2\n 16405: u64 [sp + 0x20] = a0\n 16408: u64 [sp + 0x30] = a3\n 16411: a0 = sp + 0x40\n 16414: a1 = sp + 0x20\n 16417: u64 [sp + 0x38] = a4\n 16420: ra = 220, jump @244\n      : @258 [@dyn 110] (gas: 30)\n 16426: a0 = u64 [sp + 0x48]\n 16429: t0 = u64 [sp + 0x58]\n 16432: t1 = u64 [sp + 0x40]\n 16435: a3 = u64 [sp + 0x50]\n 16438: a1 = u64 [sp + 0x18]\n 16441: a4 = a0 ^ a1\n 16444: a5 = a0 <u a1\n 16447: t2 = a1\n 16449: a2 = u64 [sp + 0x8]\n 16452: a1 = t1 <u a2\n 16455: a5 = a1 if a4 == 0\n 16458: a4 = a3 - s1\n 16461: a3 = a3 <u s1\n 16464: s1 = u64 [sp + 0x10]\n 16467: s1 = t0 - s1\n 16470: s1 = s1 - a3\n 16473: a3 = a4 <u a5\n 16476: s1 = s1 - a3\n 16479: a4 = a4 - a5\n 16482: a0 = a0 - t2\n 16485: a1 = a0 - a1\n 16488: a0 = t1 - a2\n 16491: a1 = a1 | s1\n 16494: a2 = a0 | a4\n 16497: a2 = a2 | a1\n 16500: a1 = a1 | a4\n 16503: a2 = a2 >> 0x20\n 16506: a1 = a1 << 0x20\n 16509: a1 = a1 | a2\n 16512: jump @260 if a1 == 0\n      : @259 (gas: 1)\n 16515: trap\n      : @260 (gas: 4)\n 16516: i32 s1 = a0 + 0\n 16518: a0 = u64 [sp]\n 16520: a1 = s1\n 16522: ra = 222, jump @0\n      : @261 [@dyn 111] (gas: 6)\n 16528: i32 a1 = a0 + 0\n 16530: a0 = 0x1\n 16533: a2 = s1\n 16535: ra = 0xe0\n 16539: ecalli 6 // 'seal_return'\n 16541: fallthrough\n      : @262 [@dyn 112] (gas: 12)\n 16542: a1 = u64 [a0 + 0x10]\n 16545: a2 = u64 [a0 + 0x18]\n 16548: a3 = u64 [a0 + 0x8]\n 16551: a0 = u64 [a0]\n 16553: a2 = a2 | a3\n 16556: a3 = a0 | a1\n 16559: a3 = a3 | a2\n 16562: a3 = a3 >> 0x20\n 16565: a1 = a1 | a2\n 16568: a1 = a1 << 0x20\n 16571: a1 = a1 | a3\n 16574: jump @265 if a1 != 0\n      : @263 (gas: 5)\n 16578: sp = sp + 0xfffffffffffffff8\n 16581: u64 [sp] = ra\n 16583: i32 a0 = a0 + 0\n 16585: a1 = 0x20\n 16588: ra = 226, jump @0\n      : @264 [@dyn 113] (gas: 36)\n 16594: u8 [a0 + 31] = 0\n 16597: u8 [a0 + 30] = 0\n 16600: u8 [a0 + 29] = 0\n 16603: u8 [a0 + 28] = 0\n 16606: u8 [a0 + 27] = 0\n 16609: u8 [a0 + 26] = 0\n 16612: u8 [a0 + 25] = 0\n 16615: u8 [a0 + 24] = 0\n 16618: u8 [a0 + 23] = 0\n 16621: u8 [a0 + 22] = 0\n 16624: u8 [a0 + 21] = 0\n 16627: u8 [a0 + 20] = 0\n 16630: u8 [a0 + 19] = 0\n 16633: u8 [a0 + 18] = 0\n 16636: u8 [a0 + 17] = 0\n 16639: u8 [a0 + 16] = 0\n 16642: u8 [a0 + 15] = 0\n 16645: u8 [a0 + 14] = 0\n 16648: u8 [a0 + 13] = 0\n 16651: u8 [a0 + 12] = 0\n 16654: u8 [a0 + 11] = 0x64\n 16658: u8 [a0 + 10] = 0x65\n 16662: u8 [a0 + 9] = 0x7a\n 16666: u8 [a0 + 8] = 0x69\n 16670: u8 [a0 + 7] = 0x72\n 16674: u8 [a0 + 6] = 0x6f\n 16678: u8 [a0 + 5] = 0x68\n 16682: u8 [a0 + 4] = 0x74\n 16686: u8 [a0 + 3] = 0x75\n 16690: u8 [a0 + 2] = 0x61\n 16694: u8 [a0 + 1] = 0x6e\n 16698: a1 = 0x55\n 16701: u8 [a0] = a1\n 16703: ra = u64 [sp]\n 16705: sp = sp + 0x8\n 16708: ret\n      : @265 (gas: 1)\n 16710: trap\n      : @266 (gas: 17)\n 16711: sp = sp + 0xffffffffffffffa0\n 16714: u64 [sp + 0x58] = ra\n 16717: u64 [sp + 0x50] = s0\n 16720: u64 [sp + 0x48] = s1\n 16723: a3 = u64 [a1 + 0x18]\n 16726: a4 = u64 [a1 + 0x10]\n 16729: a5 = u64 [a1 + 0x8]\n 16732: s1 = u64 [a1]\n 16734: a1 = a5 | a3\n 16737: a2 = s1 | a4\n 16740: a2 = a2 | a1\n 16743: a2 = a2 >> 0x20\n 16746: a1 = a1 | a4\n 16749: a1 = a1 << 0x20\n 16752: a1 = a1 | a2\n 16755: u64 [sp + 0x28] = a0\n 16758: jump @273 if a1 != 0\n      : @267 (gas: 19)\n 16762: a0 = s1 + 0x20\n 16765: u64 [sp + 0x30] = a0\n 16768: a0 = a0 <u s1\n 16771: a1 = a5 + a0\n 16774: u64 [sp + 0x40] = a1\n 16777: u64 [sp + 0x8] = a5\n 16780: s0 = a1 <u a5\n 16783: s0 = a0 if a0 == 0\n 16786: s0 = s0 + a4\n 16789: u64 [sp + 0x10] = a4\n 16792: a0 = s0 <u a4\n 16795: u64 [sp + 0x18] = a3\n 16798: a0 = a0 + a3\n 16801: u64 [sp + 0x38] = a0\n 16804: u64 [sp] = s1\n 16806: i32 a0 = s1 + 0\n 16808: a1 = 0x20\n 16811: s1 = 0x20\n 16814: ra = 228, jump @0\n      : @268 [@dyn 114] (gas: 45)\n 16820: u8 [a0 + 0x1f] = s1\n 16823: a1 = u64 [sp + 0x30]\n 16826: s1 = a1\n 16828: a1 = a1 | s0\n 16831: a2 = u64 [sp + 0x40]\n 16834: a4 = u64 [sp + 0x38]\n 16837: a2 = a2 | a4\n 16840: a1 = a1 | a2\n 16843: a1 = a1 >> 0x20\n 16846: u64 [sp + 0x20] = s0\n 16849: a2 = a2 | s0\n 16852: a2 = a2 << 0x20\n 16855: a1 = a1 | a2\n 16858: u8 [a0 + 30] = 0\n 16861: u8 [a0 + 29] = 0\n 16864: u8 [a0 + 28] = 0\n 16867: u8 [a0 + 27] = 0\n 16870: u8 [a0 + 26] = 0\n 16873: u8 [a0 + 25] = 0\n 16876: u8 [a0 + 24] = 0\n 16879: u8 [a0 + 23] = 0\n 16882: u8 [a0 + 22] = 0\n 16885: u8 [a0 + 21] = 0\n 16888: u8 [a0 + 20] = 0\n 16891: u8 [a0 + 19] = 0\n 16894: u8 [a0 + 18] = 0\n 16897: u8 [a0 + 17] = 0\n 16900: u8 [a0 + 16] = 0\n 16903: u8 [a0 + 15] = 0\n 16906: u8 [a0 + 14] = 0\n 16909: u8 [a0 + 13] = 0\n 16912: u8 [a0 + 12] = 0\n 16915: u8 [a0 + 11] = 0\n 16918: u8 [a0 + 10] = 0\n 16921: u8 [a0 + 9] = 0\n 16924: u8 [a0 + 8] = 0\n 16927: u8 [a0 + 7] = 0\n 16930: u8 [a0 + 6] = 0\n 16933: u8 [a0 + 5] = 0\n 16936: u8 [a0 + 4] = 0\n 16939: u8 [a0 + 3] = 0\n 16942: u8 [a0 + 2] = 0\n 16945: u8 [a0 + 1] = 0\n 16948: u8 [a0 + 0] = 0\n 16950: jump @273 if a1 != 0\n      : @269 (gas: 4)\n 16954: i32 s0 = s1 + 0\n 16956: a1 = 0x20\n 16959: a0 = s0\n 16961: ra = 230, jump @0\n      : @270 [@dyn 115] (gas: 41)\n 16967: u8 [a0 + 31] = 0xc\n 16971: u8 [a0 + 30] = 0\n 16974: u8 [a0 + 29] = 0\n 16977: u8 [a0 + 28] = 0\n 16980: u8 [a0 + 27] = 0\n 16983: u8 [a0 + 26] = 0\n 16986: u8 [a0 + 25] = 0\n 16989: u8 [a0 + 24] = 0\n 16992: u8 [a0 + 23] = 0\n 16995: u8 [a0 + 22] = 0\n 16998: u8 [a0 + 21] = 0\n 17001: u8 [a0 + 20] = 0\n 17004: u8 [a0 + 19] = 0\n 17007: u8 [a0 + 18] = 0\n 17010: u8 [a0 + 17] = 0\n 17013: u8 [a0 + 16] = 0\n 17016: u8 [a0 + 15] = 0\n 17019: u8 [a0 + 14] = 0\n 17022: u8 [a0 + 13] = 0\n 17025: u8 [a0 + 12] = 0\n 17028: u8 [a0 + 11] = 0\n 17031: u8 [a0 + 10] = 0\n 17034: u8 [a0 + 9] = 0\n 17037: u8 [a0 + 8] = 0\n 17040: u8 [a0 + 7] = 0\n 17043: u8 [a0 + 6] = 0\n 17046: u8 [a0 + 5] = 0\n 17049: u8 [a0 + 4] = 0\n 17052: u8 [a0 + 3] = 0\n 17055: u8 [a0 + 2] = 0\n 17058: u8 [a0 + 1] = 0\n 17061: a1 = u64 [sp + 0x20]\n 17064: a2 = u64 [sp + 0x38]\n 17067: a1 = a1 | a2\n 17070: a2 = 0xffffffe0\n 17080: a2 = s1 <u a2\n 17083: a3 = u64 [sp + 0x40]\n 17086: a2 = 0 if a3 != 0\n 17088: a2 = 0 if a1 != 0\n 17090: u8 [a0 + 0] = 0\n 17092: jump @273 if a2 == 0\n      : @271 (gas: 3)\n 17096: i32 a0 = s0 + 0x20\n 17099: a1 = 0x20\n 17102: ra = 232, jump @0\n      : @272 [@dyn 116] (gas: 54)\n 17108: u8 [a0 + 31] = 0\n 17111: u8 [a0 + 30] = 0\n 17114: u8 [a0 + 29] = 0\n 17117: u8 [a0 + 28] = 0\n 17120: u8 [a0 + 27] = 0\n 17123: u8 [a0 + 26] = 0\n 17126: u8 [a0 + 25] = 0\n 17129: u8 [a0 + 24] = 0\n 17132: u8 [a0 + 23] = 0\n 17135: u8 [a0 + 22] = 0\n 17138: u8 [a0 + 21] = 0\n 17141: u8 [a0 + 20] = 0\n 17144: u8 [a0 + 19] = 0\n 17147: u8 [a0 + 18] = 0\n 17150: u8 [a0 + 17] = 0\n 17153: u8 [a0 + 16] = 0\n 17156: u8 [a0 + 15] = 0\n 17159: u8 [a0 + 14] = 0\n 17162: u8 [a0 + 13] = 0\n 17165: u8 [a0 + 12] = 0\n 17168: u8 [a0 + 11] = 0x64\n 17172: u8 [a0 + 10] = 0x65\n 17176: u8 [a0 + 9] = 0x7a\n 17180: u8 [a0 + 8] = 0x69\n 17184: u8 [a0 + 7] = 0x72\n 17188: u8 [a0 + 6] = 0x6f\n 17192: u8 [a0 + 5] = 0x68\n 17196: u8 [a0 + 4] = 0x74\n 17200: u8 [a0 + 3] = 0x75\n 17204: u8 [a0 + 2] = 0x61\n 17208: u8 [a0 + 1] = 0x6e\n 17212: u8 [a0 + 0] = 0x55\n 17215: a1 = u64 [sp]\n 17217: a0 = a1 + 0x60\n 17220: a1 = a0 <u a1\n 17223: a3 = u64 [sp + 0x8]\n 17226: a2 = a3 + a1\n 17229: a3 = a2 <u a3\n 17232: a3 = a1 if a1 == 0\n 17235: a1 = u64 [sp + 0x10]\n 17238: a3 = a3 + a1\n 17241: a1 = a3 <u a1\n 17244: a4 = u64 [sp + 0x18]\n 17247: a1 = a1 + a4\n 17250: a4 = u64 [sp + 0x28]\n 17253: u64 [a4] = a0\n 17255: u64 [a4 + 0x8] = a2\n 17258: u64 [a4 + 0x10] = a3\n 17261: u64 [a4 + 0x18] = a1\n 17264: ra = u64 [sp + 0x58]\n 17267: s0 = u64 [sp + 0x50]\n 17270: s1 = u64 [sp + 0x48]\n 17273: sp = sp + 0x60\n 17276: ret\n      : @273 (gas: 1)\n 17278: trap\n      : @274 (gas: 71)\n 17279: sp = sp + 0xfffffffffffffe20\n 17283: u64 [sp + 0x1d8] = ra\n 17287: u64 [sp + 0x1d0] = s0\n 17291: u64 [sp + 0x1c8] = s1\n 17295: s0 = sp + 0x1e0\n 17299: sp = sp & 0xffffffffffffffe0\n 17302: a4 = u64 [a3 + 0x18]\n 17305: u64 [sp + 0x80] = a4\n 17309: a4 = u64 [a3 + 0x10]\n 17312: u64 [sp + 0x70] = a4\n 17315: a4 = u64 [a3 + 0x8]\n 17318: u64 [sp + 0x58] = a4\n 17321: a3 = u64 [a3]\n 17323: u64 [sp + 0x38] = a3\n 17326: a3 = u64 [a2 + 0x18]\n 17329: u64 [sp + 0x78] = a3\n 17332: a3 = u64 [a2 + 0x10]\n 17335: u64 [sp + 0x60] = a3\n 17338: a3 = u64 [a2 + 0x8]\n 17341: u64 [sp + 0x48] = a3\n 17344: a2 = u64 [a2]\n 17346: u64 [sp + 0x28] = a2\n 17349: a2 = u64 [a1 + 0x18]\n 17352: u64 [sp + 0x68] = a2\n 17355: a2 = u64 [a1 + 0x10]\n 17358: u64 [sp + 0x50] = a2\n 17361: a2 = u64 [a1 + 0x8]\n 17364: u64 [sp + 0x30] = a2\n 17367: a1 = u64 [a1]\n 17369: u64 [sp + 0x18] = a1\n 17372: a1 = u64 [a0 + 0x18]\n 17375: u64 [sp + 0x88] = a1\n 17379: a1 = u64 [a0 + 0x10]\n 17382: u64 [sp + 0x40] = a1\n 17385: a1 = u64 [a0 + 0x8]\n 17388: u64 [sp + 0x20] = a1\n 17391: a0 = u64 [a0]\n 17393: u64 [sp + 0x10] = a0\n 17396: i32 a0 = sp + 0x160\n 17400: ecalli 3 // 'caller'\n 17402: a0 = u64 [sp + 0x168]\n 17406: a1 = u64 [sp + 0x160]\n 17410: a2 = i32 [sp + 0x170]\n 17414: a0 = reverse a0\n 17416: a3 = a0 >> 0x20\n 17419: s1 = reverse a1\n 17421: a1 = s1 << 0x20\n 17424: a1 = a1 | a3\n 17427: u64 [sp + 0x98] = a1\n 17431: a0 = a0 << 0x20\n 17434: a1 = reverse a2\n 17436: a1 = a1 >> 0x20\n 17439: a0 = a0 | a1\n 17442: u64 [sp + 0x90] = a0\n 17446: s1 = s1 >> 0x20\n 17449: u64 [sp + 408] = 0\n 17453: u64 [sp + 400] = 0\n 17457: u64 [sp + 392] = 0\n 17461: u64 [sp + 384] = 0x1\n 17466: u64 [sp + 440] = 0\n 17470: u64 [sp + 432] = 0\n 17474: u64 [sp + 424] = 0\n 17478: u64 [sp + 416] = 0\n 17482: u32 [sp + 448] = 0x20\n 17487: i32 a1 = sp + 0x180\n 17491: i32 a3 = sp + 0x1a0\n 17495: i32 a4 = sp + 0x1c0\n 17499: a2 = 0xffffffffffffffff\n 17502: a0 = 0\n 17504: ecalli 4 // 'get_storage'\n 17506: fallthrough\n      : @275 (gas: 11)\n 17507: a0 = u32 [sp + 0x1b0]\n 17511: a1 = u64 [sp + 0x1a0]\n 17515: a2 = u64 [sp + 0x1a8]\n 17519: a0 = a0 ^ s1\n 17522: a3 = u64 [sp + 0x90]\n 17526: a1 = a1 ^ a3\n 17529: a0 = a0 | a1\n 17532: a1 = u64 [sp + 0x98]\n 17536: a1 = a1 ^ a2\n 17539: a0 = a0 | a1\n 17542: jump @278 if a0 != 0\n      : @276 (gas: 37)\n 17546: a0 = u64 [sp + 0x38]\n 17549: u64 [sp + 0xa0] = a0\n 17553: a0 = u64 [sp + 0x28]\n 17556: u64 [sp + 0xc0] = a0\n 17560: a0 = u64 [sp + 0x18]\n 17563: u64 [sp + 0xe0] = a0\n 17567: a0 = u64 [sp + 0x10]\n 17570: u64 [sp + 0x100] = a0\n 17574: a0 = u64 [sp + 0x58]\n 17577: u64 [sp + 0xa8] = a0\n 17581: a0 = u64 [sp + 0x48]\n 17584: u64 [sp + 0xc8] = a0\n 17588: a0 = u64 [sp + 0x30]\n 17591: u64 [sp + 0xe8] = a0\n 17595: a0 = u64 [sp + 0x20]\n 17598: u64 [sp + 0x108] = a0\n 17602: a0 = u64 [sp + 0x70]\n 17605: u64 [sp + 0xb0] = a0\n 17609: a0 = u64 [sp + 0x60]\n 17612: u64 [sp + 0xd0] = a0\n 17616: a0 = u64 [sp + 0x50]\n 17619: u64 [sp + 0xf0] = a0\n 17623: a0 = u64 [sp + 0x40]\n 17626: u64 [sp + 0x110] = a0\n 17630: a0 = u64 [sp + 0x80]\n 17634: u64 [sp + 0xb8] = a0\n 17638: a0 = u64 [sp + 0x78]\n 17641: u64 [sp + 0xd8] = a0\n 17645: a0 = u64 [sp + 0x68]\n 17648: u64 [sp + 0xf8] = a0\n 17652: a0 = sp + 0x100\n 17656: a1 = sp + 0xe0\n 17660: a2 = sp + 0xc0\n 17664: a3 = sp + 0xa0\n 17668: a4 = u64 [sp + 0x88]\n 17672: u64 [sp + 0x118] = a4\n 17676: ra = 234, jump @303\n      : @277 [@dyn 117] (gas: 6)\n 17682: sp = s0 + 0xfffffffffffffe20\n 17686: ra = u64 [sp + 0x1d8]\n 17690: s0 = u64 [sp + 0x1d0]\n 17694: s1 = u64 [sp + 0x1c8]\n 17698: sp = sp + 0x1e0\n 17702: ret\n      : @278 (gas: 3)\n 17704: a0 = 0x40\n 17707: a1 = 0x20\n 17710: ra = 236, jump @0\n      : @279 [@dyn 118] (gas: 103)\n 17716: a1 = u8 [a0 + 0x11]\n 17719: a2 = u8 [a0 + 0x10]\n 17722: a3 = u8 [a0 + 0x12]\n 17725: a4 = u8 [a0 + 0x13]\n 17728: a1 = a1 << 0x8\n 17731: a1 = a1 | a2\n 17734: a3 = a3 << 0x10\n 17737: a4 = a4 << 0x18\n 17740: a3 = a3 | a4\n 17743: a1 = a1 | a3\n 17746: a2 = u8 [a0 + 0x15]\n 17749: a3 = u8 [a0 + 0x14]\n 17752: a4 = u8 [a0 + 0x16]\n 17755: a5 = u8 [a0 + 0x17]\n 17758: a2 = a2 << 0x8\n 17761: a2 = a2 | a3\n 17764: a4 = a4 << 0x10\n 17767: a5 = a5 << 0x18\n 17770: a4 = a4 | a5\n 17773: a2 = a2 | a4\n 17776: a2 = a2 << 0x20\n 17779: t0 = a2 | a1\n 17782: a2 = u8 [a0 + 0x1]\n 17785: a3 = u8 [a0]\n 17787: a4 = u8 [a0 + 0x2]\n 17790: a5 = u8 [a0 + 0x3]\n 17793: a2 = a2 << 0x8\n 17796: a2 = a2 | a3\n 17799: a4 = a4 << 0x10\n 17802: a5 = a5 << 0x18\n 17805: a4 = a4 | a5\n 17808: a2 = a2 | a4\n 17811: a3 = u8 [a0 + 0x5]\n 17814: a4 = u8 [a0 + 0x4]\n 17817: a5 = u8 [a0 + 0x6]\n 17820: s1 = u8 [a0 + 0x7]\n 17823: a3 = a3 << 0x8\n 17826: a3 = a3 | a4\n 17829: a5 = a5 << 0x10\n 17832: s1 = s1 << 0x18\n 17835: a5 = a5 | s1\n 17838: a3 = a3 | a5\n 17841: a3 = a3 << 0x20\n 17844: a2 = a2 | a3\n 17847: a3 = u8 [a0 + 0x19]\n 17850: a4 = u8 [a0 + 0x18]\n 17853: a5 = u8 [a0 + 0x1a]\n 17856: s1 = u8 [a0 + 0x1b]\n 17859: a3 = a3 << 0x8\n 17862: a3 = a3 | a4\n 17865: a5 = a5 << 0x10\n 17868: s1 = s1 << 0x18\n 17871: a5 = a5 | s1\n 17874: a3 = a3 | a5\n 17877: a4 = u8 [a0 + 0x1d]\n 17880: a5 = u8 [a0 + 0x1c]\n 17883: s1 = u8 [a0 + 0x1e]\n 17886: a1 = u8 [a0 + 0x1f]\n 17889: a4 = a4 << 0x8\n 17892: a4 = a4 | a5\n 17895: s1 = s1 << 0x10\n 17898: a1 = a1 << 0x18\n 17901: a1 = a1 | s1\n 17904: a1 = a1 | a4\n 17907: a1 = a1 << 0x20\n 17910: a3 = a3 | a1\n 17913: a1 = u8 [a0 + 0x9]\n 17916: a4 = u8 [a0 + 0x8]\n 17919: a5 = u8 [a0 + 0xa]\n 17922: s1 = u8 [a0 + 0xb]\n 17925: a1 = a1 << 0x8\n 17928: a1 = a1 | a4\n 17931: a5 = a5 << 0x10\n 17934: s1 = s1 << 0x18\n 17937: a5 = a5 | s1\n 17940: a1 = a1 | a5\n 17943: a4 = u8 [a0 + 0xd]\n 17946: a5 = u8 [a0 + 0xc]\n 17949: s1 = u8 [a0 + 0xe]\n 17952: a0 = u8 [a0 + 0xf]\n 17955: a4 = a4 << 0x8\n 17958: a4 = a4 | a5\n 17961: s1 = s1 << 0x10\n 17964: a0 = a0 << 0x18\n 17967: a0 = a0 | s1\n 17970: a0 = a0 | a4\n 17973: a0 = a0 << 0x20\n 17976: a0 = a0 | a1\n 17979: s1 = reverse a0\n 17981: a1 = reverse a3\n 17983: a2 = reverse a2\n 17985: a0 = reverse t0\n 17987: u64 [sp + 0x98] = a0\n 17991: u64 [sp + 0x90] = a2\n 17995: a0 = a0 | a2\n 17998: a2 = a1\n 18000: a1 = a1 | s1\n 18003: a1 = a1 | a0\n 18006: a1 = a1 >> 0x20\n 18009: a0 = a0 | s1\n 18012: a0 = a0 << 0x20\n 18015: a0 = a0 | a1\n 18018: jump @283 if a0 != 0\n      : @280 (gas: 5)\n 18022: u64 [sp + 0x88] = a2\n 18026: i32 a0 = a2 + 0\n 18028: a1 = 0x20\n 18031: u64 [sp + 0x80] = a0\n 18035: ra = 238, jump @0\n      : @281 [@dyn 119] (gas: 50)\n 18041: u8 [a0 + 31] = 0\n 18044: u8 [a0 + 30] = 0\n 18047: u8 [a0 + 29] = 0\n 18050: u8 [a0 + 28] = 0\n 18053: u8 [a0 + 27] = 0\n 18056: u8 [a0 + 26] = 0\n 18059: u8 [a0 + 25] = 0\n 18062: u8 [a0 + 24] = 0\n 18065: u8 [a0 + 23] = 0\n 18068: u8 [a0 + 22] = 0\n 18071: u8 [a0 + 21] = 0\n 18074: u8 [a0 + 20] = 0\n 18077: u8 [a0 + 19] = 0\n 18080: u8 [a0 + 18] = 0\n 18083: u8 [a0 + 17] = 0\n 18086: u8 [a0 + 16] = 0\n 18089: u8 [a0 + 15] = 0\n 18092: u8 [a0 + 14] = 0\n 18095: u8 [a0 + 13] = 0\n 18098: u8 [a0 + 12] = 0\n 18101: u8 [a0 + 11] = 0\n 18104: u8 [a0 + 10] = 0\n 18107: u8 [a0 + 9] = 0\n 18110: u8 [a0 + 8] = 0\n 18113: u8 [a0 + 7] = 0\n 18116: u8 [a0 + 6] = 0\n 18119: u8 [a0 + 5] = 0\n 18122: u8 [a0 + 4] = 0\n 18125: u8 [a0 + 3] = 0xa0\n 18130: u8 [a0 + 2] = 0x79\n 18134: u8 [a0 + 1] = 0xc3\n 18139: u8 [a0 + 0] = 0x8\n 18142: a1 = u64 [sp + 0x88]\n 18146: a0 = a1 + 0x4\n 18149: a1 = a0 <u a1\n 18152: a3 = u64 [sp + 0x98]\n 18156: a2 = a3 + a1\n 18159: a3 = a2 <u a3\n 18162: a3 = a1 if a1 == 0\n 18165: a3 = a3 + s1\n 18168: a1 = a3 <u s1\n 18171: a4 = u64 [sp + 0x90]\n 18175: a4 = a4 + a1\n 18178: u64 [sp + 0x128] = a2\n 18182: u64 [sp + 0x120] = a0\n 18186: u64 [sp + 0x130] = a3\n 18190: a0 = sp + 0x140\n 18194: a1 = sp + 0x120\n 18198: u64 [sp + 0x138] = a4\n 18202: ra = 240, jump @266\n      : @282 [@dyn 120] (gas: 30)\n 18208: a0 = u64 [sp + 0x148]\n 18212: t0 = u64 [sp + 0x158]\n 18216: t1 = u64 [sp + 0x140]\n 18220: a3 = u64 [sp + 0x150]\n 18224: a1 = u64 [sp + 0x98]\n 18228: a4 = a0 ^ a1\n 18231: a5 = a0 <u a1\n 18234: t2 = a1\n 18236: a2 = u64 [sp + 0x88]\n 18240: a1 = t1 <u a2\n 18243: a5 = a1 if a4 == 0\n 18246: a4 = a3 - s1\n 18249: a3 = a3 <u s1\n 18252: s1 = u64 [sp + 0x90]\n 18256: s1 = t0 - s1\n 18259: s1 = s1 - a3\n 18262: a3 = a4 <u a5\n 18265: s1 = s1 - a3\n 18268: a4 = a4 - a5\n 18271: a0 = a0 - t2\n 18274: a1 = a0 - a1\n 18277: a0 = t1 - a2\n 18280: a1 = a1 | s1\n 18283: a2 = a0 | a4\n 18286: a2 = a2 | a1\n 18289: a1 = a1 | a4\n 18292: a2 = a2 >> 0x20\n 18295: a1 = a1 << 0x20\n 18298: a1 = a1 | a2\n 18301: jump @284 if a1 == 0\n      : @283 (gas: 1)\n 18304: trap\n      : @284 (gas: 4)\n 18305: i32 s1 = a0 + 0\n 18307: a0 = u64 [sp + 0x80]\n 18311: a1 = s1\n 18313: ra = 242, jump @0\n      : @285 [@dyn 121] (gas: 6)\n 18319: i32 a1 = a0 + 0\n 18321: a0 = 0x1\n 18324: a2 = s1\n 18326: ra = 0xf4\n 18330: ecalli 6 // 'seal_return'\n 18332: fallthrough\n      : @286 [@dyn 122] (gas: 9)\n 18333: a2 = u64 [a1 + 0x18]\n 18336: a3 = u64 [a1 + 0x10]\n 18339: a4 = u64 [a1 + 0x8]\n 18342: a1 = u64 [a1]\n 18344: u64 [a0 + 0x18] = a2\n 18347: u64 [a0 + 0x10] = a3\n 18350: u64 [a0 + 0x8] = a4\n 18353: u64 [a0] = a1\n 18355: ret\n      : @287 (gas: 17)\n 18357: sp = sp + 0xffffffffffffffa0\n 18360: u64 [sp + 0x58] = ra\n 18363: u64 [sp + 0x50] = s0\n 18366: u64 [sp + 0x48] = s1\n 18369: a3 = u64 [a1 + 0x18]\n 18372: a4 = u64 [a1 + 0x10]\n 18375: a5 = u64 [a1 + 0x8]\n 18378: s1 = u64 [a1]\n 18380: a1 = a5 | a3\n 18383: a2 = s1 | a4\n 18386: a2 = a2 | a1\n 18389: a2 = a2 >> 0x20\n 18392: a1 = a1 | a4\n 18395: a1 = a1 << 0x20\n 18398: a1 = a1 | a2\n 18401: u64 [sp + 0x28] = a0\n 18404: jump @294 if a1 != 0\n      : @288 (gas: 19)\n 18408: a0 = s1 + 0x20\n 18411: u64 [sp + 0x30] = a0\n 18414: a0 = a0 <u s1\n 18417: a1 = a5 + a0\n 18420: u64 [sp + 0x40] = a1\n 18423: u64 [sp + 0x8] = a5\n 18426: s0 = a1 <u a5\n 18429: s0 = a0 if a0 == 0\n 18432: s0 = s0 + a4\n 18435: u64 [sp + 0x10] = a4\n 18438: a0 = s0 <u a4\n 18441: u64 [sp + 0x18] = a3\n 18444: a0 = a0 + a3\n 18447: u64 [sp + 0x38] = a0\n 18450: u64 [sp] = s1\n 18452: i32 a0 = s1 + 0\n 18454: a1 = 0x20\n 18457: s1 = 0x20\n 18460: ra = 246, jump @0\n      : @289 [@dyn 123] (gas: 45)\n 18466: u8 [a0 + 0x1f] = s1\n 18469: a1 = u64 [sp + 0x30]\n 18472: s1 = a1\n 18474: a1 = a1 | s0\n 18477: a2 = u64 [sp + 0x40]\n 18480: a4 = u64 [sp + 0x38]\n 18483: a2 = a2 | a4\n 18486: a1 = a1 | a2\n 18489: a1 = a1 >> 0x20\n 18492: u64 [sp + 0x20] = s0\n 18495: a2 = a2 | s0\n 18498: a2 = a2 << 0x20\n 18501: a1 = a1 | a2\n 18504: u8 [a0 + 30] = 0\n 18507: u8 [a0 + 29] = 0\n 18510: u8 [a0 + 28] = 0\n 18513: u8 [a0 + 27] = 0\n 18516: u8 [a0 + 26] = 0\n 18519: u8 [a0 + 25] = 0\n 18522: u8 [a0 + 24] = 0\n 18525: u8 [a0 + 23] = 0\n 18528: u8 [a0 + 22] = 0\n 18531: u8 [a0 + 21] = 0\n 18534: u8 [a0 + 20] = 0\n 18537: u8 [a0 + 19] = 0\n 18540: u8 [a0 + 18] = 0\n 18543: u8 [a0 + 17] = 0\n 18546: u8 [a0 + 16] = 0\n 18549: u8 [a0 + 15] = 0\n 18552: u8 [a0 + 14] = 0\n 18555: u8 [a0 + 13] = 0\n 18558: u8 [a0 + 12] = 0\n 18561: u8 [a0 + 11] = 0\n 18564: u8 [a0 + 10] = 0\n 18567: u8 [a0 + 9] = 0\n 18570: u8 [a0 + 8] = 0\n 18573: u8 [a0 + 7] = 0\n 18576: u8 [a0 + 6] = 0\n 18579: u8 [a0 + 5] = 0\n 18582: u8 [a0 + 4] = 0\n 18585: u8 [a0 + 3] = 0\n 18588: u8 [a0 + 2] = 0\n 18591: u8 [a0 + 1] = 0\n 18594: u8 [a0 + 0] = 0\n 18596: jump @294 if a1 != 0\n      : @290 (gas: 4)\n 18600: i32 s0 = s1 + 0\n 18602: a1 = 0x20\n 18605: a0 = s0\n 18607: ra = 248, jump @0\n      : @291 [@dyn 124] (gas: 41)\n 18613: u8 [a0 + 31] = 0xf\n 18617: u8 [a0 + 30] = 0\n 18620: u8 [a0 + 29] = 0\n 18623: u8 [a0 + 28] = 0\n 18626: u8 [a0 + 27] = 0\n 18629: u8 [a0 + 26] = 0\n 18632: u8 [a0 + 25] = 0\n 18635: u8 [a0 + 24] = 0\n 18638: u8 [a0 + 23] = 0\n 18641: u8 [a0 + 22] = 0\n 18644: u8 [a0 + 21] = 0\n 18647: u8 [a0 + 20] = 0\n 18650: u8 [a0 + 19] = 0\n 18653: u8 [a0 + 18] = 0\n 18656: u8 [a0 + 17] = 0\n 18659: u8 [a0 + 16] = 0\n 18662: u8 [a0 + 15] = 0\n 18665: u8 [a0 + 14] = 0\n 18668: u8 [a0 + 13] = 0\n 18671: u8 [a0 + 12] = 0\n 18674: u8 [a0 + 11] = 0\n 18677: u8 [a0 + 10] = 0\n 18680: u8 [a0 + 9] = 0\n 18683: u8 [a0 + 8] = 0\n 18686: u8 [a0 + 7] = 0\n 18689: u8 [a0 + 6] = 0\n 18692: u8 [a0 + 5] = 0\n 18695: u8 [a0 + 4] = 0\n 18698: u8 [a0 + 3] = 0\n 18701: u8 [a0 + 2] = 0\n 18704: u8 [a0 + 1] = 0\n 18707: a1 = u64 [sp + 0x20]\n 18710: a2 = u64 [sp + 0x38]\n 18713: a1 = a1 | a2\n 18716: a2 = 0xffffffe0\n 18726: a2 = s1 <u a2\n 18729: a3 = u64 [sp + 0x40]\n 18732: a2 = 0 if a3 != 0\n 18734: a2 = 0 if a1 != 0\n 18736: u8 [a0 + 0] = 0\n 18738: jump @294 if a2 == 0\n      : @292 (gas: 3)\n 18742: i32 a0 = s0 + 0x20\n 18745: a1 = 0x20\n 18748: ra = 250, jump @0\n      : @293 [@dyn 125] (gas: 55)\n 18754: u8 [a0 + 31] = 0\n 18757: u8 [a0 + 30] = 0\n 18760: u8 [a0 + 29] = 0\n 18763: u8 [a0 + 28] = 0\n 18766: u8 [a0 + 27] = 0\n 18769: u8 [a0 + 26] = 0\n 18772: u8 [a0 + 25] = 0\n 18775: u8 [a0 + 24] = 0\n 18778: u8 [a0 + 23] = 0\n 18781: u8 [a0 + 22] = 0\n 18784: u8 [a0 + 21] = 0\n 18787: u8 [a0 + 20] = 0\n 18790: u8 [a0 + 19] = 0\n 18793: u8 [a0 + 18] = 0\n 18796: u8 [a0 + 17] = 0\n 18799: u8 [a0 + 16] = 0\n 18802: u8 [a0 + 15] = 0\n 18805: u8 [a0 + 14] = 0x44\n 18809: u8 [a0 + 13] = 0x49\n 18813: a5 = 0x20\n 18816: u8 [a0 + 0xc] = a5\n 18819: u8 [a0 + 11] = 0x64\n 18823: u8 [a0 + 10] = 0x72\n 18827: u8 [a0 + 9] = 0x61\n 18831: u8 [a0 + 8] = 0x63\n 18835: u8 [a0 + 0x7] = a5\n 18838: u8 [a0 + 6] = 0x64\n 18842: u8 [a0 + 5] = 0x69\n 18846: u8 [a0 + 4] = 0x6c\n 18850: u8 [a0 + 3] = 0x61\n 18854: u8 [a0 + 2] = 0x76\n 18858: u8 [a0 + 1] = 0x6e\n 18862: u8 [a0 + 0] = 0x49\n 18865: a1 = u64 [sp]\n 18867: a0 = a1 + 0x60\n 18870: a1 = a0 <u a1\n 18873: a3 = u64 [sp + 0x8]\n 18876: a2 = a3 + a1\n 18879: a3 = a2 <u a3\n 18882: a3 = a1 if a1 == 0\n 18885: a1 = u64 [sp + 0x10]\n 18888: a3 = a3 + a1\n 18891: a1 = a3 <u a1\n 18894: a4 = u64 [sp + 0x18]\n 18897: a1 = a1 + a4\n 18900: a4 = u64 [sp + 0x28]\n 18903: u64 [a4] = a0\n 18905: u64 [a4 + 0x8] = a2\n 18908: u64 [a4 + 0x10] = a3\n 18911: u64 [a4 + 0x18] = a1\n 18914: ra = u64 [sp + 0x58]\n 18917: s0 = u64 [sp + 0x50]\n 18920: s1 = u64 [sp + 0x48]\n 18923: sp = sp + 0x60\n 18926: ret\n      : @294 (gas: 1)\n 18928: trap\n      : @295 (gas: 17)\n 18929: sp = sp + 0xffffffffffffffa0\n 18932: u64 [sp + 0x58] = ra\n 18935: u64 [sp + 0x50] = s0\n 18938: u64 [sp + 0x48] = s1\n 18941: a3 = u64 [a1 + 0x18]\n 18944: a4 = u64 [a1 + 0x10]\n 18947: a5 = u64 [a1 + 0x8]\n 18950: s1 = u64 [a1]\n 18952: a1 = a5 | a3\n 18955: a2 = s1 | a4\n 18958: a2 = a2 | a1\n 18961: a2 = a2 >> 0x20\n 18964: a1 = a1 | a4\n 18967: a1 = a1 << 0x20\n 18970: a1 = a1 | a2\n 18973: u64 [sp + 0x28] = a0\n 18976: jump @302 if a1 != 0\n      : @296 (gas: 19)\n 18980: a0 = s1 + 0x20\n 18983: u64 [sp + 0x30] = a0\n 18986: a0 = a0 <u s1\n 18989: a1 = a5 + a0\n 18992: u64 [sp + 0x40] = a1\n 18995: u64 [sp + 0x8] = a5\n 18998: s0 = a1 <u a5\n 19001: s0 = a0 if a0 == 0\n 19004: s0 = s0 + a4\n 19007: u64 [sp + 0x10] = a4\n 19010: a0 = s0 <u a4\n 19013: u64 [sp + 0x18] = a3\n 19016: a0 = a0 + a3\n 19019: u64 [sp + 0x38] = a0\n 19022: u64 [sp] = s1\n 19024: i32 a0 = s1 + 0\n 19026: a1 = 0x20\n 19029: s1 = 0x20\n 19032: ra = 252, jump @0\n      : @297 [@dyn 126] (gas: 45)\n 19038: u8 [a0 + 0x1f] = s1\n 19041: a1 = u64 [sp + 0x30]\n 19044: s1 = a1\n 19046: a1 = a1 | s0\n 19049: a2 = u64 [sp + 0x40]\n 19052: a4 = u64 [sp + 0x38]\n 19055: a2 = a2 | a4\n 19058: a1 = a1 | a2\n 19061: a1 = a1 >> 0x20\n 19064: u64 [sp + 0x20] = s0\n 19067: a2 = a2 | s0\n 19070: a2 = a2 << 0x20\n 19073: a1 = a1 | a2\n 19076: u8 [a0 + 30] = 0\n 19079: u8 [a0 + 29] = 0\n 19082: u8 [a0 + 28] = 0\n 19085: u8 [a0 + 27] = 0\n 19088: u8 [a0 + 26] = 0\n 19091: u8 [a0 + 25] = 0\n 19094: u8 [a0 + 24] = 0\n 19097: u8 [a0 + 23] = 0\n 19100: u8 [a0 + 22] = 0\n 19103: u8 [a0 + 21] = 0\n 19106: u8 [a0 + 20] = 0\n 19109: u8 [a0 + 19] = 0\n 19112: u8 [a0 + 18] = 0\n 19115: u8 [a0 + 17] = 0\n 19118: u8 [a0 + 16] = 0\n 19121: u8 [a0 + 15] = 0\n 19124: u8 [a0 + 14] = 0\n 19127: u8 [a0 + 13] = 0\n 19130: u8 [a0 + 12] = 0\n 19133: u8 [a0 + 11] = 0\n 19136: u8 [a0 + 10] = 0\n 19139: u8 [a0 + 9] = 0\n 19142: u8 [a0 + 8] = 0\n 19145: u8 [a0 + 7] = 0\n 19148: u8 [a0 + 6] = 0\n 19151: u8 [a0 + 5] = 0\n 19154: u8 [a0 + 4] = 0\n 19157: u8 [a0 + 3] = 0\n 19160: u8 [a0 + 2] = 0\n 19163: u8 [a0 + 1] = 0\n 19166: u8 [a0 + 0] = 0\n 19168: jump @302 if a1 != 0\n      : @298 (gas: 4)\n 19172: i32 s0 = s1 + 0\n 19174: a1 = 0x20\n 19177: a0 = s0\n 19179: ra = 254, jump @0\n      : @299 [@dyn 127] (gas: 41)\n 19185: u8 [a0 + 31] = 0x10\n 19189: u8 [a0 + 30] = 0\n 19192: u8 [a0 + 29] = 0\n 19195: u8 [a0 + 28] = 0\n 19198: u8 [a0 + 27] = 0\n 19201: u8 [a0 + 26] = 0\n 19204: u8 [a0 + 25] = 0\n 19207: u8 [a0 + 24] = 0\n 19210: u8 [a0 + 23] = 0\n 19213: u8 [a0 + 22] = 0\n 19216: u8 [a0 + 21] = 0\n 19219: u8 [a0 + 20] = 0\n 19222: u8 [a0 + 19] = 0\n 19225: u8 [a0 + 18] = 0\n 19228: u8 [a0 + 17] = 0\n 19231: u8 [a0 + 16] = 0\n 19234: u8 [a0 + 15] = 0\n 19237: u8 [a0 + 14] = 0\n 19240: u8 [a0 + 13] = 0\n 19243: u8 [a0 + 12] = 0\n 19246: u8 [a0 + 11] = 0\n 19249: u8 [a0 + 10] = 0\n 19252: u8 [a0 + 9] = 0\n 19255: u8 [a0 + 8] = 0\n 19258: u8 [a0 + 7] = 0\n 19261: u8 [a0 + 6] = 0\n 19264: u8 [a0 + 5] = 0\n 19267: u8 [a0 + 4] = 0\n 19270: u8 [a0 + 3] = 0\n 19273: u8 [a0 + 2] = 0\n 19276: u8 [a0 + 1] = 0\n 19279: a1 = u64 [sp + 0x20]\n 19282: a2 = u64 [sp + 0x38]\n 19285: a1 = a1 | a2\n 19288: a2 = 0xffffffe0\n 19298: a2 = s1 <u a2\n 19301: a3 = u64 [sp + 0x40]\n 19304: a2 = 0 if a3 != 0\n 19306: a2 = 0 if a1 != 0\n 19308: u8 [a0 + 0] = 0\n 19310: jump @302 if a2 == 0\n      : @300 (gas: 3)\n 19314: i32 a0 = s0 + 0x20\n 19317: a1 = 0x20\n 19320: ra = 256, jump @0\n      : @301 [@dyn 128] (gas: 54)\n 19326: u8 [a0 + 31] = 0\n 19329: u8 [a0 + 30] = 0\n 19332: u8 [a0 + 29] = 0\n 19335: u8 [a0 + 28] = 0\n 19338: u8 [a0 + 27] = 0\n 19341: u8 [a0 + 26] = 0\n 19344: u8 [a0 + 25] = 0\n 19347: u8 [a0 + 24] = 0\n 19350: u8 [a0 + 23] = 0\n 19353: u8 [a0 + 22] = 0\n 19356: u8 [a0 + 21] = 0\n 19359: u8 [a0 + 20] = 0\n 19362: u8 [a0 + 19] = 0\n 19365: u8 [a0 + 18] = 0\n 19368: u8 [a0 + 17] = 0\n 19371: u8 [a0 + 16] = 0\n 19374: u8 [a0 + 15] = 0x73\n 19378: u8 [a0 + 14] = 0x64\n 19382: u8 [a0 + 13] = 0x72\n 19386: u8 [a0 + 12] = 0x61\n 19390: u8 [a0 + 11] = 0x63\n 19394: u8 [a0 + 10] = 0x20\n 19398: u8 [a0 + 9] = 0x68\n 19402: u8 [a0 + 8] = 0x67\n 19406: u8 [a0 + 7] = 0x75\n 19410: u8 [a0 + 6] = 0x6f\n 19414: u8 [a0 + 5] = 0x6e\n 19418: u8 [a0 + 4] = 0x65\n 19422: u8 [a0 + 3] = 0x20\n 19426: u8 [a0 + 2] = 0x74\n 19430: u8 [a0 + 1] = 0x6f\n 19434: u8 [a0 + 0] = 0x4e\n 19437: a1 = u64 [sp]\n 19439: a0 = a1 + 0x60\n 19442: a1 = a0 <u a1\n 19445: a3 = u64 [sp + 0x8]\n 19448: a2 = a3 + a1\n 19451: a3 = a2 <u a3\n 19454: a3 = a1 if a1 == 0\n 19457: a1 = u64 [sp + 0x10]\n 19460: a3 = a3 + a1\n 19463: a1 = a3 <u a1\n 19466: a4 = u64 [sp + 0x18]\n 19469: a1 = a1 + a4\n 19472: a4 = u64 [sp + 0x28]\n 19475: u64 [a4] = a0\n 19477: u64 [a4 + 0x8] = a2\n 19480: u64 [a4 + 0x10] = a3\n 19483: u64 [a4 + 0x18] = a1\n 19486: ra = u64 [sp + 0x58]\n 19489: s0 = u64 [sp + 0x50]\n 19492: s1 = u64 [sp + 0x48]\n 19495: sp = sp + 0x60\n 19498: ret\n      : @302 (gas: 1)\n 19500: trap\n      : @303 (gas: 19)\n 19501: sp = sp + 0xfffffffffffffd80\n 19505: u64 [sp + 0x278] = ra\n 19509: u64 [sp + 0x270] = s0\n 19513: u64 [sp + 0x268] = s1\n 19517: s0 = sp + 0x280\n 19521: sp = sp & 0xffffffffffffffe0\n 19524: a4 = u64 [a2 + 0x18]\n 19527: a5 = u64 [a2 + 0x10]\n 19530: s1 = u64 [a2]\n 19532: a2 = u64 [a2 + 0x8]\n 19535: u64 [sp + 0xd8] = a4\n 19539: u64 [sp + 0xd0] = a5\n 19543: a5 = a5 | a4\n 19546: u64 [sp + 0xc8] = s1\n 19550: a4 = s1 <u 0x9\n 19553: u64 [sp + 0xc0] = a2\n 19557: a4 = 0 if a2 != 0\n 19559: a4 = 0 if a5 != 0\n 19561: jump @320 if a4 == 0\n      : @304 (gas: 24)\n 19565: a2 = u64 [a3 + 0x18]\n 19568: u64 [sp + 0xf8] = a2\n 19572: a2 = u64 [a3 + 0x10]\n 19575: u64 [sp + 0xf0] = a2\n 19579: a2 = u64 [a3 + 0x8]\n 19582: u64 [sp + 0xe0] = a2\n 19586: a2 = u64 [a3]\n 19588: u64 [sp + 0xe8] = a2\n 19592: a2 = u64 [a1 + 0x10]\n 19595: u64 [sp + 0xa0] = a2\n 19599: a2 = u64 [a1 + 0x8]\n 19602: u64 [sp + 0x98] = a2\n 19606: a1 = u64 [a1]\n 19608: u64 [sp + 0x90] = a1\n 19612: a1 = u64 [a0 + 0x10]\n 19615: a2 = u64 [a0 + 0x8]\n 19618: u64 [sp + 0xb0] = a2\n 19622: a0 = u64 [a0]\n 19624: u64 [sp + 0xb8] = a0\n 19628: a1 = a1 << 0x20\n 19631: s1 = a1 >> 0x20\n 19634: a1 = 0x20\n 19637: a0 = 0\n 19639: ra = 258, jump @0\n      : @305 [@dyn 129] (gas: 79)\n 19645: a3 = reverse s1\n 19647: a1 = u64 [sp + 0xb0]\n 19651: a4 = reverse a1\n 19653: a1 = u64 [sp + 0xb8]\n 19657: a2 = reverse a1\n 19659: a1 = a2 >> 0x38\n 19662: u64 [sp + 0xb8] = a1\n 19666: u8 [a0 + 0x1f] = a1\n 19669: a1 = a2 >> 0x30\n 19672: u64 [sp + 0xb0] = a1\n 19676: u8 [a0 + 0x1e] = a1\n 19679: a1 = a2 >> 0x28\n 19682: u64 [sp + 0xa8] = a1\n 19686: u8 [a0 + 0x1d] = a1\n 19689: a1 = a2 >> 0x20\n 19692: u64 [sp + 0x88] = a1\n 19696: u8 [a0 + 0x1c] = a1\n 19699: a1 = a2 >> 0x18\n 19702: u64 [sp + 0x80] = a1\n 19706: u8 [a0 + 0x1b] = a1\n 19709: a1 = a2 >> 0x10\n 19712: u64 [sp + 0x78] = a1\n 19715: u8 [a0 + 0x1a] = a1\n 19718: a1 = a2 >> 0x8\n 19721: u64 [sp + 0x70] = a1\n 19724: u8 [a0 + 0x19] = a1\n 19727: u64 [sp + 0x68] = a2\n 19730: u8 [a0 + 0x18] = a2\n 19733: u8 [a0 + 0x10] = a4\n 19736: u8 [a0 + 11] = 0\n 19739: u8 [a0 + 10] = 0\n 19742: u8 [a0 + 9] = 0\n 19745: u8 [a0 + 7] = 0\n 19748: u8 [a0 + 6] = 0\n 19751: u8 [a0 + 5] = 0\n 19754: u8 [a0 + 4] = 0\n 19757: u8 [a0 + 3] = 0\n 19760: u8 [a0 + 2] = 0\n 19763: u8 [a0 + 1] = 0\n 19766: u8 [a0 + 0] = 0\n 19768: a1 = a4 >> 0x38\n 19771: u64 [sp + 0x50] = a1\n 19774: u8 [a0 + 0x17] = a1\n 19777: a1 = a4 >> 0x30\n 19780: u64 [sp + 0x48] = a1\n 19783: u8 [a0 + 0x16] = a1\n 19786: a1 = a4 >> 0x28\n 19789: u64 [sp + 0x40] = a1\n 19792: u8 [a0 + 0x15] = a1\n 19795: a1 = a4 >> 0x20\n 19798: u64 [sp + 0x38] = a1\n 19801: u8 [a0 + 0x14] = a1\n 19804: a1 = a4 >> 0x18\n 19807: u64 [sp + 0x30] = a1\n 19810: u8 [a0 + 0x13] = a1\n 19813: a1 = a4 >> 0x10\n 19816: u64 [sp + 0x28] = a1\n 19819: u8 [a0 + 0x12] = a1\n 19822: u64 [sp + 0x58] = a4\n 19825: a4 = a4 >> 0x8\n 19828: u64 [sp + 0x20] = a4\n 19831: u8 [a0 + 0x11] = a4\n 19834: u8 [a0 + 0x8] = a3\n 19837: a1 = a3 >> 0x38\n 19840: u64 [sp + 0x18] = a1\n 19843: u8 [a0 + 0xf] = a1\n 19846: a1 = a3 >> 0x30\n 19849: u64 [sp + 0x10] = a1\n 19852: u8 [a0 + 0xe] = a1\n 19855: a1 = a3 >> 0x28\n 19858: u64 [sp + 0x8] = a1\n 19861: u8 [a0 + 0xd] = a1\n 19864: u64 [sp + 0x60] = a3\n 19867: a3 = a3 >> 0x20\n 19870: u64 [sp] = a3\n 19872: u8 [a0 + 0xc] = a3\n 19875: a0 = 0x20\n 19878: a1 = 0x20\n 19881: ra = 260, jump @0\n      : @306 [@dyn 130] (gas: 35)\n 19887: u8 [a0 + 31] = 0\n 19890: u8 [a0 + 30] = 0\n 19893: u8 [a0 + 29] = 0\n 19896: u8 [a0 + 28] = 0\n 19899: u8 [a0 + 27] = 0\n 19902: u8 [a0 + 26] = 0\n 19905: u8 [a0 + 25] = 0\n 19908: u8 [a0 + 24] = 0\n 19911: u8 [a0 + 23] = 0\n 19914: u8 [a0 + 22] = 0\n 19917: u8 [a0 + 21] = 0\n 19920: u8 [a0 + 20] = 0\n 19923: u8 [a0 + 19] = 0\n 19926: u8 [a0 + 18] = 0\n 19929: u8 [a0 + 17] = 0\n 19932: u8 [a0 + 16] = 0\n 19935: u8 [a0 + 15] = 0\n 19938: u8 [a0 + 14] = 0\n 19941: u8 [a0 + 13] = 0\n 19944: u8 [a0 + 12] = 0\n 19947: u8 [a0 + 11] = 0\n 19950: u8 [a0 + 10] = 0\n 19953: u8 [a0 + 9] = 0\n 19956: u8 [a0 + 8] = 0\n 19959: u8 [a0 + 7] = 0\n 19962: u8 [a0 + 6] = 0\n 19965: u8 [a0 + 5] = 0\n 19968: u8 [a0 + 4] = 0\n 19971: u8 [a0 + 3] = 0\n 19974: u8 [a0 + 2] = 0\n 19977: u8 [a0 + 1] = 0\n 19980: u8 [a0 + 0] = 0\n 19982: a1 = 0x40\n 19985: a0 = 0\n 19987: ra = 262, jump @0\n      : @307 [@dyn 131] (gas: 46)\n 19993: i32 a0 = a0 + 0\n 19995: i32 a2 = sp + 0x240\n 19999: a1 = 0x40\n 20002: ecalli 5 // 'hash_keccak_256'\n 20004: a0 = u64 [sp + 0x258]\n 20008: a1 = u64 [sp + 0x250]\n 20012: a2 = u64 [sp + 0x248]\n 20016: a3 = u64 [sp + 0x240]\n 20020: a0 = reverse a0\n 20022: a1 = reverse a1\n 20024: a4 = u64 [sp + 0xc0]\n 20028: a4 = a4 + a1\n 20031: a5 = u64 [sp + 0xc8]\n 20035: a5 = a5 + a0\n 20038: a0 = a5 <u a0\n 20041: a4 = a4 + a0\n 20044: s1 = a4 ^ a1\n 20047: a1 = a4 <u a1\n 20050: a1 = a0 if s1 == 0\n 20053: s1 = reverse a3\n 20055: a2 = reverse a2\n 20057: a3 = u64 [sp + 0xd0]\n 20061: a3 = a3 + a2\n 20064: a0 = u64 [sp + 0xd8]\n 20068: a0 = a0 + s1\n 20071: a2 = a3 <u a2\n 20074: a0 = a0 + a2\n 20077: a1 = a1 + a3\n 20080: a2 = a1 <u a3\n 20083: a0 = a0 + a2\n 20086: u64 [sp + 0x228] = a4\n 20090: u64 [sp + 0x220] = a5\n 20094: u64 [sp + 0x230] = a1\n 20098: u64 [sp + 0x238] = a0\n 20102: u64 [sp + 600] = 0\n 20106: u64 [sp + 592] = 0\n 20110: u64 [sp + 584] = 0\n 20114: u64 [sp + 576] = 0\n 20118: u32 [sp + 512] = 0x20\n 20123: i32 a1 = sp + 0x220\n 20127: i32 a3 = sp + 0x240\n 20131: i32 a4 = sp + 0x200\n 20135: a2 = 0xffffffffffffffff\n 20138: a0 = 0\n 20140: ecalli 4 // 'get_storage'\n 20142: fallthrough\n      : @308 (gas: 20)\n 20143: a0 = u64 [sp + 0x258]\n 20147: t0 = u64 [sp + 0x240]\n 20151: a2 = u64 [sp + 0x250]\n 20155: a3 = u64 [sp + 0x248]\n 20159: a1 = u64 [sp + 0xf8]\n 20163: a4 = a0 ^ a1\n 20166: s1 = a0 <u a1\n 20169: a0 = u64 [sp + 0xf0]\n 20173: a5 = a2 <u a0\n 20176: a5 = s1 if a4 != 0\n 20179: a1 = u64 [sp + 0xe0]\n 20183: s1 = a3 ^ a1\n 20186: a3 = a3 <u a1\n 20189: a1 = u64 [sp + 0xe8]\n 20193: a1 = t0 <u a1\n 20196: a1 = a3 if s1 != 0\n 20199: a0 = a0 ^ a2\n 20202: a0 = a0 | a4\n 20205: a1 = a5 if a0 != 0\n 20208: jump @325 if a1 != 0\n      : @309 (gas: 3)\n 20212: a1 = 0x20\n 20215: a0 = 0\n 20217: ra = 264, jump @0\n      : @310 [@dyn 132] (gas: 59)\n 20223: a1 = u64 [sp + 0x58]\n 20226: u8 [a0 + 0x10] = a1\n 20229: a1 = u64 [sp + 0x18]\n 20232: u8 [a0 + 0xf] = a1\n 20235: a1 = u64 [sp + 0x10]\n 20238: u8 [a0 + 0xe] = a1\n 20241: a1 = u64 [sp + 0x8]\n 20244: u8 [a0 + 0xd] = a1\n 20247: a1 = u64 [sp]\n 20249: u8 [a0 + 0xc] = a1\n 20252: a2 = u64 [sp + 0x60]\n 20255: a1 = a2 >> 0x18\n 20258: u8 [a0 + 0xb] = a1\n 20261: a1 = a2 >> 0x10\n 20264: u8 [a0 + 0xa] = a1\n 20267: a1 = a2 >> 0x8\n 20270: u8 [a0 + 0x9] = a1\n 20273: u8 [a0 + 0x8] = a2\n 20276: a1 = u64 [sp + 0x68]\n 20279: u8 [a0 + 0x18] = a1\n 20282: a1 = u64 [sp + 0x50]\n 20285: u8 [a0 + 0x17] = a1\n 20288: a1 = u64 [sp + 0x48]\n 20291: u8 [a0 + 0x16] = a1\n 20294: a1 = u64 [sp + 0x40]\n 20297: u8 [a0 + 0x15] = a1\n 20300: a1 = u64 [sp + 0x38]\n 20303: u8 [a0 + 0x14] = a1\n 20306: a1 = u64 [sp + 0x30]\n 20309: u8 [a0 + 0x13] = a1\n 20312: a1 = u64 [sp + 0x28]\n 20315: u8 [a0 + 0x12] = a1\n 20318: a1 = u64 [sp + 0x20]\n 20321: u8 [a0 + 0x11] = a1\n 20324: a1 = u64 [sp + 0xb8]\n 20328: u8 [a0 + 0x1f] = a1\n 20331: a1 = u64 [sp + 0xb0]\n 20335: u8 [a0 + 0x1e] = a1\n 20338: a1 = u64 [sp + 0xa8]\n 20342: u8 [a0 + 0x1d] = a1\n 20345: a1 = u64 [sp + 0x88]\n 20349: u8 [a0 + 0x1c] = a1\n 20352: a1 = u64 [sp + 0x80]\n 20356: u8 [a0 + 0x1b] = a1\n 20359: a1 = u64 [sp + 0x78]\n 20362: u8 [a0 + 0x1a] = a1\n 20365: a1 = u64 [sp + 0x70]\n 20368: u8 [a0 + 0x19] = a1\n 20371: u8 [a0 + 7] = 0\n 20374: u8 [a0 + 6] = 0\n 20377: u8 [a0 + 5] = 0\n 20380: u8 [a0 + 4] = 0\n 20383: u8 [a0 + 3] = 0\n 20386: u8 [a0 + 2] = 0\n 20389: u8 [a0 + 1] = 0\n 20392: u8 [a0 + 0] = 0\n 20394: a0 = 0x20\n 20397: a1 = 0x20\n 20400: ra = 266, jump @0\n      : @311 [@dyn 133] (gas: 35)\n 20406: u8 [a0 + 31] = 0\n 20409: u8 [a0 + 30] = 0\n 20412: u8 [a0 + 29] = 0\n 20415: u8 [a0 + 28] = 0\n 20418: u8 [a0 + 27] = 0\n 20421: u8 [a0 + 26] = 0\n 20424: u8 [a0 + 25] = 0\n 20427: u8 [a0 + 24] = 0\n 20430: u8 [a0 + 23] = 0\n 20433: u8 [a0 + 22] = 0\n 20436: u8 [a0 + 21] = 0\n 20439: u8 [a0 + 20] = 0\n 20442: u8 [a0 + 19] = 0\n 20445: u8 [a0 + 18] = 0\n 20448: u8 [a0 + 17] = 0\n 20451: u8 [a0 + 16] = 0\n 20454: u8 [a0 + 15] = 0\n 20457: u8 [a0 + 14] = 0\n 20460: u8 [a0 + 13] = 0\n 20463: u8 [a0 + 12] = 0\n 20466: u8 [a0 + 11] = 0\n 20469: u8 [a0 + 10] = 0\n 20472: u8 [a0 + 9] = 0\n 20475: u8 [a0 + 8] = 0\n 20478: u8 [a0 + 7] = 0\n 20481: u8 [a0 + 6] = 0\n 20484: u8 [a0 + 5] = 0\n 20487: u8 [a0 + 4] = 0\n 20490: u8 [a0 + 3] = 0\n 20493: u8 [a0 + 2] = 0\n 20496: u8 [a0 + 1] = 0\n 20499: u8 [a0 + 0] = 0\n 20501: a1 = 0x40\n 20504: a0 = 0\n 20506: ra = 268, jump @0\n      : @312 [@dyn 134] (gas: 50)\n 20512: i32 a0 = a0 + 0\n 20514: i32 a2 = sp + 0x240\n 20518: a1 = 0x40\n 20521: ecalli 5 // 'hash_keccak_256'\n 20523: a0 = u64 [sp + 0x258]\n 20527: a1 = u64 [sp + 0x250]\n 20531: a2 = u64 [sp + 0x248]\n 20535: a3 = u64 [sp + 0x240]\n 20539: a0 = reverse a0\n 20541: a1 = reverse a1\n 20543: a4 = u64 [sp + 0xc0]\n 20547: a4 = a4 + a1\n 20550: a5 = u64 [sp + 0xc8]\n 20554: a5 = a5 + a0\n 20557: a0 = a5 <u a0\n 20560: s1 = a4 + a0\n 20563: a4 = s1 ^ a1\n 20566: a1 = s1 <u a1\n 20569: a1 = a0 if a4 == 0\n 20572: a0 = reverse a3\n 20574: a2 = reverse a2\n 20576: a3 = u64 [sp + 0xd0]\n 20580: a3 = a3 + a2\n 20583: a4 = u64 [sp + 0xd8]\n 20587: a0 = a0 + a4\n 20590: a2 = a3 <u a2\n 20593: a0 = a0 + a2\n 20596: a2 = a3 + a1\n 20599: a1 = a2 <u a3\n 20602: a1 = a1 + a0\n 20605: u32 [sp + 512] = 0x20\n 20610: u64 [sp + 0xb0] = s1\n 20614: u64 [sp + 0x228] = s1\n 20618: u64 [sp + 0xb8] = a5\n 20622: u64 [sp + 0x220] = a5\n 20626: u64 [sp + 0xa8] = a2\n 20630: u64 [sp + 0x230] = a2\n 20634: u64 [sp + 0x88] = a1\n 20638: u64 [sp + 0x238] = a1\n 20642: u64 [sp + 600] = 0\n 20646: u64 [sp + 592] = 0\n 20650: u64 [sp + 584] = 0\n 20654: u64 [sp + 576] = 0\n 20658: i32 a1 = sp + 0x220\n 20662: i32 a3 = sp + 0x240\n 20666: i32 a4 = sp + 0x200\n 20670: a2 = 0xffffffffffffffff\n 20673: a0 = 0\n 20675: ecalli 4 // 'get_storage'\n 20677: fallthrough\n      : @313 (gas: 22)\n 20678: t1 = u64 [sp + 0x258]\n 20682: a3 = u64 [sp + 0x250]\n 20686: t0 = u64 [sp + 0x248]\n 20690: a2 = u64 [sp + 0x240]\n 20694: a4 = u64 [sp + 0xf8]\n 20698: a0 = t1 ^ a4\n 20701: a4 = t1 <u a4\n 20704: a5 = u64 [sp + 0xf0]\n 20708: a1 = a3 <u a5\n 20711: u64 [sp + 0x80] = a1\n 20715: a4 = a1 if a0 == 0\n 20718: a1 = u64 [sp + 0xe0]\n 20722: ra = t0 ^ a1\n 20725: s1 = t0 <u a1\n 20728: a1 = u64 [sp + 0xe8]\n 20732: u64 [sp + 0x60] = a2\n 20735: t2 = a2 <u a1\n 20738: s1 = t2 if ra == 0\n 20741: a5 = a5 ^ a3\n 20744: a0 = a0 | a5\n 20747: a4 = s1 if a0 == 0\n 20750: jump @332 if a4 != 0\n      : @314 (gas: 73)\n 20754: a0 = u64 [sp + 0xf0]\n 20758: a0 = a3 - a0\n 20761: a1 = a0 - s1\n 20764: u64 [sp + 0x78] = a1\n 20767: a0 = a0 <u s1\n 20770: a1 = u64 [sp + 0xf8]\n 20774: a2 = t1 - a1\n 20777: a1 = u64 [sp + 0x80]\n 20781: a2 = a2 - a1\n 20784: a2 = a2 - a0\n 20787: u64 [sp + 0x70] = a2\n 20790: a0 = 0xffffffff\n 20800: u64 [sp + 0x80] = a0\n 20804: a0 = u64 [sp + 0xe0]\n 20808: a0 = t0 - a0\n 20811: a0 = a0 - t2\n 20814: u64 [sp + 0x68] = a0\n 20817: a0 = u64 [sp + 0xe8]\n 20821: a1 = u64 [sp + 0x60]\n 20824: a0 = a1 - a0\n 20827: u64 [sp + 0x60] = a0\n 20830: a0 = u64 [sp + 0xa8]\n 20834: u64 [sp + 0x230] = a0\n 20838: a0 = u64 [sp + 0xb0]\n 20842: u64 [sp + 0x228] = a0\n 20846: a0 = u64 [sp + 0xb8]\n 20850: u64 [sp + 0x220] = a0\n 20854: s1 = u64 [sp + 0x88]\n 20858: u64 [sp + 0x238] = s1\n 20862: u64 [sp + 600] = 0\n 20866: u64 [sp + 592] = 0\n 20870: u64 [sp + 584] = 0\n 20874: u64 [sp + 576] = 0\n 20878: u32 [sp + 512] = 0x20\n 20883: i32 a1 = sp + 0x220\n 20887: i32 a3 = sp + 0x240\n 20891: i32 a4 = sp + 0x200\n 20895: a2 = 0xffffffffffffffff\n 20898: a0 = 0\n 20900: ecalli 4 // 'get_storage'\n 20902: u64 [sp + 0x238] = s1\n 20906: a0 = u64 [sp + 0xa8]\n 20910: u64 [sp + 0x230] = a0\n 20914: a0 = u64 [sp + 0xb0]\n 20918: u64 [sp + 0x228] = a0\n 20922: a0 = u64 [sp + 0xb8]\n 20926: u64 [sp + 0x220] = a0\n 20930: a0 = u64 [sp + 0x70]\n 20933: u64 [sp + 0x258] = a0\n 20937: a0 = u64 [sp + 0x78]\n 20940: u64 [sp + 0x250] = a0\n 20944: a0 = u64 [sp + 0x68]\n 20947: u64 [sp + 0x248] = a0\n 20951: a0 = u64 [sp + 0x60]\n 20954: u64 [sp + 0x240] = a0\n 20958: i32 a1 = sp + 0x220\n 20962: i32 a3 = sp + 0x240\n 20966: a2 = 0xffffffffffffffff\n 20969: a4 = 0x20\n 20972: a0 = 0\n 20974: ecalli 8 // 'set_storage'\n 20976: a0 = u64 [sp + 0x90]\n 20980: a0 = a0 & 0xffffffffffffffff\n 20983: u64 [sp + 0xb8] = a0\n 20987: a0 = u64 [sp + 0x98]\n 20991: a0 = a0 & 0xffffffffffffffff\n 20994: u64 [sp + 0xb0] = a0\n 20998: a0 = u64 [sp + 0xa0]\n 21002: s1 = u64 [sp + 0x80]\n 21006: s1 = s1 & a0\n 21009: a1 = 0x20\n 21012: a0 = 0\n 21014: ra = 270, jump @0\n      : @315 [@dyn 135] (gas: 58)\n 21020: a1 = reverse s1\n 21022: a2 = u64 [sp + 0xb0]\n 21026: a2 = reverse a2\n 21028: a3 = u64 [sp + 0xb8]\n 21032: a3 = reverse a3\n 21034: a4 = a3 >> 0x38\n 21037: u8 [a0 + 0x1f] = a4\n 21040: a4 = a3 >> 0x30\n 21043: u8 [a0 + 0x1e] = a4\n 21046: a4 = a3 >> 0x28\n 21049: u8 [a0 + 0x1d] = a4\n 21052: a4 = a3 >> 0x20\n 21055: u8 [a0 + 0x1c] = a4\n 21058: a4 = a3 >> 0x18\n 21061: u8 [a0 + 0x1b] = a4\n 21064: a4 = a3 >> 0x10\n 21067: u8 [a0 + 0x1a] = a4\n 21070: a4 = a3 >> 0x8\n 21073: u8 [a0 + 0x19] = a4\n 21076: u8 [a0 + 0x18] = a3\n 21079: a3 = a2 >> 0x38\n 21082: u8 [a0 + 0x17] = a3\n 21085: a3 = a2 >> 0x30\n 21088: u8 [a0 + 0x16] = a3\n 21091: a3 = a2 >> 0x28\n 21094: u8 [a0 + 0x15] = a3\n 21097: a3 = a2 >> 0x20\n 21100: u8 [a0 + 0x14] = a3\n 21103: a3 = a2 >> 0x18\n 21106: u8 [a0 + 0x13] = a3\n 21109: a3 = a2 >> 0x10\n 21112: u8 [a0 + 0x12] = a3\n 21115: a3 = a2 >> 0x8\n 21118: u8 [a0 + 0x11] = a3\n 21121: u8 [a0 + 0x10] = a2\n 21124: a2 = a1 >> 0x38\n 21127: u8 [a0 + 0xf] = a2\n 21130: a2 = a1 >> 0x30\n 21133: u8 [a0 + 0xe] = a2\n 21136: a2 = a1 >> 0x28\n 21139: u8 [a0 + 0xd] = a2\n 21142: a2 = a1 >> 0x20\n 21145: u8 [a0 + 0xc] = a2\n 21148: u8 [a0 + 11] = 0\n 21151: u8 [a0 + 10] = 0\n 21154: u8 [a0 + 9] = 0\n 21157: u8 [a0 + 0x8] = a1\n 21160: u8 [a0 + 7] = 0\n 21163: u8 [a0 + 6] = 0\n 21166: u8 [a0 + 5] = 0\n 21169: u8 [a0 + 4] = 0\n 21172: u8 [a0 + 3] = 0\n 21175: u8 [a0 + 2] = 0\n 21178: u8 [a0 + 1] = 0\n 21181: u8 [a0 + 0] = 0\n 21183: a0 = 0x20\n 21186: a1 = 0x20\n 21189: ra = 272, jump @0\n      : @316 [@dyn 136] (gas: 35)\n 21195: u8 [a0 + 31] = 0\n 21198: u8 [a0 + 30] = 0\n 21201: u8 [a0 + 29] = 0\n 21204: u8 [a0 + 28] = 0\n 21207: u8 [a0 + 27] = 0\n 21210: u8 [a0 + 26] = 0\n 21213: u8 [a0 + 25] = 0\n 21216: u8 [a0 + 24] = 0\n 21219: u8 [a0 + 23] = 0\n 21222: u8 [a0 + 22] = 0\n 21225: u8 [a0 + 21] = 0\n 21228: u8 [a0 + 20] = 0\n 21231: u8 [a0 + 19] = 0\n 21234: u8 [a0 + 18] = 0\n 21237: u8 [a0 + 17] = 0\n 21240: u8 [a0 + 16] = 0\n 21243: u8 [a0 + 15] = 0\n 21246: u8 [a0 + 14] = 0\n 21249: u8 [a0 + 13] = 0\n 21252: u8 [a0 + 12] = 0\n 21255: u8 [a0 + 11] = 0\n 21258: u8 [a0 + 10] = 0\n 21261: u8 [a0 + 9] = 0\n 21264: u8 [a0 + 8] = 0\n 21267: u8 [a0 + 7] = 0\n 21270: u8 [a0 + 6] = 0\n 21273: u8 [a0 + 5] = 0\n 21276: u8 [a0 + 4] = 0\n 21279: u8 [a0 + 3] = 0\n 21282: u8 [a0 + 2] = 0\n 21285: u8 [a0 + 1] = 0\n 21288: u8 [a0 + 0] = 0\n 21290: a1 = 0x40\n 21293: a0 = 0\n 21295: ra = 274, jump @0\n      : @317 [@dyn 137] (gas: 50)\n 21301: i32 a0 = a0 + 0\n 21303: i32 a2 = sp + 0x240\n 21307: a1 = 0x40\n 21310: ecalli 5 // 'hash_keccak_256'\n 21312: a0 = u64 [sp + 0x240]\n 21316: a1 = u64 [sp + 0x248]\n 21320: a2 = u64 [sp + 0x258]\n 21324: a3 = u64 [sp + 0x250]\n 21328: a0 = reverse a0\n 21330: a1 = reverse a1\n 21332: a2 = reverse a2\n 21334: a3 = reverse a3\n 21336: a4 = u64 [sp + 0xc0]\n 21340: a4 = a4 + a3\n 21343: a5 = u64 [sp + 0xc8]\n 21347: a5 = a5 + a2\n 21350: a2 = a5 <u a2\n 21353: s1 = a4 + a2\n 21356: a4 = s1 ^ a3\n 21359: a3 = s1 <u a3\n 21362: a3 = a2 if a4 == 0\n 21365: a2 = u64 [sp + 0xd0]\n 21369: a2 = a2 + a1\n 21372: a3 = a3 + a2\n 21375: t0 = a3 <u a2\n 21378: a4 = u64 [sp + 0xd8]\n 21382: a0 = a0 + a4\n 21385: a1 = a2 <u a1\n 21388: a0 = a0 + a1\n 21391: a0 = a0 + t0\n 21394: u64 [sp + 0xd0] = s1\n 21398: u64 [sp + 0x228] = s1\n 21402: u64 [sp + 0xd8] = a5\n 21406: u64 [sp + 0x220] = a5\n 21410: u64 [sp + 0xc8] = a3\n 21414: u64 [sp + 0x230] = a3\n 21418: u64 [sp + 0xc0] = a0\n 21422: u64 [sp + 0x238] = a0\n 21426: u64 [sp + 600] = 0\n 21430: u64 [sp + 592] = 0\n 21434: u64 [sp + 584] = 0\n 21438: u64 [sp + 576] = 0\n 21442: u32 [sp + 512] = 0x20\n 21447: i32 a1 = sp + 0x220\n 21451: i32 a3 = sp + 0x240\n 21455: i32 a4 = sp + 0x200\n 21459: a2 = 0xffffffffffffffff\n 21462: a0 = 0\n 21464: ecalli 4 // 'get_storage'\n 21466: fallthrough\n      : @318 (gas: 37)\n 21467: a3 = u64 [sp + 0x248]\n 21471: a1 = u64 [sp + 0x240]\n 21475: t0 = u64 [sp + 0x258]\n 21479: a2 = u64 [sp + 0x250]\n 21483: a5 = u64 [sp + 0xe0]\n 21487: a5 = a5 + a3\n 21490: a0 = u64 [sp + 0xe8]\n 21494: a0 = a0 + a1\n 21497: u64 [sp + 0xe8] = a0\n 21501: a4 = a0 <u a1\n 21504: a5 = a5 + a4\n 21507: t1 = a5 ^ a3\n 21510: u64 [sp + 0xe0] = a5\n 21514: a3 = a5 <u a3\n 21517: a5 = a4 ^ 0x1\n 21520: a4 = a3 if t1 != 0\n 21523: a0 = u64 [sp + 0xf0]\n 21527: a0 = a0 + a2\n 21530: s1 = a0 + a4\n 21533: a4 = s1 <u a0\n 21536: a1 = u64 [sp + 0xf8]\n 21540: a1 = a1 + t0\n 21543: a0 = a0 <u a2\n 21546: a0 = a0 + a1\n 21549: a4 = a4 + a0\n 21552: a0 = s1 <u a2\n 21555: a1 = a4 ^ t0\n 21558: u64 [sp + 0xf8] = a4\n 21562: a4 = a4 <u t0\n 21565: a4 = a0 if a1 == 0\n 21568: a0 = a4 ^ 0x1\n 21571: a2 = a2 ^ s1\n 21574: a1 = a1 | a2\n 21577: a2 = a3 ^ 0x1\n 21580: a5 = a2 if t1 != 0\n 21583: a5 = a0 if a1 != 0\n 21586: jump @334 if a5 == 0\n      : @319 (gas: 46)\n 21590: a0 = u64 [sp + 0xc8]\n 21594: u64 [sp + 0x230] = a0\n 21598: a0 = u64 [sp + 0xd0]\n 21602: u64 [sp + 0x228] = a0\n 21606: a0 = u64 [sp + 0xd8]\n 21610: u64 [sp + 0x220] = a0\n 21614: a0 = u64 [sp + 0xc0]\n 21618: u64 [sp + 0x238] = a0\n 21622: u64 [sp + 600] = 0\n 21626: u64 [sp + 592] = 0\n 21630: u64 [sp + 584] = 0\n 21634: u64 [sp + 576] = 0\n 21638: u32 [sp + 512] = 0x20\n 21643: i32 a1 = sp + 0x220\n 21647: i32 a3 = sp + 0x240\n 21651: i32 a4 = sp + 0x200\n 21655: a2 = 0xffffffffffffffff\n 21658: a0 = 0\n 21660: ecalli 4 // 'get_storage'\n 21662: a0 = u64 [sp + 0xc0]\n 21666: u64 [sp + 0x238] = a0\n 21670: a0 = u64 [sp + 0xc8]\n 21674: u64 [sp + 0x230] = a0\n 21678: a0 = u64 [sp + 0xd0]\n 21682: u64 [sp + 0x228] = a0\n 21686: a0 = u64 [sp + 0xd8]\n 21690: u64 [sp + 0x220] = a0\n 21694: a0 = u64 [sp + 0xf8]\n 21698: u64 [sp + 0x258] = a0\n 21702: u64 [sp + 0x250] = s1\n 21706: a0 = u64 [sp + 0xe0]\n 21710: u64 [sp + 0x248] = a0\n 21714: a0 = u64 [sp + 0xe8]\n 21718: u64 [sp + 0x240] = a0\n 21722: i32 a1 = sp + 0x220\n 21726: i32 a3 = sp + 0x240\n 21730: a2 = 0xffffffffffffffff\n 21733: a4 = 0x20\n 21736: a0 = 0\n 21738: ecalli 8 // 'set_storage'\n 21740: sp = s0 + 0xfffffffffffffd80\n 21744: ra = u64 [sp + 0x278]\n 21748: s0 = u64 [sp + 0x270]\n 21752: s1 = u64 [sp + 0x268]\n 21756: sp = sp + 0x280\n 21760: ret\n      : @320 (gas: 3)\n 21762: a0 = 0x40\n 21765: a1 = 0x20\n 21768: ra = 276, jump @0\n      : @321 [@dyn 138] (gas: 103)\n 21774: a1 = u8 [a0 + 0x11]\n 21777: a2 = u8 [a0 + 0x10]\n 21780: a3 = u8 [a0 + 0x12]\n 21783: a4 = u8 [a0 + 0x13]\n 21786: a1 = a1 << 0x8\n 21789: a1 = a1 | a2\n 21792: a3 = a3 << 0x10\n 21795: a4 = a4 << 0x18\n 21798: a3 = a3 | a4\n 21801: a1 = a1 | a3\n 21804: a2 = u8 [a0 + 0x15]\n 21807: a3 = u8 [a0 + 0x14]\n 21810: a4 = u8 [a0 + 0x16]\n 21813: a5 = u8 [a0 + 0x17]\n 21816: a2 = a2 << 0x8\n 21819: a2 = a2 | a3\n 21822: a4 = a4 << 0x10\n 21825: a5 = a5 << 0x18\n 21828: a4 = a4 | a5\n 21831: a2 = a2 | a4\n 21834: a2 = a2 << 0x20\n 21837: t0 = a2 | a1\n 21840: a2 = u8 [a0 + 0x1]\n 21843: a3 = u8 [a0]\n 21845: a4 = u8 [a0 + 0x2]\n 21848: a5 = u8 [a0 + 0x3]\n 21851: a2 = a2 << 0x8\n 21854: a2 = a2 | a3\n 21857: a4 = a4 << 0x10\n 21860: a5 = a5 << 0x18\n 21863: a4 = a4 | a5\n 21866: a2 = a2 | a4\n 21869: a3 = u8 [a0 + 0x5]\n 21872: a4 = u8 [a0 + 0x4]\n 21875: a5 = u8 [a0 + 0x6]\n 21878: s1 = u8 [a0 + 0x7]\n 21881: a3 = a3 << 0x8\n 21884: a3 = a3 | a4\n 21887: a5 = a5 << 0x10\n 21890: s1 = s1 << 0x18\n 21893: a5 = a5 | s1\n 21896: a3 = a3 | a5\n 21899: a3 = a3 << 0x20\n 21902: a2 = a2 | a3\n 21905: a3 = u8 [a0 + 0x19]\n 21908: a4 = u8 [a0 + 0x18]\n 21911: a5 = u8 [a0 + 0x1a]\n 21914: s1 = u8 [a0 + 0x1b]\n 21917: a3 = a3 << 0x8\n 21920: a3 = a3 | a4\n 21923: a5 = a5 << 0x10\n 21926: s1 = s1 << 0x18\n 21929: a5 = a5 | s1\n 21932: a3 = a3 | a5\n 21935: a4 = u8 [a0 + 0x1d]\n 21938: a5 = u8 [a0 + 0x1c]\n 21941: s1 = u8 [a0 + 0x1e]\n 21944: a1 = u8 [a0 + 0x1f]\n 21947: a4 = a4 << 0x8\n 21950: a4 = a4 | a5\n 21953: s1 = s1 << 0x10\n 21956: a1 = a1 << 0x18\n 21959: a1 = a1 | s1\n 21962: a1 = a1 | a4\n 21965: a1 = a1 << 0x20\n 21968: a3 = a3 | a1\n 21971: a1 = u8 [a0 + 0x9]\n 21974: a4 = u8 [a0 + 0x8]\n 21977: a5 = u8 [a0 + 0xa]\n 21980: s1 = u8 [a0 + 0xb]\n 21983: a1 = a1 << 0x8\n 21986: a1 = a1 | a4\n 21989: a5 = a5 << 0x10\n 21992: s1 = s1 << 0x18\n 21995: a5 = a5 | s1\n 21998: a1 = a1 | a5\n 22001: a4 = u8 [a0 + 0xd]\n 22004: a5 = u8 [a0 + 0xc]\n 22007: s1 = u8 [a0 + 0xe]\n 22010: a0 = u8 [a0 + 0xf]\n 22013: a4 = a4 << 0x8\n 22016: a4 = a4 | a5\n 22019: s1 = s1 << 0x10\n 22022: a0 = a0 << 0x18\n 22025: a0 = a0 | s1\n 22028: a0 = a0 | a4\n 22031: a0 = a0 << 0x20\n 22034: a0 = a0 | a1\n 22037: s1 = reverse a0\n 22039: a1 = reverse a3\n 22041: a2 = reverse a2\n 22043: a0 = reverse t0\n 22045: u64 [sp + 0xf8] = a0\n 22049: u64 [sp + 0xf0] = a2\n 22053: a0 = a0 | a2\n 22056: a2 = a1\n 22058: a1 = a1 | s1\n 22061: a1 = a1 | a0\n 22064: a1 = a1 >> 0x20\n 22067: a0 = a0 | s1\n 22070: a0 = a0 << 0x20\n 22073: a0 = a0 | a1\n 22076: jump @331 if a0 != 0\n      : @322 (gas: 5)\n 22080: u64 [sp + 0xe8] = a2\n 22084: i32 a0 = a2 + 0\n 22086: a1 = 0x20\n 22089: u64 [sp + 0xe0] = a0\n 22093: ra = 278, jump @0\n      : @323 [@dyn 139] (gas: 50)\n 22099: u8 [a0 + 31] = 0\n 22102: u8 [a0 + 30] = 0\n 22105: u8 [a0 + 29] = 0\n 22108: u8 [a0 + 28] = 0\n 22111: u8 [a0 + 27] = 0\n 22114: u8 [a0 + 26] = 0\n 22117: u8 [a0 + 25] = 0\n 22120: u8 [a0 + 24] = 0\n 22123: u8 [a0 + 23] = 0\n 22126: u8 [a0 + 22] = 0\n 22129: u8 [a0 + 21] = 0\n 22132: u8 [a0 + 20] = 0\n 22135: u8 [a0 + 19] = 0\n 22138: u8 [a0 + 18] = 0\n 22141: u8 [a0 + 17] = 0\n 22144: u8 [a0 + 16] = 0\n 22147: u8 [a0 + 15] = 0\n 22150: u8 [a0 + 14] = 0\n 22153: u8 [a0 + 13] = 0\n 22156: u8 [a0 + 12] = 0\n 22159: u8 [a0 + 11] = 0\n 22162: u8 [a0 + 10] = 0\n 22165: u8 [a0 + 9] = 0\n 22168: u8 [a0 + 8] = 0\n 22171: u8 [a0 + 7] = 0\n 22174: u8 [a0 + 6] = 0\n 22177: u8 [a0 + 5] = 0\n 22180: u8 [a0 + 4] = 0\n 22183: u8 [a0 + 3] = 0xa0\n 22188: u8 [a0 + 2] = 0x79\n 22192: u8 [a0 + 1] = 0xc3\n 22197: u8 [a0 + 0] = 0x8\n 22200: a1 = u64 [sp + 0xe8]\n 22204: a0 = a1 + 0x4\n 22207: a1 = a0 <u a1\n 22210: a3 = u64 [sp + 0xf8]\n 22214: a2 = a3 + a1\n 22217: a3 = a2 <u a3\n 22220: a3 = a1 if a1 == 0\n 22223: a3 = a3 + s1\n 22226: a1 = a3 <u s1\n 22229: a4 = u64 [sp + 0xf0]\n 22233: a4 = a4 + a1\n 22236: u64 [sp + 0x108] = a2\n 22240: u64 [sp + 0x100] = a0\n 22244: u64 [sp + 0x110] = a3\n 22248: a0 = sp + 0x120\n 22252: a1 = sp + 0x100\n 22256: u64 [sp + 0x118] = a4\n 22260: ra = 280, jump @287\n      : @324 [@dyn 140] (gas: 5)\n 22266: a0 = u64 [sp + 0x128]\n 22270: t0 = u64 [sp + 0x138]\n 22274: t1 = u64 [sp + 0x120]\n 22278: a3 = u64 [sp + 0x130]\n 22282: jump @330\n      : @325 (gas: 3)\n 22285: a0 = 0x40\n 22288: a1 = 0x20\n 22291: ra = 282, jump @0\n      : @326 [@dyn 141] (gas: 103)\n 22297: a1 = u8 [a0 + 0x11]\n 22300: a2 = u8 [a0 + 0x10]\n 22303: a3 = u8 [a0 + 0x12]\n 22306: a4 = u8 [a0 + 0x13]\n 22309: a1 = a1 << 0x8\n 22312: a1 = a1 | a2\n 22315: a3 = a3 << 0x10\n 22318: a4 = a4 << 0x18\n 22321: a3 = a3 | a4\n 22324: a1 = a1 | a3\n 22327: a2 = u8 [a0 + 0x15]\n 22330: a3 = u8 [a0 + 0x14]\n 22333: a4 = u8 [a0 + 0x16]\n 22336: a5 = u8 [a0 + 0x17]\n 22339: a2 = a2 << 0x8\n 22342: a2 = a2 | a3\n 22345: a4 = a4 << 0x10\n 22348: a5 = a5 << 0x18\n 22351: a4 = a4 | a5\n 22354: a2 = a2 | a4\n 22357: a2 = a2 << 0x20\n 22360: t0 = a2 | a1\n 22363: a2 = u8 [a0 + 0x1]\n 22366: a3 = u8 [a0]\n 22368: a4 = u8 [a0 + 0x2]\n 22371: a5 = u8 [a0 + 0x3]\n 22374: a2 = a2 << 0x8\n 22377: a2 = a2 | a3\n 22380: a4 = a4 << 0x10\n 22383: a5 = a5 << 0x18\n 22386: a4 = a4 | a5\n 22389: a2 = a2 | a4\n 22392: a3 = u8 [a0 + 0x5]\n 22395: a4 = u8 [a0 + 0x4]\n 22398: a5 = u8 [a0 + 0x6]\n 22401: s1 = u8 [a0 + 0x7]\n 22404: a3 = a3 << 0x8\n 22407: a3 = a3 | a4\n 22410: a5 = a5 << 0x10\n 22413: s1 = s1 << 0x18\n 22416: a5 = a5 | s1\n 22419: a3 = a3 | a5\n 22422: a3 = a3 << 0x20\n 22425: a2 = a2 | a3\n 22428: a3 = u8 [a0 + 0x19]\n 22431: a4 = u8 [a0 + 0x18]\n 22434: a5 = u8 [a0 + 0x1a]\n 22437: s1 = u8 [a0 + 0x1b]\n 22440: a3 = a3 << 0x8\n 22443: a3 = a3 | a4\n 22446: a5 = a5 << 0x10\n 22449: s1 = s1 << 0x18\n 22452: a5 = a5 | s1\n 22455: a3 = a3 | a5\n 22458: a4 = u8 [a0 + 0x1d]\n 22461: a5 = u8 [a0 + 0x1c]\n 22464: s1 = u8 [a0 + 0x1e]\n 22467: a1 = u8 [a0 + 0x1f]\n 22470: a4 = a4 << 0x8\n 22473: a4 = a4 | a5\n 22476: s1 = s1 << 0x10\n 22479: a1 = a1 << 0x18\n 22482: a1 = a1 | s1\n 22485: a1 = a1 | a4\n 22488: a1 = a1 << 0x20\n 22491: a3 = a3 | a1\n 22494: a1 = u8 [a0 + 0x9]\n 22497: a4 = u8 [a0 + 0x8]\n 22500: a5 = u8 [a0 + 0xa]\n 22503: s1 = u8 [a0 + 0xb]\n 22506: a1 = a1 << 0x8\n 22509: a1 = a1 | a4\n 22512: a5 = a5 << 0x10\n 22515: s1 = s1 << 0x18\n 22518: a5 = a5 | s1\n 22521: a1 = a1 | a5\n 22524: a4 = u8 [a0 + 0xd]\n 22527: a5 = u8 [a0 + 0xc]\n 22530: s1 = u8 [a0 + 0xe]\n 22533: a0 = u8 [a0 + 0xf]\n 22536: a4 = a4 << 0x8\n 22539: a4 = a4 | a5\n 22542: s1 = s1 << 0x10\n 22545: a0 = a0 << 0x18\n 22548: a0 = a0 | s1\n 22551: a0 = a0 | a4\n 22554: a0 = a0 << 0x20\n 22557: a0 = a0 | a1\n 22560: s1 = reverse a0\n 22562: a1 = reverse a3\n 22564: a2 = reverse a2\n 22566: a0 = reverse t0\n 22568: u64 [sp + 0xf8] = a0\n 22572: u64 [sp + 0xf0] = a2\n 22576: a0 = a0 | a2\n 22579: a2 = a1\n 22581: a1 = a1 | s1\n 22584: a1 = a1 | a0\n 22587: a1 = a1 >> 0x20\n 22590: a0 = a0 | s1\n 22593: a0 = a0 << 0x20\n 22596: a0 = a0 | a1\n 22599: jump @331 if a0 != 0\n      : @327 (gas: 5)\n 22603: u64 [sp + 0xe8] = a2\n 22607: i32 a0 = a2 + 0\n 22609: a1 = 0x20\n 22612: u64 [sp + 0xe0] = a0\n 22616: ra = 284, jump @0\n      : @328 [@dyn 142] (gas: 50)\n 22622: u8 [a0 + 31] = 0\n 22625: u8 [a0 + 30] = 0\n 22628: u8 [a0 + 29] = 0\n 22631: u8 [a0 + 28] = 0\n 22634: u8 [a0 + 27] = 0\n 22637: u8 [a0 + 26] = 0\n 22640: u8 [a0 + 25] = 0\n 22643: u8 [a0 + 24] = 0\n 22646: u8 [a0 + 23] = 0\n 22649: u8 [a0 + 22] = 0\n 22652: u8 [a0 + 21] = 0\n 22655: u8 [a0 + 20] = 0\n 22658: u8 [a0 + 19] = 0\n 22661: u8 [a0 + 18] = 0\n 22664: u8 [a0 + 17] = 0\n 22667: u8 [a0 + 16] = 0\n 22670: u8 [a0 + 15] = 0\n 22673: u8 [a0 + 14] = 0\n 22676: u8 [a0 + 13] = 0\n 22679: u8 [a0 + 12] = 0\n 22682: u8 [a0 + 11] = 0\n 22685: u8 [a0 + 10] = 0\n 22688: u8 [a0 + 9] = 0\n 22691: u8 [a0 + 8] = 0\n 22694: u8 [a0 + 7] = 0\n 22697: u8 [a0 + 6] = 0\n 22700: u8 [a0 + 5] = 0\n 22703: u8 [a0 + 4] = 0\n 22706: u8 [a0 + 3] = 0xa0\n 22711: u8 [a0 + 2] = 0x79\n 22715: u8 [a0 + 1] = 0xc3\n 22720: u8 [a0 + 0] = 0x8\n 22723: a1 = u64 [sp + 0xe8]\n 22727: a0 = a1 + 0x4\n 22730: a1 = a0 <u a1\n 22733: a3 = u64 [sp + 0xf8]\n 22737: a2 = a3 + a1\n 22740: a3 = a2 <u a3\n 22743: a3 = a1 if a1 == 0\n 22746: a3 = a3 + s1\n 22749: a1 = a3 <u s1\n 22752: a4 = u64 [sp + 0xf0]\n 22756: a4 = a4 + a1\n 22759: u64 [sp + 0x148] = a2\n 22763: u64 [sp + 0x140] = a0\n 22767: u64 [sp + 0x150] = a3\n 22771: a0 = sp + 0x160\n 22775: a1 = sp + 0x140\n 22779: u64 [sp + 0x158] = a4\n 22783: ra = 286, jump @295\n      : @329 [@dyn 143] (gas: 5)\n 22789: a0 = u64 [sp + 0x168]\n 22793: t0 = u64 [sp + 0x178]\n 22797: t1 = u64 [sp + 0x160]\n 22801: a3 = u64 [sp + 0x170]\n 22805: fallthrough\n      : @330 (gas: 26)\n 22806: a1 = u64 [sp + 0xf8]\n 22810: a4 = a0 ^ a1\n 22813: a5 = a0 <u a1\n 22816: t2 = a1\n 22818: a2 = u64 [sp + 0xe8]\n 22822: a1 = t1 <u a2\n 22825: a5 = a1 if a4 == 0\n 22828: a4 = a3 - s1\n 22831: a3 = a3 <u s1\n 22834: s1 = u64 [sp + 0xf0]\n 22838: s1 = t0 - s1\n 22841: s1 = s1 - a3\n 22844: a3 = a4 <u a5\n 22847: s1 = s1 - a3\n 22850: a4 = a4 - a5\n 22853: a0 = a0 - t2\n 22856: a1 = a0 - a1\n 22859: a0 = t1 - a2\n 22862: a1 = a1 | s1\n 22865: a2 = a0 | a4\n 22868: a2 = a2 | a1\n 22871: a1 = a1 | a4\n 22874: a2 = a2 >> 0x20\n 22877: a1 = a1 << 0x20\n 22880: a1 = a1 | a2\n 22883: jump @338 if a1 == 0\n      : @331 (gas: 1)\n 22887: trap\n      : @332 (gas: 8)\n 22888: u64 [sp + 432] = 0\n 22892: u64 [sp + 424] = 0\n 22896: u64 [sp + 416] = 0\n 22900: a0 = 0x4e487b7100000000\n 22910: a1 = sp + 0x1a0\n 22914: u64 [sp + 0x1b8] = a0\n 22918: a0 = 0\n 22920: ra = 288, jump @8\n      : @333 [@dyn 144] (gas: 8)\n 22926: u64 [sp + 408] = 0\n 22930: u64 [sp + 400] = 0\n 22934: u64 [sp + 384] = 0x11\n 22939: a0 = 0x4\n 22942: a1 = sp + 0x180\n 22946: u64 [sp + 392] = 0\n 22950: ra = 0x124\n 22954: jump @8\n      : @334 (gas: 8)\n 22957: u64 [sp + 496] = 0\n 22961: u64 [sp + 488] = 0\n 22965: u64 [sp + 480] = 0\n 22969: a0 = 0x4e487b7100000000\n 22979: a1 = sp + 0x1e0\n 22983: u64 [sp + 0x1f8] = a0\n 22987: a0 = 0\n 22989: ra = 290, jump @8\n      : @335 [@dyn 145] (gas: 7)\n 22995: u64 [sp + 472] = 0\n 22999: u64 [sp + 464] = 0\n 23003: u64 [sp + 448] = 0x11\n 23008: a0 = 0x4\n 23011: a1 = sp + 0x1c0\n 23015: u64 [sp + 456] = 0\n 23019: ra = 292, jump @8\n      : @336 [@dyn 146] (gas: 3)\n 23025: a1 = 0x24\n 23028: a0 = 0\n 23030: ra = 294, jump @0\n      : @337 [@dyn 147] (gas: 5)\n 23036: i32 a1 = a0 + 0\n 23038: a0 = 0x1\n 23041: a2 = 0x24\n 23044: ecalli 6 // 'seal_return'\n 23046: fallthrough\n      : @338 (gas: 4)\n 23047: i32 s1 = a0 + 0\n 23049: a0 = u64 [sp + 0xe0]\n 23053: a1 = s1\n 23055: ra = 296, jump @0\n      : @339 [@dyn 148] (gas: 6)\n 23061: i32 a1 = a0 + 0\n 23063: a0 = 0x1\n 23066: a2 = s1\n 23068: ra = 0x12a\n 23072: ecalli 6 // 'seal_return'\n 23074: fallthrough\n      : @340 [@dyn 149] (gas: 53)\n 23075: sp = sp + 0xffffffffffffff30\n 23079: u64 [sp + 0xc8] = ra\n 23083: u64 [sp + 0xc0] = s0\n 23087: u64 [sp + 0xb8] = s1\n 23091: s0 = sp + 0xd0\n 23095: sp = sp & 0xfffffffffffffff0\n 23098: a4 = u64 [a0]\n 23100: u64 [sp + 0x28] = a4\n 23103: a4 = u64 [a0 + 0x8]\n 23106: u64 [sp + 0x20] = a4\n 23109: a4 = u64 [a0 + 0x10]\n 23112: u64 [sp + 0x18] = a4\n 23115: a0 = u64 [a0 + 0x18]\n 23118: u64 [sp + 0x10] = a0\n 23121: a0 = u64 [a1]\n 23123: u64 [sp + 0x8] = a0\n 23126: ra = u64 [a1 + 0x8]\n 23129: s1 = u64 [a1 + 0x10]\n 23132: t2 = u64 [a1 + 0x18]\n 23135: t1 = u64 [a2]\n 23137: t0 = u64 [a2 + 0x8]\n 23140: a5 = u64 [a2 + 0x10]\n 23143: a4 = u64 [a2 + 0x18]\n 23146: a2 = u64 [a3]\n 23148: a1 = u64 [a3 + 0x8]\n 23151: a0 = u64 [a3 + 0x10]\n 23154: a3 = u64 [a3 + 0x18]\n 23157: u64 [sp + 0x48] = a3\n 23160: u64 [sp + 0x40] = a0\n 23163: u64 [sp + 0x38] = a1\n 23166: u64 [sp + 0x30] = a2\n 23169: u64 [sp + 0x68] = a4\n 23172: u64 [sp + 0x60] = a5\n 23175: u64 [sp + 0x58] = t0\n 23178: u64 [sp + 0x50] = t1\n 23181: u64 [sp + 0x88] = t2\n 23185: u64 [sp + 0x80] = s1\n 23189: u64 [sp + 0x78] = ra\n 23192: a0 = u64 [sp + 0x8]\n 23195: u64 [sp + 0x70] = a0\n 23198: a0 = u64 [sp + 0x10]\n 23201: u64 [sp + 0xa8] = a0\n 23205: a0 = u64 [sp + 0x18]\n 23208: u64 [sp + 0xa0] = a0\n 23212: a0 = u64 [sp + 0x20]\n 23215: u64 [sp + 0x98] = a0\n 23219: a0 = sp + 0x90\n 23223: a1 = sp + 0x70\n 23226: a2 = sp + 0x50\n 23229: a3 = sp + 0x30\n 23232: a4 = u64 [sp + 0x28]\n 23235: u64 [sp + 0x90] = a4\n 23239: ra = 300, jump @274\n      : @341 [@dyn 150] (gas: 6)\n 23245: sp = s0 + 0xffffffffffffff30\n 23249: ra = u64 [sp + 0xc8]\n 23253: s0 = u64 [sp + 0xc0]\n 23257: s1 = u64 [sp + 0xb8]\n 23261: sp = sp + 0xd0\n 23265: ret\n      : @342 (gas: 18)\n 23267: sp = sp + 0xffffffffffffff60\n 23271: u64 [sp + 0x98] = ra\n 23275: u64 [sp + 0x90] = s0\n 23279: u64 [sp + 0x88] = s1\n 23283: s0 = sp + 0xa0\n 23287: sp = sp & 0xfffffffffffffff0\n 23290: a2 = u64 [a1 + 0x18]\n 23293: u64 [sp + 0x30] = a2\n 23296: a2 = u64 [a1 + 0x10]\n 23299: u64 [sp + 0x28] = a2\n 23302: a2 = u64 [a1 + 0x8]\n 23305: u64 [sp + 0x20] = a2\n 23308: a1 = u64 [a1]\n 23310: u64 [sp + 0x18] = a1\n 23313: u64 [sp + 0x38] = a0\n 23316: a0 = 0x40\n 23319: a1 = 0x20\n 23322: ra = 302, jump @0\n      : @343 [@dyn 151] (gas: 130)\n 23328: a1 = u8 [a0 + 0x19]\n 23331: a2 = u8 [a0 + 0x18]\n 23334: a3 = u8 [a0 + 0x1a]\n 23337: a4 = u8 [a0 + 0x1b]\n 23340: a1 = a1 << 0x8\n 23343: a1 = a1 | a2\n 23346: a3 = a3 << 0x10\n 23349: a4 = a4 << 0x18\n 23352: a3 = a3 | a4\n 23355: a1 = a1 | a3\n 23358: a2 = u8 [a0 + 0x1d]\n 23361: a3 = u8 [a0 + 0x1c]\n 23364: a4 = u8 [a0 + 0x1e]\n 23367: a5 = u8 [a0 + 0x1f]\n 23370: a2 = a2 << 0x8\n 23373: a2 = a2 | a3\n 23376: a4 = a4 << 0x10\n 23379: a5 = a5 << 0x18\n 23382: a4 = a4 | a5\n 23385: a2 = a2 | a4\n 23388: a2 = a2 << 0x20\n 23391: t0 = a2 | a1\n 23394: a2 = u8 [a0 + 0x11]\n 23397: a3 = u8 [a0 + 0x10]\n 23400: a4 = u8 [a0 + 0x12]\n 23403: a5 = u8 [a0 + 0x13]\n 23406: a2 = a2 << 0x8\n 23409: a2 = a2 | a3\n 23412: a4 = a4 << 0x10\n 23415: a5 = a5 << 0x18\n 23418: a4 = a4 | a5\n 23421: a2 = a2 | a4\n 23424: a3 = u8 [a0 + 0x15]\n 23427: a4 = u8 [a0 + 0x14]\n 23430: a5 = u8 [a0 + 0x16]\n 23433: s1 = u8 [a0 + 0x17]\n 23436: a3 = a3 << 0x8\n 23439: a3 = a3 | a4\n 23442: a5 = a5 << 0x10\n 23445: s1 = s1 << 0x18\n 23448: a5 = a5 | s1\n 23451: a3 = a3 | a5\n 23454: a3 = a3 << 0x20\n 23457: a2 = a2 | a3\n 23460: a3 = u8 [a0 + 0x9]\n 23463: a4 = u8 [a0 + 0x8]\n 23466: a5 = u8 [a0 + 0xa]\n 23469: s1 = u8 [a0 + 0xb]\n 23472: a3 = a3 << 0x8\n 23475: a3 = a3 | a4\n 23478: a5 = a5 << 0x10\n 23481: s1 = s1 << 0x18\n 23484: a5 = a5 | s1\n 23487: a3 = a3 | a5\n 23490: a4 = u8 [a0 + 0xd]\n 23493: a5 = u8 [a0 + 0xc]\n 23496: s1 = u8 [a0 + 0xe]\n 23499: a1 = u8 [a0 + 0xf]\n 23502: a4 = a4 << 0x8\n 23505: a4 = a4 | a5\n 23508: s1 = s1 << 0x10\n 23511: a1 = a1 << 0x18\n 23514: a1 = a1 | s1\n 23517: a1 = a1 | a4\n 23520: a1 = a1 << 0x20\n 23523: a3 = a3 | a1\n 23526: a1 = u8 [a0 + 0x1]\n 23529: a4 = u8 [a0]\n 23531: a5 = u8 [a0 + 0x2]\n 23534: s1 = u8 [a0 + 0x3]\n 23537: a1 = a1 << 0x8\n 23540: a1 = a1 | a4\n 23543: a5 = a5 << 0x10\n 23546: s1 = s1 << 0x18\n 23549: a5 = a5 | s1\n 23552: a1 = a1 | a5\n 23555: a4 = u8 [a0 + 0x5]\n 23558: a5 = u8 [a0 + 0x4]\n 23561: s1 = u8 [a0 + 0x6]\n 23564: a0 = u8 [a0 + 0x7]\n 23567: a4 = a4 << 0x8\n 23570: a4 = a4 | a5\n 23573: s1 = s1 << 0x10\n 23576: a0 = a0 << 0x18\n 23579: a0 = a0 | s1\n 23582: a0 = a0 | a4\n 23585: a0 = a0 << 0x20\n 23588: a0 = a0 | a1\n 23591: t1 = reverse a0\n 23593: t2 = reverse a3\n 23595: s1 = reverse a2\n 23597: a5 = reverse t0\n 23599: a1 = u64 [sp + 0x18]\n 23602: a0 = a1 + 0x1f\n 23605: a1 = a0 <u a1\n 23608: a3 = u64 [sp + 0x20]\n 23611: a2 = a3 + a1\n 23614: a3 = a2 <u a3\n 23617: a3 = a1 if a1 == 0\n 23620: a1 = u64 [sp + 0x28]\n 23623: a3 = a3 + a1\n 23626: a1 = a3 <u a1\n 23629: a4 = u64 [sp + 0x30]\n 23632: a1 = a1 + a4\n 23635: a0 = a0 & 0xffffffffffffffe0\n 23638: a0 = a0 + a5\n 23641: u64 [sp + 0x28] = a5\n 23644: u64 [sp + 0x10] = a0\n 23647: a4 = a0 <u a5\n 23650: a2 = a2 + s1\n 23653: a5 = a2 + a4\n 23656: a2 = a5 ^ s1\n 23659: u64 [sp + 0x30] = s1\n 23662: a0 = a5 <u s1\n 23665: a0 = a4 if a2 == 0\n 23668: a3 = a3 + t2\n 23671: a4 = a3 + a0\n 23674: s1 = a4 <u a3\n 23677: a2 = a3 <u t2\n 23680: a1 = a1 + t1\n 23683: a1 = a1 + a2\n 23686: s1 = s1 + a1\n 23689: a1 = a4 >u 0\n 23691: a2 = s1 >u 0\n 23693: a2 = a1 if s1 == 0\n 23696: a1 = a4 | s1\n 23699: u64 [sp + 0x8] = a5\n 23702: a3 = a5 >u 0\n 23704: a3 = a2 if a1 != 0\n 23707: jump @347 if a3 != 0\n      : @344 (gas: 8)\n 23711: a1 = a4 <u t2\n 23714: a2 = s1 ^ t1\n 23717: a3 = s1 <u t1\n 23720: a3 = a1 if a2 == 0\n 23723: a1 = a4 ^ t2\n 23726: a1 = a1 | a2\n 23729: a0 = a3 if a1 != 0\n 23732: jump @347 if a0 != 0\n      : @345 (gas: 6)\n 23736: a0 = 0x40\n 23739: a1 = 0x20\n 23742: u64 [sp + 0x20] = t2\n 23745: u64 [sp + 0x18] = t1\n 23748: u64 [sp] = a4\n 23750: ra = 304, jump @0\n      : @346 [@dyn 152] (gas: 82)\n 23756: a1 = reverse s1\n 23758: a2 = u64 [sp]\n 23760: a2 = reverse a2\n 23762: a3 = u64 [sp + 0x8]\n 23765: a3 = reverse a3\n 23767: a4 = u64 [sp + 0x10]\n 23770: a4 = reverse a4\n 23772: u8 [a0 + 0x18] = a4\n 23775: a5 = a4 >> 0x38\n 23778: u8 [a0 + 0x1f] = a5\n 23781: a5 = a4 >> 0x30\n 23784: u8 [a0 + 0x1e] = a5\n 23787: a5 = a4 >> 0x28\n 23790: u8 [a0 + 0x1d] = a5\n 23793: a5 = a4 >> 0x20\n 23796: u8 [a0 + 0x1c] = a5\n 23799: a5 = a4 >> 0x18\n 23802: u8 [a0 + 0x1b] = a5\n 23805: a5 = a4 >> 0x10\n 23808: u8 [a0 + 0x1a] = a5\n 23811: a4 = a4 >> 0x8\n 23814: u8 [a0 + 0x19] = a4\n 23817: u8 [a0 + 0x10] = a3\n 23820: a4 = a3 >> 0x38\n 23823: u8 [a0 + 0x17] = a4\n 23826: a4 = a3 >> 0x30\n 23829: u8 [a0 + 0x16] = a4\n 23832: a4 = a3 >> 0x28\n 23835: u8 [a0 + 0x15] = a4\n 23838: a4 = a3 >> 0x20\n 23841: u8 [a0 + 0x14] = a4\n 23844: a4 = a3 >> 0x18\n 23847: u8 [a0 + 0x13] = a4\n 23850: a4 = a3 >> 0x10\n 23853: u8 [a0 + 0x12] = a4\n 23856: a3 = a3 >> 0x8\n 23859: u8 [a0 + 0x11] = a3\n 23862: u8 [a0 + 0x8] = a2\n 23865: a3 = a2 >> 0x38\n 23868: u8 [a0 + 0xf] = a3\n 23871: a3 = a2 >> 0x30\n 23874: u8 [a0 + 0xe] = a3\n 23877: a3 = a2 >> 0x28\n 23880: u8 [a0 + 0xd] = a3\n 23883: a3 = a2 >> 0x20\n 23886: u8 [a0 + 0xc] = a3\n 23889: a3 = a2 >> 0x18\n 23892: u8 [a0 + 0xb] = a3\n 23895: a3 = a2 >> 0x10\n 23898: u8 [a0 + 0xa] = a3\n 23901: a2 = a2 >> 0x8\n 23904: u8 [a0 + 0x9] = a2\n 23907: u8 [a0] = a1\n 23909: a2 = a1 >> 0x38\n 23912: u8 [a0 + 0x7] = a2\n 23915: a2 = a1 >> 0x30\n 23918: u8 [a0 + 0x6] = a2\n 23921: a2 = a1 >> 0x28\n 23924: u8 [a0 + 0x5] = a2\n 23927: a2 = a1 >> 0x20\n 23930: u8 [a0 + 0x4] = a2\n 23933: a2 = a1 >> 0x18\n 23936: u8 [a0 + 0x3] = a2\n 23939: a2 = a1 >> 0x10\n 23942: u8 [a0 + 0x2] = a2\n 23945: a1 = a1 >> 0x8\n 23948: u8 [a0 + 0x1] = a1\n 23951: a0 = u64 [sp + 0x38]\n 23954: a1 = u64 [sp + 0x28]\n 23957: u64 [a0] = a1\n 23959: a1 = u64 [sp + 0x18]\n 23962: u64 [a0 + 0x18] = a1\n 23965: a1 = u64 [sp + 0x30]\n 23968: u64 [a0 + 0x8] = a1\n 23971: a1 = u64 [sp + 0x20]\n 23974: u64 [a0 + 0x10] = a1\n 23977: sp = s0 + 0xffffffffffffff60\n 23981: ra = u64 [sp + 0x98]\n 23985: s0 = u64 [sp + 0x90]\n 23989: s1 = u64 [sp + 0x88]\n 23993: sp = sp + 0xa0\n 23997: ret\n      : @347 (gas: 8)\n 23999: u64 [sp + 112] = 0\n 24002: u64 [sp + 104] = 0\n 24005: u64 [sp + 96] = 0\n 24008: a0 = 0x4e487b7100000000\n 24018: a1 = sp + 0x60\n 24021: u64 [sp + 0x78] = a0\n 24024: a0 = 0\n 24026: ra = 306, jump @8\n      : @348 [@dyn 153] (gas: 7)\n 24032: u64 [sp + 88] = 0\n 24035: u64 [sp + 80] = 0\n 24038: u64 [sp + 64] = 0x41\n 24042: a0 = 0x4\n 24045: a1 = sp + 0x40\n 24048: u64 [sp + 72] = 0\n 24051: ra = 308, jump @8\n      : @349 [@dyn 154] (gas: 3)\n 24057: a1 = 0x24\n 24060: a0 = 0\n 24062: ra = 310, jump @0\n      : @350 [@dyn 155] (gas: 6)\n 24068: i32 a1 = a0 + 0\n 24070: a0 = 0x1\n 24073: a2 = 0x24\n 24076: ra = 0x138\n 24080: ecalli 6 // 'seal_return'\n 24082: fallthrough\n      : @351 [@dyn 156] (gas: 7)\n 24083: a4 = u64 [a1 + 0x18]\n 24086: a3 = u64 [a1 + 0x10]\n 24089: a2 = u64 [a1 + 0x8]\n 24092: t0 = a3 | a4\n 24095: a5 = a2 <u 0x1\n 24098: a5 = 0 if t0 != 0\n 24100: jump @353 if a5 == 0\n      : @352 (gas: 16)\n 24103: a1 = u64 [a1]\n 24105: a5 = a3 >> 0x3b\n 24108: a4 = a4 << 0x5\n 24111: a4 = a4 | a5\n 24114: a5 = a2 >> 0x3b\n 24117: a3 = a3 << 0x5\n 24120: a3 = a3 | a5\n 24123: a5 = a1 >> 0x3b\n 24126: a2 = a2 << 0x5\n 24129: a2 = a2 | a5\n 24132: a1 = a1 << 0x5\n 24135: u64 [a0] = a1\n 24137: u64 [a0 + 0x8] = a2\n 24140: u64 [a0 + 0x10] = a3\n 24143: u64 [a0 + 0x18] = a4\n 24146: ret\n      : @353 (gas: 13)\n 24148: sp = sp + 0xffffffffffffffb0\n 24151: u64 [sp + 0x48] = ra\n 24154: u64 [sp + 0x40] = s0\n 24157: s0 = sp + 0x50\n 24160: sp = sp & 0xfffffffffffffff0\n 24163: u64 [sp + 48] = 0\n 24166: u64 [sp + 40] = 0\n 24169: u64 [sp + 32] = 0\n 24172: a0 = 0x4e487b7100000000\n 24182: a1 = sp + 0x20\n 24185: u64 [sp + 0x38] = a0\n 24188: a0 = 0\n 24190: ra = 314, jump @8\n      : @354 [@dyn 157] (gas: 7)\n 24196: u64 [sp + 24] = 0\n 24199: u64 [sp + 16] = 0\n 24202: u64 [sp + 0] = 0x41\n 24205: a0 = 0x4\n 24208: a1 = sp\n 24210: u64 [sp + 8] = 0\n 24213: ra = 316, jump @8\n      : @355 [@dyn 158] (gas: 3)\n 24219: a1 = 0x24\n 24222: a0 = 0\n 24224: ra = 318, jump @0\n      : @356 [@dyn 159] (gas: 6)\n 24230: i32 a1 = a0 + 0\n 24232: a0 = 0x1\n 24235: a2 = 0x24\n 24238: ra = 0x140\n 24242: ecalli 6 // 'seal_return'\n 24244: fallthrough\n      : @357 [@dyn 160] (gas: 13)\n 24245: sp = sp + 0xffffffffffffff60\n 24249: u64 [sp + 0x98] = ra\n 24253: u64 [sp + 0x90] = s0\n 24257: u64 [sp + 0x88] = s1\n 24261: s0 = sp + 0xa0\n 24265: sp = sp & 0xfffffffffffffff0\n 24268: a4 = u64 [a1 + 0x18]\n 24271: a3 = u64 [a1 + 0x10]\n 24274: a2 = u64 [a1 + 0x8]\n 24277: s1 = a3 | a4\n 24280: a5 = a2 <u 0x1\n 24283: a5 = 0 if s1 != 0\n 24285: jump @360 if a5 == 0\n      : @358 (gas: 19)\n 24288: s1 = a0\n 24290: a0 = u64 [a1]\n 24292: a1 = a3 >> 0x3b\n 24295: a4 = a4 << 0x5\n 24298: a4 = a4 | a1\n 24301: a1 = a2 >> 0x3b\n 24304: a3 = a3 << 0x5\n 24307: a1 = a1 | a3\n 24310: a3 = a0 >> 0x3b\n 24313: a2 = a2 << 0x5\n 24316: a2 = a2 | a3\n 24319: a0 = a0 << 0x5\n 24322: u64 [sp + 0x40] = a0\n 24325: u64 [sp + 0x48] = a2\n 24328: u64 [sp + 0x50] = a1\n 24331: a0 = sp + 0x60\n 24334: a1 = sp + 0x40\n 24337: u64 [sp + 0x58] = a4\n 24340: ra = 322, jump @342\n      : @359 [@dyn 161] (gas: 14)\n 24346: a0 = u64 [sp + 0x70]\n 24349: a1 = u64 [sp + 0x78]\n 24352: a2 = u64 [sp + 0x60]\n 24355: a3 = u64 [sp + 0x68]\n 24358: u64 [s1 + 0x10] = a0\n 24361: u64 [s1 + 0x18] = a1\n 24364: u64 [s1] = a2\n 24366: u64 [s1 + 0x8] = a3\n 24369: sp = s0 + 0xffffffffffffff60\n 24373: ra = u64 [sp + 0x98]\n 24377: s0 = u64 [sp + 0x90]\n 24381: s1 = u64 [sp + 0x88]\n 24385: sp = sp + 0xa0\n 24389: ret\n      : @360 (gas: 8)\n 24391: u64 [sp + 48] = 0\n 24394: u64 [sp + 40] = 0\n 24397: u64 [sp + 32] = 0\n 24400: a0 = 0x4e487b7100000000\n 24410: a1 = sp + 0x20\n 24413: u64 [sp + 0x38] = a0\n 24416: a0 = 0\n 24418: ra = 324, jump @8\n      : @361 [@dyn 162] (gas: 7)\n 24424: u64 [sp + 24] = 0\n 24427: u64 [sp + 16] = 0\n 24430: u64 [sp + 0] = 0x41\n 24433: a0 = 0x4\n 24436: a1 = sp\n 24438: u64 [sp + 8] = 0\n 24441: ra = 326, jump @8\n      : @362 [@dyn 163] (gas: 3)\n 24447: a1 = 0x24\n 24450: a0 = 0\n 24452: ra = 328, jump @0\n      : @363 [@dyn 164] (gas: 6)\n 24458: i32 a1 = a0 + 0\n 24460: a0 = 0x1\n 24463: a2 = 0x24\n 24466: ra = 0x14a\n 24470: ecalli 6 // 'seal_return'\n 24472: fallthrough\n      : @364 [@dyn 165] (gas: 16)\n 24473: sp = sp + 0xffffffffffffffe8\n 24476: u64 [sp + 0x10] = ra\n 24479: u64 [sp + 0x8] = s0\n 24482: u64 [sp] = s1\n 24484: a2 = u64 [a1 + 0x10]\n 24487: a3 = u64 [a1 + 0x18]\n 24490: a4 = u64 [a1 + 0x8]\n 24493: s1 = u64 [a1]\n 24495: a3 = a3 | a4\n 24498: a1 = s1 | a2\n 24501: a1 = a1 | a3\n 24504: a1 = a1 >> 0x20\n 24507: a2 = a2 | a3\n 24510: a2 = a2 << 0x20\n 24513: a1 = a1 | a2\n 24516: jump @368 if a1 != 0\n      : @365 (gas: 12)\n 24519: a2 = u64 [a0 + 0x18]\n 24522: a3 = u64 [a0 + 0x10]\n 24525: a1 = u64 [a0]\n 24527: a0 = u64 [a0 + 0x8]\n 24530: a4 = a1 | a3\n 24533: a0 = a0 | a2\n 24536: a4 = a4 | a0\n 24539: a4 = a4 >> 0x20\n 24542: a0 = a0 | a3\n 24545: a0 = a0 << 0x20\n 24548: a0 = a0 | a4\n 24551: jump @368 if a0 != 0\n      : @366 (gas: 5)\n 24554: s0 = i32 [0x20004]\n 24559: i32 a0 = a1 + 0\n 24561: i32 s1 = s1 + 0\n 24563: a1 = s1\n 24565: ra = 332, jump @0\n      : @367 [@dyn 166] (gas: 9)\n 24571: i32 a0 = a0 + 0\n 24573: a1 = s1\n 24575: a2 = s0\n 24577: ra = u64 [sp + 0x10]\n 24580: s0 = u64 [sp + 0x8]\n 24583: s1 = u64 [sp]\n 24585: sp = sp + 0x18\n 24588: ecalli 0 // 'call_data_copy'\n 24589: ret\n      : @368 (gas: 1)\n 24591: trap\n      : @369 (gas: 18)\n 24592: sp = sp + 0xfffffffffffffea0\n 24596: u64 [sp + 0x158] = ra\n 24600: u64 [sp + 0x150] = s0\n 24604: u64 [sp + 0x148] = s1\n 24608: s0 = sp + 0x160\n 24612: sp = sp & 0xffffffffffffffe0\n 24615: a2 = u64 [a1 + 0x18]\n 24618: u64 [sp + 0x90] = a2\n 24622: a2 = u64 [a1 + 0x10]\n 24625: u64 [sp + 0x88] = a2\n 24629: a2 = u64 [a1 + 0x8]\n 24632: u64 [sp + 0xb8] = a2\n 24636: a1 = u64 [a1]\n 24638: u64 [sp + 0xb0] = a1\n 24642: u64 [sp + 0x8] = a0\n 24645: a0 = 0x40\n 24648: a1 = 0x20\n 24651: ra = 334, jump @0\n      : @370 [@dyn 167] (gas: 112)\n 24657: u64 [sp + 112] = 0\n 24660: u64 [sp + 120] = 0\n 24663: u64 [sp + 128] = 0\n 24667: ra = 0\n 24669: a1 = u8 [a0 + 0x19]\n 24672: a2 = u8 [a0 + 0x18]\n 24675: a3 = u8 [a0 + 0x1a]\n 24678: a4 = u8 [a0 + 0x1b]\n 24681: a1 = a1 << 0x8\n 24684: a1 = a1 | a2\n 24687: a3 = a3 << 0x10\n 24690: a4 = a4 << 0x18\n 24693: a3 = a3 | a4\n 24696: a1 = a1 | a3\n 24699: a2 = u8 [a0 + 0x1d]\n 24702: a3 = u8 [a0 + 0x1c]\n 24705: a4 = u8 [a0 + 0x1e]\n 24708: a5 = u8 [a0 + 0x1f]\n 24711: a2 = a2 << 0x8\n 24714: a2 = a2 | a3\n 24717: a4 = a4 << 0x10\n 24720: a5 = a5 << 0x18\n 24723: a4 = a4 | a5\n 24726: a2 = a2 | a4\n 24729: a2 = a2 << 0x20\n 24732: t0 = a2 | a1\n 24735: a2 = u8 [a0 + 0x11]\n 24738: a3 = u8 [a0 + 0x10]\n 24741: a4 = u8 [a0 + 0x12]\n 24744: a5 = u8 [a0 + 0x13]\n 24747: a2 = a2 << 0x8\n 24750: a2 = a2 | a3\n 24753: a4 = a4 << 0x10\n 24756: a5 = a5 << 0x18\n 24759: a4 = a4 | a5\n 24762: a2 = a2 | a4\n 24765: a3 = u8 [a0 + 0x15]\n 24768: a4 = u8 [a0 + 0x14]\n 24771: a5 = u8 [a0 + 0x16]\n 24774: s1 = u8 [a0 + 0x17]\n 24777: a3 = a3 << 0x8\n 24780: a3 = a3 | a4\n 24783: a5 = a5 << 0x10\n 24786: s1 = s1 << 0x18\n 24789: a5 = a5 | s1\n 24792: a3 = a3 | a5\n 24795: a3 = a3 << 0x20\n 24798: a2 = a2 | a3\n 24801: a3 = u8 [a0 + 0x9]\n 24804: a4 = u8 [a0 + 0x8]\n 24807: a5 = u8 [a0 + 0xa]\n 24810: s1 = u8 [a0 + 0xb]\n 24813: a3 = a3 << 0x8\n 24816: a3 = a3 | a4\n 24819: a5 = a5 << 0x10\n 24822: s1 = s1 << 0x18\n 24825: a5 = a5 | s1\n 24828: a3 = a3 | a5\n 24831: a4 = u8 [a0 + 0xd]\n 24834: a5 = u8 [a0 + 0xc]\n 24837: s1 = u8 [a0 + 0xe]\n 24840: a1 = u8 [a0 + 0xf]\n 24843: a4 = a4 << 0x8\n 24846: a4 = a4 | a5\n 24849: s1 = s1 << 0x10\n 24852: a1 = a1 << 0x18\n 24855: a1 = a1 | s1\n 24858: a1 = a1 | a4\n 24861: a1 = a1 << 0x20\n 24864: a3 = a3 | a1\n 24867: a1 = u8 [a0 + 0x1]\n 24870: a4 = u8 [a0]\n 24872: a5 = u8 [a0 + 0x2]\n 24875: s1 = u8 [a0 + 0x3]\n 24878: a1 = a1 << 0x8\n 24881: a1 = a1 | a4\n 24884: a5 = a5 << 0x10\n 24887: s1 = s1 << 0x18\n 24890: a5 = a5 | s1\n 24893: a1 = a1 | a5\n 24896: a4 = u8 [a0 + 0x5]\n 24899: a5 = u8 [a0 + 0x4]\n 24902: s1 = u8 [a0 + 0x6]\n 24905: a0 = u8 [a0 + 0x7]\n 24908: a4 = a4 << 0x8\n 24911: a4 = a4 | a5\n 24914: s1 = s1 << 0x10\n 24917: a0 = a0 << 0x18\n 24920: a0 = a0 | s1\n 24923: a0 = a0 | a4\n 24926: a0 = a0 << 0x20\n 24929: a0 = a0 | a1\n 24932: a1 = u64 [sp + 0x88]\n 24936: a4 = reverse a0\n 24938: a0 = reverse a3\n 24940: a3 = reverse a2\n 24942: a2 = u64 [sp + 0x90]\n 24946: a5 = reverse t0\n 24948: i32 s1 = sp + 0x100\n 24952: u64 [sp + 0x40] = s1\n 24955: i32 s1 = sp + 0x120\n 24959: u64 [sp + 0x38] = s1\n 24962: i32 s1 = sp + 0x140\n 24966: u64 [sp + 0x30] = s1\n 24969: u64 [sp + 0x10] = a5\n 24972: u64 [sp + 0x18] = a3\n 24975: u64 [sp + 0xa0] = a3\n 24979: u64 [sp + 0x28] = a0\n 24982: s1 = a0\n 24984: u64 [sp + 0x20] = a4\n 24987: u64 [sp + 0xa8] = a4\n 24991: fallthrough\n      : @371 (gas: 22)\n 24992: u64 [sp + 0x98] = a5\n 24996: u64 [sp + 0x68] = ra\n 24999: u64 [sp + 0x88] = a1\n 25003: u64 [sp + 0x110] = a1\n 25007: a0 = u64 [sp + 0xb8]\n 25011: u64 [sp + 0x108] = a0\n 25015: a0 = u64 [sp + 0xb0]\n 25019: u64 [sp + 0x100] = a0\n 25023: u64 [sp + 0x90] = a2\n 25027: u64 [sp + 0x118] = a2\n 25031: u64 [sp + 312] = 0\n 25035: u64 [sp + 304] = 0\n 25039: u64 [sp + 296] = 0\n 25043: u64 [sp + 288] = 0\n 25047: u32 [sp + 320] = 0x20\n 25052: a2 = 0xffffffffffffffff\n 25055: a0 = 0\n 25057: a1 = u64 [sp + 0x40]\n 25060: a3 = u64 [sp + 0x38]\n 25063: a4 = u64 [sp + 0x30]\n 25066: ecalli 4 // 'get_storage'\n 25068: fallthrough\n      : @372 (gas: 12)\n 25069: a2 = u64 [sp + 0x98]\n 25073: a0 = a2 | s1\n 25076: a1 = u64 [sp + 0xa8]\n 25080: a3 = u64 [sp + 0xa0]\n 25084: a1 = a1 | a3\n 25087: a0 = a0 | a1\n 25090: a0 = a0 >> 0x20\n 25093: u64 [sp + 0x60] = s1\n 25096: a1 = a1 | s1\n 25099: a1 = a1 << 0x20\n 25102: a0 = a0 | a1\n 25105: jump @378 if a0 != 0\n      : @373 (gas: 10)\n 25109: a0 = u64 [sp + 0x138]\n 25113: u64 [sp + 0x58] = a0\n 25116: a0 = u64 [sp + 0x130]\n 25120: u64 [sp + 0x50] = a0\n 25123: a0 = u64 [sp + 0x128]\n 25127: u64 [sp + 0x48] = a0\n 25130: s1 = u64 [sp + 0x120]\n 25134: i32 a0 = a2 + 0\n 25136: a1 = 0x20\n 25139: ra = 336, jump @0\n      : @374 [@dyn 168] (gas: 118)\n 25145: a1 = reverse s1\n 25147: a2 = a1 >> 0x38\n 25150: u8 [a0 + 0x1f] = a2\n 25153: a2 = a1 >> 0x30\n 25156: u8 [a0 + 0x1e] = a2\n 25159: a2 = a1 >> 0x28\n 25162: u8 [a0 + 0x1d] = a2\n 25165: a2 = a1 >> 0x20\n 25168: u8 [a0 + 0x1c] = a2\n 25171: a2 = a1 >> 0x18\n 25174: u8 [a0 + 0x1b] = a2\n 25177: a2 = a1 >> 0x10\n 25180: u8 [a0 + 0x1a] = a2\n 25183: a2 = a1 >> 0x8\n 25186: u8 [a0 + 0x19] = a2\n 25189: u8 [a0 + 0x18] = a1\n 25192: a1 = u64 [sp + 0x48]\n 25195: a1 = reverse a1\n 25197: a2 = a1 >> 0x38\n 25200: u8 [a0 + 0x17] = a2\n 25203: a2 = a1 >> 0x30\n 25206: u8 [a0 + 0x16] = a2\n 25209: a2 = a1 >> 0x28\n 25212: u8 [a0 + 0x15] = a2\n 25215: a2 = a1 >> 0x20\n 25218: u8 [a0 + 0x14] = a2\n 25221: a2 = a1 >> 0x18\n 25224: u8 [a0 + 0x13] = a2\n 25227: a2 = a1 >> 0x10\n 25230: u8 [a0 + 0x12] = a2\n 25233: u8 [a0 + 0x10] = a1\n 25236: a1 = a1 >> 0x8\n 25239: u8 [a0 + 0x11] = a1\n 25242: a1 = u64 [sp + 0x50]\n 25245: a1 = reverse a1\n 25247: a2 = a1 >> 0x38\n 25250: u8 [a0 + 0xf] = a2\n 25253: a2 = a1 >> 0x30\n 25256: u8 [a0 + 0xe] = a2\n 25259: a2 = a1 >> 0x28\n 25262: u8 [a0 + 0xd] = a2\n 25265: a2 = a1 >> 0x20\n 25268: u8 [a0 + 0xc] = a2\n 25271: a2 = a1 >> 0x18\n 25274: u8 [a0 + 0xb] = a2\n 25277: a2 = a1 >> 0x10\n 25280: u8 [a0 + 0xa] = a2\n 25283: a2 = u64 [sp + 0x58]\n 25286: a2 = reverse a2\n 25288: u8 [a0 + 0x8] = a1\n 25291: a1 = a1 >> 0x8\n 25294: u8 [a0 + 0x9] = a1\n 25297: u8 [a0] = a2\n 25299: a1 = a2 >> 0x38\n 25302: u8 [a0 + 0x7] = a1\n 25305: a1 = a2 >> 0x30\n 25308: u8 [a0 + 0x6] = a1\n 25311: a1 = a2 >> 0x28\n 25314: u8 [a0 + 0x5] = a1\n 25317: a1 = a2 >> 0x20\n 25320: u8 [a0 + 0x4] = a1\n 25323: a1 = a2 >> 0x18\n 25326: u8 [a0 + 0x3] = a1\n 25329: a1 = a2 >> 0x10\n 25332: u8 [a0 + 0x2] = a1\n 25335: a2 = a2 >> 0x8\n 25338: u8 [a0 + 0x1] = a2\n 25341: a0 = u64 [sp + 0x98]\n 25345: a1 = a0 + 0x20\n 25348: u64 [sp + 0x58] = a1\n 25351: a2 = a1 <u a0\n 25354: a0 = u64 [sp + 0xa0]\n 25358: t1 = a0 + a2\n 25361: a3 = t1 <u a0\n 25364: a3 = a2 if a2 == 0\n 25367: a0 = u64 [sp + 0x60]\n 25370: t2 = a0 + a3\n 25373: a3 = t2 <u a0\n 25376: a0 = u64 [sp + 0xa8]\n 25380: a0 = a0 + a3\n 25383: u64 [sp + 0xa8] = a0\n 25387: a1 = u64 [sp + 0xb0]\n 25391: a1 = a1 + 0x1\n 25394: a3 = a1 <u 0x1\n 25397: a2 = u64 [sp + 0xb8]\n 25401: a2 = a2 + a3\n 25404: s1 = u64 [sp + 0x70]\n 25407: a3 = s1 <u 0x8\n 25410: s1 = s1 + 0x1\n 25413: a5 = s1 <u 0x1\n 25416: a0 = u64 [sp + 0x78]\n 25419: a3 = 0 if a0 != 0\n 25421: a5 = a5 + a0\n 25424: a4 = s1 | a5\n 25427: a4 = a4 <u 0x1\n 25430: a0 = u64 [sp + 0x80]\n 25434: a4 = a4 + a0\n 25437: t0 = a4 <u a0\n 25440: ra = u64 [sp + 0x68]\n 25443: a0 = a0 | ra\n 25446: ra = ra + t0\n 25449: a3 = 0 if a0 != 0\n 25451: u64 [sp + 0xb8] = a2\n 25455: u64 [sp + 0xb0] = a1\n 25459: a1 = a1 | a2\n 25462: a1 = a1 <u 0x1\n 25465: a0 = u64 [sp + 0x88]\n 25469: a1 = a1 + a0\n 25472: a2 = a1 <u a0\n 25475: a0 = u64 [sp + 0x90]\n 25479: a2 = a2 + a0\n 25482: u64 [sp + 0x70] = s1\n 25485: u64 [sp + 0x78] = a5\n 25488: u64 [sp + 0x80] = a4\n 25492: a5 = u64 [sp + 0x58]\n 25495: u64 [sp + 0xa0] = t1\n 25499: s1 = t2\n 25501: jump @371 if a3 != 0\n      : @375 (gas: 9)\n 25505: a5 = u64 [sp + 0x10]\n 25508: a0 = a5 <u 0xfffffffffffffee0\n 25512: a4 = u64 [sp + 0x18]\n 25515: a0 = 0 if a4 != 0\n 25517: a2 = u64 [sp + 0x28]\n 25520: a3 = u64 [sp + 0x20]\n 25523: a1 = a2 | a3\n 25526: a0 = 0 if a1 != 0\n 25528: jump @379 if a0 == 0\n      : @376 (gas: 14)\n 25532: a0 = a5 + 0x120\n 25536: u64 [sp + 0xb8] = a0\n 25540: s1 = a0 <u a5\n 25543: a0 = a4 + s1\n 25546: u64 [sp + 0xb0] = a0\n 25550: a1 = a0 <u a4\n 25553: a1 = s1 if s1 == 0\n 25556: s1 = a2 + a1\n 25559: a0 = s1 <u a2\n 25562: a0 = a0 + a3\n 25565: u64 [sp + 0xa8] = a0\n 25569: a0 = 0x40\n 25572: a1 = 0x20\n 25575: ra = 338, jump @0\n      : @377 [@dyn 169] (gas: 82)\n 25581: a1 = u64 [sp + 0xa8]\n 25585: a1 = reverse a1\n 25587: a2 = reverse s1\n 25589: a3 = u64 [sp + 0xb0]\n 25593: a3 = reverse a3\n 25595: a4 = u64 [sp + 0xb8]\n 25599: a4 = reverse a4\n 25601: u8 [a0 + 0x18] = a4\n 25604: a5 = a4 >> 0x38\n 25607: u8 [a0 + 0x1f] = a5\n 25610: a5 = a4 >> 0x30\n 25613: u8 [a0 + 0x1e] = a5\n 25616: a5 = a4 >> 0x28\n 25619: u8 [a0 + 0x1d] = a5\n 25622: a5 = a4 >> 0x20\n 25625: u8 [a0 + 0x1c] = a5\n 25628: a5 = a4 >> 0x18\n 25631: u8 [a0 + 0x1b] = a5\n 25634: a5 = a4 >> 0x10\n 25637: u8 [a0 + 0x1a] = a5\n 25640: a4 = a4 >> 0x8\n 25643: u8 [a0 + 0x19] = a4\n 25646: u8 [a0 + 0x10] = a3\n 25649: a4 = a3 >> 0x38\n 25652: u8 [a0 + 0x17] = a4\n 25655: a4 = a3 >> 0x30\n 25658: u8 [a0 + 0x16] = a4\n 25661: a4 = a3 >> 0x28\n 25664: u8 [a0 + 0x15] = a4\n 25667: a4 = a3 >> 0x20\n 25670: u8 [a0 + 0x14] = a4\n 25673: a4 = a3 >> 0x18\n 25676: u8 [a0 + 0x13] = a4\n 25679: a4 = a3 >> 0x10\n 25682: u8 [a0 + 0x12] = a4\n 25685: a3 = a3 >> 0x8\n 25688: u8 [a0 + 0x11] = a3\n 25691: u8 [a0 + 0x8] = a2\n 25694: a3 = a2 >> 0x38\n 25697: u8 [a0 + 0xf] = a3\n 25700: a3 = a2 >> 0x30\n 25703: u8 [a0 + 0xe] = a3\n 25706: a3 = a2 >> 0x28\n 25709: u8 [a0 + 0xd] = a3\n 25712: a3 = a2 >> 0x20\n 25715: u8 [a0 + 0xc] = a3\n 25718: a3 = a2 >> 0x18\n 25721: u8 [a0 + 0xb] = a3\n 25724: a3 = a2 >> 0x10\n 25727: u8 [a0 + 0xa] = a3\n 25730: a2 = a2 >> 0x8\n 25733: u8 [a0 + 0x9] = a2\n 25736: u8 [a0] = a1\n 25738: a2 = a1 >> 0x38\n 25741: u8 [a0 + 0x7] = a2\n 25744: a2 = a1 >> 0x30\n 25747: u8 [a0 + 0x6] = a2\n 25750: a2 = a1 >> 0x28\n 25753: u8 [a0 + 0x5] = a2\n 25756: a2 = a1 >> 0x20\n 25759: u8 [a0 + 0x4] = a2\n 25762: a2 = a1 >> 0x18\n 25765: u8 [a0 + 0x3] = a2\n 25768: a2 = a1 >> 0x10\n 25771: u8 [a0 + 0x2] = a2\n 25774: a1 = a1 >> 0x8\n 25777: u8 [a0 + 0x1] = a1\n 25780: a0 = u64 [sp + 0x8]\n 25783: a1 = u64 [sp + 0x10]\n 25786: u64 [a0] = a1\n 25788: a1 = u64 [sp + 0x20]\n 25791: u64 [a0 + 0x18] = a1\n 25794: a1 = u64 [sp + 0x18]\n 25797: u64 [a0 + 0x8] = a1\n 25800: a1 = u64 [sp + 0x28]\n 25803: u64 [a0 + 0x10] = a1\n 25806: sp = s0 + 0xfffffffffffffea0\n 25810: ra = u64 [sp + 0x158]\n 25814: s0 = u64 [sp + 0x150]\n 25818: s1 = u64 [sp + 0x148]\n 25822: sp = sp + 0x160\n 25826: ret\n      : @378 (gas: 1)\n 25828: trap\n      : @379 (gas: 8)\n 25829: u64 [sp + 240] = 0\n 25833: u64 [sp + 232] = 0\n 25837: u64 [sp + 224] = 0\n 25841: a0 = 0x4e487b7100000000\n 25851: a1 = sp + 0xe0\n 25855: u64 [sp + 0xf8] = a0\n 25859: a0 = 0\n 25861: ra = 340, jump @8\n      : @380 [@dyn 170] (gas: 7)\n 25867: u64 [sp + 216] = 0\n 25871: u64 [sp + 208] = 0\n 25875: u64 [sp + 192] = 0x41\n 25880: a0 = 0x4\n 25883: a1 = sp + 0xc0\n 25887: u64 [sp + 200] = 0\n 25891: ra = 342, jump @8\n      : @381 [@dyn 171] (gas: 3)\n 25897: a1 = 0x24\n 25900: a0 = 0\n 25902: ra = 344, jump @0\n      : @382 [@dyn 172] (gas: 6)\n 25908: i32 a1 = a0 + 0\n 25910: a0 = 0x1\n 25913: a2 = 0x24\n 25916: ra = 0x15a\n 25920: ecalli 6 // 'seal_return'\n 25922: fallthrough\n      : @383 [@dyn 173] (gas: 18)\n 25923: sp = sp + 0xffffffffffffffa0\n 25926: u64 [sp + 0x58] = ra\n 25929: u64 [sp + 0x50] = s0\n 25932: u64 [sp + 0x48] = s1\n 25935: s0 = sp + 0x60\n 25938: sp = sp & 0xfffffffffffffff0\n 25941: a2 = u64 [a1]\n 25943: a3 = u64 [a1 + 0x8]\n 25946: a4 = u64 [a1 + 0x10]\n 25949: a1 = u64 [a1 + 0x18]\n 25952: s1 = a0\n 25954: u64 [sp + 0x18] = a1\n 25957: u64 [sp + 0x10] = a4\n 25960: u64 [sp + 0x8] = a3\n 25963: a0 = sp + 0x20\n 25966: a1 = sp\n 25968: u64 [sp] = a2\n 25970: ra = 348, jump @369\n      : @384 [@dyn 174] (gas: 14)\n 25976: a0 = u64 [sp + 0x30]\n 25979: a1 = u64 [sp + 0x38]\n 25982: a2 = u64 [sp + 0x20]\n 25985: a3 = u64 [sp + 0x28]\n 25988: u64 [s1 + 0x10] = a0\n 25991: u64 [s1 + 0x18] = a1\n 25994: u64 [s1] = a2\n 25996: u64 [s1 + 0x8] = a3\n 25999: sp = s0 + 0xffffffffffffffa0\n 26002: ra = u64 [sp + 0x58]\n 26005: s0 = u64 [sp + 0x50]\n 26008: s1 = u64 [sp + 0x48]\n 26011: sp = sp + 0x60\n 26014: ret\n      : @385 [@dyn 175] (gas: 12)\n 26016: a1 = u64 [sp + 0x98]\n 26020: a2 = u64 [sp + 0x90]\n 26024: a3 = u64 [sp + 0x88]\n 26028: a0 = u64 [sp + 0x80]\n 26032: a1 = a1 | a3\n 26035: a3 = a0 | a2\n 26038: a3 = a3 | a1\n 26041: a3 = a3 >> 0x20\n 26044: a1 = a1 | a2\n 26047: a1 = a1 << 0x20\n 26050: a1 = a1 | a3\n 26053: jump @392 if a1 != 0\n      : @386 (gas: 4)\n 26057: s1 = i32 [0x20004]\n 26062: i32 a0 = a0 + 0\n 26064: a1 = 0x120\n 26068: ra = 352, jump @0\n      : @387 [@dyn 176] (gas: 10)\n 26074: i32 a0 = a0 + 0\n 26076: a1 = 0x120\n 26080: a2 = s1\n 26082: ecalli 0 // 'call_data_copy'\n 26083: a0 = u64 [sp]\n 26085: a0 = a0 << 0x20\n 26088: s1 = a0 >> 0x20\n 26091: a1 = 0x20\n 26094: a0 = 0\n 26096: ra = 354, jump @0\n      : @388 [@dyn 177] (gas: 58)\n 26102: a1 = reverse s1\n 26104: a2 = u64 [sp + 0x8]\n 26107: a2 = reverse a2\n 26109: a3 = u64 [sp + 0x10]\n 26112: a3 = reverse a3\n 26114: a4 = a3 >> 0x38\n 26117: u8 [a0 + 0x1f] = a4\n 26120: a4 = a3 >> 0x30\n 26123: u8 [a0 + 0x1e] = a4\n 26126: a4 = a3 >> 0x28\n 26129: u8 [a0 + 0x1d] = a4\n 26132: a4 = a3 >> 0x20\n 26135: u8 [a0 + 0x1c] = a4\n 26138: a4 = a3 >> 0x18\n 26141: u8 [a0 + 0x1b] = a4\n 26144: a4 = a3 >> 0x10\n 26147: u8 [a0 + 0x1a] = a4\n 26150: a4 = a3 >> 0x8\n 26153: u8 [a0 + 0x19] = a4\n 26156: u8 [a0 + 0x18] = a3\n 26159: a3 = a2 >> 0x38\n 26162: u8 [a0 + 0x17] = a3\n 26165: a3 = a2 >> 0x30\n 26168: u8 [a0 + 0x16] = a3\n 26171: a3 = a2 >> 0x28\n 26174: u8 [a0 + 0x15] = a3\n 26177: a3 = a2 >> 0x20\n 26180: u8 [a0 + 0x14] = a3\n 26183: a3 = a2 >> 0x18\n 26186: u8 [a0 + 0x13] = a3\n 26189: a3 = a2 >> 0x10\n 26192: u8 [a0 + 0x12] = a3\n 26195: a3 = a2 >> 0x8\n 26198: u8 [a0 + 0x11] = a3\n 26201: u8 [a0 + 0x10] = a2\n 26204: a2 = a1 >> 0x38\n 26207: u8 [a0 + 0xf] = a2\n 26210: a2 = a1 >> 0x30\n 26213: u8 [a0 + 0xe] = a2\n 26216: a2 = a1 >> 0x28\n 26219: u8 [a0 + 0xd] = a2\n 26222: a2 = a1 >> 0x20\n 26225: u8 [a0 + 0xc] = a2\n 26228: u8 [a0 + 11] = 0\n 26231: u8 [a0 + 10] = 0\n 26234: u8 [a0 + 9] = 0\n 26237: u8 [a0 + 0x8] = a1\n 26240: u8 [a0 + 7] = 0\n 26243: u8 [a0 + 6] = 0\n 26246: u8 [a0 + 5] = 0\n 26249: u8 [a0 + 4] = 0\n 26252: u8 [a0 + 3] = 0\n 26255: u8 [a0 + 2] = 0\n 26258: u8 [a0 + 1] = 0\n 26261: u8 [a0 + 0] = 0\n 26263: a0 = 0x20\n 26266: a1 = 0x20\n 26269: ra = 356, jump @0\n      : @389 [@dyn 178] (gas: 35)\n 26275: u8 [a0 + 31] = 0\n 26278: u8 [a0 + 30] = 0\n 26281: u8 [a0 + 29] = 0\n 26284: u8 [a0 + 28] = 0\n 26287: u8 [a0 + 27] = 0\n 26290: u8 [a0 + 26] = 0\n 26293: u8 [a0 + 25] = 0\n 26296: u8 [a0 + 24] = 0\n 26299: u8 [a0 + 23] = 0\n 26302: u8 [a0 + 22] = 0\n 26305: u8 [a0 + 21] = 0\n 26308: u8 [a0 + 20] = 0\n 26311: u8 [a0 + 19] = 0\n 26314: u8 [a0 + 18] = 0\n 26317: u8 [a0 + 17] = 0\n 26320: u8 [a0 + 16] = 0\n 26323: u8 [a0 + 15] = 0\n 26326: u8 [a0 + 14] = 0\n 26329: u8 [a0 + 13] = 0\n 26332: u8 [a0 + 12] = 0\n 26335: u8 [a0 + 11] = 0\n 26338: u8 [a0 + 10] = 0\n 26341: u8 [a0 + 9] = 0\n 26344: u8 [a0 + 8] = 0\n 26347: u8 [a0 + 7] = 0\n 26350: u8 [a0 + 6] = 0\n 26353: u8 [a0 + 5] = 0\n 26356: u8 [a0 + 4] = 0\n 26359: u8 [a0 + 3] = 0\n 26362: u8 [a0 + 2] = 0\n 26365: u8 [a0 + 1] = 0\n 26368: u8 [a0 + 0] = 0\n 26370: a1 = 0x40\n 26373: a0 = 0\n 26375: ra = 358, jump @0\n      : @390 [@dyn 179] (gas: 19)\n 26381: i32 a0 = a0 + 0\n 26383: i32 a2 = sp + 0xa0\n 26387: a1 = 0x40\n 26390: ecalli 5 // 'hash_keccak_256'\n 26392: a0 = u64 [sp + 0xb8]\n 26396: a1 = u64 [sp + 0xb0]\n 26400: a2 = u64 [sp + 0xa8]\n 26404: a3 = u64 [sp + 0xa0]\n 26408: a4 = reverse a0\n 26410: a0 = reverse a1\n 26412: a1 = reverse a2\n 26414: a2 = reverse a3\n 26416: u64 [sp + 0x38] = a2\n 26419: u64 [sp + 0x30] = a1\n 26422: u64 [sp + 0x28] = a0\n 26425: a0 = sp + 0x40\n 26428: a1 = sp + 0x20\n 26431: u64 [sp + 0x20] = a4\n 26434: ra = 360, jump @369\n      : @391 [@dyn 180] (gas: 15)\n 26440: a0 = u64 [sp + 0x50]\n 26443: a1 = u64 [sp + 0x58]\n 26446: a2 = u64 [sp + 0x40]\n 26449: a3 = u64 [sp + 0x48]\n 26452: a4 = u64 [sp + 0x18]\n 26455: u64 [a4 + 0x10] = a0\n 26458: u64 [a4 + 0x18] = a1\n 26461: u64 [a4] = a2\n 26463: u64 [a4 + 0x8] = a3\n 26466: sp = s0 + 0xffffffffffffff20\n 26470: ra = u64 [sp + 0xd8]\n 26474: s0 = u64 [sp + 0xd0]\n 26478: s1 = u64 [sp + 0xc8]\n 26482: sp = sp + 0xe0\n 26486: ret\n      : @392 (gas: 1)\n 26488: trap\n      : @393 (gas: 55)\n 26489: sp = sp + 0xfffffffffffffea0\n 26493: u64 [sp + 0x158] = ra\n 26497: u64 [sp + 0x150] = s0\n 26501: u64 [sp + 0x148] = s1\n 26505: s0 = sp + 0x160\n 26509: sp = sp & 0xffffffffffffffe0\n 26512: a2 = u64 [a1 + 0x18]\n 26515: u64 [sp + 0x40] = a2\n 26518: a2 = u64 [a1 + 0x10]\n 26521: u64 [sp + 0x38] = a2\n 26524: a2 = u64 [a1 + 0x8]\n 26527: u64 [sp + 0x28] = a2\n 26530: a1 = u64 [a1]\n 26532: u64 [sp + 0x18] = a1\n 26535: a1 = u64 [a0 + 0x18]\n 26538: u64 [sp + 0x48] = a1\n 26541: a1 = u64 [a0 + 0x10]\n 26544: u64 [sp + 0x30] = a1\n 26547: a1 = u64 [a0 + 0x8]\n 26550: u64 [sp + 0x20] = a1\n 26553: a0 = u64 [a0]\n 26555: u64 [sp + 0x10] = a0\n 26558: i32 a0 = sp + 0xe0\n 26562: ecalli 3 // 'caller'\n 26564: a0 = u64 [sp + 0xe8]\n 26568: a1 = u64 [sp + 0xe0]\n 26572: a2 = i32 [sp + 0xf0]\n 26576: a0 = reverse a0\n 26578: a3 = a0 >> 0x20\n 26581: s1 = reverse a1\n 26583: a1 = s1 << 0x20\n 26586: a1 = a1 | a3\n 26589: u64 [sp + 0x58] = a1\n 26592: a0 = a0 << 0x20\n 26595: a1 = reverse a2\n 26597: a1 = a1 >> 0x20\n 26600: a0 = a0 | a1\n 26603: u64 [sp + 0x50] = a0\n 26606: s1 = s1 >> 0x20\n 26609: u64 [sp + 280] = 0\n 26613: u64 [sp + 272] = 0\n 26617: u64 [sp + 264] = 0\n 26621: u64 [sp + 256] = 0x1\n 26626: u64 [sp + 312] = 0\n 26630: u64 [sp + 304] = 0\n 26634: u64 [sp + 296] = 0\n 26638: u64 [sp + 288] = 0\n 26642: u32 [sp + 320] = 0x20\n 26647: i32 a1 = sp + 0x100\n 26651: i32 a3 = sp + 0x120\n 26655: i32 a4 = sp + 0x140\n 26659: a2 = 0xffffffffffffffff\n 26662: a0 = 0\n 26664: ecalli 4 // 'get_storage'\n 26666: fallthrough\n      : @394 (gas: 11)\n 26667: a0 = u32 [sp + 0x130]\n 26671: a1 = u64 [sp + 0x120]\n 26675: a2 = u64 [sp + 0x128]\n 26679: a0 = a0 ^ s1\n 26682: a3 = u64 [sp + 0x50]\n 26685: a1 = a1 ^ a3\n 26688: a0 = a0 | a1\n 26691: a1 = u64 [sp + 0x58]\n 26694: a1 = a1 ^ a2\n 26697: a0 = a0 | a1\n 26700: jump @397 if a0 != 0\n      : @395 (gas: 19)\n 26703: a0 = u64 [sp + 0x18]\n 26706: u64 [sp + 0x60] = a0\n 26709: a0 = u64 [sp + 0x10]\n 26712: u64 [sp + 0x80] = a0\n 26716: a0 = u64 [sp + 0x28]\n 26719: u64 [sp + 0x68] = a0\n 26722: a0 = u64 [sp + 0x20]\n 26725: u64 [sp + 0x88] = a0\n 26729: a0 = u64 [sp + 0x38]\n 26732: u64 [sp + 0x70] = a0\n 26735: a0 = u64 [sp + 0x30]\n 26738: u64 [sp + 0x90] = a0\n 26742: a0 = u64 [sp + 0x40]\n 26745: u64 [sp + 0x78] = a0\n 26748: a0 = sp + 0x80\n 26752: a1 = sp + 0x60\n 26755: a2 = u64 [sp + 0x48]\n 26758: u64 [sp + 0x98] = a2\n 26762: ra = 362, jump @417\n      : @396 [@dyn 181] (gas: 6)\n 26768: sp = s0 + 0xfffffffffffffea0\n 26772: ra = u64 [sp + 0x158]\n 26776: s0 = u64 [sp + 0x150]\n 26780: s1 = u64 [sp + 0x148]\n 26784: sp = sp + 0x160\n 26788: ret\n      : @397 (gas: 3)\n 26790: a0 = 0x40\n 26793: a1 = 0x20\n 26796: ra = 364, jump @0\n      : @398 [@dyn 182] (gas: 103)\n 26802: a1 = u8 [a0 + 0x11]\n 26805: a2 = u8 [a0 + 0x10]\n 26808: a3 = u8 [a0 + 0x12]\n 26811: a4 = u8 [a0 + 0x13]\n 26814: a1 = a1 << 0x8\n 26817: a1 = a1 | a2\n 26820: a3 = a3 << 0x10\n 26823: a4 = a4 << 0x18\n 26826: a3 = a3 | a4\n 26829: a1 = a1 | a3\n 26832: a2 = u8 [a0 + 0x15]\n 26835: a3 = u8 [a0 + 0x14]\n 26838: a4 = u8 [a0 + 0x16]\n 26841: a5 = u8 [a0 + 0x17]\n 26844: a2 = a2 << 0x8\n 26847: a2 = a2 | a3\n 26850: a4 = a4 << 0x10\n 26853: a5 = a5 << 0x18\n 26856: a4 = a4 | a5\n 26859: a2 = a2 | a4\n 26862: a2 = a2 << 0x20\n 26865: t0 = a2 | a1\n 26868: a2 = u8 [a0 + 0x1]\n 26871: a3 = u8 [a0]\n 26873: a4 = u8 [a0 + 0x2]\n 26876: a5 = u8 [a0 + 0x3]\n 26879: a2 = a2 << 0x8\n 26882: a2 = a2 | a3\n 26885: a4 = a4 << 0x10\n 26888: a5 = a5 << 0x18\n 26891: a4 = a4 | a5\n 26894: a2 = a2 | a4\n 26897: a3 = u8 [a0 + 0x5]\n 26900: a4 = u8 [a0 + 0x4]\n 26903: a5 = u8 [a0 + 0x6]\n 26906: s1 = u8 [a0 + 0x7]\n 26909: a3 = a3 << 0x8\n 26912: a3 = a3 | a4\n 26915: a5 = a5 << 0x10\n 26918: s1 = s1 << 0x18\n 26921: a5 = a5 | s1\n 26924: a3 = a3 | a5\n 26927: a3 = a3 << 0x20\n 26930: a2 = a2 | a3\n 26933: a3 = u8 [a0 + 0x19]\n 26936: a4 = u8 [a0 + 0x18]\n 26939: a5 = u8 [a0 + 0x1a]\n 26942: s1 = u8 [a0 + 0x1b]\n 26945: a3 = a3 << 0x8\n 26948: a3 = a3 | a4\n 26951: a5 = a5 << 0x10\n 26954: s1 = s1 << 0x18\n 26957: a5 = a5 | s1\n 26960: a3 = a3 | a5\n 26963: a4 = u8 [a0 + 0x1d]\n 26966: a5 = u8 [a0 + 0x1c]\n 26969: s1 = u8 [a0 + 0x1e]\n 26972: a1 = u8 [a0 + 0x1f]\n 26975: a4 = a4 << 0x8\n 26978: a4 = a4 | a5\n 26981: s1 = s1 << 0x10\n 26984: a1 = a1 << 0x18\n 26987: a1 = a1 | s1\n 26990: a1 = a1 | a4\n 26993: a1 = a1 << 0x20\n 26996: a3 = a3 | a1\n 26999: a1 = u8 [a0 + 0x9]\n 27002: a4 = u8 [a0 + 0x8]\n 27005: a5 = u8 [a0 + 0xa]\n 27008: s1 = u8 [a0 + 0xb]\n 27011: a1 = a1 << 0x8\n 27014: a1 = a1 | a4\n 27017: a5 = a5 << 0x10\n 27020: s1 = s1 << 0x18\n 27023: a5 = a5 | s1\n 27026: a1 = a1 | a5\n 27029: a4 = u8 [a0 + 0xd]\n 27032: a5 = u8 [a0 + 0xc]\n 27035: s1 = u8 [a0 + 0xe]\n 27038: a0 = u8 [a0 + 0xf]\n 27041: a4 = a4 << 0x8\n 27044: a4 = a4 | a5\n 27047: s1 = s1 << 0x10\n 27050: a0 = a0 << 0x18\n 27053: a0 = a0 | s1\n 27056: a0 = a0 | a4\n 27059: a0 = a0 << 0x20\n 27062: a0 = a0 | a1\n 27065: s1 = reverse a0\n 27067: a1 = reverse a3\n 27069: a2 = reverse a2\n 27071: a0 = reverse t0\n 27073: u64 [sp + 0x58] = a0\n 27076: u64 [sp + 0x50] = a2\n 27079: a0 = a0 | a2\n 27082: a2 = a1\n 27084: a1 = a1 | s1\n 27087: a1 = a1 | a0\n 27090: a1 = a1 >> 0x20\n 27093: a0 = a0 | s1\n 27096: a0 = a0 << 0x20\n 27099: a0 = a0 | a1\n 27102: jump @402 if a0 != 0\n      : @399 (gas: 5)\n 27106: u64 [sp + 0x48] = a2\n 27109: i32 a0 = a2 + 0\n 27111: a1 = 0x20\n 27114: u64 [sp + 0x40] = a0\n 27117: ra = 366, jump @0\n      : @400 [@dyn 183] (gas: 50)\n 27123: u8 [a0 + 31] = 0\n 27126: u8 [a0 + 30] = 0\n 27129: u8 [a0 + 29] = 0\n 27132: u8 [a0 + 28] = 0\n 27135: u8 [a0 + 27] = 0\n 27138: u8 [a0 + 26] = 0\n 27141: u8 [a0 + 25] = 0\n 27144: u8 [a0 + 24] = 0\n 27147: u8 [a0 + 23] = 0\n 27150: u8 [a0 + 22] = 0\n 27153: u8 [a0 + 21] = 0\n 27156: u8 [a0 + 20] = 0\n 27159: u8 [a0 + 19] = 0\n 27162: u8 [a0 + 18] = 0\n 27165: u8 [a0 + 17] = 0\n 27168: u8 [a0 + 16] = 0\n 27171: u8 [a0 + 15] = 0\n 27174: u8 [a0 + 14] = 0\n 27177: u8 [a0 + 13] = 0\n 27180: u8 [a0 + 12] = 0\n 27183: u8 [a0 + 11] = 0\n 27186: u8 [a0 + 10] = 0\n 27189: u8 [a0 + 9] = 0\n 27192: u8 [a0 + 8] = 0\n 27195: u8 [a0 + 7] = 0\n 27198: u8 [a0 + 6] = 0\n 27201: u8 [a0 + 5] = 0\n 27204: u8 [a0 + 4] = 0\n 27207: u8 [a0 + 3] = 0xa0\n 27212: u8 [a0 + 2] = 0x79\n 27216: u8 [a0 + 1] = 0xc3\n 27221: u8 [a0 + 0] = 0x8\n 27224: a1 = u64 [sp + 0x48]\n 27227: a0 = a1 + 0x4\n 27230: a1 = a0 <u a1\n 27233: a3 = u64 [sp + 0x58]\n 27236: a2 = a3 + a1\n 27239: a3 = a2 <u a3\n 27242: a3 = a1 if a1 == 0\n 27245: a3 = a3 + s1\n 27248: a1 = a3 <u s1\n 27251: a4 = u64 [sp + 0x50]\n 27254: a4 = a4 + a1\n 27257: u64 [sp + 0xa8] = a2\n 27261: u64 [sp + 0xa0] = a0\n 27265: u64 [sp + 0xb0] = a3\n 27269: a0 = sp + 0xc0\n 27273: a1 = sp + 0xa0\n 27277: u64 [sp + 0xb8] = a4\n 27281: ra = 368, jump @266\n      : @401 [@dyn 184] (gas: 30)\n 27287: a0 = u64 [sp + 0xc8]\n 27291: t0 = u64 [sp + 0xd8]\n 27295: t1 = u64 [sp + 0xc0]\n 27299: a3 = u64 [sp + 0xd0]\n 27303: a1 = u64 [sp + 0x58]\n 27306: a4 = a0 ^ a1\n 27309: a5 = a0 <u a1\n 27312: t2 = a1\n 27314: a2 = u64 [sp + 0x48]\n 27317: a1 = t1 <u a2\n 27320: a5 = a1 if a4 == 0\n 27323: a4 = a3 - s1\n 27326: a3 = a3 <u s1\n 27329: s1 = u64 [sp + 0x50]\n 27332: s1 = t0 - s1\n 27335: s1 = s1 - a3\n 27338: a3 = a4 <u a5\n 27341: s1 = s1 - a3\n 27344: a4 = a4 - a5\n 27347: a0 = a0 - t2\n 27350: a1 = a0 - a1\n 27353: a0 = t1 - a2\n 27356: a1 = a1 | s1\n 27359: a2 = a0 | a4\n 27362: a2 = a2 | a1\n 27365: a1 = a1 | a4\n 27368: a2 = a2 >> 0x20\n 27371: a1 = a1 << 0x20\n 27374: a1 = a1 | a2\n 27377: jump @403 if a1 == 0\n      : @402 (gas: 1)\n 27380: trap\n      : @403 (gas: 4)\n 27381: i32 s1 = a0 + 0\n 27383: a0 = u64 [sp + 0x40]\n 27386: a1 = s1\n 27388: ra = 370, jump @0\n      : @404 [@dyn 185] (gas: 6)\n 27394: i32 a1 = a0 + 0\n 27396: a0 = 0x1\n 27399: a2 = s1\n 27401: ra = 0x174\n 27405: ecalli 6 // 'seal_return'\n 27407: fallthrough\n      : @405 [@dyn 186] (gas: 12)\n 27408: a1 = u64 [a0 + 0x10]\n 27411: a2 = u64 [a0 + 0x18]\n 27414: a3 = u64 [a0 + 0x8]\n 27417: a0 = u64 [a0]\n 27419: a2 = a2 | a3\n 27422: a3 = a0 | a1\n 27425: a3 = a3 | a2\n 27428: a3 = a3 >> 0x20\n 27431: a1 = a1 | a2\n 27434: a1 = a1 << 0x20\n 27437: a1 = a1 | a3\n 27440: jump @408 if a1 != 0\n      : @406 (gas: 7)\n 27444: sp = sp + 0xfffffffffffffff0\n 27447: u64 [sp + 0x8] = ra\n 27450: u64 [sp] = s0\n 27452: i32 a0 = a0 + 0\n 27454: a1 = 0x20\n 27457: s0 = 0x20\n 27460: ra = 374, jump @0\n      : @407 [@dyn 187] (gas: 38)\n 27466: u8 [a0 + 31] = 0\n 27469: u8 [a0 + 30] = 0\n 27472: u8 [a0 + 29] = 0\n 27475: u8 [a0 + 28] = 0\n 27478: u8 [a0 + 27] = 0\n 27481: u8 [a0 + 26] = 0\n 27484: u8 [a0 + 25] = 0\n 27487: u8 [a0 + 24] = 0\n 27490: u8 [a0 + 23] = 0\n 27493: u8 [a0 + 22] = 0\n 27496: u8 [a0 + 21] = 0\n 27499: u8 [a0 + 20] = 0\n 27502: u8 [a0 + 19] = 0\n 27505: u8 [a0 + 18] = 0\n 27508: u8 [a0 + 17] = 0\n 27511: u8 [a0 + 16] = 0\n 27514: u8 [a0 + 15] = 0\n 27517: u8 [a0 + 14] = 0x73\n 27521: u8 [a0 + 13] = 0x73\n 27525: u8 [a0 + 12] = 0x65\n 27529: u8 [a0 + 11] = 0x72\n 27533: u8 [a0 + 10] = 0x64\n 27537: u8 [a0 + 9] = 0x64\n 27541: a2 = 0x61\n 27544: u8 [a0 + 0x8] = a2\n 27547: u8 [a0 + 0x7] = s0\n 27550: u8 [a0 + 6] = 0x64\n 27554: u8 [a0 + 5] = 0x69\n 27558: u8 [a0 + 4] = 0x6c\n 27562: u8 [a0 + 0x3] = a2\n 27565: u8 [a0 + 2] = 0x76\n 27569: u8 [a0 + 1] = 0x6e\n 27573: a1 = 0x49\n 27576: u8 [a0] = a1\n 27578: ra = u64 [sp + 0x8]\n 27581: s0 = u64 [sp]\n 27583: sp = sp + 0x10\n 27586: ret\n      : @408 (gas: 1)\n 27588: trap\n      : @409 (gas: 17)\n 27589: sp = sp + 0xffffffffffffffa0\n 27592: u64 [sp + 0x58] = ra\n 27595: u64 [sp + 0x50] = s0\n 27598: u64 [sp + 0x48] = s1\n 27601: a3 = u64 [a1 + 0x18]\n 27604: a4 = u64 [a1 + 0x10]\n 27607: a5 = u64 [a1 + 0x8]\n 27610: s1 = u64 [a1]\n 27612: a1 = a5 | a3\n 27615: a2 = s1 | a4\n 27618: a2 = a2 | a1\n 27621: a2 = a2 >> 0x20\n 27624: a1 = a1 | a4\n 27627: a1 = a1 << 0x20\n 27630: a1 = a1 | a2\n 27633: u64 [sp + 0x28] = a0\n 27636: jump @416 if a1 != 0\n      : @410 (gas: 19)\n 27640: a0 = s1 + 0x20\n 27643: u64 [sp + 0x30] = a0\n 27646: a0 = a0 <u s1\n 27649: a1 = a5 + a0\n 27652: u64 [sp + 0x40] = a1\n 27655: u64 [sp + 0x8] = a5\n 27658: s0 = a1 <u a5\n 27661: s0 = a0 if a0 == 0\n 27664: s0 = s0 + a4\n 27667: u64 [sp + 0x10] = a4\n 27670: a0 = s0 <u a4\n 27673: u64 [sp + 0x18] = a3\n 27676: a0 = a0 + a3\n 27679: u64 [sp + 0x38] = a0\n 27682: u64 [sp] = s1\n 27684: i32 a0 = s1 + 0\n 27686: a1 = 0x20\n 27689: s1 = 0x20\n 27692: ra = 376, jump @0\n      : @411 [@dyn 188] (gas: 45)\n 27698: u8 [a0 + 0x1f] = s1\n 27701: a1 = u64 [sp + 0x30]\n 27704: s1 = a1\n 27706: a1 = a1 | s0\n 27709: a2 = u64 [sp + 0x40]\n 27712: a4 = u64 [sp + 0x38]\n 27715: a2 = a2 | a4\n 27718: a1 = a1 | a2\n 27721: a1 = a1 >> 0x20\n 27724: u64 [sp + 0x20] = s0\n 27727: a2 = a2 | s0\n 27730: a2 = a2 << 0x20\n 27733: a1 = a1 | a2\n 27736: u8 [a0 + 30] = 0\n 27739: u8 [a0 + 29] = 0\n 27742: u8 [a0 + 28] = 0\n 27745: u8 [a0 + 27] = 0\n 27748: u8 [a0 + 26] = 0\n 27751: u8 [a0 + 25] = 0\n 27754: u8 [a0 + 24] = 0\n 27757: u8 [a0 + 23] = 0\n 27760: u8 [a0 + 22] = 0\n 27763: u8 [a0 + 21] = 0\n 27766: u8 [a0 + 20] = 0\n 27769: u8 [a0 + 19] = 0\n 27772: u8 [a0 + 18] = 0\n 27775: u8 [a0 + 17] = 0\n 27778: u8 [a0 + 16] = 0\n 27781: u8 [a0 + 15] = 0\n 27784: u8 [a0 + 14] = 0\n 27787: u8 [a0 + 13] = 0\n 27790: u8 [a0 + 12] = 0\n 27793: u8 [a0 + 11] = 0\n 27796: u8 [a0 + 10] = 0\n 27799: u8 [a0 + 9] = 0\n 27802: u8 [a0 + 8] = 0\n 27805: u8 [a0 + 7] = 0\n 27808: u8 [a0 + 6] = 0\n 27811: u8 [a0 + 5] = 0\n 27814: u8 [a0 + 4] = 0\n 27817: u8 [a0 + 3] = 0\n 27820: u8 [a0 + 2] = 0\n 27823: u8 [a0 + 1] = 0\n 27826: u8 [a0 + 0] = 0\n 27828: jump @416 if a1 != 0\n      : @412 (gas: 4)\n 27832: i32 s0 = s1 + 0\n 27834: a1 = 0x20\n 27837: a0 = s0\n 27839: ra = 378, jump @0\n      : @413 [@dyn 189] (gas: 41)\n 27845: u8 [a0 + 31] = 0xf\n 27849: u8 [a0 + 30] = 0\n 27852: u8 [a0 + 29] = 0\n 27855: u8 [a0 + 28] = 0\n 27858: u8 [a0 + 27] = 0\n 27861: u8 [a0 + 26] = 0\n 27864: u8 [a0 + 25] = 0\n 27867: u8 [a0 + 24] = 0\n 27870: u8 [a0 + 23] = 0\n 27873: u8 [a0 + 22] = 0\n 27876: u8 [a0 + 21] = 0\n 27879: u8 [a0 + 20] = 0\n 27882: u8 [a0 + 19] = 0\n 27885: u8 [a0 + 18] = 0\n 27888: u8 [a0 + 17] = 0\n 27891: u8 [a0 + 16] = 0\n 27894: u8 [a0 + 15] = 0\n 27897: u8 [a0 + 14] = 0\n 27900: u8 [a0 + 13] = 0\n 27903: u8 [a0 + 12] = 0\n 27906: u8 [a0 + 11] = 0\n 27909: u8 [a0 + 10] = 0\n 27912: u8 [a0 + 9] = 0\n 27915: u8 [a0 + 8] = 0\n 27918: u8 [a0 + 7] = 0\n 27921: u8 [a0 + 6] = 0\n 27924: u8 [a0 + 5] = 0\n 27927: u8 [a0 + 4] = 0\n 27930: u8 [a0 + 3] = 0\n 27933: u8 [a0 + 2] = 0\n 27936: u8 [a0 + 1] = 0\n 27939: a1 = u64 [sp + 0x20]\n 27942: a2 = u64 [sp + 0x38]\n 27945: a1 = a1 | a2\n 27948: a2 = 0xffffffe0\n 27958: a2 = s1 <u a2\n 27961: a3 = u64 [sp + 0x40]\n 27964: a2 = 0 if a3 != 0\n 27966: a2 = 0 if a1 != 0\n 27968: u8 [a0 + 0] = 0\n 27970: jump @416 if a2 == 0\n      : @414 (gas: 3)\n 27974: i32 a0 = s0 + 0x20\n 27977: a1 = 0x20\n 27980: ra = 380, jump @0\n      : @415 [@dyn 190] (gas: 54)\n 27986: u8 [a0 + 31] = 0\n 27989: u8 [a0 + 30] = 0\n 27992: u8 [a0 + 29] = 0\n 27995: u8 [a0 + 28] = 0\n 27998: u8 [a0 + 27] = 0\n 28001: u8 [a0 + 26] = 0\n 28004: u8 [a0 + 25] = 0\n 28007: u8 [a0 + 24] = 0\n 28010: u8 [a0 + 23] = 0\n 28013: u8 [a0 + 22] = 0\n 28016: u8 [a0 + 21] = 0\n 28019: u8 [a0 + 20] = 0\n 28022: u8 [a0 + 19] = 0\n 28025: u8 [a0 + 18] = 0\n 28028: u8 [a0 + 17] = 0\n 28031: u8 [a0 + 16] = 0\n 28034: u8 [a0 + 15] = 0\n 28037: u8 [a0 + 14] = 0x73\n 28041: u8 [a0 + 13] = 0x73\n 28045: u8 [a0 + 12] = 0x65\n 28049: u8 [a0 + 11] = 0x72\n 28053: u8 [a0 + 10] = 0x64\n 28057: u8 [a0 + 9] = 0x64\n 28061: u8 [a0 + 8] = 0x61\n 28065: u8 [a0 + 7] = 0x20\n 28069: u8 [a0 + 6] = 0x64\n 28073: u8 [a0 + 5] = 0x69\n 28077: u8 [a0 + 4] = 0x6c\n 28081: u8 [a0 + 3] = 0x61\n 28085: u8 [a0 + 2] = 0x76\n 28089: u8 [a0 + 1] = 0x6e\n 28093: u8 [a0 + 0] = 0x49\n 28096: a1 = u64 [sp]\n 28098: a0 = a1 + 0x60\n 28101: a1 = a0 <u a1\n 28104: a3 = u64 [sp + 0x8]\n 28107: a2 = a3 + a1\n 28110: a3 = a2 <u a3\n 28113: a3 = a1 if a1 == 0\n 28116: a1 = u64 [sp + 0x10]\n 28119: a3 = a3 + a1\n 28122: a1 = a3 <u a1\n 28125: a4 = u64 [sp + 0x18]\n 28128: a1 = a1 + a4\n 28131: a4 = u64 [sp + 0x28]\n 28134: u64 [a4] = a0\n 28136: u64 [a4 + 0x8] = a2\n 28139: u64 [a4 + 0x10] = a3\n 28142: u64 [a4 + 0x18] = a1\n 28145: ra = u64 [sp + 0x58]\n 28148: s0 = u64 [sp + 0x50]\n 28151: s1 = u64 [sp + 0x48]\n 28154: sp = sp + 0x60\n 28157: ret\n      : @416 (gas: 1)\n 28159: trap\n      : @417 (gas: 12)\n 28160: sp = sp + 0xfffffffffffffe80\n 28164: u64 [sp + 0x178] = ra\n 28168: u64 [sp + 0x170] = s0\n 28172: u64 [sp + 0x168] = s1\n 28176: s0 = sp + 0x180\n 28180: sp = sp & 0xffffffffffffffe0\n 28183: a3 = u32 [a0 + 0x10]\n 28186: a2 = u64 [a0]\n 28188: s1 = u64 [a0 + 0x8]\n 28191: a0 = a2 | a3\n 28194: a0 = a0 | s1\n 28197: jump @425 if a0 == 0\n      : @418 (gas: 15)\n 28201: u64 [sp + 0x10] = a3\n 28204: u64 [sp + 0x18] = a2\n 28207: a2 = u64 [a1 + 0x18]\n 28210: a0 = u64 [a1]\n 28212: a3 = u64 [a1 + 0x8]\n 28215: a1 = u64 [a1 + 0x10]\n 28218: u64 [sp + 0x28] = a0\n 28221: a0 = a0 <u 0x9\n 28224: u64 [sp + 0x20] = a3\n 28227: a0 = 0 if a3 != 0\n 28229: u64 [sp + 0x38] = a2\n 28232: u64 [sp + 0x30] = a1\n 28235: a1 = a1 | a2\n 28238: a0 = 0 if a1 != 0\n 28240: jump @430 if a0 == 0\n      : @419 (gas: 3)\n 28244: a1 = 0x20\n 28247: a0 = 0\n 28249: ra = 382, jump @0\n      : @420 [@dyn 191] (gas: 58)\n 28255: a1 = u64 [sp + 0x10]\n 28258: a1 = reverse a1\n 28260: a2 = reverse s1\n 28262: a3 = u64 [sp + 0x18]\n 28265: a3 = reverse a3\n 28267: a4 = a3 >> 0x38\n 28270: u8 [a0 + 0x1f] = a4\n 28273: a4 = a3 >> 0x30\n 28276: u8 [a0 + 0x1e] = a4\n 28279: a4 = a3 >> 0x28\n 28282: u8 [a0 + 0x1d] = a4\n 28285: a4 = a3 >> 0x20\n 28288: u8 [a0 + 0x1c] = a4\n 28291: a4 = a3 >> 0x18\n 28294: u8 [a0 + 0x1b] = a4\n 28297: a4 = a3 >> 0x10\n 28300: u8 [a0 + 0x1a] = a4\n 28303: a4 = a3 >> 0x8\n 28306: u8 [a0 + 0x19] = a4\n 28309: u8 [a0 + 0x18] = a3\n 28312: u8 [a0 + 0x10] = a2\n 28315: u8 [a0 + 11] = 0\n 28318: u8 [a0 + 10] = 0\n 28321: u8 [a0 + 9] = 0\n 28324: u8 [a0 + 7] = 0\n 28327: u8 [a0 + 6] = 0\n 28330: u8 [a0 + 5] = 0\n 28333: u8 [a0 + 4] = 0\n 28336: u8 [a0 + 3] = 0\n 28339: u8 [a0 + 2] = 0\n 28342: u8 [a0 + 1] = 0\n 28345: u8 [a0 + 0] = 0\n 28347: a3 = a2 >> 0x38\n 28350: u8 [a0 + 0x17] = a3\n 28353: a3 = a2 >> 0x30\n 28356: u8 [a0 + 0x16] = a3\n 28359: a3 = a2 >> 0x28\n 28362: u8 [a0 + 0x15] = a3\n 28365: a3 = a2 >> 0x20\n 28368: u8 [a0 + 0x14] = a3\n 28371: a3 = a2 >> 0x18\n 28374: u8 [a0 + 0x13] = a3\n 28377: a3 = a2 >> 0x10\n 28380: u8 [a0 + 0x12] = a3\n 28383: a2 = a2 >> 0x8\n 28386: u8 [a0 + 0x11] = a2\n 28389: u8 [a0 + 0x8] = a1\n 28392: a2 = a1 >> 0x38\n 28395: u8 [a0 + 0xf] = a2\n 28398: a2 = a1 >> 0x30\n 28401: u8 [a0 + 0xe] = a2\n 28404: a2 = a1 >> 0x28\n 28407: u8 [a0 + 0xd] = a2\n 28410: a1 = a1 >> 0x20\n 28413: u8 [a0 + 0xc] = a1\n 28416: a0 = 0x20\n 28419: a1 = 0x20\n 28422: ra = 384, jump @0\n      : @421 [@dyn 192] (gas: 35)\n 28428: u8 [a0 + 31] = 0\n 28431: u8 [a0 + 30] = 0\n 28434: u8 [a0 + 29] = 0\n 28437: u8 [a0 + 28] = 0\n 28440: u8 [a0 + 27] = 0\n 28443: u8 [a0 + 26] = 0\n 28446: u8 [a0 + 25] = 0\n 28449: u8 [a0 + 24] = 0\n 28452: u8 [a0 + 23] = 0\n 28455: u8 [a0 + 22] = 0\n 28458: u8 [a0 + 21] = 0\n 28461: u8 [a0 + 20] = 0\n 28464: u8 [a0 + 19] = 0\n 28467: u8 [a0 + 18] = 0\n 28470: u8 [a0 + 17] = 0\n 28473: u8 [a0 + 16] = 0\n 28476: u8 [a0 + 15] = 0\n 28479: u8 [a0 + 14] = 0\n 28482: u8 [a0 + 13] = 0\n 28485: u8 [a0 + 12] = 0\n 28488: u8 [a0 + 11] = 0\n 28491: u8 [a0 + 10] = 0\n 28494: u8 [a0 + 9] = 0\n 28497: u8 [a0 + 8] = 0\n 28500: u8 [a0 + 7] = 0\n 28503: u8 [a0 + 6] = 0\n 28506: u8 [a0 + 5] = 0\n 28509: u8 [a0 + 4] = 0\n 28512: u8 [a0 + 3] = 0\n 28515: u8 [a0 + 2] = 0\n 28518: u8 [a0 + 1] = 0\n 28521: u8 [a0 + 0] = 0\n 28523: a1 = 0x40\n 28526: a0 = 0\n 28528: ra = 386, jump @0\n      : @422 [@dyn 193] (gas: 50)\n 28534: i32 a0 = a0 + 0\n 28536: i32 a2 = sp + 0x140\n 28540: a1 = 0x40\n 28543: ecalli 5 // 'hash_keccak_256'\n 28545: a0 = u64 [sp + 0x140]\n 28549: a1 = u64 [sp + 0x148]\n 28553: a2 = u64 [sp + 0x158]\n 28557: a3 = u64 [sp + 0x150]\n 28561: a0 = reverse a0\n 28563: a1 = reverse a1\n 28565: a2 = reverse a2\n 28567: a3 = reverse a3\n 28569: a4 = u64 [sp + 0x20]\n 28572: a4 = a4 + a3\n 28575: a5 = u64 [sp + 0x28]\n 28578: a5 = a5 + a2\n 28581: a2 = a5 <u a2\n 28584: s1 = a4 + a2\n 28587: a4 = s1 ^ a3\n 28590: a3 = s1 <u a3\n 28593: a3 = a2 if a4 == 0\n 28596: a2 = u64 [sp + 0x30]\n 28599: a2 = a2 + a1\n 28602: a3 = a3 + a2\n 28605: t0 = a3 <u a2\n 28608: a4 = u64 [sp + 0x38]\n 28611: a0 = a0 + a4\n 28614: a1 = a2 <u a1\n 28617: a0 = a0 + a1\n 28620: a0 = a0 + t0\n 28623: u64 [sp + 0x30] = s1\n 28626: u64 [sp + 0x128] = s1\n 28630: u64 [sp + 0x38] = a5\n 28633: u64 [sp + 0x120] = a5\n 28637: u64 [sp + 0x28] = a3\n 28640: u64 [sp + 0x130] = a3\n 28644: u64 [sp + 0x20] = a0\n 28647: u64 [sp + 0x138] = a0\n 28651: u64 [sp + 344] = 0\n 28655: u64 [sp + 336] = 0\n 28659: u64 [sp + 328] = 0\n 28663: u64 [sp + 320] = 0\n 28667: u32 [sp + 256] = 0x20\n 28672: i32 a1 = sp + 0x120\n 28676: i32 a3 = sp + 0x140\n 28680: i32 a4 = sp + 0x100\n 28684: a2 = 0xffffffffffffffff\n 28687: a0 = 0\n 28689: ecalli 4 // 'get_storage'\n 28691: fallthrough\n      : @423 (gas: 19)\n 28692: s1 = u64 [sp + 0x140]\n 28696: a0 = u64 [sp + 0x158]\n 28700: a1 = u64 [sp + 0x148]\n 28704: a2 = u64 [sp + 0x150]\n 28708: s1 = s1 + 0x1\n 28711: a3 = s1 <u 0x1\n 28714: a3 = a3 + a1\n 28717: a1 = s1 | a3\n 28720: a1 = a1 <u 0x1\n 28723: a4 = a2 + a1\n 28726: a1 = a4 <u a2\n 28729: a0 = a0 + a1\n 28732: u64 [sp + 0x18] = a3\n 28735: u64 [sp + 0x8] = a0\n 28738: a0 = a0 | a3\n 28741: u64 [sp + 0x10] = a4\n 28744: a1 = s1 | a4\n 28747: a0 = a0 | a1\n 28750: jump @437 if a0 == 0\n      : @424 (gas: 46)\n 28754: a0 = u64 [sp + 0x28]\n 28757: u64 [sp + 0x130] = a0\n 28761: a0 = u64 [sp + 0x30]\n 28764: u64 [sp + 0x128] = a0\n 28768: a0 = u64 [sp + 0x38]\n 28771: u64 [sp + 0x120] = a0\n 28775: a0 = u64 [sp + 0x20]\n 28778: u64 [sp + 0x138] = a0\n 28782: u64 [sp + 344] = 0\n 28786: u64 [sp + 336] = 0\n 28790: u64 [sp + 328] = 0\n 28794: u64 [sp + 320] = 0\n 28798: u32 [sp + 256] = 0x20\n 28803: i32 a1 = sp + 0x120\n 28807: i32 a3 = sp + 0x140\n 28811: i32 a4 = sp + 0x100\n 28815: a2 = 0xffffffffffffffff\n 28818: a0 = 0\n 28820: ecalli 4 // 'get_storage'\n 28822: a0 = u64 [sp + 0x20]\n 28825: u64 [sp + 0x138] = a0\n 28829: a0 = u64 [sp + 0x28]\n 28832: u64 [sp + 0x130] = a0\n 28836: a0 = u64 [sp + 0x30]\n 28839: u64 [sp + 0x128] = a0\n 28843: a0 = u64 [sp + 0x38]\n 28846: u64 [sp + 0x120] = a0\n 28850: a0 = u64 [sp + 0x8]\n 28853: u64 [sp + 0x158] = a0\n 28857: a0 = u64 [sp + 0x10]\n 28860: u64 [sp + 0x150] = a0\n 28864: a0 = u64 [sp + 0x18]\n 28867: u64 [sp + 0x148] = a0\n 28871: u64 [sp + 0x140] = s1\n 28875: i32 a1 = sp + 0x120\n 28879: i32 a3 = sp + 0x140\n 28883: a2 = 0xffffffffffffffff\n 28886: a4 = 0x20\n 28889: a0 = 0\n 28891: ecalli 8 // 'set_storage'\n 28893: sp = s0 + 0xfffffffffffffe80\n 28897: ra = u64 [sp + 0x178]\n 28901: s0 = u64 [sp + 0x170]\n 28905: s1 = u64 [sp + 0x168]\n 28909: sp = sp + 0x180\n 28913: ret\n      : @425 (gas: 3)\n 28915: a0 = 0x40\n 28918: a1 = 0x20\n 28921: ra = 388, jump @0\n      : @426 [@dyn 194] (gas: 103)\n 28927: a1 = u8 [a0 + 0x11]\n 28930: a2 = u8 [a0 + 0x10]\n 28933: a3 = u8 [a0 + 0x12]\n 28936: a4 = u8 [a0 + 0x13]\n 28939: a1 = a1 << 0x8\n 28942: a1 = a1 | a2\n 28945: a3 = a3 << 0x10\n 28948: a4 = a4 << 0x18\n 28951: a3 = a3 | a4\n 28954: a1 = a1 | a3\n 28957: a2 = u8 [a0 + 0x15]\n 28960: a3 = u8 [a0 + 0x14]\n 28963: a4 = u8 [a0 + 0x16]\n 28966: a5 = u8 [a0 + 0x17]\n 28969: a2 = a2 << 0x8\n 28972: a2 = a2 | a3\n 28975: a4 = a4 << 0x10\n 28978: a5 = a5 << 0x18\n 28981: a4 = a4 | a5\n 28984: a2 = a2 | a4\n 28987: a2 = a2 << 0x20\n 28990: t0 = a2 | a1\n 28993: a2 = u8 [a0 + 0x1]\n 28996: a3 = u8 [a0]\n 28998: a4 = u8 [a0 + 0x2]\n 29001: a5 = u8 [a0 + 0x3]\n 29004: a2 = a2 << 0x8\n 29007: a2 = a2 | a3\n 29010: a4 = a4 << 0x10\n 29013: a5 = a5 << 0x18\n 29016: a4 = a4 | a5\n 29019: a2 = a2 | a4\n 29022: a3 = u8 [a0 + 0x5]\n 29025: a4 = u8 [a0 + 0x4]\n 29028: a5 = u8 [a0 + 0x6]\n 29031: s1 = u8 [a0 + 0x7]\n 29034: a3 = a3 << 0x8\n 29037: a3 = a3 | a4\n 29040: a5 = a5 << 0x10\n 29043: s1 = s1 << 0x18\n 29046: a5 = a5 | s1\n 29049: a3 = a3 | a5\n 29052: a3 = a3 << 0x20\n 29055: a2 = a2 | a3\n 29058: a3 = u8 [a0 + 0x19]\n 29061: a4 = u8 [a0 + 0x18]\n 29064: a5 = u8 [a0 + 0x1a]\n 29067: s1 = u8 [a0 + 0x1b]\n 29070: a3 = a3 << 0x8\n 29073: a3 = a3 | a4\n 29076: a5 = a5 << 0x10\n 29079: s1 = s1 << 0x18\n 29082: a5 = a5 | s1\n 29085: a3 = a3 | a5\n 29088: a4 = u8 [a0 + 0x1d]\n 29091: a5 = u8 [a0 + 0x1c]\n 29094: s1 = u8 [a0 + 0x1e]\n 29097: a1 = u8 [a0 + 0x1f]\n 29100: a4 = a4 << 0x8\n 29103: a4 = a4 | a5\n 29106: s1 = s1 << 0x10\n 29109: a1 = a1 << 0x18\n 29112: a1 = a1 | s1\n 29115: a1 = a1 | a4\n 29118: a1 = a1 << 0x20\n 29121: a3 = a3 | a1\n 29124: a1 = u8 [a0 + 0x9]\n 29127: a4 = u8 [a0 + 0x8]\n 29130: a5 = u8 [a0 + 0xa]\n 29133: s1 = u8 [a0 + 0xb]\n 29136: a1 = a1 << 0x8\n 29139: a1 = a1 | a4\n 29142: a5 = a5 << 0x10\n 29145: s1 = s1 << 0x18\n 29148: a5 = a5 | s1\n 29151: a1 = a1 | a5\n 29154: a4 = u8 [a0 + 0xd]\n 29157: a5 = u8 [a0 + 0xc]\n 29160: s1 = u8 [a0 + 0xe]\n 29163: a0 = u8 [a0 + 0xf]\n 29166: a4 = a4 << 0x8\n 29169: a4 = a4 | a5\n 29172: s1 = s1 << 0x10\n 29175: a0 = a0 << 0x18\n 29178: a0 = a0 | s1\n 29181: a0 = a0 | a4\n 29184: a0 = a0 << 0x20\n 29187: a0 = a0 | a1\n 29190: s1 = reverse a0\n 29192: a1 = reverse a3\n 29194: a2 = reverse a2\n 29196: a0 = reverse t0\n 29198: u64 [sp + 0x38] = a0\n 29201: u64 [sp + 0x30] = a2\n 29204: a0 = a0 | a2\n 29207: a2 = a1\n 29209: a1 = a1 | s1\n 29212: a1 = a1 | a0\n 29215: a1 = a1 >> 0x20\n 29218: a0 = a0 | s1\n 29221: a0 = a0 << 0x20\n 29224: a0 = a0 | a1\n 29227: jump @436 if a0 != 0\n      : @427 (gas: 5)\n 29231: u64 [sp + 0x28] = a2\n 29234: i32 a0 = a2 + 0\n 29236: a1 = 0x20\n 29239: u64 [sp + 0x20] = a0\n 29242: ra = 390, jump @0\n      : @428 [@dyn 195] (gas: 50)\n 29248: u8 [a0 + 31] = 0\n 29251: u8 [a0 + 30] = 0\n 29254: u8 [a0 + 29] = 0\n 29257: u8 [a0 + 28] = 0\n 29260: u8 [a0 + 27] = 0\n 29263: u8 [a0 + 26] = 0\n 29266: u8 [a0 + 25] = 0\n 29269: u8 [a0 + 24] = 0\n 29272: u8 [a0 + 23] = 0\n 29275: u8 [a0 + 22] = 0\n 29278: u8 [a0 + 21] = 0\n 29281: u8 [a0 + 20] = 0\n 29284: u8 [a0 + 19] = 0\n 29287: u8 [a0 + 18] = 0\n 29290: u8 [a0 + 17] = 0\n 29293: u8 [a0 + 16] = 0\n 29296: u8 [a0 + 15] = 0\n 29299: u8 [a0 + 14] = 0\n 29302: u8 [a0 + 13] = 0\n 29305: u8 [a0 + 12] = 0\n 29308: u8 [a0 + 11] = 0\n 29311: u8 [a0 + 10] = 0\n 29314: u8 [a0 + 9] = 0\n 29317: u8 [a0 + 8] = 0\n 29320: u8 [a0 + 7] = 0\n 29323: u8 [a0 + 6] = 0\n 29326: u8 [a0 + 5] = 0\n 29329: u8 [a0 + 4] = 0\n 29332: u8 [a0 + 3] = 0xa0\n 29337: u8 [a0 + 2] = 0x79\n 29341: u8 [a0 + 1] = 0xc3\n 29346: u8 [a0 + 0] = 0x8\n 29349: a1 = u64 [sp + 0x28]\n 29352: a0 = a1 + 0x4\n 29355: a1 = a0 <u a1\n 29358: a3 = u64 [sp + 0x38]\n 29361: a2 = a3 + a1\n 29364: a3 = a2 <u a3\n 29367: a3 = a1 if a1 == 0\n 29370: a3 = a3 + s1\n 29373: a1 = a3 <u s1\n 29376: a4 = u64 [sp + 0x30]\n 29379: a4 = a4 + a1\n 29382: u64 [sp + 0x48] = a2\n 29385: u64 [sp + 0x40] = a0\n 29388: u64 [sp + 0x50] = a3\n 29391: a0 = sp + 0x60\n 29394: a1 = sp + 0x40\n 29397: u64 [sp + 0x58] = a4\n 29400: ra = 392, jump @409\n      : @429 [@dyn 196] (gas: 5)\n 29406: a0 = u64 [sp + 0x68]\n 29409: t0 = u64 [sp + 0x78]\n 29412: t1 = u64 [sp + 0x60]\n 29415: a3 = u64 [sp + 0x70]\n 29418: jump @435\n      : @430 (gas: 3)\n 29421: a0 = 0x40\n 29424: a1 = 0x20\n 29427: ra = 394, jump @0\n      : @431 [@dyn 197] (gas: 103)\n 29433: a1 = u8 [a0 + 0x11]\n 29436: a2 = u8 [a0 + 0x10]\n 29439: a3 = u8 [a0 + 0x12]\n 29442: a4 = u8 [a0 + 0x13]\n 29445: a1 = a1 << 0x8\n 29448: a1 = a1 | a2\n 29451: a3 = a3 << 0x10\n 29454: a4 = a4 << 0x18\n 29457: a3 = a3 | a4\n 29460: a1 = a1 | a3\n 29463: a2 = u8 [a0 + 0x15]\n 29466: a3 = u8 [a0 + 0x14]\n 29469: a4 = u8 [a0 + 0x16]\n 29472: a5 = u8 [a0 + 0x17]\n 29475: a2 = a2 << 0x8\n 29478: a2 = a2 | a3\n 29481: a4 = a4 << 0x10\n 29484: a5 = a5 << 0x18\n 29487: a4 = a4 | a5\n 29490: a2 = a2 | a4\n 29493: a2 = a2 << 0x20\n 29496: t0 = a2 | a1\n 29499: a2 = u8 [a0 + 0x1]\n 29502: a3 = u8 [a0]\n 29504: a4 = u8 [a0 + 0x2]\n 29507: a5 = u8 [a0 + 0x3]\n 29510: a2 = a2 << 0x8\n 29513: a2 = a2 | a3\n 29516: a4 = a4 << 0x10\n 29519: a5 = a5 << 0x18\n 29522: a4 = a4 | a5\n 29525: a2 = a2 | a4\n 29528: a3 = u8 [a0 + 0x5]\n 29531: a4 = u8 [a0 + 0x4]\n 29534: a5 = u8 [a0 + 0x6]\n 29537: s1 = u8 [a0 + 0x7]\n 29540: a3 = a3 << 0x8\n 29543: a3 = a3 | a4\n 29546: a5 = a5 << 0x10\n 29549: s1 = s1 << 0x18\n 29552: a5 = a5 | s1\n 29555: a3 = a3 | a5\n 29558: a3 = a3 << 0x20\n 29561: a2 = a2 | a3\n 29564: a3 = u8 [a0 + 0x19]\n 29567: a4 = u8 [a0 + 0x18]\n 29570: a5 = u8 [a0 + 0x1a]\n 29573: s1 = u8 [a0 + 0x1b]\n 29576: a3 = a3 << 0x8\n 29579: a3 = a3 | a4\n 29582: a5 = a5 << 0x10\n 29585: s1 = s1 << 0x18\n 29588: a5 = a5 | s1\n 29591: a3 = a3 | a5\n 29594: a4 = u8 [a0 + 0x1d]\n 29597: a5 = u8 [a0 + 0x1c]\n 29600: s1 = u8 [a0 + 0x1e]\n 29603: a1 = u8 [a0 + 0x1f]\n 29606: a4 = a4 << 0x8\n 29609: a4 = a4 | a5\n 29612: s1 = s1 << 0x10\n 29615: a1 = a1 << 0x18\n 29618: a1 = a1 | s1\n 29621: a1 = a1 | a4\n 29624: a1 = a1 << 0x20\n 29627: a3 = a3 | a1\n 29630: a1 = u8 [a0 + 0x9]\n 29633: a4 = u8 [a0 + 0x8]\n 29636: a5 = u8 [a0 + 0xa]\n 29639: s1 = u8 [a0 + 0xb]\n 29642: a1 = a1 << 0x8\n 29645: a1 = a1 | a4\n 29648: a5 = a5 << 0x10\n 29651: s1 = s1 << 0x18\n 29654: a5 = a5 | s1\n 29657: a1 = a1 | a5\n 29660: a4 = u8 [a0 + 0xd]\n 29663: a5 = u8 [a0 + 0xc]\n 29666: s1 = u8 [a0 + 0xe]\n 29669: a0 = u8 [a0 + 0xf]\n 29672: a4 = a4 << 0x8\n 29675: a4 = a4 | a5\n 29678: s1 = s1 << 0x10\n 29681: a0 = a0 << 0x18\n 29684: a0 = a0 | s1\n 29687: a0 = a0 | a4\n 29690: a0 = a0 << 0x20\n 29693: a0 = a0 | a1\n 29696: s1 = reverse a0\n 29698: a1 = reverse a3\n 29700: a2 = reverse a2\n 29702: a0 = reverse t0\n 29704: u64 [sp + 0x38] = a0\n 29707: u64 [sp + 0x30] = a2\n 29710: a0 = a0 | a2\n 29713: a2 = a1\n 29715: a1 = a1 | s1\n 29718: a1 = a1 | a0\n 29721: a1 = a1 >> 0x20\n 29724: a0 = a0 | s1\n 29727: a0 = a0 << 0x20\n 29730: a0 = a0 | a1\n 29733: jump @436 if a0 != 0\n      : @432 (gas: 5)\n 29737: u64 [sp + 0x28] = a2\n 29740: i32 a0 = a2 + 0\n 29742: a1 = 0x20\n 29745: u64 [sp + 0x20] = a0\n 29748: ra = 396, jump @0\n      : @433 [@dyn 198] (gas: 50)\n 29754: u8 [a0 + 31] = 0\n 29757: u8 [a0 + 30] = 0\n 29760: u8 [a0 + 29] = 0\n 29763: u8 [a0 + 28] = 0\n 29766: u8 [a0 + 27] = 0\n 29769: u8 [a0 + 26] = 0\n 29772: u8 [a0 + 25] = 0\n 29775: u8 [a0 + 24] = 0\n 29778: u8 [a0 + 23] = 0\n 29781: u8 [a0 + 22] = 0\n 29784: u8 [a0 + 21] = 0\n 29787: u8 [a0 + 20] = 0\n 29790: u8 [a0 + 19] = 0\n 29793: u8 [a0 + 18] = 0\n 29796: u8 [a0 + 17] = 0\n 29799: u8 [a0 + 16] = 0\n 29802: u8 [a0 + 15] = 0\n 29805: u8 [a0 + 14] = 0\n 29808: u8 [a0 + 13] = 0\n 29811: u8 [a0 + 12] = 0\n 29814: u8 [a0 + 11] = 0\n 29817: u8 [a0 + 10] = 0\n 29820: u8 [a0 + 9] = 0\n 29823: u8 [a0 + 8] = 0\n 29826: u8 [a0 + 7] = 0\n 29829: u8 [a0 + 6] = 0\n 29832: u8 [a0 + 5] = 0\n 29835: u8 [a0 + 4] = 0\n 29838: u8 [a0 + 3] = 0xa0\n 29843: u8 [a0 + 2] = 0x79\n 29847: u8 [a0 + 1] = 0xc3\n 29852: u8 [a0 + 0] = 0x8\n 29855: a1 = u64 [sp + 0x28]\n 29858: a0 = a1 + 0x4\n 29861: a1 = a0 <u a1\n 29864: a3 = u64 [sp + 0x38]\n 29867: a2 = a3 + a1\n 29870: a3 = a2 <u a3\n 29873: a3 = a1 if a1 == 0\n 29876: a3 = a3 + s1\n 29879: a1 = a3 <u s1\n 29882: a4 = u64 [sp + 0x30]\n 29885: a4 = a4 + a1\n 29888: u64 [sp + 0x88] = a2\n 29892: u64 [sp + 0x80] = a0\n 29896: u64 [sp + 0x90] = a3\n 29900: a0 = sp + 0xa0\n 29904: a1 = sp + 0x80\n 29908: u64 [sp + 0x98] = a4\n 29912: ra = 398, jump @287\n      : @434 [@dyn 199] (gas: 5)\n 29918: a0 = u64 [sp + 0xa8]\n 29922: t0 = u64 [sp + 0xb8]\n 29926: t1 = u64 [sp + 0xa0]\n 29930: a3 = u64 [sp + 0xb0]\n 29934: fallthrough\n      : @435 (gas: 26)\n 29935: a1 = u64 [sp + 0x38]\n 29938: a4 = a0 ^ a1\n 29941: a5 = a0 <u a1\n 29944: t2 = a1\n 29946: a2 = u64 [sp + 0x28]\n 29949: a1 = t1 <u a2\n 29952: a5 = a1 if a4 == 0\n 29955: a4 = a3 - s1\n 29958: a3 = a3 <u s1\n 29961: s1 = u64 [sp + 0x30]\n 29964: s1 = t0 - s1\n 29967: s1 = s1 - a3\n 29970: a3 = a4 <u a5\n 29973: s1 = s1 - a3\n 29976: a4 = a4 - a5\n 29979: a0 = a0 - t2\n 29982: a1 = a0 - a1\n 29985: a0 = t1 - a2\n 29988: a1 = a1 | s1\n 29991: a2 = a0 | a4\n 29994: a2 = a2 | a1\n 29997: a1 = a1 | a4\n 30000: a2 = a2 >> 0x20\n 30003: a1 = a1 << 0x20\n 30006: a1 = a1 | a2\n 30009: jump @441 if a1 == 0\n      : @436 (gas: 1)\n 30012: trap\n      : @437 (gas: 8)\n 30013: u64 [sp + 240] = 0\n 30017: u64 [sp + 232] = 0\n 30021: u64 [sp + 224] = 0\n 30025: a0 = 0x4e487b7100000000\n 30035: a1 = sp + 0xe0\n 30039: u64 [sp + 0xf8] = a0\n 30043: a0 = 0\n 30045: ra = 400, jump @8\n      : @438 [@dyn 200] (gas: 7)\n 30051: u64 [sp + 216] = 0\n 30055: u64 [sp + 208] = 0\n 30059: u64 [sp + 192] = 0x11\n 30064: a0 = 0x4\n 30067: a1 = sp + 0xc0\n 30071: u64 [sp + 200] = 0\n 30075: ra = 402, jump @8\n      : @439 [@dyn 201] (gas: 3)\n 30081: a1 = 0x24\n 30084: a0 = 0\n 30086: ra = 404, jump @0\n      : @440 [@dyn 202] (gas: 5)\n 30092: i32 a1 = a0 + 0\n 30094: a0 = 0x1\n 30097: a2 = 0x24\n 30100: ecalli 6 // 'seal_return'\n 30102: fallthrough\n      : @441 (gas: 4)\n 30103: i32 s1 = a0 + 0\n 30105: a0 = u64 [sp + 0x20]\n 30108: a1 = s1\n 30110: ra = 406, jump @0\n      : @442 [@dyn 203] (gas: 6)\n 30116: i32 a1 = a0 + 0\n 30118: a0 = 0x1\n 30121: a2 = s1\n 30123: ra = 0x198\n 30127: ecalli 6 // 'seal_return'\n 30129: fallthrough\n      : @443 [@dyn 204] (gas: 24)\n 30130: sp = sp + 0xffffffffffffffb0\n 30133: u64 [sp + 0x48] = ra\n 30136: u64 [sp + 0x40] = s0\n 30139: s0 = sp + 0x50\n 30142: sp = sp & 0xfffffffffffffff0\n 30145: t0 = u64 [a0]\n 30147: t1 = u64 [a0 + 0x8]\n 30150: a4 = u64 [a0 + 0x10]\n 30153: a0 = u64 [a0 + 0x18]\n 30156: a5 = u64 [a1]\n 30158: a2 = u64 [a1 + 0x8]\n 30161: a3 = u64 [a1 + 0x10]\n 30164: a1 = u64 [a1 + 0x18]\n 30167: u64 [sp + 0x18] = a1\n 30170: u64 [sp + 0x10] = a3\n 30173: u64 [sp + 0x8] = a2\n 30176: u64 [sp] = a5\n 30178: u64 [sp + 0x38] = a0\n 30181: u64 [sp + 0x30] = a4\n 30184: u64 [sp + 0x28] = t1\n 30187: a0 = sp + 0x20\n 30190: a1 = sp\n 30192: u64 [sp + 0x20] = t0\n 30195: ra = 410, jump @393\n      : @444 [@dyn 205] (gas: 5)\n 30201: sp = s0 + 0xffffffffffffffb0\n 30204: ra = u64 [sp + 0x48]\n 30207: s0 = u64 [sp + 0x40]\n 30210: sp = sp + 0x50\n 30213: ret\n      : @445 [export #0: 'call'] (gas: 2)\n 30215: a0 = 0\n 30217: ra = 412, jump @10\n      : @446 [@dyn 206] [export #1: 'deploy'] (gas: 2)\n 30223: a0 = 0x1\n 30226: ra = 414, jump @10\n      : @447 [@dyn 207] (gas: 9)\n 30232: sp = sp + 0xffffffffffffffc0\n 30235: u64 [sp + 0x38] = ra\n 30238: u64 [sp + 0x30] = s0\n 30241: u64 [sp + 0x28] = s1\n 30244: s0 = sp + 0x40\n 30247: sp = sp & 0xfffffffffffffff0\n 30250: s1 = a0\n 30252: a0 = sp\n 30254: ra = 416, jump @48\n      : @448 [@dyn 208] (gas: 14)\n 30260: a0 = u64 [sp + 0x10]\n 30263: a1 = u64 [sp + 0x18]\n 30266: a2 = u64 [sp]\n 30268: a3 = u64 [sp + 0x8]\n 30271: u64 [s1 + 0x10] = a0\n 30274: u64 [s1 + 0x18] = a1\n 30277: u64 [s1] = a2\n 30279: u64 [s1 + 0x8] = a3\n 30282: sp = s0 + 0xffffffffffffffc0\n 30285: ra = u64 [sp + 0x38]\n 30288: s0 = u64 [sp + 0x30]\n 30291: s1 = u64 [sp + 0x28]\n 30294: sp = sp + 0x40\n 30297: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"addCard(address,uint256)": "f9c775ea",
							"cardInventory(address,uint256)": "50580072",
							"getInventory(address)": "8b87c544",
							"hasCard(address,uint256,uint256)": "4dca8ce6",
							"setTradingContract(address)": "5be6f2c7",
							"tradingContract()": "9e4bd2e9",
							"transferCards(address,address,uint256,uint256)": "65352442"
						}
					},
					"irOptimized": "/// @use-src 0:\"InventoryManager.sol\"\nobject \"InventoryManager_168\" {\n    code {\n        {\n            /// @src 0:60:1408  \"contract InventoryManager {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            constructor_InventoryManager()\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"InventoryManager_168_deployed\"), datasize(\"InventoryManager_168_deployed\"))\n            return(_1, datasize(\"InventoryManager_168_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function prepare_store_address(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_address_to_address(slot, value)\n        {\n            let convertedValue := convert_address_to_address(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n        }\n        /// @ast-id 30 @src 0:313:374  \"constructor() {...\"\n        function constructor_InventoryManager()\n        {\n            /// @src 0:356:366  \"msg.sender\"\n            let expr := caller()\n            /// @src 0:338:366  \"tradingContract = msg.sender\"\n            update_storage_value_offset_address_to_address(0x01, expr)\n        }\n    }\n    /// @use-src 0:\"InventoryManager.sol\"\n    object \"InventoryManager_168_deployed\" {\n        code {\n            {\n                /// @src 0:60:1408  \"contract InventoryManager {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x4dca8ce6 { external_fun_hasCard() }\n                    case 0x50580072 { external_fun_cardInventory() }\n                    case 0x5be6f2c7 {\n                        external_fun_setTradingContract()\n                    }\n                    case 0x65352442 { external_fun_transferCards() }\n                    case 0x8b87c544 { external_fun_getInventory() }\n                    case 0x9e4bd2e9 {\n                        external_fun_tradingContract()\n                    }\n                    case 0xf9c775ea { external_fun_addCard() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_uint256(add(headStart, offset_2), dataEnd)\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            function external_fun_hasCard()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_addresst_uint256t_uint256(4, calldatasize())\n                let ret := fun_hasCard(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_addresst_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_array_uint256_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_uint256_storage(value) -> length\n            { length := 0x09 }\n            function array_dataslot_array_uint256_storage(ptr) -> data\n            { data := ptr }\n            function storage_array_index_access_uint(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_uint256_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_uint256_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 7 @src 0:93:141  \"mapping(address => uint[9]) public cardInventory\"\n            function getter_fun_cardInventory(key, key_1) -> ret\n            {\n                let slot := 0\n                let offset := 0\n                slot := mapping_index_access_mapping_address_array_uint256_storage_of_address(slot, key)\n                if iszero(lt(key_1, array_length_array_uint256_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_uint(slot, key_1)\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:60:1408  \"contract InventoryManager {...\"\n            function abi_encode_uint256_to_uint256_fromStack(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256_fromStack(value0, add(headStart, 0))\n            }\n            function external_fun_cardInventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                let ret := getter_fun_cardInventory(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_setTradingContract()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_setTradingContract(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_addresst_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n            {\n                if slt(sub(dataEnd, headStart), 128)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_address(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_uint256(add(headStart, offset_2), dataEnd)\n                let offset_3 := 96\n                value3 := abi_decode_uint256(add(headStart, offset_3), dataEnd)\n            }\n            function external_fun_transferCards()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2, param_3 := abi_decode_addresst_addresst_uint256t_uint256(4, calldatasize())\n                fun_transferCards(param, param_1, param_2, param_3)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_array_uint256(value) -> length\n            { length := 0x09 }\n            function array_storeLengthForEncoding_array_uint256(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function array_dataslot_array_uint256(ptr) -> data\n            { data := ptr }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encodeUpdatedPos_uint256(value0, pos) -> updatedPos\n            {\n                abi_encode_uint256_to_uint256(value0, pos)\n                updatedPos := add(pos, 0x20)\n            }\n            function array_nextElement_array_uint256(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_uint256_memory_ptr(value, pos)\n            {\n                let length := array_length_array_uint256(value)\n                pos := array_storeLengthForEncoding_array_uint256(pos, length)\n                let baseRef := array_dataslot_array_uint256(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_uint256(elementValue0, pos)\n                    srcPtr := array_nextElement_array_uint256(srcPtr)\n                }\n            }\n            function abi_encode_array_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 288)\n                abi_encode_array_uint256_memory_ptr(value0, add(headStart, 0))\n            }\n            function external_fun_getInventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := fun_getInventory(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 21 @src 0:274:304  \"address public tradingContract\"\n            function getter_fun_tradingContract() -> ret\n            {\n                let slot := 1\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:60:1408  \"contract InventoryManager {...\"\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_tradingContract()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_tradingContract()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_addCard()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                fun_addCard(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function zero_value_for_split_bool() -> ret\n            { ret := 0 }\n            /// @ast-id 167 @src 0:1256:1405  \"function hasCard(address user, uint cardId, uint amount) external view returns (bool) {...\"\n            function fun_hasCard(var_user, var_cardId, var_amount) -> var\n            {\n                /// @src 0:1336:1340  \"bool\"\n                let zero_bool := zero_value_for_split_bool()\n                var := zero_bool\n                /// @src 0:1360:1373  \"cardInventory\"\n                let _2_slot := 0x00\n                let expr_158_slot := _2_slot\n                /// @src 0:1374:1378  \"user\"\n                let _1 := var_user\n                let expr := _1\n                /// @src 0:1360:1379  \"cardInventory[user]\"\n                let _2 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_158_slot, expr)\n                let _5_slot := _2\n                let expr_160_slot := _5_slot\n                /// @src 0:1380:1386  \"cardId\"\n                let _3 := var_cardId\n                let expr_1 := _3\n                /// @src 0:1360:1387  \"cardInventory[user][cardId]\"\n                let _4, _5 := storage_array_index_access_uint(expr_160_slot, expr_1)\n                let _6 := read_from_storage_split_dynamic_uint256(_4, _5)\n                let expr_2 := _6\n                /// @src 0:1391:1397  \"amount\"\n                let _7 := var_amount\n                let expr_3 := _7\n                /// @src 0:1360:1397  \"cardInventory[user][cardId] >= amount\"\n                let expr_4 := iszero(lt(cleanup_uint256(expr_2), cleanup_uint256(expr_3)))\n                /// @src 0:1353:1397  \"return cardInventory[user][cardId] >= amount\"\n                var := expr_4\n                leave\n            }\n            /// @src 0:60:1408  \"contract InventoryManager {...\"\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_t_rational_by(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_7e48b067d9657b74fa88865ffd84ee4954e27df98d359dfc75a722e1054131bc(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Already set\")\n            }\n            function abi_encode_stringliteral_7e48(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 11)\n                store_literal_in_memory_7e48b067d9657b74fa88865ffd84ee4954e27df98d359dfc75a722e1054131bc(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_7e48(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_7e48(tail)\n            }\n            function require_helper_stringliteral_7e48(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_7e48(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            /// @ast-id 50 @src 0:382:548  \"function setTradingContract(address _contract) external {...\"\n            function fun_setTradingContract(var_contract)\n            {\n                /// @src 0:457:472  \"tradingContract\"\n                let _1 := read_from_storage_split_offset_address(0x01)\n                let expr := _1\n                /// @src 0:484:485  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:476:486  \"address(0)\"\n                let expr_2 := convert_rational_by_to_address(expr_1)\n                /// @src 0:457:486  \"tradingContract == address(0)\"\n                let expr_3 := eq(cleanup_address(expr), cleanup_address(expr_2))\n                /// @src 0:449:502  \"require(tradingContract == address(0), \\\"Already set\\\")\"\n                require_helper_stringliteral_7e48(expr_3)\n                /// @src 0:531:540  \"_contract\"\n                let _2 := var_contract\n                let expr_4 := _2\n                /// @src 0:513:540  \"tradingContract = _contract\"\n                update_storage_value_offset_address_to_address(0x01, expr_4)\n            }\n            /// @src 0:60:1408  \"contract InventoryManager {...\"\n            function store_literal_in_memory_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Unauthorized\")\n            }\n            function abi_encode_stringliteral_1b26(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 12)\n                store_literal_in_memory_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_1b26(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_1b26(tail)\n            }\n            function require_helper_stringliteral_1b26(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_1b26(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 19 @src 0:150:266  \"modifier onlyTradingContract() {...\"\n            function modifier_onlyTradingContract_96(var_from, var_to, var_cardId, var_amount)\n            {\n                /// @src 0:200:210  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:214:229  \"tradingContract\"\n                let _1 := read_from_storage_split_offset_address(0x01)\n                let expr_1 := _1\n                /// @src 0:200:229  \"msg.sender == tradingContract\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 0:192:246  \"require(msg.sender == tradingContract, \\\"Unauthorized\\\")\"\n                require_helper_stringliteral_1b26(expr_2)\n                /// @src 0:257:258  \"_\"\n                fun_transferCards_inner(var_from, var_to, var_cardId, var_amount)\n            }\n            /// @src 0:60:1408  \"contract InventoryManager {...\"\n            function cleanup_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by_1(value)))\n            }\n            function store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid card ID\")\n            }\n            function abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_8239(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(tail)\n            }\n            function require_helper_stringliteral_8239(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8239(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not enough cards\")\n            }\n            function abi_encode_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 16)\n                store_literal_in_memory_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_83e8(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(tail)\n            }\n            function require_helper_stringliteral_83e8(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_83e8(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, not(0))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_uint256_to_uint256(slot, offset, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @src 0:788:1120  \"function transferCards(address from, address to, uint cardId, uint amount) external onlyTradingContract {...\"\n            function fun_transferCards_inner(var_from, var_to, var_cardId, var_amount)\n            {\n                /// @src 0:911:917  \"cardId\"\n                let _1 := var_cardId\n                let expr := _1\n                /// @src 0:920:921  \"9\"\n                let expr_1 := 0x09\n                /// @src 0:911:921  \"cardId < 9\"\n                let expr_2 := lt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:903:941  \"require(cardId < 9, \\\"Invalid card ID\\\")\"\n                require_helper_stringliteral_8239(expr_2)\n                /// @src 0:960:973  \"cardInventory\"\n                let _15_slot := 0x00\n                let expr_106_slot := _15_slot\n                /// @src 0:974:978  \"from\"\n                let _2 := var_from\n                let expr_3 := _2\n                /// @src 0:960:979  \"cardInventory[from]\"\n                let _3 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_106_slot, expr_3)\n                let _slot := _3\n                let expr_108_slot := _slot\n                /// @src 0:980:986  \"cardId\"\n                let _4 := var_cardId\n                let expr_4 := _4\n                /// @src 0:960:987  \"cardInventory[from][cardId]\"\n                let _5, _6 := storage_array_index_access_uint(expr_108_slot, expr_4)\n                let _7 := read_from_storage_split_dynamic_uint256(_5, _6)\n                let expr_5 := _7\n                /// @src 0:991:997  \"amount\"\n                let _8 := var_amount\n                let expr_6 := _8\n                /// @src 0:960:997  \"cardInventory[from][cardId] >= amount\"\n                let expr_7 := iszero(lt(cleanup_uint256(expr_5), cleanup_uint256(expr_6)))\n                /// @src 0:952:1018  \"require(cardInventory[from][cardId] >= amount, \\\"Not enough cards\\\")\"\n                require_helper_stringliteral_83e8(expr_7)\n                /// @src 0:1060:1066  \"amount\"\n                let _9 := var_amount\n                let expr_8 := _9\n                /// @src 0:1029:1042  \"cardInventory\"\n                let _25_slot := 0x00\n                let expr_116_slot := _25_slot\n                /// @src 0:1043:1047  \"from\"\n                let _10 := var_from\n                let expr_9 := _10\n                /// @src 0:1029:1048  \"cardInventory[from]\"\n                let _11 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_116_slot, expr_9)\n                let _28_slot := _11\n                let expr_119_slot := _28_slot\n                /// @src 0:1049:1055  \"cardId\"\n                let _12 := var_cardId\n                let expr_10 := _12\n                /// @src 0:1029:1056  \"cardInventory[from][cardId]\"\n                let _13, _14 := storage_array_index_access_uint(expr_119_slot, expr_10)\n                /// @src 0:1029:1066  \"cardInventory[from][cardId] -= amount\"\n                let _15 := read_from_storage_split_dynamic_uint256(_13, _14)\n                let expr_11 := checked_sub_uint256(_15, expr_8)\n                update_storage_value_uint256_to_uint256(_13, _14, expr_11)\n                /// @src 0:1106:1112  \"amount\"\n                let _16 := var_amount\n                let expr_12 := _16\n                /// @src 0:1077:1090  \"cardInventory\"\n                let _34_slot := 0x00\n                let expr_124_slot := _34_slot\n                /// @src 0:1091:1093  \"to\"\n                let _17 := var_to\n                let expr_13 := _17\n                /// @src 0:1077:1094  \"cardInventory[to]\"\n                let _18 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_124_slot, expr_13)\n                let _37_slot := _18\n                let expr_127_slot := _37_slot\n                /// @src 0:1095:1101  \"cardId\"\n                let _19 := var_cardId\n                let expr_14 := _19\n                /// @src 0:1077:1102  \"cardInventory[to][cardId]\"\n                let _20, _21 := storage_array_index_access_uint(expr_127_slot, expr_14)\n                /// @src 0:1077:1112  \"cardInventory[to][cardId] += amount\"\n                let _22 := read_from_storage_split_dynamic_uint256(_20, _21)\n                let expr_15 := checked_add_uint256(_22, expr_12)\n                update_storage_value_uint256_to_uint256(_20, _21, expr_15)\n            }\n            /// @ast-id 133 @src 0:788:1120  \"function transferCards(address from, address to, uint cardId, uint amount) external onlyTradingContract {...\"\n            function fun_transferCards(var_from, var_to, var_cardId, var_amount)\n            {\n                modifier_onlyTradingContract_96(var_from, var_to, var_cardId, var_amount)\n            }\n            /// @src 0:60:1408  \"contract InventoryManager {...\"\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_array_uint256(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n            }\n            function allocate_memory_array_array_uint256(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_uint256(length)\n                memPtr := allocate_memory(allocSize)\n            }\n            function zero_memory_chunk_uint256(dataStart, dataSizeInBytes)\n            {\n                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)\n            }\n            function allocate_and_zero_memory_array_array_uint256(length) -> memPtr\n            {\n                memPtr := allocate_memory_array_array_uint256(length)\n                let dataStart := memPtr\n                let dataSize := array_allocation_size_array_uint256(length)\n                zero_memory_chunk_uint256(dataStart, dataSize)\n            }\n            function zero_value_for_split_array_uint256() -> ret\n            {\n                ret := allocate_and_zero_memory_array_array_uint256(9)\n            }\n            function array_storeLengthForEncoding_array_uint256_memory_ptr(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function array_nextElement_array_uint256_storage(ptr) -> next\n            { next := add(ptr, 0x01) }\n            function abi_encode_array_uint256_storage(value, pos)\n            {\n                let length := array_length_array_uint256_storage(value)\n                pos := array_storeLengthForEncoding_array_uint256_memory_ptr(pos, length)\n                let baseRef := array_dataslot_array_uint256_storage(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := read_from_storage_offset_uint256(srcPtr)\n                    pos := abi_encodeUpdatedPos_uint256(elementValue0, pos)\n                    srcPtr := array_nextElement_array_uint256_storage(srcPtr)\n                }\n            }\n            function abi_encodeUpdatedPos_array_uint256_storage(value0, pos) -> updatedPos\n            {\n                abi_encode_array_uint256_storage(value0, pos)\n                updatedPos := add(pos, 0x0120)\n            }\n            function copy_array_from_storage_to_memory_array_uint(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_array_uint256_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function convert_array_array_uint256_storage_to_array_uint256(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_uint(value)\n            }\n            /// @ast-id 147 @src 0:1128:1248  \"function getInventory(address user) external view returns (uint[9] memory) {...\"\n            function fun_getInventory(var_user) -> var_mpos\n            {\n                /// @src 0:1187:1201  \"uint[9] memory\"\n                let zero_array_uint256_mpos := zero_value_for_split_array_uint256()\n                var_mpos := zero_array_uint256_mpos\n                /// @src 0:1221:1234  \"cardInventory\"\n                let _43_slot := 0x00\n                let expr_slot := _43_slot\n                /// @src 0:1235:1239  \"user\"\n                let _1 := var_user\n                let expr := _1\n                /// @src 0:1221:1240  \"cardInventory[user]\"\n                let _2 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_slot, expr)\n                let _46_slot := _2\n                let expr_144_slot := _46_slot\n                /// @src 0:1214:1240  \"return cardInventory[user]\"\n                var_mpos := convert_array_array_uint256_storage_to_array_uint256(expr_144_slot)\n                leave\n            }\n            /// @ast-id 19 @src 0:150:266  \"modifier onlyTradingContract() {...\"\n            function modifier_onlyTradingContract(var_to, var_cardId)\n            {\n                /// @src 0:200:210  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:214:229  \"tradingContract\"\n                let _1 := read_from_storage_split_offset_address(0x01)\n                let expr_1 := _1\n                /// @src 0:200:229  \"msg.sender == tradingContract\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 0:192:246  \"require(msg.sender == tradingContract, \\\"Unauthorized\\\")\"\n                require_helper_stringliteral_1b26(expr_2)\n                /// @src 0:257:258  \"_\"\n                fun_addCard_inner(var_to, var_cardId)\n            }\n            /// @src 0:60:1408  \"contract InventoryManager {...\"\n            function store_literal_in_memory_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid address\")\n            }\n            function abi_encode_stringliteral(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            /// @src 0:556:780  \"function addCard(address to, uint cardId) external onlyTradingContract {...\"\n            function fun_addCard_inner(var_to, var_cardId)\n            {\n                /// @src 0:646:648  \"to\"\n                let _1 := var_to\n                let expr := _1\n                /// @src 0:660:661  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:652:662  \"address(0)\"\n                let expr_2 := convert_rational_by_to_address(expr_1)\n                /// @src 0:646:662  \"to != address(0)\"\n                let expr_3 := iszero(eq(cleanup_address(expr), cleanup_address(expr_2)))\n                /// @src 0:638:682  \"require(to != address(0), \\\"Invalid address\\\")\"\n                require_helper_stringliteral(expr_3)\n                /// @src 0:701:707  \"cardId\"\n                let _2 := var_cardId\n                let expr_4 := _2\n                /// @src 0:710:711  \"9\"\n                let expr_5 := 0x09\n                /// @src 0:701:711  \"cardId < 9\"\n                let expr_6 := lt(cleanup_uint256(expr_4), convert_rational_by_to_uint256(expr_5))\n                /// @src 0:693:731  \"require(cardId < 9, \\\"Invalid card ID\\\")\"\n                require_helper_stringliteral_8239(expr_6)\n                /// @src 0:771:772  \"1\"\n                let expr_7 := 0x01\n                /// @src 0:742:772  \"cardInventory[to][cardId] += 1\"\n                let _3 := convert_t_rational_by_to_t_uint256(expr_7)\n                /// @src 0:742:755  \"cardInventory\"\n                let _51_slot := 0x00\n                let expr_76_slot := _51_slot\n                /// @src 0:756:758  \"to\"\n                let _4 := var_to\n                let expr_8 := _4\n                /// @src 0:742:759  \"cardInventory[to]\"\n                let _5 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_76_slot, expr_8)\n                let _54_slot := _5\n                let expr_79_slot := _54_slot\n                /// @src 0:760:766  \"cardId\"\n                let _6 := var_cardId\n                let expr_9 := _6\n                /// @src 0:742:767  \"cardInventory[to][cardId]\"\n                let _7, _8 := storage_array_index_access_uint(expr_79_slot, expr_9)\n                /// @src 0:742:772  \"cardInventory[to][cardId] += 1\"\n                let _9 := read_from_storage_split_dynamic_uint256(_7, _8)\n                let expr_10 := checked_add_uint256(_9, _3)\n                update_storage_value_uint256_to_uint256(_7, _8, expr_10)\n            }\n            /// @ast-id 85 @src 0:556:780  \"function addCard(address to, uint cardId) external onlyTradingContract {...\"\n            function fun_addCard(var_to, var_cardId)\n            {\n                modifier_onlyTradingContract(var_to, var_cardId)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212209fbc6590bc34ca75ee582b742227303751327cdfd8de1110b6c068f723e2fbf864736f6c634300081c0033\"\n    }\n}\n",
					"hash": "81cf47e39dcfa0991997b10896e664794c5b17f6c1372d5b70c78c3864213d98",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"InventoryManager.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "InventoryManager.sol",
					"exportedSymbols": {
						"InventoryManager": [
							168
						]
					},
					"id": 169,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "InventoryManager",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 168,
							"linearizedBaseContracts": [
								168
							],
							"name": "InventoryManager",
							"nameLocation": "69:16:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "50580072",
									"id": 7,
									"mutability": "mutable",
									"name": "cardInventory",
									"nameLocation": "128:13:0",
									"nodeType": "VariableDeclaration",
									"scope": 168,
									"src": "93:48:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
										"typeString": "mapping(address => uint256[9])"
									},
									"typeName": {
										"id": 6,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "101:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "93:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
											"typeString": "mapping(address => uint256[9])"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"baseType": {
												"id": 3,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "112:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"id": 5,
											"length": {
												"hexValue": "39",
												"id": 4,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "117:1:0",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_9_by_1",
													"typeString": "int_const 9"
												},
												"value": "9"
											},
											"nodeType": "ArrayTypeName",
											"src": "112:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$9_storage_ptr",
												"typeString": "uint256[9]"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 18,
										"nodeType": "Block",
										"src": "181:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 13,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 10,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "200:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 11,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "204:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "200:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 12,
																"name": "tradingContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 21,
																"src": "214:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "200:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556e617574686f72697a6564",
															"id": 14,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "231:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5",
																"typeString": "literal_string \"Unauthorized\""
															},
															"value": "Unauthorized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5",
																"typeString": "literal_string \"Unauthorized\""
															}
														],
														"id": 9,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "192:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 15,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "192:54:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 16,
												"nodeType": "ExpressionStatement",
												"src": "192:54:0"
											},
											{
												"id": 17,
												"nodeType": "PlaceholderStatement",
												"src": "257:1:0"
											}
										]
									},
									"id": 19,
									"name": "onlyTradingContract",
									"nameLocation": "159:19:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "178:2:0"
									},
									"src": "150:116:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "9e4bd2e9",
									"id": 21,
									"mutability": "mutable",
									"name": "tradingContract",
									"nameLocation": "289:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 168,
									"src": "274:30:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 20,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "274:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 29,
										"nodeType": "Block",
										"src": "327:47:0",
										"statements": [
											{
												"expression": {
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 24,
														"name": "tradingContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 21,
														"src": "338:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 25,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "356:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 26,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "360:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "356:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "338:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "338:28:0"
											}
										]
									},
									"id": 30,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "324:2:0"
									},
									"returnParameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "327:0:0"
									},
									"scope": 168,
									"src": "313:61:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "438:110:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 36,
																"name": "tradingContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 21,
																"src": "457:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 39,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "484:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 38,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "476:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 37,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "476:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 40,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "476:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "457:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416c726561647920736574",
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "488:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7e48b067d9657b74fa88865ffd84ee4954e27df98d359dfc75a722e1054131bc",
																"typeString": "literal_string \"Already set\""
															},
															"value": "Already set"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7e48b067d9657b74fa88865ffd84ee4954e27df98d359dfc75a722e1054131bc",
																"typeString": "literal_string \"Already set\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "449:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 43,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "449:53:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 44,
												"nodeType": "ExpressionStatement",
												"src": "449:53:0"
											},
											{
												"expression": {
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 45,
														"name": "tradingContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 21,
														"src": "513:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 46,
														"name": "_contract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "531:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "513:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "513:27:0"
											}
										]
									},
									"functionSelector": "5be6f2c7",
									"id": 50,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setTradingContract",
									"nameLocation": "391:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "418:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "410:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 31,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "410:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "409:19:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "438:0:0"
									},
									"scope": 168,
									"src": "382:166:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 84,
										"nodeType": "Block",
										"src": "627:153:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 65,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 60,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 52,
																"src": "646:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 63,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "660:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 62,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "652:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 61,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "652:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 64,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "652:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "646:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642061646472657373",
															"id": 66,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "664:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															},
															"value": "Invalid address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															}
														],
														"id": 59,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "638:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 67,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "638:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 68,
												"nodeType": "ExpressionStatement",
												"src": "638:44:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 72,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 70,
																"name": "cardId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 54,
																"src": "701:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "39",
																"id": 71,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "710:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_9_by_1",
																	"typeString": "int_const 9"
																},
																"value": "9"
															},
															"src": "701:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642063617264204944",
															"id": 73,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "713:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															},
															"value": "Invalid card ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															}
														],
														"id": 69,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "693:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "693:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 75,
												"nodeType": "ExpressionStatement",
												"src": "693:38:0"
											},
											{
												"expression": {
													"id": 82,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 76,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "742:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 79,
															"indexExpression": {
																"id": 77,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 52,
																"src": "756:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "742:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 80,
														"indexExpression": {
															"id": 78,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 54,
															"src": "760:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "742:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 81,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "771:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "742:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 83,
												"nodeType": "ExpressionStatement",
												"src": "742:30:0"
											}
										]
									},
									"functionSelector": "f9c775ea",
									"id": 85,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 57,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 56,
												"name": "onlyTradingContract",
												"nameLocations": [
													"607:19:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 19,
												"src": "607:19:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "607:19:0"
										}
									],
									"name": "addCard",
									"nameLocation": "565:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "581:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "573:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 51,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "573:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 54,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "590:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "585:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 53,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "585:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "572:25:0"
									},
									"returnParameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "627:0:0"
									},
									"scope": 168,
									"src": "556:224:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 132,
										"nodeType": "Block",
										"src": "892:228:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 99,
																"name": "cardId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 91,
																"src": "911:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "39",
																"id": 100,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "920:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_9_by_1",
																	"typeString": "int_const 9"
																},
																"value": "9"
															},
															"src": "911:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642063617264204944",
															"id": 102,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "923:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															},
															"value": "Invalid card ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															}
														],
														"id": 98,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "903:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "903:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "903:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 112,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 106,
																		"name": "cardInventory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 7,
																		"src": "960:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																			"typeString": "mapping(address => uint256[9] storage ref)"
																		}
																	},
																	"id": 108,
																	"indexExpression": {
																		"id": 107,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 87,
																		"src": "974:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "960:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$9_storage",
																		"typeString": "uint256[9] storage ref"
																	}
																},
																"id": 110,
																"indexExpression": {
																	"id": 109,
																	"name": "cardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 91,
																	"src": "980:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "960:27:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 111,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 93,
																"src": "991:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "960:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420656e6f756768206361726473",
															"id": 113,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "999:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c",
																"typeString": "literal_string \"Not enough cards\""
															},
															"value": "Not enough cards"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c",
																"typeString": "literal_string \"Not enough cards\""
															}
														],
														"id": 105,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "952:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "952:66:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 115,
												"nodeType": "ExpressionStatement",
												"src": "952:66:0"
											},
											{
												"expression": {
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 116,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "1029:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 119,
															"indexExpression": {
																"id": 117,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 87,
																"src": "1043:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1029:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 120,
														"indexExpression": {
															"id": 118,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 91,
															"src": "1049:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1029:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 121,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 93,
														"src": "1060:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1029:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 123,
												"nodeType": "ExpressionStatement",
												"src": "1029:37:0"
											},
											{
												"expression": {
													"id": 130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 124,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "1077:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 127,
															"indexExpression": {
																"id": 125,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 89,
																"src": "1091:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1077:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 128,
														"indexExpression": {
															"id": 126,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 91,
															"src": "1095:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1077:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 129,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 93,
														"src": "1106:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1077:35:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 131,
												"nodeType": "ExpressionStatement",
												"src": "1077:35:0"
											}
										]
									},
									"functionSelector": "65352442",
									"id": 133,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 96,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 95,
												"name": "onlyTradingContract",
												"nameLocations": [
													"872:19:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 19,
												"src": "872:19:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "872:19:0"
										}
									],
									"name": "transferCards",
									"nameLocation": "797:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "819:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "811:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "811:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "833:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "825:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 88,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "825:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "842:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "837:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 90,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "837:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "855:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "850:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 92,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "850:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "810:52:0"
									},
									"returnParameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:0:0"
									},
									"scope": 168,
									"src": "788:332:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 146,
										"nodeType": "Block",
										"src": "1203:45:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 142,
														"name": "cardInventory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "1221:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
															"typeString": "mapping(address => uint256[9] storage ref)"
														}
													},
													"id": 144,
													"indexExpression": {
														"id": 143,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 135,
														"src": "1235:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1221:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$9_storage",
														"typeString": "uint256[9] storage ref"
													}
												},
												"functionReturnParameters": 141,
												"id": 145,
												"nodeType": "Return",
												"src": "1214:26:0"
											}
										]
									},
									"functionSelector": "8b87c544",
									"id": 147,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getInventory",
									"nameLocation": "1137:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1158:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "1150:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1150:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1149:14:0"
									},
									"returnParameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "1187:14:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
													"typeString": "uint256[9]"
												},
												"typeName": {
													"baseType": {
														"id": 137,
														"name": "uint",
														"nodeType": "ElementaryTypeName",
														"src": "1187:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 139,
													"length": {
														"hexValue": "39",
														"id": 138,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1192:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_9_by_1",
															"typeString": "int_const 9"
														},
														"value": "9"
													},
													"nodeType": "ArrayTypeName",
													"src": "1187:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$9_storage_ptr",
														"typeString": "uint256[9]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:16:0"
									},
									"scope": 168,
									"src": "1128:120:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "1342:63:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"baseExpression": {
																"id": 158,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "1360:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 160,
															"indexExpression": {
																"id": 159,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 149,
																"src": "1374:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1360:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 162,
														"indexExpression": {
															"id": 161,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 151,
															"src": "1380:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1360:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 163,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 153,
														"src": "1391:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1360:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 157,
												"id": 165,
												"nodeType": "Return",
												"src": "1353:44:0"
											}
										]
									},
									"functionSelector": "4dca8ce6",
									"id": 167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasCard",
									"nameLocation": "1265:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1281:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1273:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 148,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1273:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "1292:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1287:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1287:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1305:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1300:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 152,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1300:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1272:40:0"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1336:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 155,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1336:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1335:6:0"
									},
									"scope": 168,
									"src": "1256:149:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 169,
							"src": "60:1348:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:1377:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}