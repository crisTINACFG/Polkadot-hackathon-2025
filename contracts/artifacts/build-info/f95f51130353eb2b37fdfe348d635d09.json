{
	"id": "f95f51130353eb2b37fdfe348d635d09",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"InventoryManager.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract InventoryManager {\r\n    mapping(address => uint[9]) public cardInventory;\r\n    \r\n    // Add owner variable to track contract owner\r\n    address public owner;\r\n\r\n    // No more modifier - we'll remove all authorization checks\r\n    \r\n    address public tradingContract;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        tradingContract = msg.sender;\r\n    }\r\n\r\n    // Allow the owner to update the trading contract at any time\r\n    function setTradingContract(address _contract) external {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        tradingContract = _contract;\r\n    }\r\n\r\n    // Anyone can add cards\r\n    function addCard(address to, uint cardId) external {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(cardId < 9, \"Invalid card ID\");\r\n        cardInventory[to][cardId] += 1;\r\n    }\r\n\r\n    // Anyone can transfer cards - this is needed for the trading to work\r\n    function transferCards(address from, address to, uint cardId, uint amount) external {\r\n        require(cardId < 9, \"Invalid card ID\");\r\n        require(cardInventory[from][cardId] >= amount, \"Not enough cards\");\r\n        cardInventory[from][cardId] -= amount;\r\n        cardInventory[to][cardId] += amount;\r\n    }\r\n\r\n    function getInventory(address user) external view returns (uint[9] memory) {\r\n        return cardInventory[user];\r\n    }\r\n\r\n    function hasCard(address user, uint cardId, uint amount) external view returns (bool) {\r\n        return cardInventory[user][cardId] >= amount;\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"InventoryManager.sol": {
				"InventoryManager": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								}
							],
							"name": "addCard",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "cardInventory",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getInventory",
							"outputs": [
								{
									"internalType": "uint256[9]",
									"name": "",
									"type": "uint256[9]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "hasCard",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								}
							],
							"name": "setTradingContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tradingContract",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferCards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardInventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInventory\",\"outputs\":[{\"internalType\":\"uint256[9]\",\"name\":\"\",\"type\":\"uint256[9]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hasCard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTradingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"InventoryManager.sol\":\"InventoryManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"InventoryManager.sol\":{\"keccak256\":\"0xa96683eb02a4779ce5c7f871c807d3d007f9bc4afcf1dbdf31c12dd0835d75aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f23b7d60ef85292d1264f9975535448099789264e2a59ea57730fb05d5d004a\",\"dweb:/ipfs/QmdLtXzLqk64TSEXxLkyWAyrc1HWnBarTdq3LSBjt8NXY3\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "InventoryManager.sol:InventoryManager",
								"label": "cardInventory",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_array(t_uint256)9_storage)"
							},
							{
								"astId": 9,
								"contract": "InventoryManager.sol:InventoryManager",
								"label": "owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 11,
								"contract": "InventoryManager.sol:InventoryManager",
								"label": "tradingContract",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)9_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[9]",
								"numberOfBytes": "288"
							},
							"t_mapping(t_address,t_array(t_uint256)9_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256[9])",
								"numberOfBytes": "32",
								"value": "t_array(t_uint256)9_storage"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 8996\n// Code size = 28251 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 2 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @29\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 9 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @21 if a0 != 0\n      : @17 (gas: 117)\n   504: ra = 0xa\n   507: sp = sp + 0xffffffffffffff20\n   511: u64 [sp + 0xd8] = ra\n   515: u64 [sp + 0xd0] = s0\n   519: u64 [sp + 0xc8] = s1\n   523: s0 = sp + 0xe0\n   527: sp = sp & 0xffffffffffffffe0\n   530: i32 a0 = sp + 0x20\n   533: ecalli 3 // 'caller'\n   535: a0 = u64 [sp + 0x28]\n   538: a1 = i32 [sp + 0x30]\n   541: a2 = u64 [sp + 0x20]\n   544: a0 = reverse a0\n   546: a3 = a0 << 0x20\n   549: a1 = reverse a1\n   551: a1 = a1 >> 0x20\n   554: a1 = a1 | a3\n   557: u64 [sp + 0x18] = a1\n   560: a0 = a0 >> 0x20\n   563: s1 = reverse a2\n   565: a1 = s1 << 0x20\n   568: a0 = a0 | a1\n   571: u64 [sp + 0x10] = a0\n   574: s1 = s1 >> 0x20\n   577: u64 [sp + 152] = 0\n   581: u64 [sp + 144] = 0\n   585: u64 [sp + 136] = 0\n   589: u64 [sp + 128] = 0x1\n   594: u64 [sp + 184] = 0\n   598: u64 [sp + 176] = 0\n   602: u64 [sp + 168] = 0\n   606: u64 [sp + 160] = 0\n   610: u32 [sp + 96] = 0x20\n   614: i32 a1 = sp + 0x80\n   618: i32 a3 = sp + 0xa0\n   622: i32 a4 = sp + 0x60\n   625: a2 = 0xffffffffffffffff\n   628: a0 = 0\n   630: ecalli 4 // 'get_storage'\n   632: a0 = u32 [sp + 0xb4]\n   636: a0 = a0 << 0x20\n   639: a1 = u64 [sp + 0xb8]\n   643: a0 = a0 | s1\n   646: u64 [sp + 152] = 0\n   650: u64 [sp + 144] = 0\n   654: u64 [sp + 136] = 0\n   658: u64 [sp + 128] = 0x1\n   663: u64 [sp + 0xb8] = a1\n   667: u64 [sp + 0xb0] = a0\n   671: a0 = u64 [sp + 0x10]\n   674: u64 [sp + 0xa8] = a0\n   678: a0 = u64 [sp + 0x18]\n   681: u64 [sp + 0xa0] = a0\n   685: i32 a1 = sp + 0x80\n   689: i32 a3 = sp + 0xa0\n   693: a2 = 0xffffffffffffffff\n   696: a4 = 0x20\n   699: a0 = 0\n   701: ecalli 8 // 'set_storage'\n   703: i32 a0 = sp + 0x40\n   706: ecalli 3 // 'caller'\n   708: a0 = u64 [sp + 0x48]\n   711: a1 = i32 [sp + 0x50]\n   714: a2 = u64 [sp + 0x40]\n   717: a0 = reverse a0\n   719: a3 = a0 << 0x20\n   722: a1 = reverse a1\n   724: a1 = a1 >> 0x20\n   727: a1 = a1 | a3\n   730: u64 [sp + 0x18] = a1\n   733: a0 = a0 >> 0x20\n   736: s1 = reverse a2\n   738: a1 = s1 << 0x20\n   741: a0 = a0 | a1\n   744: u64 [sp + 0x10] = a0\n   747: s1 = s1 >> 0x20\n   750: u64 [sp + 152] = 0\n   754: u64 [sp + 144] = 0\n   758: u64 [sp + 136] = 0\n   762: u64 [sp + 128] = 0x2\n   767: u64 [sp + 184] = 0\n   771: u64 [sp + 176] = 0\n   775: u64 [sp + 168] = 0\n   779: u64 [sp + 160] = 0\n   783: u32 [sp + 96] = 0x20\n   787: i32 a1 = sp + 0x80\n   791: i32 a3 = sp + 0xa0\n   795: i32 a4 = sp + 0x60\n   798: a2 = 0xffffffffffffffff\n   801: a0 = 0\n   803: ecalli 4 // 'get_storage'\n   805: a0 = u32 [sp + 0xb4]\n   809: a0 = a0 << 0x20\n   812: a1 = u64 [sp + 0xb8]\n   816: a0 = a0 | s1\n   819: u64 [sp + 152] = 0\n   823: u64 [sp + 144] = 0\n   827: u64 [sp + 136] = 0\n   831: u64 [sp + 128] = 0x2\n   836: u64 [sp + 0xb8] = a1\n   840: u64 [sp + 0xb0] = a0\n   844: a0 = u64 [sp + 0x10]\n   847: u64 [sp + 0xa8] = a0\n   851: a0 = u64 [sp + 0x18]\n   854: u64 [sp + 0xa0] = a0\n   858: i32 a1 = sp + 0x80\n   862: i32 a3 = sp + 0xa0\n   866: a2 = 0xffffffffffffffff\n   869: a4 = 0x20\n   872: a0 = 0\n   874: ecalli 8 // 'set_storage'\n   876: sp = s0 + 0xffffffffffffff20\n   880: ra = u64 [sp + 0xd8]\n   884: s0 = u64 [sp + 0xd0]\n   888: s1 = u64 [sp + 0xc8]\n   892: sp = sp + 0xe0\n   896: ret\n      : @18 [@dyn 5] (gas: 3)\n   898: a0 = 0x40\n   901: a1 = 0x20\n   904: ra = 12, jump @0\n      : @19 [@dyn 6] (gas: 100)\n   909: a1 = u8 [a0 + 0x11]\n   912: a2 = u8 [a0 + 0x10]\n   915: a3 = u8 [a0 + 0x12]\n   918: a4 = u8 [a0 + 0x13]\n   921: a1 = a1 << 0x8\n   924: a1 = a1 | a2\n   927: a3 = a3 << 0x10\n   930: a4 = a4 << 0x18\n   933: a3 = a3 | a4\n   936: a1 = a1 | a3\n   939: a2 = u8 [a0 + 0x15]\n   942: a3 = u8 [a0 + 0x14]\n   945: a4 = u8 [a0 + 0x16]\n   948: a5 = u8 [a0 + 0x17]\n   951: a2 = a2 << 0x8\n   954: a2 = a2 | a3\n   957: a4 = a4 << 0x10\n   960: a5 = a5 << 0x18\n   963: a4 = a4 | a5\n   966: a2 = a2 | a4\n   969: a2 = a2 << 0x20\n   972: t0 = a2 | a1\n   975: a2 = u8 [a0 + 0x1]\n   978: a3 = u8 [a0]\n   980: a4 = u8 [a0 + 0x2]\n   983: a5 = u8 [a0 + 0x3]\n   986: a2 = a2 << 0x8\n   989: a2 = a2 | a3\n   992: a4 = a4 << 0x10\n   995: a5 = a5 << 0x18\n   998: a4 = a4 | a5\n  1001: a2 = a2 | a4\n  1004: a3 = u8 [a0 + 0x5]\n  1007: a4 = u8 [a0 + 0x4]\n  1010: a5 = u8 [a0 + 0x6]\n  1013: s1 = u8 [a0 + 0x7]\n  1016: a3 = a3 << 0x8\n  1019: a3 = a3 | a4\n  1022: a5 = a5 << 0x10\n  1025: s1 = s1 << 0x18\n  1028: a5 = a5 | s1\n  1031: a3 = a3 | a5\n  1034: a3 = a3 << 0x20\n  1037: a2 = a2 | a3\n  1040: a3 = u8 [a0 + 0x19]\n  1043: a4 = u8 [a0 + 0x18]\n  1046: a5 = u8 [a0 + 0x1a]\n  1049: s1 = u8 [a0 + 0x1b]\n  1052: a3 = a3 << 0x8\n  1055: a3 = a3 | a4\n  1058: a5 = a5 << 0x10\n  1061: s1 = s1 << 0x18\n  1064: a5 = a5 | s1\n  1067: a3 = a3 | a5\n  1070: a4 = u8 [a0 + 0x1d]\n  1073: a5 = u8 [a0 + 0x1c]\n  1076: s1 = u8 [a0 + 0x1e]\n  1079: a1 = u8 [a0 + 0x1f]\n  1082: a4 = a4 << 0x8\n  1085: a4 = a4 | a5\n  1088: s1 = s1 << 0x10\n  1091: a1 = a1 << 0x18\n  1094: a1 = a1 | s1\n  1097: a1 = a1 | a4\n  1100: a1 = a1 << 0x20\n  1103: a3 = a3 | a1\n  1106: a1 = u8 [a0 + 0x9]\n  1109: a4 = u8 [a0 + 0x8]\n  1112: a5 = u8 [a0 + 0xa]\n  1115: s1 = u8 [a0 + 0xb]\n  1118: a1 = a1 << 0x8\n  1121: a1 = a1 | a4\n  1124: a5 = a5 << 0x10\n  1127: s1 = s1 << 0x18\n  1130: a5 = a5 | s1\n  1133: a1 = a1 | a5\n  1136: a4 = u8 [a0 + 0xd]\n  1139: a5 = u8 [a0 + 0xc]\n  1142: s1 = u8 [a0 + 0xe]\n  1145: a0 = u8 [a0 + 0xf]\n  1148: a4 = a4 << 0x8\n  1151: a4 = a4 | a5\n  1154: s1 = s1 << 0x10\n  1157: a0 = a0 << 0x18\n  1160: a0 = a0 | s1\n  1163: a0 = a0 | a4\n  1166: a0 = a0 << 0x20\n  1169: a0 = a0 | a1\n  1172: a0 = reverse a0\n  1174: s1 = reverse a3\n  1176: a1 = reverse a2\n  1178: a2 = reverse t0\n  1180: a1 = a1 | a2\n  1183: a2 = s1 | a0\n  1186: a2 = a2 | a1\n  1189: a2 = a2 >> 0x20\n  1192: a0 = a0 | a1\n  1195: a0 = a0 << 0x20\n  1198: a0 = a0 | a2\n  1201: jump @23 if a0 == 0\n      : @20 (gas: 1)\n  1204: trap\n      : @21 (gas: 3)\n  1205: a0 = 0\n  1207: a1 = 0\n  1209: ra = 14, jump @0\n      : @22 [@dyn 7] (gas: 5)\n  1214: i32 a1 = a0 + 0\n  1216: a0 = 0x1\n  1219: a2 = 0\n  1221: ecalli 6 // 'seal_return'\n  1223: fallthrough\n      : @23 (gas: 4)\n  1224: i32 s1 = s1 + 0\n  1226: a0 = s1\n  1228: a1 = 0\n  1230: ra = 16, jump @0\n      : @24 [@dyn 8] (gas: 5)\n  1235: i32 a0 = a0 + 0\n  1237: a1 = 0\n  1239: a2 = 0\n  1241: ecalli 0 // 'call_data_copy'\n  1242: fallthrough\n      : @25 (gas: 2)\n  1243: a1 = i32 [0x20008]\n  1248: jump @27 if a1 == 0\n      : @26 (gas: 4)\n  1251: a0 = 0x30010\n  1256: i32 a0 = a0 + 0\n  1258: ecalli 7 // 'set_immutable_data'\n  1260: fallthrough\n      : @27 (gas: 3)\n  1261: a0 = s1\n  1263: a1 = 0\n  1265: ra = 18, jump @0\n      : @28 [@dyn 9] (gas: 6)\n  1270: i32 a1 = a0 + 0\n  1272: a0 = 0\n  1274: a2 = 0\n  1276: ra = 0x14\n  1279: ecalli 6 // 'seal_return'\n  1281: fallthrough\n      : @29 [@dyn 10] (gas: 8)\n  1282: sp = sp + 0xffffffffffffffc0\n  1285: u64 [sp + 0x38] = ra\n  1288: u64 [sp + 0x30] = s0\n  1291: s0 = sp + 0x40\n  1294: sp = sp & 0xffffffffffffffe0\n  1297: a0 = 0x40\n  1300: a1 = 0x20\n  1303: ra = 22, jump @0\n      : @30 [@dyn 11] (gas: 34)\n  1308: u8 [a0 + 31] = 0x80\n  1313: u8 [a0 + 30] = 0\n  1316: u8 [a0 + 29] = 0\n  1319: u8 [a0 + 28] = 0\n  1322: u8 [a0 + 27] = 0\n  1325: u8 [a0 + 26] = 0\n  1328: u8 [a0 + 25] = 0\n  1331: u8 [a0 + 24] = 0\n  1334: u8 [a0 + 23] = 0\n  1337: u8 [a0 + 22] = 0\n  1340: u8 [a0 + 21] = 0\n  1343: u8 [a0 + 20] = 0\n  1346: u8 [a0 + 19] = 0\n  1349: u8 [a0 + 18] = 0\n  1352: u8 [a0 + 17] = 0\n  1355: u8 [a0 + 16] = 0\n  1358: u8 [a0 + 15] = 0\n  1361: u8 [a0 + 14] = 0\n  1364: u8 [a0 + 13] = 0\n  1367: u8 [a0 + 12] = 0\n  1370: u8 [a0 + 11] = 0\n  1373: u8 [a0 + 10] = 0\n  1376: u8 [a0 + 9] = 0\n  1379: u8 [a0 + 8] = 0\n  1382: u8 [a0 + 7] = 0\n  1385: u8 [a0 + 3] = 0\n  1388: u8 [a0 + 2] = 0\n  1391: u8 [a0 + 1] = 0\n  1394: u8 [a0 + 0] = 0\n  1396: a1 = i32 [0x20004]\n  1401: u8 [a0 + 6] = 0\n  1404: u8 [a0 + 5] = 0\n  1407: u8 [a0 + 4] = 0\n  1410: jump @47 if a1 <u 4\n      : @31 (gas: 4)\n  1415: i32 a0 = sp + 0\n  1417: a1 = 0\n  1419: ecalli 1 // 'call_data_load'\n  1421: fallthrough\n      : @32 (gas: 2)\n  1422: a0 = i32 [sp + 0x1c]\n  1425: jump @37 if a0 >s 1305119973\n      : @33 (gas: 2)\n  1432: a1 = 0xffffffff9e4bd000\n  1438: jump @41 if a0 >s 2655769320\n      : @34 (gas: 1)\n  1446: jump @48 if a0 == 2340930884\n      : @35 (gas: 1)\n  1454: jump @47 if a0 != 2376452955\n      : @36 (gas: 14)\n  1462: ra = 0x18\n  1465: sp = sp + 0xffffffffffffff60\n  1469: u64 [sp + 0x98] = ra\n  1473: u64 [sp + 0x90] = s0\n  1477: u64 [sp + 0x88] = s1\n  1481: s0 = sp + 0xa0\n  1485: sp = sp & 0xffffffffffffffe0\n  1488: u64 [sp + 56] = 0\n  1491: u64 [sp + 48] = 0\n  1494: u64 [sp + 40] = 0\n  1497: u64 [sp + 32] = 0\n  1500: i32 a0 = sp + 0x20\n  1503: ecalli 9 // 'value_transferred'\n  1505: jump @214\n      : @37 [@dyn 12] (gas: 2)\n  1508: a1 = 0x5be6f000\n  1514: jump @44 if a0 >s 1541862086\n      : @38 (gas: 1)\n  1521: jump @49 if a0 == 1305119974\n      : @39 (gas: 1)\n  1529: jump @47 if a0 != 1347944562\n      : @40 (gas: 14)\n  1536: ra = 0x1a\n  1539: sp = sp + 0xfffffffffffffec0\n  1543: u64 [sp + 0x138] = ra\n  1547: u64 [sp + 0x130] = s0\n  1551: u64 [sp + 0x128] = s1\n  1555: s0 = sp + 0x140\n  1559: sp = sp & 0xffffffffffffffe0\n  1562: u64 [sp + 280] = 0\n  1566: u64 [sp + 272] = 0\n  1570: u64 [sp + 264] = 0\n  1574: u64 [sp + 256] = 0\n  1578: i32 a0 = sp + 0x100\n  1582: ecalli 9 // 'value_transferred'\n  1584: jump @98\n      : @41 [@dyn 13] (gas: 2)\n  1587: i32 a1 = a1 + 0x2e9\n  1591: jump @50 if a0 == a1\n      : @42 (gas: 1)\n  1595: jump @47 if a0 != 4190598634\n      : @43 (gas: 1)\n  1602: ra = 28, jump @235\n      : @44 [@dyn 14] (gas: 2)\n  1607: i32 a1 = a1 + 0x2c7\n  1611: jump @51 if a0 == a1\n      : @45 (gas: 1)\n  1615: jump @47 if a0 != 1697981506\n      : @46 (gas: 1)\n  1622: ra = 30, jump @144\n      : @47 [@dyn 15] (gas: 1)\n  1627: ra = 32, jump @246\n      : @48 [@dyn 16] (gas: 14)\n  1632: ra = 0x22\n  1635: sp = sp + 0xfffffffffffffee0\n  1639: u64 [sp + 0x118] = ra\n  1643: u64 [sp + 0x110] = s0\n  1647: u64 [sp + 0x108] = s1\n  1651: s0 = sp + 0x120\n  1655: sp = sp & 0xffffffffffffffe0\n  1658: u64 [sp + 216] = 0\n  1662: u64 [sp + 208] = 0\n  1666: u64 [sp + 200] = 0\n  1670: u64 [sp + 192] = 0\n  1674: i32 a0 = sp + 0xc0\n  1678: ecalli 9 // 'value_transferred'\n  1680: jump @196\n      : @49 [@dyn 17] (gas: 14)\n  1683: ra = 0x24\n  1686: sp = sp + 0xfffffffffffffe80\n  1690: u64 [sp + 0x178] = ra\n  1694: u64 [sp + 0x170] = s0\n  1698: u64 [sp + 0x168] = s1\n  1702: s0 = sp + 0x180\n  1706: sp = sp & 0xffffffffffffffe0\n  1709: u64 [sp + 344] = 0\n  1713: u64 [sp + 336] = 0\n  1717: u64 [sp + 328] = 0\n  1721: u64 [sp + 320] = 0\n  1725: i32 a0 = sp + 0x140\n  1729: ecalli 9 // 'value_transferred'\n  1731: jump @66\n      : @50 [@dyn 18] (gas: 14)\n  1734: ra = 0x26\n  1737: sp = sp + 0xffffffffffffff60\n  1741: u64 [sp + 0x98] = ra\n  1745: u64 [sp + 0x90] = s0\n  1749: u64 [sp + 0x88] = s1\n  1753: s0 = sp + 0xa0\n  1757: sp = sp & 0xffffffffffffffe0\n  1760: u64 [sp + 56] = 0\n  1763: u64 [sp + 48] = 0\n  1766: u64 [sp + 40] = 0\n  1769: u64 [sp + 32] = 0\n  1772: i32 a0 = sp + 0x20\n  1775: ecalli 9 // 'value_transferred'\n  1777: jump @225\n      : @51 [@dyn 19] (gas: 13)\n  1780: ra = 0x28\n  1783: sp = sp + 0xffffffffffffff80\n  1786: u64 [sp + 0x78] = ra\n  1789: u64 [sp + 0x70] = s0\n  1792: s0 = sp + 0x80\n  1796: sp = sp & 0xffffffffffffffe0\n  1799: u64 [sp + 56] = 0\n  1802: u64 [sp + 48] = 0\n  1805: u64 [sp + 40] = 0\n  1808: u64 [sp + 32] = 0\n  1811: i32 a0 = sp + 0x20\n  1814: ecalli 9 // 'value_transferred'\n  1816: jump @118\n      : @52 [@dyn 20] (gas: 7)\n  1819: sp = sp + 0xfffffffffffffff0\n  1822: u64 [sp + 0x8] = ra\n  1825: u64 [sp] = s0\n  1827: s0 = a0\n  1829: a0 = 0x40\n  1832: a1 = 0x20\n  1835: ra = 42, jump @0\n      : @53 [@dyn 21] (gas: 100)\n  1840: a1 = u8 [a0 + 0x1]\n  1843: a2 = u8 [a0]\n  1845: a3 = u8 [a0 + 0x2]\n  1848: a4 = u8 [a0 + 0x3]\n  1851: a1 = a1 << 0x8\n  1854: a1 = a1 | a2\n  1857: a3 = a3 << 0x10\n  1860: a4 = a4 << 0x18\n  1863: a3 = a3 | a4\n  1866: a1 = a1 | a3\n  1869: a2 = u8 [a0 + 0x5]\n  1872: a3 = u8 [a0 + 0x4]\n  1875: a4 = u8 [a0 + 0x6]\n  1878: a5 = u8 [a0 + 0x7]\n  1881: a2 = a2 << 0x8\n  1884: a2 = a2 | a3\n  1887: a4 = a4 << 0x10\n  1890: a5 = a5 << 0x18\n  1893: a4 = a4 | a5\n  1896: a2 = a2 | a4\n  1899: a2 = a2 << 0x20\n  1902: t0 = a2 | a1\n  1905: a2 = u8 [a0 + 0x9]\n  1908: a3 = u8 [a0 + 0x8]\n  1911: a4 = u8 [a0 + 0xa]\n  1914: a5 = u8 [a0 + 0xb]\n  1917: a2 = a2 << 0x8\n  1920: a2 = a2 | a3\n  1923: a4 = a4 << 0x10\n  1926: a5 = a5 << 0x18\n  1929: a4 = a4 | a5\n  1932: a2 = a2 | a4\n  1935: a3 = u8 [a0 + 0xd]\n  1938: a4 = u8 [a0 + 0xc]\n  1941: a5 = u8 [a0 + 0xe]\n  1944: a1 = u8 [a0 + 0xf]\n  1947: a3 = a3 << 0x8\n  1950: a3 = a3 | a4\n  1953: a5 = a5 << 0x10\n  1956: a1 = a1 << 0x18\n  1959: a1 = a1 | a5\n  1962: a1 = a1 | a3\n  1965: a1 = a1 << 0x20\n  1968: t1 = a1 | a2\n  1971: a1 = u8 [a0 + 0x11]\n  1974: a3 = u8 [a0 + 0x10]\n  1977: a4 = u8 [a0 + 0x12]\n  1980: a5 = u8 [a0 + 0x13]\n  1983: a1 = a1 << 0x8\n  1986: a1 = a1 | a3\n  1989: a4 = a4 << 0x10\n  1992: a5 = a5 << 0x18\n  1995: a4 = a4 | a5\n  1998: a1 = a1 | a4\n  2001: a3 = u8 [a0 + 0x15]\n  2004: a4 = u8 [a0 + 0x14]\n  2007: a5 = u8 [a0 + 0x16]\n  2010: a2 = u8 [a0 + 0x17]\n  2013: a3 = a3 << 0x8\n  2016: a3 = a3 | a4\n  2019: a5 = a5 << 0x10\n  2022: a2 = a2 << 0x18\n  2025: a2 = a2 | a5\n  2028: a2 = a2 | a3\n  2031: a2 = a2 << 0x20\n  2034: a3 = a2 | a1\n  2037: a1 = u8 [a0 + 0x19]\n  2040: a2 = u8 [a0 + 0x18]\n  2043: a4 = u8 [a0 + 0x1a]\n  2046: a5 = u8 [a0 + 0x1b]\n  2049: a1 = a1 << 0x8\n  2052: a1 = a1 | a2\n  2055: a4 = a4 << 0x10\n  2058: a5 = a5 << 0x18\n  2061: a4 = a4 | a5\n  2064: a1 = a1 | a4\n  2067: a2 = u8 [a0 + 0x1d]\n  2070: a4 = u8 [a0 + 0x1c]\n  2073: a5 = u8 [a0 + 0x1e]\n  2076: a0 = u8 [a0 + 0x1f]\n  2079: a2 = a2 << 0x8\n  2082: a2 = a2 | a4\n  2085: a5 = a5 << 0x10\n  2088: a0 = a0 << 0x18\n  2091: a0 = a0 | a5\n  2094: a0 = a0 | a2\n  2097: a0 = a0 << 0x20\n  2100: a0 = a0 | a1\n  2103: a0 = reverse a0\n  2105: a1 = reverse a3\n  2107: a2 = reverse t1\n  2109: a3 = reverse t0\n  2111: u64 [s0 + 0x18] = a3\n  2114: u64 [s0 + 0x10] = a2\n  2117: u64 [s0 + 0x8] = a1\n  2120: u64 [s0] = a0\n  2122: ra = u64 [sp + 0x8]\n  2125: s0 = u64 [sp]\n  2127: sp = sp + 0x10\n  2130: ret\n      : @54 (gas: 47)\n  2132: sp = sp + 0xffffffffffffff60\n  2136: u64 [sp + 0x98] = ra\n  2140: u64 [sp + 0x90] = s0\n  2144: u64 [sp + 0x88] = s1\n  2148: s0 = sp + 0xa0\n  2152: sp = sp & 0xffffffffffffffe0\n  2155: t0 = u64 [a1 + 0x10]\n  2158: a5 = u64 [a1 + 0x8]\n  2161: a3 = u64 [a2 + 0x8]\n  2164: ra = u64 [a1]\n  2166: a4 = u64 [a2]\n  2168: u64 [sp + 0x48] = a4\n  2171: t2 = u64 [a2 + 0x10]\n  2174: t1 = a3 ^ a5\n  2177: s1 = a3 <u a5\n  2180: a4 = a4 <u ra\n  2183: u64 [sp + 0x40] = a4\n  2186: s1 = a4 if t1 == 0\n  2189: t1 = u64 [a1 + 0x18]\n  2192: a1 = u64 [a2 + 0x18]\n  2195: u64 [sp + 0x38] = a1\n  2198: a2 = t2 - t0\n  2201: a1 = a2 - s1\n  2204: u64 [sp + 0x50] = a1\n  2207: a1 = a2 <u s1\n  2210: a4 = t2 <u t0\n  2213: u64 [sp + 0x58] = t1\n  2216: a2 = u64 [sp + 0x38]\n  2219: a2 = a2 - t1\n  2222: a2 = a2 - a4\n  2225: a2 = a2 - a1\n  2228: a1 = a3 - a5\n  2231: a3 = u64 [sp + 0x40]\n  2234: a1 = a1 - a3\n  2237: a3 = u64 [sp + 0x48]\n  2240: a3 = a3 - ra\n  2243: a4 = a1 >u 0\n  2245: a3 = a3 <u 0x60\n  2248: a3 = a3 ^ 0x1\n  2251: a3 = a4 if a1 != 0\n  2254: s1 = a2 >s 0\n  2256: a1 = u64 [sp + 0x50]\n  2259: a4 = a1 >u 0\n  2261: a4 = s1 if a2 != 0\n  2264: a1 = a1 | a2\n  2267: a3 = a4 if a1 != 0\n  2270: jump @63 if a3 == 0\n      : @55 (gas: 12)\n  2274: s1 = a0\n  2276: a0 = ra | t0\n  2279: u64 [sp + 0x50] = a5\n  2282: a1 = u64 [sp + 0x58]\n  2285: a1 = a1 | a5\n  2288: a0 = a0 | a1\n  2291: a0 = a0 >> 0x20\n  2294: u64 [sp + 0x38] = t0\n  2297: a1 = a1 | t0\n  2300: a1 = a1 << 0x20\n  2303: a0 = a0 | a1\n  2306: jump @62 if a0 != 0\n      : @56 (gas: 6)\n  2310: u64 [sp + 0x48] = ra\n  2313: i32 a1 = ra + 0\n  2315: i32 a0 = sp + 0x60\n  2318: u64 [sp + 0x40] = a1\n  2321: ecalli 1 // 'call_data_load'\n  2323: fallthrough\n      : @57 (gas: 10)\n  2324: a3 = u64 [sp + 0x70]\n  2327: a4 = u64 [sp + 0x78]\n  2330: a0 = 0x100000000\n  2340: a1 = a3 ^ a0\n  2343: a1 = a1 | a4\n  2346: a2 = a3 >> 0x20\n  2349: a2 = a2 <u 0x1\n  2352: a2 = 0 if a4 != 0\n  2354: a2 = 0 if a1 == 0\n  2356: jump @63 if a2 == 0\n      : @58 (gas: 13)\n  2360: u64 [sp + 0x28] = a4\n  2363: u64 [sp + 0x30] = a3\n  2366: a1 = u64 [sp + 0x38]\n  2369: a2 = u64 [sp + 0x58]\n  2372: a2 = a2 | a1\n  2375: a0 = 0xffffffe0\n  2385: a1 = u64 [sp + 0x48]\n  2388: a0 = a1 <u a0\n  2391: a1 = u64 [sp + 0x50]\n  2394: a0 = 0 if a1 != 0\n  2396: u64 [sp + 0x58] = a2\n  2399: a0 = 0 if a2 != 0\n  2401: jump @62 if a0 == 0\n      : @59 (gas: 9)\n  2405: a0 = u64 [sp + 0x68]\n  2408: u64 [sp + 0x20] = a0\n  2411: a0 = u64 [sp + 0x60]\n  2414: u64 [sp + 0x38] = a0\n  2417: a0 = u64 [sp + 0x40]\n  2420: i32 a1 = a0 + 0x20\n  2423: i32 a0 = sp + 0x60\n  2426: ecalli 1 // 'call_data_load'\n  2428: fallthrough\n      : @60 (gas: 8)\n  2429: a0 = 0xffffffc0\n  2439: a1 = u64 [sp + 0x48]\n  2442: a0 = a1 <u a0\n  2445: a1 = u64 [sp + 0x50]\n  2448: a0 = 0 if a1 != 0\n  2450: a1 = u64 [sp + 0x58]\n  2453: a0 = 0 if a1 != 0\n  2455: jump @62 if a0 == 0\n      : @61 (gas: 42)\n  2459: a0 = u64 [sp + 0x78]\n  2462: u64 [sp + 0x18] = a0\n  2465: a0 = u64 [sp + 0x70]\n  2468: u64 [sp + 0x48] = a0\n  2471: a0 = u64 [sp + 0x68]\n  2474: u64 [sp + 0x50] = a0\n  2477: a0 = u64 [sp + 0x60]\n  2480: u64 [sp + 0x58] = a0\n  2483: a0 = u64 [sp + 0x40]\n  2486: i32 a1 = a0 + 0x40\n  2489: i32 a0 = sp + 0x60\n  2492: ecalli 1 // 'call_data_load'\n  2494: a0 = u64 [sp + 0x78]\n  2497: a1 = u64 [sp + 0x70]\n  2500: a2 = u64 [sp + 0x68]\n  2503: a3 = u64 [sp + 0x60]\n  2506: u64 [s1 + 0x58] = a0\n  2509: u64 [s1 + 0x50] = a1\n  2512: u64 [s1 + 0x48] = a2\n  2515: u64 [s1 + 0x40] = a3\n  2518: a0 = u64 [sp + 0x18]\n  2521: u64 [s1 + 0x38] = a0\n  2524: a0 = u64 [sp + 0x48]\n  2527: u64 [s1 + 0x30] = a0\n  2530: a0 = u64 [sp + 0x50]\n  2533: u64 [s1 + 0x28] = a0\n  2536: a0 = u64 [sp + 0x58]\n  2539: u64 [s1 + 0x20] = a0\n  2542: a0 = u64 [sp + 0x28]\n  2545: u64 [s1 + 0x18] = a0\n  2548: a0 = u64 [sp + 0x30]\n  2551: u64 [s1 + 0x10] = a0\n  2554: a0 = u64 [sp + 0x20]\n  2557: u64 [s1 + 0x8] = a0\n  2560: a0 = u64 [sp + 0x38]\n  2563: u64 [s1] = a0\n  2565: sp = s0 + 0xffffffffffffff60\n  2569: ra = u64 [sp + 0x98]\n  2573: s0 = u64 [sp + 0x90]\n  2577: s1 = u64 [sp + 0x88]\n  2581: sp = sp + 0xa0\n  2585: ret\n      : @62 (gas: 1)\n  2587: trap\n      : @63 (gas: 3)\n  2588: a0 = 0\n  2590: a1 = 0\n  2592: ra = 44, jump @0\n      : @64 [@dyn 22] (gas: 6)\n  2597: i32 a1 = a0 + 0\n  2599: a0 = 0x1\n  2602: a2 = 0\n  2604: ra = 0x2e\n  2607: ecalli 6 // 'seal_return'\n  2609: fallthrough\n      : @65 [@dyn 23] (gas: 13)\n  2610: a2 = u64 [a1 + 0x10]\n  2613: a3 = u64 [a1 + 0x18]\n  2616: a4 = u64 [a1 + 0x8]\n  2619: a1 = u64 [a1]\n  2621: a3 = a3 | a4\n  2624: a1 = a1 | a2\n  2627: a1 = a1 | a3\n  2630: a1 = a1 >u 0\n  2632: u64 [a0 + 24] = 0\n  2635: u64 [a0 + 16] = 0\n  2638: u64 [a0 + 8] = 0\n  2641: u64 [a0] = a1\n  2643: ret\n      : @66 (gas: 8)\n  2645: a0 = u64 [sp + 0x150]\n  2649: a1 = u64 [sp + 0x158]\n  2653: a2 = u64 [sp + 0x148]\n  2657: a3 = u64 [sp + 0x140]\n  2661: a1 = a1 | a2\n  2664: a0 = a0 | a3\n  2667: a0 = a0 | a1\n  2670: jump @72 if a0 != 0\n      : @67 (gas: 13)\n  2674: a0 = u32 [0x20004]\n  2679: u64 [sp + 184] = 0\n  2683: u64 [sp + 176] = 0\n  2687: u64 [sp + 168] = 0\n  2691: u64 [sp + 0xa0] = a0\n  2695: u64 [sp + 216] = 0\n  2699: u64 [sp + 208] = 0\n  2703: u64 [sp + 192] = 0x4\n  2708: a0 = sp + 0xe0\n  2712: a1 = sp + 0xc0\n  2716: a2 = sp + 0xa0\n  2720: u64 [sp + 200] = 0\n  2724: ra = 48, jump @54\n      : @68 [@dyn 24] (gas: 63)\n  2729: a0 = u64 [sp + 0xe0]\n  2733: u64 [sp + 0x18] = a0\n  2736: t1 = u64 [sp + 0xe8]\n  2740: t2 = u64 [sp + 0xf0]\n  2744: ra = u64 [sp + 0xf8]\n  2748: t0 = u64 [sp + 0x100]\n  2752: a5 = u64 [sp + 0x108]\n  2756: s1 = u64 [sp + 0x110]\n  2760: a4 = u64 [sp + 0x118]\n  2764: a3 = u64 [sp + 0x120]\n  2768: a1 = u64 [sp + 0x128]\n  2772: a2 = u64 [sp + 0x130]\n  2776: a0 = u64 [sp + 0x138]\n  2780: u64 [sp + 0x38] = a0\n  2783: u64 [sp + 0x30] = a2\n  2786: u64 [sp + 0x28] = a1\n  2789: u64 [sp + 0x20] = a3\n  2792: u64 [sp + 0x58] = a4\n  2795: u64 [sp + 0x50] = s1\n  2798: u64 [sp + 0x48] = a5\n  2801: u64 [sp + 0x40] = t0\n  2804: u64 [sp + 0x78] = ra\n  2807: u64 [sp + 0x70] = t2\n  2810: u64 [sp + 0x68] = t1\n  2813: a0 = sp + 0x80\n  2817: a1 = sp + 0x60\n  2820: a2 = sp + 0x40\n  2823: a3 = sp + 0x20\n  2826: a4 = u64 [sp + 0x18]\n  2829: u64 [sp + 0x60] = a4\n  2832: ra = 0x32\n  2835: sp = sp + 0xffffffffffffff00\n  2839: u64 [sp + 0xf8] = ra\n  2843: u64 [sp + 0xf0] = s0\n  2847: u64 [sp + 0xe8] = s1\n  2851: s0 = sp + 0x100\n  2855: sp = sp & 0xffffffffffffffe0\n  2858: a4 = u64 [a3 + 0x18]\n  2861: u64 [sp + 0x38] = a4\n  2864: a4 = u64 [a3 + 0x10]\n  2867: u64 [sp + 0x58] = a4\n  2870: a4 = u64 [a3 + 0x8]\n  2873: u64 [sp + 0x40] = a4\n  2876: a3 = u64 [a3]\n  2878: u64 [sp + 0x48] = a3\n  2881: a3 = u64 [a2 + 0x8]\n  2884: u64 [sp + 0x30] = a3\n  2887: a3 = u64 [a2]\n  2889: u64 [sp + 0x28] = a3\n  2892: a3 = u64 [a2 + 0x18]\n  2895: u64 [sp + 0x20] = a3\n  2898: a2 = u64 [a2 + 0x10]\n  2901: u64 [sp + 0x18] = a2\n  2904: a2 = u64 [a1]\n  2906: u64 [sp + 0x10] = a2\n  2909: a2 = u64 [a1 + 0x8]\n  2912: u64 [sp + 0x8] = a2\n  2915: s1 = u32 [a1 + 0x10]\n  2918: u64 [sp + 0x50] = a0\n  2921: a1 = 0x20\n  2924: a0 = 0\n  2926: ra = 0xd2\n  2930: jump @0\n      : @69 [@dyn 25] (gas: 11)\n  2933: a0 = u64 [sp + 0x98]\n  2937: u64 [sp + 0x18] = a0\n  2940: a0 = u64 [sp + 0x90]\n  2944: u64 [sp + 0x8] = a0\n  2947: a0 = u64 [sp + 0x88]\n  2951: u64 [sp + 0x10] = a0\n  2954: a0 = u64 [sp + 0x80]\n  2958: u64 [sp] = a0\n  2960: a0 = 0x40\n  2963: a1 = 0x20\n  2966: ra = 52, jump @0\n      : @70 [@dyn 26] (gas: 100)\n  2971: a1 = u8 [a0 + 0x11]\n  2974: a2 = u8 [a0 + 0x10]\n  2977: a3 = u8 [a0 + 0x12]\n  2980: a4 = u8 [a0 + 0x13]\n  2983: a1 = a1 << 0x8\n  2986: a1 = a1 | a2\n  2989: a3 = a3 << 0x10\n  2992: a4 = a4 << 0x18\n  2995: a3 = a3 | a4\n  2998: a1 = a1 | a3\n  3001: a2 = u8 [a0 + 0x15]\n  3004: a3 = u8 [a0 + 0x14]\n  3007: a4 = u8 [a0 + 0x16]\n  3010: a5 = u8 [a0 + 0x17]\n  3013: a2 = a2 << 0x8\n  3016: a2 = a2 | a3\n  3019: a4 = a4 << 0x10\n  3022: a5 = a5 << 0x18\n  3025: a4 = a4 | a5\n  3028: a2 = a2 | a4\n  3031: a2 = a2 << 0x20\n  3034: t0 = a2 | a1\n  3037: a2 = u8 [a0 + 0x1]\n  3040: a3 = u8 [a0]\n  3042: a4 = u8 [a0 + 0x2]\n  3045: a5 = u8 [a0 + 0x3]\n  3048: a2 = a2 << 0x8\n  3051: a2 = a2 | a3\n  3054: a4 = a4 << 0x10\n  3057: a5 = a5 << 0x18\n  3060: a4 = a4 | a5\n  3063: a2 = a2 | a4\n  3066: a3 = u8 [a0 + 0x5]\n  3069: a4 = u8 [a0 + 0x4]\n  3072: a5 = u8 [a0 + 0x6]\n  3075: s1 = u8 [a0 + 0x7]\n  3078: a3 = a3 << 0x8\n  3081: a3 = a3 | a4\n  3084: a5 = a5 << 0x10\n  3087: s1 = s1 << 0x18\n  3090: a5 = a5 | s1\n  3093: a3 = a3 | a5\n  3096: a3 = a3 << 0x20\n  3099: a2 = a2 | a3\n  3102: a3 = u8 [a0 + 0x19]\n  3105: a4 = u8 [a0 + 0x18]\n  3108: a5 = u8 [a0 + 0x1a]\n  3111: s1 = u8 [a0 + 0x1b]\n  3114: a3 = a3 << 0x8\n  3117: a3 = a3 | a4\n  3120: a5 = a5 << 0x10\n  3123: s1 = s1 << 0x18\n  3126: a5 = a5 | s1\n  3129: a3 = a3 | a5\n  3132: a4 = u8 [a0 + 0x1d]\n  3135: a5 = u8 [a0 + 0x1c]\n  3138: s1 = u8 [a0 + 0x1e]\n  3141: a1 = u8 [a0 + 0x1f]\n  3144: a4 = a4 << 0x8\n  3147: a4 = a4 | a5\n  3150: s1 = s1 << 0x10\n  3153: a1 = a1 << 0x18\n  3156: a1 = a1 | s1\n  3159: a1 = a1 | a4\n  3162: a1 = a1 << 0x20\n  3165: a3 = a3 | a1\n  3168: a1 = u8 [a0 + 0x9]\n  3171: a4 = u8 [a0 + 0x8]\n  3174: a5 = u8 [a0 + 0xa]\n  3177: s1 = u8 [a0 + 0xb]\n  3180: a1 = a1 << 0x8\n  3183: a1 = a1 | a4\n  3186: a5 = a5 << 0x10\n  3189: s1 = s1 << 0x18\n  3192: a5 = a5 | s1\n  3195: a1 = a1 | a5\n  3198: a4 = u8 [a0 + 0xd]\n  3201: a5 = u8 [a0 + 0xc]\n  3204: s1 = u8 [a0 + 0xe]\n  3207: a0 = u8 [a0 + 0xf]\n  3210: a4 = a4 << 0x8\n  3213: a4 = a4 | a5\n  3216: s1 = s1 << 0x10\n  3219: a0 = a0 << 0x18\n  3222: a0 = a0 | s1\n  3225: a0 = a0 | a4\n  3228: a0 = a0 << 0x20\n  3231: a0 = a0 | a1\n  3234: a1 = reverse a0\n  3236: a0 = reverse a3\n  3238: a2 = reverse a2\n  3240: a3 = reverse t0\n  3242: a2 = a2 | a3\n  3245: a3 = a0 | a1\n  3248: a3 = a3 | a2\n  3251: a3 = a3 >> 0x20\n  3254: a1 = a1 | a2\n  3257: a1 = a1 << 0x20\n  3260: a1 = a1 | a3\n  3263: jump @74 if a1 == 0\n      : @71 (gas: 1)\n  3266: trap\n      : @72 (gas: 3)\n  3267: a0 = 0\n  3269: a1 = 0\n  3271: ra = 54, jump @0\n      : @73 [@dyn 27] (gas: 5)\n  3276: i32 a1 = a0 + 0\n  3278: a0 = 0x1\n  3281: a2 = 0\n  3283: ecalli 6 // 'seal_return'\n  3285: fallthrough\n      : @74 (gas: 13)\n  3286: a1 = u64 [sp + 0x8]\n  3289: a2 = u64 [sp]\n  3291: a1 = a1 | a2\n  3294: a2 = u64 [sp + 0x18]\n  3297: a3 = u64 [sp + 0x10]\n  3300: a2 = a2 | a3\n  3303: a1 = a1 | a2\n  3306: a1 = a1 >u 0\n  3308: u64 [sp + 0x18] = a1\n  3311: i32 s1 = a0 + 0\n  3313: a1 = 0x20\n  3316: a0 = s1\n  3318: ra = 56, jump @0\n      : @75 [@dyn 28] (gas: 36)\n  3323: u8 [a0 + 30] = 0\n  3326: u8 [a0 + 29] = 0\n  3329: u8 [a0 + 28] = 0\n  3332: u8 [a0 + 27] = 0\n  3335: u8 [a0 + 26] = 0\n  3338: u8 [a0 + 25] = 0\n  3341: u8 [a0 + 24] = 0\n  3344: u8 [a0 + 23] = 0\n  3347: u8 [a0 + 22] = 0\n  3350: u8 [a0 + 21] = 0\n  3353: u8 [a0 + 20] = 0\n  3356: u8 [a0 + 19] = 0\n  3359: u8 [a0 + 18] = 0\n  3362: u8 [a0 + 17] = 0\n  3365: u8 [a0 + 16] = 0\n  3368: u8 [a0 + 15] = 0\n  3371: u8 [a0 + 14] = 0\n  3374: u8 [a0 + 13] = 0\n  3377: u8 [a0 + 12] = 0\n  3380: u8 [a0 + 11] = 0\n  3383: u8 [a0 + 10] = 0\n  3386: u8 [a0 + 9] = 0\n  3389: u8 [a0 + 8] = 0\n  3392: u8 [a0 + 7] = 0\n  3395: u8 [a0 + 6] = 0\n  3398: u8 [a0 + 5] = 0\n  3401: u8 [a0 + 4] = 0\n  3404: u8 [a0 + 3] = 0\n  3407: u8 [a0 + 2] = 0\n  3410: u8 [a0 + 1] = 0\n  3413: u8 [a0 + 0] = 0\n  3415: a1 = u64 [sp + 0x18]\n  3418: u8 [a0 + 0x1f] = a1\n  3421: a1 = 0x20\n  3424: a0 = s1\n  3426: ra = 58, jump @0\n      : @76 [@dyn 29] (gas: 6)\n  3431: i32 a1 = a0 + 0\n  3433: a2 = 0x20\n  3436: a0 = 0\n  3438: ra = 0x3c\n  3441: ecalli 6 // 'seal_return'\n  3443: fallthrough\n      : @77 [@dyn 30] (gas: 47)\n  3444: sp = sp + 0xffffffffffffff80\n  3447: u64 [sp + 0x78] = ra\n  3450: u64 [sp + 0x70] = s0\n  3453: u64 [sp + 0x68] = s1\n  3456: s0 = sp + 0x80\n  3460: sp = sp & 0xffffffffffffffe0\n  3463: ra = u64 [a1 + 0x10]\n  3466: a5 = u64 [a1 + 0x8]\n  3469: a3 = u64 [a2 + 0x8]\n  3472: t1 = u64 [a1]\n  3474: a4 = u64 [a2]\n  3476: u64 [sp + 0x28] = a4\n  3479: t2 = u64 [a2 + 0x10]\n  3482: t0 = a3 ^ a5\n  3485: s1 = a3 <u a5\n  3488: a4 = a4 <u t1\n  3491: u64 [sp + 0x20] = a4\n  3494: s1 = a4 if t0 == 0\n  3497: t0 = u64 [a1 + 0x18]\n  3500: a1 = u64 [a2 + 0x18]\n  3503: u64 [sp + 0x18] = a1\n  3506: a2 = t2 - ra\n  3509: a1 = a2 - s1\n  3512: u64 [sp + 0x30] = a1\n  3515: a1 = a2 <u s1\n  3518: a4 = t2 <u ra\n  3521: u64 [sp + 0x38] = t0\n  3524: a2 = u64 [sp + 0x18]\n  3527: a2 = a2 - t0\n  3530: a2 = a2 - a4\n  3533: a2 = a2 - a1\n  3536: a1 = a3 - a5\n  3539: a3 = u64 [sp + 0x20]\n  3542: a1 = a1 - a3\n  3545: a3 = u64 [sp + 0x28]\n  3548: a3 = a3 - t1\n  3551: a4 = a1 >u 0\n  3553: a3 = a3 <u 0x40\n  3556: a3 = a3 ^ 0x1\n  3559: a3 = a4 if a1 != 0\n  3562: s1 = a2 >s 0\n  3564: a1 = u64 [sp + 0x30]\n  3567: a4 = a1 >u 0\n  3569: a4 = s1 if a2 != 0\n  3572: a1 = a1 | a2\n  3575: a3 = a4 if a1 != 0\n  3578: jump @84 if a3 == 0\n      : @78 (gas: 12)\n  3582: s1 = a0\n  3584: a0 = t1 | ra\n  3587: u64 [sp + 0x30] = a5\n  3590: a1 = u64 [sp + 0x38]\n  3593: a1 = a1 | a5\n  3596: a0 = a0 | a1\n  3599: a0 = a0 >> 0x20\n  3602: u64 [sp + 0x28] = ra\n  3605: a1 = a1 | ra\n  3608: a1 = a1 << 0x20\n  3611: a0 = a0 | a1\n  3614: jump @83 if a0 != 0\n      : @79 (gas: 6)\n  3618: u64 [sp + 0x20] = t1\n  3621: i32 a1 = t1 + 0\n  3623: i32 a0 = sp + 0x40\n  3626: u64 [sp + 0x8] = a1\n  3629: ecalli 1 // 'call_data_load'\n  3631: fallthrough\n      : @80 (gas: 10)\n  3632: a3 = u64 [sp + 0x50]\n  3635: a4 = u64 [sp + 0x58]\n  3638: a0 = 0x100000000\n  3648: a1 = a3 ^ a0\n  3651: a1 = a1 | a4\n  3654: a2 = a3 >> 0x20\n  3657: a2 = a2 <u 0x1\n  3660: a2 = 0 if a4 != 0\n  3662: a2 = 0 if a1 == 0\n  3664: jump @84 if a2 == 0\n      : @81 (gas: 12)\n  3668: u64 [sp + 0x10] = a4\n  3671: u64 [sp + 0x18] = a3\n  3674: a1 = u64 [sp + 0x28]\n  3677: a2 = u64 [sp + 0x38]\n  3680: a1 = a1 | a2\n  3683: a0 = 0xffffffe0\n  3693: a2 = u64 [sp + 0x20]\n  3696: a0 = a2 <u a0\n  3699: a2 = u64 [sp + 0x30]\n  3702: a0 = 0 if a2 != 0\n  3704: a0 = 0 if a1 != 0\n  3706: jump @83 if a0 == 0\n      : @82 (gas: 30)\n  3709: a0 = u64 [sp + 0x48]\n  3712: u64 [sp + 0x30] = a0\n  3715: a0 = u64 [sp + 0x40]\n  3718: u64 [sp + 0x38] = a0\n  3721: a0 = u64 [sp + 0x8]\n  3724: i32 a1 = a0 + 0x20\n  3727: i32 a0 = sp + 0x40\n  3730: ecalli 1 // 'call_data_load'\n  3732: a0 = u64 [sp + 0x58]\n  3735: a1 = u64 [sp + 0x50]\n  3738: a2 = u64 [sp + 0x48]\n  3741: a3 = u64 [sp + 0x40]\n  3744: u64 [s1 + 0x38] = a0\n  3747: u64 [s1 + 0x30] = a1\n  3750: u64 [s1 + 0x28] = a2\n  3753: u64 [s1 + 0x20] = a3\n  3756: a0 = u64 [sp + 0x10]\n  3759: u64 [s1 + 0x18] = a0\n  3762: a0 = u64 [sp + 0x18]\n  3765: u64 [s1 + 0x10] = a0\n  3768: a0 = u64 [sp + 0x30]\n  3771: u64 [s1 + 0x8] = a0\n  3774: a0 = u64 [sp + 0x38]\n  3777: u64 [s1] = a0\n  3779: sp = s0 + 0xffffffffffffff80\n  3782: ra = u64 [sp + 0x78]\n  3785: s0 = u64 [sp + 0x70]\n  3788: s1 = u64 [sp + 0x68]\n  3791: sp = sp + 0x80\n  3795: ret\n      : @83 (gas: 1)\n  3797: trap\n      : @84 (gas: 3)\n  3798: a0 = 0\n  3800: a1 = 0\n  3802: ra = 62, jump @0\n      : @85 [@dyn 31] (gas: 6)\n  3807: i32 a1 = a0 + 0\n  3809: a0 = 0x1\n  3812: a2 = 0\n  3814: ra = 0x40\n  3817: ecalli 6 // 'seal_return'\n  3819: fallthrough\n      : @86 [@dyn 32] (gas: 9)\n  3820: a2 = u64 [a1 + 0x18]\n  3823: a3 = u64 [a1 + 0x10]\n  3826: a4 = u64 [a1 + 0x8]\n  3829: a1 = u64 [a1]\n  3831: u64 [a0 + 0x18] = a2\n  3834: u64 [a0 + 0x10] = a3\n  3837: u64 [a0 + 0x8] = a4\n  3840: u64 [a0] = a1\n  3842: ret\n      : @87 [@dyn 33] (gas: 58)\n  3844: a1 = reverse s1\n  3846: a2 = u64 [sp + 0x8]\n  3849: a2 = reverse a2\n  3851: a3 = u64 [sp + 0x10]\n  3854: a3 = reverse a3\n  3856: a4 = a3 >> 0x38\n  3859: u8 [a0 + 0x1f] = a4\n  3862: a4 = a3 >> 0x30\n  3865: u8 [a0 + 0x1e] = a4\n  3868: a4 = a3 >> 0x28\n  3871: u8 [a0 + 0x1d] = a4\n  3874: a4 = a3 >> 0x20\n  3877: u8 [a0 + 0x1c] = a4\n  3880: a4 = a3 >> 0x18\n  3883: u8 [a0 + 0x1b] = a4\n  3886: a4 = a3 >> 0x10\n  3889: u8 [a0 + 0x1a] = a4\n  3892: a4 = a3 >> 0x8\n  3895: u8 [a0 + 0x19] = a4\n  3898: u8 [a0 + 0x18] = a3\n  3901: a3 = a2 >> 0x38\n  3904: u8 [a0 + 0x17] = a3\n  3907: a3 = a2 >> 0x30\n  3910: u8 [a0 + 0x16] = a3\n  3913: a3 = a2 >> 0x28\n  3916: u8 [a0 + 0x15] = a3\n  3919: a3 = a2 >> 0x20\n  3922: u8 [a0 + 0x14] = a3\n  3925: a3 = a2 >> 0x18\n  3928: u8 [a0 + 0x13] = a3\n  3931: a3 = a2 >> 0x10\n  3934: u8 [a0 + 0x12] = a3\n  3937: a3 = a2 >> 0x8\n  3940: u8 [a0 + 0x11] = a3\n  3943: u8 [a0 + 0x10] = a2\n  3946: a2 = a1 >> 0x38\n  3949: u8 [a0 + 0xf] = a2\n  3952: a2 = a1 >> 0x30\n  3955: u8 [a0 + 0xe] = a2\n  3958: a2 = a1 >> 0x28\n  3961: u8 [a0 + 0xd] = a2\n  3964: a2 = a1 >> 0x20\n  3967: u8 [a0 + 0xc] = a2\n  3970: u8 [a0 + 11] = 0\n  3973: u8 [a0 + 10] = 0\n  3976: u8 [a0 + 9] = 0\n  3979: u8 [a0 + 0x8] = a1\n  3982: u8 [a0 + 7] = 0\n  3985: u8 [a0 + 6] = 0\n  3988: u8 [a0 + 5] = 0\n  3991: u8 [a0 + 4] = 0\n  3994: u8 [a0 + 3] = 0\n  3997: u8 [a0 + 2] = 0\n  4000: u8 [a0 + 1] = 0\n  4003: u8 [a0 + 0] = 0\n  4005: a0 = 0x20\n  4008: a1 = 0x20\n  4011: ra = 68, jump @0\n      : @88 [@dyn 34] (gas: 35)\n  4016: u8 [a0 + 31] = 0\n  4019: u8 [a0 + 30] = 0\n  4022: u8 [a0 + 29] = 0\n  4025: u8 [a0 + 28] = 0\n  4028: u8 [a0 + 27] = 0\n  4031: u8 [a0 + 26] = 0\n  4034: u8 [a0 + 25] = 0\n  4037: u8 [a0 + 24] = 0\n  4040: u8 [a0 + 23] = 0\n  4043: u8 [a0 + 22] = 0\n  4046: u8 [a0 + 21] = 0\n  4049: u8 [a0 + 20] = 0\n  4052: u8 [a0 + 19] = 0\n  4055: u8 [a0 + 18] = 0\n  4058: u8 [a0 + 17] = 0\n  4061: u8 [a0 + 16] = 0\n  4064: u8 [a0 + 15] = 0\n  4067: u8 [a0 + 14] = 0\n  4070: u8 [a0 + 13] = 0\n  4073: u8 [a0 + 12] = 0\n  4076: u8 [a0 + 11] = 0\n  4079: u8 [a0 + 10] = 0\n  4082: u8 [a0 + 9] = 0\n  4085: u8 [a0 + 8] = 0\n  4088: u8 [a0 + 7] = 0\n  4091: u8 [a0 + 6] = 0\n  4094: u8 [a0 + 5] = 0\n  4097: u8 [a0 + 4] = 0\n  4100: u8 [a0 + 3] = 0\n  4103: u8 [a0 + 2] = 0\n  4106: u8 [a0 + 1] = 0\n  4109: u8 [a0 + 0] = 0\n  4111: a1 = 0x40\n  4114: a0 = 0\n  4116: ra = 70, jump @0\n      : @89 [@dyn 35] (gas: 5)\n  4121: i32 a0 = a0 + 0\n  4123: i32 a2 = sp + 0x60\n  4126: a1 = 0x40\n  4129: ecalli 5 // 'hash_keccak_256'\n  4131: fallthrough\n      : @90 (gas: 9)\n  4132: a4 = u64 [sp + 0x30]\n  4135: a5 = u64 [sp + 0x28]\n  4138: t1 = u64 [sp + 0x18]\n  4141: t0 = u64 [sp + 0x20]\n  4144: a0 = t1 | t0\n  4147: a1 = a5 <u 0x9\n  4150: a1 = 0 if a4 != 0\n  4152: a1 = 0 if a0 != 0\n  4154: jump @92 if a1 == 0\n      : @91 (gas: 52)\n  4158: a0 = u64 [sp + 0x60]\n  4161: a1 = u64 [sp + 0x68]\n  4164: a2 = u64 [sp + 0x78]\n  4167: a3 = u64 [sp + 0x70]\n  4170: a0 = reverse a0\n  4172: a1 = reverse a1\n  4174: a2 = reverse a2\n  4176: a3 = reverse a3\n  4178: a4 = a4 + a3\n  4181: a5 = a5 + a2\n  4184: a2 = a5 <u a2\n  4187: a4 = a4 + a2\n  4190: s1 = a4 ^ a3\n  4193: a3 = a4 <u a3\n  4196: a3 = a2 if s1 == 0\n  4199: a2 = a1 + t1\n  4202: a3 = a3 + a2\n  4205: s1 = a3 <u a2\n  4208: a1 = a2 <u a1\n  4211: a0 = a0 + t0\n  4214: a0 = a0 + a1\n  4217: a0 = a0 + s1\n  4220: u64 [sp + 0x40] = a5\n  4223: u64 [sp + 0x48] = a4\n  4226: u64 [sp + 0x50] = a3\n  4229: u64 [sp + 0x58] = a0\n  4232: u64 [sp + 120] = 0\n  4235: u64 [sp + 112] = 0\n  4238: u64 [sp + 104] = 0\n  4241: u64 [sp + 96] = 0\n  4244: u32 [sp + 128] = 0x20\n  4249: i32 a1 = sp + 0x40\n  4252: i32 a3 = sp + 0x60\n  4255: i32 a4 = sp + 0x80\n  4259: a2 = 0xffffffffffffffff\n  4262: a0 = 0\n  4264: ecalli 4 // 'get_storage'\n  4266: a0 = u64 [sp + 0x78]\n  4269: a1 = u64 [sp + 0x70]\n  4272: a2 = u64 [sp + 0x68]\n  4275: a3 = u64 [sp + 0x60]\n  4278: a4 = u64 [sp + 0x38]\n  4281: u64 [a4 + 0x18] = a0\n  4284: u64 [a4 + 0x10] = a1\n  4287: u64 [a4 + 0x8] = a2\n  4290: u64 [a4] = a3\n  4292: sp = s0 + 0xffffffffffffff60\n  4296: ra = u64 [sp + 0x98]\n  4300: s0 = u64 [sp + 0x90]\n  4304: s1 = u64 [sp + 0x88]\n  4308: sp = sp + 0xa0\n  4312: ret\n      : @92 (gas: 2)\n  4314: a0 = 0\n  4316: ra = 72, jump @0\n      : @93 [@dyn 36] (gas: 6)\n  4321: i32 a1 = a0 + 0\n  4323: a0 = 0x1\n  4326: a2 = 0\n  4328: ra = 0x4a\n  4331: ecalli 6 // 'seal_return'\n  4333: fallthrough\n      : @94 [@dyn 37] (gas: 17)\n  4334: sp = sp + 0xffffffffffffffa8\n  4337: u64 [sp + 0x50] = ra\n  4340: u64 [sp + 0x48] = s0\n  4343: u64 [sp + 0x40] = s1\n  4346: a3 = u64 [a1 + 0x10]\n  4349: s1 = u64 [a1 + 0x18]\n  4352: a5 = u64 [a1 + 0x8]\n  4355: s0 = u64 [a1]\n  4357: a4 = a5 | s1\n  4360: a1 = s0 | a3\n  4363: a1 = a1 | a4\n  4366: a1 = a1 >> 0x20\n  4369: a4 = a4 | a3\n  4372: a4 = a4 << 0x20\n  4375: a1 = a1 | a4\n  4378: u64 [sp + 0x38] = a0\n  4381: jump @97 if a1 != 0\n      : @95 (gas: 22)\n  4385: a0 = u64 [a2 + 0x18]\n  4388: u64 [sp] = a0\n  4390: a0 = u64 [a2 + 0x10]\n  4393: u64 [sp + 0x8] = a0\n  4396: a0 = u64 [a2 + 0x8]\n  4399: u64 [sp + 0x10] = a0\n  4402: a0 = u64 [a2]\n  4404: u64 [sp + 0x18] = a0\n  4407: a0 = s0 + 0x20\n  4410: u64 [sp + 0x30] = a0\n  4413: a0 = a0 <u s0\n  4416: a1 = a5 + a0\n  4419: u64 [sp + 0x28] = a1\n  4422: a1 = a1 <u a5\n  4425: a1 = a0 if a0 == 0\n  4428: a1 = a1 + a3\n  4431: u64 [sp + 0x20] = a1\n  4434: a0 = a1 <u a3\n  4437: s1 = s1 + a0\n  4440: i32 a0 = s0 + 0\n  4442: a1 = 0x20\n  4445: ra = 76, jump @0\n      : @96 [@dyn 38] (gas: 81)\n  4450: a1 = u64 [sp]\n  4452: a1 = reverse a1\n  4454: a2 = u64 [sp + 0x8]\n  4457: a2 = reverse a2\n  4459: a3 = u64 [sp + 0x10]\n  4462: a3 = reverse a3\n  4464: a4 = u64 [sp + 0x18]\n  4467: a4 = reverse a4\n  4469: a5 = a4 >> 0x38\n  4472: u8 [a0 + 0x1f] = a5\n  4475: a5 = a4 >> 0x30\n  4478: u8 [a0 + 0x1e] = a5\n  4481: a5 = a4 >> 0x28\n  4484: u8 [a0 + 0x1d] = a5\n  4487: a5 = a4 >> 0x20\n  4490: u8 [a0 + 0x1c] = a5\n  4493: a5 = a4 >> 0x18\n  4496: u8 [a0 + 0x1b] = a5\n  4499: a5 = a4 >> 0x10\n  4502: u8 [a0 + 0x1a] = a5\n  4505: a5 = a4 >> 0x8\n  4508: u8 [a0 + 0x19] = a5\n  4511: u8 [a0 + 0x18] = a4\n  4514: u8 [a0 + 0x10] = a3\n  4517: a4 = a3 >> 0x38\n  4520: u8 [a0 + 0x17] = a4\n  4523: a4 = a3 >> 0x30\n  4526: u8 [a0 + 0x16] = a4\n  4529: a4 = a3 >> 0x28\n  4532: u8 [a0 + 0x15] = a4\n  4535: a4 = a3 >> 0x20\n  4538: u8 [a0 + 0x14] = a4\n  4541: a4 = a3 >> 0x18\n  4544: u8 [a0 + 0x13] = a4\n  4547: a4 = a3 >> 0x10\n  4550: u8 [a0 + 0x12] = a4\n  4553: a3 = a3 >> 0x8\n  4556: u8 [a0 + 0x11] = a3\n  4559: u8 [a0 + 0x8] = a2\n  4562: a3 = a2 >> 0x38\n  4565: u8 [a0 + 0xf] = a3\n  4568: a3 = a2 >> 0x30\n  4571: u8 [a0 + 0xe] = a3\n  4574: a3 = a2 >> 0x28\n  4577: u8 [a0 + 0xd] = a3\n  4580: a3 = a2 >> 0x20\n  4583: u8 [a0 + 0xc] = a3\n  4586: a3 = a2 >> 0x18\n  4589: u8 [a0 + 0xb] = a3\n  4592: a3 = a2 >> 0x10\n  4595: u8 [a0 + 0xa] = a3\n  4598: a2 = a2 >> 0x8\n  4601: u8 [a0 + 0x9] = a2\n  4604: u8 [a0] = a1\n  4606: a2 = a1 >> 0x38\n  4609: u8 [a0 + 0x7] = a2\n  4612: a2 = a1 >> 0x30\n  4615: u8 [a0 + 0x6] = a2\n  4618: a2 = a1 >> 0x28\n  4621: u8 [a0 + 0x5] = a2\n  4624: a2 = a1 >> 0x20\n  4627: u8 [a0 + 0x4] = a2\n  4630: a2 = a1 >> 0x18\n  4633: u8 [a0 + 0x3] = a2\n  4636: a2 = a1 >> 0x10\n  4639: u8 [a0 + 0x2] = a2\n  4642: a1 = a1 >> 0x8\n  4645: u8 [a0 + 0x1] = a1\n  4648: a0 = u64 [sp + 0x38]\n  4651: a1 = u64 [sp + 0x30]\n  4654: u64 [a0] = a1\n  4656: a1 = u64 [sp + 0x28]\n  4659: u64 [a0 + 0x8] = a1\n  4662: a1 = u64 [sp + 0x20]\n  4665: u64 [a0 + 0x10] = a1\n  4668: u64 [a0 + 0x18] = s1\n  4671: ra = u64 [sp + 0x50]\n  4674: s0 = u64 [sp + 0x48]\n  4677: s1 = u64 [sp + 0x40]\n  4680: sp = sp + 0x58\n  4683: ret\n      : @97 (gas: 1)\n  4685: trap\n      : @98 (gas: 8)\n  4686: a0 = u64 [sp + 0x110]\n  4690: a1 = u64 [sp + 0x118]\n  4694: a2 = u64 [sp + 0x108]\n  4698: a3 = u64 [sp + 0x100]\n  4702: a1 = a1 | a2\n  4705: a0 = a0 | a3\n  4708: a0 = a0 | a1\n  4711: jump @104 if a0 != 0\n      : @99 (gas: 13)\n  4715: a0 = u32 [0x20004]\n  4720: u64 [sp + 152] = 0\n  4724: u64 [sp + 144] = 0\n  4728: u64 [sp + 136] = 0\n  4732: u64 [sp + 0x80] = a0\n  4736: u64 [sp + 184] = 0\n  4740: u64 [sp + 176] = 0\n  4744: u64 [sp + 160] = 0x4\n  4749: a0 = sp + 0xc0\n  4753: a1 = sp + 0xa0\n  4757: a2 = sp + 0x80\n  4761: u64 [sp + 168] = 0\n  4765: ra = 78, jump @77\n      : @100 [@dyn 39] (gas: 44)\n  4770: t0 = u64 [sp + 0xc0]\n  4774: a0 = u64 [sp + 0xc8]\n  4778: a1 = u64 [sp + 0xd0]\n  4782: a2 = u64 [sp + 0xd8]\n  4786: a4 = u64 [sp + 0xe0]\n  4790: a5 = u64 [sp + 0xe8]\n  4794: s1 = u64 [sp + 0xf0]\n  4798: a3 = u64 [sp + 0xf8]\n  4802: u64 [sp + 0x38] = a3\n  4805: u64 [sp + 0x30] = s1\n  4808: u64 [sp + 0x28] = a5\n  4811: u64 [sp + 0x20] = a4\n  4814: u64 [sp + 0x58] = a2\n  4817: u64 [sp + 0x50] = a1\n  4820: u64 [sp + 0x48] = a0\n  4823: a0 = sp + 0x60\n  4826: a1 = sp + 0x40\n  4829: a2 = sp + 0x20\n  4832: u64 [sp + 0x40] = t0\n  4835: ra = 0x50\n  4838: sp = sp + 0xffffffffffffff60\n  4842: u64 [sp + 0x98] = ra\n  4846: u64 [sp + 0x90] = s0\n  4850: u64 [sp + 0x88] = s1\n  4854: s0 = sp + 0xa0\n  4858: sp = sp & 0xffffffffffffffe0\n  4861: a3 = u64 [a2 + 0x8]\n  4864: u64 [sp + 0x30] = a3\n  4867: a3 = u64 [a2]\n  4869: u64 [sp + 0x28] = a3\n  4872: a3 = u64 [a2 + 0x18]\n  4875: u64 [sp + 0x20] = a3\n  4878: a2 = u64 [a2 + 0x10]\n  4881: u64 [sp + 0x18] = a2\n  4884: a2 = u64 [a1]\n  4886: u64 [sp + 0x10] = a2\n  4889: a2 = u64 [a1 + 0x8]\n  4892: u64 [sp + 0x8] = a2\n  4895: s1 = u32 [a1 + 0x10]\n  4898: u64 [sp + 0x38] = a0\n  4901: a1 = 0x20\n  4904: a0 = 0\n  4906: ra = 0x42\n  4909: jump @0\n      : @101 [@dyn 40] (gas: 11)\n  4912: a0 = u64 [sp + 0x78]\n  4915: u64 [sp] = a0\n  4917: a0 = u64 [sp + 0x70]\n  4920: u64 [sp + 0x8] = a0\n  4923: a0 = u64 [sp + 0x68]\n  4926: u64 [sp + 0x10] = a0\n  4929: a0 = u64 [sp + 0x60]\n  4932: u64 [sp + 0x18] = a0\n  4935: a0 = 0x40\n  4938: a1 = 0x20\n  4941: ra = 82, jump @0\n      : @102 [@dyn 41] (gas: 100)\n  4946: a1 = u8 [a0 + 0x11]\n  4949: a2 = u8 [a0 + 0x10]\n  4952: a3 = u8 [a0 + 0x12]\n  4955: a4 = u8 [a0 + 0x13]\n  4958: a1 = a1 << 0x8\n  4961: a1 = a1 | a2\n  4964: a3 = a3 << 0x10\n  4967: a4 = a4 << 0x18\n  4970: a3 = a3 | a4\n  4973: a1 = a1 | a3\n  4976: a2 = u8 [a0 + 0x15]\n  4979: a3 = u8 [a0 + 0x14]\n  4982: a4 = u8 [a0 + 0x16]\n  4985: a5 = u8 [a0 + 0x17]\n  4988: a2 = a2 << 0x8\n  4991: a2 = a2 | a3\n  4994: a4 = a4 << 0x10\n  4997: a5 = a5 << 0x18\n  5000: a4 = a4 | a5\n  5003: a2 = a2 | a4\n  5006: a2 = a2 << 0x20\n  5009: t0 = a2 | a1\n  5012: a2 = u8 [a0 + 0x1]\n  5015: a3 = u8 [a0]\n  5017: a4 = u8 [a0 + 0x2]\n  5020: a5 = u8 [a0 + 0x3]\n  5023: a2 = a2 << 0x8\n  5026: a2 = a2 | a3\n  5029: a4 = a4 << 0x10\n  5032: a5 = a5 << 0x18\n  5035: a4 = a4 | a5\n  5038: a2 = a2 | a4\n  5041: a3 = u8 [a0 + 0x5]\n  5044: a4 = u8 [a0 + 0x4]\n  5047: a5 = u8 [a0 + 0x6]\n  5050: s1 = u8 [a0 + 0x7]\n  5053: a3 = a3 << 0x8\n  5056: a3 = a3 | a4\n  5059: a5 = a5 << 0x10\n  5062: s1 = s1 << 0x18\n  5065: a5 = a5 | s1\n  5068: a3 = a3 | a5\n  5071: a3 = a3 << 0x20\n  5074: a2 = a2 | a3\n  5077: a3 = u8 [a0 + 0x19]\n  5080: a4 = u8 [a0 + 0x18]\n  5083: a5 = u8 [a0 + 0x1a]\n  5086: s1 = u8 [a0 + 0x1b]\n  5089: a3 = a3 << 0x8\n  5092: a3 = a3 | a4\n  5095: a5 = a5 << 0x10\n  5098: s1 = s1 << 0x18\n  5101: a5 = a5 | s1\n  5104: a3 = a3 | a5\n  5107: a4 = u8 [a0 + 0x1d]\n  5110: a5 = u8 [a0 + 0x1c]\n  5113: s1 = u8 [a0 + 0x1e]\n  5116: a1 = u8 [a0 + 0x1f]\n  5119: a4 = a4 << 0x8\n  5122: a4 = a4 | a5\n  5125: s1 = s1 << 0x10\n  5128: a1 = a1 << 0x18\n  5131: a1 = a1 | s1\n  5134: a1 = a1 | a4\n  5137: a1 = a1 << 0x20\n  5140: a3 = a3 | a1\n  5143: a1 = u8 [a0 + 0x9]\n  5146: a4 = u8 [a0 + 0x8]\n  5149: a5 = u8 [a0 + 0xa]\n  5152: s1 = u8 [a0 + 0xb]\n  5155: a1 = a1 << 0x8\n  5158: a1 = a1 | a4\n  5161: a5 = a5 << 0x10\n  5164: s1 = s1 << 0x18\n  5167: a5 = a5 | s1\n  5170: a1 = a1 | a5\n  5173: a4 = u8 [a0 + 0xd]\n  5176: a5 = u8 [a0 + 0xc]\n  5179: s1 = u8 [a0 + 0xe]\n  5182: a0 = u8 [a0 + 0xf]\n  5185: a4 = a4 << 0x8\n  5188: a4 = a4 | a5\n  5191: s1 = s1 << 0x10\n  5194: a0 = a0 << 0x18\n  5197: a0 = a0 | s1\n  5200: a0 = a0 | a4\n  5203: a0 = a0 << 0x20\n  5206: a0 = a0 | a1\n  5209: a1 = reverse a0\n  5211: a0 = reverse a3\n  5213: a2 = reverse a2\n  5215: a3 = reverse t0\n  5217: a2 = a2 | a3\n  5220: a3 = a0 | a1\n  5223: a3 = a3 | a2\n  5226: a3 = a3 >> 0x20\n  5229: a1 = a1 | a2\n  5232: a1 = a1 << 0x20\n  5235: a1 = a1 | a3\n  5238: jump @106 if a1 == 0\n      : @103 (gas: 1)\n  5241: trap\n      : @104 (gas: 3)\n  5242: a0 = 0\n  5244: a1 = 0\n  5246: ra = 84, jump @0\n      : @105 [@dyn 42] (gas: 5)\n  5251: i32 a1 = a0 + 0\n  5253: a0 = 0x1\n  5256: a2 = 0\n  5258: ecalli 6 // 'seal_return'\n  5260: fallthrough\n      : @106 (gas: 4)\n  5261: i32 s1 = a0 + 0\n  5263: a1 = 0x20\n  5266: a0 = s1\n  5268: ra = 86, jump @0\n      : @107 [@dyn 43] (gas: 71)\n  5273: a1 = u64 [sp]\n  5275: a1 = reverse a1\n  5277: a2 = u64 [sp + 0x8]\n  5280: a2 = reverse a2\n  5282: a3 = u64 [sp + 0x10]\n  5285: a3 = reverse a3\n  5287: a4 = u64 [sp + 0x18]\n  5290: a4 = reverse a4\n  5292: a5 = a4 >> 0x38\n  5295: u8 [a0 + 0x1f] = a5\n  5298: a5 = a4 >> 0x30\n  5301: u8 [a0 + 0x1e] = a5\n  5304: a5 = a4 >> 0x28\n  5307: u8 [a0 + 0x1d] = a5\n  5310: a5 = a4 >> 0x20\n  5313: u8 [a0 + 0x1c] = a5\n  5316: a5 = a4 >> 0x18\n  5319: u8 [a0 + 0x1b] = a5\n  5322: a5 = a4 >> 0x10\n  5325: u8 [a0 + 0x1a] = a5\n  5328: a5 = a4 >> 0x8\n  5331: u8 [a0 + 0x19] = a5\n  5334: u8 [a0 + 0x18] = a4\n  5337: u8 [a0 + 0x10] = a3\n  5340: a4 = a3 >> 0x38\n  5343: u8 [a0 + 0x17] = a4\n  5346: a4 = a3 >> 0x30\n  5349: u8 [a0 + 0x16] = a4\n  5352: a4 = a3 >> 0x28\n  5355: u8 [a0 + 0x15] = a4\n  5358: a4 = a3 >> 0x20\n  5361: u8 [a0 + 0x14] = a4\n  5364: a4 = a3 >> 0x18\n  5367: u8 [a0 + 0x13] = a4\n  5370: a4 = a3 >> 0x10\n  5373: u8 [a0 + 0x12] = a4\n  5376: a3 = a3 >> 0x8\n  5379: u8 [a0 + 0x11] = a3\n  5382: u8 [a0 + 0x8] = a2\n  5385: a3 = a2 >> 0x38\n  5388: u8 [a0 + 0xf] = a3\n  5391: a3 = a2 >> 0x30\n  5394: u8 [a0 + 0xe] = a3\n  5397: a3 = a2 >> 0x28\n  5400: u8 [a0 + 0xd] = a3\n  5403: a3 = a2 >> 0x20\n  5406: u8 [a0 + 0xc] = a3\n  5409: a3 = a2 >> 0x18\n  5412: u8 [a0 + 0xb] = a3\n  5415: a3 = a2 >> 0x10\n  5418: u8 [a0 + 0xa] = a3\n  5421: a2 = a2 >> 0x8\n  5424: u8 [a0 + 0x9] = a2\n  5427: u8 [a0] = a1\n  5429: a2 = a1 >> 0x38\n  5432: u8 [a0 + 0x7] = a2\n  5435: a2 = a1 >> 0x30\n  5438: u8 [a0 + 0x6] = a2\n  5441: a2 = a1 >> 0x28\n  5444: u8 [a0 + 0x5] = a2\n  5447: a2 = a1 >> 0x20\n  5450: u8 [a0 + 0x4] = a2\n  5453: a2 = a1 >> 0x18\n  5456: u8 [a0 + 0x3] = a2\n  5459: a2 = a1 >> 0x10\n  5462: u8 [a0 + 0x2] = a2\n  5465: a1 = a1 >> 0x8\n  5468: u8 [a0 + 0x1] = a1\n  5471: a1 = 0x20\n  5474: a0 = s1\n  5476: ra = 88, jump @0\n      : @108 [@dyn 44] (gas: 6)\n  5481: i32 a1 = a0 + 0\n  5483: a2 = 0x20\n  5486: a0 = 0\n  5488: ra = 0x5a\n  5491: ecalli 6 // 'seal_return'\n  5493: fallthrough\n      : @109 [@dyn 45] (gas: 52)\n  5494: sp = sp + 0xffffffffffffff80\n  5497: u64 [sp + 0x78] = ra\n  5500: u64 [sp + 0x70] = s0\n  5503: u64 [sp + 0x68] = s1\n  5506: s0 = sp + 0x80\n  5510: sp = sp & 0xffffffffffffffe0\n  5513: t2 = u64 [a1 + 0x10]\n  5516: a5 = u64 [a1 + 0x8]\n  5519: t0 = u64 [a2 + 0x8]\n  5522: s1 = u64 [a1]\n  5524: u64 [sp + 0x10] = s1\n  5527: a4 = u64 [a2]\n  5529: u64 [sp + 0x18] = a4\n  5532: ra = u64 [a2 + 0x10]\n  5535: a3 = t0 ^ a5\n  5538: u64 [sp + 0x38] = a3\n  5541: a3 = t0 <u a5\n  5544: a4 = a4 <u s1\n  5547: t1 = u64 [sp + 0x38]\n  5550: a3 = a4 if t1 == 0\n  5553: t1 = a4\n  5555: a1 = u64 [a1 + 0x18]\n  5558: u64 [sp + 0x38] = a1\n  5561: a1 = u64 [a2 + 0x18]\n  5564: u64 [sp + 0x20] = a1\n  5567: a1 = ra - t2\n  5570: a2 = a1 - a3\n  5573: u64 [sp + 0x28] = a2\n  5576: a2 = a1 <u a3\n  5579: u64 [sp + 0x30] = t2\n  5582: a3 = ra <u t2\n  5585: a1 = u64 [sp + 0x38]\n  5588: a4 = u64 [sp + 0x20]\n  5591: a1 = a4 - a1\n  5594: a1 = a1 - a3\n  5597: t2 = a1 - a2\n  5600: s1 = t0 - a5\n  5603: a2 = s1 - t1\n  5606: t0 = u64 [sp + 0x10]\n  5609: a1 = u64 [sp + 0x18]\n  5612: a3 = a1 - t0\n  5615: a4 = a2 >u 0\n  5617: a3 = a3 <u 0x20\n  5620: a3 = a3 ^ 0x1\n  5623: a3 = a4 if a2 != 0\n  5626: a2 = t2 >s 0\n  5628: a1 = u64 [sp + 0x28]\n  5631: a4 = a1 >u 0\n  5633: a4 = a2 if t2 != 0\n  5636: a1 = a1 | t2\n  5639: a3 = a4 if a1 != 0\n  5642: jump @115 if a3 == 0\n      : @110 (gas: 11)\n  5645: s1 = a0\n  5647: a2 = u64 [sp + 0x30]\n  5650: a0 = t0 | a2\n  5653: a1 = u64 [sp + 0x38]\n  5656: a1 = a1 | a5\n  5659: a0 = a0 | a1\n  5662: a0 = a0 >> 0x20\n  5665: a1 = a1 | a2\n  5668: a1 = a1 << 0x20\n  5671: a0 = a0 | a1\n  5674: jump @114 if a0 != 0\n      : @111 (gas: 4)\n  5677: i32 a1 = t0 + 0\n  5679: i32 a0 = sp + 0x40\n  5682: ecalli 1 // 'call_data_load'\n  5684: fallthrough\n      : @112 (gas: 10)\n  5685: a0 = u64 [sp + 0x50]\n  5688: a1 = u64 [sp + 0x58]\n  5691: a2 = 0x100000000\n  5701: a2 = a2 ^ a0\n  5704: a2 = a2 | a1\n  5707: a3 = a0 >> 0x20\n  5710: a3 = a3 <u 0x1\n  5713: a3 = 0 if a1 != 0\n  5715: a3 = 0 if a2 == 0\n  5717: jump @115 if a3 == 0\n      : @113 (gas: 12)\n  5720: a2 = u64 [sp + 0x48]\n  5723: a3 = u64 [sp + 0x40]\n  5726: u64 [s1 + 0x8] = a2\n  5729: u64 [s1] = a3\n  5731: u64 [s1 + 0x10] = a0\n  5734: u64 [s1 + 0x18] = a1\n  5737: sp = s0 + 0xffffffffffffff80\n  5740: ra = u64 [sp + 0x78]\n  5743: s0 = u64 [sp + 0x70]\n  5746: s1 = u64 [sp + 0x68]\n  5749: sp = sp + 0x80\n  5753: ret\n      : @114 (gas: 1)\n  5755: trap\n      : @115 (gas: 3)\n  5756: a0 = 0\n  5758: a1 = 0\n  5760: ra = 92, jump @0\n      : @116 [@dyn 46] (gas: 6)\n  5765: i32 a1 = a0 + 0\n  5767: a0 = 0x1\n  5770: a2 = 0\n  5772: ra = 0x5e\n  5775: ecalli 6 // 'seal_return'\n  5777: fallthrough\n      : @117 [@dyn 47] (gas: 9)\n  5778: a2 = u64 [a1 + 0x18]\n  5781: a3 = u64 [a1 + 0x10]\n  5784: a4 = u64 [a1 + 0x8]\n  5787: a1 = u64 [a1]\n  5789: u64 [a0 + 0x18] = a2\n  5792: u64 [a0 + 0x10] = a3\n  5795: u64 [a0 + 0x8] = a4\n  5798: u64 [a0] = a1\n  5800: ret\n      : @118 (gas: 8)\n  5802: a0 = u64 [sp + 0x30]\n  5805: a1 = u64 [sp + 0x38]\n  5808: a2 = u64 [sp + 0x28]\n  5811: a3 = u64 [sp + 0x20]\n  5814: a1 = a1 | a2\n  5817: a0 = a0 | a3\n  5820: a0 = a0 | a1\n  5823: jump @126 if a0 != 0\n      : @119 (gas: 2)\n  5827: a0 = i32 [0x20004]\n  5832: jump @126 if a0 <=u 35\n      : @120 (gas: 4)\n  5837: i32 a0 = sp + 0x40\n  5840: a1 = 0x4\n  5843: ecalli 1 // 'call_data_load'\n  5845: fallthrough\n      : @121 (gas: 10)\n  5846: a0 = u64 [sp + 0x50]\n  5849: a1 = u64 [sp + 0x58]\n  5852: a2 = 0x100000000\n  5862: a2 = a2 ^ a0\n  5865: a2 = a2 | a1\n  5868: a3 = a0 >> 0x20\n  5871: a3 = a3 <u 0x1\n  5874: a3 = 0 if a1 != 0\n  5876: a3 = 0 if a2 == 0\n  5878: jump @126 if a3 == 0\n      : @122 (gas: 53)\n  5882: a2 = u64 [sp + 0x48]\n  5885: a3 = u64 [sp + 0x40]\n  5888: u64 [sp + 0x8] = a2\n  5891: u64 [sp] = a3\n  5893: u64 [sp + 0x10] = a0\n  5896: a0 = sp\n  5898: u64 [sp + 0x18] = a1\n  5901: ra = 0x60\n  5904: sp = sp + 0xfffffffffffffee0\n  5908: u64 [sp + 0x118] = ra\n  5912: u64 [sp + 0x110] = s0\n  5916: u64 [sp + 0x108] = s1\n  5920: s0 = sp + 0x120\n  5924: sp = sp & 0xffffffffffffffe0\n  5927: a1 = u64 [a0 + 0x10]\n  5930: u64 [sp + 0x18] = a1\n  5933: a1 = u64 [a0 + 0x8]\n  5936: u64 [sp + 0x20] = a1\n  5939: a0 = u64 [a0]\n  5941: u64 [sp + 0x28] = a0\n  5944: i32 a0 = sp + 0x80\n  5948: ecalli 3 // 'caller'\n  5950: a0 = u64 [sp + 0x88]\n  5954: a1 = u64 [sp + 0x80]\n  5958: a2 = i32 [sp + 0x90]\n  5962: a0 = reverse a0\n  5964: a3 = a0 >> 0x20\n  5967: s1 = reverse a1\n  5969: a1 = s1 << 0x20\n  5972: a1 = a1 | a3\n  5975: u64 [sp + 0x38] = a1\n  5978: a0 = a0 << 0x20\n  5981: a1 = reverse a2\n  5983: a1 = a1 >> 0x20\n  5986: a0 = a0 | a1\n  5989: u64 [sp + 0x30] = a0\n  5992: s1 = s1 >> 0x20\n  5995: u64 [sp + 216] = 0\n  5999: u64 [sp + 208] = 0\n  6003: u64 [sp + 200] = 0\n  6007: u64 [sp + 192] = 0x1\n  6012: u64 [sp + 248] = 0\n  6016: u64 [sp + 240] = 0\n  6020: u64 [sp + 232] = 0\n  6024: u64 [sp + 224] = 0\n  6028: u32 [sp + 160] = 0x20\n  6033: i32 a1 = sp + 0xc0\n  6037: i32 a3 = sp + 0xe0\n  6041: i32 a4 = sp + 0xa0\n  6045: a2 = 0xffffffffffffffff\n  6048: a0 = 0\n  6050: ecalli 4 // 'get_storage'\n  6052: jump @267\n      : @123 [@dyn 48] (gas: 3)\n  6055: a0 = 0x40\n  6058: a1 = 0x20\n  6061: ra = 98, jump @0\n      : @124 [@dyn 49] (gas: 100)\n  6066: a1 = u8 [a0 + 0x11]\n  6069: a2 = u8 [a0 + 0x10]\n  6072: a3 = u8 [a0 + 0x12]\n  6075: a4 = u8 [a0 + 0x13]\n  6078: a1 = a1 << 0x8\n  6081: a1 = a1 | a2\n  6084: a3 = a3 << 0x10\n  6087: a4 = a4 << 0x18\n  6090: a3 = a3 | a4\n  6093: a1 = a1 | a3\n  6096: a2 = u8 [a0 + 0x15]\n  6099: a3 = u8 [a0 + 0x14]\n  6102: a4 = u8 [a0 + 0x16]\n  6105: a5 = u8 [a0 + 0x17]\n  6108: a2 = a2 << 0x8\n  6111: a2 = a2 | a3\n  6114: a4 = a4 << 0x10\n  6117: a5 = a5 << 0x18\n  6120: a4 = a4 | a5\n  6123: a2 = a2 | a4\n  6126: a2 = a2 << 0x20\n  6129: t0 = a2 | a1\n  6132: a2 = u8 [a0 + 0x1]\n  6135: a3 = u8 [a0]\n  6137: a4 = u8 [a0 + 0x2]\n  6140: a5 = u8 [a0 + 0x3]\n  6143: a2 = a2 << 0x8\n  6146: a2 = a2 | a3\n  6149: a4 = a4 << 0x10\n  6152: a5 = a5 << 0x18\n  6155: a4 = a4 | a5\n  6158: a2 = a2 | a4\n  6161: a3 = u8 [a0 + 0x5]\n  6164: a4 = u8 [a0 + 0x4]\n  6167: a5 = u8 [a0 + 0x6]\n  6170: a1 = u8 [a0 + 0x7]\n  6173: a3 = a3 << 0x8\n  6176: a3 = a3 | a4\n  6179: a5 = a5 << 0x10\n  6182: a1 = a1 << 0x18\n  6185: a1 = a1 | a5\n  6188: a1 = a1 | a3\n  6191: a1 = a1 << 0x20\n  6194: t1 = a1 | a2\n  6197: a1 = u8 [a0 + 0x19]\n  6200: a3 = u8 [a0 + 0x18]\n  6203: a4 = u8 [a0 + 0x1a]\n  6206: a5 = u8 [a0 + 0x1b]\n  6209: a1 = a1 << 0x8\n  6212: a1 = a1 | a3\n  6215: a4 = a4 << 0x10\n  6218: a5 = a5 << 0x18\n  6221: a4 = a4 | a5\n  6224: a1 = a1 | a4\n  6227: a3 = u8 [a0 + 0x1d]\n  6230: a4 = u8 [a0 + 0x1c]\n  6233: a5 = u8 [a0 + 0x1e]\n  6236: a2 = u8 [a0 + 0x1f]\n  6239: a3 = a3 << 0x8\n  6242: a3 = a3 | a4\n  6245: a5 = a5 << 0x10\n  6248: a2 = a2 << 0x18\n  6251: a2 = a2 | a5\n  6254: a2 = a2 | a3\n  6257: a2 = a2 << 0x20\n  6260: a3 = a2 | a1\n  6263: a1 = u8 [a0 + 0x9]\n  6266: a2 = u8 [a0 + 0x8]\n  6269: a4 = u8 [a0 + 0xa]\n  6272: a5 = u8 [a0 + 0xb]\n  6275: a1 = a1 << 0x8\n  6278: a1 = a1 | a2\n  6281: a4 = a4 << 0x10\n  6284: a5 = a5 << 0x18\n  6287: a4 = a4 | a5\n  6290: a1 = a1 | a4\n  6293: a2 = u8 [a0 + 0xd]\n  6296: a4 = u8 [a0 + 0xc]\n  6299: a5 = u8 [a0 + 0xe]\n  6302: a0 = u8 [a0 + 0xf]\n  6305: a2 = a2 << 0x8\n  6308: a2 = a2 | a4\n  6311: a5 = a5 << 0x10\n  6314: a0 = a0 << 0x18\n  6317: a0 = a0 | a5\n  6320: a0 = a0 | a2\n  6323: a0 = a0 << 0x20\n  6326: a0 = a0 | a1\n  6329: a1 = reverse a0\n  6331: a0 = reverse a3\n  6333: a2 = reverse t1\n  6335: a3 = reverse t0\n  6337: a2 = a2 | a3\n  6340: a3 = a0 | a1\n  6343: a3 = a3 | a2\n  6346: a3 = a3 >> 0x20\n  6349: a1 = a1 | a2\n  6352: a1 = a1 << 0x20\n  6355: a1 = a1 | a3\n  6358: jump @128 if a1 == 0\n      : @125 (gas: 1)\n  6361: trap\n      : @126 (gas: 3)\n  6362: a0 = 0\n  6364: a1 = 0\n  6366: ra = 100, jump @0\n      : @127 [@dyn 50] (gas: 7)\n  6371: i32 a1 = a0 + 0\n  6373: a0 = 0x1\n  6376: a2 = 0\n  6378: ecalli 6 // 'seal_return'\n  6380: i32 a0 = a0 + 0\n  6382: ra = 0x66\n  6385: jump @0\n      : @128 (gas: 2)\n  6388: i32 a0 = a0 + 0\n  6390: ra = 102, jump @0\n      : @129 [@dyn 51] (gas: 6)\n  6395: i32 a1 = a0 + 0\n  6397: a0 = 0\n  6399: a2 = 0\n  6401: ra = 0x68\n  6404: ecalli 6 // 'seal_return'\n  6406: fallthrough\n      : @130 [@dyn 52] (gas: 45)\n  6407: sp = sp + 0xffffffffffffff40\n  6411: u64 [sp + 0xb8] = ra\n  6415: u64 [sp + 0xb0] = s0\n  6419: u64 [sp + 0xa8] = s1\n  6423: s0 = sp + 0xc0\n  6427: sp = sp & 0xffffffffffffffe0\n  6430: ra = u64 [a1 + 0x10]\n  6433: t2 = u64 [a1 + 0x8]\n  6436: t0 = u64 [a2 + 0x8]\n  6439: a5 = u64 [a1]\n  6441: u64 [sp + 0x78] = a5\n  6444: a3 = u64 [a2]\n  6446: u64 [sp + 0x68] = a3\n  6449: a4 = u64 [a2 + 0x10]\n  6452: t1 = t0 ^ t2\n  6455: s1 = t0 <u t2\n  6458: a3 = a3 <u a5\n  6461: s1 = a3 if t1 == 0\n  6464: t1 = u64 [a1 + 0x18]\n  6467: a5 = u64 [a2 + 0x18]\n  6470: a2 = a4 - ra\n  6473: a1 = a2 - s1\n  6476: u64 [sp + 0x70] = a1\n  6479: a1 = a2 <u s1\n  6482: a4 = a4 <u ra\n  6485: u64 [sp + 0x60] = t1\n  6488: a2 = a5 - t1\n  6491: a5 = u64 [sp + 0x78]\n  6494: a2 = a2 - a4\n  6497: a2 = a2 - a1\n  6500: a1 = t0 - t2\n  6503: a1 = a1 - a3\n  6506: a3 = u64 [sp + 0x68]\n  6509: a3 = a3 - a5\n  6512: a4 = a1 >u 0\n  6514: a3 = a3 <u 0x80\n  6518: a3 = a3 ^ 0x1\n  6521: a3 = a4 if a1 != 0\n  6524: s1 = a2 >s 0\n  6526: a1 = u64 [sp + 0x70]\n  6529: a4 = a1 >u 0\n  6531: a4 = s1 if a2 != 0\n  6534: a1 = a1 | a2\n  6537: a3 = a4 if a1 != 0\n  6540: jump @142 if a3 == 0\n      : @131 (gas: 12)\n  6544: s1 = a0\n  6546: a0 = a5 | ra\n  6549: u64 [sp + 0x70] = t2\n  6552: a1 = u64 [sp + 0x60]\n  6555: a1 = t2 | a1\n  6558: a0 = a0 | a1\n  6561: a0 = a0 >> 0x20\n  6564: u64 [sp + 0x58] = ra\n  6567: a1 = a1 | ra\n  6570: a1 = a1 << 0x20\n  6573: a0 = a0 | a1\n  6576: jump @141 if a0 != 0\n      : @132 (gas: 5)\n  6580: i32 a1 = a5 + 0\n  6582: i32 a0 = sp + 0x80\n  6586: u64 [sp + 0x68] = a1\n  6589: ecalli 1 // 'call_data_load'\n  6591: fallthrough\n      : @133 (gas: 10)\n  6592: a3 = u64 [sp + 0x90]\n  6596: a4 = u64 [sp + 0x98]\n  6600: a0 = 0x100000000\n  6610: a1 = a3 ^ a0\n  6613: a1 = a1 | a4\n  6616: a2 = a3 >> 0x20\n  6619: a2 = a2 <u 0x1\n  6622: a2 = 0 if a4 != 0\n  6624: a2 = 0 if a1 == 0\n  6626: jump @142 if a2 == 0\n      : @134 (gas: 13)\n  6630: u64 [sp + 0x48] = a4\n  6633: u64 [sp + 0x50] = a3\n  6636: a1 = u64 [sp + 0x58]\n  6639: a2 = u64 [sp + 0x60]\n  6642: a2 = a2 | a1\n  6645: a0 = 0xffffffe0\n  6655: a1 = u64 [sp + 0x78]\n  6658: a0 = a1 <u a0\n  6661: a1 = u64 [sp + 0x70]\n  6664: a0 = 0 if a1 != 0\n  6666: u64 [sp + 0x60] = a2\n  6669: a0 = 0 if a2 != 0\n  6671: jump @141 if a0 == 0\n      : @135 (gas: 9)\n  6675: a0 = u64 [sp + 0x88]\n  6679: u64 [sp + 0x40] = a0\n  6682: a0 = u64 [sp + 0x80]\n  6686: u64 [sp + 0x58] = a0\n  6689: a0 = u64 [sp + 0x68]\n  6692: i32 a1 = a0 + 0x20\n  6695: i32 a0 = sp + 0x80\n  6699: ecalli 1 // 'call_data_load'\n  6701: fallthrough\n      : @136 (gas: 10)\n  6702: a3 = u64 [sp + 0x90]\n  6706: a4 = u64 [sp + 0x98]\n  6710: a0 = 0x100000000\n  6720: a1 = a3 ^ a0\n  6723: a1 = a1 | a4\n  6726: a2 = a3 >> 0x20\n  6729: a2 = a2 <u 0x1\n  6732: a2 = 0 if a4 != 0\n  6734: a2 = 0 if a1 == 0\n  6736: jump @142 if a2 == 0\n      : @137 (gas: 10)\n  6740: u64 [sp + 0x30] = a4\n  6743: u64 [sp + 0x38] = a3\n  6746: a0 = 0xffffffc0\n  6756: a1 = u64 [sp + 0x78]\n  6759: a0 = a1 <u a0\n  6762: a1 = u64 [sp + 0x70]\n  6765: a0 = 0 if a1 != 0\n  6767: a1 = u64 [sp + 0x60]\n  6770: a0 = 0 if a1 != 0\n  6772: jump @141 if a0 == 0\n      : @138 (gas: 9)\n  6776: a0 = u64 [sp + 0x88]\n  6780: u64 [sp + 0x20] = a0\n  6783: a0 = u64 [sp + 0x80]\n  6787: u64 [sp + 0x28] = a0\n  6790: a0 = u64 [sp + 0x68]\n  6793: i32 a1 = a0 + 0x40\n  6796: i32 a0 = sp + 0x80\n  6800: ecalli 1 // 'call_data_load'\n  6802: fallthrough\n      : @139 (gas: 8)\n  6803: a0 = 0xffffffa0\n  6813: a1 = u64 [sp + 0x78]\n  6816: a0 = a1 <u a0\n  6819: a1 = u64 [sp + 0x70]\n  6822: a0 = 0 if a1 != 0\n  6824: a1 = u64 [sp + 0x60]\n  6827: a0 = 0 if a1 != 0\n  6829: jump @141 if a0 == 0\n      : @140 (gas: 50)\n  6833: a0 = u64 [sp + 0x98]\n  6837: u64 [sp + 0x18] = a0\n  6840: a0 = u64 [sp + 0x90]\n  6844: u64 [sp + 0x60] = a0\n  6847: a0 = u64 [sp + 0x88]\n  6851: u64 [sp + 0x70] = a0\n  6854: a0 = u64 [sp + 0x80]\n  6858: u64 [sp + 0x78] = a0\n  6861: a0 = u64 [sp + 0x68]\n  6864: i32 a1 = a0 + 0x60\n  6867: i32 a0 = sp + 0x80\n  6871: ecalli 1 // 'call_data_load'\n  6873: a0 = u64 [sp + 0x98]\n  6877: a1 = u64 [sp + 0x90]\n  6881: a2 = u64 [sp + 0x88]\n  6885: a3 = u64 [sp + 0x80]\n  6889: u64 [s1 + 0x78] = a0\n  6892: u64 [s1 + 0x70] = a1\n  6895: u64 [s1 + 0x68] = a2\n  6898: u64 [s1 + 0x60] = a3\n  6901: a0 = u64 [sp + 0x18]\n  6904: u64 [s1 + 0x58] = a0\n  6907: a0 = u64 [sp + 0x60]\n  6910: u64 [s1 + 0x50] = a0\n  6913: a0 = u64 [sp + 0x70]\n  6916: u64 [s1 + 0x48] = a0\n  6919: a0 = u64 [sp + 0x78]\n  6922: u64 [s1 + 0x40] = a0\n  6925: a0 = u64 [sp + 0x30]\n  6928: u64 [s1 + 0x38] = a0\n  6931: a0 = u64 [sp + 0x38]\n  6934: u64 [s1 + 0x30] = a0\n  6937: a0 = u64 [sp + 0x20]\n  6940: u64 [s1 + 0x28] = a0\n  6943: a0 = u64 [sp + 0x28]\n  6946: u64 [s1 + 0x20] = a0\n  6949: a0 = u64 [sp + 0x48]\n  6952: u64 [s1 + 0x18] = a0\n  6955: a0 = u64 [sp + 0x50]\n  6958: u64 [s1 + 0x10] = a0\n  6961: a0 = u64 [sp + 0x40]\n  6964: u64 [s1 + 0x8] = a0\n  6967: a0 = u64 [sp + 0x58]\n  6970: u64 [s1] = a0\n  6972: sp = s0 + 0xffffffffffffff40\n  6976: ra = u64 [sp + 0xb8]\n  6980: s0 = u64 [sp + 0xb0]\n  6984: s1 = u64 [sp + 0xa8]\n  6988: sp = sp + 0xc0\n  6992: ret\n      : @141 (gas: 1)\n  6994: trap\n      : @142 (gas: 3)\n  6995: a0 = 0\n  6997: a1 = 0\n  6999: ra = 106, jump @0\n      : @143 [@dyn 53] (gas: 6)\n  7004: i32 a1 = a0 + 0\n  7006: a0 = 0x1\n  7009: a2 = 0\n  7011: ra = 0x6c\n  7014: ecalli 6 // 'seal_return'\n  7016: fallthrough\n      : @144 [@dyn 54] (gas: 13)\n  7017: sp = sp + 0xfffffffffffffe40\n  7021: u64 [sp + 0x1b8] = ra\n  7025: u64 [sp + 0x1b0] = s0\n  7029: u64 [sp + 0x1a8] = s1\n  7033: s0 = sp + 0x1c0\n  7037: sp = sp & 0xffffffffffffffe0\n  7040: u64 [sp + 408] = 0\n  7044: u64 [sp + 400] = 0\n  7048: u64 [sp + 392] = 0\n  7052: u64 [sp + 384] = 0\n  7056: i32 a0 = sp + 0x180\n  7060: ecalli 9 // 'value_transferred'\n  7062: fallthrough\n      : @145 (gas: 8)\n  7063: a0 = u64 [sp + 0x190]\n  7067: a1 = u64 [sp + 0x198]\n  7071: a2 = u64 [sp + 0x188]\n  7075: a3 = u64 [sp + 0x180]\n  7079: a1 = a1 | a2\n  7082: a0 = a0 | a3\n  7085: a0 = a0 | a1\n  7088: jump @151 if a0 != 0\n      : @146 (gas: 13)\n  7092: a0 = u32 [0x20004]\n  7097: u64 [sp + 216] = 0\n  7101: u64 [sp + 208] = 0\n  7105: u64 [sp + 200] = 0\n  7109: u64 [sp + 0xc0] = a0\n  7113: u64 [sp + 248] = 0\n  7117: u64 [sp + 240] = 0\n  7121: u64 [sp + 224] = 0x4\n  7126: a0 = sp + 0x100\n  7130: a1 = sp + 0xe0\n  7134: a2 = sp + 0xc0\n  7138: u64 [sp + 232] = 0\n  7142: ra = 110, jump @130\n      : @147 [@dyn 55] (gas: 47)\n  7147: a0 = u64 [sp + 0x100]\n  7151: u64 [sp + 0x38] = a0\n  7154: a0 = u64 [sp + 0x108]\n  7158: u64 [sp + 0x30] = a0\n  7161: a0 = u64 [sp + 0x110]\n  7165: u64 [sp + 0x28] = a0\n  7168: a0 = u64 [sp + 0x118]\n  7172: u64 [sp + 0x20] = a0\n  7175: a0 = u64 [sp + 0x120]\n  7179: u64 [sp + 0x18] = a0\n  7182: ra = u64 [sp + 0x128]\n  7186: t2 = u64 [sp + 0x130]\n  7190: t1 = u64 [sp + 0x138]\n  7194: t0 = u64 [sp + 0x140]\n  7198: s1 = u64 [sp + 0x148]\n  7202: a5 = u64 [sp + 0x150]\n  7206: a4 = u64 [sp + 0x158]\n  7210: a3 = u64 [sp + 0x160]\n  7214: a2 = u64 [sp + 0x168]\n  7218: a1 = u64 [sp + 0x170]\n  7222: a0 = u64 [sp + 0x178]\n  7226: u64 [sp + 0x58] = a0\n  7229: u64 [sp + 0x50] = a1\n  7232: u64 [sp + 0x48] = a2\n  7235: u64 [sp + 0x40] = a3\n  7238: u64 [sp + 0x78] = a4\n  7241: u64 [sp + 0x70] = a5\n  7244: u64 [sp + 0x68] = s1\n  7247: u64 [sp + 0x60] = t0\n  7250: u64 [sp + 0x98] = t1\n  7254: u64 [sp + 0x90] = t2\n  7258: u64 [sp + 0x88] = ra\n  7262: a0 = u64 [sp + 0x18]\n  7265: u64 [sp + 0x80] = a0\n  7269: a0 = u64 [sp + 0x20]\n  7272: u64 [sp + 0xb8] = a0\n  7276: a0 = u64 [sp + 0x28]\n  7279: u64 [sp + 0xb0] = a0\n  7283: a0 = u64 [sp + 0x30]\n  7286: u64 [sp + 0xa8] = a0\n  7290: a0 = sp + 0xa0\n  7294: a1 = sp + 0x80\n  7298: a2 = sp + 0x60\n  7301: a3 = sp + 0x40\n  7304: a4 = u64 [sp + 0x38]\n  7307: u64 [sp + 0xa0] = a4\n  7311: ra = 112, jump @294\n      : @148 [@dyn 56] (gas: 3)\n  7316: a0 = 0x40\n  7319: a1 = 0x20\n  7322: ra = 114, jump @0\n      : @149 [@dyn 57] (gas: 100)\n  7327: a1 = u8 [a0 + 0x11]\n  7330: a2 = u8 [a0 + 0x10]\n  7333: a3 = u8 [a0 + 0x12]\n  7336: a4 = u8 [a0 + 0x13]\n  7339: a1 = a1 << 0x8\n  7342: a1 = a1 | a2\n  7345: a3 = a3 << 0x10\n  7348: a4 = a4 << 0x18\n  7351: a3 = a3 | a4\n  7354: a1 = a1 | a3\n  7357: a2 = u8 [a0 + 0x15]\n  7360: a3 = u8 [a0 + 0x14]\n  7363: a4 = u8 [a0 + 0x16]\n  7366: a5 = u8 [a0 + 0x17]\n  7369: a2 = a2 << 0x8\n  7372: a2 = a2 | a3\n  7375: a4 = a4 << 0x10\n  7378: a5 = a5 << 0x18\n  7381: a4 = a4 | a5\n  7384: a2 = a2 | a4\n  7387: a2 = a2 << 0x20\n  7390: t0 = a2 | a1\n  7393: a2 = u8 [a0 + 0x1]\n  7396: a3 = u8 [a0]\n  7398: a4 = u8 [a0 + 0x2]\n  7401: a5 = u8 [a0 + 0x3]\n  7404: a2 = a2 << 0x8\n  7407: a2 = a2 | a3\n  7410: a4 = a4 << 0x10\n  7413: a5 = a5 << 0x18\n  7416: a4 = a4 | a5\n  7419: a2 = a2 | a4\n  7422: a3 = u8 [a0 + 0x5]\n  7425: a4 = u8 [a0 + 0x4]\n  7428: a5 = u8 [a0 + 0x6]\n  7431: s1 = u8 [a0 + 0x7]\n  7434: a3 = a3 << 0x8\n  7437: a3 = a3 | a4\n  7440: a5 = a5 << 0x10\n  7443: s1 = s1 << 0x18\n  7446: a5 = a5 | s1\n  7449: a3 = a3 | a5\n  7452: a3 = a3 << 0x20\n  7455: a2 = a2 | a3\n  7458: a3 = u8 [a0 + 0x19]\n  7461: a4 = u8 [a0 + 0x18]\n  7464: a5 = u8 [a0 + 0x1a]\n  7467: s1 = u8 [a0 + 0x1b]\n  7470: a3 = a3 << 0x8\n  7473: a3 = a3 | a4\n  7476: a5 = a5 << 0x10\n  7479: s1 = s1 << 0x18\n  7482: a5 = a5 | s1\n  7485: a3 = a3 | a5\n  7488: a4 = u8 [a0 + 0x1d]\n  7491: a5 = u8 [a0 + 0x1c]\n  7494: s1 = u8 [a0 + 0x1e]\n  7497: a1 = u8 [a0 + 0x1f]\n  7500: a4 = a4 << 0x8\n  7503: a4 = a4 | a5\n  7506: s1 = s1 << 0x10\n  7509: a1 = a1 << 0x18\n  7512: a1 = a1 | s1\n  7515: a1 = a1 | a4\n  7518: a1 = a1 << 0x20\n  7521: a3 = a3 | a1\n  7524: a1 = u8 [a0 + 0x9]\n  7527: a4 = u8 [a0 + 0x8]\n  7530: a5 = u8 [a0 + 0xa]\n  7533: s1 = u8 [a0 + 0xb]\n  7536: a1 = a1 << 0x8\n  7539: a1 = a1 | a4\n  7542: a5 = a5 << 0x10\n  7545: s1 = s1 << 0x18\n  7548: a5 = a5 | s1\n  7551: a1 = a1 | a5\n  7554: a4 = u8 [a0 + 0xd]\n  7557: a5 = u8 [a0 + 0xc]\n  7560: s1 = u8 [a0 + 0xe]\n  7563: a0 = u8 [a0 + 0xf]\n  7566: a4 = a4 << 0x8\n  7569: a4 = a4 | a5\n  7572: s1 = s1 << 0x10\n  7575: a0 = a0 << 0x18\n  7578: a0 = a0 | s1\n  7581: a0 = a0 | a4\n  7584: a0 = a0 << 0x20\n  7587: a0 = a0 | a1\n  7590: a1 = reverse a0\n  7592: a0 = reverse a3\n  7594: a2 = reverse a2\n  7596: a3 = reverse t0\n  7598: a2 = a2 | a3\n  7601: a3 = a0 | a1\n  7604: a3 = a3 | a2\n  7607: a3 = a3 >> 0x20\n  7610: a1 = a1 | a2\n  7613: a1 = a1 << 0x20\n  7616: a1 = a1 | a3\n  7619: jump @153 if a1 == 0\n      : @150 (gas: 1)\n  7622: trap\n      : @151 (gas: 3)\n  7623: a0 = 0\n  7625: a1 = 0\n  7627: ra = 116, jump @0\n      : @152 [@dyn 58] (gas: 7)\n  7632: i32 a1 = a0 + 0\n  7634: a0 = 0x1\n  7637: a2 = 0\n  7639: ecalli 6 // 'seal_return'\n  7641: i32 a0 = a0 + 0\n  7643: ra = 0x76\n  7646: jump @0\n      : @153 (gas: 2)\n  7649: i32 a0 = a0 + 0\n  7651: ra = 118, jump @0\n      : @154 [@dyn 59] (gas: 6)\n  7656: i32 a1 = a0 + 0\n  7658: a0 = 0\n  7660: a2 = 0\n  7662: ra = 0x78\n  7665: ecalli 6 // 'seal_return'\n  7667: fallthrough\n      : @155 [@dyn 60] (gas: 6)\n  7668: u64 [a0 + 24] = 0\n  7671: u64 [a0 + 16] = 0\n  7674: u64 [a0 + 8] = 0\n  7677: a1 = 0x9\n  7680: u64 [a0] = a1\n  7682: ret\n      : @156 (gas: 19)\n  7684: sp = sp + 0xfffffffffffffea0\n  7688: u64 [sp + 0x158] = ra\n  7692: u64 [sp + 0x150] = s0\n  7696: u64 [sp + 0x148] = s1\n  7700: a4 = u64 [a0 + 0x10]\n  7703: a5 = u64 [a0 + 0x18]\n  7706: a2 = u64 [a0 + 0x8]\n  7709: a3 = u64 [a0]\n  7711: u64 [sp + 0x138] = a2\n  7715: u64 [sp + 0x118] = a5\n  7719: a0 = a2 | a5\n  7722: a2 = a3 | a4\n  7725: a2 = a2 | a0\n  7728: a2 = a2 >> 0x20\n  7731: u64 [sp + 0x120] = a4\n  7735: a0 = a0 | a4\n  7738: a0 = a0 << 0x20\n  7741: a0 = a0 | a2\n  7744: jump @158 if a0 == 0\n      : @157 (gas: 1)\n  7747: jump @195\n      : @158 (gas: 10)\n  7750: a0 = u64 [a1 + 0x18]\n  7753: u64 [sp + 0x108] = a0\n  7757: s0 = u64 [a1 + 0x10]\n  7760: s1 = u64 [a1 + 0x8]\n  7763: a0 = u64 [a1]\n  7765: u64 [sp + 0x140] = a0\n  7769: u64 [sp + 0x130] = a3\n  7773: i32 a0 = a3 + 0\n  7775: a1 = 0x20\n  7778: ra = 122, jump @0\n      : @159 [@dyn 61] (gas: 12)\n  7783: a3 = u64 [sp + 0x140]\n  7787: a1 = a3 | s0\n  7790: u64 [sp + 0x128] = s1\n  7794: a2 = u64 [sp + 0x108]\n  7798: a2 = a2 | s1\n  7801: a1 = a1 | a2\n  7804: a1 = a1 >> 0x20\n  7807: u64 [sp + 0xf8] = s0\n  7811: a2 = a2 | s0\n  7814: a2 = a2 << 0x20\n  7817: a1 = a1 | a2\n  7820: jump @161 if a1 == 0\n      : @160 (gas: 1)\n  7823: jump @195\n      : @161 (gas: 65)\n  7826: a1 = u8 [a0]\n  7828: u64 [sp + 0x100] = a1\n  7832: a1 = u8 [a0 + 0x1]\n  7835: u64 [sp + 0x110] = a1\n  7839: a1 = u8 [a0 + 0x2]\n  7842: u64 [sp + 0xf0] = a1\n  7846: a1 = u8 [a0 + 0x3]\n  7849: u64 [sp + 0xe8] = a1\n  7853: a1 = u8 [a0 + 0x4]\n  7856: u64 [sp + 0xe0] = a1\n  7860: a1 = u8 [a0 + 0x5]\n  7863: u64 [sp + 0xd8] = a1\n  7867: a1 = u8 [a0 + 0x6]\n  7870: u64 [sp + 0xd0] = a1\n  7874: a1 = u8 [a0 + 0x7]\n  7877: u64 [sp + 0xc8] = a1\n  7881: a1 = u8 [a0 + 0x8]\n  7884: u64 [sp + 0xc0] = a1\n  7888: a1 = u8 [a0 + 0x9]\n  7891: u64 [sp + 0xb8] = a1\n  7895: a1 = u8 [a0 + 0xa]\n  7898: u64 [sp + 0xb0] = a1\n  7902: a1 = u8 [a0 + 0xb]\n  7905: u64 [sp + 0xa8] = a1\n  7909: a1 = u8 [a0 + 0xc]\n  7912: u64 [sp + 0xa0] = a1\n  7916: a1 = u8 [a0 + 0xd]\n  7919: u64 [sp + 0x98] = a1\n  7923: a1 = u8 [a0 + 0xe]\n  7926: u64 [sp + 0x90] = a1\n  7930: a1 = u8 [a0 + 0xf]\n  7933: u64 [sp + 0x88] = a1\n  7937: a1 = u8 [a0 + 0x10]\n  7940: u64 [sp + 0x80] = a1\n  7944: a1 = u8 [a0 + 0x11]\n  7947: u64 [sp + 0x78] = a1\n  7950: a1 = u8 [a0 + 0x12]\n  7953: u64 [sp + 0x70] = a1\n  7956: a1 = u8 [a0 + 0x13]\n  7959: u64 [sp + 0x68] = a1\n  7962: a1 = u8 [a0 + 0x14]\n  7965: u64 [sp + 0x60] = a1\n  7968: a1 = u8 [a0 + 0x15]\n  7971: u64 [sp + 0x58] = a1\n  7974: a1 = u8 [a0 + 0x16]\n  7977: u64 [sp + 0x50] = a1\n  7980: a1 = u8 [a0 + 0x17]\n  7983: u64 [sp + 0x48] = a1\n  7986: a1 = u8 [a0 + 0x18]\n  7989: u64 [sp + 0x40] = a1\n  7992: a1 = u8 [a0 + 0x19]\n  7995: u64 [sp + 0x38] = a1\n  7998: a1 = u8 [a0 + 0x1a]\n  8001: u64 [sp + 0x30] = a1\n  8004: a1 = u8 [a0 + 0x1b]\n  8007: u64 [sp + 0x28] = a1\n  8010: a1 = u8 [a0 + 0x1c]\n  8013: u64 [sp + 0x20] = a1\n  8016: a1 = u8 [a0 + 0x1d]\n  8019: u64 [sp + 0x18] = a1\n  8022: s1 = u8 [a0 + 0x1e]\n  8025: s0 = u8 [a0 + 0x1f]\n  8028: i32 a0 = a3 + 0\n  8030: a1 = 0x20\n  8033: ra = 124, jump @0\n      : @162 [@dyn 62] (gas: 79)\n  8038: u8 [a0 + 0x1f] = s0\n  8041: u8 [a0 + 0x1e] = s1\n  8044: a1 = u64 [sp + 0x18]\n  8047: u8 [a0 + 0x1d] = a1\n  8050: a1 = u64 [sp + 0x20]\n  8053: u8 [a0 + 0x1c] = a1\n  8056: a1 = u64 [sp + 0x28]\n  8059: u8 [a0 + 0x1b] = a1\n  8062: a1 = u64 [sp + 0x30]\n  8065: u8 [a0 + 0x1a] = a1\n  8068: a1 = u64 [sp + 0x38]\n  8071: u8 [a0 + 0x19] = a1\n  8074: a1 = u64 [sp + 0x40]\n  8077: u8 [a0 + 0x18] = a1\n  8080: a1 = u64 [sp + 0x48]\n  8083: u8 [a0 + 0x17] = a1\n  8086: a1 = u64 [sp + 0x50]\n  8089: u8 [a0 + 0x16] = a1\n  8092: a1 = u64 [sp + 0x58]\n  8095: u8 [a0 + 0x15] = a1\n  8098: a1 = u64 [sp + 0x60]\n  8101: u8 [a0 + 0x14] = a1\n  8104: a1 = u64 [sp + 0x68]\n  8107: u8 [a0 + 0x13] = a1\n  8110: a1 = u64 [sp + 0x70]\n  8113: u8 [a0 + 0x12] = a1\n  8116: a1 = u64 [sp + 0x78]\n  8119: u8 [a0 + 0x11] = a1\n  8122: a1 = u64 [sp + 0x80]\n  8126: u8 [a0 + 0x10] = a1\n  8129: a1 = u64 [sp + 0x88]\n  8133: u8 [a0 + 0xf] = a1\n  8136: a1 = u64 [sp + 0x90]\n  8140: u8 [a0 + 0xe] = a1\n  8143: a1 = u64 [sp + 0x98]\n  8147: u8 [a0 + 0xd] = a1\n  8150: a1 = u64 [sp + 0xa0]\n  8154: u8 [a0 + 0xc] = a1\n  8157: a1 = u64 [sp + 0xa8]\n  8161: u8 [a0 + 0xb] = a1\n  8164: a1 = u64 [sp + 0xb0]\n  8168: u8 [a0 + 0xa] = a1\n  8171: a1 = u64 [sp + 0xb8]\n  8175: u8 [a0 + 0x9] = a1\n  8178: a1 = u64 [sp + 0xc0]\n  8182: u8 [a0 + 0x8] = a1\n  8185: a1 = u64 [sp + 0xc8]\n  8189: u8 [a0 + 0x7] = a1\n  8192: a1 = u64 [sp + 0xd0]\n  8196: u8 [a0 + 0x6] = a1\n  8199: a1 = u64 [sp + 0xd8]\n  8203: u8 [a0 + 0x5] = a1\n  8206: a1 = u64 [sp + 0xe0]\n  8210: u8 [a0 + 0x4] = a1\n  8213: a1 = u64 [sp + 0xe8]\n  8217: u8 [a0 + 0x3] = a1\n  8220: a1 = u64 [sp + 0xf0]\n  8224: u8 [a0 + 0x2] = a1\n  8227: a1 = u64 [sp + 0x110]\n  8231: u8 [a0 + 0x1] = a1\n  8234: a3 = u64 [sp + 0x120]\n  8238: a1 = a3 >u 0\n  8240: a5 = u64 [sp + 0x118]\n  8244: a4 = a5 >u 0\n  8246: a4 = a1 if a5 == 0\n  8249: s0 = 0xffffffdf\n  8259: a2 = u64 [sp + 0x130]\n  8263: a1 = s0 <u a2\n  8266: a5 = a5 | a3\n  8269: a3 = u64 [sp + 0x138]\n  8273: s1 = a3 >u 0\n  8275: u64 [sp + 0x110] = s1\n  8279: a1 = s1 if a3 != 0\n  8282: u64 [sp + 0x120] = a4\n  8286: u64 [sp + 0x118] = a5\n  8290: a1 = a4 if a5 != 0\n  8293: a3 = u64 [sp + 0x100]\n  8297: u8 [a0] = a3\n  8299: jump @195 if a1 != 0\n      : @163 (gas: 3)\n  8303: i32 a0 = a2 + 0x20\n  8306: a1 = 0x20\n  8309: ra = 126, jump @0\n      : @164 [@dyn 63] (gas: 16)\n  8314: a2 = u64 [sp + 0xf8]\n  8318: a1 = a2 >u 0\n  8320: s1 = u64 [sp + 0x108]\n  8324: a4 = s1 >u 0\n  8326: a4 = a1 if s1 == 0\n  8329: t0 = u64 [sp + 0x140]\n  8333: a1 = s0 <u t0\n  8336: a3 = u64 [sp + 0x128]\n  8340: a5 = a3 >u 0\n  8342: u64 [sp + 0x100] = a5\n  8346: a1 = a5 if a3 != 0\n  8349: a3 = a2 | s1\n  8352: u64 [sp + 0x108] = a4\n  8356: u64 [sp + 0xf8] = a3\n  8360: a1 = a4 if a3 != 0\n  8363: jump @195 if a1 != 0\n      : @165 (gas: 65)\n  8367: a1 = u8 [a0]\n  8369: u64 [sp + 0xf0] = a1\n  8373: a1 = u8 [a0 + 0x1]\n  8376: u64 [sp + 0xe8] = a1\n  8380: a1 = u8 [a0 + 0x2]\n  8383: u64 [sp + 0xe0] = a1\n  8387: a1 = u8 [a0 + 0x3]\n  8390: u64 [sp + 0xd8] = a1\n  8394: a1 = u8 [a0 + 0x4]\n  8397: u64 [sp + 0xd0] = a1\n  8401: a1 = u8 [a0 + 0x5]\n  8404: u64 [sp + 0xc8] = a1\n  8408: a1 = u8 [a0 + 0x6]\n  8411: u64 [sp + 0xc0] = a1\n  8415: a1 = u8 [a0 + 0x7]\n  8418: u64 [sp + 0xb8] = a1\n  8422: a1 = u8 [a0 + 0x8]\n  8425: u64 [sp + 0xb0] = a1\n  8429: a1 = u8 [a0 + 0x9]\n  8432: u64 [sp + 0xa8] = a1\n  8436: a1 = u8 [a0 + 0xa]\n  8439: u64 [sp + 0xa0] = a1\n  8443: a1 = u8 [a0 + 0xb]\n  8446: u64 [sp + 0x98] = a1\n  8450: a1 = u8 [a0 + 0xc]\n  8453: u64 [sp + 0x90] = a1\n  8457: a1 = u8 [a0 + 0xd]\n  8460: u64 [sp + 0x88] = a1\n  8464: a1 = u8 [a0 + 0xe]\n  8467: u64 [sp + 0x80] = a1\n  8471: a1 = u8 [a0 + 0xf]\n  8474: u64 [sp + 0x78] = a1\n  8477: a1 = u8 [a0 + 0x10]\n  8480: u64 [sp + 0x70] = a1\n  8483: a1 = u8 [a0 + 0x11]\n  8486: u64 [sp + 0x68] = a1\n  8489: a1 = u8 [a0 + 0x12]\n  8492: u64 [sp + 0x60] = a1\n  8495: a1 = u8 [a0 + 0x13]\n  8498: u64 [sp + 0x58] = a1\n  8501: a1 = u8 [a0 + 0x14]\n  8504: u64 [sp + 0x50] = a1\n  8507: a1 = u8 [a0 + 0x15]\n  8510: u64 [sp + 0x48] = a1\n  8513: a1 = u8 [a0 + 0x16]\n  8516: u64 [sp + 0x40] = a1\n  8519: a1 = u8 [a0 + 0x17]\n  8522: u64 [sp + 0x38] = a1\n  8525: a1 = u8 [a0 + 0x18]\n  8528: u64 [sp + 0x30] = a1\n  8531: a1 = u8 [a0 + 0x19]\n  8534: u64 [sp + 0x28] = a1\n  8537: a1 = u8 [a0 + 0x1a]\n  8540: u64 [sp + 0x20] = a1\n  8543: a1 = u8 [a0 + 0x1b]\n  8546: u64 [sp + 0x18] = a1\n  8549: a1 = u8 [a0 + 0x1c]\n  8552: u64 [sp + 0x10] = a1\n  8555: a1 = u8 [a0 + 0x1d]\n  8558: u64 [sp + 0x8] = a1\n  8561: s0 = u8 [a0 + 0x1e]\n  8564: s1 = u8 [a0 + 0x1f]\n  8567: i32 a0 = t0 + 0x20\n  8570: a1 = 0x20\n  8573: ra = 128, jump @0\n      : @166 [@dyn 64] (gas: 72)\n  8579: u8 [a0 + 0x1f] = s1\n  8582: u8 [a0 + 0x1e] = s0\n  8585: a1 = u64 [sp + 0x8]\n  8588: u8 [a0 + 0x1d] = a1\n  8591: a1 = u64 [sp + 0x10]\n  8594: u8 [a0 + 0x1c] = a1\n  8597: a1 = u64 [sp + 0x18]\n  8600: u8 [a0 + 0x1b] = a1\n  8603: a1 = u64 [sp + 0x20]\n  8606: u8 [a0 + 0x1a] = a1\n  8609: a1 = u64 [sp + 0x28]\n  8612: u8 [a0 + 0x19] = a1\n  8615: a1 = u64 [sp + 0x30]\n  8618: u8 [a0 + 0x18] = a1\n  8621: a1 = u64 [sp + 0x38]\n  8624: u8 [a0 + 0x17] = a1\n  8627: a1 = u64 [sp + 0x40]\n  8630: u8 [a0 + 0x16] = a1\n  8633: a1 = u64 [sp + 0x48]\n  8636: u8 [a0 + 0x15] = a1\n  8639: a1 = u64 [sp + 0x50]\n  8642: u8 [a0 + 0x14] = a1\n  8645: a1 = u64 [sp + 0x58]\n  8648: u8 [a0 + 0x13] = a1\n  8651: a1 = u64 [sp + 0x60]\n  8654: u8 [a0 + 0x12] = a1\n  8657: a1 = u64 [sp + 0x68]\n  8660: u8 [a0 + 0x11] = a1\n  8663: a1 = u64 [sp + 0x70]\n  8666: u8 [a0 + 0x10] = a1\n  8669: a1 = u64 [sp + 0x78]\n  8672: u8 [a0 + 0xf] = a1\n  8675: a1 = u64 [sp + 0x80]\n  8679: u8 [a0 + 0xe] = a1\n  8682: a1 = u64 [sp + 0x88]\n  8686: u8 [a0 + 0xd] = a1\n  8689: a1 = u64 [sp + 0x90]\n  8693: u8 [a0 + 0xc] = a1\n  8696: a1 = u64 [sp + 0x98]\n  8700: u8 [a0 + 0xb] = a1\n  8703: a1 = u64 [sp + 0xa0]\n  8707: u8 [a0 + 0xa] = a1\n  8710: a1 = u64 [sp + 0xa8]\n  8714: u8 [a0 + 0x9] = a1\n  8717: a1 = u64 [sp + 0xb0]\n  8721: u8 [a0 + 0x8] = a1\n  8724: a1 = u64 [sp + 0xb8]\n  8728: u8 [a0 + 0x7] = a1\n  8731: a1 = u64 [sp + 0xc0]\n  8735: u8 [a0 + 0x6] = a1\n  8738: a1 = u64 [sp + 0xc8]\n  8742: u8 [a0 + 0x5] = a1\n  8745: a1 = u64 [sp + 0xd0]\n  8749: u8 [a0 + 0x4] = a1\n  8752: a1 = u64 [sp + 0xd8]\n  8756: u8 [a0 + 0x3] = a1\n  8759: a1 = u64 [sp + 0xe0]\n  8763: u8 [a0 + 0x2] = a1\n  8766: a1 = u64 [sp + 0xe8]\n  8770: u8 [a0 + 0x1] = a1\n  8773: s0 = 0xffffffbf\n  8783: a2 = u64 [sp + 0x130]\n  8787: a1 = s0 <u a2\n  8790: a3 = u64 [sp + 0x138]\n  8794: a4 = u64 [sp + 0x110]\n  8798: a1 = a4 if a3 != 0\n  8801: a3 = u64 [sp + 0x120]\n  8805: a4 = u64 [sp + 0x118]\n  8809: a1 = a3 if a4 != 0\n  8812: a3 = u64 [sp + 0xf0]\n  8816: u8 [a0] = a3\n  8818: jump @195 if a1 != 0\n      : @167 (gas: 3)\n  8822: i32 a0 = a2 + 0x40\n  8825: a1 = 0x20\n  8828: ra = 130, jump @0\n      : @168 [@dyn 65] (gas: 9)\n  8834: a2 = u64 [sp + 0x140]\n  8838: a1 = s0 <u a2\n  8841: a3 = u64 [sp + 0x128]\n  8845: a4 = u64 [sp + 0x100]\n  8849: a1 = a4 if a3 != 0\n  8852: a3 = u64 [sp + 0x108]\n  8856: a4 = u64 [sp + 0xf8]\n  8860: a1 = a3 if a4 != 0\n  8863: jump @195 if a1 != 0\n      : @169 (gas: 65)\n  8867: a1 = u8 [a0]\n  8869: u64 [sp + 0xf0] = a1\n  8873: a1 = u8 [a0 + 0x1]\n  8876: u64 [sp + 0xe8] = a1\n  8880: a1 = u8 [a0 + 0x2]\n  8883: u64 [sp + 0xe0] = a1\n  8887: a1 = u8 [a0 + 0x3]\n  8890: u64 [sp + 0xd8] = a1\n  8894: a1 = u8 [a0 + 0x4]\n  8897: u64 [sp + 0xd0] = a1\n  8901: a1 = u8 [a0 + 0x5]\n  8904: u64 [sp + 0xc8] = a1\n  8908: a1 = u8 [a0 + 0x6]\n  8911: u64 [sp + 0xc0] = a1\n  8915: a1 = u8 [a0 + 0x7]\n  8918: u64 [sp + 0xb8] = a1\n  8922: a1 = u8 [a0 + 0x8]\n  8925: u64 [sp + 0xb0] = a1\n  8929: a1 = u8 [a0 + 0x9]\n  8932: u64 [sp + 0xa8] = a1\n  8936: a1 = u8 [a0 + 0xa]\n  8939: u64 [sp + 0xa0] = a1\n  8943: a1 = u8 [a0 + 0xb]\n  8946: u64 [sp + 0x98] = a1\n  8950: a1 = u8 [a0 + 0xc]\n  8953: u64 [sp + 0x90] = a1\n  8957: a1 = u8 [a0 + 0xd]\n  8960: u64 [sp + 0x88] = a1\n  8964: a1 = u8 [a0 + 0xe]\n  8967: u64 [sp + 0x80] = a1\n  8971: a1 = u8 [a0 + 0xf]\n  8974: u64 [sp + 0x78] = a1\n  8977: a1 = u8 [a0 + 0x10]\n  8980: u64 [sp + 0x70] = a1\n  8983: a1 = u8 [a0 + 0x11]\n  8986: u64 [sp + 0x68] = a1\n  8989: a1 = u8 [a0 + 0x12]\n  8992: u64 [sp + 0x60] = a1\n  8995: a1 = u8 [a0 + 0x13]\n  8998: u64 [sp + 0x58] = a1\n  9001: a1 = u8 [a0 + 0x14]\n  9004: u64 [sp + 0x50] = a1\n  9007: a1 = u8 [a0 + 0x15]\n  9010: u64 [sp + 0x48] = a1\n  9013: a1 = u8 [a0 + 0x16]\n  9016: u64 [sp + 0x40] = a1\n  9019: a1 = u8 [a0 + 0x17]\n  9022: u64 [sp + 0x38] = a1\n  9025: a1 = u8 [a0 + 0x18]\n  9028: u64 [sp + 0x30] = a1\n  9031: a1 = u8 [a0 + 0x19]\n  9034: u64 [sp + 0x28] = a1\n  9037: a1 = u8 [a0 + 0x1a]\n  9040: u64 [sp + 0x20] = a1\n  9043: a1 = u8 [a0 + 0x1b]\n  9046: u64 [sp + 0x18] = a1\n  9049: a1 = u8 [a0 + 0x1c]\n  9052: u64 [sp + 0x10] = a1\n  9055: a1 = u8 [a0 + 0x1d]\n  9058: u64 [sp + 0x8] = a1\n  9061: s0 = u8 [a0 + 0x1e]\n  9064: s1 = u8 [a0 + 0x1f]\n  9067: i32 a0 = a2 + 0x40\n  9070: a1 = 0x20\n  9073: ra = 132, jump @0\n      : @170 [@dyn 66] (gas: 72)\n  9079: u8 [a0 + 0x1f] = s1\n  9082: u8 [a0 + 0x1e] = s0\n  9085: a1 = u64 [sp + 0x8]\n  9088: u8 [a0 + 0x1d] = a1\n  9091: a1 = u64 [sp + 0x10]\n  9094: u8 [a0 + 0x1c] = a1\n  9097: a1 = u64 [sp + 0x18]\n  9100: u8 [a0 + 0x1b] = a1\n  9103: a1 = u64 [sp + 0x20]\n  9106: u8 [a0 + 0x1a] = a1\n  9109: a1 = u64 [sp + 0x28]\n  9112: u8 [a0 + 0x19] = a1\n  9115: a1 = u64 [sp + 0x30]\n  9118: u8 [a0 + 0x18] = a1\n  9121: a1 = u64 [sp + 0x38]\n  9124: u8 [a0 + 0x17] = a1\n  9127: a1 = u64 [sp + 0x40]\n  9130: u8 [a0 + 0x16] = a1\n  9133: a1 = u64 [sp + 0x48]\n  9136: u8 [a0 + 0x15] = a1\n  9139: a1 = u64 [sp + 0x50]\n  9142: u8 [a0 + 0x14] = a1\n  9145: a1 = u64 [sp + 0x58]\n  9148: u8 [a0 + 0x13] = a1\n  9151: a1 = u64 [sp + 0x60]\n  9154: u8 [a0 + 0x12] = a1\n  9157: a1 = u64 [sp + 0x68]\n  9160: u8 [a0 + 0x11] = a1\n  9163: a1 = u64 [sp + 0x70]\n  9166: u8 [a0 + 0x10] = a1\n  9169: a1 = u64 [sp + 0x78]\n  9172: u8 [a0 + 0xf] = a1\n  9175: a1 = u64 [sp + 0x80]\n  9179: u8 [a0 + 0xe] = a1\n  9182: a1 = u64 [sp + 0x88]\n  9186: u8 [a0 + 0xd] = a1\n  9189: a1 = u64 [sp + 0x90]\n  9193: u8 [a0 + 0xc] = a1\n  9196: a1 = u64 [sp + 0x98]\n  9200: u8 [a0 + 0xb] = a1\n  9203: a1 = u64 [sp + 0xa0]\n  9207: u8 [a0 + 0xa] = a1\n  9210: a1 = u64 [sp + 0xa8]\n  9214: u8 [a0 + 0x9] = a1\n  9217: a1 = u64 [sp + 0xb0]\n  9221: u8 [a0 + 0x8] = a1\n  9224: a1 = u64 [sp + 0xb8]\n  9228: u8 [a0 + 0x7] = a1\n  9231: a1 = u64 [sp + 0xc0]\n  9235: u8 [a0 + 0x6] = a1\n  9238: a1 = u64 [sp + 0xc8]\n  9242: u8 [a0 + 0x5] = a1\n  9245: a1 = u64 [sp + 0xd0]\n  9249: u8 [a0 + 0x4] = a1\n  9252: a1 = u64 [sp + 0xd8]\n  9256: u8 [a0 + 0x3] = a1\n  9259: a1 = u64 [sp + 0xe0]\n  9263: u8 [a0 + 0x2] = a1\n  9266: a1 = u64 [sp + 0xe8]\n  9270: u8 [a0 + 0x1] = a1\n  9273: s0 = 0xffffff9f\n  9283: a2 = u64 [sp + 0x130]\n  9287: a1 = s0 <u a2\n  9290: a3 = u64 [sp + 0x138]\n  9294: a4 = u64 [sp + 0x110]\n  9298: a1 = a4 if a3 != 0\n  9301: a3 = u64 [sp + 0x120]\n  9305: a4 = u64 [sp + 0x118]\n  9309: a1 = a3 if a4 != 0\n  9312: a3 = u64 [sp + 0xf0]\n  9316: u8 [a0] = a3\n  9318: jump @195 if a1 != 0\n      : @171 (gas: 3)\n  9322: i32 a0 = a2 + 0x60\n  9325: a1 = 0x20\n  9328: ra = 134, jump @0\n      : @172 [@dyn 67] (gas: 9)\n  9334: a2 = u64 [sp + 0x140]\n  9338: a1 = s0 <u a2\n  9341: a3 = u64 [sp + 0x128]\n  9345: a4 = u64 [sp + 0x100]\n  9349: a1 = a4 if a3 != 0\n  9352: a3 = u64 [sp + 0x108]\n  9356: a4 = u64 [sp + 0xf8]\n  9360: a1 = a3 if a4 != 0\n  9363: jump @195 if a1 != 0\n      : @173 (gas: 65)\n  9367: a1 = u8 [a0]\n  9369: u64 [sp + 0xf0] = a1\n  9373: a1 = u8 [a0 + 0x1]\n  9376: u64 [sp + 0xe8] = a1\n  9380: a1 = u8 [a0 + 0x2]\n  9383: u64 [sp + 0xe0] = a1\n  9387: a1 = u8 [a0 + 0x3]\n  9390: u64 [sp + 0xd8] = a1\n  9394: a1 = u8 [a0 + 0x4]\n  9397: u64 [sp + 0xd0] = a1\n  9401: a1 = u8 [a0 + 0x5]\n  9404: u64 [sp + 0xc8] = a1\n  9408: a1 = u8 [a0 + 0x6]\n  9411: u64 [sp + 0xc0] = a1\n  9415: a1 = u8 [a0 + 0x7]\n  9418: u64 [sp + 0xb8] = a1\n  9422: a1 = u8 [a0 + 0x8]\n  9425: u64 [sp + 0xb0] = a1\n  9429: a1 = u8 [a0 + 0x9]\n  9432: u64 [sp + 0xa8] = a1\n  9436: a1 = u8 [a0 + 0xa]\n  9439: u64 [sp + 0xa0] = a1\n  9443: a1 = u8 [a0 + 0xb]\n  9446: u64 [sp + 0x98] = a1\n  9450: a1 = u8 [a0 + 0xc]\n  9453: u64 [sp + 0x90] = a1\n  9457: a1 = u8 [a0 + 0xd]\n  9460: u64 [sp + 0x88] = a1\n  9464: a1 = u8 [a0 + 0xe]\n  9467: u64 [sp + 0x80] = a1\n  9471: a1 = u8 [a0 + 0xf]\n  9474: u64 [sp + 0x78] = a1\n  9477: a1 = u8 [a0 + 0x10]\n  9480: u64 [sp + 0x70] = a1\n  9483: a1 = u8 [a0 + 0x11]\n  9486: u64 [sp + 0x68] = a1\n  9489: a1 = u8 [a0 + 0x12]\n  9492: u64 [sp + 0x60] = a1\n  9495: a1 = u8 [a0 + 0x13]\n  9498: u64 [sp + 0x58] = a1\n  9501: a1 = u8 [a0 + 0x14]\n  9504: u64 [sp + 0x50] = a1\n  9507: a1 = u8 [a0 + 0x15]\n  9510: u64 [sp + 0x48] = a1\n  9513: a1 = u8 [a0 + 0x16]\n  9516: u64 [sp + 0x40] = a1\n  9519: a1 = u8 [a0 + 0x17]\n  9522: u64 [sp + 0x38] = a1\n  9525: a1 = u8 [a0 + 0x18]\n  9528: u64 [sp + 0x30] = a1\n  9531: a1 = u8 [a0 + 0x19]\n  9534: u64 [sp + 0x28] = a1\n  9537: a1 = u8 [a0 + 0x1a]\n  9540: u64 [sp + 0x20] = a1\n  9543: a1 = u8 [a0 + 0x1b]\n  9546: u64 [sp + 0x18] = a1\n  9549: a1 = u8 [a0 + 0x1c]\n  9552: u64 [sp + 0x10] = a1\n  9555: a1 = u8 [a0 + 0x1d]\n  9558: u64 [sp + 0x8] = a1\n  9561: s0 = u8 [a0 + 0x1e]\n  9564: s1 = u8 [a0 + 0x1f]\n  9567: i32 a0 = a2 + 0x60\n  9570: a1 = 0x20\n  9573: ra = 136, jump @0\n      : @174 [@dyn 68] (gas: 72)\n  9579: u8 [a0 + 0x1f] = s1\n  9582: u8 [a0 + 0x1e] = s0\n  9585: a1 = u64 [sp + 0x8]\n  9588: u8 [a0 + 0x1d] = a1\n  9591: a1 = u64 [sp + 0x10]\n  9594: u8 [a0 + 0x1c] = a1\n  9597: a1 = u64 [sp + 0x18]\n  9600: u8 [a0 + 0x1b] = a1\n  9603: a1 = u64 [sp + 0x20]\n  9606: u8 [a0 + 0x1a] = a1\n  9609: a1 = u64 [sp + 0x28]\n  9612: u8 [a0 + 0x19] = a1\n  9615: a1 = u64 [sp + 0x30]\n  9618: u8 [a0 + 0x18] = a1\n  9621: a1 = u64 [sp + 0x38]\n  9624: u8 [a0 + 0x17] = a1\n  9627: a1 = u64 [sp + 0x40]\n  9630: u8 [a0 + 0x16] = a1\n  9633: a1 = u64 [sp + 0x48]\n  9636: u8 [a0 + 0x15] = a1\n  9639: a1 = u64 [sp + 0x50]\n  9642: u8 [a0 + 0x14] = a1\n  9645: a1 = u64 [sp + 0x58]\n  9648: u8 [a0 + 0x13] = a1\n  9651: a1 = u64 [sp + 0x60]\n  9654: u8 [a0 + 0x12] = a1\n  9657: a1 = u64 [sp + 0x68]\n  9660: u8 [a0 + 0x11] = a1\n  9663: a1 = u64 [sp + 0x70]\n  9666: u8 [a0 + 0x10] = a1\n  9669: a1 = u64 [sp + 0x78]\n  9672: u8 [a0 + 0xf] = a1\n  9675: a1 = u64 [sp + 0x80]\n  9679: u8 [a0 + 0xe] = a1\n  9682: a1 = u64 [sp + 0x88]\n  9686: u8 [a0 + 0xd] = a1\n  9689: a1 = u64 [sp + 0x90]\n  9693: u8 [a0 + 0xc] = a1\n  9696: a1 = u64 [sp + 0x98]\n  9700: u8 [a0 + 0xb] = a1\n  9703: a1 = u64 [sp + 0xa0]\n  9707: u8 [a0 + 0xa] = a1\n  9710: a1 = u64 [sp + 0xa8]\n  9714: u8 [a0 + 0x9] = a1\n  9717: a1 = u64 [sp + 0xb0]\n  9721: u8 [a0 + 0x8] = a1\n  9724: a1 = u64 [sp + 0xb8]\n  9728: u8 [a0 + 0x7] = a1\n  9731: a1 = u64 [sp + 0xc0]\n  9735: u8 [a0 + 0x6] = a1\n  9738: a1 = u64 [sp + 0xc8]\n  9742: u8 [a0 + 0x5] = a1\n  9745: a1 = u64 [sp + 0xd0]\n  9749: u8 [a0 + 0x4] = a1\n  9752: a1 = u64 [sp + 0xd8]\n  9756: u8 [a0 + 0x3] = a1\n  9759: a1 = u64 [sp + 0xe0]\n  9763: u8 [a0 + 0x2] = a1\n  9766: a1 = u64 [sp + 0xe8]\n  9770: u8 [a0 + 0x1] = a1\n  9773: s0 = 0xffffff7f\n  9783: a2 = u64 [sp + 0x130]\n  9787: a1 = s0 <u a2\n  9790: a3 = u64 [sp + 0x138]\n  9794: a4 = u64 [sp + 0x110]\n  9798: a1 = a4 if a3 != 0\n  9801: a3 = u64 [sp + 0x120]\n  9805: a4 = u64 [sp + 0x118]\n  9809: a1 = a3 if a4 != 0\n  9812: a3 = u64 [sp + 0xf0]\n  9816: u8 [a0] = a3\n  9818: jump @195 if a1 != 0\n      : @175 (gas: 3)\n  9822: i32 a0 = a2 + 0x80\n  9826: a1 = 0x20\n  9829: ra = 138, jump @0\n      : @176 [@dyn 69] (gas: 9)\n  9835: a2 = u64 [sp + 0x140]\n  9839: a1 = s0 <u a2\n  9842: a3 = u64 [sp + 0x128]\n  9846: a4 = u64 [sp + 0x100]\n  9850: a1 = a4 if a3 != 0\n  9853: a3 = u64 [sp + 0x108]\n  9857: a4 = u64 [sp + 0xf8]\n  9861: a1 = a3 if a4 != 0\n  9864: jump @195 if a1 != 0\n      : @177 (gas: 65)\n  9868: a1 = u8 [a0]\n  9870: u64 [sp + 0xf0] = a1\n  9874: a1 = u8 [a0 + 0x1]\n  9877: u64 [sp + 0xe8] = a1\n  9881: a1 = u8 [a0 + 0x2]\n  9884: u64 [sp + 0xe0] = a1\n  9888: a1 = u8 [a0 + 0x3]\n  9891: u64 [sp + 0xd8] = a1\n  9895: a1 = u8 [a0 + 0x4]\n  9898: u64 [sp + 0xd0] = a1\n  9902: a1 = u8 [a0 + 0x5]\n  9905: u64 [sp + 0xc8] = a1\n  9909: a1 = u8 [a0 + 0x6]\n  9912: u64 [sp + 0xc0] = a1\n  9916: a1 = u8 [a0 + 0x7]\n  9919: u64 [sp + 0xb8] = a1\n  9923: a1 = u8 [a0 + 0x8]\n  9926: u64 [sp + 0xb0] = a1\n  9930: a1 = u8 [a0 + 0x9]\n  9933: u64 [sp + 0xa8] = a1\n  9937: a1 = u8 [a0 + 0xa]\n  9940: u64 [sp + 0xa0] = a1\n  9944: a1 = u8 [a0 + 0xb]\n  9947: u64 [sp + 0x98] = a1\n  9951: a1 = u8 [a0 + 0xc]\n  9954: u64 [sp + 0x90] = a1\n  9958: a1 = u8 [a0 + 0xd]\n  9961: u64 [sp + 0x88] = a1\n  9965: a1 = u8 [a0 + 0xe]\n  9968: u64 [sp + 0x80] = a1\n  9972: a1 = u8 [a0 + 0xf]\n  9975: u64 [sp + 0x78] = a1\n  9978: a1 = u8 [a0 + 0x10]\n  9981: u64 [sp + 0x70] = a1\n  9984: a1 = u8 [a0 + 0x11]\n  9987: u64 [sp + 0x68] = a1\n  9990: a1 = u8 [a0 + 0x12]\n  9993: u64 [sp + 0x60] = a1\n  9996: a1 = u8 [a0 + 0x13]\n  9999: u64 [sp + 0x58] = a1\n 10002: a1 = u8 [a0 + 0x14]\n 10005: u64 [sp + 0x50] = a1\n 10008: a1 = u8 [a0 + 0x15]\n 10011: u64 [sp + 0x48] = a1\n 10014: a1 = u8 [a0 + 0x16]\n 10017: u64 [sp + 0x40] = a1\n 10020: a1 = u8 [a0 + 0x17]\n 10023: u64 [sp + 0x38] = a1\n 10026: a1 = u8 [a0 + 0x18]\n 10029: u64 [sp + 0x30] = a1\n 10032: a1 = u8 [a0 + 0x19]\n 10035: u64 [sp + 0x28] = a1\n 10038: a1 = u8 [a0 + 0x1a]\n 10041: u64 [sp + 0x20] = a1\n 10044: a1 = u8 [a0 + 0x1b]\n 10047: u64 [sp + 0x18] = a1\n 10050: a1 = u8 [a0 + 0x1c]\n 10053: u64 [sp + 0x10] = a1\n 10056: a1 = u8 [a0 + 0x1d]\n 10059: u64 [sp + 0x8] = a1\n 10062: s0 = u8 [a0 + 0x1e]\n 10065: s1 = u8 [a0 + 0x1f]\n 10068: i32 a0 = a2 + 0x80\n 10072: a1 = 0x20\n 10075: ra = 140, jump @0\n      : @178 [@dyn 70] (gas: 72)\n 10081: u8 [a0 + 0x1f] = s1\n 10084: u8 [a0 + 0x1e] = s0\n 10087: a1 = u64 [sp + 0x8]\n 10090: u8 [a0 + 0x1d] = a1\n 10093: a1 = u64 [sp + 0x10]\n 10096: u8 [a0 + 0x1c] = a1\n 10099: a1 = u64 [sp + 0x18]\n 10102: u8 [a0 + 0x1b] = a1\n 10105: a1 = u64 [sp + 0x20]\n 10108: u8 [a0 + 0x1a] = a1\n 10111: a1 = u64 [sp + 0x28]\n 10114: u8 [a0 + 0x19] = a1\n 10117: a1 = u64 [sp + 0x30]\n 10120: u8 [a0 + 0x18] = a1\n 10123: a1 = u64 [sp + 0x38]\n 10126: u8 [a0 + 0x17] = a1\n 10129: a1 = u64 [sp + 0x40]\n 10132: u8 [a0 + 0x16] = a1\n 10135: a1 = u64 [sp + 0x48]\n 10138: u8 [a0 + 0x15] = a1\n 10141: a1 = u64 [sp + 0x50]\n 10144: u8 [a0 + 0x14] = a1\n 10147: a1 = u64 [sp + 0x58]\n 10150: u8 [a0 + 0x13] = a1\n 10153: a1 = u64 [sp + 0x60]\n 10156: u8 [a0 + 0x12] = a1\n 10159: a1 = u64 [sp + 0x68]\n 10162: u8 [a0 + 0x11] = a1\n 10165: a1 = u64 [sp + 0x70]\n 10168: u8 [a0 + 0x10] = a1\n 10171: a1 = u64 [sp + 0x78]\n 10174: u8 [a0 + 0xf] = a1\n 10177: a1 = u64 [sp + 0x80]\n 10181: u8 [a0 + 0xe] = a1\n 10184: a1 = u64 [sp + 0x88]\n 10188: u8 [a0 + 0xd] = a1\n 10191: a1 = u64 [sp + 0x90]\n 10195: u8 [a0 + 0xc] = a1\n 10198: a1 = u64 [sp + 0x98]\n 10202: u8 [a0 + 0xb] = a1\n 10205: a1 = u64 [sp + 0xa0]\n 10209: u8 [a0 + 0xa] = a1\n 10212: a1 = u64 [sp + 0xa8]\n 10216: u8 [a0 + 0x9] = a1\n 10219: a1 = u64 [sp + 0xb0]\n 10223: u8 [a0 + 0x8] = a1\n 10226: a1 = u64 [sp + 0xb8]\n 10230: u8 [a0 + 0x7] = a1\n 10233: a1 = u64 [sp + 0xc0]\n 10237: u8 [a0 + 0x6] = a1\n 10240: a1 = u64 [sp + 0xc8]\n 10244: u8 [a0 + 0x5] = a1\n 10247: a1 = u64 [sp + 0xd0]\n 10251: u8 [a0 + 0x4] = a1\n 10254: a1 = u64 [sp + 0xd8]\n 10258: u8 [a0 + 0x3] = a1\n 10261: a1 = u64 [sp + 0xe0]\n 10265: u8 [a0 + 0x2] = a1\n 10268: a1 = u64 [sp + 0xe8]\n 10272: u8 [a0 + 0x1] = a1\n 10275: s0 = 0xffffff5f\n 10285: a2 = u64 [sp + 0x130]\n 10289: a1 = s0 <u a2\n 10292: a3 = u64 [sp + 0x138]\n 10296: a4 = u64 [sp + 0x110]\n 10300: a1 = a4 if a3 != 0\n 10303: a3 = u64 [sp + 0x120]\n 10307: a4 = u64 [sp + 0x118]\n 10311: a1 = a3 if a4 != 0\n 10314: a3 = u64 [sp + 0xf0]\n 10318: u8 [a0] = a3\n 10320: jump @195 if a1 != 0\n      : @179 (gas: 3)\n 10324: i32 a0 = a2 + 0xa0\n 10328: a1 = 0x20\n 10331: ra = 142, jump @0\n      : @180 [@dyn 71] (gas: 9)\n 10337: a2 = u64 [sp + 0x140]\n 10341: a1 = s0 <u a2\n 10344: a3 = u64 [sp + 0x128]\n 10348: a4 = u64 [sp + 0x100]\n 10352: a1 = a4 if a3 != 0\n 10355: a3 = u64 [sp + 0x108]\n 10359: a4 = u64 [sp + 0xf8]\n 10363: a1 = a3 if a4 != 0\n 10366: jump @195 if a1 != 0\n      : @181 (gas: 65)\n 10370: a1 = u8 [a0]\n 10372: u64 [sp + 0xf0] = a1\n 10376: a1 = u8 [a0 + 0x1]\n 10379: u64 [sp + 0xe8] = a1\n 10383: a1 = u8 [a0 + 0x2]\n 10386: u64 [sp + 0xe0] = a1\n 10390: a1 = u8 [a0 + 0x3]\n 10393: u64 [sp + 0xd8] = a1\n 10397: a1 = u8 [a0 + 0x4]\n 10400: u64 [sp + 0xd0] = a1\n 10404: a1 = u8 [a0 + 0x5]\n 10407: u64 [sp + 0xc8] = a1\n 10411: a1 = u8 [a0 + 0x6]\n 10414: u64 [sp + 0xc0] = a1\n 10418: a1 = u8 [a0 + 0x7]\n 10421: u64 [sp + 0xb8] = a1\n 10425: a1 = u8 [a0 + 0x8]\n 10428: u64 [sp + 0xb0] = a1\n 10432: a1 = u8 [a0 + 0x9]\n 10435: u64 [sp + 0xa8] = a1\n 10439: a1 = u8 [a0 + 0xa]\n 10442: u64 [sp + 0xa0] = a1\n 10446: a1 = u8 [a0 + 0xb]\n 10449: u64 [sp + 0x98] = a1\n 10453: a1 = u8 [a0 + 0xc]\n 10456: u64 [sp + 0x90] = a1\n 10460: a1 = u8 [a0 + 0xd]\n 10463: u64 [sp + 0x88] = a1\n 10467: a1 = u8 [a0 + 0xe]\n 10470: u64 [sp + 0x80] = a1\n 10474: a1 = u8 [a0 + 0xf]\n 10477: u64 [sp + 0x78] = a1\n 10480: a1 = u8 [a0 + 0x10]\n 10483: u64 [sp + 0x70] = a1\n 10486: a1 = u8 [a0 + 0x11]\n 10489: u64 [sp + 0x68] = a1\n 10492: a1 = u8 [a0 + 0x12]\n 10495: u64 [sp + 0x60] = a1\n 10498: a1 = u8 [a0 + 0x13]\n 10501: u64 [sp + 0x58] = a1\n 10504: a1 = u8 [a0 + 0x14]\n 10507: u64 [sp + 0x50] = a1\n 10510: a1 = u8 [a0 + 0x15]\n 10513: u64 [sp + 0x48] = a1\n 10516: a1 = u8 [a0 + 0x16]\n 10519: u64 [sp + 0x40] = a1\n 10522: a1 = u8 [a0 + 0x17]\n 10525: u64 [sp + 0x38] = a1\n 10528: a1 = u8 [a0 + 0x18]\n 10531: u64 [sp + 0x30] = a1\n 10534: a1 = u8 [a0 + 0x19]\n 10537: u64 [sp + 0x28] = a1\n 10540: a1 = u8 [a0 + 0x1a]\n 10543: u64 [sp + 0x20] = a1\n 10546: a1 = u8 [a0 + 0x1b]\n 10549: u64 [sp + 0x18] = a1\n 10552: a1 = u8 [a0 + 0x1c]\n 10555: u64 [sp + 0x10] = a1\n 10558: a1 = u8 [a0 + 0x1d]\n 10561: u64 [sp + 0x8] = a1\n 10564: s0 = u8 [a0 + 0x1e]\n 10567: s1 = u8 [a0 + 0x1f]\n 10570: i32 a0 = a2 + 0xa0\n 10574: a1 = 0x20\n 10577: ra = 144, jump @0\n      : @182 [@dyn 72] (gas: 72)\n 10583: u8 [a0 + 0x1f] = s1\n 10586: u8 [a0 + 0x1e] = s0\n 10589: a1 = u64 [sp + 0x8]\n 10592: u8 [a0 + 0x1d] = a1\n 10595: a1 = u64 [sp + 0x10]\n 10598: u8 [a0 + 0x1c] = a1\n 10601: a1 = u64 [sp + 0x18]\n 10604: u8 [a0 + 0x1b] = a1\n 10607: a1 = u64 [sp + 0x20]\n 10610: u8 [a0 + 0x1a] = a1\n 10613: a1 = u64 [sp + 0x28]\n 10616: u8 [a0 + 0x19] = a1\n 10619: a1 = u64 [sp + 0x30]\n 10622: u8 [a0 + 0x18] = a1\n 10625: a1 = u64 [sp + 0x38]\n 10628: u8 [a0 + 0x17] = a1\n 10631: a1 = u64 [sp + 0x40]\n 10634: u8 [a0 + 0x16] = a1\n 10637: a1 = u64 [sp + 0x48]\n 10640: u8 [a0 + 0x15] = a1\n 10643: a1 = u64 [sp + 0x50]\n 10646: u8 [a0 + 0x14] = a1\n 10649: a1 = u64 [sp + 0x58]\n 10652: u8 [a0 + 0x13] = a1\n 10655: a1 = u64 [sp + 0x60]\n 10658: u8 [a0 + 0x12] = a1\n 10661: a1 = u64 [sp + 0x68]\n 10664: u8 [a0 + 0x11] = a1\n 10667: a1 = u64 [sp + 0x70]\n 10670: u8 [a0 + 0x10] = a1\n 10673: a1 = u64 [sp + 0x78]\n 10676: u8 [a0 + 0xf] = a1\n 10679: a1 = u64 [sp + 0x80]\n 10683: u8 [a0 + 0xe] = a1\n 10686: a1 = u64 [sp + 0x88]\n 10690: u8 [a0 + 0xd] = a1\n 10693: a1 = u64 [sp + 0x90]\n 10697: u8 [a0 + 0xc] = a1\n 10700: a1 = u64 [sp + 0x98]\n 10704: u8 [a0 + 0xb] = a1\n 10707: a1 = u64 [sp + 0xa0]\n 10711: u8 [a0 + 0xa] = a1\n 10714: a1 = u64 [sp + 0xa8]\n 10718: u8 [a0 + 0x9] = a1\n 10721: a1 = u64 [sp + 0xb0]\n 10725: u8 [a0 + 0x8] = a1\n 10728: a1 = u64 [sp + 0xb8]\n 10732: u8 [a0 + 0x7] = a1\n 10735: a1 = u64 [sp + 0xc0]\n 10739: u8 [a0 + 0x6] = a1\n 10742: a1 = u64 [sp + 0xc8]\n 10746: u8 [a0 + 0x5] = a1\n 10749: a1 = u64 [sp + 0xd0]\n 10753: u8 [a0 + 0x4] = a1\n 10756: a1 = u64 [sp + 0xd8]\n 10760: u8 [a0 + 0x3] = a1\n 10763: a1 = u64 [sp + 0xe0]\n 10767: u8 [a0 + 0x2] = a1\n 10770: a1 = u64 [sp + 0xe8]\n 10774: u8 [a0 + 0x1] = a1\n 10777: s0 = 0xffffff3f\n 10787: a2 = u64 [sp + 0x130]\n 10791: a1 = s0 <u a2\n 10794: a3 = u64 [sp + 0x138]\n 10798: a4 = u64 [sp + 0x110]\n 10802: a1 = a4 if a3 != 0\n 10805: a3 = u64 [sp + 0x120]\n 10809: a4 = u64 [sp + 0x118]\n 10813: a1 = a3 if a4 != 0\n 10816: a3 = u64 [sp + 0xf0]\n 10820: u8 [a0] = a3\n 10822: jump @195 if a1 != 0\n      : @183 (gas: 3)\n 10826: i32 a0 = a2 + 0xc0\n 10830: a1 = 0x20\n 10833: ra = 146, jump @0\n      : @184 [@dyn 73] (gas: 9)\n 10839: a2 = u64 [sp + 0x140]\n 10843: a1 = s0 <u a2\n 10846: a3 = u64 [sp + 0x128]\n 10850: a4 = u64 [sp + 0x100]\n 10854: a1 = a4 if a3 != 0\n 10857: a3 = u64 [sp + 0x108]\n 10861: a4 = u64 [sp + 0xf8]\n 10865: a1 = a3 if a4 != 0\n 10868: jump @195 if a1 != 0\n      : @185 (gas: 65)\n 10872: a1 = u8 [a0]\n 10874: u64 [sp + 0xf0] = a1\n 10878: a1 = u8 [a0 + 0x1]\n 10881: u64 [sp + 0xe8] = a1\n 10885: a1 = u8 [a0 + 0x2]\n 10888: u64 [sp + 0xe0] = a1\n 10892: a1 = u8 [a0 + 0x3]\n 10895: u64 [sp + 0xd8] = a1\n 10899: a1 = u8 [a0 + 0x4]\n 10902: u64 [sp + 0xd0] = a1\n 10906: a1 = u8 [a0 + 0x5]\n 10909: u64 [sp + 0xc8] = a1\n 10913: a1 = u8 [a0 + 0x6]\n 10916: u64 [sp + 0xc0] = a1\n 10920: a1 = u8 [a0 + 0x7]\n 10923: u64 [sp + 0xb8] = a1\n 10927: a1 = u8 [a0 + 0x8]\n 10930: u64 [sp + 0xb0] = a1\n 10934: a1 = u8 [a0 + 0x9]\n 10937: u64 [sp + 0xa8] = a1\n 10941: a1 = u8 [a0 + 0xa]\n 10944: u64 [sp + 0xa0] = a1\n 10948: a1 = u8 [a0 + 0xb]\n 10951: u64 [sp + 0x98] = a1\n 10955: a1 = u8 [a0 + 0xc]\n 10958: u64 [sp + 0x90] = a1\n 10962: a1 = u8 [a0 + 0xd]\n 10965: u64 [sp + 0x88] = a1\n 10969: a1 = u8 [a0 + 0xe]\n 10972: u64 [sp + 0x80] = a1\n 10976: a1 = u8 [a0 + 0xf]\n 10979: u64 [sp + 0x78] = a1\n 10982: a1 = u8 [a0 + 0x10]\n 10985: u64 [sp + 0x70] = a1\n 10988: a1 = u8 [a0 + 0x11]\n 10991: u64 [sp + 0x68] = a1\n 10994: a1 = u8 [a0 + 0x12]\n 10997: u64 [sp + 0x60] = a1\n 11000: a1 = u8 [a0 + 0x13]\n 11003: u64 [sp + 0x58] = a1\n 11006: a1 = u8 [a0 + 0x14]\n 11009: u64 [sp + 0x50] = a1\n 11012: a1 = u8 [a0 + 0x15]\n 11015: u64 [sp + 0x48] = a1\n 11018: a1 = u8 [a0 + 0x16]\n 11021: u64 [sp + 0x40] = a1\n 11024: a1 = u8 [a0 + 0x17]\n 11027: u64 [sp + 0x38] = a1\n 11030: a1 = u8 [a0 + 0x18]\n 11033: u64 [sp + 0x30] = a1\n 11036: a1 = u8 [a0 + 0x19]\n 11039: u64 [sp + 0x28] = a1\n 11042: a1 = u8 [a0 + 0x1a]\n 11045: u64 [sp + 0x20] = a1\n 11048: a1 = u8 [a0 + 0x1b]\n 11051: u64 [sp + 0x18] = a1\n 11054: a1 = u8 [a0 + 0x1c]\n 11057: u64 [sp + 0x10] = a1\n 11060: a1 = u8 [a0 + 0x1d]\n 11063: u64 [sp + 0x8] = a1\n 11066: s0 = u8 [a0 + 0x1e]\n 11069: s1 = u8 [a0 + 0x1f]\n 11072: i32 a0 = a2 + 0xc0\n 11076: a1 = 0x20\n 11079: ra = 148, jump @0\n      : @186 [@dyn 74] (gas: 72)\n 11085: u8 [a0 + 0x1f] = s1\n 11088: u8 [a0 + 0x1e] = s0\n 11091: a1 = u64 [sp + 0x8]\n 11094: u8 [a0 + 0x1d] = a1\n 11097: a1 = u64 [sp + 0x10]\n 11100: u8 [a0 + 0x1c] = a1\n 11103: a1 = u64 [sp + 0x18]\n 11106: u8 [a0 + 0x1b] = a1\n 11109: a1 = u64 [sp + 0x20]\n 11112: u8 [a0 + 0x1a] = a1\n 11115: a1 = u64 [sp + 0x28]\n 11118: u8 [a0 + 0x19] = a1\n 11121: a1 = u64 [sp + 0x30]\n 11124: u8 [a0 + 0x18] = a1\n 11127: a1 = u64 [sp + 0x38]\n 11130: u8 [a0 + 0x17] = a1\n 11133: a1 = u64 [sp + 0x40]\n 11136: u8 [a0 + 0x16] = a1\n 11139: a1 = u64 [sp + 0x48]\n 11142: u8 [a0 + 0x15] = a1\n 11145: a1 = u64 [sp + 0x50]\n 11148: u8 [a0 + 0x14] = a1\n 11151: a1 = u64 [sp + 0x58]\n 11154: u8 [a0 + 0x13] = a1\n 11157: a1 = u64 [sp + 0x60]\n 11160: u8 [a0 + 0x12] = a1\n 11163: a1 = u64 [sp + 0x68]\n 11166: u8 [a0 + 0x11] = a1\n 11169: a1 = u64 [sp + 0x70]\n 11172: u8 [a0 + 0x10] = a1\n 11175: a1 = u64 [sp + 0x78]\n 11178: u8 [a0 + 0xf] = a1\n 11181: a1 = u64 [sp + 0x80]\n 11185: u8 [a0 + 0xe] = a1\n 11188: a1 = u64 [sp + 0x88]\n 11192: u8 [a0 + 0xd] = a1\n 11195: a1 = u64 [sp + 0x90]\n 11199: u8 [a0 + 0xc] = a1\n 11202: a1 = u64 [sp + 0x98]\n 11206: u8 [a0 + 0xb] = a1\n 11209: a1 = u64 [sp + 0xa0]\n 11213: u8 [a0 + 0xa] = a1\n 11216: a1 = u64 [sp + 0xa8]\n 11220: u8 [a0 + 0x9] = a1\n 11223: a1 = u64 [sp + 0xb0]\n 11227: u8 [a0 + 0x8] = a1\n 11230: a1 = u64 [sp + 0xb8]\n 11234: u8 [a0 + 0x7] = a1\n 11237: a1 = u64 [sp + 0xc0]\n 11241: u8 [a0 + 0x6] = a1\n 11244: a1 = u64 [sp + 0xc8]\n 11248: u8 [a0 + 0x5] = a1\n 11251: a1 = u64 [sp + 0xd0]\n 11255: u8 [a0 + 0x4] = a1\n 11258: a1 = u64 [sp + 0xd8]\n 11262: u8 [a0 + 0x3] = a1\n 11265: a1 = u64 [sp + 0xe0]\n 11269: u8 [a0 + 0x2] = a1\n 11272: a1 = u64 [sp + 0xe8]\n 11276: u8 [a0 + 0x1] = a1\n 11279: s0 = 0xffffff1f\n 11289: a2 = u64 [sp + 0x130]\n 11293: a1 = s0 <u a2\n 11296: a3 = u64 [sp + 0x138]\n 11300: a4 = u64 [sp + 0x110]\n 11304: a1 = a4 if a3 != 0\n 11307: a3 = u64 [sp + 0x120]\n 11311: a4 = u64 [sp + 0x118]\n 11315: a1 = a3 if a4 != 0\n 11318: a3 = u64 [sp + 0xf0]\n 11322: u8 [a0] = a3\n 11324: jump @195 if a1 != 0\n      : @187 (gas: 3)\n 11328: i32 a0 = a2 + 0xe0\n 11332: a1 = 0x20\n 11335: ra = 150, jump @0\n      : @188 [@dyn 75] (gas: 9)\n 11341: a2 = u64 [sp + 0x140]\n 11345: a1 = s0 <u a2\n 11348: a3 = u64 [sp + 0x128]\n 11352: a4 = u64 [sp + 0x100]\n 11356: a1 = a4 if a3 != 0\n 11359: a3 = u64 [sp + 0x108]\n 11363: a4 = u64 [sp + 0xf8]\n 11367: a1 = a3 if a4 != 0\n 11370: jump @195 if a1 != 0\n      : @189 (gas: 66)\n 11374: a1 = u8 [a0]\n 11376: u64 [sp + 0xf0] = a1\n 11380: a1 = u8 [a0 + 0x1]\n 11383: u64 [sp + 0xe8] = a1\n 11387: a1 = u8 [a0 + 0x2]\n 11390: u64 [sp + 0xe0] = a1\n 11394: a1 = u8 [a0 + 0x3]\n 11397: u64 [sp + 0xd8] = a1\n 11401: a1 = u8 [a0 + 0x4]\n 11404: u64 [sp + 0xd0] = a1\n 11408: a1 = u8 [a0 + 0x5]\n 11411: u64 [sp + 0xc8] = a1\n 11415: a1 = u8 [a0 + 0x6]\n 11418: u64 [sp + 0xc0] = a1\n 11422: a1 = u8 [a0 + 0x7]\n 11425: u64 [sp + 0xb8] = a1\n 11429: a1 = u8 [a0 + 0x8]\n 11432: u64 [sp + 0xb0] = a1\n 11436: a1 = u8 [a0 + 0x9]\n 11439: u64 [sp + 0xa8] = a1\n 11443: a1 = u8 [a0 + 0xa]\n 11446: u64 [sp + 0xa0] = a1\n 11450: a1 = u8 [a0 + 0xb]\n 11453: u64 [sp + 0x98] = a1\n 11457: a1 = u8 [a0 + 0xc]\n 11460: u64 [sp + 0x90] = a1\n 11464: a1 = u8 [a0 + 0xd]\n 11467: u64 [sp + 0x88] = a1\n 11471: a1 = u8 [a0 + 0xe]\n 11474: u64 [sp + 0x80] = a1\n 11478: a1 = u8 [a0 + 0xf]\n 11481: u64 [sp + 0x78] = a1\n 11484: a1 = u8 [a0 + 0x10]\n 11487: u64 [sp + 0x70] = a1\n 11490: a1 = u8 [a0 + 0x11]\n 11493: u64 [sp + 0x68] = a1\n 11496: a1 = u8 [a0 + 0x12]\n 11499: u64 [sp + 0x60] = a1\n 11502: a1 = u8 [a0 + 0x13]\n 11505: u64 [sp + 0x58] = a1\n 11508: a1 = u8 [a0 + 0x14]\n 11511: u64 [sp + 0x50] = a1\n 11514: a1 = u8 [a0 + 0x15]\n 11517: u64 [sp + 0x48] = a1\n 11520: a1 = u8 [a0 + 0x16]\n 11523: u64 [sp + 0x40] = a1\n 11526: a1 = u8 [a0 + 0x17]\n 11529: u64 [sp + 0x38] = a1\n 11532: a1 = u8 [a0 + 0x18]\n 11535: u64 [sp + 0x30] = a1\n 11538: a1 = u8 [a0 + 0x19]\n 11541: u64 [sp + 0x28] = a1\n 11544: a1 = u8 [a0 + 0x1a]\n 11547: u64 [sp + 0x20] = a1\n 11550: a1 = u8 [a0 + 0x1b]\n 11553: u64 [sp + 0x18] = a1\n 11556: a1 = u8 [a0 + 0x1c]\n 11559: u64 [sp + 0x10] = a1\n 11562: a1 = u8 [a0 + 0x1d]\n 11565: u64 [sp + 0x8] = a1\n 11568: a1 = u8 [a0 + 0x1e]\n 11571: u64 [sp] = a1\n 11573: s1 = u8 [a0 + 0x1f]\n 11576: i32 a0 = a2 + 0xe0\n 11580: a1 = 0x20\n 11583: ra = 152, jump @0\n      : @190 [@dyn 76] (gas: 73)\n 11589: s0 = 0xfffffeff\n 11599: a2 = u64 [sp + 0x130]\n 11603: a1 = s0 <u a2\n 11606: a3 = u64 [sp + 0x138]\n 11610: a4 = u64 [sp + 0x110]\n 11614: a1 = a4 if a3 != 0\n 11617: a3 = u64 [sp + 0x120]\n 11621: a4 = u64 [sp + 0x118]\n 11625: a1 = a3 if a4 != 0\n 11628: u8 [a0 + 0x1f] = s1\n 11631: a3 = u64 [sp]\n 11633: u8 [a0 + 0x1e] = a3\n 11636: a3 = u64 [sp + 0x8]\n 11639: u8 [a0 + 0x1d] = a3\n 11642: a3 = u64 [sp + 0x10]\n 11645: u8 [a0 + 0x1c] = a3\n 11648: a3 = u64 [sp + 0x18]\n 11651: u8 [a0 + 0x1b] = a3\n 11654: a3 = u64 [sp + 0x20]\n 11657: u8 [a0 + 0x1a] = a3\n 11660: a3 = u64 [sp + 0x28]\n 11663: u8 [a0 + 0x19] = a3\n 11666: a3 = u64 [sp + 0x30]\n 11669: u8 [a0 + 0x18] = a3\n 11672: a3 = u64 [sp + 0x38]\n 11675: u8 [a0 + 0x17] = a3\n 11678: a3 = u64 [sp + 0x40]\n 11681: u8 [a0 + 0x16] = a3\n 11684: a3 = u64 [sp + 0x48]\n 11687: u8 [a0 + 0x15] = a3\n 11690: a3 = u64 [sp + 0x50]\n 11693: u8 [a0 + 0x14] = a3\n 11696: a3 = u64 [sp + 0x58]\n 11699: u8 [a0 + 0x13] = a3\n 11702: a3 = u64 [sp + 0x60]\n 11705: u8 [a0 + 0x12] = a3\n 11708: a3 = u64 [sp + 0x68]\n 11711: u8 [a0 + 0x11] = a3\n 11714: a3 = u64 [sp + 0x70]\n 11717: u8 [a0 + 0x10] = a3\n 11720: a3 = u64 [sp + 0x78]\n 11723: u8 [a0 + 0xf] = a3\n 11726: a3 = u64 [sp + 0x80]\n 11730: u8 [a0 + 0xe] = a3\n 11733: a3 = u64 [sp + 0x88]\n 11737: u8 [a0 + 0xd] = a3\n 11740: a3 = u64 [sp + 0x90]\n 11744: u8 [a0 + 0xc] = a3\n 11747: a3 = u64 [sp + 0x98]\n 11751: u8 [a0 + 0xb] = a3\n 11754: a3 = u64 [sp + 0xa0]\n 11758: u8 [a0 + 0xa] = a3\n 11761: a3 = u64 [sp + 0xa8]\n 11765: u8 [a0 + 0x9] = a3\n 11768: a3 = u64 [sp + 0xb0]\n 11772: u8 [a0 + 0x8] = a3\n 11775: a3 = u64 [sp + 0xb8]\n 11779: u8 [a0 + 0x7] = a3\n 11782: a3 = u64 [sp + 0xc0]\n 11786: u8 [a0 + 0x6] = a3\n 11789: a3 = u64 [sp + 0xc8]\n 11793: u8 [a0 + 0x5] = a3\n 11796: a3 = u64 [sp + 0xd0]\n 11800: u8 [a0 + 0x4] = a3\n 11803: a3 = u64 [sp + 0xd8]\n 11807: u8 [a0 + 0x3] = a3\n 11810: a3 = u64 [sp + 0xe0]\n 11814: u8 [a0 + 0x2] = a3\n 11817: a3 = u64 [sp + 0xe8]\n 11821: u8 [a0 + 0x1] = a3\n 11824: a3 = u64 [sp + 0xf0]\n 11828: u8 [a0] = a3\n 11830: jump @195 if a1 != 0\n      : @191 (gas: 3)\n 11834: i32 a0 = a2 + 0x100\n 11838: a1 = 0x20\n 11841: ra = 154, jump @0\n      : @192 [@dyn 77] (gas: 9)\n 11847: a2 = u64 [sp + 0x140]\n 11851: a1 = s0 <u a2\n 11854: a3 = u64 [sp + 0x128]\n 11858: a4 = u64 [sp + 0x100]\n 11862: a1 = a4 if a3 != 0\n 11865: a3 = u64 [sp + 0x108]\n 11869: a4 = u64 [sp + 0xf8]\n 11873: a1 = a3 if a4 != 0\n 11876: jump @195 if a1 != 0\n      : @193 (gas: 65)\n 11880: a1 = u8 [a0]\n 11882: u64 [sp + 0x138] = a1\n 11886: a1 = u8 [a0 + 0x1]\n 11889: u64 [sp + 0x130] = a1\n 11893: a1 = u8 [a0 + 0x2]\n 11896: u64 [sp + 0x128] = a1\n 11900: a1 = u8 [a0 + 0x3]\n 11903: u64 [sp + 0x120] = a1\n 11907: a1 = u8 [a0 + 0x4]\n 11910: u64 [sp + 0x118] = a1\n 11914: a1 = u8 [a0 + 0x5]\n 11917: u64 [sp + 0x110] = a1\n 11921: a1 = u8 [a0 + 0x6]\n 11924: u64 [sp + 0x108] = a1\n 11928: a1 = u8 [a0 + 0x7]\n 11931: u64 [sp + 0x100] = a1\n 11935: a1 = u8 [a0 + 0x8]\n 11938: u64 [sp + 0xf8] = a1\n 11942: a1 = u8 [a0 + 0x9]\n 11945: u64 [sp + 0xf0] = a1\n 11949: a1 = u8 [a0 + 0xa]\n 11952: u64 [sp + 0xe8] = a1\n 11956: a1 = u8 [a0 + 0xb]\n 11959: u64 [sp + 0xe0] = a1\n 11963: a1 = u8 [a0 + 0xc]\n 11966: u64 [sp + 0xd8] = a1\n 11970: a1 = u8 [a0 + 0xd]\n 11973: u64 [sp + 0xd0] = a1\n 11977: a1 = u8 [a0 + 0xe]\n 11980: u64 [sp + 0xc8] = a1\n 11984: a1 = u8 [a0 + 0xf]\n 11987: u64 [sp + 0xc0] = a1\n 11991: a1 = u8 [a0 + 0x10]\n 11994: u64 [sp + 0xb8] = a1\n 11998: a1 = u8 [a0 + 0x11]\n 12001: u64 [sp + 0xb0] = a1\n 12005: a1 = u8 [a0 + 0x12]\n 12008: u64 [sp + 0xa8] = a1\n 12012: a1 = u8 [a0 + 0x13]\n 12015: u64 [sp + 0xa0] = a1\n 12019: a1 = u8 [a0 + 0x14]\n 12022: u64 [sp + 0x98] = a1\n 12026: a1 = u8 [a0 + 0x15]\n 12029: u64 [sp + 0x90] = a1\n 12033: a1 = u8 [a0 + 0x16]\n 12036: u64 [sp + 0x88] = a1\n 12040: a1 = u8 [a0 + 0x17]\n 12043: u64 [sp + 0x80] = a1\n 12047: a1 = u8 [a0 + 0x18]\n 12050: u64 [sp + 0x78] = a1\n 12053: a1 = u8 [a0 + 0x19]\n 12056: u64 [sp + 0x70] = a1\n 12059: a1 = u8 [a0 + 0x1a]\n 12062: u64 [sp + 0x68] = a1\n 12065: a1 = u8 [a0 + 0x1b]\n 12068: u64 [sp + 0x60] = a1\n 12071: a1 = u8 [a0 + 0x1c]\n 12074: u64 [sp + 0x58] = a1\n 12077: a1 = u8 [a0 + 0x1d]\n 12080: u64 [sp + 0x50] = a1\n 12083: s0 = u8 [a0 + 0x1e]\n 12086: s1 = u8 [a0 + 0x1f]\n 12089: i32 a0 = a2 + 0x100\n 12093: a1 = 0x20\n 12096: ra = 156, jump @0\n      : @194 [@dyn 78] (gas: 67)\n 12102: u8 [a0 + 0x1f] = s1\n 12105: u8 [a0 + 0x1e] = s0\n 12108: a1 = u64 [sp + 0x50]\n 12111: u8 [a0 + 0x1d] = a1\n 12114: a1 = u64 [sp + 0x58]\n 12117: u8 [a0 + 0x1c] = a1\n 12120: a1 = u64 [sp + 0x60]\n 12123: u8 [a0 + 0x1b] = a1\n 12126: a1 = u64 [sp + 0x68]\n 12129: u8 [a0 + 0x1a] = a1\n 12132: a1 = u64 [sp + 0x70]\n 12135: u8 [a0 + 0x19] = a1\n 12138: a1 = u64 [sp + 0x78]\n 12141: u8 [a0 + 0x18] = a1\n 12144: a1 = u64 [sp + 0x80]\n 12148: u8 [a0 + 0x17] = a1\n 12151: a1 = u64 [sp + 0x88]\n 12155: u8 [a0 + 0x16] = a1\n 12158: a1 = u64 [sp + 0x90]\n 12162: u8 [a0 + 0x15] = a1\n 12165: a1 = u64 [sp + 0x98]\n 12169: u8 [a0 + 0x14] = a1\n 12172: a1 = u64 [sp + 0xa0]\n 12176: u8 [a0 + 0x13] = a1\n 12179: a1 = u64 [sp + 0xa8]\n 12183: u8 [a0 + 0x12] = a1\n 12186: a1 = u64 [sp + 0xb0]\n 12190: u8 [a0 + 0x11] = a1\n 12193: a1 = u64 [sp + 0xb8]\n 12197: u8 [a0 + 0x10] = a1\n 12200: a1 = u64 [sp + 0xc0]\n 12204: u8 [a0 + 0xf] = a1\n 12207: a1 = u64 [sp + 0xc8]\n 12211: u8 [a0 + 0xe] = a1\n 12214: a1 = u64 [sp + 0xd0]\n 12218: u8 [a0 + 0xd] = a1\n 12221: a1 = u64 [sp + 0xd8]\n 12225: u8 [a0 + 0xc] = a1\n 12228: a1 = u64 [sp + 0xe0]\n 12232: u8 [a0 + 0xb] = a1\n 12235: a1 = u64 [sp + 0xe8]\n 12239: u8 [a0 + 0xa] = a1\n 12242: a1 = u64 [sp + 0xf0]\n 12246: u8 [a0 + 0x9] = a1\n 12249: a1 = u64 [sp + 0xf8]\n 12253: u8 [a0 + 0x8] = a1\n 12256: a1 = u64 [sp + 0x100]\n 12260: u8 [a0 + 0x7] = a1\n 12263: a1 = u64 [sp + 0x108]\n 12267: u8 [a0 + 0x6] = a1\n 12270: a1 = u64 [sp + 0x110]\n 12274: u8 [a0 + 0x5] = a1\n 12277: a1 = u64 [sp + 0x118]\n 12281: u8 [a0 + 0x4] = a1\n 12284: a1 = u64 [sp + 0x120]\n 12288: u8 [a0 + 0x3] = a1\n 12291: a1 = u64 [sp + 0x128]\n 12295: u8 [a0 + 0x2] = a1\n 12298: a1 = u64 [sp + 0x130]\n 12302: u8 [a0 + 0x1] = a1\n 12305: a1 = u64 [sp + 0x138]\n 12309: u8 [a0] = a1\n 12311: ra = u64 [sp + 0x158]\n 12315: s0 = u64 [sp + 0x150]\n 12319: s1 = u64 [sp + 0x148]\n 12323: sp = sp + 0x160\n 12327: ret\n      : @195 (gas: 1)\n 12329: trap\n      : @196 (gas: 8)\n 12330: a0 = u64 [sp + 0xd0]\n 12334: a1 = u64 [sp + 0xd8]\n 12338: a2 = u64 [sp + 0xc8]\n 12342: a3 = u64 [sp + 0xc0]\n 12346: a1 = a1 | a2\n 12349: a0 = a0 | a3\n 12352: a0 = a0 | a1\n 12355: jump @205 if a0 != 0\n      : @197 (gas: 2)\n 12359: a0 = i32 [0x20004]\n 12364: jump @205 if a0 <=u 35\n      : @198 (gas: 4)\n 12369: i32 a0 = sp + 0xe0\n 12373: a1 = 0x4\n 12376: ecalli 1 // 'call_data_load'\n 12378: fallthrough\n      : @199 (gas: 10)\n 12379: a0 = u64 [sp + 0xf0]\n 12383: a2 = u64 [sp + 0xf8]\n 12387: a1 = 0x100000000\n 12397: a1 = a1 ^ a0\n 12400: a1 = a1 | a2\n 12403: a3 = a0 >> 0x20\n 12406: a3 = a3 <u 0x1\n 12409: a3 = 0 if a2 != 0\n 12411: a3 = 0 if a1 == 0\n 12413: jump @205 if a3 == 0\n      : @200 (gas: 30)\n 12417: a1 = u64 [sp + 0xe8]\n 12421: a3 = u64 [sp + 0xe0]\n 12425: u64 [sp + 0x88] = a1\n 12429: u64 [sp + 0x80] = a3\n 12433: u64 [sp + 0x90] = a0\n 12437: a0 = sp + 0xa0\n 12441: a1 = sp + 0x80\n 12445: u64 [sp + 0x98] = a2\n 12449: ra = 0x9e\n 12453: sp = sp + 0xffffffffffffff20\n 12457: u64 [sp + 0xd8] = ra\n 12461: u64 [sp + 0xd0] = s0\n 12465: u64 [sp + 0xc8] = s1\n 12469: s0 = sp + 0xe0\n 12473: sp = sp & 0xffffffffffffffe0\n 12476: a2 = u64 [a1 + 0x10]\n 12479: u64 [sp] = a2\n 12481: a2 = u64 [a1 + 0x8]\n 12484: u64 [sp + 0x8] = a2\n 12487: a1 = u64 [a1]\n 12489: u64 [sp + 0x10] = a1\n 12492: u64 [sp + 0x18] = a0\n 12495: u64 [sp + 120] = 0\n 12498: u64 [sp + 112] = 0\n 12501: u64 [sp + 96] = 0x120\n 12506: a0 = sp + 0x80\n 12510: a1 = sp + 0x60\n 12513: u64 [sp + 104] = 0\n 12516: ra = 0x156\n 12520: jump @332\n      : @201 [@dyn 79] (gas: 11)\n 12523: a0 = u64 [sp + 0xa0]\n 12527: u64 [sp + 0x38] = a0\n 12530: a0 = u64 [sp + 0xa8]\n 12534: u64 [sp + 0x30] = a0\n 12537: a0 = u64 [sp + 0xb0]\n 12541: u64 [sp + 0x28] = a0\n 12544: a0 = u64 [sp + 0xb8]\n 12548: u64 [sp + 0x20] = a0\n 12551: a0 = 0x40\n 12554: a1 = 0x20\n 12557: ra = 160, jump @0\n      : @202 [@dyn 80] (gas: 110)\n 12563: a1 = u8 [a0 + 0x1]\n 12566: a2 = u8 [a0]\n 12568: a3 = u8 [a0 + 0x2]\n 12571: a4 = u8 [a0 + 0x3]\n 12574: a1 = a1 << 0x8\n 12577: a1 = a1 | a2\n 12580: a3 = a3 << 0x10\n 12583: a4 = a4 << 0x18\n 12586: a3 = a3 | a4\n 12589: a1 = a1 | a3\n 12592: a2 = u8 [a0 + 0x5]\n 12595: a3 = u8 [a0 + 0x4]\n 12598: a4 = u8 [a0 + 0x6]\n 12601: a5 = u8 [a0 + 0x7]\n 12604: a2 = a2 << 0x8\n 12607: a2 = a2 | a3\n 12610: a4 = a4 << 0x10\n 12613: a5 = a5 << 0x18\n 12616: a4 = a4 | a5\n 12619: a2 = a2 | a4\n 12622: a2 = a2 << 0x20\n 12625: t0 = a2 | a1\n 12628: a2 = u8 [a0 + 0x9]\n 12631: a3 = u8 [a0 + 0x8]\n 12634: a4 = u8 [a0 + 0xa]\n 12637: a5 = u8 [a0 + 0xb]\n 12640: a2 = a2 << 0x8\n 12643: a2 = a2 | a3\n 12646: a4 = a4 << 0x10\n 12649: a5 = a5 << 0x18\n 12652: a4 = a4 | a5\n 12655: a2 = a2 | a4\n 12658: a3 = u8 [a0 + 0xd]\n 12661: a4 = u8 [a0 + 0xc]\n 12664: a5 = u8 [a0 + 0xe]\n 12667: s1 = u8 [a0 + 0xf]\n 12670: a3 = a3 << 0x8\n 12673: a3 = a3 | a4\n 12676: a5 = a5 << 0x10\n 12679: s1 = s1 << 0x18\n 12682: a5 = a5 | s1\n 12685: a3 = a3 | a5\n 12688: a3 = a3 << 0x20\n 12691: a2 = a2 | a3\n 12694: a3 = u8 [a0 + 0x11]\n 12697: a4 = u8 [a0 + 0x10]\n 12700: a5 = u8 [a0 + 0x12]\n 12703: s1 = u8 [a0 + 0x13]\n 12706: a3 = a3 << 0x8\n 12709: a3 = a3 | a4\n 12712: a5 = a5 << 0x10\n 12715: s1 = s1 << 0x18\n 12718: a5 = a5 | s1\n 12721: a3 = a3 | a5\n 12724: a4 = u8 [a0 + 0x15]\n 12727: a5 = u8 [a0 + 0x14]\n 12730: s1 = u8 [a0 + 0x16]\n 12733: a1 = u8 [a0 + 0x17]\n 12736: a4 = a4 << 0x8\n 12739: a4 = a4 | a5\n 12742: s1 = s1 << 0x10\n 12745: a1 = a1 << 0x18\n 12748: a1 = a1 | s1\n 12751: a1 = a1 | a4\n 12754: a1 = a1 << 0x20\n 12757: a3 = a3 | a1\n 12760: a1 = u8 [a0 + 0x19]\n 12763: a4 = u8 [a0 + 0x18]\n 12766: a5 = u8 [a0 + 0x1a]\n 12769: s1 = u8 [a0 + 0x1b]\n 12772: a1 = a1 << 0x8\n 12775: a1 = a1 | a4\n 12778: a5 = a5 << 0x10\n 12781: s1 = s1 << 0x18\n 12784: a5 = a5 | s1\n 12787: a1 = a1 | a5\n 12790: a4 = u8 [a0 + 0x1d]\n 12793: a5 = u8 [a0 + 0x1c]\n 12796: s1 = u8 [a0 + 0x1e]\n 12799: a0 = u8 [a0 + 0x1f]\n 12802: a4 = a4 << 0x8\n 12805: a4 = a4 | a5\n 12808: s1 = s1 << 0x10\n 12811: a0 = a0 << 0x18\n 12814: a0 = a0 | s1\n 12817: a0 = a0 | a4\n 12820: a0 = a0 << 0x20\n 12823: a0 = a0 | a1\n 12826: a4 = reverse a0\n 12828: u64 [sp + 0x8] = a4\n 12831: a1 = reverse a3\n 12833: u64 [sp + 0x10] = a1\n 12836: s1 = reverse a2\n 12838: a2 = reverse t0\n 12840: u64 [sp + 0x18] = a2\n 12843: a0 = u64 [sp + 0x20]\n 12846: u64 [sp + 0x78] = a0\n 12849: a0 = u64 [sp + 0x28]\n 12852: u64 [sp + 0x70] = a0\n 12855: a0 = u64 [sp + 0x30]\n 12858: u64 [sp + 0x68] = a0\n 12861: a0 = u64 [sp + 0x38]\n 12864: u64 [sp + 0x60] = a0\n 12867: u64 [sp + 0x58] = a2\n 12870: u64 [sp + 0x50] = s1\n 12873: u64 [sp + 0x48] = a1\n 12876: a0 = sp + 0x60\n 12879: a1 = sp + 0x40\n 12882: u64 [sp + 0x40] = a4\n 12885: ra = 162, jump @156\n      : @203 [@dyn 81] (gas: 11)\n 12891: a2 = u64 [sp + 0x8]\n 12894: a0 = u64 [sp + 0x18]\n 12897: a1 = u64 [sp + 0x10]\n 12900: a0 = a0 | a1\n 12903: a1 = a2 | s1\n 12906: a1 = a1 | a0\n 12909: a1 = a1 >> 0x20\n 12912: a0 = a0 | s1\n 12915: a0 = a0 << 0x20\n 12918: a0 = a0 | a1\n 12921: jump @207 if a0 == 0\n      : @204 (gas: 1)\n 12924: trap\n      : @205 (gas: 3)\n 12925: a0 = 0\n 12927: a1 = 0\n 12929: ra = 164, jump @0\n      : @206 [@dyn 82] (gas: 5)\n 12935: i32 a1 = a0 + 0\n 12937: a0 = 0x1\n 12940: a2 = 0\n 12942: ecalli 6 // 'seal_return'\n 12944: fallthrough\n      : @207 (gas: 3)\n 12945: i32 a0 = a2 + 0\n 12947: a1 = 0x120\n 12951: ra = 166, jump @0\n      : @208 [@dyn 83] (gas: 6)\n 12957: i32 a1 = a0 + 0\n 12959: a2 = 0x120\n 12963: a0 = 0\n 12965: ra = 0xa8\n 12969: ecalli 6 // 'seal_return'\n 12971: fallthrough\n      : @209 [@dyn 84] (gas: 19)\n 12972: t0 = u64 [a0 + 0x18]\n 12975: t1 = u64 [a1 + 0x18]\n 12978: a4 = u64 [a0 + 0x10]\n 12981: a5 = u64 [a0 + 0x8]\n 12984: a2 = u64 [a1 + 0x8]\n 12987: t2 = u64 [a0]\n 12989: a3 = u64 [a1]\n 12991: a1 = u64 [a1 + 0x10]\n 12994: a0 = a2 ^ a5\n 12997: a2 = a2 <u a5\n 13000: a3 = a3 <u t2\n 13003: a3 = a2 if a0 != 0\n 13006: a0 = a1 - a4\n 13009: a0 = a0 <u a3\n 13012: a1 = a1 <u a4\n 13015: a2 = t1 - t0\n 13018: a2 = a2 - a1\n 13021: a2 = a2 - a0\n 13024: jump @211 if a2 <s 0\n      : @210 (gas: 1)\n 13027: ret\n      : @211 (gas: 5)\n 13029: sp = sp + 0xfffffffffffffff8\n 13032: u64 [sp] = ra\n 13034: a0 = 0\n 13036: a1 = 0\n 13038: ra = 170, jump @0\n      : @212 [@dyn 85] (gas: 6)\n 13044: i32 a1 = a0 + 0\n 13046: a0 = 0x1\n 13049: a2 = 0\n 13051: ra = 0xac\n 13055: ecalli 6 // 'seal_return'\n 13057: fallthrough\n      : @213 [@dyn 86] (gas: 194)\n 13058: sp = sp + 0xffffffffffffffa0\n 13061: u64 [sp + 0x58] = ra\n 13064: u64 [sp + 0x50] = s0\n 13067: u64 [sp + 0x48] = s1\n 13070: u64 [sp] = a0\n 13072: t1 = u64 [a1]\n 13074: ra = u64 [a1 + 0x8]\n 13077: a4 = u64 [a1 + 0x10]\n 13080: a1 = u64 [a1 + 0x18]\n 13083: t0 = u64 [a2]\n 13085: a3 = u64 [a2 + 0x8]\n 13088: t2 = u64 [a2 + 0x18]\n 13091: a2 = u64 [a2 + 0x10]\n 13094: s0 = t0 >> 0x3d\n 13097: s1 = a3 << 0x3\n 13100: s0 = s0 | s1\n 13103: a3 = a3 >> 0x3d\n 13106: s1 = a2 << 0x3\n 13109: a3 = a3 | s1\n 13112: a2 = a2 >> 0x3d\n 13115: t2 = t2 << 0x3\n 13118: s1 = t2 | a2\n 13121: t2 = t0 << 0x3\n 13124: a2 = s1 >u 0\n 13126: a5 = a3 >u 0\n 13128: a5 = a2 if s1 != 0\n 13131: a0 = s0 >u 0\n 13133: a2 = t2 <u 0x100\n 13137: t2 = a2 ^ 0x1\n 13140: t2 = a0 if s0 != 0\n 13143: a3 = a3 | s1\n 13146: t2 = a5 if a3 != 0\n 13149: u8 [sp + 71] = 0\n 13152: u8 [sp + 70] = 0\n 13155: u8 [sp + 69] = 0\n 13158: u8 [sp + 68] = 0\n 13161: u8 [sp + 67] = 0\n 13164: u8 [sp + 66] = 0\n 13167: u8 [sp + 65] = 0\n 13170: u8 [sp + 64] = 0\n 13173: u8 [sp + 63] = 0\n 13176: u8 [sp + 62] = 0\n 13179: u8 [sp + 61] = 0\n 13182: u8 [sp + 60] = 0\n 13185: u8 [sp + 59] = 0\n 13188: u8 [sp + 58] = 0\n 13191: u8 [sp + 57] = 0\n 13194: u8 [sp + 56] = 0\n 13197: u8 [sp + 55] = 0\n 13200: u8 [sp + 54] = 0\n 13203: u8 [sp + 53] = 0\n 13206: u8 [sp + 52] = 0\n 13209: u8 [sp + 51] = 0\n 13212: u8 [sp + 50] = 0\n 13215: u8 [sp + 49] = 0\n 13218: u8 [sp + 48] = 0\n 13221: u8 [sp + 47] = 0\n 13224: u8 [sp + 46] = 0\n 13227: u8 [sp + 45] = 0\n 13230: u8 [sp + 44] = 0\n 13233: u8 [sp + 43] = 0\n 13236: u8 [sp + 42] = 0\n 13239: u8 [sp + 41] = 0\n 13242: u8 [sp + 40] = 0\n 13245: u8 [sp + 0x20] = a1\n 13248: u8 [sp + 0x18] = a4\n 13251: u8 [sp + 0x10] = ra\n 13254: u8 [sp + 0x8] = t1\n 13257: a0 = a1 >> 0x38\n 13260: u8 [sp + 0x27] = a0\n 13263: a0 = a1 >> 0x30\n 13266: u8 [sp + 0x26] = a0\n 13269: a0 = a1 >> 0x28\n 13272: u8 [sp + 0x25] = a0\n 13275: a0 = a1 >> 0x20\n 13278: u8 [sp + 0x24] = a0\n 13281: a0 = a1 >> 0x18\n 13284: u8 [sp + 0x23] = a0\n 13287: a0 = a1 >> 0x10\n 13290: u8 [sp + 0x22] = a0\n 13293: a1 = a1 >> 0x8\n 13296: u8 [sp + 0x21] = a1\n 13299: a0 = a4 >> 0x38\n 13302: u8 [sp + 0x1f] = a0\n 13305: a0 = a4 >> 0x30\n 13308: u8 [sp + 0x1e] = a0\n 13311: a0 = a4 >> 0x28\n 13314: u8 [sp + 0x1d] = a0\n 13317: a0 = a4 >> 0x20\n 13320: u8 [sp + 0x1c] = a0\n 13323: a0 = a4 >> 0x18\n 13326: u8 [sp + 0x1b] = a0\n 13329: a0 = a4 >> 0x10\n 13332: u8 [sp + 0x1a] = a0\n 13335: a4 = a4 >> 0x8\n 13338: u8 [sp + 0x19] = a4\n 13341: a0 = ra >> 0x38\n 13344: u8 [sp + 0x17] = a0\n 13347: a0 = ra >> 0x30\n 13350: u8 [sp + 0x16] = a0\n 13353: a0 = ra >> 0x28\n 13356: u8 [sp + 0x15] = a0\n 13359: a0 = ra >> 0x20\n 13362: u8 [sp + 0x14] = a0\n 13365: a0 = ra >> 0x18\n 13368: u8 [sp + 0x13] = a0\n 13371: a0 = ra >> 0x10\n 13374: u8 [sp + 0x12] = a0\n 13377: a0 = ra >> 0x8\n 13380: u8 [sp + 0x11] = a0\n 13383: a0 = t1 >> 0x38\n 13386: u8 [sp + 0xf] = a0\n 13389: a0 = t1 >> 0x30\n 13392: u8 [sp + 0xe] = a0\n 13395: a0 = t1 >> 0x28\n 13398: u8 [sp + 0xd] = a0\n 13401: a0 = t1 >> 0x20\n 13404: u8 [sp + 0xc] = a0\n 13407: a0 = t1 >> 0x18\n 13410: u8 [sp + 0xb] = a0\n 13413: a0 = t1 >> 0x10\n 13416: u8 [sp + 0xa] = a0\n 13419: a0 = t1 >> 0x8\n 13422: u8 [sp + 0x9] = a0\n 13425: a1 = t0 & 0x1f\n 13428: a0 = sp + 0x8\n 13431: a1 = a1 + a0\n 13434: a0 = u8 [a1 + 0x9]\n 13437: a2 = u8 [a1 + 0x8]\n 13440: a3 = u8 [a1 + 0xa]\n 13443: a4 = u8 [a1 + 0xb]\n 13446: a0 = a0 << 0x8\n 13449: a0 = a0 | a2\n 13452: a3 = a3 << 0x10\n 13455: a4 = a4 << 0x18\n 13458: a3 = a3 | a4\n 13461: a0 = a0 | a3\n 13464: a2 = u8 [a1 + 0xd]\n 13467: a3 = u8 [a1 + 0xc]\n 13470: a4 = u8 [a1 + 0xe]\n 13473: a5 = u8 [a1 + 0xf]\n 13476: a2 = a2 << 0x8\n 13479: a2 = a2 | a3\n 13482: a4 = a4 << 0x10\n 13485: a5 = a5 << 0x18\n 13488: a4 = a4 | a5\n 13491: a2 = a2 | a4\n 13494: a2 = a2 << 0x20\n 13497: a3 = a2 | a0\n 13500: a0 = u8 [a1 + 0x1]\n 13503: a2 = u8 [a1]\n 13505: a4 = u8 [a1 + 0x2]\n 13508: a5 = u8 [a1 + 0x3]\n 13511: a0 = a0 << 0x8\n 13514: a0 = a0 | a2\n 13517: a4 = a4 << 0x10\n 13520: a5 = a5 << 0x18\n 13523: a4 = a4 | a5\n 13526: a0 = a0 | a4\n 13529: a2 = u8 [a1 + 0x5]\n 13532: a4 = u8 [a1 + 0x4]\n 13535: a5 = u8 [a1 + 0x6]\n 13538: s1 = u8 [a1 + 0x7]\n 13541: a2 = a2 << 0x8\n 13544: a2 = a2 | a4\n 13547: a5 = a5 << 0x10\n 13550: s1 = s1 << 0x18\n 13553: a5 = a5 | s1\n 13556: a2 = a2 | a5\n 13559: a2 = a2 << 0x20\n 13562: a0 = a0 | a2\n 13565: a2 = u8 [a1 + 0x11]\n 13568: a4 = u8 [a1 + 0x10]\n 13571: a5 = u8 [a1 + 0x12]\n 13574: a1 = u8 [a1 + 0x13]\n 13577: a2 = a2 << 0x8\n 13580: a2 = a2 | a4\n 13583: a5 = a5 << 0x10\n 13586: a1 = a1 << 0x18\n 13589: a1 = a1 | a5\n 13592: a1 = a1 | a2\n 13595: a0 = 0 if t2 != 0\n 13597: a3 = 0 if t2 != 0\n 13599: a1 = 0 if t2 != 0\n 13601: a2 = u64 [sp]\n 13603: u64 [a2 + 24] = 0\n 13606: u64 [a2 + 0x10] = a1\n 13609: u64 [a2 + 0x8] = a3\n 13612: u64 [a2] = a0\n 13614: ra = u64 [sp + 0x58]\n 13617: s0 = u64 [sp + 0x50]\n 13620: s1 = u64 [sp + 0x48]\n 13623: sp = sp + 0x60\n 13626: ret\n      : @214 (gas: 8)\n 13628: a0 = u64 [sp + 0x30]\n 13631: a1 = u64 [sp + 0x38]\n 13634: a2 = u64 [sp + 0x28]\n 13637: a3 = u64 [sp + 0x20]\n 13640: a1 = a1 | a2\n 13643: a0 = a0 | a3\n 13646: a0 = a0 | a1\n 13649: jump @219 if a0 != 0\n      : @215 (gas: 2)\n 13653: a0 = i32 [0x20004]\n 13658: jump @219 if a0 <=u 3\n      : @216 (gas: 24)\n 13663: u64 [sp + 88] = 0\n 13666: u64 [sp + 80] = 0\n 13669: u64 [sp + 72] = 0\n 13672: u64 [sp + 64] = 0x1\n 13676: u64 [sp + 120] = 0\n 13679: u64 [sp + 112] = 0\n 13682: u64 [sp + 104] = 0\n 13685: u64 [sp + 96] = 0\n 13688: u32 [sp + 128] = 0x20\n 13693: i32 a1 = sp + 0x40\n 13696: i32 a3 = sp + 0x60\n 13699: i32 a4 = sp + 0x80\n 13703: a2 = 0xffffffffffffffff\n 13706: a0 = 0\n 13708: ecalli 4 // 'get_storage'\n 13710: a0 = u64 [sp + 0x70]\n 13713: u64 [sp + 0x8] = a0\n 13716: a0 = u64 [sp + 0x68]\n 13719: u64 [sp + 0x10] = a0\n 13722: a0 = u64 [sp + 0x60]\n 13725: u64 [sp + 0x18] = a0\n 13728: a0 = 0x40\n 13731: a1 = 0x20\n 13734: ra = 174, jump @0\n      : @217 [@dyn 87] (gas: 100)\n 13740: a1 = u8 [a0 + 0x11]\n 13743: a2 = u8 [a0 + 0x10]\n 13746: a3 = u8 [a0 + 0x12]\n 13749: a4 = u8 [a0 + 0x13]\n 13752: a1 = a1 << 0x8\n 13755: a1 = a1 | a2\n 13758: a3 = a3 << 0x10\n 13761: a4 = a4 << 0x18\n 13764: a3 = a3 | a4\n 13767: a1 = a1 | a3\n 13770: a2 = u8 [a0 + 0x15]\n 13773: a3 = u8 [a0 + 0x14]\n 13776: a4 = u8 [a0 + 0x16]\n 13779: a5 = u8 [a0 + 0x17]\n 13782: a2 = a2 << 0x8\n 13785: a2 = a2 | a3\n 13788: a4 = a4 << 0x10\n 13791: a5 = a5 << 0x18\n 13794: a4 = a4 | a5\n 13797: a2 = a2 | a4\n 13800: a2 = a2 << 0x20\n 13803: t0 = a2 | a1\n 13806: a2 = u8 [a0 + 0x1]\n 13809: a3 = u8 [a0]\n 13811: a4 = u8 [a0 + 0x2]\n 13814: a5 = u8 [a0 + 0x3]\n 13817: a2 = a2 << 0x8\n 13820: a2 = a2 | a3\n 13823: a4 = a4 << 0x10\n 13826: a5 = a5 << 0x18\n 13829: a4 = a4 | a5\n 13832: a2 = a2 | a4\n 13835: a3 = u8 [a0 + 0x5]\n 13838: a4 = u8 [a0 + 0x4]\n 13841: a5 = u8 [a0 + 0x6]\n 13844: s1 = u8 [a0 + 0x7]\n 13847: a3 = a3 << 0x8\n 13850: a3 = a3 | a4\n 13853: a5 = a5 << 0x10\n 13856: s1 = s1 << 0x18\n 13859: a5 = a5 | s1\n 13862: a3 = a3 | a5\n 13865: a3 = a3 << 0x20\n 13868: a2 = a2 | a3\n 13871: a3 = u8 [a0 + 0x19]\n 13874: a4 = u8 [a0 + 0x18]\n 13877: a5 = u8 [a0 + 0x1a]\n 13880: s1 = u8 [a0 + 0x1b]\n 13883: a3 = a3 << 0x8\n 13886: a3 = a3 | a4\n 13889: a5 = a5 << 0x10\n 13892: s1 = s1 << 0x18\n 13895: a5 = a5 | s1\n 13898: a3 = a3 | a5\n 13901: a4 = u8 [a0 + 0x1d]\n 13904: a5 = u8 [a0 + 0x1c]\n 13907: s1 = u8 [a0 + 0x1e]\n 13910: a1 = u8 [a0 + 0x1f]\n 13913: a4 = a4 << 0x8\n 13916: a4 = a4 | a5\n 13919: s1 = s1 << 0x10\n 13922: a1 = a1 << 0x18\n 13925: a1 = a1 | s1\n 13928: a1 = a1 | a4\n 13931: a1 = a1 << 0x20\n 13934: a3 = a3 | a1\n 13937: a1 = u8 [a0 + 0x9]\n 13940: a4 = u8 [a0 + 0x8]\n 13943: a5 = u8 [a0 + 0xa]\n 13946: s1 = u8 [a0 + 0xb]\n 13949: a1 = a1 << 0x8\n 13952: a1 = a1 | a4\n 13955: a5 = a5 << 0x10\n 13958: s1 = s1 << 0x18\n 13961: a5 = a5 | s1\n 13964: a1 = a1 | a5\n 13967: a4 = u8 [a0 + 0xd]\n 13970: a5 = u8 [a0 + 0xc]\n 13973: s1 = u8 [a0 + 0xe]\n 13976: a0 = u8 [a0 + 0xf]\n 13979: a4 = a4 << 0x8\n 13982: a4 = a4 | a5\n 13985: s1 = s1 << 0x10\n 13988: a0 = a0 << 0x18\n 13991: a0 = a0 | s1\n 13994: a0 = a0 | a4\n 13997: a0 = a0 << 0x20\n 14000: a0 = a0 | a1\n 14003: a1 = reverse a0\n 14005: a0 = reverse a3\n 14007: a2 = reverse a2\n 14009: a3 = reverse t0\n 14011: a2 = a2 | a3\n 14014: a3 = a0 | a1\n 14017: a3 = a3 | a2\n 14020: a3 = a3 >> 0x20\n 14023: a1 = a1 | a2\n 14026: a1 = a1 << 0x20\n 14029: a1 = a1 | a3\n 14032: jump @221 if a1 == 0\n      : @218 (gas: 1)\n 14035: trap\n      : @219 (gas: 3)\n 14036: a0 = 0\n 14038: a1 = 0\n 14040: ra = 176, jump @0\n      : @220 [@dyn 88] (gas: 5)\n 14046: i32 a1 = a0 + 0\n 14048: a0 = 0x1\n 14051: a2 = 0\n 14053: ecalli 6 // 'seal_return'\n 14055: fallthrough\n      : @221 (gas: 7)\n 14056: a1 = u64 [sp + 0x8]\n 14059: a1 = a1 << 0x20\n 14062: s1 = a1 >> 0x20\n 14065: i32 a0 = a0 + 0\n 14067: u64 [sp + 0x8] = a0\n 14070: a1 = 0x20\n 14073: ra = 178, jump @0\n      : @222 [@dyn 89] (gas: 58)\n 14079: a1 = reverse s1\n 14081: a2 = u64 [sp + 0x10]\n 14084: a2 = reverse a2\n 14086: a3 = u64 [sp + 0x18]\n 14089: a3 = reverse a3\n 14091: a4 = a3 >> 0x38\n 14094: u8 [a0 + 0x1f] = a4\n 14097: a4 = a3 >> 0x30\n 14100: u8 [a0 + 0x1e] = a4\n 14103: a4 = a3 >> 0x28\n 14106: u8 [a0 + 0x1d] = a4\n 14109: a4 = a3 >> 0x20\n 14112: u8 [a0 + 0x1c] = a4\n 14115: a4 = a3 >> 0x18\n 14118: u8 [a0 + 0x1b] = a4\n 14121: a4 = a3 >> 0x10\n 14124: u8 [a0 + 0x1a] = a4\n 14127: a4 = a3 >> 0x8\n 14130: u8 [a0 + 0x19] = a4\n 14133: u8 [a0 + 0x18] = a3\n 14136: u8 [a0 + 0x10] = a2\n 14139: u8 [a0 + 11] = 0\n 14142: u8 [a0 + 10] = 0\n 14145: u8 [a0 + 9] = 0\n 14148: u8 [a0 + 7] = 0\n 14151: u8 [a0 + 6] = 0\n 14154: u8 [a0 + 5] = 0\n 14157: u8 [a0 + 4] = 0\n 14160: u8 [a0 + 3] = 0\n 14163: u8 [a0 + 2] = 0\n 14166: u8 [a0 + 1] = 0\n 14169: u8 [a0 + 0] = 0\n 14171: a3 = a2 >> 0x38\n 14174: u8 [a0 + 0x17] = a3\n 14177: a3 = a2 >> 0x30\n 14180: u8 [a0 + 0x16] = a3\n 14183: a3 = a2 >> 0x28\n 14186: u8 [a0 + 0x15] = a3\n 14189: a3 = a2 >> 0x20\n 14192: u8 [a0 + 0x14] = a3\n 14195: a3 = a2 >> 0x18\n 14198: u8 [a0 + 0x13] = a3\n 14201: a3 = a2 >> 0x10\n 14204: u8 [a0 + 0x12] = a3\n 14207: a2 = a2 >> 0x8\n 14210: u8 [a0 + 0x11] = a2\n 14213: u8 [a0 + 0x8] = a1\n 14216: a2 = a1 >> 0x38\n 14219: u8 [a0 + 0xf] = a2\n 14222: a2 = a1 >> 0x30\n 14225: u8 [a0 + 0xe] = a2\n 14228: a2 = a1 >> 0x28\n 14231: u8 [a0 + 0xd] = a2\n 14234: a1 = a1 >> 0x20\n 14237: u8 [a0 + 0xc] = a1\n 14240: a1 = 0x20\n 14243: a0 = u64 [sp + 0x8]\n 14246: ra = 180, jump @0\n      : @223 [@dyn 90] (gas: 6)\n 14252: i32 a1 = a0 + 0\n 14254: a2 = 0x20\n 14257: a0 = 0\n 14259: ra = 0xb6\n 14263: ecalli 6 // 'seal_return'\n 14265: fallthrough\n      : @224 [@dyn 91] (gas: 35)\n 14266: sp = sp + 0xffffffffffffffa0\n 14269: u64 [sp + 0x58] = ra\n 14272: u64 [sp + 0x50] = s0\n 14275: u64 [sp + 0x48] = s1\n 14278: s0 = sp + 0x60\n 14281: sp = sp & 0xffffffffffffffe0\n 14284: s1 = a0\n 14286: u64 [sp + 24] = 0\n 14289: u64 [sp + 16] = 0\n 14292: u64 [sp + 8] = 0\n 14295: u64 [sp + 0] = 0x2\n 14298: u64 [sp + 56] = 0\n 14301: u64 [sp + 48] = 0\n 14304: u64 [sp + 40] = 0\n 14307: u64 [sp + 32] = 0\n 14310: u32 [sp + 64] = 0x20\n 14314: i32 a1 = sp + 0\n 14316: i32 a3 = sp + 0x20\n 14319: i32 a4 = sp + 0x40\n 14322: a2 = 0xffffffffffffffff\n 14325: a0 = 0\n 14327: ecalli 4 // 'get_storage'\n 14329: a0 = u32 [sp + 0x30]\n 14332: a1 = u64 [sp + 0x28]\n 14335: a2 = u64 [sp + 0x20]\n 14338: u64 [s1 + 24] = 0\n 14341: u64 [s1 + 0x10] = a0\n 14344: u64 [s1 + 0x8] = a1\n 14347: u64 [s1] = a2\n 14349: sp = s0 + 0xffffffffffffffa0\n 14352: ra = u64 [sp + 0x58]\n 14355: s0 = u64 [sp + 0x50]\n 14358: s1 = u64 [sp + 0x48]\n 14361: sp = sp + 0x60\n 14364: ret\n      : @225 (gas: 8)\n 14366: a0 = u64 [sp + 0x30]\n 14369: a1 = u64 [sp + 0x38]\n 14372: a2 = u64 [sp + 0x28]\n 14375: a3 = u64 [sp + 0x20]\n 14378: a1 = a1 | a2\n 14381: a0 = a0 | a3\n 14384: a0 = a0 | a1\n 14387: jump @230 if a0 != 0\n      : @226 (gas: 2)\n 14391: a0 = i32 [0x20004]\n 14396: jump @230 if a0 <=u 3\n      : @227 (gas: 24)\n 14401: u64 [sp + 88] = 0\n 14404: u64 [sp + 80] = 0\n 14407: u64 [sp + 72] = 0\n 14410: u64 [sp + 64] = 0x2\n 14414: u64 [sp + 120] = 0\n 14417: u64 [sp + 112] = 0\n 14420: u64 [sp + 104] = 0\n 14423: u64 [sp + 96] = 0\n 14426: u32 [sp + 128] = 0x20\n 14431: i32 a1 = sp + 0x40\n 14434: i32 a3 = sp + 0x60\n 14437: i32 a4 = sp + 0x80\n 14441: a2 = 0xffffffffffffffff\n 14444: a0 = 0\n 14446: ecalli 4 // 'get_storage'\n 14448: a0 = u64 [sp + 0x70]\n 14451: u64 [sp + 0x8] = a0\n 14454: a0 = u64 [sp + 0x68]\n 14457: u64 [sp + 0x10] = a0\n 14460: a0 = u64 [sp + 0x60]\n 14463: u64 [sp + 0x18] = a0\n 14466: a0 = 0x40\n 14469: a1 = 0x20\n 14472: ra = 184, jump @0\n      : @228 [@dyn 92] (gas: 100)\n 14478: a1 = u8 [a0 + 0x11]\n 14481: a2 = u8 [a0 + 0x10]\n 14484: a3 = u8 [a0 + 0x12]\n 14487: a4 = u8 [a0 + 0x13]\n 14490: a1 = a1 << 0x8\n 14493: a1 = a1 | a2\n 14496: a3 = a3 << 0x10\n 14499: a4 = a4 << 0x18\n 14502: a3 = a3 | a4\n 14505: a1 = a1 | a3\n 14508: a2 = u8 [a0 + 0x15]\n 14511: a3 = u8 [a0 + 0x14]\n 14514: a4 = u8 [a0 + 0x16]\n 14517: a5 = u8 [a0 + 0x17]\n 14520: a2 = a2 << 0x8\n 14523: a2 = a2 | a3\n 14526: a4 = a4 << 0x10\n 14529: a5 = a5 << 0x18\n 14532: a4 = a4 | a5\n 14535: a2 = a2 | a4\n 14538: a2 = a2 << 0x20\n 14541: t0 = a2 | a1\n 14544: a2 = u8 [a0 + 0x1]\n 14547: a3 = u8 [a0]\n 14549: a4 = u8 [a0 + 0x2]\n 14552: a5 = u8 [a0 + 0x3]\n 14555: a2 = a2 << 0x8\n 14558: a2 = a2 | a3\n 14561: a4 = a4 << 0x10\n 14564: a5 = a5 << 0x18\n 14567: a4 = a4 | a5\n 14570: a2 = a2 | a4\n 14573: a3 = u8 [a0 + 0x5]\n 14576: a4 = u8 [a0 + 0x4]\n 14579: a5 = u8 [a0 + 0x6]\n 14582: s1 = u8 [a0 + 0x7]\n 14585: a3 = a3 << 0x8\n 14588: a3 = a3 | a4\n 14591: a5 = a5 << 0x10\n 14594: s1 = s1 << 0x18\n 14597: a5 = a5 | s1\n 14600: a3 = a3 | a5\n 14603: a3 = a3 << 0x20\n 14606: a2 = a2 | a3\n 14609: a3 = u8 [a0 + 0x19]\n 14612: a4 = u8 [a0 + 0x18]\n 14615: a5 = u8 [a0 + 0x1a]\n 14618: s1 = u8 [a0 + 0x1b]\n 14621: a3 = a3 << 0x8\n 14624: a3 = a3 | a4\n 14627: a5 = a5 << 0x10\n 14630: s1 = s1 << 0x18\n 14633: a5 = a5 | s1\n 14636: a3 = a3 | a5\n 14639: a4 = u8 [a0 + 0x1d]\n 14642: a5 = u8 [a0 + 0x1c]\n 14645: s1 = u8 [a0 + 0x1e]\n 14648: a1 = u8 [a0 + 0x1f]\n 14651: a4 = a4 << 0x8\n 14654: a4 = a4 | a5\n 14657: s1 = s1 << 0x10\n 14660: a1 = a1 << 0x18\n 14663: a1 = a1 | s1\n 14666: a1 = a1 | a4\n 14669: a1 = a1 << 0x20\n 14672: a3 = a3 | a1\n 14675: a1 = u8 [a0 + 0x9]\n 14678: a4 = u8 [a0 + 0x8]\n 14681: a5 = u8 [a0 + 0xa]\n 14684: s1 = u8 [a0 + 0xb]\n 14687: a1 = a1 << 0x8\n 14690: a1 = a1 | a4\n 14693: a5 = a5 << 0x10\n 14696: s1 = s1 << 0x18\n 14699: a5 = a5 | s1\n 14702: a1 = a1 | a5\n 14705: a4 = u8 [a0 + 0xd]\n 14708: a5 = u8 [a0 + 0xc]\n 14711: s1 = u8 [a0 + 0xe]\n 14714: a0 = u8 [a0 + 0xf]\n 14717: a4 = a4 << 0x8\n 14720: a4 = a4 | a5\n 14723: s1 = s1 << 0x10\n 14726: a0 = a0 << 0x18\n 14729: a0 = a0 | s1\n 14732: a0 = a0 | a4\n 14735: a0 = a0 << 0x20\n 14738: a0 = a0 | a1\n 14741: a1 = reverse a0\n 14743: a0 = reverse a3\n 14745: a2 = reverse a2\n 14747: a3 = reverse t0\n 14749: a2 = a2 | a3\n 14752: a3 = a0 | a1\n 14755: a3 = a3 | a2\n 14758: a3 = a3 >> 0x20\n 14761: a1 = a1 | a2\n 14764: a1 = a1 << 0x20\n 14767: a1 = a1 | a3\n 14770: jump @232 if a1 == 0\n      : @229 (gas: 1)\n 14773: trap\n      : @230 (gas: 3)\n 14774: a0 = 0\n 14776: a1 = 0\n 14778: ra = 186, jump @0\n      : @231 [@dyn 93] (gas: 5)\n 14784: i32 a1 = a0 + 0\n 14786: a0 = 0x1\n 14789: a2 = 0\n 14791: ecalli 6 // 'seal_return'\n 14793: fallthrough\n      : @232 (gas: 7)\n 14794: a1 = u64 [sp + 0x8]\n 14797: a1 = a1 << 0x20\n 14800: s1 = a1 >> 0x20\n 14803: i32 a0 = a0 + 0\n 14805: u64 [sp + 0x8] = a0\n 14808: a1 = 0x20\n 14811: ra = 188, jump @0\n      : @233 [@dyn 94] (gas: 58)\n 14817: a1 = reverse s1\n 14819: a2 = u64 [sp + 0x10]\n 14822: a2 = reverse a2\n 14824: a3 = u64 [sp + 0x18]\n 14827: a3 = reverse a3\n 14829: a4 = a3 >> 0x38\n 14832: u8 [a0 + 0x1f] = a4\n 14835: a4 = a3 >> 0x30\n 14838: u8 [a0 + 0x1e] = a4\n 14841: a4 = a3 >> 0x28\n 14844: u8 [a0 + 0x1d] = a4\n 14847: a4 = a3 >> 0x20\n 14850: u8 [a0 + 0x1c] = a4\n 14853: a4 = a3 >> 0x18\n 14856: u8 [a0 + 0x1b] = a4\n 14859: a4 = a3 >> 0x10\n 14862: u8 [a0 + 0x1a] = a4\n 14865: a4 = a3 >> 0x8\n 14868: u8 [a0 + 0x19] = a4\n 14871: u8 [a0 + 0x18] = a3\n 14874: u8 [a0 + 0x10] = a2\n 14877: u8 [a0 + 11] = 0\n 14880: u8 [a0 + 10] = 0\n 14883: u8 [a0 + 9] = 0\n 14886: u8 [a0 + 7] = 0\n 14889: u8 [a0 + 6] = 0\n 14892: u8 [a0 + 5] = 0\n 14895: u8 [a0 + 4] = 0\n 14898: u8 [a0 + 3] = 0\n 14901: u8 [a0 + 2] = 0\n 14904: u8 [a0 + 1] = 0\n 14907: u8 [a0 + 0] = 0\n 14909: a3 = a2 >> 0x38\n 14912: u8 [a0 + 0x17] = a3\n 14915: a3 = a2 >> 0x30\n 14918: u8 [a0 + 0x16] = a3\n 14921: a3 = a2 >> 0x28\n 14924: u8 [a0 + 0x15] = a3\n 14927: a3 = a2 >> 0x20\n 14930: u8 [a0 + 0x14] = a3\n 14933: a3 = a2 >> 0x18\n 14936: u8 [a0 + 0x13] = a3\n 14939: a3 = a2 >> 0x10\n 14942: u8 [a0 + 0x12] = a3\n 14945: a2 = a2 >> 0x8\n 14948: u8 [a0 + 0x11] = a2\n 14951: u8 [a0 + 0x8] = a1\n 14954: a2 = a1 >> 0x38\n 14957: u8 [a0 + 0xf] = a2\n 14960: a2 = a1 >> 0x30\n 14963: u8 [a0 + 0xe] = a2\n 14966: a2 = a1 >> 0x28\n 14969: u8 [a0 + 0xd] = a2\n 14972: a1 = a1 >> 0x20\n 14975: u8 [a0 + 0xc] = a1\n 14978: a1 = 0x20\n 14981: a0 = u64 [sp + 0x8]\n 14984: ra = 190, jump @0\n      : @234 [@dyn 95] (gas: 6)\n 14990: i32 a1 = a0 + 0\n 14992: a2 = 0x20\n 14995: a0 = 0\n 14997: ra = 0xc0\n 15001: ecalli 6 // 'seal_return'\n 15003: fallthrough\n      : @235 [@dyn 96] (gas: 12)\n 15004: sp = sp + 0xffffffffffffff00\n 15008: u64 [sp + 0xf8] = ra\n 15012: u64 [sp + 0xf0] = s0\n 15016: s0 = sp + 0x100\n 15020: sp = sp & 0xffffffffffffffe0\n 15023: u64 [sp + 216] = 0\n 15027: u64 [sp + 208] = 0\n 15031: u64 [sp + 200] = 0\n 15035: u64 [sp + 192] = 0\n 15039: i32 a0 = sp + 0xc0\n 15043: ecalli 9 // 'value_transferred'\n 15045: fallthrough\n      : @236 (gas: 8)\n 15046: a0 = u64 [sp + 0xd0]\n 15050: a1 = u64 [sp + 0xd8]\n 15054: a2 = u64 [sp + 0xc8]\n 15058: a3 = u64 [sp + 0xc0]\n 15062: a1 = a1 | a2\n 15065: a0 = a0 | a3\n 15068: a0 = a0 | a1\n 15071: jump @242 if a0 != 0\n      : @237 (gas: 13)\n 15075: a0 = u32 [0x20004]\n 15080: u64 [sp + 88] = 0\n 15083: u64 [sp + 80] = 0\n 15086: u64 [sp + 72] = 0\n 15089: u64 [sp + 0x40] = a0\n 15092: u64 [sp + 120] = 0\n 15095: u64 [sp + 112] = 0\n 15098: u64 [sp + 96] = 0x4\n 15102: a0 = sp + 0x80\n 15106: a1 = sp + 0x60\n 15109: a2 = sp + 0x40\n 15112: u64 [sp + 104] = 0\n 15115: ra = 194, jump @77\n      : @238 [@dyn 97] (gas: 19)\n 15121: t0 = u64 [sp + 0x80]\n 15125: t1 = u64 [sp + 0x88]\n 15129: a1 = u64 [sp + 0x90]\n 15133: a3 = u64 [sp + 0x98]\n 15137: a4 = u64 [sp + 0xa0]\n 15141: a5 = u64 [sp + 0xa8]\n 15145: a2 = u64 [sp + 0xb0]\n 15149: a0 = u64 [sp + 0xb8]\n 15153: u64 [sp + 0x18] = a0\n 15156: u64 [sp + 0x10] = a2\n 15159: u64 [sp + 0x8] = a5\n 15162: u64 [sp] = a4\n 15164: u64 [sp + 0x38] = a3\n 15167: u64 [sp + 0x30] = a1\n 15170: u64 [sp + 0x28] = t1\n 15173: a0 = sp + 0x20\n 15176: a1 = sp\n 15178: u64 [sp + 0x20] = t0\n 15181: ra = 196, jump @391\n      : @239 [@dyn 98] (gas: 3)\n 15187: a0 = 0x40\n 15190: a1 = 0x20\n 15193: ra = 198, jump @0\n      : @240 [@dyn 99] (gas: 100)\n 15199: a1 = u8 [a0 + 0x11]\n 15202: a2 = u8 [a0 + 0x10]\n 15205: a3 = u8 [a0 + 0x12]\n 15208: a4 = u8 [a0 + 0x13]\n 15211: a1 = a1 << 0x8\n 15214: a1 = a1 | a2\n 15217: a3 = a3 << 0x10\n 15220: a4 = a4 << 0x18\n 15223: a3 = a3 | a4\n 15226: a1 = a1 | a3\n 15229: a2 = u8 [a0 + 0x15]\n 15232: a3 = u8 [a0 + 0x14]\n 15235: a4 = u8 [a0 + 0x16]\n 15238: a5 = u8 [a0 + 0x17]\n 15241: a2 = a2 << 0x8\n 15244: a2 = a2 | a3\n 15247: a4 = a4 << 0x10\n 15250: a5 = a5 << 0x18\n 15253: a4 = a4 | a5\n 15256: a2 = a2 | a4\n 15259: a2 = a2 << 0x20\n 15262: t0 = a2 | a1\n 15265: a2 = u8 [a0 + 0x1]\n 15268: a3 = u8 [a0]\n 15270: a4 = u8 [a0 + 0x2]\n 15273: a5 = u8 [a0 + 0x3]\n 15276: a2 = a2 << 0x8\n 15279: a2 = a2 | a3\n 15282: a4 = a4 << 0x10\n 15285: a5 = a5 << 0x18\n 15288: a4 = a4 | a5\n 15291: a2 = a2 | a4\n 15294: a3 = u8 [a0 + 0x5]\n 15297: a4 = u8 [a0 + 0x4]\n 15300: a5 = u8 [a0 + 0x6]\n 15303: a1 = u8 [a0 + 0x7]\n 15306: a3 = a3 << 0x8\n 15309: a3 = a3 | a4\n 15312: a5 = a5 << 0x10\n 15315: a1 = a1 << 0x18\n 15318: a1 = a1 | a5\n 15321: a1 = a1 | a3\n 15324: a1 = a1 << 0x20\n 15327: t1 = a1 | a2\n 15330: a1 = u8 [a0 + 0x19]\n 15333: a3 = u8 [a0 + 0x18]\n 15336: a4 = u8 [a0 + 0x1a]\n 15339: a5 = u8 [a0 + 0x1b]\n 15342: a1 = a1 << 0x8\n 15345: a1 = a1 | a3\n 15348: a4 = a4 << 0x10\n 15351: a5 = a5 << 0x18\n 15354: a4 = a4 | a5\n 15357: a1 = a1 | a4\n 15360: a3 = u8 [a0 + 0x1d]\n 15363: a4 = u8 [a0 + 0x1c]\n 15366: a5 = u8 [a0 + 0x1e]\n 15369: a2 = u8 [a0 + 0x1f]\n 15372: a3 = a3 << 0x8\n 15375: a3 = a3 | a4\n 15378: a5 = a5 << 0x10\n 15381: a2 = a2 << 0x18\n 15384: a2 = a2 | a5\n 15387: a2 = a2 | a3\n 15390: a2 = a2 << 0x20\n 15393: a3 = a2 | a1\n 15396: a1 = u8 [a0 + 0x9]\n 15399: a2 = u8 [a0 + 0x8]\n 15402: a4 = u8 [a0 + 0xa]\n 15405: a5 = u8 [a0 + 0xb]\n 15408: a1 = a1 << 0x8\n 15411: a1 = a1 | a2\n 15414: a4 = a4 << 0x10\n 15417: a5 = a5 << 0x18\n 15420: a4 = a4 | a5\n 15423: a1 = a1 | a4\n 15426: a2 = u8 [a0 + 0xd]\n 15429: a4 = u8 [a0 + 0xc]\n 15432: a5 = u8 [a0 + 0xe]\n 15435: a0 = u8 [a0 + 0xf]\n 15438: a2 = a2 << 0x8\n 15441: a2 = a2 | a4\n 15444: a5 = a5 << 0x10\n 15447: a0 = a0 << 0x18\n 15450: a0 = a0 | a5\n 15453: a0 = a0 | a2\n 15456: a0 = a0 << 0x20\n 15459: a0 = a0 | a1\n 15462: a1 = reverse a0\n 15464: a0 = reverse a3\n 15466: a2 = reverse t1\n 15468: a3 = reverse t0\n 15470: a2 = a2 | a3\n 15473: a3 = a0 | a1\n 15476: a3 = a3 | a2\n 15479: a3 = a3 >> 0x20\n 15482: a1 = a1 | a2\n 15485: a1 = a1 << 0x20\n 15488: a1 = a1 | a3\n 15491: jump @244 if a1 == 0\n      : @241 (gas: 1)\n 15494: trap\n      : @242 (gas: 3)\n 15495: a0 = 0\n 15497: a1 = 0\n 15499: ra = 200, jump @0\n      : @243 [@dyn 100] (gas: 7)\n 15505: i32 a1 = a0 + 0\n 15507: a0 = 0x1\n 15510: a2 = 0\n 15512: ecalli 6 // 'seal_return'\n 15514: i32 a0 = a0 + 0\n 15516: ra = 0xca\n 15520: jump @0\n      : @244 (gas: 2)\n 15523: i32 a0 = a0 + 0\n 15525: ra = 202, jump @0\n      : @245 [@dyn 101] (gas: 6)\n 15531: i32 a1 = a0 + 0\n 15533: a0 = 0\n 15535: a2 = 0\n 15537: ra = 0xcc\n 15541: ecalli 6 // 'seal_return'\n 15543: fallthrough\n      : @246 [@dyn 102] (gas: 5)\n 15544: sp = sp + 0xfffffffffffffff8\n 15547: u64 [sp] = ra\n 15549: a0 = 0\n 15551: a1 = 0\n 15553: ra = 206, jump @0\n      : @247 [@dyn 103] (gas: 6)\n 15559: i32 a1 = a0 + 0\n 15561: a0 = 0x1\n 15564: a2 = 0\n 15566: ra = 0xd0\n 15570: ecalli 6 // 'seal_return'\n 15572: fallthrough\n      : @248 [@dyn 104] (gas: 5)\n 15573: u64 [a0 + 24] = 0\n 15576: u64 [a0 + 16] = 0\n 15579: u64 [a0 + 8] = 0\n 15582: u64 [a0 + 0] = 0\n 15584: ret\n      : @249 [@dyn 105] (gas: 58)\n 15586: a1 = reverse s1\n 15588: a2 = u64 [sp + 0x8]\n 15591: a2 = reverse a2\n 15593: a3 = u64 [sp + 0x10]\n 15596: a3 = reverse a3\n 15598: a4 = a3 >> 0x38\n 15601: u8 [a0 + 0x1f] = a4\n 15604: a4 = a3 >> 0x30\n 15607: u8 [a0 + 0x1e] = a4\n 15610: a4 = a3 >> 0x28\n 15613: u8 [a0 + 0x1d] = a4\n 15616: a4 = a3 >> 0x20\n 15619: u8 [a0 + 0x1c] = a4\n 15622: a4 = a3 >> 0x18\n 15625: u8 [a0 + 0x1b] = a4\n 15628: a4 = a3 >> 0x10\n 15631: u8 [a0 + 0x1a] = a4\n 15634: a4 = a3 >> 0x8\n 15637: u8 [a0 + 0x19] = a4\n 15640: u8 [a0 + 0x18] = a3\n 15643: a3 = a2 >> 0x38\n 15646: u8 [a0 + 0x17] = a3\n 15649: a3 = a2 >> 0x30\n 15652: u8 [a0 + 0x16] = a3\n 15655: a3 = a2 >> 0x28\n 15658: u8 [a0 + 0x15] = a3\n 15661: a3 = a2 >> 0x20\n 15664: u8 [a0 + 0x14] = a3\n 15667: a3 = a2 >> 0x18\n 15670: u8 [a0 + 0x13] = a3\n 15673: a3 = a2 >> 0x10\n 15676: u8 [a0 + 0x12] = a3\n 15679: a3 = a2 >> 0x8\n 15682: u8 [a0 + 0x11] = a3\n 15685: u8 [a0 + 0x10] = a2\n 15688: a2 = a1 >> 0x38\n 15691: u8 [a0 + 0xf] = a2\n 15694: a2 = a1 >> 0x30\n 15697: u8 [a0 + 0xe] = a2\n 15700: a2 = a1 >> 0x28\n 15703: u8 [a0 + 0xd] = a2\n 15706: a2 = a1 >> 0x20\n 15709: u8 [a0 + 0xc] = a2\n 15712: u8 [a0 + 11] = 0\n 15715: u8 [a0 + 10] = 0\n 15718: u8 [a0 + 9] = 0\n 15721: u8 [a0 + 0x8] = a1\n 15724: u8 [a0 + 7] = 0\n 15727: u8 [a0 + 6] = 0\n 15730: u8 [a0 + 5] = 0\n 15733: u8 [a0 + 4] = 0\n 15736: u8 [a0 + 3] = 0\n 15739: u8 [a0 + 2] = 0\n 15742: u8 [a0 + 1] = 0\n 15745: u8 [a0 + 0] = 0\n 15747: a0 = 0x20\n 15750: a1 = 0x20\n 15753: ra = 212, jump @0\n      : @250 [@dyn 106] (gas: 35)\n 15759: u8 [a0 + 31] = 0\n 15762: u8 [a0 + 30] = 0\n 15765: u8 [a0 + 29] = 0\n 15768: u8 [a0 + 28] = 0\n 15771: u8 [a0 + 27] = 0\n 15774: u8 [a0 + 26] = 0\n 15777: u8 [a0 + 25] = 0\n 15780: u8 [a0 + 24] = 0\n 15783: u8 [a0 + 23] = 0\n 15786: u8 [a0 + 22] = 0\n 15789: u8 [a0 + 21] = 0\n 15792: u8 [a0 + 20] = 0\n 15795: u8 [a0 + 19] = 0\n 15798: u8 [a0 + 18] = 0\n 15801: u8 [a0 + 17] = 0\n 15804: u8 [a0 + 16] = 0\n 15807: u8 [a0 + 15] = 0\n 15810: u8 [a0 + 14] = 0\n 15813: u8 [a0 + 13] = 0\n 15816: u8 [a0 + 12] = 0\n 15819: u8 [a0 + 11] = 0\n 15822: u8 [a0 + 10] = 0\n 15825: u8 [a0 + 9] = 0\n 15828: u8 [a0 + 8] = 0\n 15831: u8 [a0 + 7] = 0\n 15834: u8 [a0 + 6] = 0\n 15837: u8 [a0 + 5] = 0\n 15840: u8 [a0 + 4] = 0\n 15843: u8 [a0 + 3] = 0\n 15846: u8 [a0 + 2] = 0\n 15849: u8 [a0 + 1] = 0\n 15852: u8 [a0 + 0] = 0\n 15854: a1 = 0x40\n 15857: a0 = 0\n 15859: ra = 214, jump @0\n      : @251 [@dyn 107] (gas: 5)\n 15865: i32 a0 = a0 + 0\n 15867: i32 a2 = sp + 0xc0\n 15871: a1 = 0x40\n 15874: ecalli 5 // 'hash_keccak_256'\n 15876: fallthrough\n      : @252 (gas: 9)\n 15877: a4 = u64 [sp + 0x30]\n 15880: a5 = u64 [sp + 0x28]\n 15883: t1 = u64 [sp + 0x18]\n 15886: t0 = u64 [sp + 0x20]\n 15889: a0 = t1 | t0\n 15892: a1 = a5 <u 0x9\n 15895: a1 = 0 if a4 != 0\n 15897: a1 = 0 if a0 != 0\n 15899: jump @254 if a1 == 0\n      : @253 (gas: 68)\n 15903: a0 = u64 [sp + 0xc0]\n 15907: a1 = u64 [sp + 0xc8]\n 15911: a2 = u64 [sp + 0xd8]\n 15915: a3 = u64 [sp + 0xd0]\n 15919: a0 = reverse a0\n 15921: a1 = reverse a1\n 15923: a2 = reverse a2\n 15925: a3 = reverse a3\n 15927: a4 = a4 + a3\n 15930: a5 = a5 + a2\n 15933: a2 = a5 <u a2\n 15936: a4 = a4 + a2\n 15939: s1 = a4 ^ a3\n 15942: a3 = a4 <u a3\n 15945: a3 = a2 if s1 == 0\n 15948: a2 = a1 + t1\n 15951: a3 = a3 + a2\n 15954: s1 = a3 <u a2\n 15957: a1 = a2 <u a1\n 15960: a0 = a0 + t0\n 15963: a0 = a0 + a1\n 15966: a0 = a0 + s1\n 15969: u64 [sp + 0xa0] = a5\n 15973: u64 [sp + 0xa8] = a4\n 15977: u64 [sp + 0xb0] = a3\n 15981: u64 [sp + 0xb8] = a0\n 15985: u64 [sp + 216] = 0\n 15989: u64 [sp + 208] = 0\n 15993: u64 [sp + 200] = 0\n 15997: u64 [sp + 192] = 0\n 16001: u32 [sp + 224] = 0x20\n 16006: i32 a1 = sp + 0xa0\n 16010: i32 a3 = sp + 0xc0\n 16014: i32 a4 = sp + 0xe0\n 16018: a2 = 0xffffffffffffffff\n 16021: a0 = 0\n 16023: ecalli 4 // 'get_storage'\n 16025: a0 = u64 [sp + 0xd8]\n 16029: t0 = u64 [sp + 0xc0]\n 16033: a2 = u64 [sp + 0xd0]\n 16037: a3 = u64 [sp + 0xc8]\n 16041: a1 = u64 [sp + 0x38]\n 16044: a4 = a0 ^ a1\n 16047: s1 = a0 <u a1\n 16050: a0 = u64 [sp + 0x58]\n 16053: a5 = a2 <u a0\n 16056: a5 = s1 if a4 != 0\n 16059: a1 = u64 [sp + 0x40]\n 16062: s1 = a3 ^ a1\n 16065: a3 = a3 <u a1\n 16068: a1 = u64 [sp + 0x48]\n 16071: a1 = t0 <u a1\n 16074: a1 = a3 if s1 != 0\n 16077: a0 = a0 ^ a2\n 16080: a0 = a0 | a4\n 16083: a1 = a5 if a0 != 0\n 16086: a0 = a1 ^ 0x1\n 16089: a1 = u64 [sp + 0x50]\n 16092: u64 [a1 + 24] = 0\n 16095: u64 [a1 + 16] = 0\n 16098: u64 [a1 + 8] = 0\n 16101: u64 [a1] = a0\n 16103: sp = s0 + 0xffffffffffffff00\n 16107: ra = u64 [sp + 0xf8]\n 16111: s0 = u64 [sp + 0xf0]\n 16115: s1 = u64 [sp + 0xe8]\n 16119: sp = sp + 0x100\n 16123: ret\n      : @254 (gas: 8)\n 16125: u64 [sp + 144] = 0\n 16129: u64 [sp + 136] = 0\n 16133: u64 [sp + 128] = 0\n 16137: a0 = 0x4e487b7100000000\n 16147: a1 = sp + 0x80\n 16151: u64 [sp + 0x98] = a0\n 16155: a0 = 0\n 16157: ra = 216, jump @8\n      : @255 [@dyn 108] (gas: 7)\n 16163: u64 [sp + 120] = 0\n 16166: u64 [sp + 112] = 0\n 16169: u64 [sp + 96] = 0x32\n 16173: a0 = 0x4\n 16176: a1 = sp + 0x60\n 16179: u64 [sp + 104] = 0\n 16182: ra = 218, jump @8\n      : @256 [@dyn 109] (gas: 3)\n 16188: a1 = 0x24\n 16191: a0 = 0\n 16193: ra = 220, jump @0\n      : @257 [@dyn 110] (gas: 6)\n 16199: i32 a1 = a0 + 0\n 16201: a0 = 0x1\n 16204: a2 = 0x24\n 16207: ra = 0xde\n 16211: ecalli 6 // 'seal_return'\n 16213: fallthrough\n      : @258 [@dyn 111] (gas: 9)\n 16214: a2 = u64 [a1 + 0x18]\n 16217: a3 = u64 [a1 + 0x10]\n 16220: a4 = u64 [a1 + 0x8]\n 16223: a1 = u64 [a1]\n 16225: u64 [a0 + 0x18] = a2\n 16228: u64 [a0 + 0x10] = a3\n 16231: u64 [a0 + 0x8] = a4\n 16234: u64 [a0] = a1\n 16236: ret\n      : @259 (gas: 17)\n 16238: sp = sp + 0xffffffffffffffa0\n 16241: u64 [sp + 0x58] = ra\n 16244: u64 [sp + 0x50] = s0\n 16247: u64 [sp + 0x48] = s1\n 16250: a3 = u64 [a1 + 0x18]\n 16253: a4 = u64 [a1 + 0x10]\n 16256: a5 = u64 [a1 + 0x8]\n 16259: s1 = u64 [a1]\n 16261: a1 = a5 | a3\n 16264: a2 = s1 | a4\n 16267: a2 = a2 | a1\n 16270: a2 = a2 >> 0x20\n 16273: a1 = a1 | a4\n 16276: a1 = a1 << 0x20\n 16279: a1 = a1 | a2\n 16282: u64 [sp + 0x28] = a0\n 16285: jump @266 if a1 != 0\n      : @260 (gas: 19)\n 16289: a0 = s1 + 0x20\n 16292: u64 [sp + 0x30] = a0\n 16295: a0 = a0 <u s1\n 16298: a1 = a5 + a0\n 16301: u64 [sp + 0x40] = a1\n 16304: u64 [sp + 0x8] = a5\n 16307: s0 = a1 <u a5\n 16310: s0 = a0 if a0 == 0\n 16313: s0 = s0 + a4\n 16316: u64 [sp + 0x10] = a4\n 16319: a0 = s0 <u a4\n 16322: u64 [sp + 0x18] = a3\n 16325: a0 = a0 + a3\n 16328: u64 [sp + 0x38] = a0\n 16331: u64 [sp] = s1\n 16333: i32 a0 = s1 + 0\n 16335: a1 = 0x20\n 16338: s1 = 0x20\n 16341: ra = 224, jump @0\n      : @261 [@dyn 112] (gas: 45)\n 16347: u8 [a0 + 0x1f] = s1\n 16350: a1 = u64 [sp + 0x30]\n 16353: s1 = a1\n 16355: a1 = a1 | s0\n 16358: a2 = u64 [sp + 0x40]\n 16361: a4 = u64 [sp + 0x38]\n 16364: a2 = a2 | a4\n 16367: a1 = a1 | a2\n 16370: a1 = a1 >> 0x20\n 16373: u64 [sp + 0x20] = s0\n 16376: a2 = a2 | s0\n 16379: a2 = a2 << 0x20\n 16382: a1 = a1 | a2\n 16385: u8 [a0 + 30] = 0\n 16388: u8 [a0 + 29] = 0\n 16391: u8 [a0 + 28] = 0\n 16394: u8 [a0 + 27] = 0\n 16397: u8 [a0 + 26] = 0\n 16400: u8 [a0 + 25] = 0\n 16403: u8 [a0 + 24] = 0\n 16406: u8 [a0 + 23] = 0\n 16409: u8 [a0 + 22] = 0\n 16412: u8 [a0 + 21] = 0\n 16415: u8 [a0 + 20] = 0\n 16418: u8 [a0 + 19] = 0\n 16421: u8 [a0 + 18] = 0\n 16424: u8 [a0 + 17] = 0\n 16427: u8 [a0 + 16] = 0\n 16430: u8 [a0 + 15] = 0\n 16433: u8 [a0 + 14] = 0\n 16436: u8 [a0 + 13] = 0\n 16439: u8 [a0 + 12] = 0\n 16442: u8 [a0 + 11] = 0\n 16445: u8 [a0 + 10] = 0\n 16448: u8 [a0 + 9] = 0\n 16451: u8 [a0 + 8] = 0\n 16454: u8 [a0 + 7] = 0\n 16457: u8 [a0 + 6] = 0\n 16460: u8 [a0 + 5] = 0\n 16463: u8 [a0 + 4] = 0\n 16466: u8 [a0 + 3] = 0\n 16469: u8 [a0 + 2] = 0\n 16472: u8 [a0 + 1] = 0\n 16475: u8 [a0 + 0] = 0\n 16477: jump @266 if a1 != 0\n      : @262 (gas: 4)\n 16481: i32 s0 = s1 + 0\n 16483: a1 = 0x20\n 16486: a0 = s0\n 16488: ra = 226, jump @0\n      : @263 [@dyn 113] (gas: 41)\n 16494: u8 [a0 + 31] = 0x9\n 16498: u8 [a0 + 30] = 0\n 16501: u8 [a0 + 29] = 0\n 16504: u8 [a0 + 28] = 0\n 16507: u8 [a0 + 27] = 0\n 16510: u8 [a0 + 26] = 0\n 16513: u8 [a0 + 25] = 0\n 16516: u8 [a0 + 24] = 0\n 16519: u8 [a0 + 23] = 0\n 16522: u8 [a0 + 22] = 0\n 16525: u8 [a0 + 21] = 0\n 16528: u8 [a0 + 20] = 0\n 16531: u8 [a0 + 19] = 0\n 16534: u8 [a0 + 18] = 0\n 16537: u8 [a0 + 17] = 0\n 16540: u8 [a0 + 16] = 0\n 16543: u8 [a0 + 15] = 0\n 16546: u8 [a0 + 14] = 0\n 16549: u8 [a0 + 13] = 0\n 16552: u8 [a0 + 12] = 0\n 16555: u8 [a0 + 11] = 0\n 16558: u8 [a0 + 10] = 0\n 16561: u8 [a0 + 9] = 0\n 16564: u8 [a0 + 8] = 0\n 16567: u8 [a0 + 7] = 0\n 16570: u8 [a0 + 6] = 0\n 16573: u8 [a0 + 5] = 0\n 16576: u8 [a0 + 4] = 0\n 16579: u8 [a0 + 3] = 0\n 16582: u8 [a0 + 2] = 0\n 16585: u8 [a0 + 1] = 0\n 16588: a1 = u64 [sp + 0x20]\n 16591: a2 = u64 [sp + 0x38]\n 16594: a1 = a1 | a2\n 16597: a2 = 0xffffffe0\n 16607: a2 = s1 <u a2\n 16610: a3 = u64 [sp + 0x40]\n 16613: a2 = 0 if a3 != 0\n 16615: a2 = 0 if a1 != 0\n 16617: u8 [a0 + 0] = 0\n 16619: jump @266 if a2 == 0\n      : @264 (gas: 3)\n 16623: i32 a0 = s0 + 0x20\n 16626: a1 = 0x20\n 16629: ra = 228, jump @0\n      : @265 [@dyn 114] (gas: 54)\n 16635: u8 [a0 + 31] = 0\n 16638: u8 [a0 + 30] = 0\n 16641: u8 [a0 + 29] = 0\n 16644: u8 [a0 + 28] = 0\n 16647: u8 [a0 + 27] = 0\n 16650: u8 [a0 + 26] = 0\n 16653: u8 [a0 + 25] = 0\n 16656: u8 [a0 + 24] = 0\n 16659: u8 [a0 + 23] = 0\n 16662: u8 [a0 + 22] = 0\n 16665: u8 [a0 + 21] = 0\n 16668: u8 [a0 + 20] = 0\n 16671: u8 [a0 + 19] = 0\n 16674: u8 [a0 + 18] = 0\n 16677: u8 [a0 + 17] = 0\n 16680: u8 [a0 + 16] = 0\n 16683: u8 [a0 + 15] = 0\n 16686: u8 [a0 + 14] = 0\n 16689: u8 [a0 + 13] = 0\n 16692: u8 [a0 + 12] = 0\n 16695: u8 [a0 + 11] = 0\n 16698: u8 [a0 + 10] = 0\n 16701: u8 [a0 + 9] = 0\n 16704: u8 [a0 + 8] = 0x72\n 16708: u8 [a0 + 7] = 0x65\n 16712: u8 [a0 + 6] = 0x6e\n 16716: u8 [a0 + 5] = 0x77\n 16720: u8 [a0 + 4] = 0x6f\n 16724: u8 [a0 + 3] = 0x20\n 16728: u8 [a0 + 2] = 0x74\n 16732: u8 [a0 + 1] = 0x6f\n 16736: u8 [a0 + 0] = 0x4e\n 16739: a1 = u64 [sp]\n 16741: a0 = a1 + 0x60\n 16744: a1 = a0 <u a1\n 16747: a3 = u64 [sp + 0x8]\n 16750: a2 = a3 + a1\n 16753: a3 = a2 <u a3\n 16756: a3 = a1 if a1 == 0\n 16759: a1 = u64 [sp + 0x10]\n 16762: a3 = a3 + a1\n 16765: a1 = a3 <u a1\n 16768: a4 = u64 [sp + 0x18]\n 16771: a1 = a1 + a4\n 16774: a4 = u64 [sp + 0x28]\n 16777: u64 [a4] = a0\n 16779: u64 [a4 + 0x8] = a2\n 16782: u64 [a4 + 0x10] = a3\n 16785: u64 [a4 + 0x18] = a1\n 16788: ra = u64 [sp + 0x58]\n 16791: s0 = u64 [sp + 0x50]\n 16794: s1 = u64 [sp + 0x48]\n 16797: sp = sp + 0x60\n 16800: ret\n      : @266 (gas: 1)\n 16802: trap\n      : @267 (gas: 11)\n 16803: a0 = u32 [sp + 0xf0]\n 16807: a1 = u64 [sp + 0xe0]\n 16811: a2 = u64 [sp + 0xe8]\n 16815: a0 = a0 ^ s1\n 16818: a3 = u64 [sp + 0x30]\n 16821: a1 = a1 ^ a3\n 16824: a0 = a0 | a1\n 16827: a1 = u64 [sp + 0x38]\n 16830: a1 = a1 ^ a2\n 16833: a0 = a0 | a1\n 16836: jump @269 if a0 != 0\n      : @268 (gas: 44)\n 16840: s1 = u64 [sp + 0x18]\n 16843: s1 = s1 << 0x20\n 16846: s1 = s1 >> 0x20\n 16849: u64 [sp + 216] = 0\n 16853: u64 [sp + 208] = 0\n 16857: u64 [sp + 200] = 0\n 16861: u64 [sp + 192] = 0x2\n 16866: u64 [sp + 248] = 0\n 16870: u64 [sp + 240] = 0\n 16874: u64 [sp + 232] = 0\n 16878: u64 [sp + 224] = 0\n 16882: u32 [sp + 160] = 0x20\n 16887: i32 a1 = sp + 0xc0\n 16891: i32 a3 = sp + 0xe0\n 16895: i32 a4 = sp + 0xa0\n 16899: a2 = 0xffffffffffffffff\n 16902: a0 = 0\n 16904: ecalli 4 // 'get_storage'\n 16906: a0 = u32 [sp + 0xf4]\n 16910: a0 = a0 << 0x20\n 16913: a1 = u64 [sp + 0xf8]\n 16917: a0 = a0 | s1\n 16920: u64 [sp + 216] = 0\n 16924: u64 [sp + 208] = 0\n 16928: u64 [sp + 200] = 0\n 16932: u64 [sp + 192] = 0x2\n 16937: u64 [sp + 0xf8] = a1\n 16941: u64 [sp + 0xf0] = a0\n 16945: a0 = u64 [sp + 0x20]\n 16948: u64 [sp + 0xe8] = a0\n 16952: a0 = u64 [sp + 0x28]\n 16955: u64 [sp + 0xe0] = a0\n 16959: i32 a1 = sp + 0xc0\n 16963: i32 a3 = sp + 0xe0\n 16967: a2 = 0xffffffffffffffff\n 16970: a4 = 0x20\n 16973: a0 = 0\n 16975: ecalli 8 // 'set_storage'\n 16977: sp = s0 + 0xfffffffffffffee0\n 16981: ra = u64 [sp + 0x118]\n 16985: s0 = u64 [sp + 0x110]\n 16989: s1 = u64 [sp + 0x108]\n 16993: sp = sp + 0x120\n 16997: ret\n      : @269 (gas: 3)\n 16999: a0 = 0x40\n 17002: a1 = 0x20\n 17005: ra = 230, jump @0\n      : @270 [@dyn 115] (gas: 103)\n 17011: a1 = u8 [a0 + 0x11]\n 17014: a2 = u8 [a0 + 0x10]\n 17017: a3 = u8 [a0 + 0x12]\n 17020: a4 = u8 [a0 + 0x13]\n 17023: a1 = a1 << 0x8\n 17026: a1 = a1 | a2\n 17029: a3 = a3 << 0x10\n 17032: a4 = a4 << 0x18\n 17035: a3 = a3 | a4\n 17038: a1 = a1 | a3\n 17041: a2 = u8 [a0 + 0x15]\n 17044: a3 = u8 [a0 + 0x14]\n 17047: a4 = u8 [a0 + 0x16]\n 17050: a5 = u8 [a0 + 0x17]\n 17053: a2 = a2 << 0x8\n 17056: a2 = a2 | a3\n 17059: a4 = a4 << 0x10\n 17062: a5 = a5 << 0x18\n 17065: a4 = a4 | a5\n 17068: a2 = a2 | a4\n 17071: a2 = a2 << 0x20\n 17074: t0 = a2 | a1\n 17077: a2 = u8 [a0 + 0x1]\n 17080: a3 = u8 [a0]\n 17082: a4 = u8 [a0 + 0x2]\n 17085: a5 = u8 [a0 + 0x3]\n 17088: a2 = a2 << 0x8\n 17091: a2 = a2 | a3\n 17094: a4 = a4 << 0x10\n 17097: a5 = a5 << 0x18\n 17100: a4 = a4 | a5\n 17103: a2 = a2 | a4\n 17106: a3 = u8 [a0 + 0x5]\n 17109: a4 = u8 [a0 + 0x4]\n 17112: a5 = u8 [a0 + 0x6]\n 17115: s1 = u8 [a0 + 0x7]\n 17118: a3 = a3 << 0x8\n 17121: a3 = a3 | a4\n 17124: a5 = a5 << 0x10\n 17127: s1 = s1 << 0x18\n 17130: a5 = a5 | s1\n 17133: a3 = a3 | a5\n 17136: a3 = a3 << 0x20\n 17139: a2 = a2 | a3\n 17142: a3 = u8 [a0 + 0x19]\n 17145: a4 = u8 [a0 + 0x18]\n 17148: a5 = u8 [a0 + 0x1a]\n 17151: s1 = u8 [a0 + 0x1b]\n 17154: a3 = a3 << 0x8\n 17157: a3 = a3 | a4\n 17160: a5 = a5 << 0x10\n 17163: s1 = s1 << 0x18\n 17166: a5 = a5 | s1\n 17169: a3 = a3 | a5\n 17172: a4 = u8 [a0 + 0x1d]\n 17175: a5 = u8 [a0 + 0x1c]\n 17178: s1 = u8 [a0 + 0x1e]\n 17181: a1 = u8 [a0 + 0x1f]\n 17184: a4 = a4 << 0x8\n 17187: a4 = a4 | a5\n 17190: s1 = s1 << 0x10\n 17193: a1 = a1 << 0x18\n 17196: a1 = a1 | s1\n 17199: a1 = a1 | a4\n 17202: a1 = a1 << 0x20\n 17205: a3 = a3 | a1\n 17208: a1 = u8 [a0 + 0x9]\n 17211: a4 = u8 [a0 + 0x8]\n 17214: a5 = u8 [a0 + 0xa]\n 17217: s1 = u8 [a0 + 0xb]\n 17220: a1 = a1 << 0x8\n 17223: a1 = a1 | a4\n 17226: a5 = a5 << 0x10\n 17229: s1 = s1 << 0x18\n 17232: a5 = a5 | s1\n 17235: a1 = a1 | a5\n 17238: a4 = u8 [a0 + 0xd]\n 17241: a5 = u8 [a0 + 0xc]\n 17244: s1 = u8 [a0 + 0xe]\n 17247: a0 = u8 [a0 + 0xf]\n 17250: a4 = a4 << 0x8\n 17253: a4 = a4 | a5\n 17256: s1 = s1 << 0x10\n 17259: a0 = a0 << 0x18\n 17262: a0 = a0 | s1\n 17265: a0 = a0 | a4\n 17268: a0 = a0 << 0x20\n 17271: a0 = a0 | a1\n 17274: s1 = reverse a0\n 17276: a1 = reverse a3\n 17278: a2 = reverse a2\n 17280: a0 = reverse t0\n 17282: u64 [sp + 0x38] = a0\n 17285: u64 [sp + 0x30] = a2\n 17288: a0 = a0 | a2\n 17291: a2 = a1\n 17293: a1 = a1 | s1\n 17296: a1 = a1 | a0\n 17299: a1 = a1 >> 0x20\n 17302: a0 = a0 | s1\n 17305: a0 = a0 << 0x20\n 17308: a0 = a0 | a1\n 17311: jump @274 if a0 != 0\n      : @271 (gas: 5)\n 17315: u64 [sp + 0x28] = a2\n 17318: i32 a0 = a2 + 0\n 17320: a1 = 0x20\n 17323: u64 [sp + 0x20] = a0\n 17326: ra = 232, jump @0\n      : @272 [@dyn 116] (gas: 50)\n 17332: u8 [a0 + 31] = 0\n 17335: u8 [a0 + 30] = 0\n 17338: u8 [a0 + 29] = 0\n 17341: u8 [a0 + 28] = 0\n 17344: u8 [a0 + 27] = 0\n 17347: u8 [a0 + 26] = 0\n 17350: u8 [a0 + 25] = 0\n 17353: u8 [a0 + 24] = 0\n 17356: u8 [a0 + 23] = 0\n 17359: u8 [a0 + 22] = 0\n 17362: u8 [a0 + 21] = 0\n 17365: u8 [a0 + 20] = 0\n 17368: u8 [a0 + 19] = 0\n 17371: u8 [a0 + 18] = 0\n 17374: u8 [a0 + 17] = 0\n 17377: u8 [a0 + 16] = 0\n 17380: u8 [a0 + 15] = 0\n 17383: u8 [a0 + 14] = 0\n 17386: u8 [a0 + 13] = 0\n 17389: u8 [a0 + 12] = 0\n 17392: u8 [a0 + 11] = 0\n 17395: u8 [a0 + 10] = 0\n 17398: u8 [a0 + 9] = 0\n 17401: u8 [a0 + 8] = 0\n 17404: u8 [a0 + 7] = 0\n 17407: u8 [a0 + 6] = 0\n 17410: u8 [a0 + 5] = 0\n 17413: u8 [a0 + 4] = 0\n 17416: u8 [a0 + 3] = 0xa0\n 17421: u8 [a0 + 2] = 0x79\n 17425: u8 [a0 + 1] = 0xc3\n 17430: u8 [a0 + 0] = 0x8\n 17433: a1 = u64 [sp + 0x28]\n 17436: a0 = a1 + 0x4\n 17439: a1 = a0 <u a1\n 17442: a3 = u64 [sp + 0x38]\n 17445: a2 = a3 + a1\n 17448: a3 = a2 <u a3\n 17451: a3 = a1 if a1 == 0\n 17454: a3 = a3 + s1\n 17457: a1 = a3 <u s1\n 17460: a4 = u64 [sp + 0x30]\n 17463: a4 = a4 + a1\n 17466: u64 [sp + 0x48] = a2\n 17469: u64 [sp + 0x40] = a0\n 17472: u64 [sp + 0x50] = a3\n 17475: a0 = sp + 0x60\n 17478: a1 = sp + 0x40\n 17481: u64 [sp + 0x58] = a4\n 17484: ra = 234, jump @259\n      : @273 [@dyn 117] (gas: 30)\n 17490: a0 = u64 [sp + 0x68]\n 17493: t0 = u64 [sp + 0x78]\n 17496: t1 = u64 [sp + 0x60]\n 17499: a3 = u64 [sp + 0x70]\n 17502: a1 = u64 [sp + 0x38]\n 17505: a4 = a0 ^ a1\n 17508: a5 = a0 <u a1\n 17511: t2 = a1\n 17513: a2 = u64 [sp + 0x28]\n 17516: a1 = t1 <u a2\n 17519: a5 = a1 if a4 == 0\n 17522: a4 = a3 - s1\n 17525: a3 = a3 <u s1\n 17528: s1 = u64 [sp + 0x30]\n 17531: s1 = t0 - s1\n 17534: s1 = s1 - a3\n 17537: a3 = a4 <u a5\n 17540: s1 = s1 - a3\n 17543: a4 = a4 - a5\n 17546: a0 = a0 - t2\n 17549: a1 = a0 - a1\n 17552: a0 = t1 - a2\n 17555: a1 = a1 | s1\n 17558: a2 = a0 | a4\n 17561: a2 = a2 | a1\n 17564: a1 = a1 | a4\n 17567: a2 = a2 >> 0x20\n 17570: a1 = a1 << 0x20\n 17573: a1 = a1 | a2\n 17576: jump @275 if a1 == 0\n      : @274 (gas: 1)\n 17579: trap\n      : @275 (gas: 4)\n 17580: i32 s1 = a0 + 0\n 17582: a0 = u64 [sp + 0x20]\n 17585: a1 = s1\n 17587: ra = 236, jump @0\n      : @276 [@dyn 118] (gas: 6)\n 17593: i32 a1 = a0 + 0\n 17595: a0 = 0x1\n 17598: a2 = s1\n 17600: ra = 0xee\n 17604: ecalli 6 // 'seal_return'\n 17606: fallthrough\n      : @277 [@dyn 119] (gas: 9)\n 17607: a2 = u64 [a1 + 0x18]\n 17610: a3 = u64 [a1 + 0x10]\n 17613: a4 = u64 [a1 + 0x8]\n 17616: a1 = u64 [a1]\n 17618: u64 [a0 + 0x18] = a2\n 17621: u64 [a0 + 0x10] = a3\n 17624: u64 [a0 + 0x8] = a4\n 17627: u64 [a0] = a1\n 17629: ret\n      : @278 (gas: 17)\n 17631: sp = sp + 0xffffffffffffffa0\n 17634: u64 [sp + 0x58] = ra\n 17637: u64 [sp + 0x50] = s0\n 17640: u64 [sp + 0x48] = s1\n 17643: a3 = u64 [a1 + 0x18]\n 17646: a4 = u64 [a1 + 0x10]\n 17649: a5 = u64 [a1 + 0x8]\n 17652: s1 = u64 [a1]\n 17654: a1 = a5 | a3\n 17657: a2 = s1 | a4\n 17660: a2 = a2 | a1\n 17663: a2 = a2 >> 0x20\n 17666: a1 = a1 | a4\n 17669: a1 = a1 << 0x20\n 17672: a1 = a1 | a2\n 17675: u64 [sp + 0x28] = a0\n 17678: jump @285 if a1 != 0\n      : @279 (gas: 19)\n 17682: a0 = s1 + 0x20\n 17685: u64 [sp + 0x30] = a0\n 17688: a0 = a0 <u s1\n 17691: a1 = a5 + a0\n 17694: u64 [sp + 0x40] = a1\n 17697: u64 [sp + 0x8] = a5\n 17700: s0 = a1 <u a5\n 17703: s0 = a0 if a0 == 0\n 17706: s0 = s0 + a4\n 17709: u64 [sp + 0x10] = a4\n 17712: a0 = s0 <u a4\n 17715: u64 [sp + 0x18] = a3\n 17718: a0 = a0 + a3\n 17721: u64 [sp + 0x38] = a0\n 17724: u64 [sp] = s1\n 17726: i32 a0 = s1 + 0\n 17728: a1 = 0x20\n 17731: s1 = 0x20\n 17734: ra = 240, jump @0\n      : @280 [@dyn 120] (gas: 45)\n 17740: u8 [a0 + 0x1f] = s1\n 17743: a1 = u64 [sp + 0x30]\n 17746: s1 = a1\n 17748: a1 = a1 | s0\n 17751: a2 = u64 [sp + 0x40]\n 17754: a4 = u64 [sp + 0x38]\n 17757: a2 = a2 | a4\n 17760: a1 = a1 | a2\n 17763: a1 = a1 >> 0x20\n 17766: u64 [sp + 0x20] = s0\n 17769: a2 = a2 | s0\n 17772: a2 = a2 << 0x20\n 17775: a1 = a1 | a2\n 17778: u8 [a0 + 30] = 0\n 17781: u8 [a0 + 29] = 0\n 17784: u8 [a0 + 28] = 0\n 17787: u8 [a0 + 27] = 0\n 17790: u8 [a0 + 26] = 0\n 17793: u8 [a0 + 25] = 0\n 17796: u8 [a0 + 24] = 0\n 17799: u8 [a0 + 23] = 0\n 17802: u8 [a0 + 22] = 0\n 17805: u8 [a0 + 21] = 0\n 17808: u8 [a0 + 20] = 0\n 17811: u8 [a0 + 19] = 0\n 17814: u8 [a0 + 18] = 0\n 17817: u8 [a0 + 17] = 0\n 17820: u8 [a0 + 16] = 0\n 17823: u8 [a0 + 15] = 0\n 17826: u8 [a0 + 14] = 0\n 17829: u8 [a0 + 13] = 0\n 17832: u8 [a0 + 12] = 0\n 17835: u8 [a0 + 11] = 0\n 17838: u8 [a0 + 10] = 0\n 17841: u8 [a0 + 9] = 0\n 17844: u8 [a0 + 8] = 0\n 17847: u8 [a0 + 7] = 0\n 17850: u8 [a0 + 6] = 0\n 17853: u8 [a0 + 5] = 0\n 17856: u8 [a0 + 4] = 0\n 17859: u8 [a0 + 3] = 0\n 17862: u8 [a0 + 2] = 0\n 17865: u8 [a0 + 1] = 0\n 17868: u8 [a0 + 0] = 0\n 17870: jump @285 if a1 != 0\n      : @281 (gas: 4)\n 17874: i32 s0 = s1 + 0\n 17876: a1 = 0x20\n 17879: a0 = s0\n 17881: ra = 242, jump @0\n      : @282 [@dyn 121] (gas: 41)\n 17887: u8 [a0 + 31] = 0xf\n 17891: u8 [a0 + 30] = 0\n 17894: u8 [a0 + 29] = 0\n 17897: u8 [a0 + 28] = 0\n 17900: u8 [a0 + 27] = 0\n 17903: u8 [a0 + 26] = 0\n 17906: u8 [a0 + 25] = 0\n 17909: u8 [a0 + 24] = 0\n 17912: u8 [a0 + 23] = 0\n 17915: u8 [a0 + 22] = 0\n 17918: u8 [a0 + 21] = 0\n 17921: u8 [a0 + 20] = 0\n 17924: u8 [a0 + 19] = 0\n 17927: u8 [a0 + 18] = 0\n 17930: u8 [a0 + 17] = 0\n 17933: u8 [a0 + 16] = 0\n 17936: u8 [a0 + 15] = 0\n 17939: u8 [a0 + 14] = 0\n 17942: u8 [a0 + 13] = 0\n 17945: u8 [a0 + 12] = 0\n 17948: u8 [a0 + 11] = 0\n 17951: u8 [a0 + 10] = 0\n 17954: u8 [a0 + 9] = 0\n 17957: u8 [a0 + 8] = 0\n 17960: u8 [a0 + 7] = 0\n 17963: u8 [a0 + 6] = 0\n 17966: u8 [a0 + 5] = 0\n 17969: u8 [a0 + 4] = 0\n 17972: u8 [a0 + 3] = 0\n 17975: u8 [a0 + 2] = 0\n 17978: u8 [a0 + 1] = 0\n 17981: a1 = u64 [sp + 0x20]\n 17984: a2 = u64 [sp + 0x38]\n 17987: a1 = a1 | a2\n 17990: a2 = 0xffffffe0\n 18000: a2 = s1 <u a2\n 18003: a3 = u64 [sp + 0x40]\n 18006: a2 = 0 if a3 != 0\n 18008: a2 = 0 if a1 != 0\n 18010: u8 [a0 + 0] = 0\n 18012: jump @285 if a2 == 0\n      : @283 (gas: 3)\n 18016: i32 a0 = s0 + 0x20\n 18019: a1 = 0x20\n 18022: ra = 244, jump @0\n      : @284 [@dyn 122] (gas: 55)\n 18028: u8 [a0 + 31] = 0\n 18031: u8 [a0 + 30] = 0\n 18034: u8 [a0 + 29] = 0\n 18037: u8 [a0 + 28] = 0\n 18040: u8 [a0 + 27] = 0\n 18043: u8 [a0 + 26] = 0\n 18046: u8 [a0 + 25] = 0\n 18049: u8 [a0 + 24] = 0\n 18052: u8 [a0 + 23] = 0\n 18055: u8 [a0 + 22] = 0\n 18058: u8 [a0 + 21] = 0\n 18061: u8 [a0 + 20] = 0\n 18064: u8 [a0 + 19] = 0\n 18067: u8 [a0 + 18] = 0\n 18070: u8 [a0 + 17] = 0\n 18073: u8 [a0 + 16] = 0\n 18076: u8 [a0 + 15] = 0\n 18079: u8 [a0 + 14] = 0x44\n 18083: u8 [a0 + 13] = 0x49\n 18087: a5 = 0x20\n 18090: u8 [a0 + 0xc] = a5\n 18093: u8 [a0 + 11] = 0x64\n 18097: u8 [a0 + 10] = 0x72\n 18101: u8 [a0 + 9] = 0x61\n 18105: u8 [a0 + 8] = 0x63\n 18109: u8 [a0 + 0x7] = a5\n 18112: u8 [a0 + 6] = 0x64\n 18116: u8 [a0 + 5] = 0x69\n 18120: u8 [a0 + 4] = 0x6c\n 18124: u8 [a0 + 3] = 0x61\n 18128: u8 [a0 + 2] = 0x76\n 18132: u8 [a0 + 1] = 0x6e\n 18136: u8 [a0 + 0] = 0x49\n 18139: a1 = u64 [sp]\n 18141: a0 = a1 + 0x60\n 18144: a1 = a0 <u a1\n 18147: a3 = u64 [sp + 0x8]\n 18150: a2 = a3 + a1\n 18153: a3 = a2 <u a3\n 18156: a3 = a1 if a1 == 0\n 18159: a1 = u64 [sp + 0x10]\n 18162: a3 = a3 + a1\n 18165: a1 = a3 <u a1\n 18168: a4 = u64 [sp + 0x18]\n 18171: a1 = a1 + a4\n 18174: a4 = u64 [sp + 0x28]\n 18177: u64 [a4] = a0\n 18179: u64 [a4 + 0x8] = a2\n 18182: u64 [a4 + 0x10] = a3\n 18185: u64 [a4 + 0x18] = a1\n 18188: ra = u64 [sp + 0x58]\n 18191: s0 = u64 [sp + 0x50]\n 18194: s1 = u64 [sp + 0x48]\n 18197: sp = sp + 0x60\n 18200: ret\n      : @285 (gas: 1)\n 18202: trap\n      : @286 (gas: 17)\n 18203: sp = sp + 0xffffffffffffffa0\n 18206: u64 [sp + 0x58] = ra\n 18209: u64 [sp + 0x50] = s0\n 18212: u64 [sp + 0x48] = s1\n 18215: a3 = u64 [a1 + 0x18]\n 18218: a4 = u64 [a1 + 0x10]\n 18221: a5 = u64 [a1 + 0x8]\n 18224: s1 = u64 [a1]\n 18226: a1 = a5 | a3\n 18229: a2 = s1 | a4\n 18232: a2 = a2 | a1\n 18235: a2 = a2 >> 0x20\n 18238: a1 = a1 | a4\n 18241: a1 = a1 << 0x20\n 18244: a1 = a1 | a2\n 18247: u64 [sp + 0x28] = a0\n 18250: jump @293 if a1 != 0\n      : @287 (gas: 19)\n 18254: a0 = s1 + 0x20\n 18257: u64 [sp + 0x30] = a0\n 18260: a0 = a0 <u s1\n 18263: a1 = a5 + a0\n 18266: u64 [sp + 0x40] = a1\n 18269: u64 [sp + 0x8] = a5\n 18272: s0 = a1 <u a5\n 18275: s0 = a0 if a0 == 0\n 18278: s0 = s0 + a4\n 18281: u64 [sp + 0x10] = a4\n 18284: a0 = s0 <u a4\n 18287: u64 [sp + 0x18] = a3\n 18290: a0 = a0 + a3\n 18293: u64 [sp + 0x38] = a0\n 18296: u64 [sp] = s1\n 18298: i32 a0 = s1 + 0\n 18300: a1 = 0x20\n 18303: s1 = 0x20\n 18306: ra = 246, jump @0\n      : @288 [@dyn 123] (gas: 45)\n 18312: u8 [a0 + 0x1f] = s1\n 18315: a1 = u64 [sp + 0x30]\n 18318: s1 = a1\n 18320: a1 = a1 | s0\n 18323: a2 = u64 [sp + 0x40]\n 18326: a4 = u64 [sp + 0x38]\n 18329: a2 = a2 | a4\n 18332: a1 = a1 | a2\n 18335: a1 = a1 >> 0x20\n 18338: u64 [sp + 0x20] = s0\n 18341: a2 = a2 | s0\n 18344: a2 = a2 << 0x20\n 18347: a1 = a1 | a2\n 18350: u8 [a0 + 30] = 0\n 18353: u8 [a0 + 29] = 0\n 18356: u8 [a0 + 28] = 0\n 18359: u8 [a0 + 27] = 0\n 18362: u8 [a0 + 26] = 0\n 18365: u8 [a0 + 25] = 0\n 18368: u8 [a0 + 24] = 0\n 18371: u8 [a0 + 23] = 0\n 18374: u8 [a0 + 22] = 0\n 18377: u8 [a0 + 21] = 0\n 18380: u8 [a0 + 20] = 0\n 18383: u8 [a0 + 19] = 0\n 18386: u8 [a0 + 18] = 0\n 18389: u8 [a0 + 17] = 0\n 18392: u8 [a0 + 16] = 0\n 18395: u8 [a0 + 15] = 0\n 18398: u8 [a0 + 14] = 0\n 18401: u8 [a0 + 13] = 0\n 18404: u8 [a0 + 12] = 0\n 18407: u8 [a0 + 11] = 0\n 18410: u8 [a0 + 10] = 0\n 18413: u8 [a0 + 9] = 0\n 18416: u8 [a0 + 8] = 0\n 18419: u8 [a0 + 7] = 0\n 18422: u8 [a0 + 6] = 0\n 18425: u8 [a0 + 5] = 0\n 18428: u8 [a0 + 4] = 0\n 18431: u8 [a0 + 3] = 0\n 18434: u8 [a0 + 2] = 0\n 18437: u8 [a0 + 1] = 0\n 18440: u8 [a0 + 0] = 0\n 18442: jump @293 if a1 != 0\n      : @289 (gas: 4)\n 18446: i32 s0 = s1 + 0\n 18448: a1 = 0x20\n 18451: a0 = s0\n 18453: ra = 248, jump @0\n      : @290 [@dyn 124] (gas: 41)\n 18459: u8 [a0 + 31] = 0x10\n 18463: u8 [a0 + 30] = 0\n 18466: u8 [a0 + 29] = 0\n 18469: u8 [a0 + 28] = 0\n 18472: u8 [a0 + 27] = 0\n 18475: u8 [a0 + 26] = 0\n 18478: u8 [a0 + 25] = 0\n 18481: u8 [a0 + 24] = 0\n 18484: u8 [a0 + 23] = 0\n 18487: u8 [a0 + 22] = 0\n 18490: u8 [a0 + 21] = 0\n 18493: u8 [a0 + 20] = 0\n 18496: u8 [a0 + 19] = 0\n 18499: u8 [a0 + 18] = 0\n 18502: u8 [a0 + 17] = 0\n 18505: u8 [a0 + 16] = 0\n 18508: u8 [a0 + 15] = 0\n 18511: u8 [a0 + 14] = 0\n 18514: u8 [a0 + 13] = 0\n 18517: u8 [a0 + 12] = 0\n 18520: u8 [a0 + 11] = 0\n 18523: u8 [a0 + 10] = 0\n 18526: u8 [a0 + 9] = 0\n 18529: u8 [a0 + 8] = 0\n 18532: u8 [a0 + 7] = 0\n 18535: u8 [a0 + 6] = 0\n 18538: u8 [a0 + 5] = 0\n 18541: u8 [a0 + 4] = 0\n 18544: u8 [a0 + 3] = 0\n 18547: u8 [a0 + 2] = 0\n 18550: u8 [a0 + 1] = 0\n 18553: a1 = u64 [sp + 0x20]\n 18556: a2 = u64 [sp + 0x38]\n 18559: a1 = a1 | a2\n 18562: a2 = 0xffffffe0\n 18572: a2 = s1 <u a2\n 18575: a3 = u64 [sp + 0x40]\n 18578: a2 = 0 if a3 != 0\n 18580: a2 = 0 if a1 != 0\n 18582: u8 [a0 + 0] = 0\n 18584: jump @293 if a2 == 0\n      : @291 (gas: 3)\n 18588: i32 a0 = s0 + 0x20\n 18591: a1 = 0x20\n 18594: ra = 250, jump @0\n      : @292 [@dyn 125] (gas: 54)\n 18600: u8 [a0 + 31] = 0\n 18603: u8 [a0 + 30] = 0\n 18606: u8 [a0 + 29] = 0\n 18609: u8 [a0 + 28] = 0\n 18612: u8 [a0 + 27] = 0\n 18615: u8 [a0 + 26] = 0\n 18618: u8 [a0 + 25] = 0\n 18621: u8 [a0 + 24] = 0\n 18624: u8 [a0 + 23] = 0\n 18627: u8 [a0 + 22] = 0\n 18630: u8 [a0 + 21] = 0\n 18633: u8 [a0 + 20] = 0\n 18636: u8 [a0 + 19] = 0\n 18639: u8 [a0 + 18] = 0\n 18642: u8 [a0 + 17] = 0\n 18645: u8 [a0 + 16] = 0\n 18648: u8 [a0 + 15] = 0x73\n 18652: u8 [a0 + 14] = 0x64\n 18656: u8 [a0 + 13] = 0x72\n 18660: u8 [a0 + 12] = 0x61\n 18664: u8 [a0 + 11] = 0x63\n 18668: u8 [a0 + 10] = 0x20\n 18672: u8 [a0 + 9] = 0x68\n 18676: u8 [a0 + 8] = 0x67\n 18680: u8 [a0 + 7] = 0x75\n 18684: u8 [a0 + 6] = 0x6f\n 18688: u8 [a0 + 5] = 0x6e\n 18692: u8 [a0 + 4] = 0x65\n 18696: u8 [a0 + 3] = 0x20\n 18700: u8 [a0 + 2] = 0x74\n 18704: u8 [a0 + 1] = 0x6f\n 18708: u8 [a0 + 0] = 0x4e\n 18711: a1 = u64 [sp]\n 18713: a0 = a1 + 0x60\n 18716: a1 = a0 <u a1\n 18719: a3 = u64 [sp + 0x8]\n 18722: a2 = a3 + a1\n 18725: a3 = a2 <u a3\n 18728: a3 = a1 if a1 == 0\n 18731: a1 = u64 [sp + 0x10]\n 18734: a3 = a3 + a1\n 18737: a1 = a3 <u a1\n 18740: a4 = u64 [sp + 0x18]\n 18743: a1 = a1 + a4\n 18746: a4 = u64 [sp + 0x28]\n 18749: u64 [a4] = a0\n 18751: u64 [a4 + 0x8] = a2\n 18754: u64 [a4 + 0x10] = a3\n 18757: u64 [a4 + 0x18] = a1\n 18760: ra = u64 [sp + 0x58]\n 18763: s0 = u64 [sp + 0x50]\n 18766: s1 = u64 [sp + 0x48]\n 18769: sp = sp + 0x60\n 18772: ret\n      : @293 (gas: 1)\n 18774: trap\n      : @294 (gas: 19)\n 18775: sp = sp + 0xfffffffffffffd80\n 18779: u64 [sp + 0x278] = ra\n 18783: u64 [sp + 0x270] = s0\n 18787: u64 [sp + 0x268] = s1\n 18791: s0 = sp + 0x280\n 18795: sp = sp & 0xffffffffffffffe0\n 18798: a4 = u64 [a2 + 0x18]\n 18801: a5 = u64 [a2 + 0x10]\n 18804: s1 = u64 [a2]\n 18806: a2 = u64 [a2 + 0x8]\n 18809: u64 [sp + 0xd8] = a4\n 18813: u64 [sp + 0xd0] = a5\n 18817: a5 = a5 | a4\n 18820: u64 [sp + 0xc8] = s1\n 18824: a4 = s1 <u 0x9\n 18827: u64 [sp + 0xc0] = a2\n 18831: a4 = 0 if a2 != 0\n 18833: a4 = 0 if a5 != 0\n 18835: jump @311 if a4 == 0\n      : @295 (gas: 24)\n 18839: a2 = u64 [a3 + 0x18]\n 18842: u64 [sp + 0xf8] = a2\n 18846: a2 = u64 [a3 + 0x10]\n 18849: u64 [sp + 0xf0] = a2\n 18853: a2 = u64 [a3 + 0x8]\n 18856: u64 [sp + 0xe0] = a2\n 18860: a2 = u64 [a3]\n 18862: u64 [sp + 0xe8] = a2\n 18866: a2 = u64 [a1 + 0x10]\n 18869: u64 [sp + 0xa0] = a2\n 18873: a2 = u64 [a1 + 0x8]\n 18876: u64 [sp + 0x98] = a2\n 18880: a1 = u64 [a1]\n 18882: u64 [sp + 0x90] = a1\n 18886: a1 = u64 [a0 + 0x10]\n 18889: a2 = u64 [a0 + 0x8]\n 18892: u64 [sp + 0xb0] = a2\n 18896: a0 = u64 [a0]\n 18898: u64 [sp + 0xb8] = a0\n 18902: a1 = a1 << 0x20\n 18905: s1 = a1 >> 0x20\n 18908: a1 = 0x20\n 18911: a0 = 0\n 18913: ra = 252, jump @0\n      : @296 [@dyn 126] (gas: 79)\n 18919: a3 = reverse s1\n 18921: a1 = u64 [sp + 0xb0]\n 18925: a4 = reverse a1\n 18927: a1 = u64 [sp + 0xb8]\n 18931: a2 = reverse a1\n 18933: a1 = a2 >> 0x38\n 18936: u64 [sp + 0xb8] = a1\n 18940: u8 [a0 + 0x1f] = a1\n 18943: a1 = a2 >> 0x30\n 18946: u64 [sp + 0xb0] = a1\n 18950: u8 [a0 + 0x1e] = a1\n 18953: a1 = a2 >> 0x28\n 18956: u64 [sp + 0xa8] = a1\n 18960: u8 [a0 + 0x1d] = a1\n 18963: a1 = a2 >> 0x20\n 18966: u64 [sp + 0x88] = a1\n 18970: u8 [a0 + 0x1c] = a1\n 18973: a1 = a2 >> 0x18\n 18976: u64 [sp + 0x80] = a1\n 18980: u8 [a0 + 0x1b] = a1\n 18983: a1 = a2 >> 0x10\n 18986: u64 [sp + 0x78] = a1\n 18989: u8 [a0 + 0x1a] = a1\n 18992: a1 = a2 >> 0x8\n 18995: u64 [sp + 0x70] = a1\n 18998: u8 [a0 + 0x19] = a1\n 19001: u64 [sp + 0x68] = a2\n 19004: u8 [a0 + 0x18] = a2\n 19007: u8 [a0 + 0x10] = a4\n 19010: u8 [a0 + 11] = 0\n 19013: u8 [a0 + 10] = 0\n 19016: u8 [a0 + 9] = 0\n 19019: u8 [a0 + 7] = 0\n 19022: u8 [a0 + 6] = 0\n 19025: u8 [a0 + 5] = 0\n 19028: u8 [a0 + 4] = 0\n 19031: u8 [a0 + 3] = 0\n 19034: u8 [a0 + 2] = 0\n 19037: u8 [a0 + 1] = 0\n 19040: u8 [a0 + 0] = 0\n 19042: a1 = a4 >> 0x38\n 19045: u64 [sp + 0x50] = a1\n 19048: u8 [a0 + 0x17] = a1\n 19051: a1 = a4 >> 0x30\n 19054: u64 [sp + 0x48] = a1\n 19057: u8 [a0 + 0x16] = a1\n 19060: a1 = a4 >> 0x28\n 19063: u64 [sp + 0x40] = a1\n 19066: u8 [a0 + 0x15] = a1\n 19069: a1 = a4 >> 0x20\n 19072: u64 [sp + 0x38] = a1\n 19075: u8 [a0 + 0x14] = a1\n 19078: a1 = a4 >> 0x18\n 19081: u64 [sp + 0x30] = a1\n 19084: u8 [a0 + 0x13] = a1\n 19087: a1 = a4 >> 0x10\n 19090: u64 [sp + 0x28] = a1\n 19093: u8 [a0 + 0x12] = a1\n 19096: u64 [sp + 0x58] = a4\n 19099: a4 = a4 >> 0x8\n 19102: u64 [sp + 0x20] = a4\n 19105: u8 [a0 + 0x11] = a4\n 19108: u8 [a0 + 0x8] = a3\n 19111: a1 = a3 >> 0x38\n 19114: u64 [sp + 0x18] = a1\n 19117: u8 [a0 + 0xf] = a1\n 19120: a1 = a3 >> 0x30\n 19123: u64 [sp + 0x10] = a1\n 19126: u8 [a0 + 0xe] = a1\n 19129: a1 = a3 >> 0x28\n 19132: u64 [sp + 0x8] = a1\n 19135: u8 [a0 + 0xd] = a1\n 19138: u64 [sp + 0x60] = a3\n 19141: a3 = a3 >> 0x20\n 19144: u64 [sp] = a3\n 19146: u8 [a0 + 0xc] = a3\n 19149: a0 = 0x20\n 19152: a1 = 0x20\n 19155: ra = 254, jump @0\n      : @297 [@dyn 127] (gas: 35)\n 19161: u8 [a0 + 31] = 0\n 19164: u8 [a0 + 30] = 0\n 19167: u8 [a0 + 29] = 0\n 19170: u8 [a0 + 28] = 0\n 19173: u8 [a0 + 27] = 0\n 19176: u8 [a0 + 26] = 0\n 19179: u8 [a0 + 25] = 0\n 19182: u8 [a0 + 24] = 0\n 19185: u8 [a0 + 23] = 0\n 19188: u8 [a0 + 22] = 0\n 19191: u8 [a0 + 21] = 0\n 19194: u8 [a0 + 20] = 0\n 19197: u8 [a0 + 19] = 0\n 19200: u8 [a0 + 18] = 0\n 19203: u8 [a0 + 17] = 0\n 19206: u8 [a0 + 16] = 0\n 19209: u8 [a0 + 15] = 0\n 19212: u8 [a0 + 14] = 0\n 19215: u8 [a0 + 13] = 0\n 19218: u8 [a0 + 12] = 0\n 19221: u8 [a0 + 11] = 0\n 19224: u8 [a0 + 10] = 0\n 19227: u8 [a0 + 9] = 0\n 19230: u8 [a0 + 8] = 0\n 19233: u8 [a0 + 7] = 0\n 19236: u8 [a0 + 6] = 0\n 19239: u8 [a0 + 5] = 0\n 19242: u8 [a0 + 4] = 0\n 19245: u8 [a0 + 3] = 0\n 19248: u8 [a0 + 2] = 0\n 19251: u8 [a0 + 1] = 0\n 19254: u8 [a0 + 0] = 0\n 19256: a1 = 0x40\n 19259: a0 = 0\n 19261: ra = 256, jump @0\n      : @298 [@dyn 128] (gas: 46)\n 19267: i32 a0 = a0 + 0\n 19269: i32 a2 = sp + 0x240\n 19273: a1 = 0x40\n 19276: ecalli 5 // 'hash_keccak_256'\n 19278: a0 = u64 [sp + 0x258]\n 19282: a1 = u64 [sp + 0x250]\n 19286: a2 = u64 [sp + 0x248]\n 19290: a3 = u64 [sp + 0x240]\n 19294: a0 = reverse a0\n 19296: a1 = reverse a1\n 19298: a4 = u64 [sp + 0xc0]\n 19302: a4 = a4 + a1\n 19305: a5 = u64 [sp + 0xc8]\n 19309: a5 = a5 + a0\n 19312: a0 = a5 <u a0\n 19315: a4 = a4 + a0\n 19318: s1 = a4 ^ a1\n 19321: a1 = a4 <u a1\n 19324: a1 = a0 if s1 == 0\n 19327: s1 = reverse a3\n 19329: a2 = reverse a2\n 19331: a3 = u64 [sp + 0xd0]\n 19335: a3 = a3 + a2\n 19338: a0 = u64 [sp + 0xd8]\n 19342: a0 = a0 + s1\n 19345: a2 = a3 <u a2\n 19348: a0 = a0 + a2\n 19351: a1 = a1 + a3\n 19354: a2 = a1 <u a3\n 19357: a0 = a0 + a2\n 19360: u64 [sp + 0x228] = a4\n 19364: u64 [sp + 0x220] = a5\n 19368: u64 [sp + 0x230] = a1\n 19372: u64 [sp + 0x238] = a0\n 19376: u64 [sp + 600] = 0\n 19380: u64 [sp + 592] = 0\n 19384: u64 [sp + 584] = 0\n 19388: u64 [sp + 576] = 0\n 19392: u32 [sp + 512] = 0x20\n 19397: i32 a1 = sp + 0x220\n 19401: i32 a3 = sp + 0x240\n 19405: i32 a4 = sp + 0x200\n 19409: a2 = 0xffffffffffffffff\n 19412: a0 = 0\n 19414: ecalli 4 // 'get_storage'\n 19416: fallthrough\n      : @299 (gas: 20)\n 19417: a0 = u64 [sp + 0x258]\n 19421: t0 = u64 [sp + 0x240]\n 19425: a2 = u64 [sp + 0x250]\n 19429: a3 = u64 [sp + 0x248]\n 19433: a1 = u64 [sp + 0xf8]\n 19437: a4 = a0 ^ a1\n 19440: s1 = a0 <u a1\n 19443: a0 = u64 [sp + 0xf0]\n 19447: a5 = a2 <u a0\n 19450: a5 = s1 if a4 != 0\n 19453: a1 = u64 [sp + 0xe0]\n 19457: s1 = a3 ^ a1\n 19460: a3 = a3 <u a1\n 19463: a1 = u64 [sp + 0xe8]\n 19467: a1 = t0 <u a1\n 19470: a1 = a3 if s1 != 0\n 19473: a0 = a0 ^ a2\n 19476: a0 = a0 | a4\n 19479: a1 = a5 if a0 != 0\n 19482: jump @316 if a1 != 0\n      : @300 (gas: 3)\n 19486: a1 = 0x20\n 19489: a0 = 0\n 19491: ra = 258, jump @0\n      : @301 [@dyn 129] (gas: 59)\n 19497: a1 = u64 [sp + 0x58]\n 19500: u8 [a0 + 0x10] = a1\n 19503: a1 = u64 [sp + 0x18]\n 19506: u8 [a0 + 0xf] = a1\n 19509: a1 = u64 [sp + 0x10]\n 19512: u8 [a0 + 0xe] = a1\n 19515: a1 = u64 [sp + 0x8]\n 19518: u8 [a0 + 0xd] = a1\n 19521: a1 = u64 [sp]\n 19523: u8 [a0 + 0xc] = a1\n 19526: a2 = u64 [sp + 0x60]\n 19529: a1 = a2 >> 0x18\n 19532: u8 [a0 + 0xb] = a1\n 19535: a1 = a2 >> 0x10\n 19538: u8 [a0 + 0xa] = a1\n 19541: a1 = a2 >> 0x8\n 19544: u8 [a0 + 0x9] = a1\n 19547: u8 [a0 + 0x8] = a2\n 19550: a1 = u64 [sp + 0x68]\n 19553: u8 [a0 + 0x18] = a1\n 19556: a1 = u64 [sp + 0x50]\n 19559: u8 [a0 + 0x17] = a1\n 19562: a1 = u64 [sp + 0x48]\n 19565: u8 [a0 + 0x16] = a1\n 19568: a1 = u64 [sp + 0x40]\n 19571: u8 [a0 + 0x15] = a1\n 19574: a1 = u64 [sp + 0x38]\n 19577: u8 [a0 + 0x14] = a1\n 19580: a1 = u64 [sp + 0x30]\n 19583: u8 [a0 + 0x13] = a1\n 19586: a1 = u64 [sp + 0x28]\n 19589: u8 [a0 + 0x12] = a1\n 19592: a1 = u64 [sp + 0x20]\n 19595: u8 [a0 + 0x11] = a1\n 19598: a1 = u64 [sp + 0xb8]\n 19602: u8 [a0 + 0x1f] = a1\n 19605: a1 = u64 [sp + 0xb0]\n 19609: u8 [a0 + 0x1e] = a1\n 19612: a1 = u64 [sp + 0xa8]\n 19616: u8 [a0 + 0x1d] = a1\n 19619: a1 = u64 [sp + 0x88]\n 19623: u8 [a0 + 0x1c] = a1\n 19626: a1 = u64 [sp + 0x80]\n 19630: u8 [a0 + 0x1b] = a1\n 19633: a1 = u64 [sp + 0x78]\n 19636: u8 [a0 + 0x1a] = a1\n 19639: a1 = u64 [sp + 0x70]\n 19642: u8 [a0 + 0x19] = a1\n 19645: u8 [a0 + 7] = 0\n 19648: u8 [a0 + 6] = 0\n 19651: u8 [a0 + 5] = 0\n 19654: u8 [a0 + 4] = 0\n 19657: u8 [a0 + 3] = 0\n 19660: u8 [a0 + 2] = 0\n 19663: u8 [a0 + 1] = 0\n 19666: u8 [a0 + 0] = 0\n 19668: a0 = 0x20\n 19671: a1 = 0x20\n 19674: ra = 260, jump @0\n      : @302 [@dyn 130] (gas: 35)\n 19680: u8 [a0 + 31] = 0\n 19683: u8 [a0 + 30] = 0\n 19686: u8 [a0 + 29] = 0\n 19689: u8 [a0 + 28] = 0\n 19692: u8 [a0 + 27] = 0\n 19695: u8 [a0 + 26] = 0\n 19698: u8 [a0 + 25] = 0\n 19701: u8 [a0 + 24] = 0\n 19704: u8 [a0 + 23] = 0\n 19707: u8 [a0 + 22] = 0\n 19710: u8 [a0 + 21] = 0\n 19713: u8 [a0 + 20] = 0\n 19716: u8 [a0 + 19] = 0\n 19719: u8 [a0 + 18] = 0\n 19722: u8 [a0 + 17] = 0\n 19725: u8 [a0 + 16] = 0\n 19728: u8 [a0 + 15] = 0\n 19731: u8 [a0 + 14] = 0\n 19734: u8 [a0 + 13] = 0\n 19737: u8 [a0 + 12] = 0\n 19740: u8 [a0 + 11] = 0\n 19743: u8 [a0 + 10] = 0\n 19746: u8 [a0 + 9] = 0\n 19749: u8 [a0 + 8] = 0\n 19752: u8 [a0 + 7] = 0\n 19755: u8 [a0 + 6] = 0\n 19758: u8 [a0 + 5] = 0\n 19761: u8 [a0 + 4] = 0\n 19764: u8 [a0 + 3] = 0\n 19767: u8 [a0 + 2] = 0\n 19770: u8 [a0 + 1] = 0\n 19773: u8 [a0 + 0] = 0\n 19775: a1 = 0x40\n 19778: a0 = 0\n 19780: ra = 262, jump @0\n      : @303 [@dyn 131] (gas: 50)\n 19786: i32 a0 = a0 + 0\n 19788: i32 a2 = sp + 0x240\n 19792: a1 = 0x40\n 19795: ecalli 5 // 'hash_keccak_256'\n 19797: a0 = u64 [sp + 0x258]\n 19801: a1 = u64 [sp + 0x250]\n 19805: a2 = u64 [sp + 0x248]\n 19809: a3 = u64 [sp + 0x240]\n 19813: a0 = reverse a0\n 19815: a1 = reverse a1\n 19817: a4 = u64 [sp + 0xc0]\n 19821: a4 = a4 + a1\n 19824: a5 = u64 [sp + 0xc8]\n 19828: a5 = a5 + a0\n 19831: a0 = a5 <u a0\n 19834: s1 = a4 + a0\n 19837: a4 = s1 ^ a1\n 19840: a1 = s1 <u a1\n 19843: a1 = a0 if a4 == 0\n 19846: a0 = reverse a3\n 19848: a2 = reverse a2\n 19850: a3 = u64 [sp + 0xd0]\n 19854: a3 = a3 + a2\n 19857: a4 = u64 [sp + 0xd8]\n 19861: a0 = a0 + a4\n 19864: a2 = a3 <u a2\n 19867: a0 = a0 + a2\n 19870: a2 = a3 + a1\n 19873: a1 = a2 <u a3\n 19876: a1 = a1 + a0\n 19879: u32 [sp + 512] = 0x20\n 19884: u64 [sp + 0xb0] = s1\n 19888: u64 [sp + 0x228] = s1\n 19892: u64 [sp + 0xb8] = a5\n 19896: u64 [sp + 0x220] = a5\n 19900: u64 [sp + 0xa8] = a2\n 19904: u64 [sp + 0x230] = a2\n 19908: u64 [sp + 0x88] = a1\n 19912: u64 [sp + 0x238] = a1\n 19916: u64 [sp + 600] = 0\n 19920: u64 [sp + 592] = 0\n 19924: u64 [sp + 584] = 0\n 19928: u64 [sp + 576] = 0\n 19932: i32 a1 = sp + 0x220\n 19936: i32 a3 = sp + 0x240\n 19940: i32 a4 = sp + 0x200\n 19944: a2 = 0xffffffffffffffff\n 19947: a0 = 0\n 19949: ecalli 4 // 'get_storage'\n 19951: fallthrough\n      : @304 (gas: 22)\n 19952: t1 = u64 [sp + 0x258]\n 19956: a3 = u64 [sp + 0x250]\n 19960: t0 = u64 [sp + 0x248]\n 19964: a2 = u64 [sp + 0x240]\n 19968: a4 = u64 [sp + 0xf8]\n 19972: a0 = t1 ^ a4\n 19975: a4 = t1 <u a4\n 19978: a5 = u64 [sp + 0xf0]\n 19982: a1 = a3 <u a5\n 19985: u64 [sp + 0x80] = a1\n 19989: a4 = a1 if a0 == 0\n 19992: a1 = u64 [sp + 0xe0]\n 19996: ra = t0 ^ a1\n 19999: s1 = t0 <u a1\n 20002: a1 = u64 [sp + 0xe8]\n 20006: u64 [sp + 0x60] = a2\n 20009: t2 = a2 <u a1\n 20012: s1 = t2 if ra == 0\n 20015: a5 = a5 ^ a3\n 20018: a0 = a0 | a5\n 20021: a4 = s1 if a0 == 0\n 20024: jump @323 if a4 != 0\n      : @305 (gas: 73)\n 20028: a0 = u64 [sp + 0xf0]\n 20032: a0 = a3 - a0\n 20035: a1 = a0 - s1\n 20038: u64 [sp + 0x78] = a1\n 20041: a0 = a0 <u s1\n 20044: a1 = u64 [sp + 0xf8]\n 20048: a2 = t1 - a1\n 20051: a1 = u64 [sp + 0x80]\n 20055: a2 = a2 - a1\n 20058: a2 = a2 - a0\n 20061: u64 [sp + 0x70] = a2\n 20064: a0 = 0xffffffff\n 20074: u64 [sp + 0x80] = a0\n 20078: a0 = u64 [sp + 0xe0]\n 20082: a0 = t0 - a0\n 20085: a0 = a0 - t2\n 20088: u64 [sp + 0x68] = a0\n 20091: a0 = u64 [sp + 0xe8]\n 20095: a1 = u64 [sp + 0x60]\n 20098: a0 = a1 - a0\n 20101: u64 [sp + 0x60] = a0\n 20104: a0 = u64 [sp + 0xa8]\n 20108: u64 [sp + 0x230] = a0\n 20112: a0 = u64 [sp + 0xb0]\n 20116: u64 [sp + 0x228] = a0\n 20120: a0 = u64 [sp + 0xb8]\n 20124: u64 [sp + 0x220] = a0\n 20128: s1 = u64 [sp + 0x88]\n 20132: u64 [sp + 0x238] = s1\n 20136: u64 [sp + 600] = 0\n 20140: u64 [sp + 592] = 0\n 20144: u64 [sp + 584] = 0\n 20148: u64 [sp + 576] = 0\n 20152: u32 [sp + 512] = 0x20\n 20157: i32 a1 = sp + 0x220\n 20161: i32 a3 = sp + 0x240\n 20165: i32 a4 = sp + 0x200\n 20169: a2 = 0xffffffffffffffff\n 20172: a0 = 0\n 20174: ecalli 4 // 'get_storage'\n 20176: u64 [sp + 0x238] = s1\n 20180: a0 = u64 [sp + 0xa8]\n 20184: u64 [sp + 0x230] = a0\n 20188: a0 = u64 [sp + 0xb0]\n 20192: u64 [sp + 0x228] = a0\n 20196: a0 = u64 [sp + 0xb8]\n 20200: u64 [sp + 0x220] = a0\n 20204: a0 = u64 [sp + 0x70]\n 20207: u64 [sp + 0x258] = a0\n 20211: a0 = u64 [sp + 0x78]\n 20214: u64 [sp + 0x250] = a0\n 20218: a0 = u64 [sp + 0x68]\n 20221: u64 [sp + 0x248] = a0\n 20225: a0 = u64 [sp + 0x60]\n 20228: u64 [sp + 0x240] = a0\n 20232: i32 a1 = sp + 0x220\n 20236: i32 a3 = sp + 0x240\n 20240: a2 = 0xffffffffffffffff\n 20243: a4 = 0x20\n 20246: a0 = 0\n 20248: ecalli 8 // 'set_storage'\n 20250: a0 = u64 [sp + 0x90]\n 20254: a0 = a0 & 0xffffffffffffffff\n 20257: u64 [sp + 0xb8] = a0\n 20261: a0 = u64 [sp + 0x98]\n 20265: a0 = a0 & 0xffffffffffffffff\n 20268: u64 [sp + 0xb0] = a0\n 20272: a0 = u64 [sp + 0xa0]\n 20276: s1 = u64 [sp + 0x80]\n 20280: s1 = s1 & a0\n 20283: a1 = 0x20\n 20286: a0 = 0\n 20288: ra = 264, jump @0\n      : @306 [@dyn 132] (gas: 58)\n 20294: a1 = reverse s1\n 20296: a2 = u64 [sp + 0xb0]\n 20300: a2 = reverse a2\n 20302: a3 = u64 [sp + 0xb8]\n 20306: a3 = reverse a3\n 20308: a4 = a3 >> 0x38\n 20311: u8 [a0 + 0x1f] = a4\n 20314: a4 = a3 >> 0x30\n 20317: u8 [a0 + 0x1e] = a4\n 20320: a4 = a3 >> 0x28\n 20323: u8 [a0 + 0x1d] = a4\n 20326: a4 = a3 >> 0x20\n 20329: u8 [a0 + 0x1c] = a4\n 20332: a4 = a3 >> 0x18\n 20335: u8 [a0 + 0x1b] = a4\n 20338: a4 = a3 >> 0x10\n 20341: u8 [a0 + 0x1a] = a4\n 20344: a4 = a3 >> 0x8\n 20347: u8 [a0 + 0x19] = a4\n 20350: u8 [a0 + 0x18] = a3\n 20353: a3 = a2 >> 0x38\n 20356: u8 [a0 + 0x17] = a3\n 20359: a3 = a2 >> 0x30\n 20362: u8 [a0 + 0x16] = a3\n 20365: a3 = a2 >> 0x28\n 20368: u8 [a0 + 0x15] = a3\n 20371: a3 = a2 >> 0x20\n 20374: u8 [a0 + 0x14] = a3\n 20377: a3 = a2 >> 0x18\n 20380: u8 [a0 + 0x13] = a3\n 20383: a3 = a2 >> 0x10\n 20386: u8 [a0 + 0x12] = a3\n 20389: a3 = a2 >> 0x8\n 20392: u8 [a0 + 0x11] = a3\n 20395: u8 [a0 + 0x10] = a2\n 20398: a2 = a1 >> 0x38\n 20401: u8 [a0 + 0xf] = a2\n 20404: a2 = a1 >> 0x30\n 20407: u8 [a0 + 0xe] = a2\n 20410: a2 = a1 >> 0x28\n 20413: u8 [a0 + 0xd] = a2\n 20416: a2 = a1 >> 0x20\n 20419: u8 [a0 + 0xc] = a2\n 20422: u8 [a0 + 11] = 0\n 20425: u8 [a0 + 10] = 0\n 20428: u8 [a0 + 9] = 0\n 20431: u8 [a0 + 0x8] = a1\n 20434: u8 [a0 + 7] = 0\n 20437: u8 [a0 + 6] = 0\n 20440: u8 [a0 + 5] = 0\n 20443: u8 [a0 + 4] = 0\n 20446: u8 [a0 + 3] = 0\n 20449: u8 [a0 + 2] = 0\n 20452: u8 [a0 + 1] = 0\n 20455: u8 [a0 + 0] = 0\n 20457: a0 = 0x20\n 20460: a1 = 0x20\n 20463: ra = 266, jump @0\n      : @307 [@dyn 133] (gas: 35)\n 20469: u8 [a0 + 31] = 0\n 20472: u8 [a0 + 30] = 0\n 20475: u8 [a0 + 29] = 0\n 20478: u8 [a0 + 28] = 0\n 20481: u8 [a0 + 27] = 0\n 20484: u8 [a0 + 26] = 0\n 20487: u8 [a0 + 25] = 0\n 20490: u8 [a0 + 24] = 0\n 20493: u8 [a0 + 23] = 0\n 20496: u8 [a0 + 22] = 0\n 20499: u8 [a0 + 21] = 0\n 20502: u8 [a0 + 20] = 0\n 20505: u8 [a0 + 19] = 0\n 20508: u8 [a0 + 18] = 0\n 20511: u8 [a0 + 17] = 0\n 20514: u8 [a0 + 16] = 0\n 20517: u8 [a0 + 15] = 0\n 20520: u8 [a0 + 14] = 0\n 20523: u8 [a0 + 13] = 0\n 20526: u8 [a0 + 12] = 0\n 20529: u8 [a0 + 11] = 0\n 20532: u8 [a0 + 10] = 0\n 20535: u8 [a0 + 9] = 0\n 20538: u8 [a0 + 8] = 0\n 20541: u8 [a0 + 7] = 0\n 20544: u8 [a0 + 6] = 0\n 20547: u8 [a0 + 5] = 0\n 20550: u8 [a0 + 4] = 0\n 20553: u8 [a0 + 3] = 0\n 20556: u8 [a0 + 2] = 0\n 20559: u8 [a0 + 1] = 0\n 20562: u8 [a0 + 0] = 0\n 20564: a1 = 0x40\n 20567: a0 = 0\n 20569: ra = 268, jump @0\n      : @308 [@dyn 134] (gas: 50)\n 20575: i32 a0 = a0 + 0\n 20577: i32 a2 = sp + 0x240\n 20581: a1 = 0x40\n 20584: ecalli 5 // 'hash_keccak_256'\n 20586: a0 = u64 [sp + 0x240]\n 20590: a1 = u64 [sp + 0x248]\n 20594: a2 = u64 [sp + 0x258]\n 20598: a3 = u64 [sp + 0x250]\n 20602: a0 = reverse a0\n 20604: a1 = reverse a1\n 20606: a2 = reverse a2\n 20608: a3 = reverse a3\n 20610: a4 = u64 [sp + 0xc0]\n 20614: a4 = a4 + a3\n 20617: a5 = u64 [sp + 0xc8]\n 20621: a5 = a5 + a2\n 20624: a2 = a5 <u a2\n 20627: s1 = a4 + a2\n 20630: a4 = s1 ^ a3\n 20633: a3 = s1 <u a3\n 20636: a3 = a2 if a4 == 0\n 20639: a2 = u64 [sp + 0xd0]\n 20643: a2 = a2 + a1\n 20646: a3 = a3 + a2\n 20649: t0 = a3 <u a2\n 20652: a4 = u64 [sp + 0xd8]\n 20656: a0 = a0 + a4\n 20659: a1 = a2 <u a1\n 20662: a0 = a0 + a1\n 20665: a0 = a0 + t0\n 20668: u64 [sp + 0xd0] = s1\n 20672: u64 [sp + 0x228] = s1\n 20676: u64 [sp + 0xd8] = a5\n 20680: u64 [sp + 0x220] = a5\n 20684: u64 [sp + 0xc8] = a3\n 20688: u64 [sp + 0x230] = a3\n 20692: u64 [sp + 0xc0] = a0\n 20696: u64 [sp + 0x238] = a0\n 20700: u64 [sp + 600] = 0\n 20704: u64 [sp + 592] = 0\n 20708: u64 [sp + 584] = 0\n 20712: u64 [sp + 576] = 0\n 20716: u32 [sp + 512] = 0x20\n 20721: i32 a1 = sp + 0x220\n 20725: i32 a3 = sp + 0x240\n 20729: i32 a4 = sp + 0x200\n 20733: a2 = 0xffffffffffffffff\n 20736: a0 = 0\n 20738: ecalli 4 // 'get_storage'\n 20740: fallthrough\n      : @309 (gas: 37)\n 20741: a3 = u64 [sp + 0x248]\n 20745: a1 = u64 [sp + 0x240]\n 20749: t0 = u64 [sp + 0x258]\n 20753: a2 = u64 [sp + 0x250]\n 20757: a5 = u64 [sp + 0xe0]\n 20761: a5 = a5 + a3\n 20764: a0 = u64 [sp + 0xe8]\n 20768: a0 = a0 + a1\n 20771: u64 [sp + 0xe8] = a0\n 20775: a4 = a0 <u a1\n 20778: a5 = a5 + a4\n 20781: t1 = a5 ^ a3\n 20784: u64 [sp + 0xe0] = a5\n 20788: a3 = a5 <u a3\n 20791: a5 = a4 ^ 0x1\n 20794: a4 = a3 if t1 != 0\n 20797: a0 = u64 [sp + 0xf0]\n 20801: a0 = a0 + a2\n 20804: s1 = a0 + a4\n 20807: a4 = s1 <u a0\n 20810: a1 = u64 [sp + 0xf8]\n 20814: a1 = a1 + t0\n 20817: a0 = a0 <u a2\n 20820: a0 = a0 + a1\n 20823: a4 = a4 + a0\n 20826: a0 = s1 <u a2\n 20829: a1 = a4 ^ t0\n 20832: u64 [sp + 0xf8] = a4\n 20836: a4 = a4 <u t0\n 20839: a4 = a0 if a1 == 0\n 20842: a0 = a4 ^ 0x1\n 20845: a2 = a2 ^ s1\n 20848: a1 = a1 | a2\n 20851: a2 = a3 ^ 0x1\n 20854: a5 = a2 if t1 != 0\n 20857: a5 = a0 if a1 != 0\n 20860: jump @325 if a5 == 0\n      : @310 (gas: 46)\n 20864: a0 = u64 [sp + 0xc8]\n 20868: u64 [sp + 0x230] = a0\n 20872: a0 = u64 [sp + 0xd0]\n 20876: u64 [sp + 0x228] = a0\n 20880: a0 = u64 [sp + 0xd8]\n 20884: u64 [sp + 0x220] = a0\n 20888: a0 = u64 [sp + 0xc0]\n 20892: u64 [sp + 0x238] = a0\n 20896: u64 [sp + 600] = 0\n 20900: u64 [sp + 592] = 0\n 20904: u64 [sp + 584] = 0\n 20908: u64 [sp + 576] = 0\n 20912: u32 [sp + 512] = 0x20\n 20917: i32 a1 = sp + 0x220\n 20921: i32 a3 = sp + 0x240\n 20925: i32 a4 = sp + 0x200\n 20929: a2 = 0xffffffffffffffff\n 20932: a0 = 0\n 20934: ecalli 4 // 'get_storage'\n 20936: a0 = u64 [sp + 0xc0]\n 20940: u64 [sp + 0x238] = a0\n 20944: a0 = u64 [sp + 0xc8]\n 20948: u64 [sp + 0x230] = a0\n 20952: a0 = u64 [sp + 0xd0]\n 20956: u64 [sp + 0x228] = a0\n 20960: a0 = u64 [sp + 0xd8]\n 20964: u64 [sp + 0x220] = a0\n 20968: a0 = u64 [sp + 0xf8]\n 20972: u64 [sp + 0x258] = a0\n 20976: u64 [sp + 0x250] = s1\n 20980: a0 = u64 [sp + 0xe0]\n 20984: u64 [sp + 0x248] = a0\n 20988: a0 = u64 [sp + 0xe8]\n 20992: u64 [sp + 0x240] = a0\n 20996: i32 a1 = sp + 0x220\n 21000: i32 a3 = sp + 0x240\n 21004: a2 = 0xffffffffffffffff\n 21007: a4 = 0x20\n 21010: a0 = 0\n 21012: ecalli 8 // 'set_storage'\n 21014: sp = s0 + 0xfffffffffffffd80\n 21018: ra = u64 [sp + 0x278]\n 21022: s0 = u64 [sp + 0x270]\n 21026: s1 = u64 [sp + 0x268]\n 21030: sp = sp + 0x280\n 21034: ret\n      : @311 (gas: 3)\n 21036: a0 = 0x40\n 21039: a1 = 0x20\n 21042: ra = 270, jump @0\n      : @312 [@dyn 135] (gas: 103)\n 21048: a1 = u8 [a0 + 0x11]\n 21051: a2 = u8 [a0 + 0x10]\n 21054: a3 = u8 [a0 + 0x12]\n 21057: a4 = u8 [a0 + 0x13]\n 21060: a1 = a1 << 0x8\n 21063: a1 = a1 | a2\n 21066: a3 = a3 << 0x10\n 21069: a4 = a4 << 0x18\n 21072: a3 = a3 | a4\n 21075: a1 = a1 | a3\n 21078: a2 = u8 [a0 + 0x15]\n 21081: a3 = u8 [a0 + 0x14]\n 21084: a4 = u8 [a0 + 0x16]\n 21087: a5 = u8 [a0 + 0x17]\n 21090: a2 = a2 << 0x8\n 21093: a2 = a2 | a3\n 21096: a4 = a4 << 0x10\n 21099: a5 = a5 << 0x18\n 21102: a4 = a4 | a5\n 21105: a2 = a2 | a4\n 21108: a2 = a2 << 0x20\n 21111: t0 = a2 | a1\n 21114: a2 = u8 [a0 + 0x1]\n 21117: a3 = u8 [a0]\n 21119: a4 = u8 [a0 + 0x2]\n 21122: a5 = u8 [a0 + 0x3]\n 21125: a2 = a2 << 0x8\n 21128: a2 = a2 | a3\n 21131: a4 = a4 << 0x10\n 21134: a5 = a5 << 0x18\n 21137: a4 = a4 | a5\n 21140: a2 = a2 | a4\n 21143: a3 = u8 [a0 + 0x5]\n 21146: a4 = u8 [a0 + 0x4]\n 21149: a5 = u8 [a0 + 0x6]\n 21152: s1 = u8 [a0 + 0x7]\n 21155: a3 = a3 << 0x8\n 21158: a3 = a3 | a4\n 21161: a5 = a5 << 0x10\n 21164: s1 = s1 << 0x18\n 21167: a5 = a5 | s1\n 21170: a3 = a3 | a5\n 21173: a3 = a3 << 0x20\n 21176: a2 = a2 | a3\n 21179: a3 = u8 [a0 + 0x19]\n 21182: a4 = u8 [a0 + 0x18]\n 21185: a5 = u8 [a0 + 0x1a]\n 21188: s1 = u8 [a0 + 0x1b]\n 21191: a3 = a3 << 0x8\n 21194: a3 = a3 | a4\n 21197: a5 = a5 << 0x10\n 21200: s1 = s1 << 0x18\n 21203: a5 = a5 | s1\n 21206: a3 = a3 | a5\n 21209: a4 = u8 [a0 + 0x1d]\n 21212: a5 = u8 [a0 + 0x1c]\n 21215: s1 = u8 [a0 + 0x1e]\n 21218: a1 = u8 [a0 + 0x1f]\n 21221: a4 = a4 << 0x8\n 21224: a4 = a4 | a5\n 21227: s1 = s1 << 0x10\n 21230: a1 = a1 << 0x18\n 21233: a1 = a1 | s1\n 21236: a1 = a1 | a4\n 21239: a1 = a1 << 0x20\n 21242: a3 = a3 | a1\n 21245: a1 = u8 [a0 + 0x9]\n 21248: a4 = u8 [a0 + 0x8]\n 21251: a5 = u8 [a0 + 0xa]\n 21254: s1 = u8 [a0 + 0xb]\n 21257: a1 = a1 << 0x8\n 21260: a1 = a1 | a4\n 21263: a5 = a5 << 0x10\n 21266: s1 = s1 << 0x18\n 21269: a5 = a5 | s1\n 21272: a1 = a1 | a5\n 21275: a4 = u8 [a0 + 0xd]\n 21278: a5 = u8 [a0 + 0xc]\n 21281: s1 = u8 [a0 + 0xe]\n 21284: a0 = u8 [a0 + 0xf]\n 21287: a4 = a4 << 0x8\n 21290: a4 = a4 | a5\n 21293: s1 = s1 << 0x10\n 21296: a0 = a0 << 0x18\n 21299: a0 = a0 | s1\n 21302: a0 = a0 | a4\n 21305: a0 = a0 << 0x20\n 21308: a0 = a0 | a1\n 21311: s1 = reverse a0\n 21313: a1 = reverse a3\n 21315: a2 = reverse a2\n 21317: a0 = reverse t0\n 21319: u64 [sp + 0xf8] = a0\n 21323: u64 [sp + 0xf0] = a2\n 21327: a0 = a0 | a2\n 21330: a2 = a1\n 21332: a1 = a1 | s1\n 21335: a1 = a1 | a0\n 21338: a1 = a1 >> 0x20\n 21341: a0 = a0 | s1\n 21344: a0 = a0 << 0x20\n 21347: a0 = a0 | a1\n 21350: jump @322 if a0 != 0\n      : @313 (gas: 5)\n 21354: u64 [sp + 0xe8] = a2\n 21358: i32 a0 = a2 + 0\n 21360: a1 = 0x20\n 21363: u64 [sp + 0xe0] = a0\n 21367: ra = 272, jump @0\n      : @314 [@dyn 136] (gas: 50)\n 21373: u8 [a0 + 31] = 0\n 21376: u8 [a0 + 30] = 0\n 21379: u8 [a0 + 29] = 0\n 21382: u8 [a0 + 28] = 0\n 21385: u8 [a0 + 27] = 0\n 21388: u8 [a0 + 26] = 0\n 21391: u8 [a0 + 25] = 0\n 21394: u8 [a0 + 24] = 0\n 21397: u8 [a0 + 23] = 0\n 21400: u8 [a0 + 22] = 0\n 21403: u8 [a0 + 21] = 0\n 21406: u8 [a0 + 20] = 0\n 21409: u8 [a0 + 19] = 0\n 21412: u8 [a0 + 18] = 0\n 21415: u8 [a0 + 17] = 0\n 21418: u8 [a0 + 16] = 0\n 21421: u8 [a0 + 15] = 0\n 21424: u8 [a0 + 14] = 0\n 21427: u8 [a0 + 13] = 0\n 21430: u8 [a0 + 12] = 0\n 21433: u8 [a0 + 11] = 0\n 21436: u8 [a0 + 10] = 0\n 21439: u8 [a0 + 9] = 0\n 21442: u8 [a0 + 8] = 0\n 21445: u8 [a0 + 7] = 0\n 21448: u8 [a0 + 6] = 0\n 21451: u8 [a0 + 5] = 0\n 21454: u8 [a0 + 4] = 0\n 21457: u8 [a0 + 3] = 0xa0\n 21462: u8 [a0 + 2] = 0x79\n 21466: u8 [a0 + 1] = 0xc3\n 21471: u8 [a0 + 0] = 0x8\n 21474: a1 = u64 [sp + 0xe8]\n 21478: a0 = a1 + 0x4\n 21481: a1 = a0 <u a1\n 21484: a3 = u64 [sp + 0xf8]\n 21488: a2 = a3 + a1\n 21491: a3 = a2 <u a3\n 21494: a3 = a1 if a1 == 0\n 21497: a3 = a3 + s1\n 21500: a1 = a3 <u s1\n 21503: a4 = u64 [sp + 0xf0]\n 21507: a4 = a4 + a1\n 21510: u64 [sp + 0x108] = a2\n 21514: u64 [sp + 0x100] = a0\n 21518: u64 [sp + 0x110] = a3\n 21522: a0 = sp + 0x120\n 21526: a1 = sp + 0x100\n 21530: u64 [sp + 0x118] = a4\n 21534: ra = 274, jump @278\n      : @315 [@dyn 137] (gas: 5)\n 21540: a0 = u64 [sp + 0x128]\n 21544: t0 = u64 [sp + 0x138]\n 21548: t1 = u64 [sp + 0x120]\n 21552: a3 = u64 [sp + 0x130]\n 21556: jump @321\n      : @316 (gas: 3)\n 21559: a0 = 0x40\n 21562: a1 = 0x20\n 21565: ra = 276, jump @0\n      : @317 [@dyn 138] (gas: 103)\n 21571: a1 = u8 [a0 + 0x11]\n 21574: a2 = u8 [a0 + 0x10]\n 21577: a3 = u8 [a0 + 0x12]\n 21580: a4 = u8 [a0 + 0x13]\n 21583: a1 = a1 << 0x8\n 21586: a1 = a1 | a2\n 21589: a3 = a3 << 0x10\n 21592: a4 = a4 << 0x18\n 21595: a3 = a3 | a4\n 21598: a1 = a1 | a3\n 21601: a2 = u8 [a0 + 0x15]\n 21604: a3 = u8 [a0 + 0x14]\n 21607: a4 = u8 [a0 + 0x16]\n 21610: a5 = u8 [a0 + 0x17]\n 21613: a2 = a2 << 0x8\n 21616: a2 = a2 | a3\n 21619: a4 = a4 << 0x10\n 21622: a5 = a5 << 0x18\n 21625: a4 = a4 | a5\n 21628: a2 = a2 | a4\n 21631: a2 = a2 << 0x20\n 21634: t0 = a2 | a1\n 21637: a2 = u8 [a0 + 0x1]\n 21640: a3 = u8 [a0]\n 21642: a4 = u8 [a0 + 0x2]\n 21645: a5 = u8 [a0 + 0x3]\n 21648: a2 = a2 << 0x8\n 21651: a2 = a2 | a3\n 21654: a4 = a4 << 0x10\n 21657: a5 = a5 << 0x18\n 21660: a4 = a4 | a5\n 21663: a2 = a2 | a4\n 21666: a3 = u8 [a0 + 0x5]\n 21669: a4 = u8 [a0 + 0x4]\n 21672: a5 = u8 [a0 + 0x6]\n 21675: s1 = u8 [a0 + 0x7]\n 21678: a3 = a3 << 0x8\n 21681: a3 = a3 | a4\n 21684: a5 = a5 << 0x10\n 21687: s1 = s1 << 0x18\n 21690: a5 = a5 | s1\n 21693: a3 = a3 | a5\n 21696: a3 = a3 << 0x20\n 21699: a2 = a2 | a3\n 21702: a3 = u8 [a0 + 0x19]\n 21705: a4 = u8 [a0 + 0x18]\n 21708: a5 = u8 [a0 + 0x1a]\n 21711: s1 = u8 [a0 + 0x1b]\n 21714: a3 = a3 << 0x8\n 21717: a3 = a3 | a4\n 21720: a5 = a5 << 0x10\n 21723: s1 = s1 << 0x18\n 21726: a5 = a5 | s1\n 21729: a3 = a3 | a5\n 21732: a4 = u8 [a0 + 0x1d]\n 21735: a5 = u8 [a0 + 0x1c]\n 21738: s1 = u8 [a0 + 0x1e]\n 21741: a1 = u8 [a0 + 0x1f]\n 21744: a4 = a4 << 0x8\n 21747: a4 = a4 | a5\n 21750: s1 = s1 << 0x10\n 21753: a1 = a1 << 0x18\n 21756: a1 = a1 | s1\n 21759: a1 = a1 | a4\n 21762: a1 = a1 << 0x20\n 21765: a3 = a3 | a1\n 21768: a1 = u8 [a0 + 0x9]\n 21771: a4 = u8 [a0 + 0x8]\n 21774: a5 = u8 [a0 + 0xa]\n 21777: s1 = u8 [a0 + 0xb]\n 21780: a1 = a1 << 0x8\n 21783: a1 = a1 | a4\n 21786: a5 = a5 << 0x10\n 21789: s1 = s1 << 0x18\n 21792: a5 = a5 | s1\n 21795: a1 = a1 | a5\n 21798: a4 = u8 [a0 + 0xd]\n 21801: a5 = u8 [a0 + 0xc]\n 21804: s1 = u8 [a0 + 0xe]\n 21807: a0 = u8 [a0 + 0xf]\n 21810: a4 = a4 << 0x8\n 21813: a4 = a4 | a5\n 21816: s1 = s1 << 0x10\n 21819: a0 = a0 << 0x18\n 21822: a0 = a0 | s1\n 21825: a0 = a0 | a4\n 21828: a0 = a0 << 0x20\n 21831: a0 = a0 | a1\n 21834: s1 = reverse a0\n 21836: a1 = reverse a3\n 21838: a2 = reverse a2\n 21840: a0 = reverse t0\n 21842: u64 [sp + 0xf8] = a0\n 21846: u64 [sp + 0xf0] = a2\n 21850: a0 = a0 | a2\n 21853: a2 = a1\n 21855: a1 = a1 | s1\n 21858: a1 = a1 | a0\n 21861: a1 = a1 >> 0x20\n 21864: a0 = a0 | s1\n 21867: a0 = a0 << 0x20\n 21870: a0 = a0 | a1\n 21873: jump @322 if a0 != 0\n      : @318 (gas: 5)\n 21877: u64 [sp + 0xe8] = a2\n 21881: i32 a0 = a2 + 0\n 21883: a1 = 0x20\n 21886: u64 [sp + 0xe0] = a0\n 21890: ra = 278, jump @0\n      : @319 [@dyn 139] (gas: 50)\n 21896: u8 [a0 + 31] = 0\n 21899: u8 [a0 + 30] = 0\n 21902: u8 [a0 + 29] = 0\n 21905: u8 [a0 + 28] = 0\n 21908: u8 [a0 + 27] = 0\n 21911: u8 [a0 + 26] = 0\n 21914: u8 [a0 + 25] = 0\n 21917: u8 [a0 + 24] = 0\n 21920: u8 [a0 + 23] = 0\n 21923: u8 [a0 + 22] = 0\n 21926: u8 [a0 + 21] = 0\n 21929: u8 [a0 + 20] = 0\n 21932: u8 [a0 + 19] = 0\n 21935: u8 [a0 + 18] = 0\n 21938: u8 [a0 + 17] = 0\n 21941: u8 [a0 + 16] = 0\n 21944: u8 [a0 + 15] = 0\n 21947: u8 [a0 + 14] = 0\n 21950: u8 [a0 + 13] = 0\n 21953: u8 [a0 + 12] = 0\n 21956: u8 [a0 + 11] = 0\n 21959: u8 [a0 + 10] = 0\n 21962: u8 [a0 + 9] = 0\n 21965: u8 [a0 + 8] = 0\n 21968: u8 [a0 + 7] = 0\n 21971: u8 [a0 + 6] = 0\n 21974: u8 [a0 + 5] = 0\n 21977: u8 [a0 + 4] = 0\n 21980: u8 [a0 + 3] = 0xa0\n 21985: u8 [a0 + 2] = 0x79\n 21989: u8 [a0 + 1] = 0xc3\n 21994: u8 [a0 + 0] = 0x8\n 21997: a1 = u64 [sp + 0xe8]\n 22001: a0 = a1 + 0x4\n 22004: a1 = a0 <u a1\n 22007: a3 = u64 [sp + 0xf8]\n 22011: a2 = a3 + a1\n 22014: a3 = a2 <u a3\n 22017: a3 = a1 if a1 == 0\n 22020: a3 = a3 + s1\n 22023: a1 = a3 <u s1\n 22026: a4 = u64 [sp + 0xf0]\n 22030: a4 = a4 + a1\n 22033: u64 [sp + 0x148] = a2\n 22037: u64 [sp + 0x140] = a0\n 22041: u64 [sp + 0x150] = a3\n 22045: a0 = sp + 0x160\n 22049: a1 = sp + 0x140\n 22053: u64 [sp + 0x158] = a4\n 22057: ra = 280, jump @286\n      : @320 [@dyn 140] (gas: 5)\n 22063: a0 = u64 [sp + 0x168]\n 22067: t0 = u64 [sp + 0x178]\n 22071: t1 = u64 [sp + 0x160]\n 22075: a3 = u64 [sp + 0x170]\n 22079: fallthrough\n      : @321 (gas: 26)\n 22080: a1 = u64 [sp + 0xf8]\n 22084: a4 = a0 ^ a1\n 22087: a5 = a0 <u a1\n 22090: t2 = a1\n 22092: a2 = u64 [sp + 0xe8]\n 22096: a1 = t1 <u a2\n 22099: a5 = a1 if a4 == 0\n 22102: a4 = a3 - s1\n 22105: a3 = a3 <u s1\n 22108: s1 = u64 [sp + 0xf0]\n 22112: s1 = t0 - s1\n 22115: s1 = s1 - a3\n 22118: a3 = a4 <u a5\n 22121: s1 = s1 - a3\n 22124: a4 = a4 - a5\n 22127: a0 = a0 - t2\n 22130: a1 = a0 - a1\n 22133: a0 = t1 - a2\n 22136: a1 = a1 | s1\n 22139: a2 = a0 | a4\n 22142: a2 = a2 | a1\n 22145: a1 = a1 | a4\n 22148: a2 = a2 >> 0x20\n 22151: a1 = a1 << 0x20\n 22154: a1 = a1 | a2\n 22157: jump @329 if a1 == 0\n      : @322 (gas: 1)\n 22161: trap\n      : @323 (gas: 8)\n 22162: u64 [sp + 432] = 0\n 22166: u64 [sp + 424] = 0\n 22170: u64 [sp + 416] = 0\n 22174: a0 = 0x4e487b7100000000\n 22184: a1 = sp + 0x1a0\n 22188: u64 [sp + 0x1b8] = a0\n 22192: a0 = 0\n 22194: ra = 282, jump @8\n      : @324 [@dyn 141] (gas: 8)\n 22200: u64 [sp + 408] = 0\n 22204: u64 [sp + 400] = 0\n 22208: u64 [sp + 384] = 0x11\n 22213: a0 = 0x4\n 22216: a1 = sp + 0x180\n 22220: u64 [sp + 392] = 0\n 22224: ra = 0x11e\n 22228: jump @8\n      : @325 (gas: 8)\n 22231: u64 [sp + 496] = 0\n 22235: u64 [sp + 488] = 0\n 22239: u64 [sp + 480] = 0\n 22243: a0 = 0x4e487b7100000000\n 22253: a1 = sp + 0x1e0\n 22257: u64 [sp + 0x1f8] = a0\n 22261: a0 = 0\n 22263: ra = 284, jump @8\n      : @326 [@dyn 142] (gas: 7)\n 22269: u64 [sp + 472] = 0\n 22273: u64 [sp + 464] = 0\n 22277: u64 [sp + 448] = 0x11\n 22282: a0 = 0x4\n 22285: a1 = sp + 0x1c0\n 22289: u64 [sp + 456] = 0\n 22293: ra = 286, jump @8\n      : @327 [@dyn 143] (gas: 3)\n 22299: a1 = 0x24\n 22302: a0 = 0\n 22304: ra = 288, jump @0\n      : @328 [@dyn 144] (gas: 5)\n 22310: i32 a1 = a0 + 0\n 22312: a0 = 0x1\n 22315: a2 = 0x24\n 22318: ecalli 6 // 'seal_return'\n 22320: fallthrough\n      : @329 (gas: 4)\n 22321: i32 s1 = a0 + 0\n 22323: a0 = u64 [sp + 0xe0]\n 22327: a1 = s1\n 22329: ra = 290, jump @0\n      : @330 [@dyn 145] (gas: 6)\n 22335: i32 a1 = a0 + 0\n 22337: a0 = 0x1\n 22340: a2 = s1\n 22342: ra = 0x124\n 22346: ecalli 6 // 'seal_return'\n 22348: fallthrough\n      : @331 [@dyn 146] (gas: 18)\n 22349: a2 = u64 [a1]\n 22351: t0 = u64 [a1 + 0x18]\n 22354: a4 = u64 [a1 + 0x8]\n 22357: a1 = u64 [a1 + 0x10]\n 22360: a5 = a2 + 0x1f\n 22363: a2 = a5 <u a2\n 22366: a3 = a4 + a2\n 22369: a4 = a3 <u a4\n 22372: a4 = a2 if a2 == 0\n 22375: a4 = a4 + a1\n 22378: a1 = a4 <u a1\n 22381: a1 = a1 + t0\n 22384: a5 = a5 & 0xffffffffffffffe0\n 22387: u64 [a0] = a5\n 22389: u64 [a0 + 0x8] = a3\n 22392: u64 [a0 + 0x10] = a4\n 22395: u64 [a0 + 0x18] = a1\n 22398: ret\n      : @332 (gas: 18)\n 22400: sp = sp + 0xffffffffffffff60\n 22404: u64 [sp + 0x98] = ra\n 22408: u64 [sp + 0x90] = s0\n 22412: u64 [sp + 0x88] = s1\n 22416: s0 = sp + 0xa0\n 22420: sp = sp & 0xfffffffffffffff0\n 22423: a2 = u64 [a1 + 0x18]\n 22426: u64 [sp + 0x30] = a2\n 22429: a2 = u64 [a1 + 0x10]\n 22432: u64 [sp + 0x28] = a2\n 22435: a2 = u64 [a1 + 0x8]\n 22438: u64 [sp + 0x20] = a2\n 22441: a1 = u64 [a1]\n 22443: u64 [sp + 0x18] = a1\n 22446: u64 [sp + 0x38] = a0\n 22449: a0 = 0x40\n 22452: a1 = 0x20\n 22455: ra = 294, jump @0\n      : @333 [@dyn 147] (gas: 130)\n 22461: a1 = u8 [a0 + 0x19]\n 22464: a2 = u8 [a0 + 0x18]\n 22467: a3 = u8 [a0 + 0x1a]\n 22470: a4 = u8 [a0 + 0x1b]\n 22473: a1 = a1 << 0x8\n 22476: a1 = a1 | a2\n 22479: a3 = a3 << 0x10\n 22482: a4 = a4 << 0x18\n 22485: a3 = a3 | a4\n 22488: a1 = a1 | a3\n 22491: a2 = u8 [a0 + 0x1d]\n 22494: a3 = u8 [a0 + 0x1c]\n 22497: a4 = u8 [a0 + 0x1e]\n 22500: a5 = u8 [a0 + 0x1f]\n 22503: a2 = a2 << 0x8\n 22506: a2 = a2 | a3\n 22509: a4 = a4 << 0x10\n 22512: a5 = a5 << 0x18\n 22515: a4 = a4 | a5\n 22518: a2 = a2 | a4\n 22521: a2 = a2 << 0x20\n 22524: t0 = a2 | a1\n 22527: a2 = u8 [a0 + 0x11]\n 22530: a3 = u8 [a0 + 0x10]\n 22533: a4 = u8 [a0 + 0x12]\n 22536: a5 = u8 [a0 + 0x13]\n 22539: a2 = a2 << 0x8\n 22542: a2 = a2 | a3\n 22545: a4 = a4 << 0x10\n 22548: a5 = a5 << 0x18\n 22551: a4 = a4 | a5\n 22554: a2 = a2 | a4\n 22557: a3 = u8 [a0 + 0x15]\n 22560: a4 = u8 [a0 + 0x14]\n 22563: a5 = u8 [a0 + 0x16]\n 22566: s1 = u8 [a0 + 0x17]\n 22569: a3 = a3 << 0x8\n 22572: a3 = a3 | a4\n 22575: a5 = a5 << 0x10\n 22578: s1 = s1 << 0x18\n 22581: a5 = a5 | s1\n 22584: a3 = a3 | a5\n 22587: a3 = a3 << 0x20\n 22590: a2 = a2 | a3\n 22593: a3 = u8 [a0 + 0x9]\n 22596: a4 = u8 [a0 + 0x8]\n 22599: a5 = u8 [a0 + 0xa]\n 22602: s1 = u8 [a0 + 0xb]\n 22605: a3 = a3 << 0x8\n 22608: a3 = a3 | a4\n 22611: a5 = a5 << 0x10\n 22614: s1 = s1 << 0x18\n 22617: a5 = a5 | s1\n 22620: a3 = a3 | a5\n 22623: a4 = u8 [a0 + 0xd]\n 22626: a5 = u8 [a0 + 0xc]\n 22629: s1 = u8 [a0 + 0xe]\n 22632: a1 = u8 [a0 + 0xf]\n 22635: a4 = a4 << 0x8\n 22638: a4 = a4 | a5\n 22641: s1 = s1 << 0x10\n 22644: a1 = a1 << 0x18\n 22647: a1 = a1 | s1\n 22650: a1 = a1 | a4\n 22653: a1 = a1 << 0x20\n 22656: a3 = a3 | a1\n 22659: a1 = u8 [a0 + 0x1]\n 22662: a4 = u8 [a0]\n 22664: a5 = u8 [a0 + 0x2]\n 22667: s1 = u8 [a0 + 0x3]\n 22670: a1 = a1 << 0x8\n 22673: a1 = a1 | a4\n 22676: a5 = a5 << 0x10\n 22679: s1 = s1 << 0x18\n 22682: a5 = a5 | s1\n 22685: a1 = a1 | a5\n 22688: a4 = u8 [a0 + 0x5]\n 22691: a5 = u8 [a0 + 0x4]\n 22694: s1 = u8 [a0 + 0x6]\n 22697: a0 = u8 [a0 + 0x7]\n 22700: a4 = a4 << 0x8\n 22703: a4 = a4 | a5\n 22706: s1 = s1 << 0x10\n 22709: a0 = a0 << 0x18\n 22712: a0 = a0 | s1\n 22715: a0 = a0 | a4\n 22718: a0 = a0 << 0x20\n 22721: a0 = a0 | a1\n 22724: t1 = reverse a0\n 22726: t2 = reverse a3\n 22728: s1 = reverse a2\n 22730: a5 = reverse t0\n 22732: a1 = u64 [sp + 0x18]\n 22735: a0 = a1 + 0x1f\n 22738: a1 = a0 <u a1\n 22741: a3 = u64 [sp + 0x20]\n 22744: a2 = a3 + a1\n 22747: a3 = a2 <u a3\n 22750: a3 = a1 if a1 == 0\n 22753: a1 = u64 [sp + 0x28]\n 22756: a3 = a3 + a1\n 22759: a1 = a3 <u a1\n 22762: a4 = u64 [sp + 0x30]\n 22765: a1 = a1 + a4\n 22768: a0 = a0 & 0xffffffffffffffe0\n 22771: a0 = a0 + a5\n 22774: u64 [sp + 0x28] = a5\n 22777: u64 [sp + 0x10] = a0\n 22780: a4 = a0 <u a5\n 22783: a2 = a2 + s1\n 22786: a5 = a2 + a4\n 22789: a2 = a5 ^ s1\n 22792: u64 [sp + 0x30] = s1\n 22795: a0 = a5 <u s1\n 22798: a0 = a4 if a2 == 0\n 22801: a3 = a3 + t2\n 22804: a4 = a3 + a0\n 22807: s1 = a4 <u a3\n 22810: a2 = a3 <u t2\n 22813: a1 = a1 + t1\n 22816: a1 = a1 + a2\n 22819: s1 = s1 + a1\n 22822: a1 = a4 >u 0\n 22824: a2 = s1 >u 0\n 22826: a2 = a1 if s1 == 0\n 22829: a1 = a4 | s1\n 22832: u64 [sp + 0x8] = a5\n 22835: a3 = a5 >u 0\n 22837: a3 = a2 if a1 != 0\n 22840: jump @337 if a3 != 0\n      : @334 (gas: 8)\n 22844: a1 = a4 <u t2\n 22847: a2 = s1 ^ t1\n 22850: a3 = s1 <u t1\n 22853: a3 = a1 if a2 == 0\n 22856: a1 = a4 ^ t2\n 22859: a1 = a1 | a2\n 22862: a0 = a3 if a1 != 0\n 22865: jump @337 if a0 != 0\n      : @335 (gas: 6)\n 22869: a0 = 0x40\n 22872: a1 = 0x20\n 22875: u64 [sp + 0x20] = t2\n 22878: u64 [sp + 0x18] = t1\n 22881: u64 [sp] = a4\n 22883: ra = 296, jump @0\n      : @336 [@dyn 148] (gas: 82)\n 22889: a1 = reverse s1\n 22891: a2 = u64 [sp]\n 22893: a2 = reverse a2\n 22895: a3 = u64 [sp + 0x8]\n 22898: a3 = reverse a3\n 22900: a4 = u64 [sp + 0x10]\n 22903: a4 = reverse a4\n 22905: u8 [a0 + 0x18] = a4\n 22908: a5 = a4 >> 0x38\n 22911: u8 [a0 + 0x1f] = a5\n 22914: a5 = a4 >> 0x30\n 22917: u8 [a0 + 0x1e] = a5\n 22920: a5 = a4 >> 0x28\n 22923: u8 [a0 + 0x1d] = a5\n 22926: a5 = a4 >> 0x20\n 22929: u8 [a0 + 0x1c] = a5\n 22932: a5 = a4 >> 0x18\n 22935: u8 [a0 + 0x1b] = a5\n 22938: a5 = a4 >> 0x10\n 22941: u8 [a0 + 0x1a] = a5\n 22944: a4 = a4 >> 0x8\n 22947: u8 [a0 + 0x19] = a4\n 22950: u8 [a0 + 0x10] = a3\n 22953: a4 = a3 >> 0x38\n 22956: u8 [a0 + 0x17] = a4\n 22959: a4 = a3 >> 0x30\n 22962: u8 [a0 + 0x16] = a4\n 22965: a4 = a3 >> 0x28\n 22968: u8 [a0 + 0x15] = a4\n 22971: a4 = a3 >> 0x20\n 22974: u8 [a0 + 0x14] = a4\n 22977: a4 = a3 >> 0x18\n 22980: u8 [a0 + 0x13] = a4\n 22983: a4 = a3 >> 0x10\n 22986: u8 [a0 + 0x12] = a4\n 22989: a3 = a3 >> 0x8\n 22992: u8 [a0 + 0x11] = a3\n 22995: u8 [a0 + 0x8] = a2\n 22998: a3 = a2 >> 0x38\n 23001: u8 [a0 + 0xf] = a3\n 23004: a3 = a2 >> 0x30\n 23007: u8 [a0 + 0xe] = a3\n 23010: a3 = a2 >> 0x28\n 23013: u8 [a0 + 0xd] = a3\n 23016: a3 = a2 >> 0x20\n 23019: u8 [a0 + 0xc] = a3\n 23022: a3 = a2 >> 0x18\n 23025: u8 [a0 + 0xb] = a3\n 23028: a3 = a2 >> 0x10\n 23031: u8 [a0 + 0xa] = a3\n 23034: a2 = a2 >> 0x8\n 23037: u8 [a0 + 0x9] = a2\n 23040: u8 [a0] = a1\n 23042: a2 = a1 >> 0x38\n 23045: u8 [a0 + 0x7] = a2\n 23048: a2 = a1 >> 0x30\n 23051: u8 [a0 + 0x6] = a2\n 23054: a2 = a1 >> 0x28\n 23057: u8 [a0 + 0x5] = a2\n 23060: a2 = a1 >> 0x20\n 23063: u8 [a0 + 0x4] = a2\n 23066: a2 = a1 >> 0x18\n 23069: u8 [a0 + 0x3] = a2\n 23072: a2 = a1 >> 0x10\n 23075: u8 [a0 + 0x2] = a2\n 23078: a1 = a1 >> 0x8\n 23081: u8 [a0 + 0x1] = a1\n 23084: a0 = u64 [sp + 0x38]\n 23087: a1 = u64 [sp + 0x28]\n 23090: u64 [a0] = a1\n 23092: a1 = u64 [sp + 0x18]\n 23095: u64 [a0 + 0x18] = a1\n 23098: a1 = u64 [sp + 0x30]\n 23101: u64 [a0 + 0x8] = a1\n 23104: a1 = u64 [sp + 0x20]\n 23107: u64 [a0 + 0x10] = a1\n 23110: sp = s0 + 0xffffffffffffff60\n 23114: ra = u64 [sp + 0x98]\n 23118: s0 = u64 [sp + 0x90]\n 23122: s1 = u64 [sp + 0x88]\n 23126: sp = sp + 0xa0\n 23130: ret\n      : @337 (gas: 8)\n 23132: u64 [sp + 112] = 0\n 23135: u64 [sp + 104] = 0\n 23138: u64 [sp + 96] = 0\n 23141: a0 = 0x4e487b7100000000\n 23151: a1 = sp + 0x60\n 23154: u64 [sp + 0x78] = a0\n 23157: a0 = 0\n 23159: ra = 298, jump @8\n      : @338 [@dyn 149] (gas: 7)\n 23165: u64 [sp + 88] = 0\n 23168: u64 [sp + 80] = 0\n 23171: u64 [sp + 64] = 0x41\n 23175: a0 = 0x4\n 23178: a1 = sp + 0x40\n 23181: u64 [sp + 72] = 0\n 23184: ra = 300, jump @8\n      : @339 [@dyn 150] (gas: 3)\n 23190: a1 = 0x24\n 23193: a0 = 0\n 23195: ra = 302, jump @0\n      : @340 [@dyn 151] (gas: 6)\n 23201: i32 a1 = a0 + 0\n 23203: a0 = 0x1\n 23206: a2 = 0x24\n 23209: ra = 0x130\n 23213: ecalli 6 // 'seal_return'\n 23215: fallthrough\n      : @341 [@dyn 152] (gas: 7)\n 23216: a4 = u64 [a1 + 0x18]\n 23219: a3 = u64 [a1 + 0x10]\n 23222: a2 = u64 [a1 + 0x8]\n 23225: t0 = a3 | a4\n 23228: a5 = a2 <u 0x1\n 23231: a5 = 0 if t0 != 0\n 23233: jump @343 if a5 == 0\n      : @342 (gas: 16)\n 23236: a1 = u64 [a1]\n 23238: a5 = a3 >> 0x3b\n 23241: a4 = a4 << 0x5\n 23244: a4 = a4 | a5\n 23247: a5 = a2 >> 0x3b\n 23250: a3 = a3 << 0x5\n 23253: a3 = a3 | a5\n 23256: a5 = a1 >> 0x3b\n 23259: a2 = a2 << 0x5\n 23262: a2 = a2 | a5\n 23265: a1 = a1 << 0x5\n 23268: u64 [a0] = a1\n 23270: u64 [a0 + 0x8] = a2\n 23273: u64 [a0 + 0x10] = a3\n 23276: u64 [a0 + 0x18] = a4\n 23279: ret\n      : @343 (gas: 13)\n 23281: sp = sp + 0xffffffffffffffb0\n 23284: u64 [sp + 0x48] = ra\n 23287: u64 [sp + 0x40] = s0\n 23290: s0 = sp + 0x50\n 23293: sp = sp & 0xfffffffffffffff0\n 23296: u64 [sp + 48] = 0\n 23299: u64 [sp + 40] = 0\n 23302: u64 [sp + 32] = 0\n 23305: a0 = 0x4e487b7100000000\n 23315: a1 = sp + 0x20\n 23318: u64 [sp + 0x38] = a0\n 23321: a0 = 0\n 23323: ra = 306, jump @8\n      : @344 [@dyn 153] (gas: 7)\n 23329: u64 [sp + 24] = 0\n 23332: u64 [sp + 16] = 0\n 23335: u64 [sp + 0] = 0x41\n 23338: a0 = 0x4\n 23341: a1 = sp\n 23343: u64 [sp + 8] = 0\n 23346: ra = 308, jump @8\n      : @345 [@dyn 154] (gas: 3)\n 23352: a1 = 0x24\n 23355: a0 = 0\n 23357: ra = 310, jump @0\n      : @346 [@dyn 155] (gas: 6)\n 23363: i32 a1 = a0 + 0\n 23365: a0 = 0x1\n 23368: a2 = 0x24\n 23371: ra = 0x138\n 23375: ecalli 6 // 'seal_return'\n 23377: fallthrough\n      : @347 [@dyn 156] (gas: 13)\n 23378: sp = sp + 0xffffffffffffff60\n 23382: u64 [sp + 0x98] = ra\n 23386: u64 [sp + 0x90] = s0\n 23390: u64 [sp + 0x88] = s1\n 23394: s0 = sp + 0xa0\n 23398: sp = sp & 0xfffffffffffffff0\n 23401: a4 = u64 [a1 + 0x18]\n 23404: a3 = u64 [a1 + 0x10]\n 23407: a2 = u64 [a1 + 0x8]\n 23410: s1 = a3 | a4\n 23413: a5 = a2 <u 0x1\n 23416: a5 = 0 if s1 != 0\n 23418: jump @350 if a5 == 0\n      : @348 (gas: 19)\n 23421: s1 = a0\n 23423: a0 = u64 [a1]\n 23425: a1 = a3 >> 0x3b\n 23428: a4 = a4 << 0x5\n 23431: a4 = a4 | a1\n 23434: a1 = a2 >> 0x3b\n 23437: a3 = a3 << 0x5\n 23440: a1 = a1 | a3\n 23443: a3 = a0 >> 0x3b\n 23446: a2 = a2 << 0x5\n 23449: a2 = a2 | a3\n 23452: a0 = a0 << 0x5\n 23455: u64 [sp + 0x40] = a0\n 23458: u64 [sp + 0x48] = a2\n 23461: u64 [sp + 0x50] = a1\n 23464: a0 = sp + 0x60\n 23467: a1 = sp + 0x40\n 23470: u64 [sp + 0x58] = a4\n 23473: ra = 314, jump @332\n      : @349 [@dyn 157] (gas: 14)\n 23479: a0 = u64 [sp + 0x70]\n 23482: a1 = u64 [sp + 0x78]\n 23485: a2 = u64 [sp + 0x60]\n 23488: a3 = u64 [sp + 0x68]\n 23491: u64 [s1 + 0x10] = a0\n 23494: u64 [s1 + 0x18] = a1\n 23497: u64 [s1] = a2\n 23499: u64 [s1 + 0x8] = a3\n 23502: sp = s0 + 0xffffffffffffff60\n 23506: ra = u64 [sp + 0x98]\n 23510: s0 = u64 [sp + 0x90]\n 23514: s1 = u64 [sp + 0x88]\n 23518: sp = sp + 0xa0\n 23522: ret\n      : @350 (gas: 8)\n 23524: u64 [sp + 48] = 0\n 23527: u64 [sp + 40] = 0\n 23530: u64 [sp + 32] = 0\n 23533: a0 = 0x4e487b7100000000\n 23543: a1 = sp + 0x20\n 23546: u64 [sp + 0x38] = a0\n 23549: a0 = 0\n 23551: ra = 316, jump @8\n      : @351 [@dyn 158] (gas: 7)\n 23557: u64 [sp + 24] = 0\n 23560: u64 [sp + 16] = 0\n 23563: u64 [sp + 0] = 0x41\n 23566: a0 = 0x4\n 23569: a1 = sp\n 23571: u64 [sp + 8] = 0\n 23574: ra = 318, jump @8\n      : @352 [@dyn 159] (gas: 3)\n 23580: a1 = 0x24\n 23583: a0 = 0\n 23585: ra = 320, jump @0\n      : @353 [@dyn 160] (gas: 6)\n 23591: i32 a1 = a0 + 0\n 23593: a0 = 0x1\n 23596: a2 = 0x24\n 23599: ra = 0x142\n 23603: ecalli 6 // 'seal_return'\n 23605: fallthrough\n      : @354 [@dyn 161] (gas: 16)\n 23606: sp = sp + 0xffffffffffffffe8\n 23609: u64 [sp + 0x10] = ra\n 23612: u64 [sp + 0x8] = s0\n 23615: u64 [sp] = s1\n 23617: a2 = u64 [a1 + 0x10]\n 23620: a3 = u64 [a1 + 0x18]\n 23623: a4 = u64 [a1 + 0x8]\n 23626: s1 = u64 [a1]\n 23628: a3 = a3 | a4\n 23631: a1 = s1 | a2\n 23634: a1 = a1 | a3\n 23637: a1 = a1 >> 0x20\n 23640: a2 = a2 | a3\n 23643: a2 = a2 << 0x20\n 23646: a1 = a1 | a2\n 23649: jump @358 if a1 != 0\n      : @355 (gas: 12)\n 23652: a2 = u64 [a0 + 0x18]\n 23655: a3 = u64 [a0 + 0x10]\n 23658: a1 = u64 [a0]\n 23660: a0 = u64 [a0 + 0x8]\n 23663: a4 = a1 | a3\n 23666: a0 = a0 | a2\n 23669: a4 = a4 | a0\n 23672: a4 = a4 >> 0x20\n 23675: a0 = a0 | a3\n 23678: a0 = a0 << 0x20\n 23681: a0 = a0 | a4\n 23684: jump @358 if a0 != 0\n      : @356 (gas: 5)\n 23687: s0 = i32 [0x20004]\n 23692: i32 a0 = a1 + 0\n 23694: i32 s1 = s1 + 0\n 23696: a1 = s1\n 23698: ra = 324, jump @0\n      : @357 [@dyn 162] (gas: 9)\n 23704: i32 a0 = a0 + 0\n 23706: a1 = s1\n 23708: a2 = s0\n 23710: ra = u64 [sp + 0x10]\n 23713: s0 = u64 [sp + 0x8]\n 23716: s1 = u64 [sp]\n 23718: sp = sp + 0x18\n 23721: ecalli 0 // 'call_data_copy'\n 23722: ret\n      : @358 (gas: 1)\n 23724: trap\n      : @359 (gas: 18)\n 23725: sp = sp + 0xfffffffffffffea0\n 23729: u64 [sp + 0x158] = ra\n 23733: u64 [sp + 0x150] = s0\n 23737: u64 [sp + 0x148] = s1\n 23741: s0 = sp + 0x160\n 23745: sp = sp & 0xffffffffffffffe0\n 23748: a2 = u64 [a1 + 0x18]\n 23751: u64 [sp + 0x90] = a2\n 23755: a2 = u64 [a1 + 0x10]\n 23758: u64 [sp + 0x88] = a2\n 23762: a2 = u64 [a1 + 0x8]\n 23765: u64 [sp + 0xb8] = a2\n 23769: a1 = u64 [a1]\n 23771: u64 [sp + 0xb0] = a1\n 23775: u64 [sp + 0x8] = a0\n 23778: a0 = 0x40\n 23781: a1 = 0x20\n 23784: ra = 326, jump @0\n      : @360 [@dyn 163] (gas: 112)\n 23790: u64 [sp + 112] = 0\n 23793: u64 [sp + 120] = 0\n 23796: u64 [sp + 128] = 0\n 23800: ra = 0\n 23802: a1 = u8 [a0 + 0x19]\n 23805: a2 = u8 [a0 + 0x18]\n 23808: a3 = u8 [a0 + 0x1a]\n 23811: a4 = u8 [a0 + 0x1b]\n 23814: a1 = a1 << 0x8\n 23817: a1 = a1 | a2\n 23820: a3 = a3 << 0x10\n 23823: a4 = a4 << 0x18\n 23826: a3 = a3 | a4\n 23829: a1 = a1 | a3\n 23832: a2 = u8 [a0 + 0x1d]\n 23835: a3 = u8 [a0 + 0x1c]\n 23838: a4 = u8 [a0 + 0x1e]\n 23841: a5 = u8 [a0 + 0x1f]\n 23844: a2 = a2 << 0x8\n 23847: a2 = a2 | a3\n 23850: a4 = a4 << 0x10\n 23853: a5 = a5 << 0x18\n 23856: a4 = a4 | a5\n 23859: a2 = a2 | a4\n 23862: a2 = a2 << 0x20\n 23865: t0 = a2 | a1\n 23868: a2 = u8 [a0 + 0x11]\n 23871: a3 = u8 [a0 + 0x10]\n 23874: a4 = u8 [a0 + 0x12]\n 23877: a5 = u8 [a0 + 0x13]\n 23880: a2 = a2 << 0x8\n 23883: a2 = a2 | a3\n 23886: a4 = a4 << 0x10\n 23889: a5 = a5 << 0x18\n 23892: a4 = a4 | a5\n 23895: a2 = a2 | a4\n 23898: a3 = u8 [a0 + 0x15]\n 23901: a4 = u8 [a0 + 0x14]\n 23904: a5 = u8 [a0 + 0x16]\n 23907: s1 = u8 [a0 + 0x17]\n 23910: a3 = a3 << 0x8\n 23913: a3 = a3 | a4\n 23916: a5 = a5 << 0x10\n 23919: s1 = s1 << 0x18\n 23922: a5 = a5 | s1\n 23925: a3 = a3 | a5\n 23928: a3 = a3 << 0x20\n 23931: a2 = a2 | a3\n 23934: a3 = u8 [a0 + 0x9]\n 23937: a4 = u8 [a0 + 0x8]\n 23940: a5 = u8 [a0 + 0xa]\n 23943: s1 = u8 [a0 + 0xb]\n 23946: a3 = a3 << 0x8\n 23949: a3 = a3 | a4\n 23952: a5 = a5 << 0x10\n 23955: s1 = s1 << 0x18\n 23958: a5 = a5 | s1\n 23961: a3 = a3 | a5\n 23964: a4 = u8 [a0 + 0xd]\n 23967: a5 = u8 [a0 + 0xc]\n 23970: s1 = u8 [a0 + 0xe]\n 23973: a1 = u8 [a0 + 0xf]\n 23976: a4 = a4 << 0x8\n 23979: a4 = a4 | a5\n 23982: s1 = s1 << 0x10\n 23985: a1 = a1 << 0x18\n 23988: a1 = a1 | s1\n 23991: a1 = a1 | a4\n 23994: a1 = a1 << 0x20\n 23997: a3 = a3 | a1\n 24000: a1 = u8 [a0 + 0x1]\n 24003: a4 = u8 [a0]\n 24005: a5 = u8 [a0 + 0x2]\n 24008: s1 = u8 [a0 + 0x3]\n 24011: a1 = a1 << 0x8\n 24014: a1 = a1 | a4\n 24017: a5 = a5 << 0x10\n 24020: s1 = s1 << 0x18\n 24023: a5 = a5 | s1\n 24026: a1 = a1 | a5\n 24029: a4 = u8 [a0 + 0x5]\n 24032: a5 = u8 [a0 + 0x4]\n 24035: s1 = u8 [a0 + 0x6]\n 24038: a0 = u8 [a0 + 0x7]\n 24041: a4 = a4 << 0x8\n 24044: a4 = a4 | a5\n 24047: s1 = s1 << 0x10\n 24050: a0 = a0 << 0x18\n 24053: a0 = a0 | s1\n 24056: a0 = a0 | a4\n 24059: a0 = a0 << 0x20\n 24062: a0 = a0 | a1\n 24065: a1 = u64 [sp + 0x88]\n 24069: a4 = reverse a0\n 24071: a0 = reverse a3\n 24073: a3 = reverse a2\n 24075: a2 = u64 [sp + 0x90]\n 24079: a5 = reverse t0\n 24081: i32 s1 = sp + 0x100\n 24085: u64 [sp + 0x40] = s1\n 24088: i32 s1 = sp + 0x120\n 24092: u64 [sp + 0x38] = s1\n 24095: i32 s1 = sp + 0x140\n 24099: u64 [sp + 0x30] = s1\n 24102: u64 [sp + 0x10] = a5\n 24105: u64 [sp + 0x18] = a3\n 24108: u64 [sp + 0xa0] = a3\n 24112: u64 [sp + 0x28] = a0\n 24115: s1 = a0\n 24117: u64 [sp + 0x20] = a4\n 24120: u64 [sp + 0xa8] = a4\n 24124: fallthrough\n      : @361 (gas: 22)\n 24125: u64 [sp + 0x98] = a5\n 24129: u64 [sp + 0x68] = ra\n 24132: u64 [sp + 0x88] = a1\n 24136: u64 [sp + 0x110] = a1\n 24140: a0 = u64 [sp + 0xb8]\n 24144: u64 [sp + 0x108] = a0\n 24148: a0 = u64 [sp + 0xb0]\n 24152: u64 [sp + 0x100] = a0\n 24156: u64 [sp + 0x90] = a2\n 24160: u64 [sp + 0x118] = a2\n 24164: u64 [sp + 312] = 0\n 24168: u64 [sp + 304] = 0\n 24172: u64 [sp + 296] = 0\n 24176: u64 [sp + 288] = 0\n 24180: u32 [sp + 320] = 0x20\n 24185: a2 = 0xffffffffffffffff\n 24188: a0 = 0\n 24190: a1 = u64 [sp + 0x40]\n 24193: a3 = u64 [sp + 0x38]\n 24196: a4 = u64 [sp + 0x30]\n 24199: ecalli 4 // 'get_storage'\n 24201: fallthrough\n      : @362 (gas: 12)\n 24202: a2 = u64 [sp + 0x98]\n 24206: a0 = a2 | s1\n 24209: a1 = u64 [sp + 0xa8]\n 24213: a3 = u64 [sp + 0xa0]\n 24217: a1 = a1 | a3\n 24220: a0 = a0 | a1\n 24223: a0 = a0 >> 0x20\n 24226: u64 [sp + 0x60] = s1\n 24229: a1 = a1 | s1\n 24232: a1 = a1 << 0x20\n 24235: a0 = a0 | a1\n 24238: jump @368 if a0 != 0\n      : @363 (gas: 10)\n 24242: a0 = u64 [sp + 0x138]\n 24246: u64 [sp + 0x58] = a0\n 24249: a0 = u64 [sp + 0x130]\n 24253: u64 [sp + 0x50] = a0\n 24256: a0 = u64 [sp + 0x128]\n 24260: u64 [sp + 0x48] = a0\n 24263: s1 = u64 [sp + 0x120]\n 24267: i32 a0 = a2 + 0\n 24269: a1 = 0x20\n 24272: ra = 328, jump @0\n      : @364 [@dyn 164] (gas: 118)\n 24278: a1 = reverse s1\n 24280: a2 = a1 >> 0x38\n 24283: u8 [a0 + 0x1f] = a2\n 24286: a2 = a1 >> 0x30\n 24289: u8 [a0 + 0x1e] = a2\n 24292: a2 = a1 >> 0x28\n 24295: u8 [a0 + 0x1d] = a2\n 24298: a2 = a1 >> 0x20\n 24301: u8 [a0 + 0x1c] = a2\n 24304: a2 = a1 >> 0x18\n 24307: u8 [a0 + 0x1b] = a2\n 24310: a2 = a1 >> 0x10\n 24313: u8 [a0 + 0x1a] = a2\n 24316: a2 = a1 >> 0x8\n 24319: u8 [a0 + 0x19] = a2\n 24322: u8 [a0 + 0x18] = a1\n 24325: a1 = u64 [sp + 0x48]\n 24328: a1 = reverse a1\n 24330: a2 = a1 >> 0x38\n 24333: u8 [a0 + 0x17] = a2\n 24336: a2 = a1 >> 0x30\n 24339: u8 [a0 + 0x16] = a2\n 24342: a2 = a1 >> 0x28\n 24345: u8 [a0 + 0x15] = a2\n 24348: a2 = a1 >> 0x20\n 24351: u8 [a0 + 0x14] = a2\n 24354: a2 = a1 >> 0x18\n 24357: u8 [a0 + 0x13] = a2\n 24360: a2 = a1 >> 0x10\n 24363: u8 [a0 + 0x12] = a2\n 24366: u8 [a0 + 0x10] = a1\n 24369: a1 = a1 >> 0x8\n 24372: u8 [a0 + 0x11] = a1\n 24375: a1 = u64 [sp + 0x50]\n 24378: a1 = reverse a1\n 24380: a2 = a1 >> 0x38\n 24383: u8 [a0 + 0xf] = a2\n 24386: a2 = a1 >> 0x30\n 24389: u8 [a0 + 0xe] = a2\n 24392: a2 = a1 >> 0x28\n 24395: u8 [a0 + 0xd] = a2\n 24398: a2 = a1 >> 0x20\n 24401: u8 [a0 + 0xc] = a2\n 24404: a2 = a1 >> 0x18\n 24407: u8 [a0 + 0xb] = a2\n 24410: a2 = a1 >> 0x10\n 24413: u8 [a0 + 0xa] = a2\n 24416: a2 = u64 [sp + 0x58]\n 24419: a2 = reverse a2\n 24421: u8 [a0 + 0x8] = a1\n 24424: a1 = a1 >> 0x8\n 24427: u8 [a0 + 0x9] = a1\n 24430: u8 [a0] = a2\n 24432: a1 = a2 >> 0x38\n 24435: u8 [a0 + 0x7] = a1\n 24438: a1 = a2 >> 0x30\n 24441: u8 [a0 + 0x6] = a1\n 24444: a1 = a2 >> 0x28\n 24447: u8 [a0 + 0x5] = a1\n 24450: a1 = a2 >> 0x20\n 24453: u8 [a0 + 0x4] = a1\n 24456: a1 = a2 >> 0x18\n 24459: u8 [a0 + 0x3] = a1\n 24462: a1 = a2 >> 0x10\n 24465: u8 [a0 + 0x2] = a1\n 24468: a2 = a2 >> 0x8\n 24471: u8 [a0 + 0x1] = a2\n 24474: a0 = u64 [sp + 0x98]\n 24478: a1 = a0 + 0x20\n 24481: u64 [sp + 0x58] = a1\n 24484: a2 = a1 <u a0\n 24487: a0 = u64 [sp + 0xa0]\n 24491: t1 = a0 + a2\n 24494: a3 = t1 <u a0\n 24497: a3 = a2 if a2 == 0\n 24500: a0 = u64 [sp + 0x60]\n 24503: t2 = a0 + a3\n 24506: a3 = t2 <u a0\n 24509: a0 = u64 [sp + 0xa8]\n 24513: a0 = a0 + a3\n 24516: u64 [sp + 0xa8] = a0\n 24520: a1 = u64 [sp + 0xb0]\n 24524: a1 = a1 + 0x1\n 24527: a3 = a1 <u 0x1\n 24530: a2 = u64 [sp + 0xb8]\n 24534: a2 = a2 + a3\n 24537: s1 = u64 [sp + 0x70]\n 24540: a3 = s1 <u 0x8\n 24543: s1 = s1 + 0x1\n 24546: a5 = s1 <u 0x1\n 24549: a0 = u64 [sp + 0x78]\n 24552: a3 = 0 if a0 != 0\n 24554: a5 = a5 + a0\n 24557: a4 = s1 | a5\n 24560: a4 = a4 <u 0x1\n 24563: a0 = u64 [sp + 0x80]\n 24567: a4 = a4 + a0\n 24570: t0 = a4 <u a0\n 24573: ra = u64 [sp + 0x68]\n 24576: a0 = a0 | ra\n 24579: ra = ra + t0\n 24582: a3 = 0 if a0 != 0\n 24584: u64 [sp + 0xb8] = a2\n 24588: u64 [sp + 0xb0] = a1\n 24592: a1 = a1 | a2\n 24595: a1 = a1 <u 0x1\n 24598: a0 = u64 [sp + 0x88]\n 24602: a1 = a1 + a0\n 24605: a2 = a1 <u a0\n 24608: a0 = u64 [sp + 0x90]\n 24612: a2 = a2 + a0\n 24615: u64 [sp + 0x70] = s1\n 24618: u64 [sp + 0x78] = a5\n 24621: u64 [sp + 0x80] = a4\n 24625: a5 = u64 [sp + 0x58]\n 24628: u64 [sp + 0xa0] = t1\n 24632: s1 = t2\n 24634: jump @361 if a3 != 0\n      : @365 (gas: 9)\n 24638: a5 = u64 [sp + 0x10]\n 24641: a0 = a5 <u 0xfffffffffffffee0\n 24645: a4 = u64 [sp + 0x18]\n 24648: a0 = 0 if a4 != 0\n 24650: a2 = u64 [sp + 0x28]\n 24653: a3 = u64 [sp + 0x20]\n 24656: a1 = a2 | a3\n 24659: a0 = 0 if a1 != 0\n 24661: jump @369 if a0 == 0\n      : @366 (gas: 14)\n 24665: a0 = a5 + 0x120\n 24669: u64 [sp + 0xb8] = a0\n 24673: s1 = a0 <u a5\n 24676: a0 = a4 + s1\n 24679: u64 [sp + 0xb0] = a0\n 24683: a1 = a0 <u a4\n 24686: a1 = s1 if s1 == 0\n 24689: s1 = a2 + a1\n 24692: a0 = s1 <u a2\n 24695: a0 = a0 + a3\n 24698: u64 [sp + 0xa8] = a0\n 24702: a0 = 0x40\n 24705: a1 = 0x20\n 24708: ra = 330, jump @0\n      : @367 [@dyn 165] (gas: 82)\n 24714: a1 = u64 [sp + 0xa8]\n 24718: a1 = reverse a1\n 24720: a2 = reverse s1\n 24722: a3 = u64 [sp + 0xb0]\n 24726: a3 = reverse a3\n 24728: a4 = u64 [sp + 0xb8]\n 24732: a4 = reverse a4\n 24734: u8 [a0 + 0x18] = a4\n 24737: a5 = a4 >> 0x38\n 24740: u8 [a0 + 0x1f] = a5\n 24743: a5 = a4 >> 0x30\n 24746: u8 [a0 + 0x1e] = a5\n 24749: a5 = a4 >> 0x28\n 24752: u8 [a0 + 0x1d] = a5\n 24755: a5 = a4 >> 0x20\n 24758: u8 [a0 + 0x1c] = a5\n 24761: a5 = a4 >> 0x18\n 24764: u8 [a0 + 0x1b] = a5\n 24767: a5 = a4 >> 0x10\n 24770: u8 [a0 + 0x1a] = a5\n 24773: a4 = a4 >> 0x8\n 24776: u8 [a0 + 0x19] = a4\n 24779: u8 [a0 + 0x10] = a3\n 24782: a4 = a3 >> 0x38\n 24785: u8 [a0 + 0x17] = a4\n 24788: a4 = a3 >> 0x30\n 24791: u8 [a0 + 0x16] = a4\n 24794: a4 = a3 >> 0x28\n 24797: u8 [a0 + 0x15] = a4\n 24800: a4 = a3 >> 0x20\n 24803: u8 [a0 + 0x14] = a4\n 24806: a4 = a3 >> 0x18\n 24809: u8 [a0 + 0x13] = a4\n 24812: a4 = a3 >> 0x10\n 24815: u8 [a0 + 0x12] = a4\n 24818: a3 = a3 >> 0x8\n 24821: u8 [a0 + 0x11] = a3\n 24824: u8 [a0 + 0x8] = a2\n 24827: a3 = a2 >> 0x38\n 24830: u8 [a0 + 0xf] = a3\n 24833: a3 = a2 >> 0x30\n 24836: u8 [a0 + 0xe] = a3\n 24839: a3 = a2 >> 0x28\n 24842: u8 [a0 + 0xd] = a3\n 24845: a3 = a2 >> 0x20\n 24848: u8 [a0 + 0xc] = a3\n 24851: a3 = a2 >> 0x18\n 24854: u8 [a0 + 0xb] = a3\n 24857: a3 = a2 >> 0x10\n 24860: u8 [a0 + 0xa] = a3\n 24863: a2 = a2 >> 0x8\n 24866: u8 [a0 + 0x9] = a2\n 24869: u8 [a0] = a1\n 24871: a2 = a1 >> 0x38\n 24874: u8 [a0 + 0x7] = a2\n 24877: a2 = a1 >> 0x30\n 24880: u8 [a0 + 0x6] = a2\n 24883: a2 = a1 >> 0x28\n 24886: u8 [a0 + 0x5] = a2\n 24889: a2 = a1 >> 0x20\n 24892: u8 [a0 + 0x4] = a2\n 24895: a2 = a1 >> 0x18\n 24898: u8 [a0 + 0x3] = a2\n 24901: a2 = a1 >> 0x10\n 24904: u8 [a0 + 0x2] = a2\n 24907: a1 = a1 >> 0x8\n 24910: u8 [a0 + 0x1] = a1\n 24913: a0 = u64 [sp + 0x8]\n 24916: a1 = u64 [sp + 0x10]\n 24919: u64 [a0] = a1\n 24921: a1 = u64 [sp + 0x20]\n 24924: u64 [a0 + 0x18] = a1\n 24927: a1 = u64 [sp + 0x18]\n 24930: u64 [a0 + 0x8] = a1\n 24933: a1 = u64 [sp + 0x28]\n 24936: u64 [a0 + 0x10] = a1\n 24939: sp = s0 + 0xfffffffffffffea0\n 24943: ra = u64 [sp + 0x158]\n 24947: s0 = u64 [sp + 0x150]\n 24951: s1 = u64 [sp + 0x148]\n 24955: sp = sp + 0x160\n 24959: ret\n      : @368 (gas: 1)\n 24961: trap\n      : @369 (gas: 8)\n 24962: u64 [sp + 240] = 0\n 24966: u64 [sp + 232] = 0\n 24970: u64 [sp + 224] = 0\n 24974: a0 = 0x4e487b7100000000\n 24984: a1 = sp + 0xe0\n 24988: u64 [sp + 0xf8] = a0\n 24992: a0 = 0\n 24994: ra = 332, jump @8\n      : @370 [@dyn 166] (gas: 7)\n 25000: u64 [sp + 216] = 0\n 25004: u64 [sp + 208] = 0\n 25008: u64 [sp + 192] = 0x41\n 25013: a0 = 0x4\n 25016: a1 = sp + 0xc0\n 25020: u64 [sp + 200] = 0\n 25024: ra = 334, jump @8\n      : @371 [@dyn 167] (gas: 3)\n 25030: a1 = 0x24\n 25033: a0 = 0\n 25035: ra = 336, jump @0\n      : @372 [@dyn 168] (gas: 6)\n 25041: i32 a1 = a0 + 0\n 25043: a0 = 0x1\n 25046: a2 = 0x24\n 25049: ra = 0x152\n 25053: ecalli 6 // 'seal_return'\n 25055: fallthrough\n      : @373 [@dyn 169] (gas: 18)\n 25056: sp = sp + 0xffffffffffffffa0\n 25059: u64 [sp + 0x58] = ra\n 25062: u64 [sp + 0x50] = s0\n 25065: u64 [sp + 0x48] = s1\n 25068: s0 = sp + 0x60\n 25071: sp = sp & 0xfffffffffffffff0\n 25074: a2 = u64 [a1]\n 25076: a3 = u64 [a1 + 0x8]\n 25079: a4 = u64 [a1 + 0x10]\n 25082: a1 = u64 [a1 + 0x18]\n 25085: s1 = a0\n 25087: u64 [sp + 0x18] = a1\n 25090: u64 [sp + 0x10] = a4\n 25093: u64 [sp + 0x8] = a3\n 25096: a0 = sp + 0x20\n 25099: a1 = sp\n 25101: u64 [sp] = a2\n 25103: ra = 340, jump @359\n      : @374 [@dyn 170] (gas: 14)\n 25109: a0 = u64 [sp + 0x30]\n 25112: a1 = u64 [sp + 0x38]\n 25115: a2 = u64 [sp + 0x20]\n 25118: a3 = u64 [sp + 0x28]\n 25121: u64 [s1 + 0x10] = a0\n 25124: u64 [s1 + 0x18] = a1\n 25127: u64 [s1] = a2\n 25129: u64 [s1 + 0x8] = a3\n 25132: sp = s0 + 0xffffffffffffffa0\n 25135: ra = u64 [sp + 0x58]\n 25138: s0 = u64 [sp + 0x50]\n 25141: s1 = u64 [sp + 0x48]\n 25144: sp = sp + 0x60\n 25147: ret\n      : @375 [@dyn 171] (gas: 12)\n 25149: a1 = u64 [sp + 0x98]\n 25153: a2 = u64 [sp + 0x90]\n 25157: a3 = u64 [sp + 0x88]\n 25161: a0 = u64 [sp + 0x80]\n 25165: a1 = a1 | a3\n 25168: a3 = a0 | a2\n 25171: a3 = a3 | a1\n 25174: a3 = a3 >> 0x20\n 25177: a1 = a1 | a2\n 25180: a1 = a1 << 0x20\n 25183: a1 = a1 | a3\n 25186: jump @382 if a1 != 0\n      : @376 (gas: 4)\n 25190: s1 = i32 [0x20004]\n 25195: i32 a0 = a0 + 0\n 25197: a1 = 0x120\n 25201: ra = 344, jump @0\n      : @377 [@dyn 172] (gas: 10)\n 25207: i32 a0 = a0 + 0\n 25209: a1 = 0x120\n 25213: a2 = s1\n 25215: ecalli 0 // 'call_data_copy'\n 25216: a0 = u64 [sp]\n 25218: a0 = a0 << 0x20\n 25221: s1 = a0 >> 0x20\n 25224: a1 = 0x20\n 25227: a0 = 0\n 25229: ra = 346, jump @0\n      : @378 [@dyn 173] (gas: 58)\n 25235: a1 = reverse s1\n 25237: a2 = u64 [sp + 0x8]\n 25240: a2 = reverse a2\n 25242: a3 = u64 [sp + 0x10]\n 25245: a3 = reverse a3\n 25247: a4 = a3 >> 0x38\n 25250: u8 [a0 + 0x1f] = a4\n 25253: a4 = a3 >> 0x30\n 25256: u8 [a0 + 0x1e] = a4\n 25259: a4 = a3 >> 0x28\n 25262: u8 [a0 + 0x1d] = a4\n 25265: a4 = a3 >> 0x20\n 25268: u8 [a0 + 0x1c] = a4\n 25271: a4 = a3 >> 0x18\n 25274: u8 [a0 + 0x1b] = a4\n 25277: a4 = a3 >> 0x10\n 25280: u8 [a0 + 0x1a] = a4\n 25283: a4 = a3 >> 0x8\n 25286: u8 [a0 + 0x19] = a4\n 25289: u8 [a0 + 0x18] = a3\n 25292: a3 = a2 >> 0x38\n 25295: u8 [a0 + 0x17] = a3\n 25298: a3 = a2 >> 0x30\n 25301: u8 [a0 + 0x16] = a3\n 25304: a3 = a2 >> 0x28\n 25307: u8 [a0 + 0x15] = a3\n 25310: a3 = a2 >> 0x20\n 25313: u8 [a0 + 0x14] = a3\n 25316: a3 = a2 >> 0x18\n 25319: u8 [a0 + 0x13] = a3\n 25322: a3 = a2 >> 0x10\n 25325: u8 [a0 + 0x12] = a3\n 25328: a3 = a2 >> 0x8\n 25331: u8 [a0 + 0x11] = a3\n 25334: u8 [a0 + 0x10] = a2\n 25337: a2 = a1 >> 0x38\n 25340: u8 [a0 + 0xf] = a2\n 25343: a2 = a1 >> 0x30\n 25346: u8 [a0 + 0xe] = a2\n 25349: a2 = a1 >> 0x28\n 25352: u8 [a0 + 0xd] = a2\n 25355: a2 = a1 >> 0x20\n 25358: u8 [a0 + 0xc] = a2\n 25361: u8 [a0 + 11] = 0\n 25364: u8 [a0 + 10] = 0\n 25367: u8 [a0 + 9] = 0\n 25370: u8 [a0 + 0x8] = a1\n 25373: u8 [a0 + 7] = 0\n 25376: u8 [a0 + 6] = 0\n 25379: u8 [a0 + 5] = 0\n 25382: u8 [a0 + 4] = 0\n 25385: u8 [a0 + 3] = 0\n 25388: u8 [a0 + 2] = 0\n 25391: u8 [a0 + 1] = 0\n 25394: u8 [a0 + 0] = 0\n 25396: a0 = 0x20\n 25399: a1 = 0x20\n 25402: ra = 348, jump @0\n      : @379 [@dyn 174] (gas: 35)\n 25408: u8 [a0 + 31] = 0\n 25411: u8 [a0 + 30] = 0\n 25414: u8 [a0 + 29] = 0\n 25417: u8 [a0 + 28] = 0\n 25420: u8 [a0 + 27] = 0\n 25423: u8 [a0 + 26] = 0\n 25426: u8 [a0 + 25] = 0\n 25429: u8 [a0 + 24] = 0\n 25432: u8 [a0 + 23] = 0\n 25435: u8 [a0 + 22] = 0\n 25438: u8 [a0 + 21] = 0\n 25441: u8 [a0 + 20] = 0\n 25444: u8 [a0 + 19] = 0\n 25447: u8 [a0 + 18] = 0\n 25450: u8 [a0 + 17] = 0\n 25453: u8 [a0 + 16] = 0\n 25456: u8 [a0 + 15] = 0\n 25459: u8 [a0 + 14] = 0\n 25462: u8 [a0 + 13] = 0\n 25465: u8 [a0 + 12] = 0\n 25468: u8 [a0 + 11] = 0\n 25471: u8 [a0 + 10] = 0\n 25474: u8 [a0 + 9] = 0\n 25477: u8 [a0 + 8] = 0\n 25480: u8 [a0 + 7] = 0\n 25483: u8 [a0 + 6] = 0\n 25486: u8 [a0 + 5] = 0\n 25489: u8 [a0 + 4] = 0\n 25492: u8 [a0 + 3] = 0\n 25495: u8 [a0 + 2] = 0\n 25498: u8 [a0 + 1] = 0\n 25501: u8 [a0 + 0] = 0\n 25503: a1 = 0x40\n 25506: a0 = 0\n 25508: ra = 350, jump @0\n      : @380 [@dyn 175] (gas: 19)\n 25514: i32 a0 = a0 + 0\n 25516: i32 a2 = sp + 0xa0\n 25520: a1 = 0x40\n 25523: ecalli 5 // 'hash_keccak_256'\n 25525: a0 = u64 [sp + 0xb8]\n 25529: a1 = u64 [sp + 0xb0]\n 25533: a2 = u64 [sp + 0xa8]\n 25537: a3 = u64 [sp + 0xa0]\n 25541: a4 = reverse a0\n 25543: a0 = reverse a1\n 25545: a1 = reverse a2\n 25547: a2 = reverse a3\n 25549: u64 [sp + 0x38] = a2\n 25552: u64 [sp + 0x30] = a1\n 25555: u64 [sp + 0x28] = a0\n 25558: a0 = sp + 0x40\n 25561: a1 = sp + 0x20\n 25564: u64 [sp + 0x20] = a4\n 25567: ra = 352, jump @359\n      : @381 [@dyn 176] (gas: 15)\n 25573: a0 = u64 [sp + 0x50]\n 25576: a1 = u64 [sp + 0x58]\n 25579: a2 = u64 [sp + 0x40]\n 25582: a3 = u64 [sp + 0x48]\n 25585: a4 = u64 [sp + 0x18]\n 25588: u64 [a4 + 0x10] = a0\n 25591: u64 [a4 + 0x18] = a1\n 25594: u64 [a4] = a2\n 25596: u64 [a4 + 0x8] = a3\n 25599: sp = s0 + 0xffffffffffffff20\n 25603: ra = u64 [sp + 0xd8]\n 25607: s0 = u64 [sp + 0xd0]\n 25611: s1 = u64 [sp + 0xc8]\n 25615: sp = sp + 0xe0\n 25619: ret\n      : @382 (gas: 1)\n 25621: trap\n      : @383 (gas: 17)\n 25622: sp = sp + 0xffffffffffffffa0\n 25625: u64 [sp + 0x58] = ra\n 25628: u64 [sp + 0x50] = s0\n 25631: u64 [sp + 0x48] = s1\n 25634: a3 = u64 [a1 + 0x18]\n 25637: a4 = u64 [a1 + 0x10]\n 25640: a5 = u64 [a1 + 0x8]\n 25643: s1 = u64 [a1]\n 25645: a1 = a5 | a3\n 25648: a2 = s1 | a4\n 25651: a2 = a2 | a1\n 25654: a2 = a2 >> 0x20\n 25657: a1 = a1 | a4\n 25660: a1 = a1 << 0x20\n 25663: a1 = a1 | a2\n 25666: u64 [sp + 0x28] = a0\n 25669: jump @390 if a1 != 0\n      : @384 (gas: 19)\n 25673: a0 = s1 + 0x20\n 25676: u64 [sp + 0x30] = a0\n 25679: a0 = a0 <u s1\n 25682: a1 = a5 + a0\n 25685: u64 [sp + 0x40] = a1\n 25688: u64 [sp + 0x8] = a5\n 25691: s0 = a1 <u a5\n 25694: s0 = a0 if a0 == 0\n 25697: s0 = s0 + a4\n 25700: u64 [sp + 0x10] = a4\n 25703: a0 = s0 <u a4\n 25706: u64 [sp + 0x18] = a3\n 25709: a0 = a0 + a3\n 25712: u64 [sp + 0x38] = a0\n 25715: u64 [sp] = s1\n 25717: i32 a0 = s1 + 0\n 25719: a1 = 0x20\n 25722: s1 = 0x20\n 25725: ra = 354, jump @0\n      : @385 [@dyn 177] (gas: 45)\n 25731: u8 [a0 + 0x1f] = s1\n 25734: a1 = u64 [sp + 0x30]\n 25737: s1 = a1\n 25739: a1 = a1 | s0\n 25742: a2 = u64 [sp + 0x40]\n 25745: a4 = u64 [sp + 0x38]\n 25748: a2 = a2 | a4\n 25751: a1 = a1 | a2\n 25754: a1 = a1 >> 0x20\n 25757: u64 [sp + 0x20] = s0\n 25760: a2 = a2 | s0\n 25763: a2 = a2 << 0x20\n 25766: a1 = a1 | a2\n 25769: u8 [a0 + 30] = 0\n 25772: u8 [a0 + 29] = 0\n 25775: u8 [a0 + 28] = 0\n 25778: u8 [a0 + 27] = 0\n 25781: u8 [a0 + 26] = 0\n 25784: u8 [a0 + 25] = 0\n 25787: u8 [a0 + 24] = 0\n 25790: u8 [a0 + 23] = 0\n 25793: u8 [a0 + 22] = 0\n 25796: u8 [a0 + 21] = 0\n 25799: u8 [a0 + 20] = 0\n 25802: u8 [a0 + 19] = 0\n 25805: u8 [a0 + 18] = 0\n 25808: u8 [a0 + 17] = 0\n 25811: u8 [a0 + 16] = 0\n 25814: u8 [a0 + 15] = 0\n 25817: u8 [a0 + 14] = 0\n 25820: u8 [a0 + 13] = 0\n 25823: u8 [a0 + 12] = 0\n 25826: u8 [a0 + 11] = 0\n 25829: u8 [a0 + 10] = 0\n 25832: u8 [a0 + 9] = 0\n 25835: u8 [a0 + 8] = 0\n 25838: u8 [a0 + 7] = 0\n 25841: u8 [a0 + 6] = 0\n 25844: u8 [a0 + 5] = 0\n 25847: u8 [a0 + 4] = 0\n 25850: u8 [a0 + 3] = 0\n 25853: u8 [a0 + 2] = 0\n 25856: u8 [a0 + 1] = 0\n 25859: u8 [a0 + 0] = 0\n 25861: jump @390 if a1 != 0\n      : @386 (gas: 4)\n 25865: i32 s0 = s1 + 0\n 25867: a1 = 0x20\n 25870: a0 = s0\n 25872: ra = 356, jump @0\n      : @387 [@dyn 178] (gas: 41)\n 25878: u8 [a0 + 31] = 0xf\n 25882: u8 [a0 + 30] = 0\n 25885: u8 [a0 + 29] = 0\n 25888: u8 [a0 + 28] = 0\n 25891: u8 [a0 + 27] = 0\n 25894: u8 [a0 + 26] = 0\n 25897: u8 [a0 + 25] = 0\n 25900: u8 [a0 + 24] = 0\n 25903: u8 [a0 + 23] = 0\n 25906: u8 [a0 + 22] = 0\n 25909: u8 [a0 + 21] = 0\n 25912: u8 [a0 + 20] = 0\n 25915: u8 [a0 + 19] = 0\n 25918: u8 [a0 + 18] = 0\n 25921: u8 [a0 + 17] = 0\n 25924: u8 [a0 + 16] = 0\n 25927: u8 [a0 + 15] = 0\n 25930: u8 [a0 + 14] = 0\n 25933: u8 [a0 + 13] = 0\n 25936: u8 [a0 + 12] = 0\n 25939: u8 [a0 + 11] = 0\n 25942: u8 [a0 + 10] = 0\n 25945: u8 [a0 + 9] = 0\n 25948: u8 [a0 + 8] = 0\n 25951: u8 [a0 + 7] = 0\n 25954: u8 [a0 + 6] = 0\n 25957: u8 [a0 + 5] = 0\n 25960: u8 [a0 + 4] = 0\n 25963: u8 [a0 + 3] = 0\n 25966: u8 [a0 + 2] = 0\n 25969: u8 [a0 + 1] = 0\n 25972: a1 = u64 [sp + 0x20]\n 25975: a2 = u64 [sp + 0x38]\n 25978: a1 = a1 | a2\n 25981: a2 = 0xffffffe0\n 25991: a2 = s1 <u a2\n 25994: a3 = u64 [sp + 0x40]\n 25997: a2 = 0 if a3 != 0\n 25999: a2 = 0 if a1 != 0\n 26001: u8 [a0 + 0] = 0\n 26003: jump @390 if a2 == 0\n      : @388 (gas: 3)\n 26007: i32 a0 = s0 + 0x20\n 26010: a1 = 0x20\n 26013: ra = 358, jump @0\n      : @389 [@dyn 179] (gas: 54)\n 26019: u8 [a0 + 31] = 0\n 26022: u8 [a0 + 30] = 0\n 26025: u8 [a0 + 29] = 0\n 26028: u8 [a0 + 28] = 0\n 26031: u8 [a0 + 27] = 0\n 26034: u8 [a0 + 26] = 0\n 26037: u8 [a0 + 25] = 0\n 26040: u8 [a0 + 24] = 0\n 26043: u8 [a0 + 23] = 0\n 26046: u8 [a0 + 22] = 0\n 26049: u8 [a0 + 21] = 0\n 26052: u8 [a0 + 20] = 0\n 26055: u8 [a0 + 19] = 0\n 26058: u8 [a0 + 18] = 0\n 26061: u8 [a0 + 17] = 0\n 26064: u8 [a0 + 16] = 0\n 26067: u8 [a0 + 15] = 0\n 26070: u8 [a0 + 14] = 0x73\n 26074: u8 [a0 + 13] = 0x73\n 26078: u8 [a0 + 12] = 0x65\n 26082: u8 [a0 + 11] = 0x72\n 26086: u8 [a0 + 10] = 0x64\n 26090: u8 [a0 + 9] = 0x64\n 26094: u8 [a0 + 8] = 0x61\n 26098: u8 [a0 + 7] = 0x20\n 26102: u8 [a0 + 6] = 0x64\n 26106: u8 [a0 + 5] = 0x69\n 26110: u8 [a0 + 4] = 0x6c\n 26114: u8 [a0 + 3] = 0x61\n 26118: u8 [a0 + 2] = 0x76\n 26122: u8 [a0 + 1] = 0x6e\n 26126: u8 [a0 + 0] = 0x49\n 26129: a1 = u64 [sp]\n 26131: a0 = a1 + 0x60\n 26134: a1 = a0 <u a1\n 26137: a3 = u64 [sp + 0x8]\n 26140: a2 = a3 + a1\n 26143: a3 = a2 <u a3\n 26146: a3 = a1 if a1 == 0\n 26149: a1 = u64 [sp + 0x10]\n 26152: a3 = a3 + a1\n 26155: a1 = a3 <u a1\n 26158: a4 = u64 [sp + 0x18]\n 26161: a1 = a1 + a4\n 26164: a4 = u64 [sp + 0x28]\n 26167: u64 [a4] = a0\n 26169: u64 [a4 + 0x8] = a2\n 26172: u64 [a4 + 0x10] = a3\n 26175: u64 [a4 + 0x18] = a1\n 26178: ra = u64 [sp + 0x58]\n 26181: s0 = u64 [sp + 0x50]\n 26184: s1 = u64 [sp + 0x48]\n 26187: sp = sp + 0x60\n 26190: ret\n      : @390 (gas: 1)\n 26192: trap\n      : @391 (gas: 12)\n 26193: sp = sp + 0xfffffffffffffe80\n 26197: u64 [sp + 0x178] = ra\n 26201: u64 [sp + 0x170] = s0\n 26205: u64 [sp + 0x168] = s1\n 26209: s0 = sp + 0x180\n 26213: sp = sp & 0xffffffffffffffe0\n 26216: a3 = u32 [a0 + 0x10]\n 26219: a2 = u64 [a0]\n 26221: s1 = u64 [a0 + 0x8]\n 26224: a0 = a2 | a3\n 26227: a0 = a0 | s1\n 26230: jump @399 if a0 == 0\n      : @392 (gas: 15)\n 26234: u64 [sp + 0x10] = a3\n 26237: u64 [sp + 0x18] = a2\n 26240: a2 = u64 [a1 + 0x18]\n 26243: a0 = u64 [a1]\n 26245: a3 = u64 [a1 + 0x8]\n 26248: a1 = u64 [a1 + 0x10]\n 26251: u64 [sp + 0x28] = a0\n 26254: a0 = a0 <u 0x9\n 26257: u64 [sp + 0x20] = a3\n 26260: a0 = 0 if a3 != 0\n 26262: u64 [sp + 0x38] = a2\n 26265: u64 [sp + 0x30] = a1\n 26268: a1 = a1 | a2\n 26271: a0 = 0 if a1 != 0\n 26273: jump @404 if a0 == 0\n      : @393 (gas: 3)\n 26277: a1 = 0x20\n 26280: a0 = 0\n 26282: ra = 360, jump @0\n      : @394 [@dyn 180] (gas: 58)\n 26288: a1 = u64 [sp + 0x10]\n 26291: a1 = reverse a1\n 26293: a2 = reverse s1\n 26295: a3 = u64 [sp + 0x18]\n 26298: a3 = reverse a3\n 26300: a4 = a3 >> 0x38\n 26303: u8 [a0 + 0x1f] = a4\n 26306: a4 = a3 >> 0x30\n 26309: u8 [a0 + 0x1e] = a4\n 26312: a4 = a3 >> 0x28\n 26315: u8 [a0 + 0x1d] = a4\n 26318: a4 = a3 >> 0x20\n 26321: u8 [a0 + 0x1c] = a4\n 26324: a4 = a3 >> 0x18\n 26327: u8 [a0 + 0x1b] = a4\n 26330: a4 = a3 >> 0x10\n 26333: u8 [a0 + 0x1a] = a4\n 26336: a4 = a3 >> 0x8\n 26339: u8 [a0 + 0x19] = a4\n 26342: u8 [a0 + 0x18] = a3\n 26345: u8 [a0 + 0x10] = a2\n 26348: u8 [a0 + 11] = 0\n 26351: u8 [a0 + 10] = 0\n 26354: u8 [a0 + 9] = 0\n 26357: u8 [a0 + 7] = 0\n 26360: u8 [a0 + 6] = 0\n 26363: u8 [a0 + 5] = 0\n 26366: u8 [a0 + 4] = 0\n 26369: u8 [a0 + 3] = 0\n 26372: u8 [a0 + 2] = 0\n 26375: u8 [a0 + 1] = 0\n 26378: u8 [a0 + 0] = 0\n 26380: a3 = a2 >> 0x38\n 26383: u8 [a0 + 0x17] = a3\n 26386: a3 = a2 >> 0x30\n 26389: u8 [a0 + 0x16] = a3\n 26392: a3 = a2 >> 0x28\n 26395: u8 [a0 + 0x15] = a3\n 26398: a3 = a2 >> 0x20\n 26401: u8 [a0 + 0x14] = a3\n 26404: a3 = a2 >> 0x18\n 26407: u8 [a0 + 0x13] = a3\n 26410: a3 = a2 >> 0x10\n 26413: u8 [a0 + 0x12] = a3\n 26416: a2 = a2 >> 0x8\n 26419: u8 [a0 + 0x11] = a2\n 26422: u8 [a0 + 0x8] = a1\n 26425: a2 = a1 >> 0x38\n 26428: u8 [a0 + 0xf] = a2\n 26431: a2 = a1 >> 0x30\n 26434: u8 [a0 + 0xe] = a2\n 26437: a2 = a1 >> 0x28\n 26440: u8 [a0 + 0xd] = a2\n 26443: a1 = a1 >> 0x20\n 26446: u8 [a0 + 0xc] = a1\n 26449: a0 = 0x20\n 26452: a1 = 0x20\n 26455: ra = 362, jump @0\n      : @395 [@dyn 181] (gas: 35)\n 26461: u8 [a0 + 31] = 0\n 26464: u8 [a0 + 30] = 0\n 26467: u8 [a0 + 29] = 0\n 26470: u8 [a0 + 28] = 0\n 26473: u8 [a0 + 27] = 0\n 26476: u8 [a0 + 26] = 0\n 26479: u8 [a0 + 25] = 0\n 26482: u8 [a0 + 24] = 0\n 26485: u8 [a0 + 23] = 0\n 26488: u8 [a0 + 22] = 0\n 26491: u8 [a0 + 21] = 0\n 26494: u8 [a0 + 20] = 0\n 26497: u8 [a0 + 19] = 0\n 26500: u8 [a0 + 18] = 0\n 26503: u8 [a0 + 17] = 0\n 26506: u8 [a0 + 16] = 0\n 26509: u8 [a0 + 15] = 0\n 26512: u8 [a0 + 14] = 0\n 26515: u8 [a0 + 13] = 0\n 26518: u8 [a0 + 12] = 0\n 26521: u8 [a0 + 11] = 0\n 26524: u8 [a0 + 10] = 0\n 26527: u8 [a0 + 9] = 0\n 26530: u8 [a0 + 8] = 0\n 26533: u8 [a0 + 7] = 0\n 26536: u8 [a0 + 6] = 0\n 26539: u8 [a0 + 5] = 0\n 26542: u8 [a0 + 4] = 0\n 26545: u8 [a0 + 3] = 0\n 26548: u8 [a0 + 2] = 0\n 26551: u8 [a0 + 1] = 0\n 26554: u8 [a0 + 0] = 0\n 26556: a1 = 0x40\n 26559: a0 = 0\n 26561: ra = 364, jump @0\n      : @396 [@dyn 182] (gas: 50)\n 26567: i32 a0 = a0 + 0\n 26569: i32 a2 = sp + 0x140\n 26573: a1 = 0x40\n 26576: ecalli 5 // 'hash_keccak_256'\n 26578: a0 = u64 [sp + 0x140]\n 26582: a1 = u64 [sp + 0x148]\n 26586: a2 = u64 [sp + 0x158]\n 26590: a3 = u64 [sp + 0x150]\n 26594: a0 = reverse a0\n 26596: a1 = reverse a1\n 26598: a2 = reverse a2\n 26600: a3 = reverse a3\n 26602: a4 = u64 [sp + 0x20]\n 26605: a4 = a4 + a3\n 26608: a5 = u64 [sp + 0x28]\n 26611: a5 = a5 + a2\n 26614: a2 = a5 <u a2\n 26617: s1 = a4 + a2\n 26620: a4 = s1 ^ a3\n 26623: a3 = s1 <u a3\n 26626: a3 = a2 if a4 == 0\n 26629: a2 = u64 [sp + 0x30]\n 26632: a2 = a2 + a1\n 26635: a3 = a3 + a2\n 26638: t0 = a3 <u a2\n 26641: a4 = u64 [sp + 0x38]\n 26644: a0 = a0 + a4\n 26647: a1 = a2 <u a1\n 26650: a0 = a0 + a1\n 26653: a0 = a0 + t0\n 26656: u64 [sp + 0x30] = s1\n 26659: u64 [sp + 0x128] = s1\n 26663: u64 [sp + 0x38] = a5\n 26666: u64 [sp + 0x120] = a5\n 26670: u64 [sp + 0x28] = a3\n 26673: u64 [sp + 0x130] = a3\n 26677: u64 [sp + 0x20] = a0\n 26680: u64 [sp + 0x138] = a0\n 26684: u64 [sp + 344] = 0\n 26688: u64 [sp + 336] = 0\n 26692: u64 [sp + 328] = 0\n 26696: u64 [sp + 320] = 0\n 26700: u32 [sp + 256] = 0x20\n 26705: i32 a1 = sp + 0x120\n 26709: i32 a3 = sp + 0x140\n 26713: i32 a4 = sp + 0x100\n 26717: a2 = 0xffffffffffffffff\n 26720: a0 = 0\n 26722: ecalli 4 // 'get_storage'\n 26724: fallthrough\n      : @397 (gas: 19)\n 26725: s1 = u64 [sp + 0x140]\n 26729: a0 = u64 [sp + 0x158]\n 26733: a1 = u64 [sp + 0x148]\n 26737: a2 = u64 [sp + 0x150]\n 26741: s1 = s1 + 0x1\n 26744: a3 = s1 <u 0x1\n 26747: a3 = a3 + a1\n 26750: a1 = s1 | a3\n 26753: a1 = a1 <u 0x1\n 26756: a4 = a2 + a1\n 26759: a1 = a4 <u a2\n 26762: a0 = a0 + a1\n 26765: u64 [sp + 0x18] = a3\n 26768: u64 [sp + 0x8] = a0\n 26771: a0 = a0 | a3\n 26774: u64 [sp + 0x10] = a4\n 26777: a1 = s1 | a4\n 26780: a0 = a0 | a1\n 26783: jump @411 if a0 == 0\n      : @398 (gas: 46)\n 26787: a0 = u64 [sp + 0x28]\n 26790: u64 [sp + 0x130] = a0\n 26794: a0 = u64 [sp + 0x30]\n 26797: u64 [sp + 0x128] = a0\n 26801: a0 = u64 [sp + 0x38]\n 26804: u64 [sp + 0x120] = a0\n 26808: a0 = u64 [sp + 0x20]\n 26811: u64 [sp + 0x138] = a0\n 26815: u64 [sp + 344] = 0\n 26819: u64 [sp + 336] = 0\n 26823: u64 [sp + 328] = 0\n 26827: u64 [sp + 320] = 0\n 26831: u32 [sp + 256] = 0x20\n 26836: i32 a1 = sp + 0x120\n 26840: i32 a3 = sp + 0x140\n 26844: i32 a4 = sp + 0x100\n 26848: a2 = 0xffffffffffffffff\n 26851: a0 = 0\n 26853: ecalli 4 // 'get_storage'\n 26855: a0 = u64 [sp + 0x20]\n 26858: u64 [sp + 0x138] = a0\n 26862: a0 = u64 [sp + 0x28]\n 26865: u64 [sp + 0x130] = a0\n 26869: a0 = u64 [sp + 0x30]\n 26872: u64 [sp + 0x128] = a0\n 26876: a0 = u64 [sp + 0x38]\n 26879: u64 [sp + 0x120] = a0\n 26883: a0 = u64 [sp + 0x8]\n 26886: u64 [sp + 0x158] = a0\n 26890: a0 = u64 [sp + 0x10]\n 26893: u64 [sp + 0x150] = a0\n 26897: a0 = u64 [sp + 0x18]\n 26900: u64 [sp + 0x148] = a0\n 26904: u64 [sp + 0x140] = s1\n 26908: i32 a1 = sp + 0x120\n 26912: i32 a3 = sp + 0x140\n 26916: a2 = 0xffffffffffffffff\n 26919: a4 = 0x20\n 26922: a0 = 0\n 26924: ecalli 8 // 'set_storage'\n 26926: sp = s0 + 0xfffffffffffffe80\n 26930: ra = u64 [sp + 0x178]\n 26934: s0 = u64 [sp + 0x170]\n 26938: s1 = u64 [sp + 0x168]\n 26942: sp = sp + 0x180\n 26946: ret\n      : @399 (gas: 3)\n 26948: a0 = 0x40\n 26951: a1 = 0x20\n 26954: ra = 366, jump @0\n      : @400 [@dyn 183] (gas: 103)\n 26960: a1 = u8 [a0 + 0x11]\n 26963: a2 = u8 [a0 + 0x10]\n 26966: a3 = u8 [a0 + 0x12]\n 26969: a4 = u8 [a0 + 0x13]\n 26972: a1 = a1 << 0x8\n 26975: a1 = a1 | a2\n 26978: a3 = a3 << 0x10\n 26981: a4 = a4 << 0x18\n 26984: a3 = a3 | a4\n 26987: a1 = a1 | a3\n 26990: a2 = u8 [a0 + 0x15]\n 26993: a3 = u8 [a0 + 0x14]\n 26996: a4 = u8 [a0 + 0x16]\n 26999: a5 = u8 [a0 + 0x17]\n 27002: a2 = a2 << 0x8\n 27005: a2 = a2 | a3\n 27008: a4 = a4 << 0x10\n 27011: a5 = a5 << 0x18\n 27014: a4 = a4 | a5\n 27017: a2 = a2 | a4\n 27020: a2 = a2 << 0x20\n 27023: t0 = a2 | a1\n 27026: a2 = u8 [a0 + 0x1]\n 27029: a3 = u8 [a0]\n 27031: a4 = u8 [a0 + 0x2]\n 27034: a5 = u8 [a0 + 0x3]\n 27037: a2 = a2 << 0x8\n 27040: a2 = a2 | a3\n 27043: a4 = a4 << 0x10\n 27046: a5 = a5 << 0x18\n 27049: a4 = a4 | a5\n 27052: a2 = a2 | a4\n 27055: a3 = u8 [a0 + 0x5]\n 27058: a4 = u8 [a0 + 0x4]\n 27061: a5 = u8 [a0 + 0x6]\n 27064: s1 = u8 [a0 + 0x7]\n 27067: a3 = a3 << 0x8\n 27070: a3 = a3 | a4\n 27073: a5 = a5 << 0x10\n 27076: s1 = s1 << 0x18\n 27079: a5 = a5 | s1\n 27082: a3 = a3 | a5\n 27085: a3 = a3 << 0x20\n 27088: a2 = a2 | a3\n 27091: a3 = u8 [a0 + 0x19]\n 27094: a4 = u8 [a0 + 0x18]\n 27097: a5 = u8 [a0 + 0x1a]\n 27100: s1 = u8 [a0 + 0x1b]\n 27103: a3 = a3 << 0x8\n 27106: a3 = a3 | a4\n 27109: a5 = a5 << 0x10\n 27112: s1 = s1 << 0x18\n 27115: a5 = a5 | s1\n 27118: a3 = a3 | a5\n 27121: a4 = u8 [a0 + 0x1d]\n 27124: a5 = u8 [a0 + 0x1c]\n 27127: s1 = u8 [a0 + 0x1e]\n 27130: a1 = u8 [a0 + 0x1f]\n 27133: a4 = a4 << 0x8\n 27136: a4 = a4 | a5\n 27139: s1 = s1 << 0x10\n 27142: a1 = a1 << 0x18\n 27145: a1 = a1 | s1\n 27148: a1 = a1 | a4\n 27151: a1 = a1 << 0x20\n 27154: a3 = a3 | a1\n 27157: a1 = u8 [a0 + 0x9]\n 27160: a4 = u8 [a0 + 0x8]\n 27163: a5 = u8 [a0 + 0xa]\n 27166: s1 = u8 [a0 + 0xb]\n 27169: a1 = a1 << 0x8\n 27172: a1 = a1 | a4\n 27175: a5 = a5 << 0x10\n 27178: s1 = s1 << 0x18\n 27181: a5 = a5 | s1\n 27184: a1 = a1 | a5\n 27187: a4 = u8 [a0 + 0xd]\n 27190: a5 = u8 [a0 + 0xc]\n 27193: s1 = u8 [a0 + 0xe]\n 27196: a0 = u8 [a0 + 0xf]\n 27199: a4 = a4 << 0x8\n 27202: a4 = a4 | a5\n 27205: s1 = s1 << 0x10\n 27208: a0 = a0 << 0x18\n 27211: a0 = a0 | s1\n 27214: a0 = a0 | a4\n 27217: a0 = a0 << 0x20\n 27220: a0 = a0 | a1\n 27223: s1 = reverse a0\n 27225: a1 = reverse a3\n 27227: a2 = reverse a2\n 27229: a0 = reverse t0\n 27231: u64 [sp + 0x38] = a0\n 27234: u64 [sp + 0x30] = a2\n 27237: a0 = a0 | a2\n 27240: a2 = a1\n 27242: a1 = a1 | s1\n 27245: a1 = a1 | a0\n 27248: a1 = a1 >> 0x20\n 27251: a0 = a0 | s1\n 27254: a0 = a0 << 0x20\n 27257: a0 = a0 | a1\n 27260: jump @410 if a0 != 0\n      : @401 (gas: 5)\n 27264: u64 [sp + 0x28] = a2\n 27267: i32 a0 = a2 + 0\n 27269: a1 = 0x20\n 27272: u64 [sp + 0x20] = a0\n 27275: ra = 368, jump @0\n      : @402 [@dyn 184] (gas: 50)\n 27281: u8 [a0 + 31] = 0\n 27284: u8 [a0 + 30] = 0\n 27287: u8 [a0 + 29] = 0\n 27290: u8 [a0 + 28] = 0\n 27293: u8 [a0 + 27] = 0\n 27296: u8 [a0 + 26] = 0\n 27299: u8 [a0 + 25] = 0\n 27302: u8 [a0 + 24] = 0\n 27305: u8 [a0 + 23] = 0\n 27308: u8 [a0 + 22] = 0\n 27311: u8 [a0 + 21] = 0\n 27314: u8 [a0 + 20] = 0\n 27317: u8 [a0 + 19] = 0\n 27320: u8 [a0 + 18] = 0\n 27323: u8 [a0 + 17] = 0\n 27326: u8 [a0 + 16] = 0\n 27329: u8 [a0 + 15] = 0\n 27332: u8 [a0 + 14] = 0\n 27335: u8 [a0 + 13] = 0\n 27338: u8 [a0 + 12] = 0\n 27341: u8 [a0 + 11] = 0\n 27344: u8 [a0 + 10] = 0\n 27347: u8 [a0 + 9] = 0\n 27350: u8 [a0 + 8] = 0\n 27353: u8 [a0 + 7] = 0\n 27356: u8 [a0 + 6] = 0\n 27359: u8 [a0 + 5] = 0\n 27362: u8 [a0 + 4] = 0\n 27365: u8 [a0 + 3] = 0xa0\n 27370: u8 [a0 + 2] = 0x79\n 27374: u8 [a0 + 1] = 0xc3\n 27379: u8 [a0 + 0] = 0x8\n 27382: a1 = u64 [sp + 0x28]\n 27385: a0 = a1 + 0x4\n 27388: a1 = a0 <u a1\n 27391: a3 = u64 [sp + 0x38]\n 27394: a2 = a3 + a1\n 27397: a3 = a2 <u a3\n 27400: a3 = a1 if a1 == 0\n 27403: a3 = a3 + s1\n 27406: a1 = a3 <u s1\n 27409: a4 = u64 [sp + 0x30]\n 27412: a4 = a4 + a1\n 27415: u64 [sp + 0x48] = a2\n 27418: u64 [sp + 0x40] = a0\n 27421: u64 [sp + 0x50] = a3\n 27424: a0 = sp + 0x60\n 27427: a1 = sp + 0x40\n 27430: u64 [sp + 0x58] = a4\n 27433: ra = 370, jump @383\n      : @403 [@dyn 185] (gas: 5)\n 27439: a0 = u64 [sp + 0x68]\n 27442: t0 = u64 [sp + 0x78]\n 27445: t1 = u64 [sp + 0x60]\n 27448: a3 = u64 [sp + 0x70]\n 27451: jump @409\n      : @404 (gas: 3)\n 27454: a0 = 0x40\n 27457: a1 = 0x20\n 27460: ra = 372, jump @0\n      : @405 [@dyn 186] (gas: 103)\n 27466: a1 = u8 [a0 + 0x11]\n 27469: a2 = u8 [a0 + 0x10]\n 27472: a3 = u8 [a0 + 0x12]\n 27475: a4 = u8 [a0 + 0x13]\n 27478: a1 = a1 << 0x8\n 27481: a1 = a1 | a2\n 27484: a3 = a3 << 0x10\n 27487: a4 = a4 << 0x18\n 27490: a3 = a3 | a4\n 27493: a1 = a1 | a3\n 27496: a2 = u8 [a0 + 0x15]\n 27499: a3 = u8 [a0 + 0x14]\n 27502: a4 = u8 [a0 + 0x16]\n 27505: a5 = u8 [a0 + 0x17]\n 27508: a2 = a2 << 0x8\n 27511: a2 = a2 | a3\n 27514: a4 = a4 << 0x10\n 27517: a5 = a5 << 0x18\n 27520: a4 = a4 | a5\n 27523: a2 = a2 | a4\n 27526: a2 = a2 << 0x20\n 27529: t0 = a2 | a1\n 27532: a2 = u8 [a0 + 0x1]\n 27535: a3 = u8 [a0]\n 27537: a4 = u8 [a0 + 0x2]\n 27540: a5 = u8 [a0 + 0x3]\n 27543: a2 = a2 << 0x8\n 27546: a2 = a2 | a3\n 27549: a4 = a4 << 0x10\n 27552: a5 = a5 << 0x18\n 27555: a4 = a4 | a5\n 27558: a2 = a2 | a4\n 27561: a3 = u8 [a0 + 0x5]\n 27564: a4 = u8 [a0 + 0x4]\n 27567: a5 = u8 [a0 + 0x6]\n 27570: s1 = u8 [a0 + 0x7]\n 27573: a3 = a3 << 0x8\n 27576: a3 = a3 | a4\n 27579: a5 = a5 << 0x10\n 27582: s1 = s1 << 0x18\n 27585: a5 = a5 | s1\n 27588: a3 = a3 | a5\n 27591: a3 = a3 << 0x20\n 27594: a2 = a2 | a3\n 27597: a3 = u8 [a0 + 0x19]\n 27600: a4 = u8 [a0 + 0x18]\n 27603: a5 = u8 [a0 + 0x1a]\n 27606: s1 = u8 [a0 + 0x1b]\n 27609: a3 = a3 << 0x8\n 27612: a3 = a3 | a4\n 27615: a5 = a5 << 0x10\n 27618: s1 = s1 << 0x18\n 27621: a5 = a5 | s1\n 27624: a3 = a3 | a5\n 27627: a4 = u8 [a0 + 0x1d]\n 27630: a5 = u8 [a0 + 0x1c]\n 27633: s1 = u8 [a0 + 0x1e]\n 27636: a1 = u8 [a0 + 0x1f]\n 27639: a4 = a4 << 0x8\n 27642: a4 = a4 | a5\n 27645: s1 = s1 << 0x10\n 27648: a1 = a1 << 0x18\n 27651: a1 = a1 | s1\n 27654: a1 = a1 | a4\n 27657: a1 = a1 << 0x20\n 27660: a3 = a3 | a1\n 27663: a1 = u8 [a0 + 0x9]\n 27666: a4 = u8 [a0 + 0x8]\n 27669: a5 = u8 [a0 + 0xa]\n 27672: s1 = u8 [a0 + 0xb]\n 27675: a1 = a1 << 0x8\n 27678: a1 = a1 | a4\n 27681: a5 = a5 << 0x10\n 27684: s1 = s1 << 0x18\n 27687: a5 = a5 | s1\n 27690: a1 = a1 | a5\n 27693: a4 = u8 [a0 + 0xd]\n 27696: a5 = u8 [a0 + 0xc]\n 27699: s1 = u8 [a0 + 0xe]\n 27702: a0 = u8 [a0 + 0xf]\n 27705: a4 = a4 << 0x8\n 27708: a4 = a4 | a5\n 27711: s1 = s1 << 0x10\n 27714: a0 = a0 << 0x18\n 27717: a0 = a0 | s1\n 27720: a0 = a0 | a4\n 27723: a0 = a0 << 0x20\n 27726: a0 = a0 | a1\n 27729: s1 = reverse a0\n 27731: a1 = reverse a3\n 27733: a2 = reverse a2\n 27735: a0 = reverse t0\n 27737: u64 [sp + 0x38] = a0\n 27740: u64 [sp + 0x30] = a2\n 27743: a0 = a0 | a2\n 27746: a2 = a1\n 27748: a1 = a1 | s1\n 27751: a1 = a1 | a0\n 27754: a1 = a1 >> 0x20\n 27757: a0 = a0 | s1\n 27760: a0 = a0 << 0x20\n 27763: a0 = a0 | a1\n 27766: jump @410 if a0 != 0\n      : @406 (gas: 5)\n 27770: u64 [sp + 0x28] = a2\n 27773: i32 a0 = a2 + 0\n 27775: a1 = 0x20\n 27778: u64 [sp + 0x20] = a0\n 27781: ra = 374, jump @0\n      : @407 [@dyn 187] (gas: 50)\n 27787: u8 [a0 + 31] = 0\n 27790: u8 [a0 + 30] = 0\n 27793: u8 [a0 + 29] = 0\n 27796: u8 [a0 + 28] = 0\n 27799: u8 [a0 + 27] = 0\n 27802: u8 [a0 + 26] = 0\n 27805: u8 [a0 + 25] = 0\n 27808: u8 [a0 + 24] = 0\n 27811: u8 [a0 + 23] = 0\n 27814: u8 [a0 + 22] = 0\n 27817: u8 [a0 + 21] = 0\n 27820: u8 [a0 + 20] = 0\n 27823: u8 [a0 + 19] = 0\n 27826: u8 [a0 + 18] = 0\n 27829: u8 [a0 + 17] = 0\n 27832: u8 [a0 + 16] = 0\n 27835: u8 [a0 + 15] = 0\n 27838: u8 [a0 + 14] = 0\n 27841: u8 [a0 + 13] = 0\n 27844: u8 [a0 + 12] = 0\n 27847: u8 [a0 + 11] = 0\n 27850: u8 [a0 + 10] = 0\n 27853: u8 [a0 + 9] = 0\n 27856: u8 [a0 + 8] = 0\n 27859: u8 [a0 + 7] = 0\n 27862: u8 [a0 + 6] = 0\n 27865: u8 [a0 + 5] = 0\n 27868: u8 [a0 + 4] = 0\n 27871: u8 [a0 + 3] = 0xa0\n 27876: u8 [a0 + 2] = 0x79\n 27880: u8 [a0 + 1] = 0xc3\n 27885: u8 [a0 + 0] = 0x8\n 27888: a1 = u64 [sp + 0x28]\n 27891: a0 = a1 + 0x4\n 27894: a1 = a0 <u a1\n 27897: a3 = u64 [sp + 0x38]\n 27900: a2 = a3 + a1\n 27903: a3 = a2 <u a3\n 27906: a3 = a1 if a1 == 0\n 27909: a3 = a3 + s1\n 27912: a1 = a3 <u s1\n 27915: a4 = u64 [sp + 0x30]\n 27918: a4 = a4 + a1\n 27921: u64 [sp + 0x88] = a2\n 27925: u64 [sp + 0x80] = a0\n 27929: u64 [sp + 0x90] = a3\n 27933: a0 = sp + 0xa0\n 27937: a1 = sp + 0x80\n 27941: u64 [sp + 0x98] = a4\n 27945: ra = 376, jump @278\n      : @408 [@dyn 188] (gas: 5)\n 27951: a0 = u64 [sp + 0xa8]\n 27955: t0 = u64 [sp + 0xb8]\n 27959: t1 = u64 [sp + 0xa0]\n 27963: a3 = u64 [sp + 0xb0]\n 27967: fallthrough\n      : @409 (gas: 26)\n 27968: a1 = u64 [sp + 0x38]\n 27971: a4 = a0 ^ a1\n 27974: a5 = a0 <u a1\n 27977: t2 = a1\n 27979: a2 = u64 [sp + 0x28]\n 27982: a1 = t1 <u a2\n 27985: a5 = a1 if a4 == 0\n 27988: a4 = a3 - s1\n 27991: a3 = a3 <u s1\n 27994: s1 = u64 [sp + 0x30]\n 27997: s1 = t0 - s1\n 28000: s1 = s1 - a3\n 28003: a3 = a4 <u a5\n 28006: s1 = s1 - a3\n 28009: a4 = a4 - a5\n 28012: a0 = a0 - t2\n 28015: a1 = a0 - a1\n 28018: a0 = t1 - a2\n 28021: a1 = a1 | s1\n 28024: a2 = a0 | a4\n 28027: a2 = a2 | a1\n 28030: a1 = a1 | a4\n 28033: a2 = a2 >> 0x20\n 28036: a1 = a1 << 0x20\n 28039: a1 = a1 | a2\n 28042: jump @415 if a1 == 0\n      : @410 (gas: 1)\n 28045: trap\n      : @411 (gas: 8)\n 28046: u64 [sp + 240] = 0\n 28050: u64 [sp + 232] = 0\n 28054: u64 [sp + 224] = 0\n 28058: a0 = 0x4e487b7100000000\n 28068: a1 = sp + 0xe0\n 28072: u64 [sp + 0xf8] = a0\n 28076: a0 = 0\n 28078: ra = 378, jump @8\n      : @412 [@dyn 189] (gas: 7)\n 28084: u64 [sp + 216] = 0\n 28088: u64 [sp + 208] = 0\n 28092: u64 [sp + 192] = 0x11\n 28097: a0 = 0x4\n 28100: a1 = sp + 0xc0\n 28104: u64 [sp + 200] = 0\n 28108: ra = 380, jump @8\n      : @413 [@dyn 190] (gas: 3)\n 28114: a1 = 0x24\n 28117: a0 = 0\n 28119: ra = 382, jump @0\n      : @414 [@dyn 191] (gas: 5)\n 28125: i32 a1 = a0 + 0\n 28127: a0 = 0x1\n 28130: a2 = 0x24\n 28133: ecalli 6 // 'seal_return'\n 28135: fallthrough\n      : @415 (gas: 4)\n 28136: i32 s1 = a0 + 0\n 28138: a0 = u64 [sp + 0x20]\n 28141: a1 = s1\n 28143: ra = 384, jump @0\n      : @416 [@dyn 192] (gas: 7)\n 28149: i32 a1 = a0 + 0\n 28151: a0 = 0x1\n 28154: a2 = s1\n 28156: ecalli 6 // 'seal_return'\n 28158: a0 = 0\n 28160: ra = 0x182\n 28164: jump @10\n      : @417 [export #0: 'call'] (gas: 2)\n 28167: a0 = 0\n 28169: ra = 386, jump @10\n      : @418 [@dyn 193] [export #1: 'deploy'] (gas: 2)\n 28175: a0 = 0x1\n 28178: ra = 388, jump @10\n      : @419 [@dyn 194] (gas: 9)\n 28184: sp = sp + 0xffffffffffffffc0\n 28187: u64 [sp + 0x38] = ra\n 28190: u64 [sp + 0x30] = s0\n 28193: u64 [sp + 0x28] = s1\n 28196: s0 = sp + 0x40\n 28199: sp = sp & 0xfffffffffffffff0\n 28202: s1 = a0\n 28204: a0 = sp\n 28206: ra = 390, jump @52\n      : @420 [@dyn 195] (gas: 14)\n 28212: a0 = u64 [sp + 0x10]\n 28215: a1 = u64 [sp + 0x18]\n 28218: a2 = u64 [sp]\n 28220: a3 = u64 [sp + 0x8]\n 28223: u64 [s1 + 0x10] = a0\n 28226: u64 [s1 + 0x18] = a1\n 28229: u64 [s1] = a2\n 28231: u64 [s1 + 0x8] = a3\n 28234: sp = s0 + 0xffffffffffffffc0\n 28237: ra = u64 [sp + 0x38]\n 28240: s0 = u64 [sp + 0x30]\n 28243: s1 = u64 [sp + 0x28]\n 28246: sp = sp + 0x40\n 28249: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"addCard(address,uint256)": "f9c775ea",
							"cardInventory(address,uint256)": "50580072",
							"getInventory(address)": "8b87c544",
							"hasCard(address,uint256,uint256)": "4dca8ce6",
							"owner()": "8da5cb5b",
							"setTradingContract(address)": "5be6f2c7",
							"tradingContract()": "9e4bd2e9",
							"transferCards(address,address,uint256,uint256)": "65352442"
						}
					},
					"irOptimized": "/// @use-src 0:\"InventoryManager.sol\"\nobject \"InventoryManager_157\" {\n    code {\n        {\n            /// @src 0:60:1587  \"contract InventoryManager {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            constructor_InventoryManager()\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"InventoryManager_157_deployed\"), datasize(\"InventoryManager_157_deployed\"))\n            return(_1, datasize(\"InventoryManager_157_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function prepare_store_address(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_address_to_address(slot, value)\n        {\n            let convertedValue := convert_address_to_address(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n        }\n        /// @ast-id 25 @src 0:344:434  \"constructor() {...\"\n        function constructor_InventoryManager()\n        {\n            /// @src 0:377:387  \"msg.sender\"\n            let expr := caller()\n            /// @src 0:369:387  \"owner = msg.sender\"\n            update_storage_value_offset_address_to_address(0x01, expr)\n            /// @src 0:416:426  \"msg.sender\"\n            let expr_1 := caller()\n            /// @src 0:398:426  \"tradingContract = msg.sender\"\n            update_storage_value_offset_address_to_address(0x02, expr_1)\n        }\n    }\n    /// @use-src 0:\"InventoryManager.sol\"\n    object \"InventoryManager_157_deployed\" {\n        code {\n            {\n                /// @src 0:60:1587  \"contract InventoryManager {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x4dca8ce6 { external_fun_hasCard() }\n                    case 0x50580072 { external_fun_cardInventory() }\n                    case 0x5be6f2c7 {\n                        external_fun_setTradingContract()\n                    }\n                    case 0x65352442 { external_fun_transferCards() }\n                    case 0x8b87c544 { external_fun_getInventory() }\n                    case 0x8da5cb5b { external_fun_owner() }\n                    case 0x9e4bd2e9 {\n                        external_fun_tradingContract()\n                    }\n                    case 0xf9c775ea { external_fun_addCard() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_uint256(add(headStart, offset_2), dataEnd)\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            function external_fun_hasCard()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_addresst_uint256t_uint256(4, calldatasize())\n                let ret := fun_hasCard(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_addresst_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_array_uint256_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_uint256_storage(value) -> length\n            { length := 0x09 }\n            function array_dataslot_array_uint256_storage(ptr) -> data\n            { data := ptr }\n            function storage_array_index_access_uint(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_uint256_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_uint256_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 7 @src 0:93:141  \"mapping(address => uint[9]) public cardInventory\"\n            function getter_fun_cardInventory(key, key_1) -> ret\n            {\n                let slot := 0\n                let offset := 0\n                slot := mapping_index_access_mapping_address_array_uint256_storage_of_address(slot, key)\n                if iszero(lt(key_1, array_length_array_uint256_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_uint(slot, key_1)\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:60:1587  \"contract InventoryManager {...\"\n            function abi_encode_uint256_to_uint256_fromStack(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256_fromStack(value0, add(headStart, 0))\n            }\n            function external_fun_cardInventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                let ret := getter_fun_cardInventory(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_setTradingContract()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_setTradingContract(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_addresst_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n            {\n                if slt(sub(dataEnd, headStart), 128)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_address(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_uint256(add(headStart, offset_2), dataEnd)\n                let offset_3 := 96\n                value3 := abi_decode_uint256(add(headStart, offset_3), dataEnd)\n            }\n            function external_fun_transferCards()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2, param_3 := abi_decode_addresst_addresst_uint256t_uint256(4, calldatasize())\n                fun_transferCards(param, param_1, param_2, param_3)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_array_uint256(value) -> length\n            { length := 0x09 }\n            function array_storeLengthForEncoding_array_uint256(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function array_dataslot_array_uint256(ptr) -> data\n            { data := ptr }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encodeUpdatedPos_uint256(value0, pos) -> updatedPos\n            {\n                abi_encode_uint256_to_uint256(value0, pos)\n                updatedPos := add(pos, 0x20)\n            }\n            function array_nextElement_array_uint256(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_uint256_memory_ptr(value, pos)\n            {\n                let length := array_length_array_uint256(value)\n                pos := array_storeLengthForEncoding_array_uint256(pos, length)\n                let baseRef := array_dataslot_array_uint256(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_uint256(elementValue0, pos)\n                    srcPtr := array_nextElement_array_uint256(srcPtr)\n                }\n            }\n            function abi_encode_array_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 288)\n                abi_encode_array_uint256_memory_ptr(value0, add(headStart, 0))\n            }\n            function external_fun_getInventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := fun_getInventory(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 9 @src 0:205:225  \"address public owner\"\n            function getter_fun_owner() -> ret\n            {\n                let slot := 1\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:60:1587  \"contract InventoryManager {...\"\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_owner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_owner()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 11 @src 0:305:335  \"address public tradingContract\"\n            function getter_fun_tradingContract() -> ret\n            {\n                let slot := 2\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:60:1587  \"contract InventoryManager {...\"\n            function external_fun_tradingContract()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_tradingContract()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_addCard()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                fun_addCard(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function zero_value_for_split_bool() -> ret\n            { ret := 0 }\n            /// @ast-id 156 @src 0:1435:1584  \"function hasCard(address user, uint cardId, uint amount) external view returns (bool) {...\"\n            function fun_hasCard(var_user, var_cardId, var_amount) -> var\n            {\n                /// @src 0:1515:1519  \"bool\"\n                let zero_bool := zero_value_for_split_bool()\n                var := zero_bool\n                /// @src 0:1539:1552  \"cardInventory\"\n                let _2_slot := 0x00\n                let expr_147_slot := _2_slot\n                /// @src 0:1553:1557  \"user\"\n                let _1 := var_user\n                let expr := _1\n                /// @src 0:1539:1558  \"cardInventory[user]\"\n                let _2 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_147_slot, expr)\n                let _5_slot := _2\n                let expr_149_slot := _5_slot\n                /// @src 0:1559:1565  \"cardId\"\n                let _3 := var_cardId\n                let expr_1 := _3\n                /// @src 0:1539:1566  \"cardInventory[user][cardId]\"\n                let _4, _5 := storage_array_index_access_uint(expr_149_slot, expr_1)\n                let _6 := read_from_storage_split_dynamic_uint256(_4, _5)\n                let expr_2 := _6\n                /// @src 0:1570:1576  \"amount\"\n                let _7 := var_amount\n                let expr_3 := _7\n                /// @src 0:1539:1576  \"cardInventory[user][cardId] >= amount\"\n                let expr_4 := iszero(lt(cleanup_uint256(expr_2), cleanup_uint256(expr_3)))\n                /// @src 0:1532:1576  \"return cardInventory[user][cardId] >= amount\"\n                var := expr_4\n                leave\n            }\n            /// @src 0:60:1587  \"contract InventoryManager {...\"\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not owner\")\n            }\n            function abi_encode_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 9)\n                store_literal_in_memory_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_c266(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682(tail)\n            }\n            function require_helper_stringliteral_c266(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_c266(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            /// @ast-id 43 @src 0:509:663  \"function setTradingContract(address _contract) external {...\"\n            function fun_setTradingContract(var_contract)\n            {\n                /// @src 0:584:594  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:598:603  \"owner\"\n                let _1 := read_from_storage_split_offset_address(0x01)\n                let expr_1 := _1\n                /// @src 0:584:603  \"msg.sender == owner\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 0:576:617  \"require(msg.sender == owner, \\\"Not owner\\\")\"\n                require_helper_stringliteral_c266(expr_2)\n                /// @src 0:646:655  \"_contract\"\n                let _2 := var_contract\n                let expr_3 := _2\n                /// @src 0:628:655  \"tradingContract = _contract\"\n                update_storage_value_offset_address_to_address(0x02, expr_3)\n            }\n            /// @src 0:60:1587  \"contract InventoryManager {...\"\n            function cleanup_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by_1(value)))\n            }\n            function store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid card ID\")\n            }\n            function abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_8239(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(tail)\n            }\n            function require_helper_stringliteral_8239(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8239(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not enough cards\")\n            }\n            function abi_encode_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 16)\n                store_literal_in_memory_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_83e8(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(tail)\n            }\n            function require_helper_stringliteral_83e8(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_83e8(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, not(0))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_uint256_to_uint256(slot, offset, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @ast-id 122 @src 0:987:1299  \"function transferCards(address from, address to, uint cardId, uint amount) external {...\"\n            function fun_transferCards(var_from, var_to, var_cardId, var_amount)\n            {\n                /// @src 0:1090:1096  \"cardId\"\n                let _1 := var_cardId\n                let expr := _1\n                /// @src 0:1099:1100  \"9\"\n                let expr_1 := 0x09\n                /// @src 0:1090:1100  \"cardId < 9\"\n                let expr_2 := lt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:1082:1120  \"require(cardId < 9, \\\"Invalid card ID\\\")\"\n                require_helper_stringliteral_8239(expr_2)\n                /// @src 0:1139:1152  \"cardInventory\"\n                let _slot := 0x00\n                let expr_95_slot := _slot\n                /// @src 0:1153:1157  \"from\"\n                let _2 := var_from\n                let expr_3 := _2\n                /// @src 0:1139:1158  \"cardInventory[from]\"\n                let _3 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_95_slot, expr_3)\n                let _17_slot := _3\n                let expr_97_slot := _17_slot\n                /// @src 0:1159:1165  \"cardId\"\n                let _4 := var_cardId\n                let expr_4 := _4\n                /// @src 0:1139:1166  \"cardInventory[from][cardId]\"\n                let _5, _6 := storage_array_index_access_uint(expr_97_slot, expr_4)\n                let _7 := read_from_storage_split_dynamic_uint256(_5, _6)\n                let expr_5 := _7\n                /// @src 0:1170:1176  \"amount\"\n                let _8 := var_amount\n                let expr_6 := _8\n                /// @src 0:1139:1176  \"cardInventory[from][cardId] >= amount\"\n                let expr_7 := iszero(lt(cleanup_uint256(expr_5), cleanup_uint256(expr_6)))\n                /// @src 0:1131:1197  \"require(cardInventory[from][cardId] >= amount, \\\"Not enough cards\\\")\"\n                require_helper_stringliteral_83e8(expr_7)\n                /// @src 0:1239:1245  \"amount\"\n                let _9 := var_amount\n                let expr_8 := _9\n                /// @src 0:1208:1221  \"cardInventory\"\n                let _24_slot := 0x00\n                let expr_105_slot := _24_slot\n                /// @src 0:1222:1226  \"from\"\n                let _10 := var_from\n                let expr_9 := _10\n                /// @src 0:1208:1227  \"cardInventory[from]\"\n                let _11 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_105_slot, expr_9)\n                let _27_slot := _11\n                let expr_108_slot := _27_slot\n                /// @src 0:1228:1234  \"cardId\"\n                let _12 := var_cardId\n                let expr_10 := _12\n                /// @src 0:1208:1235  \"cardInventory[from][cardId]\"\n                let _13, _14 := storage_array_index_access_uint(expr_108_slot, expr_10)\n                /// @src 0:1208:1245  \"cardInventory[from][cardId] -= amount\"\n                let _15 := read_from_storage_split_dynamic_uint256(_13, _14)\n                let expr_11 := checked_sub_uint256(_15, expr_8)\n                update_storage_value_uint256_to_uint256(_13, _14, expr_11)\n                /// @src 0:1285:1291  \"amount\"\n                let _16 := var_amount\n                let expr_12 := _16\n                /// @src 0:1256:1269  \"cardInventory\"\n                let _33_slot := 0x00\n                let expr_113_slot := _33_slot\n                /// @src 0:1270:1272  \"to\"\n                let _17 := var_to\n                let expr_13 := _17\n                /// @src 0:1256:1273  \"cardInventory[to]\"\n                let _18 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_113_slot, expr_13)\n                let _36_slot := _18\n                let expr_116_slot := _36_slot\n                /// @src 0:1274:1280  \"cardId\"\n                let _19 := var_cardId\n                let expr_14 := _19\n                /// @src 0:1256:1281  \"cardInventory[to][cardId]\"\n                let _20, _21 := storage_array_index_access_uint(expr_116_slot, expr_14)\n                /// @src 0:1256:1291  \"cardInventory[to][cardId] += amount\"\n                let _22 := read_from_storage_split_dynamic_uint256(_20, _21)\n                let expr_15 := checked_add_uint256(_22, expr_12)\n                update_storage_value_uint256_to_uint256(_20, _21, expr_15)\n            }\n            /// @src 0:60:1587  \"contract InventoryManager {...\"\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_array_uint256(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n            }\n            function allocate_memory_array_array_uint256(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_uint256(length)\n                memPtr := allocate_memory(allocSize)\n            }\n            function zero_memory_chunk_uint256(dataStart, dataSizeInBytes)\n            {\n                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)\n            }\n            function allocate_and_zero_memory_array_array_uint256(length) -> memPtr\n            {\n                memPtr := allocate_memory_array_array_uint256(length)\n                let dataStart := memPtr\n                let dataSize := array_allocation_size_array_uint256(length)\n                zero_memory_chunk_uint256(dataStart, dataSize)\n            }\n            function zero_value_for_split_array_uint256() -> ret\n            {\n                ret := allocate_and_zero_memory_array_array_uint256(9)\n            }\n            function array_storeLengthForEncoding_array_uint256_memory_ptr(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function array_nextElement_array_uint256_storage(ptr) -> next\n            { next := add(ptr, 0x01) }\n            function abi_encode_array_uint256_storage(value, pos)\n            {\n                let length := array_length_array_uint256_storage(value)\n                pos := array_storeLengthForEncoding_array_uint256_memory_ptr(pos, length)\n                let baseRef := array_dataslot_array_uint256_storage(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := read_from_storage_offset_uint256(srcPtr)\n                    pos := abi_encodeUpdatedPos_uint256(elementValue0, pos)\n                    srcPtr := array_nextElement_array_uint256_storage(srcPtr)\n                }\n            }\n            function abi_encodeUpdatedPos_array_uint256_storage(value0, pos) -> updatedPos\n            {\n                abi_encode_array_uint256_storage(value0, pos)\n                updatedPos := add(pos, 0x0120)\n            }\n            function copy_array_from_storage_to_memory_array_uint(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_array_uint256_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function convert_array_array_uint256_storage_to_array_uint256(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_uint(value)\n            }\n            /// @ast-id 136 @src 0:1307:1427  \"function getInventory(address user) external view returns (uint[9] memory) {...\"\n            function fun_getInventory(var_user) -> var_mpos\n            {\n                /// @src 0:1366:1380  \"uint[9] memory\"\n                let zero_array_uint256_mpos := zero_value_for_split_array_uint256()\n                var_mpos := zero_array_uint256_mpos\n                /// @src 0:1400:1413  \"cardInventory\"\n                let _42_slot := 0x00\n                let expr_slot := _42_slot\n                /// @src 0:1414:1418  \"user\"\n                let _1 := var_user\n                let expr := _1\n                /// @src 0:1400:1419  \"cardInventory[user]\"\n                let _2 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_slot, expr)\n                let _45_slot := _2\n                let expr_133_slot := _45_slot\n                /// @src 0:1393:1419  \"return cardInventory[user]\"\n                var_mpos := convert_array_array_uint256_storage_to_array_uint256(expr_133_slot)\n                leave\n            }\n            /// @src 0:60:1587  \"contract InventoryManager {...\"\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_t_rational_by(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            function store_literal_in_memory_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid address\")\n            }\n            function abi_encode_stringliteral(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            /// @ast-id 76 @src 0:700:904  \"function addCard(address to, uint cardId) external {...\"\n            function fun_addCard(var_to, var_cardId)\n            {\n                /// @src 0:770:772  \"to\"\n                let _1 := var_to\n                let expr := _1\n                /// @src 0:784:785  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:776:786  \"address(0)\"\n                let expr_2 := convert_rational_by_to_address(expr_1)\n                /// @src 0:770:786  \"to != address(0)\"\n                let expr_3 := iszero(eq(cleanup_address(expr), cleanup_address(expr_2)))\n                /// @src 0:762:806  \"require(to != address(0), \\\"Invalid address\\\")\"\n                require_helper_stringliteral(expr_3)\n                /// @src 0:825:831  \"cardId\"\n                let _2 := var_cardId\n                let expr_4 := _2\n                /// @src 0:834:835  \"9\"\n                let expr_5 := 0x09\n                /// @src 0:825:835  \"cardId < 9\"\n                let expr_6 := lt(cleanup_uint256(expr_4), convert_rational_by_to_uint256(expr_5))\n                /// @src 0:817:855  \"require(cardId < 9, \\\"Invalid card ID\\\")\"\n                require_helper_stringliteral_8239(expr_6)\n                /// @src 0:895:896  \"1\"\n                let expr_7 := 0x01\n                /// @src 0:866:896  \"cardInventory[to][cardId] += 1\"\n                let _3 := convert_t_rational_by_to_t_uint256(expr_7)\n                /// @src 0:866:879  \"cardInventory\"\n                let _49_slot := 0x00\n                let expr_67_slot := _49_slot\n                /// @src 0:880:882  \"to\"\n                let _4 := var_to\n                let expr_8 := _4\n                /// @src 0:866:883  \"cardInventory[to]\"\n                let _5 := mapping_index_access_mapping_address_array_uint256_storage_of_address(expr_67_slot, expr_8)\n                let _52_slot := _5\n                let expr_70_slot := _52_slot\n                /// @src 0:884:890  \"cardId\"\n                let _6 := var_cardId\n                let expr_9 := _6\n                /// @src 0:866:891  \"cardInventory[to][cardId]\"\n                let _7, _8 := storage_array_index_access_uint(expr_70_slot, expr_9)\n                /// @src 0:866:896  \"cardInventory[to][cardId] += 1\"\n                let _9 := read_from_storage_split_dynamic_uint256(_7, _8)\n                let expr_10 := checked_add_uint256(_9, _3)\n                update_storage_value_uint256_to_uint256(_7, _8, expr_10)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220eda3383cfe5c5fab65f2067c40e047e9f7e9d654d11fb952354762518d6e1fb064736f6c634300081c0033\"\n    }\n}\n",
					"hash": "0eb750ebdc536ce80a60329552a6d6d7da97dfd845f9d2cbd6aac49cf620340e",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"InventoryManager.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "InventoryManager.sol",
					"exportedSymbols": {
						"InventoryManager": [
							157
						]
					},
					"id": 158,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "InventoryManager",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 157,
							"linearizedBaseContracts": [
								157
							],
							"name": "InventoryManager",
							"nameLocation": "69:16:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "50580072",
									"id": 7,
									"mutability": "mutable",
									"name": "cardInventory",
									"nameLocation": "128:13:0",
									"nodeType": "VariableDeclaration",
									"scope": 157,
									"src": "93:48:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
										"typeString": "mapping(address => uint256[9])"
									},
									"typeName": {
										"id": 6,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "101:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "93:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
											"typeString": "mapping(address => uint256[9])"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"baseType": {
												"id": 3,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "112:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"id": 5,
											"length": {
												"hexValue": "39",
												"id": 4,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "117:1:0",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_9_by_1",
													"typeString": "int_const 9"
												},
												"value": "9"
											},
											"nodeType": "ArrayTypeName",
											"src": "112:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$9_storage_ptr",
												"typeString": "uint256[9]"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 9,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "220:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 157,
									"src": "205:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 8,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "205:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9e4bd2e9",
									"id": 11,
									"mutability": "mutable",
									"name": "tradingContract",
									"nameLocation": "320:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 157,
									"src": "305:30:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 10,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "305:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 24,
										"nodeType": "Block",
										"src": "358:76:0",
										"statements": [
											{
												"expression": {
													"id": 17,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 14,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "369:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 15,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "377:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 16,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "381:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "377:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "369:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 18,
												"nodeType": "ExpressionStatement",
												"src": "369:18:0"
											},
											{
												"expression": {
													"id": 22,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 19,
														"name": "tradingContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "398:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 20,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "416:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 21,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "420:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "416:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "398:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 23,
												"nodeType": "ExpressionStatement",
												"src": "398:28:0"
											}
										]
									},
									"id": 25,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "355:2:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "358:0:0"
									},
									"scope": 157,
									"src": "344:90:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 42,
										"nodeType": "Block",
										"src": "565:98:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 34,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 31,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "584:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 32,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "588:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "584:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 33,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 9,
																"src": "598:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "584:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f74206f776e6572",
															"id": 35,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "605:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
																"typeString": "literal_string \"Not owner\""
															},
															"value": "Not owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
																"typeString": "literal_string \"Not owner\""
															}
														],
														"id": 30,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "576:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "576:41:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 37,
												"nodeType": "ExpressionStatement",
												"src": "576:41:0"
											},
											{
												"expression": {
													"id": 40,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 38,
														"name": "tradingContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "628:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 39,
														"name": "_contract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "646:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "628:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 41,
												"nodeType": "ExpressionStatement",
												"src": "628:27:0"
											}
										]
									},
									"functionSelector": "5be6f2c7",
									"id": 43,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setTradingContract",
									"nameLocation": "518:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "545:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "537:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "537:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "536:19:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "565:0:0"
									},
									"scope": 157,
									"src": "509:154:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 75,
										"nodeType": "Block",
										"src": "751:153:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 51,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 45,
																"src": "770:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 54,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "784:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 53,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "776:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 52,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "776:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 55,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "776:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "770:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642061646472657373",
															"id": 57,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "788:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															},
															"value": "Invalid address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															}
														],
														"id": 50,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "762:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 58,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "762:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 59,
												"nodeType": "ExpressionStatement",
												"src": "762:44:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 61,
																"name": "cardId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 47,
																"src": "825:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "39",
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "834:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_9_by_1",
																	"typeString": "int_const 9"
																},
																"value": "9"
															},
															"src": "825:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642063617264204944",
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "837:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															},
															"value": "Invalid card ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															}
														],
														"id": 60,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "817:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "817:38:0"
											},
											{
												"expression": {
													"id": 73,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 67,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "866:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 70,
															"indexExpression": {
																"id": 68,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 45,
																"src": "880:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "866:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 71,
														"indexExpression": {
															"id": 69,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 47,
															"src": "884:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "866:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "895:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "866:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 74,
												"nodeType": "ExpressionStatement",
												"src": "866:30:0"
											}
										]
									},
									"functionSelector": "f9c775ea",
									"id": 76,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addCard",
									"nameLocation": "709:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "725:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "717:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 44,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "717:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "734:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "729:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 46,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "729:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "716:25:0"
									},
									"returnParameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "751:0:0"
									},
									"scope": 157,
									"src": "700:204:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 121,
										"nodeType": "Block",
										"src": "1071:228:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 90,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 88,
																"name": "cardId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 82,
																"src": "1090:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "39",
																"id": 89,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1099:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_9_by_1",
																	"typeString": "int_const 9"
																},
																"value": "9"
															},
															"src": "1090:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642063617264204944",
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1102:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															},
															"value": "Invalid card ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															}
														],
														"id": 87,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1082:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 92,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1082:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 93,
												"nodeType": "ExpressionStatement",
												"src": "1082:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 95,
																		"name": "cardInventory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 7,
																		"src": "1139:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																			"typeString": "mapping(address => uint256[9] storage ref)"
																		}
																	},
																	"id": 97,
																	"indexExpression": {
																		"id": 96,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 78,
																		"src": "1153:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1139:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$9_storage",
																		"typeString": "uint256[9] storage ref"
																	}
																},
																"id": 99,
																"indexExpression": {
																	"id": 98,
																	"name": "cardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 82,
																	"src": "1159:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1139:27:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 100,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 84,
																"src": "1170:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1139:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420656e6f756768206361726473",
															"id": 102,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1178:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c",
																"typeString": "literal_string \"Not enough cards\""
															},
															"value": "Not enough cards"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c",
																"typeString": "literal_string \"Not enough cards\""
															}
														],
														"id": 94,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1131:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1131:66:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "1131:66:0"
											},
											{
												"expression": {
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 105,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "1208:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 108,
															"indexExpression": {
																"id": 106,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 78,
																"src": "1222:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1208:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 109,
														"indexExpression": {
															"id": 107,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "1228:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1208:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 110,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1239:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1208:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 112,
												"nodeType": "ExpressionStatement",
												"src": "1208:37:0"
											},
											{
												"expression": {
													"id": 119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 113,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "1256:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 116,
															"indexExpression": {
																"id": 114,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 80,
																"src": "1270:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1256:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 117,
														"indexExpression": {
															"id": 115,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "1274:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1256:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 118,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1285:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1256:35:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 120,
												"nodeType": "ExpressionStatement",
												"src": "1256:35:0"
											}
										]
									},
									"functionSelector": "65352442",
									"id": 122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferCards",
									"nameLocation": "996:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1018:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "1010:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 77,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1032:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "1024:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 79,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1024:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "1041:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "1036:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 81,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1036:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1054:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "1049:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 83,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1049:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1009:52:0"
									},
									"returnParameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1071:0:0"
									},
									"scope": 157,
									"src": "987:312:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 135,
										"nodeType": "Block",
										"src": "1382:45:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 131,
														"name": "cardInventory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "1400:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
															"typeString": "mapping(address => uint256[9] storage ref)"
														}
													},
													"id": 133,
													"indexExpression": {
														"id": 132,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 124,
														"src": "1414:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1400:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$9_storage",
														"typeString": "uint256[9] storage ref"
													}
												},
												"functionReturnParameters": 130,
												"id": 134,
												"nodeType": "Return",
												"src": "1393:26:0"
											}
										]
									},
									"functionSelector": "8b87c544",
									"id": 136,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getInventory",
									"nameLocation": "1316:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1337:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "1329:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1329:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1328:14:0"
									},
									"returnParameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "1366:14:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
													"typeString": "uint256[9]"
												},
												"typeName": {
													"baseType": {
														"id": 126,
														"name": "uint",
														"nodeType": "ElementaryTypeName",
														"src": "1366:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 128,
													"length": {
														"hexValue": "39",
														"id": 127,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1371:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_9_by_1",
															"typeString": "int_const 9"
														},
														"value": "9"
													},
													"nodeType": "ArrayTypeName",
													"src": "1366:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$9_storage_ptr",
														"typeString": "uint256[9]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1365:16:0"
									},
									"scope": 157,
									"src": "1307:120:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 155,
										"nodeType": "Block",
										"src": "1521:63:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"baseExpression": {
																"id": 147,
																"name": "cardInventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "1539:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$9_storage_$",
																	"typeString": "mapping(address => uint256[9] storage ref)"
																}
															},
															"id": 149,
															"indexExpression": {
																"id": 148,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 138,
																"src": "1553:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1539:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_storage",
																"typeString": "uint256[9] storage ref"
															}
														},
														"id": 151,
														"indexExpression": {
															"id": 150,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 140,
															"src": "1559:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1539:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 152,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 142,
														"src": "1570:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1539:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 146,
												"id": 154,
												"nodeType": "Return",
												"src": "1532:44:0"
											}
										]
									},
									"functionSelector": "4dca8ce6",
									"id": 156,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasCard",
									"nameLocation": "1444:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1460:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "1452:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 137,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "1471:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "1466:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 139,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1466:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1484:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "1479:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1479:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1451:40:0"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "1515:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 144,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1515:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1514:6:0"
									},
									"scope": 157,
									"src": "1435:149:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 158,
							"src": "60:1527:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:1556:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}