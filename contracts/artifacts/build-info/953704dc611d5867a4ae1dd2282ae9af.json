{
	"id": "953704dc611d5867a4ae1dd2282ae9af",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"CardTrading.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IInventoryManager {\r\n    function addCard(address to, uint cardId) external;\r\n    function transferCards(address from, address to, uint cardId, uint amount) external;\r\n    function hasCard(address user, uint cardId, uint amount) external view returns (bool);\r\n    function setTradingContract(address _contract) external;\r\n}\r\n\r\ncontract CardTrading {\r\n    struct Listing {\r\n        address seller;\r\n        uint offerCardId;\r\n        uint requestCardId;\r\n        bool active;\r\n    }\r\n\r\n    Listing[] public listings;\r\n    IInventoryManager public inventory;\r\n    address public owner;\r\n\r\n    constructor(address inventoryAddress) {\r\n        inventory = IInventoryManager(inventoryAddress);\r\n        owner = msg.sender;\r\n        // Try to set this contract as the trading contract in InventoryManager\r\n        try inventory.setTradingContract(address(this)) {\r\n            // Successfully set this contract as the trading contract\r\n        } catch {\r\n            // The trading contract might already be set, that's okay\r\n        }\r\n    }\r\n\r\n    function createListing(uint offerCardId, uint requestCardId) external {\r\n        require(offerCardId < 9 && requestCardId < 9, \"Invalid card ID\");\r\n        require(inventory.hasCard(msg.sender, offerCardId, 1), \"No card\");\r\n\r\n        listings.push(Listing({\r\n            seller: msg.sender,\r\n            offerCardId: offerCardId,\r\n            requestCardId: requestCardId,\r\n            active: true\r\n        }));\r\n    }\r\n\r\n    function acceptListing(uint listingId) external {\r\n        require(listingId < listings.length, \"Invalid ID\");\r\n        Listing storage listing = listings[listingId];\r\n        require(listing.active, \"Inactive\");\r\n        require(msg.sender != listing.seller, \"Own listing\");\r\n        require(inventory.hasCard(msg.sender, listing.requestCardId, 1), \"No card\");\r\n\r\n        // Swap cards\r\n        inventory.transferCards(msg.sender, listing.seller, listing.requestCardId, 1);\r\n        inventory.transferCards(listing.seller, msg.sender, listing.offerCardId, 1);\r\n\r\n        listing.active = false;\r\n    }\r\n\r\n    function getAllListings() external view returns (Listing[] memory) {\r\n        return listings;\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"CardTrading.sol": {
				"CardTrading": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "inventoryAddress",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "listingId",
									"type": "uint256"
								}
							],
							"name": "acceptListing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "offerCardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestCardId",
									"type": "uint256"
								}
							],
							"name": "createListing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllListings",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "seller",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "offerCardId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "requestCardId",
											"type": "uint256"
										},
										{
											"internalType": "bool",
											"name": "active",
											"type": "bool"
										}
									],
									"internalType": "struct CardTrading.Listing[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "inventory",
							"outputs": [
								{
									"internalType": "contract IInventoryManager",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "listings",
							"outputs": [
								{
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "offerCardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestCardId",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inventoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"acceptListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestCardId\",\"type\":\"uint256\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllListings\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestCardId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct CardTrading.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"contract IInventoryManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestCardId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CardTrading.sol\":\"CardTrading\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"CardTrading.sol\":{\"keccak256\":\"0xeb24e4d552399fc89280b7ed6272d890b3c8737e1e77e57e91eb764e5edef340\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b414cd95d880656fbb8f1a33817c2333caa317c07a63ef4840403d7c071019d0\",\"dweb:/ipfs/Qme19nRZk8TsS6mS2vcB3D4Sqg5H1pX3UmeWLW1kuLzGWB\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 49,
								"contract": "CardTrading.sol:CardTrading",
								"label": "listings",
								"offset": 0,
								"slot": "0",
								"type": "t_array(t_struct(Listing)45_storage)dyn_storage"
							},
							{
								"astId": 52,
								"contract": "CardTrading.sol:CardTrading",
								"label": "inventory",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IInventoryManager)36"
							},
							{
								"astId": 54,
								"contract": "CardTrading.sol:CardTrading",
								"label": "owner",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_struct(Listing)45_storage)dyn_storage": {
								"base": "t_struct(Listing)45_storage",
								"encoding": "dynamic_array",
								"label": "struct CardTrading.Listing[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IInventoryManager)36": {
								"encoding": "inplace",
								"label": "contract IInventoryManager",
								"numberOfBytes": "20"
							},
							"t_struct(Listing)45_storage": {
								"encoding": "inplace",
								"label": "struct CardTrading.Listing",
								"members": [
									{
										"astId": 38,
										"contract": "CardTrading.sol:CardTrading",
										"label": "seller",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 40,
										"contract": "CardTrading.sol:CardTrading",
										"label": "offerCardId",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 42,
										"contract": "CardTrading.sol:CardTrading",
										"label": "requestCardId",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 44,
										"contract": "CardTrading.sol:CardTrading",
										"label": "active",
										"offset": 0,
										"slot": "3",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "128"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 12940\n// Code size = 40538 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 4 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @30\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffff80\n   341: u64 [sp + 0x78] = ra\n   344: u64 [sp + 0x70] = s0\n   347: u64 [sp + 0x68] = s1\n   350: s0 = sp + 0x80\n   354: sp = sp & 0xffffffffffffffe0\n   357: a0 = 0x40\n   360: a1 = 0x20\n   363: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   368: u8 [a0 + 31] = 0x80\n   373: u8 [a0 + 30] = 0\n   376: u8 [a0 + 29] = 0\n   379: u8 [a0 + 28] = 0\n   382: u8 [a0 + 27] = 0\n   385: u8 [a0 + 26] = 0\n   388: u8 [a0 + 25] = 0\n   391: u8 [a0 + 24] = 0\n   394: u8 [a0 + 23] = 0\n   397: u8 [a0 + 22] = 0\n   400: u8 [a0 + 21] = 0\n   403: u8 [a0 + 20] = 0\n   406: u8 [a0 + 19] = 0\n   409: u8 [a0 + 18] = 0\n   412: u8 [a0 + 17] = 0\n   415: u8 [a0 + 16] = 0\n   418: u8 [a0 + 15] = 0\n   421: u8 [a0 + 14] = 0\n   424: u8 [a0 + 13] = 0\n   427: u8 [a0 + 12] = 0\n   430: u8 [a0 + 11] = 0\n   433: u8 [a0 + 10] = 0\n   436: u8 [a0 + 9] = 0\n   439: u8 [a0 + 8] = 0\n   442: u8 [a0 + 7] = 0\n   445: u8 [a0 + 6] = 0\n   448: u8 [a0 + 5] = 0\n   451: u8 [a0 + 4] = 0\n   454: u8 [a0 + 3] = 0\n   457: u8 [a0 + 2] = 0\n   460: u8 [a0 + 1] = 0\n   463: u8 [a0 + 0] = 0\n   465: u64 [sp + 88] = 0\n   468: u64 [sp + 64] = 0\n   471: u64 [sp + 72] = 0\n   474: u64 [sp + 80] = 0\n   477: i32 a0 = sp + 0x40\n   480: ecalli 15 // 'value_transferred'\n   482: fallthrough\n      : @16 (gas: 8)\n   483: a0 = u64 [sp + 0x50]\n   486: a1 = u64 [sp + 0x58]\n   489: a2 = u64 [sp + 0x48]\n   492: a3 = u64 [sp + 0x40]\n   495: a1 = a1 | a2\n   498: a0 = a0 | a3\n   501: a0 = a0 | a1\n   504: jump @22 if a0 != 0\n      : @17 (gas: 20)\n   508: a0 = sp + 0x20\n   511: ra = 0xa\n   514: sp = sp + 0xffffffffffffff90\n   517: u64 [sp + 0x68] = ra\n   520: u64 [sp + 0x60] = s0\n   523: u64 [sp + 0x58] = s1\n   526: s0 = sp + 0x70\n   529: sp = sp & 0xfffffffffffffff0\n   532: s1 = i32 [0x20004]\n   537: u64 [sp + 0x8] = a0\n   540: a0 = s1 << 0x20\n   543: a0 = a0 >> 0x20\n   546: u64 [sp + 40] = 0\n   549: u64 [sp + 32] = 0\n   552: u64 [sp + 0x10] = a0\n   555: a0 = sp + 0x30\n   558: a1 = sp + 0x10\n   561: u64 [sp + 24] = 0\n   564: ra = 0x36\n   567: jump @49\n      : @18 [@dyn 5] (gas: 157)\n   570: a1 = u64 [sp + 0x20]\n   573: a0 = u64 [sp + 0x28]\n   576: a2 = u64 [sp + 0x30]\n   579: a3 = u64 [sp + 0x38]\n   582: u64 [sp + 0x18] = a3\n   585: u64 [sp + 0x10] = a2\n   588: u64 [sp + 0x8] = a0\n   591: a0 = sp\n   593: u64 [sp] = a1\n   595: ra = 0xc\n   598: sp = sp + 0xfffffffffffffe40\n   602: u64 [sp + 0x1b8] = ra\n   606: u64 [sp + 0x1b0] = s0\n   610: u64 [sp + 0x1a8] = s1\n   614: s0 = sp + 0x1c0\n   618: sp = sp & 0xffffffffffffffe0\n   621: a1 = u64 [a0]\n   623: u64 [sp + 0x78] = a1\n   626: a1 = u64 [a0 + 0x8]\n   629: u64 [sp + 0x70] = a1\n   632: s1 = u32 [a0 + 0x10]\n   635: u64 [sp + 376] = 0\n   639: u64 [sp + 368] = 0\n   643: u64 [sp + 360] = 0\n   647: u64 [sp + 352] = 0x1\n   652: u64 [sp + 408] = 0\n   656: u64 [sp + 400] = 0\n   660: u64 [sp + 392] = 0\n   664: u64 [sp + 384] = 0\n   668: u32 [sp + 416] = 0x20\n   673: i32 a1 = sp + 0x160\n   677: i32 a3 = sp + 0x180\n   681: i32 a4 = sp + 0x1a0\n   685: a2 = 0xffffffffffffffff\n   688: a0 = 0\n   690: ecalli 7 // 'get_storage'\n   692: a0 = u32 [sp + 0x194]\n   696: a0 = a0 << 0x20\n   699: a1 = u64 [sp + 0x198]\n   703: a0 = a0 | s1\n   706: u64 [sp + 376] = 0\n   710: u64 [sp + 368] = 0\n   714: u64 [sp + 360] = 0\n   718: u64 [sp + 352] = 0x1\n   723: u64 [sp + 0x198] = a1\n   727: u64 [sp + 0x190] = a0\n   731: a0 = u64 [sp + 0x70]\n   734: u64 [sp + 0x188] = a0\n   738: a0 = u64 [sp + 0x78]\n   741: u64 [sp + 0x180] = a0\n   745: i32 a1 = sp + 0x160\n   749: i32 a3 = sp + 0x180\n   753: a2 = 0xffffffffffffffff\n   756: a4 = 0x20\n   759: a0 = 0\n   761: ecalli 14 // 'set_storage'\n   763: i32 a0 = sp + 0x80\n   767: ecalli 5 // 'caller'\n   769: a0 = u64 [sp + 0x88]\n   773: a1 = i32 [sp + 0x90]\n   777: a2 = u64 [sp + 0x80]\n   781: a0 = reverse a0\n   783: a3 = a0 << 0x20\n   786: a1 = reverse a1\n   788: a1 = a1 >> 0x20\n   791: a1 = a1 | a3\n   794: u64 [sp + 0x78] = a1\n   797: a0 = a0 >> 0x20\n   800: s1 = reverse a2\n   802: a1 = s1 << 0x20\n   805: a0 = a0 | a1\n   808: u64 [sp + 0x70] = a0\n   811: s1 = s1 >> 0x20\n   814: u64 [sp + 376] = 0\n   818: u64 [sp + 368] = 0\n   822: u64 [sp + 360] = 0\n   826: u64 [sp + 352] = 0x2\n   831: u64 [sp + 408] = 0\n   835: u64 [sp + 400] = 0\n   839: u64 [sp + 392] = 0\n   843: u64 [sp + 384] = 0\n   847: u32 [sp + 416] = 0x20\n   852: i32 a1 = sp + 0x160\n   856: i32 a3 = sp + 0x180\n   860: i32 a4 = sp + 0x1a0\n   864: a2 = 0xffffffffffffffff\n   867: a0 = 0\n   869: ecalli 7 // 'get_storage'\n   871: a0 = u32 [sp + 0x194]\n   875: a0 = a0 << 0x20\n   878: a1 = u64 [sp + 0x198]\n   882: a0 = a0 | s1\n   885: u64 [sp + 376] = 0\n   889: u64 [sp + 368] = 0\n   893: u64 [sp + 360] = 0\n   897: u64 [sp + 352] = 0x2\n   902: u64 [sp + 0x198] = a1\n   906: u64 [sp + 0x190] = a0\n   910: a0 = u64 [sp + 0x70]\n   913: u64 [sp + 0x188] = a0\n   917: a0 = u64 [sp + 0x78]\n   920: u64 [sp + 0x180] = a0\n   924: i32 a1 = sp + 0x160\n   928: i32 a3 = sp + 0x180\n   932: a2 = 0xffffffffffffffff\n   935: a4 = 0x20\n   938: a0 = 0\n   940: ecalli 14 // 'set_storage'\n   942: u64 [sp + 376] = 0\n   946: u64 [sp + 368] = 0\n   950: u64 [sp + 360] = 0\n   954: u64 [sp + 352] = 0x1\n   959: u64 [sp + 408] = 0\n   963: u64 [sp + 400] = 0\n   967: u64 [sp + 392] = 0\n   971: u64 [sp + 384] = 0\n   975: u32 [sp + 416] = 0x20\n   980: i32 a1 = sp + 0x160\n   984: i32 a3 = sp + 0x180\n   988: i32 a4 = sp + 0x1a0\n   992: a2 = 0xffffffffffffffff\n   995: a0 = 0\n   997: ecalli 7 // 'get_storage'\n   999: a0 = u64 [sp + 0x180]\n  1003: u64 [sp + 0x78] = a0\n  1006: a0 = u64 [sp + 0x190]\n  1010: u64 [sp + 0x70] = a0\n  1013: s1 = u64 [sp + 0x188]\n  1017: i32 a0 = sp + 0xa0\n  1021: ecalli 0 // 'address'\n  1022: a0 = i32 [sp + 0xb0]\n  1026: u64 [sp + 0x48] = a0\n  1029: a0 = u64 [sp + 0xa0]\n  1033: u64 [sp + 0x40] = a0\n  1036: a0 = u64 [sp + 0xa8]\n  1040: u64 [sp + 0x38] = a0\n  1043: a0 = reverse s1\n  1045: a1 = a0 << 0x20\n  1048: a2 = u64 [sp + 0x70]\n  1051: a2 = reverse a2\n  1053: a2 = a2 >> 0x20\n  1056: a3 = a2 | a1\n  1059: a0 = a0 >> 0x20\n  1062: a1 = u64 [sp + 0x78]\n  1065: a1 = reverse a1\n  1067: a2 = a1 << 0x20\n  1070: a0 = a0 | a2\n  1073: a1 = a1 >> 0x20\n  1076: u64 [sp + 0x50] = a0\n  1079: u64 [sp + 0xc8] = a0\n  1083: u64 [sp + 0x60] = a3\n  1086: u64 [sp + 0xc0] = a3\n  1090: u64 [sp + 0x58] = a1\n  1093: u32 [sp + 0xd0] = a1\n  1097: i32 a0 = sp + 0xc0\n  1101: ecalli 6 // 'code_size'\n  1103: jump @72\n      : @19 [@dyn 6] (gas: 3)\n  1106: a0 = 0x40\n  1109: a1 = 0x20\n  1112: ra = 14, jump @0\n      : @20 [@dyn 7] (gas: 100)\n  1117: a1 = u8 [a0 + 0x11]\n  1120: a2 = u8 [a0 + 0x10]\n  1123: a3 = u8 [a0 + 0x12]\n  1126: a4 = u8 [a0 + 0x13]\n  1129: a1 = a1 << 0x8\n  1132: a1 = a1 | a2\n  1135: a3 = a3 << 0x10\n  1138: a4 = a4 << 0x18\n  1141: a3 = a3 | a4\n  1144: a1 = a1 | a3\n  1147: a2 = u8 [a0 + 0x15]\n  1150: a3 = u8 [a0 + 0x14]\n  1153: a4 = u8 [a0 + 0x16]\n  1156: a5 = u8 [a0 + 0x17]\n  1159: a2 = a2 << 0x8\n  1162: a2 = a2 | a3\n  1165: a4 = a4 << 0x10\n  1168: a5 = a5 << 0x18\n  1171: a4 = a4 | a5\n  1174: a2 = a2 | a4\n  1177: a2 = a2 << 0x20\n  1180: t0 = a2 | a1\n  1183: a2 = u8 [a0 + 0x1]\n  1186: a3 = u8 [a0]\n  1188: a4 = u8 [a0 + 0x2]\n  1191: a5 = u8 [a0 + 0x3]\n  1194: a2 = a2 << 0x8\n  1197: a2 = a2 | a3\n  1200: a4 = a4 << 0x10\n  1203: a5 = a5 << 0x18\n  1206: a4 = a4 | a5\n  1209: a2 = a2 | a4\n  1212: a3 = u8 [a0 + 0x5]\n  1215: a4 = u8 [a0 + 0x4]\n  1218: a5 = u8 [a0 + 0x6]\n  1221: s1 = u8 [a0 + 0x7]\n  1224: a3 = a3 << 0x8\n  1227: a3 = a3 | a4\n  1230: a5 = a5 << 0x10\n  1233: s1 = s1 << 0x18\n  1236: a5 = a5 | s1\n  1239: a3 = a3 | a5\n  1242: a3 = a3 << 0x20\n  1245: a2 = a2 | a3\n  1248: a3 = u8 [a0 + 0x19]\n  1251: a4 = u8 [a0 + 0x18]\n  1254: a5 = u8 [a0 + 0x1a]\n  1257: s1 = u8 [a0 + 0x1b]\n  1260: a3 = a3 << 0x8\n  1263: a3 = a3 | a4\n  1266: a5 = a5 << 0x10\n  1269: s1 = s1 << 0x18\n  1272: a5 = a5 | s1\n  1275: a3 = a3 | a5\n  1278: a4 = u8 [a0 + 0x1d]\n  1281: a5 = u8 [a0 + 0x1c]\n  1284: s1 = u8 [a0 + 0x1e]\n  1287: a1 = u8 [a0 + 0x1f]\n  1290: a4 = a4 << 0x8\n  1293: a4 = a4 | a5\n  1296: s1 = s1 << 0x10\n  1299: a1 = a1 << 0x18\n  1302: a1 = a1 | s1\n  1305: a1 = a1 | a4\n  1308: a1 = a1 << 0x20\n  1311: a3 = a3 | a1\n  1314: a1 = u8 [a0 + 0x9]\n  1317: a4 = u8 [a0 + 0x8]\n  1320: a5 = u8 [a0 + 0xa]\n  1323: s1 = u8 [a0 + 0xb]\n  1326: a1 = a1 << 0x8\n  1329: a1 = a1 | a4\n  1332: a5 = a5 << 0x10\n  1335: s1 = s1 << 0x18\n  1338: a5 = a5 | s1\n  1341: a1 = a1 | a5\n  1344: a4 = u8 [a0 + 0xd]\n  1347: a5 = u8 [a0 + 0xc]\n  1350: s1 = u8 [a0 + 0xe]\n  1353: a0 = u8 [a0 + 0xf]\n  1356: a4 = a4 << 0x8\n  1359: a4 = a4 | a5\n  1362: s1 = s1 << 0x10\n  1365: a0 = a0 << 0x18\n  1368: a0 = a0 | s1\n  1371: a0 = a0 | a4\n  1374: a0 = a0 << 0x20\n  1377: a0 = a0 | a1\n  1380: a0 = reverse a0\n  1382: s1 = reverse a3\n  1384: a1 = reverse a2\n  1386: a2 = reverse t0\n  1388: a1 = a1 | a2\n  1391: a2 = s1 | a0\n  1394: a2 = a2 | a1\n  1397: a2 = a2 >> 0x20\n  1400: a0 = a0 | a1\n  1403: a0 = a0 << 0x20\n  1406: a0 = a0 | a2\n  1409: jump @24 if a0 == 0\n      : @21 (gas: 1)\n  1412: trap\n      : @22 (gas: 3)\n  1413: a0 = 0\n  1415: a1 = 0\n  1417: ra = 16, jump @0\n      : @23 [@dyn 8] (gas: 5)\n  1422: i32 a1 = a0 + 0\n  1424: a0 = 0x1\n  1427: a2 = 0\n  1429: ecalli 12 // 'seal_return'\n  1431: fallthrough\n      : @24 (gas: 4)\n  1432: i32 s1 = s1 + 0\n  1434: a0 = s1\n  1436: a1 = 0\n  1438: ra = 18, jump @0\n      : @25 [@dyn 9] (gas: 5)\n  1443: i32 a0 = a0 + 0\n  1445: a1 = 0\n  1447: a2 = 0\n  1449: ecalli 2 // 'call_data_copy'\n  1451: fallthrough\n      : @26 (gas: 2)\n  1452: a1 = i32 [0x20008]\n  1457: jump @28 if a1 == 0\n      : @27 (gas: 4)\n  1460: a0 = 0x30010\n  1465: i32 a0 = a0 + 0\n  1467: ecalli 13 // 'set_immutable_data'\n  1469: fallthrough\n      : @28 (gas: 3)\n  1470: a0 = s1\n  1472: a1 = 0\n  1474: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 6)\n  1479: i32 a1 = a0 + 0\n  1481: a0 = 0\n  1483: a2 = 0\n  1485: ra = 0x16\n  1488: ecalli 12 // 'seal_return'\n  1490: fallthrough\n      : @30 [@dyn 11] (gas: 8)\n  1491: sp = sp + 0xffffffffffffffc0\n  1494: u64 [sp + 0x38] = ra\n  1497: u64 [sp + 0x30] = s0\n  1500: s0 = sp + 0x40\n  1503: sp = sp & 0xffffffffffffffe0\n  1506: a0 = 0x40\n  1509: a1 = 0x20\n  1512: ra = 24, jump @0\n      : @31 [@dyn 12] (gas: 34)\n  1517: u8 [a0 + 31] = 0x80\n  1522: u8 [a0 + 30] = 0\n  1525: u8 [a0 + 29] = 0\n  1528: u8 [a0 + 28] = 0\n  1531: u8 [a0 + 27] = 0\n  1534: u8 [a0 + 26] = 0\n  1537: u8 [a0 + 25] = 0\n  1540: u8 [a0 + 24] = 0\n  1543: u8 [a0 + 23] = 0\n  1546: u8 [a0 + 22] = 0\n  1549: u8 [a0 + 21] = 0\n  1552: u8 [a0 + 20] = 0\n  1555: u8 [a0 + 19] = 0\n  1558: u8 [a0 + 18] = 0\n  1561: u8 [a0 + 17] = 0\n  1564: u8 [a0 + 16] = 0\n  1567: u8 [a0 + 15] = 0\n  1570: u8 [a0 + 14] = 0\n  1573: u8 [a0 + 13] = 0\n  1576: u8 [a0 + 12] = 0\n  1579: u8 [a0 + 11] = 0\n  1582: u8 [a0 + 10] = 0\n  1585: u8 [a0 + 9] = 0\n  1588: u8 [a0 + 8] = 0\n  1591: u8 [a0 + 7] = 0\n  1594: u8 [a0 + 3] = 0\n  1597: u8 [a0 + 2] = 0\n  1600: u8 [a0 + 1] = 0\n  1603: u8 [a0 + 0] = 0\n  1605: a1 = i32 [0x20004]\n  1610: u8 [a0 + 6] = 0\n  1613: u8 [a0 + 5] = 0\n  1616: u8 [a0 + 4] = 0\n  1619: jump @42 if a1 <u 4\n      : @32 (gas: 4)\n  1624: i32 a0 = sp + 0\n  1626: a1 = 0\n  1628: ecalli 3 // 'call_data_load'\n  1630: fallthrough\n      : @33 (gas: 3)\n  1631: a0 = i32 [sp + 0x1c]\n  1634: a1 = 0xffffffffb0ecf000\n  1640: jump @38 if a0 >s 2968316797\n      : @34 (gas: 1)\n  1647: jump @43 if a0 == 2376452955\n      : @35 (gas: 1)\n  1655: jump @45 if a0 == 2811306921\n      : @36 (gas: 1)\n  1663: jump @42 if a0 != 2926824684\n      : @37 (gas: 14)\n  1670: ra = 0x1a\n  1673: sp = sp + 0xfffffffffffffee0\n  1677: u64 [sp + 0x118] = ra\n  1681: u64 [sp + 0x110] = s0\n  1685: u64 [sp + 0x108] = s1\n  1689: s0 = sp + 0x120\n  1693: sp = sp & 0xffffffffffffffe0\n  1696: u64 [sp + 248] = 0\n  1700: u64 [sp + 240] = 0\n  1704: u64 [sp + 232] = 0\n  1708: u64 [sp + 224] = 0\n  1712: i32 a0 = sp + 0xe0\n  1716: ecalli 15 // 'value_transferred'\n  1718: jump @163\n      : @38 [@dyn 13] (gas: 2)\n  1721: i32 a1 = a1 + 0xfffffffffffffb7e\n  1725: jump @44 if a0 == a1\n      : @39 (gas: 1)\n  1729: jump @46 if a0 == 3732202875\n      : @40 (gas: 1)\n  1737: jump @42 if a0 != 366291548\n      : @41 (gas: 14)\n  1744: ra = 0x1c\n  1747: sp = sp + 0xffffffffffffff60\n  1751: u64 [sp + 0x98] = ra\n  1755: u64 [sp + 0x90] = s0\n  1759: u64 [sp + 0x88] = s1\n  1763: s0 = sp + 0xa0\n  1767: sp = sp & 0xffffffffffffffe0\n  1770: u64 [sp + 56] = 0\n  1773: u64 [sp + 48] = 0\n  1776: u64 [sp + 40] = 0\n  1779: u64 [sp + 32] = 0\n  1782: i32 a0 = sp + 0x20\n  1785: ecalli 15 // 'value_transferred'\n  1787: jump @89\n      : @42 [@dyn 14] (gas: 7)\n  1790: ra = 0x1e\n  1793: sp = sp + 0xfffffffffffffff8\n  1796: u64 [sp] = ra\n  1798: a0 = 0\n  1800: a1 = 0\n  1802: ra = 0x40\n  1805: jump @0\n      : @43 [@dyn 15] (gas: 14)\n  1808: ra = 0x20\n  1811: sp = sp + 0xffffffffffffff60\n  1815: u64 [sp + 0x98] = ra\n  1819: u64 [sp + 0x90] = s0\n  1823: u64 [sp + 0x88] = s1\n  1827: s0 = sp + 0xa0\n  1831: sp = sp & 0xffffffffffffffe0\n  1834: u64 [sp + 56] = 0\n  1837: u64 [sp + 48] = 0\n  1840: u64 [sp + 40] = 0\n  1843: u64 [sp + 32] = 0\n  1846: i32 a0 = sp + 0x20\n  1849: ecalli 15 // 'value_transferred'\n  1851: jump @100\n      : @44 [@dyn 16] (gas: 1)\n  1854: ra = 34, jump @181\n      : @45 [@dyn 17] (gas: 14)\n  1859: ra = 0x24\n  1862: sp = sp + 0xffffffffffffff40\n  1866: u64 [sp + 0xb8] = ra\n  1870: u64 [sp + 0xb0] = s0\n  1874: u64 [sp + 0xa8] = s1\n  1878: s0 = sp + 0xc0\n  1882: sp = sp & 0xffffffffffffffe0\n  1885: u64 [sp + 120] = 0\n  1888: u64 [sp + 112] = 0\n  1891: u64 [sp + 104] = 0\n  1894: u64 [sp + 96] = 0\n  1897: i32 a0 = sp + 0x60\n  1900: ecalli 15 // 'value_transferred'\n  1902: jump @111\n      : @46 [@dyn 18] (gas: 14)\n  1905: ra = 0x26\n  1908: sp = sp + 0xfffffffffffffe60\n  1912: u64 [sp + 0x198] = ra\n  1916: u64 [sp + 0x190] = s0\n  1920: u64 [sp + 0x188] = s1\n  1924: s0 = sp + 0x1a0\n  1928: sp = sp & 0xffffffffffffffe0\n  1931: u64 [sp + 344] = 0\n  1935: u64 [sp + 336] = 0\n  1939: u64 [sp + 328] = 0\n  1943: u64 [sp + 320] = 0\n  1947: i32 a0 = sp + 0x140\n  1951: ecalli 15 // 'value_transferred'\n  1953: jump @222\n      : @47 [@dyn 19] (gas: 7)\n  1956: sp = sp + 0xfffffffffffffff0\n  1959: u64 [sp + 0x8] = ra\n  1962: u64 [sp] = s0\n  1964: s0 = a0\n  1966: a0 = 0x40\n  1969: a1 = 0x20\n  1972: ra = 40, jump @0\n      : @48 [@dyn 20] (gas: 100)\n  1977: a1 = u8 [a0 + 0x1]\n  1980: a2 = u8 [a0]\n  1982: a3 = u8 [a0 + 0x2]\n  1985: a4 = u8 [a0 + 0x3]\n  1988: a1 = a1 << 0x8\n  1991: a1 = a1 | a2\n  1994: a3 = a3 << 0x10\n  1997: a4 = a4 << 0x18\n  2000: a3 = a3 | a4\n  2003: a1 = a1 | a3\n  2006: a2 = u8 [a0 + 0x5]\n  2009: a3 = u8 [a0 + 0x4]\n  2012: a4 = u8 [a0 + 0x6]\n  2015: a5 = u8 [a0 + 0x7]\n  2018: a2 = a2 << 0x8\n  2021: a2 = a2 | a3\n  2024: a4 = a4 << 0x10\n  2027: a5 = a5 << 0x18\n  2030: a4 = a4 | a5\n  2033: a2 = a2 | a4\n  2036: a2 = a2 << 0x20\n  2039: t0 = a2 | a1\n  2042: a2 = u8 [a0 + 0x9]\n  2045: a3 = u8 [a0 + 0x8]\n  2048: a4 = u8 [a0 + 0xa]\n  2051: a5 = u8 [a0 + 0xb]\n  2054: a2 = a2 << 0x8\n  2057: a2 = a2 | a3\n  2060: a4 = a4 << 0x10\n  2063: a5 = a5 << 0x18\n  2066: a4 = a4 | a5\n  2069: a2 = a2 | a4\n  2072: a3 = u8 [a0 + 0xd]\n  2075: a4 = u8 [a0 + 0xc]\n  2078: a5 = u8 [a0 + 0xe]\n  2081: a1 = u8 [a0 + 0xf]\n  2084: a3 = a3 << 0x8\n  2087: a3 = a3 | a4\n  2090: a5 = a5 << 0x10\n  2093: a1 = a1 << 0x18\n  2096: a1 = a1 | a5\n  2099: a1 = a1 | a3\n  2102: a1 = a1 << 0x20\n  2105: t1 = a1 | a2\n  2108: a1 = u8 [a0 + 0x11]\n  2111: a3 = u8 [a0 + 0x10]\n  2114: a4 = u8 [a0 + 0x12]\n  2117: a5 = u8 [a0 + 0x13]\n  2120: a1 = a1 << 0x8\n  2123: a1 = a1 | a3\n  2126: a4 = a4 << 0x10\n  2129: a5 = a5 << 0x18\n  2132: a4 = a4 | a5\n  2135: a1 = a1 | a4\n  2138: a3 = u8 [a0 + 0x15]\n  2141: a4 = u8 [a0 + 0x14]\n  2144: a5 = u8 [a0 + 0x16]\n  2147: a2 = u8 [a0 + 0x17]\n  2150: a3 = a3 << 0x8\n  2153: a3 = a3 | a4\n  2156: a5 = a5 << 0x10\n  2159: a2 = a2 << 0x18\n  2162: a2 = a2 | a5\n  2165: a2 = a2 | a3\n  2168: a2 = a2 << 0x20\n  2171: a3 = a2 | a1\n  2174: a1 = u8 [a0 + 0x19]\n  2177: a2 = u8 [a0 + 0x18]\n  2180: a4 = u8 [a0 + 0x1a]\n  2183: a5 = u8 [a0 + 0x1b]\n  2186: a1 = a1 << 0x8\n  2189: a1 = a1 | a2\n  2192: a4 = a4 << 0x10\n  2195: a5 = a5 << 0x18\n  2198: a4 = a4 | a5\n  2201: a1 = a1 | a4\n  2204: a2 = u8 [a0 + 0x1d]\n  2207: a4 = u8 [a0 + 0x1c]\n  2210: a5 = u8 [a0 + 0x1e]\n  2213: a0 = u8 [a0 + 0x1f]\n  2216: a2 = a2 << 0x8\n  2219: a2 = a2 | a4\n  2222: a5 = a5 << 0x10\n  2225: a0 = a0 << 0x18\n  2228: a0 = a0 | a5\n  2231: a0 = a0 | a2\n  2234: a0 = a0 << 0x20\n  2237: a0 = a0 | a1\n  2240: a0 = reverse a0\n  2242: a1 = reverse a3\n  2244: a2 = reverse t1\n  2246: a3 = reverse t0\n  2248: u64 [s0 + 0x18] = a3\n  2251: u64 [s0 + 0x10] = a2\n  2254: u64 [s0 + 0x8] = a1\n  2257: u64 [s0] = a0\n  2259: ra = u64 [sp + 0x8]\n  2262: s0 = u64 [sp]\n  2264: sp = sp + 0x10\n  2267: ret\n      : @49 (gas: 18)\n  2269: sp = sp + 0xffffffffffffff60\n  2273: u64 [sp + 0x98] = ra\n  2277: u64 [sp + 0x90] = s0\n  2281: u64 [sp + 0x88] = s1\n  2285: s0 = sp + 0xa0\n  2289: sp = sp & 0xfffffffffffffff0\n  2292: a2 = u64 [a1 + 0x18]\n  2295: u64 [sp + 0x30] = a2\n  2298: a2 = u64 [a1 + 0x10]\n  2301: u64 [sp + 0x28] = a2\n  2304: a2 = u64 [a1 + 0x8]\n  2307: u64 [sp + 0x20] = a2\n  2310: a1 = u64 [a1]\n  2312: u64 [sp + 0x18] = a1\n  2315: u64 [sp + 0x38] = a0\n  2318: a0 = 0x40\n  2321: a1 = 0x20\n  2324: ra = 42, jump @0\n      : @50 [@dyn 21] (gas: 130)\n  2329: a1 = u8 [a0 + 0x19]\n  2332: a2 = u8 [a0 + 0x18]\n  2335: a3 = u8 [a0 + 0x1a]\n  2338: a4 = u8 [a0 + 0x1b]\n  2341: a1 = a1 << 0x8\n  2344: a1 = a1 | a2\n  2347: a3 = a3 << 0x10\n  2350: a4 = a4 << 0x18\n  2353: a3 = a3 | a4\n  2356: a1 = a1 | a3\n  2359: a2 = u8 [a0 + 0x1d]\n  2362: a3 = u8 [a0 + 0x1c]\n  2365: a4 = u8 [a0 + 0x1e]\n  2368: a5 = u8 [a0 + 0x1f]\n  2371: a2 = a2 << 0x8\n  2374: a2 = a2 | a3\n  2377: a4 = a4 << 0x10\n  2380: a5 = a5 << 0x18\n  2383: a4 = a4 | a5\n  2386: a2 = a2 | a4\n  2389: a2 = a2 << 0x20\n  2392: t0 = a2 | a1\n  2395: a2 = u8 [a0 + 0x11]\n  2398: a3 = u8 [a0 + 0x10]\n  2401: a4 = u8 [a0 + 0x12]\n  2404: a5 = u8 [a0 + 0x13]\n  2407: a2 = a2 << 0x8\n  2410: a2 = a2 | a3\n  2413: a4 = a4 << 0x10\n  2416: a5 = a5 << 0x18\n  2419: a4 = a4 | a5\n  2422: a2 = a2 | a4\n  2425: a3 = u8 [a0 + 0x15]\n  2428: a4 = u8 [a0 + 0x14]\n  2431: a5 = u8 [a0 + 0x16]\n  2434: s1 = u8 [a0 + 0x17]\n  2437: a3 = a3 << 0x8\n  2440: a3 = a3 | a4\n  2443: a5 = a5 << 0x10\n  2446: s1 = s1 << 0x18\n  2449: a5 = a5 | s1\n  2452: a3 = a3 | a5\n  2455: a3 = a3 << 0x20\n  2458: a2 = a2 | a3\n  2461: a3 = u8 [a0 + 0x9]\n  2464: a4 = u8 [a0 + 0x8]\n  2467: a5 = u8 [a0 + 0xa]\n  2470: s1 = u8 [a0 + 0xb]\n  2473: a3 = a3 << 0x8\n  2476: a3 = a3 | a4\n  2479: a5 = a5 << 0x10\n  2482: s1 = s1 << 0x18\n  2485: a5 = a5 | s1\n  2488: a3 = a3 | a5\n  2491: a4 = u8 [a0 + 0xd]\n  2494: a5 = u8 [a0 + 0xc]\n  2497: s1 = u8 [a0 + 0xe]\n  2500: a1 = u8 [a0 + 0xf]\n  2503: a4 = a4 << 0x8\n  2506: a4 = a4 | a5\n  2509: s1 = s1 << 0x10\n  2512: a1 = a1 << 0x18\n  2515: a1 = a1 | s1\n  2518: a1 = a1 | a4\n  2521: a1 = a1 << 0x20\n  2524: a3 = a3 | a1\n  2527: a1 = u8 [a0 + 0x1]\n  2530: a4 = u8 [a0]\n  2532: a5 = u8 [a0 + 0x2]\n  2535: s1 = u8 [a0 + 0x3]\n  2538: a1 = a1 << 0x8\n  2541: a1 = a1 | a4\n  2544: a5 = a5 << 0x10\n  2547: s1 = s1 << 0x18\n  2550: a5 = a5 | s1\n  2553: a1 = a1 | a5\n  2556: a4 = u8 [a0 + 0x5]\n  2559: a5 = u8 [a0 + 0x4]\n  2562: s1 = u8 [a0 + 0x6]\n  2565: a0 = u8 [a0 + 0x7]\n  2568: a4 = a4 << 0x8\n  2571: a4 = a4 | a5\n  2574: s1 = s1 << 0x10\n  2577: a0 = a0 << 0x18\n  2580: a0 = a0 | s1\n  2583: a0 = a0 | a4\n  2586: a0 = a0 << 0x20\n  2589: a0 = a0 | a1\n  2592: t1 = reverse a0\n  2594: t2 = reverse a3\n  2596: s1 = reverse a2\n  2598: a5 = reverse t0\n  2600: a1 = u64 [sp + 0x18]\n  2603: a0 = a1 + 0x1f\n  2606: a1 = a0 <u a1\n  2609: a3 = u64 [sp + 0x20]\n  2612: a2 = a3 + a1\n  2615: a3 = a2 <u a3\n  2618: a3 = a1 if a1 == 0\n  2621: a1 = u64 [sp + 0x28]\n  2624: a3 = a3 + a1\n  2627: a1 = a3 <u a1\n  2630: a4 = u64 [sp + 0x30]\n  2633: a1 = a1 + a4\n  2636: a0 = a0 & 0xffffffffffffffe0\n  2639: a0 = a0 + a5\n  2642: u64 [sp + 0x28] = a5\n  2645: u64 [sp + 0x10] = a0\n  2648: a4 = a0 <u a5\n  2651: a2 = a2 + s1\n  2654: a5 = a2 + a4\n  2657: a2 = a5 ^ s1\n  2660: u64 [sp + 0x30] = s1\n  2663: a0 = a5 <u s1\n  2666: a0 = a4 if a2 == 0\n  2669: a3 = a3 + t2\n  2672: a4 = a3 + a0\n  2675: s1 = a4 <u a3\n  2678: a2 = a3 <u t2\n  2681: a1 = a1 + t1\n  2684: a1 = a1 + a2\n  2687: s1 = s1 + a1\n  2690: a1 = a4 >u 0\n  2692: a2 = s1 >u 0\n  2694: a2 = a1 if s1 == 0\n  2697: a1 = a4 | s1\n  2700: u64 [sp + 0x8] = a5\n  2703: a3 = a5 >u 0\n  2705: a3 = a2 if a1 != 0\n  2708: jump @54 if a3 != 0\n      : @51 (gas: 8)\n  2712: a1 = a4 <u t2\n  2715: a2 = s1 ^ t1\n  2718: a3 = s1 <u t1\n  2721: a3 = a1 if a2 == 0\n  2724: a1 = a4 ^ t2\n  2727: a1 = a1 | a2\n  2730: a0 = a3 if a1 != 0\n  2733: jump @54 if a0 != 0\n      : @52 (gas: 6)\n  2737: a0 = 0x40\n  2740: a1 = 0x20\n  2743: u64 [sp + 0x20] = t2\n  2746: u64 [sp + 0x18] = t1\n  2749: u64 [sp] = a4\n  2751: ra = 44, jump @0\n      : @53 [@dyn 22] (gas: 82)\n  2756: a1 = reverse s1\n  2758: a2 = u64 [sp]\n  2760: a2 = reverse a2\n  2762: a3 = u64 [sp + 0x8]\n  2765: a3 = reverse a3\n  2767: a4 = u64 [sp + 0x10]\n  2770: a4 = reverse a4\n  2772: u8 [a0 + 0x18] = a4\n  2775: a5 = a4 >> 0x38\n  2778: u8 [a0 + 0x1f] = a5\n  2781: a5 = a4 >> 0x30\n  2784: u8 [a0 + 0x1e] = a5\n  2787: a5 = a4 >> 0x28\n  2790: u8 [a0 + 0x1d] = a5\n  2793: a5 = a4 >> 0x20\n  2796: u8 [a0 + 0x1c] = a5\n  2799: a5 = a4 >> 0x18\n  2802: u8 [a0 + 0x1b] = a5\n  2805: a5 = a4 >> 0x10\n  2808: u8 [a0 + 0x1a] = a5\n  2811: a4 = a4 >> 0x8\n  2814: u8 [a0 + 0x19] = a4\n  2817: u8 [a0 + 0x10] = a3\n  2820: a4 = a3 >> 0x38\n  2823: u8 [a0 + 0x17] = a4\n  2826: a4 = a3 >> 0x30\n  2829: u8 [a0 + 0x16] = a4\n  2832: a4 = a3 >> 0x28\n  2835: u8 [a0 + 0x15] = a4\n  2838: a4 = a3 >> 0x20\n  2841: u8 [a0 + 0x14] = a4\n  2844: a4 = a3 >> 0x18\n  2847: u8 [a0 + 0x13] = a4\n  2850: a4 = a3 >> 0x10\n  2853: u8 [a0 + 0x12] = a4\n  2856: a3 = a3 >> 0x8\n  2859: u8 [a0 + 0x11] = a3\n  2862: u8 [a0 + 0x8] = a2\n  2865: a3 = a2 >> 0x38\n  2868: u8 [a0 + 0xf] = a3\n  2871: a3 = a2 >> 0x30\n  2874: u8 [a0 + 0xe] = a3\n  2877: a3 = a2 >> 0x28\n  2880: u8 [a0 + 0xd] = a3\n  2883: a3 = a2 >> 0x20\n  2886: u8 [a0 + 0xc] = a3\n  2889: a3 = a2 >> 0x18\n  2892: u8 [a0 + 0xb] = a3\n  2895: a3 = a2 >> 0x10\n  2898: u8 [a0 + 0xa] = a3\n  2901: a2 = a2 >> 0x8\n  2904: u8 [a0 + 0x9] = a2\n  2907: u8 [a0] = a1\n  2909: a2 = a1 >> 0x38\n  2912: u8 [a0 + 0x7] = a2\n  2915: a2 = a1 >> 0x30\n  2918: u8 [a0 + 0x6] = a2\n  2921: a2 = a1 >> 0x28\n  2924: u8 [a0 + 0x5] = a2\n  2927: a2 = a1 >> 0x20\n  2930: u8 [a0 + 0x4] = a2\n  2933: a2 = a1 >> 0x18\n  2936: u8 [a0 + 0x3] = a2\n  2939: a2 = a1 >> 0x10\n  2942: u8 [a0 + 0x2] = a2\n  2945: a1 = a1 >> 0x8\n  2948: u8 [a0 + 0x1] = a1\n  2951: a0 = u64 [sp + 0x38]\n  2954: a1 = u64 [sp + 0x28]\n  2957: u64 [a0] = a1\n  2959: a1 = u64 [sp + 0x18]\n  2962: u64 [a0 + 0x18] = a1\n  2965: a1 = u64 [sp + 0x30]\n  2968: u64 [a0 + 0x8] = a1\n  2971: a1 = u64 [sp + 0x20]\n  2974: u64 [a0 + 0x10] = a1\n  2977: sp = s0 + 0xffffffffffffff60\n  2981: ra = u64 [sp + 0x98]\n  2985: s0 = u64 [sp + 0x90]\n  2989: s1 = u64 [sp + 0x88]\n  2993: sp = sp + 0xa0\n  2997: ret\n      : @54 (gas: 8)\n  2999: u64 [sp + 112] = 0\n  3002: u64 [sp + 104] = 0\n  3005: u64 [sp + 96] = 0\n  3008: a0 = 0x4e487b7100000000\n  3018: a1 = sp + 0x60\n  3021: u64 [sp + 0x78] = a0\n  3024: a0 = 0\n  3026: ra = 46, jump @8\n      : @55 [@dyn 23] (gas: 7)\n  3031: u64 [sp + 88] = 0\n  3034: u64 [sp + 80] = 0\n  3037: u64 [sp + 64] = 0x41\n  3041: a0 = 0x4\n  3044: a1 = sp + 0x40\n  3047: u64 [sp + 72] = 0\n  3050: ra = 48, jump @8\n      : @56 [@dyn 24] (gas: 3)\n  3055: a1 = 0x24\n  3058: a0 = 0\n  3060: ra = 50, jump @0\n      : @57 [@dyn 25] (gas: 6)\n  3065: i32 a1 = a0 + 0\n  3067: a0 = 0x1\n  3070: a2 = 0x24\n  3073: ra = 0x34\n  3076: ecalli 12 // 'seal_return'\n  3078: fallthrough\n      : @58 [@dyn 26] (gas: 8)\n  3079: a2 = u32 [a1 + 0x10]\n  3082: a3 = u64 [a1 + 0x8]\n  3085: a1 = u64 [a1]\n  3087: u64 [a0 + 24] = 0\n  3090: u64 [a0 + 0x10] = a2\n  3093: u64 [a0 + 0x8] = a3\n  3096: u64 [a0] = a1\n  3098: ret\n      : @59 [@dyn 27] (gas: 12)\n  3100: a1 = u64 [sp + 0x48]\n  3103: a2 = u64 [sp + 0x40]\n  3106: a3 = u64 [sp + 0x38]\n  3109: a0 = u64 [sp + 0x30]\n  3112: a1 = a1 | a3\n  3115: a3 = a0 | a2\n  3118: a3 = a3 | a1\n  3121: a3 = a3 >> 0x20\n  3124: a1 = a1 | a2\n  3127: a1 = a1 << 0x20\n  3130: a1 = a1 | a3\n  3133: jump @66 if a1 != 0\n      : @60 (gas: 4)\n  3137: i32 a0 = a0 + 0\n  3139: u64 [sp] = a0\n  3141: a1 = s1\n  3143: ra = 56, jump @0\n      : @61 [@dyn 28] (gas: 5)\n  3148: i32 a0 = a0 + 0\n  3150: a1 = s1\n  3152: a2 = 0\n  3154: ecalli 2 // 'call_data_copy'\n  3156: fallthrough\n      : @62 (gas: 1)\n  3157: jump @67 if s1 <=u 31\n      : @63 (gas: 3)\n  3162: a1 = 0x20\n  3165: a0 = u64 [sp]\n  3167: ra = 58, jump @0\n      : @64 [@dyn 29] (gas: 54)\n  3172: a1 = u8 [a0 + 0x9]\n  3175: a2 = u8 [a0 + 0x8]\n  3178: a3 = u8 [a0 + 0xa]\n  3181: a4 = u8 [a0 + 0xb]\n  3184: a1 = a1 << 0x8\n  3187: a1 = a1 | a2\n  3190: a3 = a3 << 0x10\n  3193: a4 = a4 << 0x18\n  3196: a3 = a3 | a4\n  3199: a1 = a1 | a3\n  3202: a2 = u8 [a0 + 0xd]\n  3205: a3 = u8 [a0 + 0xc]\n  3208: a4 = u8 [a0 + 0xe]\n  3211: a5 = u8 [a0 + 0xf]\n  3214: a2 = a2 << 0x8\n  3217: a2 = a2 | a3\n  3220: a4 = a4 << 0x10\n  3223: a5 = a5 << 0x18\n  3226: a4 = a4 | a5\n  3229: a2 = a2 | a4\n  3232: a2 = a2 << 0x20\n  3235: a2 = a2 | a1\n  3238: a1 = u8 [a0 + 0x1]\n  3241: a3 = u8 [a0]\n  3243: a4 = u8 [a0 + 0x2]\n  3246: a5 = u8 [a0 + 0x3]\n  3249: a1 = a1 << 0x8\n  3252: a1 = a1 | a3\n  3255: a4 = a4 << 0x10\n  3258: a5 = a5 << 0x18\n  3261: a4 = a4 | a5\n  3264: a1 = a1 | a4\n  3267: a3 = u8 [a0 + 0x5]\n  3270: a4 = u8 [a0 + 0x4]\n  3273: a5 = u8 [a0 + 0x6]\n  3276: s1 = u8 [a0 + 0x7]\n  3279: a3 = a3 << 0x8\n  3282: a3 = a3 | a4\n  3285: a5 = a5 << 0x10\n  3288: s1 = s1 << 0x18\n  3291: a5 = a5 | s1\n  3294: a3 = a3 | a5\n  3297: a3 = a3 << 0x20\n  3300: a1 = a1 | a3\n  3303: t0 = reverse a1\n  3305: a2 = reverse a2\n  3307: a3 = 0x100000000\n  3317: a3 = a3 ^ a2\n  3320: a3 = a3 | t0\n  3323: a4 = a2 >> 0x20\n  3326: a4 = a4 <u 0x1\n  3329: a4 = 0 if t0 != 0\n  3331: a4 = 0 if a3 == 0\n  3333: jump @67 if a4 == 0\n      : @65 (gas: 57)\n  3337: a3 = u8 [a0 + 0x19]\n  3340: a4 = u8 [a0 + 0x18]\n  3343: a5 = u8 [a0 + 0x1a]\n  3346: s1 = u8 [a0 + 0x1b]\n  3349: a3 = a3 << 0x8\n  3352: a3 = a3 | a4\n  3355: a5 = a5 << 0x10\n  3358: s1 = s1 << 0x18\n  3361: a5 = a5 | s1\n  3364: a3 = a3 | a5\n  3367: a4 = u8 [a0 + 0x1d]\n  3370: a5 = u8 [a0 + 0x1c]\n  3373: s1 = u8 [a0 + 0x1e]\n  3376: a1 = u8 [a0 + 0x1f]\n  3379: a4 = a4 << 0x8\n  3382: a4 = a4 | a5\n  3385: s1 = s1 << 0x10\n  3388: a1 = a1 << 0x18\n  3391: a1 = a1 | s1\n  3394: a1 = a1 | a4\n  3397: a1 = a1 << 0x20\n  3400: a3 = a3 | a1\n  3403: a1 = u8 [a0 + 0x11]\n  3406: a4 = u8 [a0 + 0x10]\n  3409: a5 = u8 [a0 + 0x12]\n  3412: s1 = u8 [a0 + 0x13]\n  3415: a1 = a1 << 0x8\n  3418: a1 = a1 | a4\n  3421: a5 = a5 << 0x10\n  3424: s1 = s1 << 0x18\n  3427: a5 = a5 | s1\n  3430: a1 = a1 | a5\n  3433: a4 = u8 [a0 + 0x15]\n  3436: a5 = u8 [a0 + 0x14]\n  3439: s1 = u8 [a0 + 0x16]\n  3442: a0 = u8 [a0 + 0x17]\n  3445: a4 = a4 << 0x8\n  3448: a4 = a4 | a5\n  3451: s1 = s1 << 0x10\n  3454: a0 = a0 << 0x18\n  3457: a0 = a0 | s1\n  3460: a0 = a0 | a4\n  3463: a0 = a0 << 0x20\n  3466: a0 = a0 | a1\n  3469: a0 = reverse a0\n  3471: a1 = reverse a3\n  3473: a3 = u64 [sp + 0x8]\n  3476: u64 [a3] = a1\n  3478: u64 [a3 + 0x8] = a0\n  3481: u64 [a3 + 0x10] = a2\n  3484: u64 [a3 + 0x18] = t0\n  3487: sp = s0 + 0xffffffffffffff90\n  3490: ra = u64 [sp + 0x68]\n  3493: s0 = u64 [sp + 0x60]\n  3496: s1 = u64 [sp + 0x58]\n  3499: sp = sp + 0x70\n  3502: ret\n      : @66 (gas: 1)\n  3504: trap\n      : @67 (gas: 3)\n  3505: a0 = 0\n  3507: a1 = 0\n  3509: ra = 60, jump @0\n      : @68 [@dyn 30] (gas: 6)\n  3514: i32 a1 = a0 + 0\n  3516: a0 = 0x1\n  3519: a2 = 0\n  3521: ra = 0x3e\n  3524: ecalli 12 // 'seal_return'\n  3526: fallthrough\n      : @69 [@dyn 31] (gas: 9)\n  3527: a2 = u64 [a1 + 0x18]\n  3530: a3 = u64 [a1 + 0x10]\n  3533: a4 = u64 [a1 + 0x8]\n  3536: a1 = u64 [a1]\n  3538: u64 [a0 + 0x18] = a2\n  3541: u64 [a0 + 0x10] = a3\n  3544: u64 [a0 + 0x8] = a4\n  3547: u64 [a0] = a1\n  3549: ret\n      : @70 [@dyn 32] (gas: 6)\n  3551: i32 a1 = a0 + 0\n  3553: a0 = 0x1\n  3556: a2 = 0\n  3558: ra = 0x42\n  3561: ecalli 12 // 'seal_return'\n  3563: fallthrough\n      : @71 [@dyn 33] (gas: 7)\n  3564: a1 = u64 [a1]\n  3566: a1 = a1 << 0x20\n  3569: u64 [a0 + 0x18] = a1\n  3572: u64 [a0 + 16] = 0\n  3575: u64 [a0 + 8] = 0\n  3578: u64 [a0 + 0] = 0\n  3580: ret\n      : @72 (gas: 1)\n  3582: jump @86 if a0 == 0\n      : @73 (gas: 3)\n  3586: a0 = 0x40\n  3589: a1 = 0x20\n  3592: ra = 68, jump @0\n      : @74 [@dyn 34] (gas: 106)\n  3597: a1 = u8 [a0 + 0x11]\n  3600: a2 = u8 [a0 + 0x10]\n  3603: a3 = u8 [a0 + 0x12]\n  3606: a4 = u8 [a0 + 0x13]\n  3609: a1 = a1 << 0x8\n  3612: a1 = a1 | a2\n  3615: a3 = a3 << 0x10\n  3618: a4 = a4 << 0x18\n  3621: a3 = a3 | a4\n  3624: a1 = a1 | a3\n  3627: a2 = u8 [a0 + 0x15]\n  3630: a3 = u8 [a0 + 0x14]\n  3633: a4 = u8 [a0 + 0x16]\n  3636: a5 = u8 [a0 + 0x17]\n  3639: a2 = a2 << 0x8\n  3642: a2 = a2 | a3\n  3645: a4 = a4 << 0x10\n  3648: a5 = a5 << 0x18\n  3651: a4 = a4 | a5\n  3654: a2 = a2 | a4\n  3657: a2 = a2 << 0x20\n  3660: t1 = a2 | a1\n  3663: a1 = u8 [a0 + 0x1]\n  3666: a2 = u8 [a0]\n  3668: a3 = u8 [a0 + 0x2]\n  3671: a4 = u8 [a0 + 0x3]\n  3674: a1 = a1 << 0x8\n  3677: a1 = a1 | a2\n  3680: a3 = a3 << 0x10\n  3683: a4 = a4 << 0x18\n  3686: a3 = a3 | a4\n  3689: a1 = a1 | a3\n  3692: a2 = u8 [a0 + 0x5]\n  3695: a3 = u8 [a0 + 0x4]\n  3698: a4 = u8 [a0 + 0x6]\n  3701: a5 = u8 [a0 + 0x7]\n  3704: a2 = a2 << 0x8\n  3707: a2 = a2 | a3\n  3710: a4 = a4 << 0x10\n  3713: a5 = a5 << 0x18\n  3716: a4 = a4 | a5\n  3719: a2 = a2 | a4\n  3722: a2 = a2 << 0x20\n  3725: t0 = a2 | a1\n  3728: a1 = u8 [a0 + 0x19]\n  3731: a2 = u8 [a0 + 0x18]\n  3734: a3 = u8 [a0 + 0x1a]\n  3737: a4 = u8 [a0 + 0x1b]\n  3740: a1 = a1 << 0x8\n  3743: a1 = a1 | a2\n  3746: a3 = a3 << 0x10\n  3749: a4 = a4 << 0x18\n  3752: a3 = a3 | a4\n  3755: a1 = a1 | a3\n  3758: a2 = u8 [a0 + 0x1d]\n  3761: a3 = u8 [a0 + 0x1c]\n  3764: a4 = u8 [a0 + 0x1e]\n  3767: a5 = u8 [a0 + 0x1f]\n  3770: a2 = a2 << 0x8\n  3773: a2 = a2 | a3\n  3776: a4 = a4 << 0x10\n  3779: a5 = a5 << 0x18\n  3782: a4 = a4 | a5\n  3785: a2 = a2 | a4\n  3788: a2 = a2 << 0x20\n  3791: a5 = a2 | a1\n  3794: a1 = u8 [a0 + 0x9]\n  3797: a2 = u8 [a0 + 0x8]\n  3800: a3 = u8 [a0 + 0xa]\n  3803: a4 = u8 [a0 + 0xb]\n  3806: a1 = a1 << 0x8\n  3809: a1 = a1 | a2\n  3812: a3 = a3 << 0x10\n  3815: a4 = a4 << 0x18\n  3818: a3 = a3 | a4\n  3821: a1 = a1 | a3\n  3824: a2 = u8 [a0 + 0xd]\n  3827: a3 = u8 [a0 + 0xc]\n  3830: a4 = u8 [a0 + 0xe]\n  3833: a0 = u8 [a0 + 0xf]\n  3836: a2 = a2 << 0x8\n  3839: a2 = a2 | a3\n  3842: a4 = a4 << 0x10\n  3845: a0 = a0 << 0x18\n  3848: a0 = a0 | a4\n  3851: a0 = a0 | a2\n  3854: a0 = a0 << 0x20\n  3857: a0 = a0 | a1\n  3860: u64 [sp + 0x10] = a0\n  3863: s1 = reverse a0\n  3865: u64 [sp + 0x18] = a5\n  3868: a2 = reverse a5\n  3870: u64 [sp + 0x28] = t0\n  3873: a1 = reverse t0\n  3875: u64 [sp + 0x20] = t1\n  3878: a0 = reverse t1\n  3880: u64 [sp + 0x70] = a0\n  3883: u64 [sp + 0x68] = a1\n  3886: a0 = a0 | a1\n  3889: a1 = a2 | s1\n  3892: a1 = a1 | a0\n  3895: a1 = a1 >> 0x20\n  3898: a0 = a0 | s1\n  3901: a0 = a0 << 0x20\n  3904: a0 = a0 | a1\n  3907: jump @85 if a0 != 0\n      : @75 (gas: 5)\n  3911: i32 a0 = a2 + 0\n  3913: a1 = 0x20\n  3916: u64 [sp + 0x78] = a0\n  3919: u64 [sp + 0x30] = a2\n  3922: ra = 70, jump @0\n      : @76 [@dyn 35] (gas: 41)\n  3927: u8 [a0 + 31] = 0\n  3930: u8 [a0 + 30] = 0\n  3933: u8 [a0 + 29] = 0\n  3936: u8 [a0 + 28] = 0\n  3939: u8 [a0 + 27] = 0\n  3942: u8 [a0 + 26] = 0\n  3945: u8 [a0 + 25] = 0\n  3948: u8 [a0 + 24] = 0\n  3951: u8 [a0 + 23] = 0\n  3954: u8 [a0 + 22] = 0\n  3957: u8 [a0 + 21] = 0\n  3960: u8 [a0 + 20] = 0\n  3963: u8 [a0 + 19] = 0\n  3966: u8 [a0 + 18] = 0\n  3969: u8 [a0 + 17] = 0\n  3972: u8 [a0 + 16] = 0\n  3975: u8 [a0 + 15] = 0\n  3978: u8 [a0 + 14] = 0\n  3981: u8 [a0 + 13] = 0\n  3984: u8 [a0 + 12] = 0\n  3987: u8 [a0 + 11] = 0\n  3990: u8 [a0 + 10] = 0\n  3993: u8 [a0 + 9] = 0\n  3996: u8 [a0 + 8] = 0\n  3999: u8 [a0 + 7] = 0\n  4002: u8 [a0 + 6] = 0\n  4005: u8 [a0 + 5] = 0\n  4008: u8 [a0 + 4] = 0\n  4011: u8 [a0 + 3] = 0xc7\n  4016: u8 [a0 + 2] = 0xf2\n  4021: u8 [a0 + 1] = 0xe6\n  4026: a1 = u64 [sp + 0x68]\n  4029: a1 = a1 | s1\n  4032: a2 = 0xfffffffc\n  4042: a3 = u64 [sp + 0x30]\n  4045: a2 = a3 <u a2\n  4048: a4 = u64 [sp + 0x70]\n  4051: a2 = 0 if a4 != 0\n  4053: a2 = 0 if a1 != 0\n  4055: u8 [a0 + 0] = 0x5b\n  4058: jump @85 if a2 == 0\n      : @77 (gas: 19)\n  4062: a0 = u64 [sp + 0x38]\n  4065: a0 = reverse a0\n  4067: a1 = a0 >> 0x20\n  4070: a2 = u64 [sp + 0x40]\n  4073: a2 = reverse a2\n  4075: a3 = a2 << 0x20\n  4078: a1 = a1 | a3\n  4081: u64 [sp + 0x70] = a1\n  4084: a0 = a0 << 0x20\n  4087: a1 = u64 [sp + 0x48]\n  4090: a1 = reverse a1\n  4092: a1 = a1 >> 0x20\n  4095: a0 = a0 | a1\n  4098: u64 [sp + 0x68] = a0\n  4101: s1 = a2 >> 0x20\n  4104: a0 = u64 [sp + 0x78]\n  4107: i32 a0 = a0 + 0x4\n  4110: a1 = 0x20\n  4113: ra = 72, jump @0\n      : @78 [@dyn 36] (gas: 70)\n  4118: a1 = reverse s1\n  4120: a2 = u64 [sp + 0x70]\n  4123: a2 = reverse a2\n  4125: a3 = u64 [sp + 0x68]\n  4128: a3 = reverse a3\n  4130: a4 = a3 >> 0x38\n  4133: u8 [a0 + 0x1f] = a4\n  4136: a4 = a3 >> 0x30\n  4139: u8 [a0 + 0x1e] = a4\n  4142: a4 = a3 >> 0x28\n  4145: u8 [a0 + 0x1d] = a4\n  4148: a4 = a3 >> 0x20\n  4151: u8 [a0 + 0x1c] = a4\n  4154: a4 = a3 >> 0x18\n  4157: u8 [a0 + 0x1b] = a4\n  4160: a4 = a3 >> 0x10\n  4163: u8 [a0 + 0x1a] = a4\n  4166: a4 = a3 >> 0x8\n  4169: u8 [a0 + 0x19] = a4\n  4172: u8 [a0 + 0x18] = a3\n  4175: u8 [a0 + 0x10] = a2\n  4178: u8 [a0 + 11] = 0\n  4181: u8 [a0 + 10] = 0\n  4184: u8 [a0 + 9] = 0\n  4187: u8 [a0 + 7] = 0\n  4190: u8 [a0 + 6] = 0\n  4193: u8 [a0 + 5] = 0\n  4196: u8 [a0 + 4] = 0\n  4199: u8 [a0 + 3] = 0\n  4202: u8 [a0 + 2] = 0\n  4205: u8 [a0 + 1] = 0\n  4208: u8 [a0 + 0] = 0\n  4210: a3 = a2 >> 0x38\n  4213: u8 [a0 + 0x17] = a3\n  4216: a3 = a2 >> 0x30\n  4219: u8 [a0 + 0x16] = a3\n  4222: a3 = a2 >> 0x28\n  4225: u8 [a0 + 0x15] = a3\n  4228: a3 = a2 >> 0x20\n  4231: u8 [a0 + 0x14] = a3\n  4234: a3 = a2 >> 0x18\n  4237: u8 [a0 + 0x13] = a3\n  4240: a3 = a2 >> 0x10\n  4243: u8 [a0 + 0x12] = a3\n  4246: a2 = a2 >> 0x8\n  4249: u8 [a0 + 0x11] = a2\n  4252: u8 [a0 + 0x8] = a1\n  4255: a2 = a1 >> 0x38\n  4258: u8 [a0 + 0xf] = a2\n  4261: a2 = a1 >> 0x30\n  4264: u8 [a0 + 0xe] = a2\n  4267: a2 = a1 >> 0x28\n  4270: u8 [a0 + 0xd] = a2\n  4273: a1 = a1 >> 0x20\n  4276: u8 [a0 + 0xc] = a1\n  4279: ecalli 9 // 'ref_time_left'\n  4281: a0 = u64 [sp + 0x50]\n  4284: u64 [sp + 0xe8] = a0\n  4288: a0 = u64 [sp + 0x60]\n  4291: u64 [sp + 0xe0] = a0\n  4295: a0 = u64 [sp + 0x58]\n  4298: u32 [sp + 0xf0] = a0\n  4302: u64 [sp + 280] = 0\n  4306: u64 [sp + 272] = 0\n  4310: u64 [sp + 264] = 0\n  4314: u64 [sp + 256] = 0\n  4318: a1 = 0x24\n  4321: s1 = u64 [sp + 0x78]\n  4324: a0 = s1\n  4326: ra = 74, jump @0\n      : @79 [@dyn 37] (gas: 4)\n  4331: u64 [sp + 0x70] = a0\n  4334: a0 = s1\n  4336: a1 = 0\n  4338: ra = 76, jump @0\n      : @80 [@dyn 38] (gas: 31)\n  4343: u32 [sp + 288] = 0\n  4347: u64 [sp + 344] = 0xffffffffffffffff\n  4352: u64 [sp + 336] = 0xffffffffffffffff\n  4357: u64 [sp + 328] = 0xffffffffffffffff\n  4362: u64 [sp + 320] = 0xffffffffffffffff\n  4367: a1 = sp + 0xe0\n  4371: a1 = a1 << 0x20\n  4374: a1 = a1 >> 0x20\n  4377: s1 = 0x800000000\n  4387: s1 = s1 | a1\n  4390: a1 = sp + 0x100\n  4394: a1 = a1 << 0x20\n  4397: a1 = a1 >> 0x20\n  4400: a2 = sp + 0x140\n  4404: a2 = a2 << 0x20\n  4407: a3 = a2 | a1\n  4410: a1 = u64 [sp + 0x70]\n  4413: a1 = a1 << 0x20\n  4416: a1 = a1 >> 0x20\n  4419: a2 = 0x2400000000\n  4429: a4 = a1 | a2\n  4432: a0 = a0 << 0x20\n  4435: a0 = a0 >> 0x20\n  4438: a1 = sp + 0x120\n  4442: a1 = a1 << 0x20\n  4445: a5 = a1 | a0\n  4448: a1 = 0xffffffffffffffff\n  4451: a2 = 0xffffffffffffffff\n  4454: a0 = s1\n  4456: ecalli 1 // 'call'\n  4458: fallthrough\n      : @81 (gas: 1)\n  4459: jump @84 if a0 != 0\n      : @82 (gas: 4)\n  4463: ecalli 11 // 'return_data_size'\n  4465: a0 = 0x40\n  4468: a1 = 0x20\n  4471: ra = 78, jump @0\n      : @83 [@dyn 39] (gas: 65)\n  4476: a3 = u64 [sp + 0x18]\n  4479: u8 [a0 + 0x18] = a3\n  4482: a2 = u64 [sp + 0x20]\n  4485: a1 = a2 >> 0x38\n  4488: u8 [a0 + 0x17] = a1\n  4491: a1 = a2 >> 0x30\n  4494: u8 [a0 + 0x16] = a1\n  4497: a1 = a2 >> 0x28\n  4500: u8 [a0 + 0x15] = a1\n  4503: a1 = a2 >> 0x20\n  4506: u8 [a0 + 0x14] = a1\n  4509: a1 = a2 >> 0x18\n  4512: u8 [a0 + 0x13] = a1\n  4515: a1 = a2 >> 0x10\n  4518: u8 [a0 + 0x12] = a1\n  4521: a1 = a2 >> 0x8\n  4524: u8 [a0 + 0x11] = a1\n  4527: u8 [a0 + 0x10] = a2\n  4530: a2 = u64 [sp + 0x10]\n  4533: a1 = a2 >> 0x38\n  4536: u8 [a0 + 0xf] = a1\n  4539: a1 = a2 >> 0x30\n  4542: u8 [a0 + 0xe] = a1\n  4545: a1 = a2 >> 0x28\n  4548: u8 [a0 + 0xd] = a1\n  4551: a1 = a2 >> 0x20\n  4554: u8 [a0 + 0xc] = a1\n  4557: a1 = a2 >> 0x18\n  4560: u8 [a0 + 0xb] = a1\n  4563: a1 = a2 >> 0x10\n  4566: u8 [a0 + 0xa] = a1\n  4569: a1 = a2 >> 0x8\n  4572: u8 [a0 + 0x9] = a1\n  4575: u8 [a0 + 0x8] = a2\n  4578: a2 = u64 [sp + 0x28]\n  4581: a1 = a2 >> 0x38\n  4584: u8 [a0 + 0x7] = a1\n  4587: a1 = a2 >> 0x30\n  4590: u8 [a0 + 0x6] = a1\n  4593: a1 = a2 >> 0x28\n  4596: u8 [a0 + 0x5] = a1\n  4599: a1 = a2 >> 0x20\n  4602: u8 [a0 + 0x4] = a1\n  4605: a1 = a2 >> 0x18\n  4608: u8 [a0 + 0x3] = a1\n  4611: a1 = a2 >> 0x10\n  4614: u8 [a0 + 0x2] = a1\n  4617: a1 = a2 >> 0x8\n  4620: u8 [a0 + 0x1] = a1\n  4623: u8 [a0] = a2\n  4625: a1 = a3 >> 0x38\n  4628: u8 [a0 + 0x1f] = a1\n  4631: a1 = a3 >> 0x30\n  4634: u8 [a0 + 0x1e] = a1\n  4637: a1 = a3 >> 0x28\n  4640: u8 [a0 + 0x1d] = a1\n  4643: a1 = a3 >> 0x20\n  4646: u8 [a0 + 0x1c] = a1\n  4649: a1 = a3 >> 0x18\n  4652: u8 [a0 + 0x1b] = a1\n  4655: a1 = a3 >> 0x10\n  4658: u8 [a0 + 0x1a] = a1\n  4661: a1 = a3 >> 0x8\n  4664: u8 [a0 + 0x19] = a1\n  4667: fallthrough\n      : @84 (gas: 6)\n  4668: sp = s0 + 0xfffffffffffffe40\n  4672: ra = u64 [sp + 0x1b8]\n  4676: s0 = u64 [sp + 0x1b0]\n  4680: s1 = u64 [sp + 0x1a8]\n  4684: sp = sp + 0x1c0\n  4688: ret\n      : @85 (gas: 1)\n  4690: trap\n      : @86 (gas: 2)\n  4691: a1 = 0\n  4693: ra = 80, jump @0\n      : @87 [@dyn 40] (gas: 6)\n  4698: i32 a1 = a0 + 0\n  4700: a0 = 0x1\n  4703: a2 = 0\n  4705: ra = 0x52\n  4708: ecalli 12 // 'seal_return'\n  4710: fallthrough\n      : @88 [@dyn 41] (gas: 6)\n  4711: a1 = u32 [a1 + 0x1c]\n  4714: u64 [a0 + 24] = 0\n  4717: u64 [a0 + 16] = 0\n  4720: u64 [a0 + 8] = 0\n  4723: u64 [a0] = a1\n  4725: ret\n      : @89 (gas: 8)\n  4727: a0 = u64 [sp + 0x30]\n  4730: a1 = u64 [sp + 0x38]\n  4733: a2 = u64 [sp + 0x28]\n  4736: a3 = u64 [sp + 0x20]\n  4739: a1 = a1 | a2\n  4742: a0 = a0 | a3\n  4745: a0 = a0 | a1\n  4748: jump @94 if a0 != 0\n      : @90 (gas: 2)\n  4752: a0 = i32 [0x20004]\n  4757: jump @94 if a0 <=u 3\n      : @91 (gas: 24)\n  4762: u64 [sp + 88] = 0\n  4765: u64 [sp + 80] = 0\n  4768: u64 [sp + 72] = 0\n  4771: u64 [sp + 64] = 0x1\n  4775: u64 [sp + 120] = 0\n  4778: u64 [sp + 112] = 0\n  4781: u64 [sp + 104] = 0\n  4784: u64 [sp + 96] = 0\n  4787: u32 [sp + 128] = 0x20\n  4792: i32 a1 = sp + 0x40\n  4795: i32 a3 = sp + 0x60\n  4798: i32 a4 = sp + 0x80\n  4802: a2 = 0xffffffffffffffff\n  4805: a0 = 0\n  4807: ecalli 7 // 'get_storage'\n  4809: a0 = u64 [sp + 0x70]\n  4812: u64 [sp + 0x8] = a0\n  4815: a0 = u64 [sp + 0x68]\n  4818: u64 [sp + 0x10] = a0\n  4821: a0 = u64 [sp + 0x60]\n  4824: u64 [sp + 0x18] = a0\n  4827: a0 = 0x40\n  4830: a1 = 0x20\n  4833: ra = 84, jump @0\n      : @92 [@dyn 42] (gas: 100)\n  4838: a1 = u8 [a0 + 0x11]\n  4841: a2 = u8 [a0 + 0x10]\n  4844: a3 = u8 [a0 + 0x12]\n  4847: a4 = u8 [a0 + 0x13]\n  4850: a1 = a1 << 0x8\n  4853: a1 = a1 | a2\n  4856: a3 = a3 << 0x10\n  4859: a4 = a4 << 0x18\n  4862: a3 = a3 | a4\n  4865: a1 = a1 | a3\n  4868: a2 = u8 [a0 + 0x15]\n  4871: a3 = u8 [a0 + 0x14]\n  4874: a4 = u8 [a0 + 0x16]\n  4877: a5 = u8 [a0 + 0x17]\n  4880: a2 = a2 << 0x8\n  4883: a2 = a2 | a3\n  4886: a4 = a4 << 0x10\n  4889: a5 = a5 << 0x18\n  4892: a4 = a4 | a5\n  4895: a2 = a2 | a4\n  4898: a2 = a2 << 0x20\n  4901: t0 = a2 | a1\n  4904: a2 = u8 [a0 + 0x1]\n  4907: a3 = u8 [a0]\n  4909: a4 = u8 [a0 + 0x2]\n  4912: a5 = u8 [a0 + 0x3]\n  4915: a2 = a2 << 0x8\n  4918: a2 = a2 | a3\n  4921: a4 = a4 << 0x10\n  4924: a5 = a5 << 0x18\n  4927: a4 = a4 | a5\n  4930: a2 = a2 | a4\n  4933: a3 = u8 [a0 + 0x5]\n  4936: a4 = u8 [a0 + 0x4]\n  4939: a5 = u8 [a0 + 0x6]\n  4942: s1 = u8 [a0 + 0x7]\n  4945: a3 = a3 << 0x8\n  4948: a3 = a3 | a4\n  4951: a5 = a5 << 0x10\n  4954: s1 = s1 << 0x18\n  4957: a5 = a5 | s1\n  4960: a3 = a3 | a5\n  4963: a3 = a3 << 0x20\n  4966: a2 = a2 | a3\n  4969: a3 = u8 [a0 + 0x19]\n  4972: a4 = u8 [a0 + 0x18]\n  4975: a5 = u8 [a0 + 0x1a]\n  4978: s1 = u8 [a0 + 0x1b]\n  4981: a3 = a3 << 0x8\n  4984: a3 = a3 | a4\n  4987: a5 = a5 << 0x10\n  4990: s1 = s1 << 0x18\n  4993: a5 = a5 | s1\n  4996: a3 = a3 | a5\n  4999: a4 = u8 [a0 + 0x1d]\n  5002: a5 = u8 [a0 + 0x1c]\n  5005: s1 = u8 [a0 + 0x1e]\n  5008: a1 = u8 [a0 + 0x1f]\n  5011: a4 = a4 << 0x8\n  5014: a4 = a4 | a5\n  5017: s1 = s1 << 0x10\n  5020: a1 = a1 << 0x18\n  5023: a1 = a1 | s1\n  5026: a1 = a1 | a4\n  5029: a1 = a1 << 0x20\n  5032: a3 = a3 | a1\n  5035: a1 = u8 [a0 + 0x9]\n  5038: a4 = u8 [a0 + 0x8]\n  5041: a5 = u8 [a0 + 0xa]\n  5044: s1 = u8 [a0 + 0xb]\n  5047: a1 = a1 << 0x8\n  5050: a1 = a1 | a4\n  5053: a5 = a5 << 0x10\n  5056: s1 = s1 << 0x18\n  5059: a5 = a5 | s1\n  5062: a1 = a1 | a5\n  5065: a4 = u8 [a0 + 0xd]\n  5068: a5 = u8 [a0 + 0xc]\n  5071: s1 = u8 [a0 + 0xe]\n  5074: a0 = u8 [a0 + 0xf]\n  5077: a4 = a4 << 0x8\n  5080: a4 = a4 | a5\n  5083: s1 = s1 << 0x10\n  5086: a0 = a0 << 0x18\n  5089: a0 = a0 | s1\n  5092: a0 = a0 | a4\n  5095: a0 = a0 << 0x20\n  5098: a0 = a0 | a1\n  5101: a1 = reverse a0\n  5103: a0 = reverse a3\n  5105: a2 = reverse a2\n  5107: a3 = reverse t0\n  5109: a2 = a2 | a3\n  5112: a3 = a0 | a1\n  5115: a3 = a3 | a2\n  5118: a3 = a3 >> 0x20\n  5121: a1 = a1 | a2\n  5124: a1 = a1 << 0x20\n  5127: a1 = a1 | a3\n  5130: jump @96 if a1 == 0\n      : @93 (gas: 1)\n  5133: trap\n      : @94 (gas: 3)\n  5134: a0 = 0\n  5136: a1 = 0\n  5138: ra = 86, jump @0\n      : @95 [@dyn 43] (gas: 5)\n  5143: i32 a1 = a0 + 0\n  5145: a0 = 0x1\n  5148: a2 = 0\n  5150: ecalli 12 // 'seal_return'\n  5152: fallthrough\n      : @96 (gas: 7)\n  5153: a1 = u64 [sp + 0x8]\n  5156: a1 = a1 << 0x20\n  5159: s1 = a1 >> 0x20\n  5162: i32 a0 = a0 + 0\n  5164: u64 [sp + 0x8] = a0\n  5167: a1 = 0x20\n  5170: ra = 88, jump @0\n      : @97 [@dyn 44] (gas: 58)\n  5175: a1 = reverse s1\n  5177: a2 = u64 [sp + 0x10]\n  5180: a2 = reverse a2\n  5182: a3 = u64 [sp + 0x18]\n  5185: a3 = reverse a3\n  5187: a4 = a3 >> 0x38\n  5190: u8 [a0 + 0x1f] = a4\n  5193: a4 = a3 >> 0x30\n  5196: u8 [a0 + 0x1e] = a4\n  5199: a4 = a3 >> 0x28\n  5202: u8 [a0 + 0x1d] = a4\n  5205: a4 = a3 >> 0x20\n  5208: u8 [a0 + 0x1c] = a4\n  5211: a4 = a3 >> 0x18\n  5214: u8 [a0 + 0x1b] = a4\n  5217: a4 = a3 >> 0x10\n  5220: u8 [a0 + 0x1a] = a4\n  5223: a4 = a3 >> 0x8\n  5226: u8 [a0 + 0x19] = a4\n  5229: u8 [a0 + 0x18] = a3\n  5232: u8 [a0 + 0x10] = a2\n  5235: u8 [a0 + 11] = 0\n  5238: u8 [a0 + 10] = 0\n  5241: u8 [a0 + 9] = 0\n  5244: u8 [a0 + 7] = 0\n  5247: u8 [a0 + 6] = 0\n  5250: u8 [a0 + 5] = 0\n  5253: u8 [a0 + 4] = 0\n  5256: u8 [a0 + 3] = 0\n  5259: u8 [a0 + 2] = 0\n  5262: u8 [a0 + 1] = 0\n  5265: u8 [a0 + 0] = 0\n  5267: a3 = a2 >> 0x38\n  5270: u8 [a0 + 0x17] = a3\n  5273: a3 = a2 >> 0x30\n  5276: u8 [a0 + 0x16] = a3\n  5279: a3 = a2 >> 0x28\n  5282: u8 [a0 + 0x15] = a3\n  5285: a3 = a2 >> 0x20\n  5288: u8 [a0 + 0x14] = a3\n  5291: a3 = a2 >> 0x18\n  5294: u8 [a0 + 0x13] = a3\n  5297: a3 = a2 >> 0x10\n  5300: u8 [a0 + 0x12] = a3\n  5303: a2 = a2 >> 0x8\n  5306: u8 [a0 + 0x11] = a2\n  5309: u8 [a0 + 0x8] = a1\n  5312: a2 = a1 >> 0x38\n  5315: u8 [a0 + 0xf] = a2\n  5318: a2 = a1 >> 0x30\n  5321: u8 [a0 + 0xe] = a2\n  5324: a2 = a1 >> 0x28\n  5327: u8 [a0 + 0xd] = a2\n  5330: a1 = a1 >> 0x20\n  5333: u8 [a0 + 0xc] = a1\n  5336: a1 = 0x20\n  5339: a0 = u64 [sp + 0x8]\n  5342: ra = 90, jump @0\n      : @98 [@dyn 45] (gas: 6)\n  5347: i32 a1 = a0 + 0\n  5349: a2 = 0x20\n  5352: a0 = 0\n  5354: ra = 0x5c\n  5357: ecalli 12 // 'seal_return'\n  5359: fallthrough\n      : @99 [@dyn 46] (gas: 194)\n  5360: sp = sp + 0xffffffffffffffa0\n  5363: u64 [sp + 0x58] = ra\n  5366: u64 [sp + 0x50] = s0\n  5369: u64 [sp + 0x48] = s1\n  5372: u64 [sp] = a0\n  5374: t1 = u64 [a1]\n  5376: ra = u64 [a1 + 0x8]\n  5379: a4 = u64 [a1 + 0x10]\n  5382: a1 = u64 [a1 + 0x18]\n  5385: t0 = u64 [a2]\n  5387: a3 = u64 [a2 + 0x8]\n  5390: t2 = u64 [a2 + 0x18]\n  5393: a2 = u64 [a2 + 0x10]\n  5396: s0 = t0 >> 0x3d\n  5399: s1 = a3 << 0x3\n  5402: s0 = s0 | s1\n  5405: a3 = a3 >> 0x3d\n  5408: s1 = a2 << 0x3\n  5411: a3 = a3 | s1\n  5414: a2 = a2 >> 0x3d\n  5417: t2 = t2 << 0x3\n  5420: s1 = t2 | a2\n  5423: t2 = t0 << 0x3\n  5426: a2 = s1 >u 0\n  5428: a5 = a3 >u 0\n  5430: a5 = a2 if s1 != 0\n  5433: a0 = s0 >u 0\n  5435: a2 = t2 <u 0x100\n  5439: t2 = a2 ^ 0x1\n  5442: t2 = a0 if s0 != 0\n  5445: a3 = a3 | s1\n  5448: t2 = a5 if a3 != 0\n  5451: u8 [sp + 71] = 0\n  5454: u8 [sp + 70] = 0\n  5457: u8 [sp + 69] = 0\n  5460: u8 [sp + 68] = 0\n  5463: u8 [sp + 67] = 0\n  5466: u8 [sp + 66] = 0\n  5469: u8 [sp + 65] = 0\n  5472: u8 [sp + 64] = 0\n  5475: u8 [sp + 63] = 0\n  5478: u8 [sp + 62] = 0\n  5481: u8 [sp + 61] = 0\n  5484: u8 [sp + 60] = 0\n  5487: u8 [sp + 59] = 0\n  5490: u8 [sp + 58] = 0\n  5493: u8 [sp + 57] = 0\n  5496: u8 [sp + 56] = 0\n  5499: u8 [sp + 55] = 0\n  5502: u8 [sp + 54] = 0\n  5505: u8 [sp + 53] = 0\n  5508: u8 [sp + 52] = 0\n  5511: u8 [sp + 51] = 0\n  5514: u8 [sp + 50] = 0\n  5517: u8 [sp + 49] = 0\n  5520: u8 [sp + 48] = 0\n  5523: u8 [sp + 47] = 0\n  5526: u8 [sp + 46] = 0\n  5529: u8 [sp + 45] = 0\n  5532: u8 [sp + 44] = 0\n  5535: u8 [sp + 43] = 0\n  5538: u8 [sp + 42] = 0\n  5541: u8 [sp + 41] = 0\n  5544: u8 [sp + 40] = 0\n  5547: u8 [sp + 0x20] = a1\n  5550: u8 [sp + 0x18] = a4\n  5553: u8 [sp + 0x10] = ra\n  5556: u8 [sp + 0x8] = t1\n  5559: a0 = a1 >> 0x38\n  5562: u8 [sp + 0x27] = a0\n  5565: a0 = a1 >> 0x30\n  5568: u8 [sp + 0x26] = a0\n  5571: a0 = a1 >> 0x28\n  5574: u8 [sp + 0x25] = a0\n  5577: a0 = a1 >> 0x20\n  5580: u8 [sp + 0x24] = a0\n  5583: a0 = a1 >> 0x18\n  5586: u8 [sp + 0x23] = a0\n  5589: a0 = a1 >> 0x10\n  5592: u8 [sp + 0x22] = a0\n  5595: a1 = a1 >> 0x8\n  5598: u8 [sp + 0x21] = a1\n  5601: a0 = a4 >> 0x38\n  5604: u8 [sp + 0x1f] = a0\n  5607: a0 = a4 >> 0x30\n  5610: u8 [sp + 0x1e] = a0\n  5613: a0 = a4 >> 0x28\n  5616: u8 [sp + 0x1d] = a0\n  5619: a0 = a4 >> 0x20\n  5622: u8 [sp + 0x1c] = a0\n  5625: a0 = a4 >> 0x18\n  5628: u8 [sp + 0x1b] = a0\n  5631: a0 = a4 >> 0x10\n  5634: u8 [sp + 0x1a] = a0\n  5637: a4 = a4 >> 0x8\n  5640: u8 [sp + 0x19] = a4\n  5643: a0 = ra >> 0x38\n  5646: u8 [sp + 0x17] = a0\n  5649: a0 = ra >> 0x30\n  5652: u8 [sp + 0x16] = a0\n  5655: a0 = ra >> 0x28\n  5658: u8 [sp + 0x15] = a0\n  5661: a0 = ra >> 0x20\n  5664: u8 [sp + 0x14] = a0\n  5667: a0 = ra >> 0x18\n  5670: u8 [sp + 0x13] = a0\n  5673: a0 = ra >> 0x10\n  5676: u8 [sp + 0x12] = a0\n  5679: a0 = ra >> 0x8\n  5682: u8 [sp + 0x11] = a0\n  5685: a0 = t1 >> 0x38\n  5688: u8 [sp + 0xf] = a0\n  5691: a0 = t1 >> 0x30\n  5694: u8 [sp + 0xe] = a0\n  5697: a0 = t1 >> 0x28\n  5700: u8 [sp + 0xd] = a0\n  5703: a0 = t1 >> 0x20\n  5706: u8 [sp + 0xc] = a0\n  5709: a0 = t1 >> 0x18\n  5712: u8 [sp + 0xb] = a0\n  5715: a0 = t1 >> 0x10\n  5718: u8 [sp + 0xa] = a0\n  5721: a0 = t1 >> 0x8\n  5724: u8 [sp + 0x9] = a0\n  5727: a1 = t0 & 0x1f\n  5730: a0 = sp + 0x8\n  5733: a1 = a1 + a0\n  5736: a0 = u8 [a1 + 0x9]\n  5739: a2 = u8 [a1 + 0x8]\n  5742: a3 = u8 [a1 + 0xa]\n  5745: a4 = u8 [a1 + 0xb]\n  5748: a0 = a0 << 0x8\n  5751: a0 = a0 | a2\n  5754: a3 = a3 << 0x10\n  5757: a4 = a4 << 0x18\n  5760: a3 = a3 | a4\n  5763: a0 = a0 | a3\n  5766: a2 = u8 [a1 + 0xd]\n  5769: a3 = u8 [a1 + 0xc]\n  5772: a4 = u8 [a1 + 0xe]\n  5775: a5 = u8 [a1 + 0xf]\n  5778: a2 = a2 << 0x8\n  5781: a2 = a2 | a3\n  5784: a4 = a4 << 0x10\n  5787: a5 = a5 << 0x18\n  5790: a4 = a4 | a5\n  5793: a2 = a2 | a4\n  5796: a2 = a2 << 0x20\n  5799: a3 = a2 | a0\n  5802: a0 = u8 [a1 + 0x1]\n  5805: a2 = u8 [a1]\n  5807: a4 = u8 [a1 + 0x2]\n  5810: a5 = u8 [a1 + 0x3]\n  5813: a0 = a0 << 0x8\n  5816: a0 = a0 | a2\n  5819: a4 = a4 << 0x10\n  5822: a5 = a5 << 0x18\n  5825: a4 = a4 | a5\n  5828: a0 = a0 | a4\n  5831: a2 = u8 [a1 + 0x5]\n  5834: a4 = u8 [a1 + 0x4]\n  5837: a5 = u8 [a1 + 0x6]\n  5840: s1 = u8 [a1 + 0x7]\n  5843: a2 = a2 << 0x8\n  5846: a2 = a2 | a4\n  5849: a5 = a5 << 0x10\n  5852: s1 = s1 << 0x18\n  5855: a5 = a5 | s1\n  5858: a2 = a2 | a5\n  5861: a2 = a2 << 0x20\n  5864: a0 = a0 | a2\n  5867: a2 = u8 [a1 + 0x11]\n  5870: a4 = u8 [a1 + 0x10]\n  5873: a5 = u8 [a1 + 0x12]\n  5876: a1 = u8 [a1 + 0x13]\n  5879: a2 = a2 << 0x8\n  5882: a2 = a2 | a4\n  5885: a5 = a5 << 0x10\n  5888: a1 = a1 << 0x18\n  5891: a1 = a1 | a5\n  5894: a1 = a1 | a2\n  5897: a0 = 0 if t2 != 0\n  5899: a3 = 0 if t2 != 0\n  5901: a1 = 0 if t2 != 0\n  5903: a2 = u64 [sp]\n  5905: u64 [a2 + 24] = 0\n  5908: u64 [a2 + 0x10] = a1\n  5911: u64 [a2 + 0x8] = a3\n  5914: u64 [a2] = a0\n  5916: ra = u64 [sp + 0x58]\n  5919: s0 = u64 [sp + 0x50]\n  5922: s1 = u64 [sp + 0x48]\n  5925: sp = sp + 0x60\n  5928: ret\n      : @100 (gas: 8)\n  5930: a0 = u64 [sp + 0x30]\n  5933: a1 = u64 [sp + 0x38]\n  5936: a2 = u64 [sp + 0x28]\n  5939: a3 = u64 [sp + 0x20]\n  5942: a1 = a1 | a2\n  5945: a0 = a0 | a3\n  5948: a0 = a0 | a1\n  5951: jump @105 if a0 != 0\n      : @101 (gas: 2)\n  5955: a0 = i32 [0x20004]\n  5960: jump @105 if a0 <=u 3\n      : @102 (gas: 24)\n  5965: u64 [sp + 88] = 0\n  5968: u64 [sp + 80] = 0\n  5971: u64 [sp + 72] = 0\n  5974: u64 [sp + 64] = 0x2\n  5978: u64 [sp + 120] = 0\n  5981: u64 [sp + 112] = 0\n  5984: u64 [sp + 104] = 0\n  5987: u64 [sp + 96] = 0\n  5990: u32 [sp + 128] = 0x20\n  5995: i32 a1 = sp + 0x40\n  5998: i32 a3 = sp + 0x60\n  6001: i32 a4 = sp + 0x80\n  6005: a2 = 0xffffffffffffffff\n  6008: a0 = 0\n  6010: ecalli 7 // 'get_storage'\n  6012: a0 = u64 [sp + 0x70]\n  6015: u64 [sp + 0x8] = a0\n  6018: a0 = u64 [sp + 0x68]\n  6021: u64 [sp + 0x10] = a0\n  6024: a0 = u64 [sp + 0x60]\n  6027: u64 [sp + 0x18] = a0\n  6030: a0 = 0x40\n  6033: a1 = 0x20\n  6036: ra = 94, jump @0\n      : @103 [@dyn 47] (gas: 100)\n  6041: a1 = u8 [a0 + 0x11]\n  6044: a2 = u8 [a0 + 0x10]\n  6047: a3 = u8 [a0 + 0x12]\n  6050: a4 = u8 [a0 + 0x13]\n  6053: a1 = a1 << 0x8\n  6056: a1 = a1 | a2\n  6059: a3 = a3 << 0x10\n  6062: a4 = a4 << 0x18\n  6065: a3 = a3 | a4\n  6068: a1 = a1 | a3\n  6071: a2 = u8 [a0 + 0x15]\n  6074: a3 = u8 [a0 + 0x14]\n  6077: a4 = u8 [a0 + 0x16]\n  6080: a5 = u8 [a0 + 0x17]\n  6083: a2 = a2 << 0x8\n  6086: a2 = a2 | a3\n  6089: a4 = a4 << 0x10\n  6092: a5 = a5 << 0x18\n  6095: a4 = a4 | a5\n  6098: a2 = a2 | a4\n  6101: a2 = a2 << 0x20\n  6104: t0 = a2 | a1\n  6107: a2 = u8 [a0 + 0x1]\n  6110: a3 = u8 [a0]\n  6112: a4 = u8 [a0 + 0x2]\n  6115: a5 = u8 [a0 + 0x3]\n  6118: a2 = a2 << 0x8\n  6121: a2 = a2 | a3\n  6124: a4 = a4 << 0x10\n  6127: a5 = a5 << 0x18\n  6130: a4 = a4 | a5\n  6133: a2 = a2 | a4\n  6136: a3 = u8 [a0 + 0x5]\n  6139: a4 = u8 [a0 + 0x4]\n  6142: a5 = u8 [a0 + 0x6]\n  6145: s1 = u8 [a0 + 0x7]\n  6148: a3 = a3 << 0x8\n  6151: a3 = a3 | a4\n  6154: a5 = a5 << 0x10\n  6157: s1 = s1 << 0x18\n  6160: a5 = a5 | s1\n  6163: a3 = a3 | a5\n  6166: a3 = a3 << 0x20\n  6169: a2 = a2 | a3\n  6172: a3 = u8 [a0 + 0x19]\n  6175: a4 = u8 [a0 + 0x18]\n  6178: a5 = u8 [a0 + 0x1a]\n  6181: s1 = u8 [a0 + 0x1b]\n  6184: a3 = a3 << 0x8\n  6187: a3 = a3 | a4\n  6190: a5 = a5 << 0x10\n  6193: s1 = s1 << 0x18\n  6196: a5 = a5 | s1\n  6199: a3 = a3 | a5\n  6202: a4 = u8 [a0 + 0x1d]\n  6205: a5 = u8 [a0 + 0x1c]\n  6208: s1 = u8 [a0 + 0x1e]\n  6211: a1 = u8 [a0 + 0x1f]\n  6214: a4 = a4 << 0x8\n  6217: a4 = a4 | a5\n  6220: s1 = s1 << 0x10\n  6223: a1 = a1 << 0x18\n  6226: a1 = a1 | s1\n  6229: a1 = a1 | a4\n  6232: a1 = a1 << 0x20\n  6235: a3 = a3 | a1\n  6238: a1 = u8 [a0 + 0x9]\n  6241: a4 = u8 [a0 + 0x8]\n  6244: a5 = u8 [a0 + 0xa]\n  6247: s1 = u8 [a0 + 0xb]\n  6250: a1 = a1 << 0x8\n  6253: a1 = a1 | a4\n  6256: a5 = a5 << 0x10\n  6259: s1 = s1 << 0x18\n  6262: a5 = a5 | s1\n  6265: a1 = a1 | a5\n  6268: a4 = u8 [a0 + 0xd]\n  6271: a5 = u8 [a0 + 0xc]\n  6274: s1 = u8 [a0 + 0xe]\n  6277: a0 = u8 [a0 + 0xf]\n  6280: a4 = a4 << 0x8\n  6283: a4 = a4 | a5\n  6286: s1 = s1 << 0x10\n  6289: a0 = a0 << 0x18\n  6292: a0 = a0 | s1\n  6295: a0 = a0 | a4\n  6298: a0 = a0 << 0x20\n  6301: a0 = a0 | a1\n  6304: a1 = reverse a0\n  6306: a0 = reverse a3\n  6308: a2 = reverse a2\n  6310: a3 = reverse t0\n  6312: a2 = a2 | a3\n  6315: a3 = a0 | a1\n  6318: a3 = a3 | a2\n  6321: a3 = a3 >> 0x20\n  6324: a1 = a1 | a2\n  6327: a1 = a1 << 0x20\n  6330: a1 = a1 | a3\n  6333: jump @107 if a1 == 0\n      : @104 (gas: 1)\n  6336: trap\n      : @105 (gas: 3)\n  6337: a0 = 0\n  6339: a1 = 0\n  6341: ra = 96, jump @0\n      : @106 [@dyn 48] (gas: 5)\n  6346: i32 a1 = a0 + 0\n  6348: a0 = 0x1\n  6351: a2 = 0\n  6353: ecalli 12 // 'seal_return'\n  6355: fallthrough\n      : @107 (gas: 7)\n  6356: a1 = u64 [sp + 0x8]\n  6359: a1 = a1 << 0x20\n  6362: s1 = a1 >> 0x20\n  6365: i32 a0 = a0 + 0\n  6367: u64 [sp + 0x8] = a0\n  6370: a1 = 0x20\n  6373: ra = 98, jump @0\n      : @108 [@dyn 49] (gas: 58)\n  6378: a1 = reverse s1\n  6380: a2 = u64 [sp + 0x10]\n  6383: a2 = reverse a2\n  6385: a3 = u64 [sp + 0x18]\n  6388: a3 = reverse a3\n  6390: a4 = a3 >> 0x38\n  6393: u8 [a0 + 0x1f] = a4\n  6396: a4 = a3 >> 0x30\n  6399: u8 [a0 + 0x1e] = a4\n  6402: a4 = a3 >> 0x28\n  6405: u8 [a0 + 0x1d] = a4\n  6408: a4 = a3 >> 0x20\n  6411: u8 [a0 + 0x1c] = a4\n  6414: a4 = a3 >> 0x18\n  6417: u8 [a0 + 0x1b] = a4\n  6420: a4 = a3 >> 0x10\n  6423: u8 [a0 + 0x1a] = a4\n  6426: a4 = a3 >> 0x8\n  6429: u8 [a0 + 0x19] = a4\n  6432: u8 [a0 + 0x18] = a3\n  6435: u8 [a0 + 0x10] = a2\n  6438: u8 [a0 + 11] = 0\n  6441: u8 [a0 + 10] = 0\n  6444: u8 [a0 + 9] = 0\n  6447: u8 [a0 + 7] = 0\n  6450: u8 [a0 + 6] = 0\n  6453: u8 [a0 + 5] = 0\n  6456: u8 [a0 + 4] = 0\n  6459: u8 [a0 + 3] = 0\n  6462: u8 [a0 + 2] = 0\n  6465: u8 [a0 + 1] = 0\n  6468: u8 [a0 + 0] = 0\n  6470: a3 = a2 >> 0x38\n  6473: u8 [a0 + 0x17] = a3\n  6476: a3 = a2 >> 0x30\n  6479: u8 [a0 + 0x16] = a3\n  6482: a3 = a2 >> 0x28\n  6485: u8 [a0 + 0x15] = a3\n  6488: a3 = a2 >> 0x20\n  6491: u8 [a0 + 0x14] = a3\n  6494: a3 = a2 >> 0x18\n  6497: u8 [a0 + 0x13] = a3\n  6500: a3 = a2 >> 0x10\n  6503: u8 [a0 + 0x12] = a3\n  6506: a2 = a2 >> 0x8\n  6509: u8 [a0 + 0x11] = a2\n  6512: u8 [a0 + 0x8] = a1\n  6515: a2 = a1 >> 0x38\n  6518: u8 [a0 + 0xf] = a2\n  6521: a2 = a1 >> 0x30\n  6524: u8 [a0 + 0xe] = a2\n  6527: a2 = a1 >> 0x28\n  6530: u8 [a0 + 0xd] = a2\n  6533: a1 = a1 >> 0x20\n  6536: u8 [a0 + 0xc] = a1\n  6539: a1 = 0x20\n  6542: a0 = u64 [sp + 0x8]\n  6545: ra = 100, jump @0\n      : @109 [@dyn 50] (gas: 6)\n  6550: i32 a1 = a0 + 0\n  6552: a2 = 0x20\n  6555: a0 = 0\n  6557: ra = 0x66\n  6560: ecalli 12 // 'seal_return'\n  6562: fallthrough\n      : @110 [@dyn 51] (gas: 9)\n  6563: a2 = u64 [a1 + 0x18]\n  6566: a3 = u64 [a1 + 0x10]\n  6569: a4 = u64 [a1 + 0x8]\n  6572: a1 = u64 [a1]\n  6574: u64 [a0 + 0x18] = a2\n  6577: u64 [a0 + 0x10] = a3\n  6580: u64 [a0 + 0x8] = a4\n  6583: u64 [a0] = a1\n  6585: ret\n      : @111 (gas: 8)\n  6587: a0 = u64 [sp + 0x70]\n  6590: a1 = u64 [sp + 0x78]\n  6593: a2 = u64 [sp + 0x68]\n  6596: a3 = u64 [sp + 0x60]\n  6599: a1 = a1 | a2\n  6602: a0 = a0 | a3\n  6605: a0 = a0 | a1\n  6608: jump @117 if a0 != 0\n      : @112 (gas: 2)\n  6612: a0 = i32 [0x20004]\n  6617: jump @117 if a0 <=u 67\n      : @113 (gas: 31)\n  6622: i32 a0 = sp + 0x80\n  6626: a1 = 0x4\n  6629: ecalli 3 // 'call_data_load'\n  6631: a0 = u64 [sp + 0x80]\n  6635: u64 [sp + 0x18] = a0\n  6638: a0 = u64 [sp + 0x88]\n  6642: u64 [sp + 0x10] = a0\n  6645: a0 = u64 [sp + 0x90]\n  6649: u64 [sp + 0x8] = a0\n  6652: s1 = u64 [sp + 0x98]\n  6656: i32 a0 = sp + 0x80\n  6660: a1 = 0x24\n  6663: ecalli 3 // 'call_data_load'\n  6665: a0 = u64 [sp + 0x80]\n  6669: a1 = u64 [sp + 0x88]\n  6673: a2 = u64 [sp + 0x90]\n  6677: a3 = u64 [sp + 0x98]\n  6681: u64 [sp + 0x38] = a3\n  6684: u64 [sp + 0x30] = a2\n  6687: u64 [sp + 0x28] = a1\n  6690: u64 [sp + 0x20] = a0\n  6693: u64 [sp + 0x58] = s1\n  6696: a0 = u64 [sp + 0x8]\n  6699: u64 [sp + 0x50] = a0\n  6702: a0 = u64 [sp + 0x10]\n  6705: u64 [sp + 0x48] = a0\n  6708: a0 = sp + 0x40\n  6711: a1 = sp + 0x20\n  6714: a2 = u64 [sp + 0x18]\n  6717: u64 [sp + 0x40] = a2\n  6720: ra = 104, jump @296\n      : @114 [@dyn 52] (gas: 3)\n  6725: a0 = 0x40\n  6728: a1 = 0x20\n  6731: ra = 106, jump @0\n      : @115 [@dyn 53] (gas: 100)\n  6736: a1 = u8 [a0 + 0x11]\n  6739: a2 = u8 [a0 + 0x10]\n  6742: a3 = u8 [a0 + 0x12]\n  6745: a4 = u8 [a0 + 0x13]\n  6748: a1 = a1 << 0x8\n  6751: a1 = a1 | a2\n  6754: a3 = a3 << 0x10\n  6757: a4 = a4 << 0x18\n  6760: a3 = a3 | a4\n  6763: a1 = a1 | a3\n  6766: a2 = u8 [a0 + 0x15]\n  6769: a3 = u8 [a0 + 0x14]\n  6772: a4 = u8 [a0 + 0x16]\n  6775: a5 = u8 [a0 + 0x17]\n  6778: a2 = a2 << 0x8\n  6781: a2 = a2 | a3\n  6784: a4 = a4 << 0x10\n  6787: a5 = a5 << 0x18\n  6790: a4 = a4 | a5\n  6793: a2 = a2 | a4\n  6796: a2 = a2 << 0x20\n  6799: t0 = a2 | a1\n  6802: a2 = u8 [a0 + 0x1]\n  6805: a3 = u8 [a0]\n  6807: a4 = u8 [a0 + 0x2]\n  6810: a5 = u8 [a0 + 0x3]\n  6813: a2 = a2 << 0x8\n  6816: a2 = a2 | a3\n  6819: a4 = a4 << 0x10\n  6822: a5 = a5 << 0x18\n  6825: a4 = a4 | a5\n  6828: a2 = a2 | a4\n  6831: a3 = u8 [a0 + 0x5]\n  6834: a4 = u8 [a0 + 0x4]\n  6837: a5 = u8 [a0 + 0x6]\n  6840: s1 = u8 [a0 + 0x7]\n  6843: a3 = a3 << 0x8\n  6846: a3 = a3 | a4\n  6849: a5 = a5 << 0x10\n  6852: s1 = s1 << 0x18\n  6855: a5 = a5 | s1\n  6858: a3 = a3 | a5\n  6861: a3 = a3 << 0x20\n  6864: a2 = a2 | a3\n  6867: a3 = u8 [a0 + 0x19]\n  6870: a4 = u8 [a0 + 0x18]\n  6873: a5 = u8 [a0 + 0x1a]\n  6876: s1 = u8 [a0 + 0x1b]\n  6879: a3 = a3 << 0x8\n  6882: a3 = a3 | a4\n  6885: a5 = a5 << 0x10\n  6888: s1 = s1 << 0x18\n  6891: a5 = a5 | s1\n  6894: a3 = a3 | a5\n  6897: a4 = u8 [a0 + 0x1d]\n  6900: a5 = u8 [a0 + 0x1c]\n  6903: s1 = u8 [a0 + 0x1e]\n  6906: a1 = u8 [a0 + 0x1f]\n  6909: a4 = a4 << 0x8\n  6912: a4 = a4 | a5\n  6915: s1 = s1 << 0x10\n  6918: a1 = a1 << 0x18\n  6921: a1 = a1 | s1\n  6924: a1 = a1 | a4\n  6927: a1 = a1 << 0x20\n  6930: a3 = a3 | a1\n  6933: a1 = u8 [a0 + 0x9]\n  6936: a4 = u8 [a0 + 0x8]\n  6939: a5 = u8 [a0 + 0xa]\n  6942: s1 = u8 [a0 + 0xb]\n  6945: a1 = a1 << 0x8\n  6948: a1 = a1 | a4\n  6951: a5 = a5 << 0x10\n  6954: s1 = s1 << 0x18\n  6957: a5 = a5 | s1\n  6960: a1 = a1 | a5\n  6963: a4 = u8 [a0 + 0xd]\n  6966: a5 = u8 [a0 + 0xc]\n  6969: s1 = u8 [a0 + 0xe]\n  6972: a0 = u8 [a0 + 0xf]\n  6975: a4 = a4 << 0x8\n  6978: a4 = a4 | a5\n  6981: s1 = s1 << 0x10\n  6984: a0 = a0 << 0x18\n  6987: a0 = a0 | s1\n  6990: a0 = a0 | a4\n  6993: a0 = a0 << 0x20\n  6996: a0 = a0 | a1\n  6999: a1 = reverse a0\n  7001: a0 = reverse a3\n  7003: a2 = reverse a2\n  7005: a3 = reverse t0\n  7007: a2 = a2 | a3\n  7010: a3 = a0 | a1\n  7013: a3 = a3 | a2\n  7016: a3 = a3 >> 0x20\n  7019: a1 = a1 | a2\n  7022: a1 = a1 << 0x20\n  7025: a1 = a1 | a3\n  7028: jump @119 if a1 == 0\n      : @116 (gas: 1)\n  7031: trap\n      : @117 (gas: 3)\n  7032: a0 = 0\n  7034: a1 = 0\n  7036: ra = 108, jump @0\n      : @118 [@dyn 54] (gas: 7)\n  7041: i32 a1 = a0 + 0\n  7043: a0 = 0x1\n  7046: a2 = 0\n  7048: ecalli 12 // 'seal_return'\n  7050: i32 a0 = a0 + 0\n  7052: ra = 0x6e\n  7055: jump @0\n      : @119 (gas: 2)\n  7058: i32 a0 = a0 + 0\n  7060: ra = 110, jump @0\n      : @120 [@dyn 55] (gas: 6)\n  7065: i32 a1 = a0 + 0\n  7067: a0 = 0\n  7069: a2 = 0\n  7071: ra = 0x70\n  7074: ecalli 12 // 'seal_return'\n  7076: fallthrough\n      : @121 [@dyn 56] (gas: 12)\n  7077: a2 = u64 [a1 + 0x10]\n  7080: a3 = u64 [a1 + 0x18]\n  7083: a4 = u64 [a1 + 0x8]\n  7086: a1 = u64 [a1]\n  7088: a3 = a3 | a4\n  7091: a4 = a1 | a2\n  7094: a4 = a4 | a3\n  7097: a4 = a4 >> 0x20\n  7100: a2 = a2 | a3\n  7103: a2 = a2 << 0x20\n  7106: a2 = a2 | a4\n  7109: jump @124 if a2 != 0\n      : @122 (gas: 7)\n  7113: sp = sp + 0xfffffffffffffff0\n  7116: u64 [sp + 0x8] = ra\n  7119: u64 [sp] = s0\n  7121: s0 = a0\n  7123: i32 a0 = a1 + 0\n  7125: a1 = 0x20\n  7128: ra = 114, jump @0\n      : @123 [@dyn 57] (gas: 100)\n  7133: a1 = u8 [a0 + 0x1]\n  7136: a2 = u8 [a0]\n  7138: a3 = u8 [a0 + 0x2]\n  7141: a4 = u8 [a0 + 0x3]\n  7144: a1 = a1 << 0x8\n  7147: a1 = a1 | a2\n  7150: a3 = a3 << 0x10\n  7153: a4 = a4 << 0x18\n  7156: a3 = a3 | a4\n  7159: a1 = a1 | a3\n  7162: a2 = u8 [a0 + 0x5]\n  7165: a3 = u8 [a0 + 0x4]\n  7168: a4 = u8 [a0 + 0x6]\n  7171: a5 = u8 [a0 + 0x7]\n  7174: a2 = a2 << 0x8\n  7177: a2 = a2 | a3\n  7180: a4 = a4 << 0x10\n  7183: a5 = a5 << 0x18\n  7186: a4 = a4 | a5\n  7189: a2 = a2 | a4\n  7192: a2 = a2 << 0x20\n  7195: t0 = a2 | a1\n  7198: a2 = u8 [a0 + 0x9]\n  7201: a3 = u8 [a0 + 0x8]\n  7204: a4 = u8 [a0 + 0xa]\n  7207: a5 = u8 [a0 + 0xb]\n  7210: a2 = a2 << 0x8\n  7213: a2 = a2 | a3\n  7216: a4 = a4 << 0x10\n  7219: a5 = a5 << 0x18\n  7222: a4 = a4 | a5\n  7225: a2 = a2 | a4\n  7228: a3 = u8 [a0 + 0xd]\n  7231: a4 = u8 [a0 + 0xc]\n  7234: a5 = u8 [a0 + 0xe]\n  7237: a1 = u8 [a0 + 0xf]\n  7240: a3 = a3 << 0x8\n  7243: a3 = a3 | a4\n  7246: a5 = a5 << 0x10\n  7249: a1 = a1 << 0x18\n  7252: a1 = a1 | a5\n  7255: a1 = a1 | a3\n  7258: a1 = a1 << 0x20\n  7261: t1 = a1 | a2\n  7264: a1 = u8 [a0 + 0x11]\n  7267: a3 = u8 [a0 + 0x10]\n  7270: a4 = u8 [a0 + 0x12]\n  7273: a5 = u8 [a0 + 0x13]\n  7276: a1 = a1 << 0x8\n  7279: a1 = a1 | a3\n  7282: a4 = a4 << 0x10\n  7285: a5 = a5 << 0x18\n  7288: a4 = a4 | a5\n  7291: a1 = a1 | a4\n  7294: a3 = u8 [a0 + 0x15]\n  7297: a4 = u8 [a0 + 0x14]\n  7300: a5 = u8 [a0 + 0x16]\n  7303: a2 = u8 [a0 + 0x17]\n  7306: a3 = a3 << 0x8\n  7309: a3 = a3 | a4\n  7312: a5 = a5 << 0x10\n  7315: a2 = a2 << 0x18\n  7318: a2 = a2 | a5\n  7321: a2 = a2 | a3\n  7324: a2 = a2 << 0x20\n  7327: a3 = a2 | a1\n  7330: a1 = u8 [a0 + 0x19]\n  7333: a2 = u8 [a0 + 0x18]\n  7336: a4 = u8 [a0 + 0x1a]\n  7339: a5 = u8 [a0 + 0x1b]\n  7342: a1 = a1 << 0x8\n  7345: a1 = a1 | a2\n  7348: a4 = a4 << 0x10\n  7351: a5 = a5 << 0x18\n  7354: a4 = a4 | a5\n  7357: a1 = a1 | a4\n  7360: a2 = u8 [a0 + 0x1d]\n  7363: a4 = u8 [a0 + 0x1c]\n  7366: a5 = u8 [a0 + 0x1e]\n  7369: a0 = u8 [a0 + 0x1f]\n  7372: a2 = a2 << 0x8\n  7375: a2 = a2 | a4\n  7378: a5 = a5 << 0x10\n  7381: a0 = a0 << 0x18\n  7384: a0 = a0 | a5\n  7387: a0 = a0 | a2\n  7390: a0 = a0 << 0x20\n  7393: a0 = a0 | a1\n  7396: a0 = reverse a0\n  7398: a1 = reverse a3\n  7400: a2 = reverse t1\n  7402: a3 = reverse t0\n  7404: u64 [s0 + 0x18] = a3\n  7407: u64 [s0 + 0x10] = a2\n  7410: u64 [s0 + 0x8] = a1\n  7413: u64 [s0] = a0\n  7415: ra = u64 [sp + 0x8]\n  7418: s0 = u64 [sp]\n  7420: sp = sp + 0x10\n  7423: ret\n      : @124 (gas: 1)\n  7425: trap\n      : @125 (gas: 20)\n  7426: sp = sp + 0xffffffffffffffb0\n  7429: u64 [sp + 0x48] = ra\n  7432: u64 [sp + 0x40] = s0\n  7435: u64 [sp + 0x38] = s1\n  7438: a4 = u64 [a1 + 0x10]\n  7441: a3 = u64 [a1 + 0x18]\n  7444: a5 = u64 [a1 + 0x8]\n  7447: s0 = u64 [a1]\n  7449: u64 [sp + 0x28] = a3\n  7452: u64 [sp + 0x20] = a5\n  7455: a1 = a5 | a3\n  7458: a3 = s0 | a4\n  7461: a3 = a3 | a1\n  7464: a3 = a3 >> 0x20\n  7467: u64 [sp + 0x30] = a4\n  7470: a1 = a1 | a4\n  7473: a1 = a1 << 0x20\n  7476: a1 = a1 | a3\n  7479: u64 [sp + 0x18] = a0\n  7482: jump @128 if a1 != 0\n      : @126 (gas: 10)\n  7486: a0 = u64 [a2 + 0x18]\n  7489: u64 [sp] = a0\n  7491: s1 = u64 [a2 + 0x10]\n  7494: a0 = u64 [a2 + 0x8]\n  7497: u64 [sp + 0x8] = a0\n  7500: a0 = u64 [a2]\n  7502: u64 [sp + 0x10] = a0\n  7505: i32 a0 = s0 + 0\n  7507: a1 = 0x20\n  7510: ra = 116, jump @0\n      : @127 [@dyn 58] (gas: 88)\n  7515: a1 = u64 [sp]\n  7517: a1 = reverse a1\n  7519: a2 = reverse s1\n  7521: a3 = u64 [sp + 0x8]\n  7524: a3 = reverse a3\n  7526: a4 = u64 [sp + 0x10]\n  7529: a4 = reverse a4\n  7531: a5 = a4 >> 0x38\n  7534: u8 [a0 + 0x1f] = a5\n  7537: a5 = a4 >> 0x30\n  7540: u8 [a0 + 0x1e] = a5\n  7543: a5 = a4 >> 0x28\n  7546: u8 [a0 + 0x1d] = a5\n  7549: a5 = a4 >> 0x20\n  7552: u8 [a0 + 0x1c] = a5\n  7555: a5 = a4 >> 0x18\n  7558: u8 [a0 + 0x1b] = a5\n  7561: a5 = a4 >> 0x10\n  7564: u8 [a0 + 0x1a] = a5\n  7567: a5 = a4 >> 0x8\n  7570: u8 [a0 + 0x19] = a5\n  7573: u8 [a0 + 0x18] = a4\n  7576: u8 [a0 + 0x10] = a3\n  7579: a4 = a3 >> 0x38\n  7582: u8 [a0 + 0x17] = a4\n  7585: a4 = a3 >> 0x30\n  7588: u8 [a0 + 0x16] = a4\n  7591: a4 = a3 >> 0x28\n  7594: u8 [a0 + 0x15] = a4\n  7597: a4 = a3 >> 0x20\n  7600: u8 [a0 + 0x14] = a4\n  7603: a4 = a3 >> 0x18\n  7606: u8 [a0 + 0x13] = a4\n  7609: a4 = a3 >> 0x10\n  7612: u8 [a0 + 0x12] = a4\n  7615: a3 = a3 >> 0x8\n  7618: u8 [a0 + 0x11] = a3\n  7621: u8 [a0 + 0x8] = a2\n  7624: a3 = a2 >> 0x38\n  7627: u8 [a0 + 0xf] = a3\n  7630: a3 = a2 >> 0x30\n  7633: u8 [a0 + 0xe] = a3\n  7636: a3 = a2 >> 0x28\n  7639: u8 [a0 + 0xd] = a3\n  7642: a3 = a2 >> 0x20\n  7645: u8 [a0 + 0xc] = a3\n  7648: a3 = a2 >> 0x18\n  7651: u8 [a0 + 0xb] = a3\n  7654: a3 = a2 >> 0x10\n  7657: u8 [a0 + 0xa] = a3\n  7660: a2 = a2 >> 0x8\n  7663: u8 [a0 + 0x9] = a2\n  7666: u8 [a0] = a1\n  7668: a2 = a1 >> 0x38\n  7671: u8 [a0 + 0x7] = a2\n  7674: a2 = a1 >> 0x30\n  7677: u8 [a0 + 0x6] = a2\n  7680: a2 = a1 >> 0x28\n  7683: u8 [a0 + 0x5] = a2\n  7686: a2 = a1 >> 0x20\n  7689: u8 [a0 + 0x4] = a2\n  7692: a2 = a1 >> 0x18\n  7695: u8 [a0 + 0x3] = a2\n  7698: a2 = a1 >> 0x10\n  7701: u8 [a0 + 0x2] = a2\n  7704: a1 = a1 >> 0x8\n  7707: u8 [a0 + 0x1] = a1\n  7710: a0 = s0 + 0x20\n  7713: a1 = a0 <u s0\n  7716: a3 = u64 [sp + 0x20]\n  7719: a2 = a3 + a1\n  7722: a3 = a2 <u a3\n  7725: a3 = a1 if a1 == 0\n  7728: a1 = u64 [sp + 0x30]\n  7731: a3 = a3 + a1\n  7734: a1 = a3 <u a1\n  7737: a4 = u64 [sp + 0x28]\n  7740: a1 = a1 + a4\n  7743: a4 = u64 [sp + 0x18]\n  7746: u64 [a4] = a0\n  7748: u64 [a4 + 0x8] = a2\n  7751: u64 [a4 + 0x10] = a3\n  7754: u64 [a4 + 0x18] = a1\n  7757: ra = u64 [sp + 0x48]\n  7760: s0 = u64 [sp + 0x40]\n  7763: s1 = u64 [sp + 0x38]\n  7766: sp = sp + 0x50\n  7769: ret\n      : @128 (gas: 1)\n  7771: trap\n      : @129 (gas: 19)\n  7772: sp = sp + 0xfffffffffffffeb8\n  7776: u64 [sp + 0x140] = ra\n  7780: u64 [sp + 0x138] = s0\n  7784: u64 [sp + 0x130] = s1\n  7788: a4 = u64 [a0 + 0x10]\n  7791: a5 = u64 [a0 + 0x18]\n  7794: a2 = u64 [a0 + 0x8]\n  7797: a3 = u64 [a0]\n  7799: u64 [sp + 0x120] = a2\n  7803: u64 [sp + 0xe8] = a5\n  7807: a0 = a2 | a5\n  7810: a2 = a3 | a4\n  7813: a2 = a2 | a0\n  7816: a2 = a2 >> 0x20\n  7819: u64 [sp + 0xf0] = a4\n  7823: a0 = a0 | a4\n  7826: a0 = a0 << 0x20\n  7829: a0 = a0 | a2\n  7832: jump @146 if a0 != 0\n      : @130 (gas: 11)\n  7836: a0 = u64 [a1 + 0x18]\n  7839: u64 [sp + 0xf8] = a0\n  7843: s1 = u64 [a1 + 0x10]\n  7846: s0 = u64 [a1 + 0x8]\n  7849: a0 = u64 [a1]\n  7851: u64 [sp + 0x128] = a0\n  7855: i32 a0 = a3 + 0\n  7857: a1 = 0x20\n  7860: u64 [sp + 0x108] = a0\n  7864: u64 [sp + 0x118] = a3\n  7868: ra = 118, jump @0\n      : @131 [@dyn 59] (gas: 12)\n  7873: a3 = u64 [sp + 0x128]\n  7877: a1 = a3 | s1\n  7880: u64 [sp + 0x110] = s0\n  7884: a2 = u64 [sp + 0xf8]\n  7888: a2 = a2 | s0\n  7891: a1 = a1 | a2\n  7894: a1 = a1 >> 0x20\n  7897: u64 [sp + 0xe0] = s1\n  7901: a2 = a2 | s1\n  7904: a2 = a2 << 0x20\n  7907: a1 = a1 | a2\n  7910: jump @146 if a1 != 0\n      : @132 (gas: 42)\n  7914: a1 = u8 [a0 + 0xc]\n  7917: u64 [sp + 0xd8] = a1\n  7921: a1 = u8 [a0 + 0xd]\n  7924: u64 [sp + 0xd0] = a1\n  7928: a1 = u8 [a0 + 0xe]\n  7931: u64 [sp + 0xc8] = a1\n  7935: a1 = u8 [a0 + 0xf]\n  7938: u64 [sp + 0xc0] = a1\n  7942: a1 = u8 [a0 + 0x10]\n  7945: u64 [sp + 0xb8] = a1\n  7949: a1 = u8 [a0 + 0x11]\n  7952: u64 [sp + 0xb0] = a1\n  7956: a1 = u8 [a0 + 0x12]\n  7959: u64 [sp + 0xa8] = a1\n  7963: a1 = u8 [a0 + 0x13]\n  7966: u64 [sp + 0xa0] = a1\n  7970: a1 = u8 [a0 + 0x14]\n  7973: u64 [sp + 0x98] = a1\n  7977: a1 = u8 [a0 + 0x15]\n  7980: u64 [sp + 0x90] = a1\n  7984: a1 = u8 [a0 + 0x16]\n  7987: u64 [sp + 0x88] = a1\n  7991: a1 = u8 [a0 + 0x17]\n  7994: u64 [sp + 0x80] = a1\n  7998: a1 = u8 [a0 + 0x18]\n  8001: u64 [sp + 0x78] = a1\n  8004: a1 = u8 [a0 + 0x19]\n  8007: u64 [sp + 0x70] = a1\n  8010: a1 = u8 [a0 + 0x1a]\n  8013: u64 [sp + 0x68] = a1\n  8016: a1 = u8 [a0 + 0x1b]\n  8019: u64 [sp + 0x60] = a1\n  8022: a1 = u8 [a0 + 0x1c]\n  8025: u64 [sp + 0x58] = a1\n  8028: a1 = u8 [a0 + 0x1d]\n  8031: u64 [sp + 0x50] = a1\n  8034: s0 = u8 [a0 + 0x1e]\n  8037: s1 = u8 [a0 + 0x1f]\n  8040: i32 a0 = a3 + 0\n  8042: a1 = 0x20\n  8045: u64 [sp + 0x100] = a0\n  8049: ra = 120, jump @0\n      : @133 [@dyn 60] (gas: 61)\n  8054: u8 [a0 + 0x1f] = s1\n  8057: u8 [a0 + 0x1e] = s0\n  8060: a1 = u64 [sp + 0x50]\n  8063: u8 [a0 + 0x1d] = a1\n  8066: a1 = u64 [sp + 0x58]\n  8069: u8 [a0 + 0x1c] = a1\n  8072: a1 = u64 [sp + 0x60]\n  8075: u8 [a0 + 0x1b] = a1\n  8078: a1 = u64 [sp + 0x68]\n  8081: u8 [a0 + 0x1a] = a1\n  8084: a1 = u64 [sp + 0x70]\n  8087: u8 [a0 + 0x19] = a1\n  8090: a1 = u64 [sp + 0x78]\n  8093: u8 [a0 + 0x18] = a1\n  8096: a1 = u64 [sp + 0x80]\n  8100: u8 [a0 + 0x17] = a1\n  8103: a1 = u64 [sp + 0x88]\n  8107: u8 [a0 + 0x16] = a1\n  8110: a1 = u64 [sp + 0x90]\n  8114: u8 [a0 + 0x15] = a1\n  8117: a1 = u64 [sp + 0x98]\n  8121: u8 [a0 + 0x14] = a1\n  8124: a1 = u64 [sp + 0xa0]\n  8128: u8 [a0 + 0x13] = a1\n  8131: a1 = u64 [sp + 0xa8]\n  8135: u8 [a0 + 0x12] = a1\n  8138: a1 = u64 [sp + 0xb0]\n  8142: u8 [a0 + 0x11] = a1\n  8145: a1 = u64 [sp + 0xb8]\n  8149: u8 [a0 + 0x10] = a1\n  8152: a1 = u64 [sp + 0xc0]\n  8156: u8 [a0 + 0xf] = a1\n  8159: a1 = u64 [sp + 0xc8]\n  8163: u8 [a0 + 0xe] = a1\n  8166: a1 = u64 [sp + 0xd0]\n  8170: u8 [a0 + 0xd] = a1\n  8173: a1 = u64 [sp + 0xd8]\n  8177: u8 [a0 + 0xc] = a1\n  8180: u8 [a0 + 11] = 0\n  8183: u8 [a0 + 10] = 0\n  8186: u8 [a0 + 9] = 0\n  8189: u8 [a0 + 8] = 0\n  8192: u8 [a0 + 7] = 0\n  8195: u8 [a0 + 6] = 0\n  8198: u8 [a0 + 5] = 0\n  8201: u8 [a0 + 4] = 0\n  8204: u8 [a0 + 3] = 0\n  8207: u8 [a0 + 2] = 0\n  8210: u8 [a0 + 1] = 0\n  8213: a1 = u64 [sp + 0xf0]\n  8217: a3 = u64 [sp + 0xe8]\n  8221: a3 = a3 | a1\n  8224: s0 = 0xffffffe0\n  8234: a1 = u64 [sp + 0x118]\n  8238: a1 = a1 <u s0\n  8241: a2 = u64 [sp + 0x120]\n  8245: a1 = 0 if a2 != 0\n  8247: u64 [sp + 0xf0] = a3\n  8251: a1 = 0 if a3 != 0\n  8253: u8 [a0 + 0] = 0\n  8255: jump @146 if a1 == 0\n      : @134 (gas: 4)\n  8259: a0 = u64 [sp + 0x108]\n  8263: i32 a0 = a0 + 0x20\n  8266: a1 = 0x20\n  8269: ra = 122, jump @0\n      : @135 [@dyn 61] (gas: 10)\n  8274: a1 = u64 [sp + 0xf8]\n  8278: a3 = u64 [sp + 0xe0]\n  8282: a3 = a3 | a1\n  8285: a1 = u64 [sp + 0x128]\n  8289: a1 = a1 <u s0\n  8292: a2 = u64 [sp + 0x110]\n  8296: a1 = 0 if a2 != 0\n  8298: u64 [sp + 0xf8] = a3\n  8302: a1 = 0 if a3 != 0\n  8304: jump @146 if a1 == 0\n      : @136 (gas: 66)\n  8308: a1 = u8 [a0]\n  8310: u64 [sp + 0xe8] = a1\n  8314: a1 = u8 [a0 + 0x1]\n  8317: u64 [sp + 0xe0] = a1\n  8321: a1 = u8 [a0 + 0x2]\n  8324: u64 [sp + 0xd8] = a1\n  8328: a1 = u8 [a0 + 0x3]\n  8331: u64 [sp + 0xd0] = a1\n  8335: a1 = u8 [a0 + 0x4]\n  8338: u64 [sp + 0xc8] = a1\n  8342: a1 = u8 [a0 + 0x5]\n  8345: u64 [sp + 0xc0] = a1\n  8349: a1 = u8 [a0 + 0x6]\n  8352: u64 [sp + 0xb8] = a1\n  8356: a1 = u8 [a0 + 0x7]\n  8359: u64 [sp + 0xb0] = a1\n  8363: a1 = u8 [a0 + 0x8]\n  8366: u64 [sp + 0xa8] = a1\n  8370: a1 = u8 [a0 + 0x9]\n  8373: u64 [sp + 0xa0] = a1\n  8377: a1 = u8 [a0 + 0xa]\n  8380: u64 [sp + 0x98] = a1\n  8384: a1 = u8 [a0 + 0xb]\n  8387: u64 [sp + 0x90] = a1\n  8391: a1 = u8 [a0 + 0xc]\n  8394: u64 [sp + 0x88] = a1\n  8398: a1 = u8 [a0 + 0xd]\n  8401: u64 [sp + 0x80] = a1\n  8405: a1 = u8 [a0 + 0xe]\n  8408: u64 [sp + 0x78] = a1\n  8411: a1 = u8 [a0 + 0xf]\n  8414: u64 [sp + 0x70] = a1\n  8417: a1 = u8 [a0 + 0x10]\n  8420: u64 [sp + 0x68] = a1\n  8423: a1 = u8 [a0 + 0x11]\n  8426: u64 [sp + 0x60] = a1\n  8429: a1 = u8 [a0 + 0x12]\n  8432: u64 [sp + 0x58] = a1\n  8435: a1 = u8 [a0 + 0x13]\n  8438: u64 [sp + 0x50] = a1\n  8441: a1 = u8 [a0 + 0x14]\n  8444: u64 [sp + 0x48] = a1\n  8447: a1 = u8 [a0 + 0x15]\n  8450: u64 [sp + 0x40] = a1\n  8453: a1 = u8 [a0 + 0x16]\n  8456: u64 [sp + 0x38] = a1\n  8459: a1 = u8 [a0 + 0x17]\n  8462: u64 [sp + 0x30] = a1\n  8465: a1 = u8 [a0 + 0x18]\n  8468: u64 [sp + 0x28] = a1\n  8471: a1 = u8 [a0 + 0x19]\n  8474: u64 [sp + 0x20] = a1\n  8477: a1 = u8 [a0 + 0x1a]\n  8480: u64 [sp + 0x18] = a1\n  8483: a1 = u8 [a0 + 0x1b]\n  8486: u64 [sp + 0x10] = a1\n  8489: a1 = u8 [a0 + 0x1c]\n  8492: u64 [sp + 0x8] = a1\n  8495: a1 = u8 [a0 + 0x1d]\n  8498: u64 [sp] = a1\n  8500: s0 = u8 [a0 + 0x1e]\n  8503: s1 = u8 [a0 + 0x1f]\n  8506: a0 = u64 [sp + 0x100]\n  8510: i32 a0 = a0 + 0x20\n  8513: a1 = 0x20\n  8516: ra = 124, jump @0\n      : @137 [@dyn 62] (gas: 70)\n  8521: u8 [a0 + 0x1f] = s1\n  8524: u8 [a0 + 0x1e] = s0\n  8527: a1 = u64 [sp]\n  8529: u8 [a0 + 0x1d] = a1\n  8532: a1 = u64 [sp + 0x8]\n  8535: u8 [a0 + 0x1c] = a1\n  8538: a1 = u64 [sp + 0x10]\n  8541: u8 [a0 + 0x1b] = a1\n  8544: a1 = u64 [sp + 0x18]\n  8547: u8 [a0 + 0x1a] = a1\n  8550: a1 = u64 [sp + 0x20]\n  8553: u8 [a0 + 0x19] = a1\n  8556: a1 = u64 [sp + 0x28]\n  8559: u8 [a0 + 0x18] = a1\n  8562: a1 = u64 [sp + 0x30]\n  8565: u8 [a0 + 0x17] = a1\n  8568: a1 = u64 [sp + 0x38]\n  8571: u8 [a0 + 0x16] = a1\n  8574: a1 = u64 [sp + 0x40]\n  8577: u8 [a0 + 0x15] = a1\n  8580: a1 = u64 [sp + 0x48]\n  8583: u8 [a0 + 0x14] = a1\n  8586: a1 = u64 [sp + 0x50]\n  8589: u8 [a0 + 0x13] = a1\n  8592: a1 = u64 [sp + 0x58]\n  8595: u8 [a0 + 0x12] = a1\n  8598: a1 = u64 [sp + 0x60]\n  8601: u8 [a0 + 0x11] = a1\n  8604: a1 = u64 [sp + 0x68]\n  8607: u8 [a0 + 0x10] = a1\n  8610: a1 = u64 [sp + 0x70]\n  8613: u8 [a0 + 0xf] = a1\n  8616: a1 = u64 [sp + 0x78]\n  8619: u8 [a0 + 0xe] = a1\n  8622: a1 = u64 [sp + 0x80]\n  8626: u8 [a0 + 0xd] = a1\n  8629: a1 = u64 [sp + 0x88]\n  8633: u8 [a0 + 0xc] = a1\n  8636: a1 = u64 [sp + 0x90]\n  8640: u8 [a0 + 0xb] = a1\n  8643: a1 = u64 [sp + 0x98]\n  8647: u8 [a0 + 0xa] = a1\n  8650: a1 = u64 [sp + 0xa0]\n  8654: u8 [a0 + 0x9] = a1\n  8657: a1 = u64 [sp + 0xa8]\n  8661: u8 [a0 + 0x8] = a1\n  8664: a1 = u64 [sp + 0xb0]\n  8668: u8 [a0 + 0x7] = a1\n  8671: a1 = u64 [sp + 0xb8]\n  8675: u8 [a0 + 0x6] = a1\n  8678: a1 = u64 [sp + 0xc0]\n  8682: u8 [a0 + 0x5] = a1\n  8685: a1 = u64 [sp + 0xc8]\n  8689: u8 [a0 + 0x4] = a1\n  8692: a1 = u64 [sp + 0xd0]\n  8696: u8 [a0 + 0x3] = a1\n  8699: a1 = u64 [sp + 0xd8]\n  8703: u8 [a0 + 0x2] = a1\n  8706: a1 = u64 [sp + 0xe0]\n  8710: u8 [a0 + 0x1] = a1\n  8713: s0 = 0xffffffc0\n  8723: a1 = u64 [sp + 0x118]\n  8727: a1 = a1 <u s0\n  8730: a2 = u64 [sp + 0x120]\n  8734: a1 = 0 if a2 != 0\n  8736: a2 = u64 [sp + 0xf0]\n  8740: a1 = 0 if a2 != 0\n  8742: a2 = u64 [sp + 0xe8]\n  8746: u8 [a0] = a2\n  8748: jump @146 if a1 == 0\n      : @138 (gas: 4)\n  8752: a0 = u64 [sp + 0x108]\n  8756: i32 a0 = a0 + 0x40\n  8759: a1 = 0x20\n  8762: ra = 126, jump @0\n      : @139 [@dyn 63] (gas: 7)\n  8767: a1 = u64 [sp + 0x128]\n  8771: a1 = a1 <u s0\n  8774: a2 = u64 [sp + 0x110]\n  8778: a1 = 0 if a2 != 0\n  8780: a2 = u64 [sp + 0xf8]\n  8784: a1 = 0 if a2 != 0\n  8786: jump @146 if a1 == 0\n      : @140 (gas: 66)\n  8790: a1 = u8 [a0]\n  8792: u64 [sp + 0xe8] = a1\n  8796: a1 = u8 [a0 + 0x1]\n  8799: u64 [sp + 0xe0] = a1\n  8803: a1 = u8 [a0 + 0x2]\n  8806: u64 [sp + 0xd8] = a1\n  8810: a1 = u8 [a0 + 0x3]\n  8813: u64 [sp + 0xd0] = a1\n  8817: a1 = u8 [a0 + 0x4]\n  8820: u64 [sp + 0xc8] = a1\n  8824: a1 = u8 [a0 + 0x5]\n  8827: u64 [sp + 0xc0] = a1\n  8831: a1 = u8 [a0 + 0x6]\n  8834: u64 [sp + 0xb8] = a1\n  8838: a1 = u8 [a0 + 0x7]\n  8841: u64 [sp + 0xb0] = a1\n  8845: a1 = u8 [a0 + 0x8]\n  8848: u64 [sp + 0xa8] = a1\n  8852: a1 = u8 [a0 + 0x9]\n  8855: u64 [sp + 0xa0] = a1\n  8859: a1 = u8 [a0 + 0xa]\n  8862: u64 [sp + 0x98] = a1\n  8866: a1 = u8 [a0 + 0xb]\n  8869: u64 [sp + 0x90] = a1\n  8873: a1 = u8 [a0 + 0xc]\n  8876: u64 [sp + 0x88] = a1\n  8880: a1 = u8 [a0 + 0xd]\n  8883: u64 [sp + 0x80] = a1\n  8887: a1 = u8 [a0 + 0xe]\n  8890: u64 [sp + 0x78] = a1\n  8893: a1 = u8 [a0 + 0xf]\n  8896: u64 [sp + 0x70] = a1\n  8899: a1 = u8 [a0 + 0x10]\n  8902: u64 [sp + 0x68] = a1\n  8905: a1 = u8 [a0 + 0x11]\n  8908: u64 [sp + 0x60] = a1\n  8911: a1 = u8 [a0 + 0x12]\n  8914: u64 [sp + 0x58] = a1\n  8917: a1 = u8 [a0 + 0x13]\n  8920: u64 [sp + 0x50] = a1\n  8923: a1 = u8 [a0 + 0x14]\n  8926: u64 [sp + 0x48] = a1\n  8929: a1 = u8 [a0 + 0x15]\n  8932: u64 [sp + 0x40] = a1\n  8935: a1 = u8 [a0 + 0x16]\n  8938: u64 [sp + 0x38] = a1\n  8941: a1 = u8 [a0 + 0x17]\n  8944: u64 [sp + 0x30] = a1\n  8947: a1 = u8 [a0 + 0x18]\n  8950: u64 [sp + 0x28] = a1\n  8953: a1 = u8 [a0 + 0x19]\n  8956: u64 [sp + 0x20] = a1\n  8959: a1 = u8 [a0 + 0x1a]\n  8962: u64 [sp + 0x18] = a1\n  8965: a1 = u8 [a0 + 0x1b]\n  8968: u64 [sp + 0x10] = a1\n  8971: a1 = u8 [a0 + 0x1c]\n  8974: u64 [sp + 0x8] = a1\n  8977: a1 = u8 [a0 + 0x1d]\n  8980: u64 [sp] = a1\n  8982: s0 = u8 [a0 + 0x1e]\n  8985: s1 = u8 [a0 + 0x1f]\n  8988: a0 = u64 [sp + 0x100]\n  8992: i32 a0 = a0 + 0x40\n  8995: a1 = 0x20\n  8998: ra = 128, jump @0\n      : @141 [@dyn 64] (gas: 70)\n  9004: u8 [a0 + 0x1f] = s1\n  9007: u8 [a0 + 0x1e] = s0\n  9010: a1 = u64 [sp]\n  9012: u8 [a0 + 0x1d] = a1\n  9015: a1 = u64 [sp + 0x8]\n  9018: u8 [a0 + 0x1c] = a1\n  9021: a1 = u64 [sp + 0x10]\n  9024: u8 [a0 + 0x1b] = a1\n  9027: a1 = u64 [sp + 0x18]\n  9030: u8 [a0 + 0x1a] = a1\n  9033: a1 = u64 [sp + 0x20]\n  9036: u8 [a0 + 0x19] = a1\n  9039: a1 = u64 [sp + 0x28]\n  9042: u8 [a0 + 0x18] = a1\n  9045: a1 = u64 [sp + 0x30]\n  9048: u8 [a0 + 0x17] = a1\n  9051: a1 = u64 [sp + 0x38]\n  9054: u8 [a0 + 0x16] = a1\n  9057: a1 = u64 [sp + 0x40]\n  9060: u8 [a0 + 0x15] = a1\n  9063: a1 = u64 [sp + 0x48]\n  9066: u8 [a0 + 0x14] = a1\n  9069: a1 = u64 [sp + 0x50]\n  9072: u8 [a0 + 0x13] = a1\n  9075: a1 = u64 [sp + 0x58]\n  9078: u8 [a0 + 0x12] = a1\n  9081: a1 = u64 [sp + 0x60]\n  9084: u8 [a0 + 0x11] = a1\n  9087: a1 = u64 [sp + 0x68]\n  9090: u8 [a0 + 0x10] = a1\n  9093: a1 = u64 [sp + 0x70]\n  9096: u8 [a0 + 0xf] = a1\n  9099: a1 = u64 [sp + 0x78]\n  9102: u8 [a0 + 0xe] = a1\n  9105: a1 = u64 [sp + 0x80]\n  9109: u8 [a0 + 0xd] = a1\n  9112: a1 = u64 [sp + 0x88]\n  9116: u8 [a0 + 0xc] = a1\n  9119: a1 = u64 [sp + 0x90]\n  9123: u8 [a0 + 0xb] = a1\n  9126: a1 = u64 [sp + 0x98]\n  9130: u8 [a0 + 0xa] = a1\n  9133: a1 = u64 [sp + 0xa0]\n  9137: u8 [a0 + 0x9] = a1\n  9140: a1 = u64 [sp + 0xa8]\n  9144: u8 [a0 + 0x8] = a1\n  9147: a1 = u64 [sp + 0xb0]\n  9151: u8 [a0 + 0x7] = a1\n  9154: a1 = u64 [sp + 0xb8]\n  9158: u8 [a0 + 0x6] = a1\n  9161: a1 = u64 [sp + 0xc0]\n  9165: u8 [a0 + 0x5] = a1\n  9168: a1 = u64 [sp + 0xc8]\n  9172: u8 [a0 + 0x4] = a1\n  9175: a1 = u64 [sp + 0xd0]\n  9179: u8 [a0 + 0x3] = a1\n  9182: a1 = u64 [sp + 0xd8]\n  9186: u8 [a0 + 0x2] = a1\n  9189: a1 = u64 [sp + 0xe0]\n  9193: u8 [a0 + 0x1] = a1\n  9196: s0 = 0xffffffa0\n  9206: a1 = u64 [sp + 0x118]\n  9210: a1 = a1 <u s0\n  9213: a2 = u64 [sp + 0x120]\n  9217: a1 = 0 if a2 != 0\n  9219: a2 = u64 [sp + 0xf0]\n  9223: a1 = 0 if a2 != 0\n  9225: a2 = u64 [sp + 0xe8]\n  9229: u8 [a0] = a2\n  9231: jump @146 if a1 == 0\n      : @142 (gas: 4)\n  9235: a0 = u64 [sp + 0x108]\n  9239: i32 a0 = a0 + 0x60\n  9242: a1 = 0x20\n  9245: ra = 130, jump @0\n      : @143 [@dyn 65] (gas: 7)\n  9251: a1 = u64 [sp + 0x128]\n  9255: a1 = a1 <u s0\n  9258: a2 = u64 [sp + 0x110]\n  9262: a1 = 0 if a2 != 0\n  9264: a2 = u64 [sp + 0xf8]\n  9268: a1 = 0 if a2 != 0\n  9270: jump @146 if a1 == 0\n      : @144 (gas: 94)\n  9274: a1 = u8 [a0 + 0x1d]\n  9277: a2 = u8 [a0 + 0x1c]\n  9280: a3 = u8 [a0 + 0x1e]\n  9283: a4 = u8 [a0 + 0x1f]\n  9286: a1 = a1 << 0x8\n  9289: a1 = a1 | a2\n  9292: a3 = a3 << 0x10\n  9295: a4 = a4 << 0x18\n  9298: a3 = a3 | a4\n  9301: a1 = a1 | a3\n  9304: a2 = u8 [a0 + 0xd]\n  9307: a3 = u8 [a0 + 0xc]\n  9310: a4 = u8 [a0 + 0xe]\n  9313: a5 = u8 [a0 + 0xf]\n  9316: a2 = a2 << 0x8\n  9319: a2 = a2 | a3\n  9322: a4 = a4 << 0x10\n  9325: a5 = a5 << 0x18\n  9328: a4 = a4 | a5\n  9331: a2 = a2 | a4\n  9334: a1 = a1 | a2\n  9337: a1 = a1 << 0x20\n  9340: a2 = u8 [a0 + 0x9]\n  9343: a3 = u8 [a0 + 0x8]\n  9346: a4 = u8 [a0 + 0xa]\n  9349: a5 = u8 [a0 + 0xb]\n  9352: a2 = a2 << 0x8\n  9355: a2 = a2 | a3\n  9358: a4 = a4 << 0x10\n  9361: a5 = a5 << 0x18\n  9364: a4 = a4 | a5\n  9367: a2 = a2 | a4\n  9370: a3 = u8 [a0 + 0x19]\n  9373: a4 = u8 [a0 + 0x18]\n  9376: a5 = u8 [a0 + 0x1a]\n  9379: s1 = u8 [a0 + 0x1b]\n  9382: a3 = a3 << 0x8\n  9385: a3 = a3 | a4\n  9388: a5 = a5 << 0x10\n  9391: s1 = s1 << 0x18\n  9394: a5 = a5 | s1\n  9397: a3 = a3 | a5\n  9400: a2 = a2 | a3\n  9403: a1 = a1 | a2\n  9406: a2 = u8 [a0 + 0x15]\n  9409: a3 = u8 [a0 + 0x14]\n  9412: a4 = u8 [a0 + 0x16]\n  9415: a5 = u8 [a0 + 0x17]\n  9418: a2 = a2 << 0x8\n  9421: a2 = a2 | a3\n  9424: a4 = a4 << 0x10\n  9427: a5 = a5 << 0x18\n  9430: a4 = a4 | a5\n  9433: a2 = a2 | a4\n  9436: a3 = u8 [a0 + 0x5]\n  9439: a4 = u8 [a0 + 0x4]\n  9442: a5 = u8 [a0 + 0x6]\n  9445: s1 = u8 [a0 + 0x7]\n  9448: a3 = a3 << 0x8\n  9451: a3 = a3 | a4\n  9454: a5 = a5 << 0x10\n  9457: s1 = s1 << 0x18\n  9460: a5 = a5 | s1\n  9463: a3 = a3 | a5\n  9466: a2 = a2 | a3\n  9469: a3 = u8 [a0 + 0x1]\n  9472: a4 = u8 [a0]\n  9474: a5 = u8 [a0 + 0x2]\n  9477: s1 = u8 [a0 + 0x3]\n  9480: a3 = a3 << 0x8\n  9483: a3 = a3 | a4\n  9486: a5 = a5 << 0x10\n  9489: s1 = s1 << 0x18\n  9492: a4 = u8 [a0 + 0x11]\n  9495: a5 = a5 | s1\n  9498: a3 = a3 | a5\n  9501: a5 = u8 [a0 + 0x10]\n  9504: a4 = a4 << 0x8\n  9507: s1 = u8 [a0 + 0x12]\n  9510: a0 = u8 [a0 + 0x13]\n  9513: a4 = a4 | a5\n  9516: a2 = a2 << 0x20\n  9519: s1 = s1 << 0x10\n  9522: a0 = a0 << 0x18\n  9525: a0 = a0 | s1\n  9528: a0 = a0 | a4\n  9531: a0 = a0 | a3\n  9534: a0 = a0 | a2\n  9537: a0 = a0 | a1\n  9540: s0 = a0 >u 0\n  9542: a0 = u64 [sp + 0x100]\n  9546: i32 a0 = a0 + 0x60\n  9549: a1 = 0x20\n  9552: ra = 132, jump @0\n      : @145 [@dyn 66] (gas: 37)\n  9558: u8 [a0 + 30] = 0\n  9561: u8 [a0 + 29] = 0\n  9564: u8 [a0 + 28] = 0\n  9567: u8 [a0 + 27] = 0\n  9570: u8 [a0 + 26] = 0\n  9573: u8 [a0 + 25] = 0\n  9576: u8 [a0 + 24] = 0\n  9579: u8 [a0 + 23] = 0\n  9582: u8 [a0 + 22] = 0\n  9585: u8 [a0 + 21] = 0\n  9588: u8 [a0 + 20] = 0\n  9591: u8 [a0 + 19] = 0\n  9594: u8 [a0 + 18] = 0\n  9597: u8 [a0 + 17] = 0\n  9600: u8 [a0 + 16] = 0\n  9603: u8 [a0 + 15] = 0\n  9606: u8 [a0 + 14] = 0\n  9609: u8 [a0 + 13] = 0\n  9612: u8 [a0 + 12] = 0\n  9615: u8 [a0 + 11] = 0\n  9618: u8 [a0 + 10] = 0\n  9621: u8 [a0 + 9] = 0\n  9624: u8 [a0 + 8] = 0\n  9627: u8 [a0 + 7] = 0\n  9630: u8 [a0 + 6] = 0\n  9633: u8 [a0 + 5] = 0\n  9636: u8 [a0 + 4] = 0\n  9639: u8 [a0 + 3] = 0\n  9642: u8 [a0 + 2] = 0\n  9645: u8 [a0 + 1] = 0\n  9648: u8 [a0 + 0] = 0\n  9650: u8 [a0 + 0x1f] = s0\n  9653: ra = u64 [sp + 0x140]\n  9657: s0 = u64 [sp + 0x138]\n  9661: s1 = u64 [sp + 0x130]\n  9665: sp = sp + 0x148\n  9669: ret\n      : @146 (gas: 1)\n  9671: trap\n      : @147 (gas: 22)\n  9672: sp = sp + 0xffffffffffffff20\n  9676: u64 [sp + 0xd8] = ra\n  9680: u64 [sp + 0xd0] = s0\n  9684: u64 [sp + 0xc8] = s1\n  9688: s0 = sp + 0xe0\n  9692: sp = sp & 0xfffffffffffffff0\n  9695: a3 = u64 [a1 + 0x18]\n  9698: a4 = u64 [a1 + 0x10]\n  9701: a5 = u64 [a1 + 0x8]\n  9704: s1 = u64 [a1]\n  9706: u64 [sp + 0x78] = a3\n  9709: u64 [sp + 0x68] = a5\n  9712: a1 = a5 | a3\n  9715: a3 = s1 | a4\n  9718: a3 = a3 | a1\n  9721: a3 = a3 >> 0x20\n  9724: u64 [sp + 0x70] = a4\n  9727: a1 = a1 | a4\n  9730: a1 = a1 << 0x20\n  9733: a1 = a1 | a3\n  9736: u64 [sp + 0x10] = a0\n  9739: jump @162 if a1 != 0\n      : @148 (gas: 13)\n  9743: a0 = u64 [a2 + 0x18]\n  9746: u64 [sp + 0x60] = a0\n  9749: a0 = u64 [a2 + 0x10]\n  9752: u64 [sp + 0x48] = a0\n  9755: a0 = u64 [a2 + 0x8]\n  9758: u64 [sp + 0x40] = a0\n  9761: a0 = u64 [a2]\n  9763: u64 [sp + 0x50] = a0\n  9766: u64 [sp + 0x58] = s1\n  9769: i32 a0 = s1 + 0\n  9771: a1 = 0x20\n  9774: s1 = 0x20\n  9777: ra = 134, jump @0\n      : @149 [@dyn 67] (gas: 44)\n  9783: a3 = u64 [sp + 0x50]\n  9786: u8 [a0 + 0x1f] = s1\n  9789: a4 = u64 [sp + 0x48]\n  9792: a1 = a3 | a4\n  9795: a2 = u64 [sp + 0x60]\n  9798: a5 = u64 [sp + 0x40]\n  9801: a2 = a2 | a5\n  9804: a1 = a1 | a2\n  9807: a1 = a1 >> 0x20\n  9810: a2 = a2 | a4\n  9813: a2 = a2 << 0x20\n  9816: a1 = a1 | a2\n  9819: u8 [a0 + 30] = 0\n  9822: u8 [a0 + 29] = 0\n  9825: u8 [a0 + 28] = 0\n  9828: u8 [a0 + 27] = 0\n  9831: u8 [a0 + 26] = 0\n  9834: u8 [a0 + 25] = 0\n  9837: u8 [a0 + 24] = 0\n  9840: u8 [a0 + 23] = 0\n  9843: u8 [a0 + 22] = 0\n  9846: u8 [a0 + 21] = 0\n  9849: u8 [a0 + 20] = 0\n  9852: u8 [a0 + 19] = 0\n  9855: u8 [a0 + 18] = 0\n  9858: u8 [a0 + 17] = 0\n  9861: u8 [a0 + 16] = 0\n  9864: u8 [a0 + 15] = 0\n  9867: u8 [a0 + 14] = 0\n  9870: u8 [a0 + 13] = 0\n  9873: u8 [a0 + 12] = 0\n  9876: u8 [a0 + 11] = 0\n  9879: u8 [a0 + 10] = 0\n  9882: u8 [a0 + 9] = 0\n  9885: u8 [a0 + 8] = 0\n  9888: u8 [a0 + 7] = 0\n  9891: u8 [a0 + 6] = 0\n  9894: u8 [a0 + 5] = 0\n  9897: u8 [a0 + 4] = 0\n  9900: u8 [a0 + 3] = 0\n  9903: u8 [a0 + 2] = 0\n  9906: u8 [a0 + 1] = 0\n  9909: u8 [a0 + 0] = 0\n  9911: jump @162 if a1 != 0\n      : @150 (gas: 18)\n  9915: a0 = u64 [sp + 0x58]\n  9918: a1 = a0 + 0x20\n  9921: u64 [sp + 0x30] = a1\n  9924: a0 = a1 <u a0\n  9927: a1 = u64 [sp + 0x68]\n  9930: a2 = a1 + a0\n  9933: u64 [sp + 0x38] = a2\n  9936: a1 = a2 <u a1\n  9939: a1 = a0 if a0 == 0\n  9942: a0 = u64 [sp + 0x70]\n  9945: s1 = a0 + a1\n  9948: a0 = s1 <u a0\n  9951: a1 = u64 [sp + 0x78]\n  9954: a0 = a0 + a1\n  9957: u64 [sp + 0x28] = a0\n  9960: i32 a0 = a3 + 0\n  9962: a1 = 0x20\n  9965: ra = 136, jump @0\n      : @151 [@dyn 68] (gas: 11)\n  9971: t0 = u64 [sp + 0x30]\n  9974: a1 = t0 | s1\n  9977: a2 = u64 [sp + 0x38]\n  9980: a3 = u64 [sp + 0x28]\n  9983: a2 = a2 | a3\n  9986: a1 = a1 | a2\n  9989: a1 = a1 >> 0x20\n  9992: a2 = a2 | s1\n  9995: a2 = a2 << 0x20\n  9998: a1 = a1 | a2\n 10001: jump @162 if a1 != 0\n      : @152 (gas: 94)\n 10005: a1 = u8 [a0 + 0x19]\n 10008: a2 = u8 [a0 + 0x18]\n 10011: a3 = u8 [a0 + 0x1a]\n 10014: a4 = u8 [a0 + 0x1b]\n 10017: a1 = a1 << 0x8\n 10020: a1 = a1 | a2\n 10023: a3 = a3 << 0x10\n 10026: a4 = a4 << 0x18\n 10029: a3 = a3 | a4\n 10032: a1 = a1 | a3\n 10035: a2 = u8 [a0 + 0x1d]\n 10038: a3 = u8 [a0 + 0x1c]\n 10041: a4 = u8 [a0 + 0x1e]\n 10044: a5 = u8 [a0 + 0x1f]\n 10047: a2 = a2 << 0x8\n 10050: a2 = a2 | a3\n 10053: a4 = a4 << 0x10\n 10056: a5 = a5 << 0x18\n 10059: a4 = a4 | a5\n 10062: a2 = a2 | a4\n 10065: a2 = a2 << 0x20\n 10068: a1 = a1 | a2\n 10071: u64 [sp + 0x38] = a1\n 10074: a1 = u8 [a0 + 0x11]\n 10077: a2 = u8 [a0 + 0x10]\n 10080: a3 = u8 [a0 + 0x12]\n 10083: a4 = u8 [a0 + 0x13]\n 10086: a1 = a1 << 0x8\n 10089: a1 = a1 | a2\n 10092: a3 = a3 << 0x10\n 10095: a4 = a4 << 0x18\n 10098: a3 = a3 | a4\n 10101: a1 = a1 | a3\n 10104: a2 = u8 [a0 + 0x15]\n 10107: a3 = u8 [a0 + 0x14]\n 10110: a4 = u8 [a0 + 0x16]\n 10113: a5 = u8 [a0 + 0x17]\n 10116: a2 = a2 << 0x8\n 10119: a2 = a2 | a3\n 10122: a4 = a4 << 0x10\n 10125: a5 = a5 << 0x18\n 10128: a4 = a4 | a5\n 10131: a2 = a2 | a4\n 10134: a2 = a2 << 0x20\n 10137: a1 = a1 | a2\n 10140: u64 [sp + 0x28] = a1\n 10143: a1 = u8 [a0 + 0x9]\n 10146: a2 = u8 [a0 + 0x8]\n 10149: a3 = u8 [a0 + 0xa]\n 10152: a4 = u8 [a0 + 0xb]\n 10155: a1 = a1 << 0x8\n 10158: a1 = a1 | a2\n 10161: a3 = a3 << 0x10\n 10164: a4 = a4 << 0x18\n 10167: a3 = a3 | a4\n 10170: a1 = a1 | a3\n 10173: a2 = u8 [a0 + 0xd]\n 10176: a3 = u8 [a0 + 0xc]\n 10179: a4 = u8 [a0 + 0xe]\n 10182: a5 = u8 [a0 + 0xf]\n 10185: a2 = a2 << 0x8\n 10188: a2 = a2 | a3\n 10191: a4 = a4 << 0x10\n 10194: a5 = a5 << 0x18\n 10197: a4 = a4 | a5\n 10200: a2 = a2 | a4\n 10203: a2 = a2 << 0x20\n 10206: a1 = a1 | a2\n 10209: u64 [sp + 0x20] = a1\n 10212: a1 = u8 [a0 + 0x1]\n 10215: a2 = u8 [a0]\n 10217: a3 = u8 [a0 + 0x2]\n 10220: a4 = u8 [a0 + 0x3]\n 10223: a1 = a1 << 0x8\n 10226: a1 = a1 | a2\n 10229: a3 = a3 << 0x10\n 10232: a4 = a4 << 0x18\n 10235: a3 = a3 | a4\n 10238: a1 = a1 | a3\n 10241: a2 = u8 [a0 + 0x5]\n 10244: a3 = u8 [a0 + 0x4]\n 10247: a4 = u8 [a0 + 0x6]\n 10250: a0 = u8 [a0 + 0x7]\n 10253: a2 = a2 << 0x8\n 10256: a2 = a2 | a3\n 10259: a4 = a4 << 0x10\n 10262: a0 = a0 << 0x18\n 10265: a0 = a0 | a4\n 10268: a0 = a0 | a2\n 10271: a0 = a0 << 0x20\n 10274: s1 = a0 | a1\n 10277: i32 a0 = t0 + 0\n 10279: a1 = 0x20\n 10282: ra = 138, jump @0\n      : @153 [@dyn 69] (gas: 81)\n 10288: a3 = s1\n 10290: s1 = u64 [sp + 0x20]\n 10293: a4 = u64 [sp + 0x28]\n 10296: t2 = u64 [sp + 0x38]\n 10299: u8 [a0 + 0x10] = a4\n 10302: a1 = s1 >> 0x38\n 10305: u8 [a0 + 0xf] = a1\n 10308: a1 = s1 >> 0x30\n 10311: u8 [a0 + 0xe] = a1\n 10314: a1 = s1 >> 0x28\n 10317: u8 [a0 + 0xd] = a1\n 10320: a1 = s1 >> 0x20\n 10323: u8 [a0 + 0xc] = a1\n 10326: a1 = s1 >> 0x18\n 10329: u8 [a0 + 0xb] = a1\n 10332: a1 = s1 >> 0x10\n 10335: u8 [a0 + 0xa] = a1\n 10338: a1 = s1 >> 0x8\n 10341: u8 [a0 + 0x9] = a1\n 10344: u8 [a0 + 0x8] = s1\n 10347: a1 = a3 >> 0x38\n 10350: u8 [a0 + 0x7] = a1\n 10353: a1 = a3 >> 0x30\n 10356: u8 [a0 + 0x6] = a1\n 10359: a1 = a3 >> 0x28\n 10362: u8 [a0 + 0x5] = a1\n 10365: a1 = a3 >> 0x20\n 10368: u8 [a0 + 0x4] = a1\n 10371: a1 = a3 >> 0x18\n 10374: u8 [a0 + 0x3] = a1\n 10377: a1 = a3 >> 0x10\n 10380: u8 [a0 + 0x2] = a1\n 10383: a1 = a3 >> 0x8\n 10386: u8 [a0 + 0x1] = a1\n 10389: u8 [a0] = a3\n 10391: u8 [a0 + 0x18] = t2\n 10394: a1 = a4 >> 0x38\n 10397: u8 [a0 + 0x17] = a1\n 10400: a1 = a4 >> 0x30\n 10403: u8 [a0 + 0x16] = a1\n 10406: a1 = a4 >> 0x28\n 10409: u8 [a0 + 0x15] = a1\n 10412: a1 = a4 >> 0x20\n 10415: u8 [a0 + 0x14] = a1\n 10418: a1 = a4 >> 0x18\n 10421: u8 [a0 + 0x13] = a1\n 10424: a1 = a4 >> 0x10\n 10427: u8 [a0 + 0x12] = a1\n 10430: a1 = a4 >> 0x8\n 10433: u8 [a0 + 0x11] = a1\n 10436: a1 = t2 >> 0x38\n 10439: u8 [a0 + 0x1f] = a1\n 10442: a1 = t2 >> 0x30\n 10445: u8 [a0 + 0x1e] = a1\n 10448: a1 = t2 >> 0x28\n 10451: u8 [a0 + 0x1d] = a1\n 10454: a1 = t2 >> 0x20\n 10457: u8 [a0 + 0x1c] = a1\n 10460: a1 = t2 >> 0x18\n 10463: u8 [a0 + 0x1b] = a1\n 10466: a1 = t2 >> 0x10\n 10469: u8 [a0 + 0x1a] = a1\n 10472: a1 = t2 >> 0x8\n 10475: u8 [a0 + 0x19] = a1\n 10478: a0 = u64 [sp + 0x58]\n 10481: t0 = a0 + 0x40\n 10484: a0 = t0 <u a0\n 10487: a1 = u64 [sp + 0x68]\n 10490: t1 = a1 + a0\n 10493: a1 = t1 <u a1\n 10496: a1 = a0 if a0 == 0\n 10499: a0 = a3 | a4\n 10502: a2 = s1 | t2\n 10505: a0 = a0 | a2\n 10508: a5 = u64 [sp + 0x70]\n 10511: a2 = a5 + a1\n 10514: a1 = a2 <u a5\n 10517: a5 = u64 [sp + 0x78]\n 10520: a1 = a1 + a5\n 10523: u64 [sp + 0x78] = a1\n 10526: jump @160 if a0 == 0\n      : @154 (gas: 162)\n 10530: u64 [sp + 0x68] = a2\n 10533: u64 [sp + 0x70] = t1\n 10536: u64 [sp + 0x58] = t0\n 10539: a5 = reverse a3\n 10541: a3 = reverse s1\n 10543: u64 [sp + 0x20] = a3\n 10546: a2 = reverse a4\n 10548: a0 = reverse t2\n 10550: t0 = 0x1\n 10553: a1 = a0\n 10555: a1 = t0 if a2 == 0\n 10558: a4 = maxu(a0, t0)\n 10561: a4 = a1 if a2 != 0\n 10564: a1 = a3 >u 0\n 10566: s1 = a5\n 10568: a5 = a5 >u 0\n 10570: a5 = a1 if s1 == 0\n 10573: u64 [sp + 0x30] = s1\n 10576: a0 = t0 if a5 == 0\n 10579: s1 = s1 | a3\n 10582: a0 = a4 if s1 == 0\n 10585: a1 = a2\n 10587: a1 = 0 if a5 == 0\n 10589: a1 = a2 if s1 == 0\n 10592: t2 = a1\n 10594: a1 = 0xffffffe0\n 10604: a3 = u64 [sp + 0x50]\n 10607: t0 = a1 <u a3\n 10610: a5 = a3\n 10612: a4 = u64 [sp + 0x40]\n 10615: a3 = a4 >u 0\n 10617: a3 = t0 if a4 == 0\n 10620: a2 = a4\n 10622: s1 = u64 [sp + 0x48]\n 10625: a4 = -s1\n 10627: ra = a4 - a3\n 10630: t1 = ra >u 0\n 10632: a3 = a4 <u a3\n 10635: a4 = s1 >u 0\n 10637: s1 = u64 [sp + 0x60]\n 10640: a4 = a4 + s1\n 10643: s1 = -a4\n 10645: s1 = s1 - a3\n 10648: a4 = s1 >u 0\n 10650: a4 = t1 if s1 == 0\n 10653: a5 = a1 - a5\n 10656: a3 = -a2\n 10658: a2 = a3 - t0\n 10661: u64 [sp + 0x38] = a1\n 10664: t1 = a1 <u a5\n 10667: a3 = a2 >u 0\n 10669: a3 = t1 if a2 == 0\n 10672: a1 = ra | s1\n 10675: a3 = a4 if a1 != 0\n 10678: a5 = 0 if a3 != 0\n 10680: a4 = a5 + 0x1f\n 10683: a1 = a4 <u a5\n 10686: a2 = 0 if a3 != 0\n 10688: a5 = a2 + a1\n 10691: t1 = a5 <u a2\n 10694: t1 = a1 if a1 == 0\n 10697: ra = 0 if a3 != 0\n 10699: a1 = ra + t1\n 10702: u64 [sp] = a1\n 10704: a1 = a1 << 0x3b\n 10707: a2 = a5 >> 0x5\n 10710: a2 = a2 | a1\n 10713: a5 = a5 << 0x3b\n 10716: a4 = a4 >> 0x5\n 10719: a5 = a5 | a4\n 10722: u64 [sp + 0x28] = a5\n 10725: a1 = a0 <u 0x1\n 10728: t0 = t2\n 10730: t2 = t2 - a1\n 10733: t1 = a0 + 0xffffffffffffffff\n 10736: a1 = a2\n 10738: u64 [sp + 0x18] = a2\n 10741: a2 = t2 ^ a2\n 10744: a1 = t2 <u a1\n 10747: a4 = t1 <u a5\n 10750: a4 = a1 if a2 != 0\n 10753: u64 [sp + 0x8] = a4\n 10756: a4 = u64 [sp + 0x20]\n 10759: a1 = a4\n 10761: a2 = u64 [sp + 0x30]\n 10764: a1 = 0 if a2 == 0\n 10766: a1 = a4 if a2 == 0\n 10769: a0 = a0 | t0\n 10772: a0 = a0 <u 0x1\n 10775: a4 = a1 <u a0\n 10778: t0 = a2 - a4\n 10781: a5 = a1 - a0\n 10784: s1 = 0 if a3 != 0\n 10786: a3 = u64 [sp]\n 10788: a0 = a3 <u ra\n 10791: ra = u64 [sp + 0x60]\n 10794: a0 = a0 + s1\n 10797: a3 = a3 >> 0x5\n 10800: a4 = a0 << 0x3b\n 10803: a3 = a3 | a4\n 10806: a2 = a0 >> 0x5\n 10809: a1 = a5 <u a3\n 10812: s1 = t0 ^ a2\n 10815: a4 = t0 <u a2\n 10818: a0 = t0\n 10820: a4 = a1 if s1 == 0\n 10823: a1 = a5 ^ a3\n 10826: a1 = a1 | s1\n 10829: t0 = u64 [sp + 0x40]\n 10832: s1 = u64 [sp + 0x8]\n 10835: a4 = s1 if a1 == 0\n 10838: a0 = a2 if a4 == 0\n 10841: u64 [sp + 0x30] = a0\n 10844: a5 = a3 if a4 == 0\n 10847: a0 = u64 [sp + 0x18]\n 10850: t2 = a0 if a4 == 0\n 10853: a0 = u64 [sp + 0x28]\n 10856: t1 = a0 if a4 == 0\n 10859: a0 = t1 >> 0x3b\n 10862: a1 = t2 << 0x5\n 10865: a0 = a0 | a1\n 10868: t1 = t1 << 0x5\n 10871: a0 = a0 + t0\n 10874: s1 = u64 [sp + 0x50]\n 10877: t1 = t1 + s1\n 10880: u64 [sp + 0x28] = t1\n 10883: a1 = t1 <u s1\n 10886: t1 = a0 + a1\n 10889: a3 = t1 ^ t0\n 10892: a4 = t1 <u t0\n 10895: a4 = a1 if a3 == 0\n 10898: a1 = t2 >> 0x3b\n 10901: a3 = a5 << 0x5\n 10904: a1 = a1 | a3\n 10907: a2 = a5 >> 0x3b\n 10910: t2 = u64 [sp + 0x30]\n 10913: t2 = t2 << 0x5\n 10916: a2 = t2 | a2\n 10919: a2 = a2 + ra\n 10922: a0 = u64 [sp + 0x48]\n 10925: a1 = a1 + a0\n 10928: a3 = a1 <u a0\n 10931: a2 = a2 + a3\n 10934: a4 = a4 + a1\n 10937: a1 = a4 <u a1\n 10940: a1 = a1 + a2\n 10943: a3 = u64 [sp + 0x28]\n 10946: a2 = a3 + 0x20\n 10949: u64 [sp + 0x30] = a2\n 10952: a2 = a2 <u a3\n 10955: a5 = a0\n 10957: a3 = s1\n 10959: a0 = t1 + a2\n 10962: u64 [sp + 0x28] = a0\n 10965: a0 = a0 <u t1\n 10968: a0 = a2 if a2 == 0\n 10971: a0 = a0 + a4\n 10974: u64 [sp + 0x20] = a0\n 10977: a0 = a0 <u a4\n 10980: a0 = a0 + a1\n 10983: u64 [sp + 0x18] = a0\n 10986: fallthrough\n      : @155 (gas: 6)\n 10987: a0 = a5 | ra\n 10990: a1 = u64 [sp + 0x38]\n 10993: a1 = a3 <u a1\n 10996: a1 = 0 if t0 != 0\n 10998: a1 = 0 if a0 != 0\n 11000: jump @162 if a1 == 0\n      : @156 (gas: 15)\n 11004: a0 = a3 + 0x20\n 11007: u64 [sp + 0x48] = a0\n 11010: a0 = a0 <u a3\n 11013: a1 = t0 + a0\n 11016: u64 [sp + 0x50] = a1\n 11019: s1 = a1 <u t0\n 11022: s1 = a0 if a0 == 0\n 11025: s1 = s1 + a5\n 11028: u64 [sp + 0x40] = s1\n 11031: a0 = s1 <u a5\n 11034: ra = ra + a0\n 11037: u64 [sp + 0x60] = ra\n 11040: i32 a0 = a3 + 0x20\n 11043: a1 = 0x20\n 11046: ra = 140, jump @0\n      : @157 [@dyn 70] (gas: 107)\n 11052: a1 = u8 [a0 + 0x1]\n 11055: a2 = u8 [a0]\n 11057: a3 = u8 [a0 + 0x2]\n 11060: a4 = u8 [a0 + 0x3]\n 11063: a1 = a1 << 0x8\n 11066: a1 = a1 | a2\n 11069: a3 = a3 << 0x10\n 11072: a4 = a4 << 0x18\n 11075: a3 = a3 | a4\n 11078: a1 = a1 | a3\n 11081: a2 = u8 [a0 + 0x5]\n 11084: a3 = u8 [a0 + 0x4]\n 11087: a4 = u8 [a0 + 0x6]\n 11090: a5 = u8 [a0 + 0x7]\n 11093: a2 = a2 << 0x8\n 11096: a2 = a2 | a3\n 11099: a4 = a4 << 0x10\n 11102: a5 = a5 << 0x18\n 11105: a4 = a4 | a5\n 11108: a2 = a2 | a4\n 11111: a2 = a2 << 0x20\n 11114: t0 = a2 | a1\n 11117: a2 = u8 [a0 + 0x9]\n 11120: a3 = u8 [a0 + 0x8]\n 11123: a4 = u8 [a0 + 0xa]\n 11126: a5 = u8 [a0 + 0xb]\n 11129: a2 = a2 << 0x8\n 11132: a2 = a2 | a3\n 11135: a4 = a4 << 0x10\n 11138: a5 = a5 << 0x18\n 11141: a4 = a4 | a5\n 11144: a2 = a2 | a4\n 11147: a3 = u8 [a0 + 0xd]\n 11150: a4 = u8 [a0 + 0xc]\n 11153: a5 = u8 [a0 + 0xe]\n 11156: a1 = u8 [a0 + 0xf]\n 11159: a3 = a3 << 0x8\n 11162: a3 = a3 | a4\n 11165: a5 = a5 << 0x10\n 11168: a1 = a1 << 0x18\n 11171: a1 = a1 | a5\n 11174: a1 = a1 | a3\n 11177: a1 = a1 << 0x20\n 11180: a2 = a2 | a1\n 11183: a1 = u8 [a0 + 0x11]\n 11186: a3 = u8 [a0 + 0x10]\n 11189: a4 = u8 [a0 + 0x12]\n 11192: a5 = u8 [a0 + 0x13]\n 11195: a1 = a1 << 0x8\n 11198: a1 = a1 | a3\n 11201: a4 = a4 << 0x10\n 11204: a5 = a5 << 0x18\n 11207: a4 = a4 | a5\n 11210: a1 = a1 | a4\n 11213: a3 = u8 [a0 + 0x15]\n 11216: a4 = u8 [a0 + 0x14]\n 11219: a5 = u8 [a0 + 0x16]\n 11222: s1 = u8 [a0 + 0x17]\n 11225: a3 = a3 << 0x8\n 11228: a3 = a3 | a4\n 11231: a5 = a5 << 0x10\n 11234: s1 = s1 << 0x18\n 11237: a5 = a5 | s1\n 11240: a3 = a3 | a5\n 11243: a3 = a3 << 0x20\n 11246: a3 = a3 | a1\n 11249: a1 = u8 [a0 + 0x19]\n 11252: a4 = u8 [a0 + 0x18]\n 11255: a5 = u8 [a0 + 0x1a]\n 11258: s1 = u8 [a0 + 0x1b]\n 11261: a1 = a1 << 0x8\n 11264: a1 = a1 | a4\n 11267: a5 = a5 << 0x10\n 11270: s1 = s1 << 0x18\n 11273: a5 = a5 | s1\n 11276: a1 = a1 | a5\n 11279: a4 = u8 [a0 + 0x1d]\n 11282: a5 = u8 [a0 + 0x1c]\n 11285: s1 = u8 [a0 + 0x1e]\n 11288: a0 = u8 [a0 + 0x1f]\n 11291: a4 = a4 << 0x8\n 11294: a4 = a4 | a5\n 11297: s1 = s1 << 0x10\n 11300: a0 = a0 << 0x18\n 11303: a0 = a0 | s1\n 11306: a0 = a0 | a4\n 11309: a0 = a0 << 0x20\n 11312: a0 = a0 | a1\n 11315: a4 = reverse a0\n 11317: a0 = reverse a3\n 11319: a1 = reverse a2\n 11321: a2 = reverse t0\n 11323: a3 = u64 [sp + 0x78]\n 11326: u64 [sp + 0x98] = a3\n 11330: a3 = u64 [sp + 0x68]\n 11333: u64 [sp + 0x90] = a3\n 11337: a3 = u64 [sp + 0x70]\n 11340: u64 [sp + 0x88] = a3\n 11344: s1 = u64 [sp + 0x58]\n 11347: u64 [sp + 0x80] = s1\n 11351: u64 [sp + 0xb8] = a2\n 11355: u64 [sp + 0xb0] = a1\n 11359: u64 [sp + 0xa8] = a0\n 11363: a0 = sp + 0xa0\n 11367: a1 = sp + 0x80\n 11371: u64 [sp + 0xa0] = a4\n 11375: ra = 142, jump @129\n      : @158 [@dyn 71] (gas: 33)\n 11381: ra = u64 [sp + 0x60]\n 11384: t2 = s1 + 0x80\n 11388: a2 = t2 <u s1\n 11391: a0 = u64 [sp + 0x70]\n 11394: a1 = a0 + a2\n 11397: a3 = a1 <u a0\n 11400: a3 = a2 if a2 == 0\n 11403: a0 = u64 [sp + 0x68]\n 11406: a2 = a0 + a3\n 11409: t0 = a2 <u a0\n 11412: a4 = u64 [sp + 0x20]\n 11415: a0 = u64 [sp + 0x40]\n 11418: a4 = a4 ^ a0\n 11421: a5 = u64 [sp + 0x30]\n 11424: a3 = u64 [sp + 0x48]\n 11427: a5 = a5 ^ a3\n 11430: t1 = a5 | a4\n 11433: a5 = u64 [sp + 0x18]\n 11436: a5 = ra ^ a5\n 11439: s1 = u64 [sp + 0x28]\n 11442: a4 = u64 [sp + 0x50]\n 11445: s1 = s1 ^ a4\n 11448: a5 = a5 | s1\n 11451: s1 = t1 | a5\n 11454: a5 = u64 [sp + 0x78]\n 11457: a5 = a5 + t0\n 11460: u64 [sp + 0x78] = a5\n 11463: t0 = a4\n 11465: a5 = a0\n 11467: u64 [sp + 0x58] = t2\n 11470: u64 [sp + 0x70] = a1\n 11473: u64 [sp + 0x68] = a2\n 11476: jump @155 if s1 != 0\n      : @159 (gas: 1)\n 11480: jump @161\n      : @160 (gas: 3)\n 11482: t2 = t0\n 11484: a1 = t1\n 11486: fallthrough\n      : @161 (gas: 12)\n 11487: a3 = u64 [sp + 0x10]\n 11490: u64 [a3] = t2\n 11492: u64 [a3 + 0x8] = a1\n 11495: u64 [a3 + 0x10] = a2\n 11498: a0 = u64 [sp + 0x78]\n 11501: u64 [a3 + 0x18] = a0\n 11504: sp = s0 + 0xffffffffffffff20\n 11508: ra = u64 [sp + 0xd8]\n 11512: s0 = u64 [sp + 0xd0]\n 11516: s1 = u64 [sp + 0xc8]\n 11520: sp = sp + 0xe0\n 11524: ret\n      : @162 (gas: 1)\n 11526: trap\n      : @163 (gas: 8)\n 11527: a0 = u64 [sp + 0xf0]\n 11531: a1 = u64 [sp + 0xf8]\n 11535: a2 = u64 [sp + 0xe8]\n 11539: a3 = u64 [sp + 0xe0]\n 11543: a1 = a1 | a2\n 11546: a0 = a0 | a3\n 11549: a0 = a0 | a1\n 11552: jump @171 if a0 != 0\n      : @164 (gas: 2)\n 11556: a0 = i32 [0x20004]\n 11561: jump @171 if a0 <=u 3\n      : @165 (gas: 52)\n 11566: u64 [sp + 184] = 0\n 11570: u64 [sp + 176] = 0\n 11574: u64 [sp + 168] = 0\n 11578: a0 = sp + 0xc0\n 11582: a1 = sp + 0xa0\n 11586: u64 [sp + 160] = 0\n 11590: ra = 0x90\n 11594: sp = sp + 0xfffffffffffffe40\n 11598: u64 [sp + 0x1b8] = ra\n 11602: u64 [sp + 0x1b0] = s0\n 11606: u64 [sp + 0x1a8] = s1\n 11610: s0 = sp + 0x1c0\n 11614: sp = sp & 0xffffffffffffffe0\n 11617: u64 [sp + 0x18] = a0\n 11620: a3 = u64 [a1 + 0x18]\n 11623: u64 [sp + 0x88] = a3\n 11627: a2 = u64 [a1 + 0x10]\n 11630: u64 [sp + 0x90] = a2\n 11634: a0 = u64 [a1 + 0x8]\n 11637: u64 [sp + 0x98] = a0\n 11641: s1 = u64 [a1]\n 11643: u64 [sp + 0x158] = a3\n 11647: u64 [sp + 0x150] = a2\n 11651: u64 [sp + 0x148] = a0\n 11655: u64 [sp + 0x140] = s1\n 11659: u64 [sp + 408] = 0\n 11663: u64 [sp + 400] = 0\n 11667: u64 [sp + 392] = 0\n 11671: u64 [sp + 384] = 0\n 11675: u32 [sp + 352] = 0x20\n 11680: i32 a1 = sp + 0x140\n 11684: i32 a3 = sp + 0x180\n 11688: i32 a4 = sp + 0x160\n 11692: a2 = 0xffffffffffffffff\n 11695: a0 = 0\n 11697: ecalli 7 // 'get_storage'\n 11699: a0 = u64 [sp + 0x198]\n 11703: u64 [sp + 0xb8] = a0\n 11707: a3 = u64 [sp + 0x190]\n 11711: u64 [sp + 0xa0] = a3\n 11715: a1 = u64 [sp + 0x188]\n 11719: u64 [sp + 0xb0] = a1\n 11723: a2 = u64 [sp + 0x180]\n 11727: u64 [sp + 0xa8] = a2\n 11731: u64 [sp + 0x118] = a0\n 11735: u64 [sp + 0x110] = a3\n 11739: u64 [sp + 0x108] = a1\n 11743: a0 = sp + 0x120\n 11747: a1 = sp + 0x100\n 11751: u64 [sp + 0x100] = a2\n 11755: ra = 0x15a\n 11759: jump @353\n      : @166 [@dyn 72] (gas: 11)\n 11762: a0 = u64 [sp + 0xc0]\n 11766: u64 [sp + 0x38] = a0\n 11769: a0 = u64 [sp + 0xc8]\n 11773: u64 [sp + 0x30] = a0\n 11776: a0 = u64 [sp + 0xd0]\n 11780: u64 [sp + 0x28] = a0\n 11783: a0 = u64 [sp + 0xd8]\n 11787: u64 [sp + 0x20] = a0\n 11790: a0 = 0x40\n 11793: a1 = 0x20\n 11796: ra = 146, jump @0\n      : @167 [@dyn 73] (gas: 111)\n 11802: a1 = u8 [a0 + 0x1]\n 11805: a2 = u8 [a0]\n 11807: a3 = u8 [a0 + 0x2]\n 11810: a4 = u8 [a0 + 0x3]\n 11813: a1 = a1 << 0x8\n 11816: a1 = a1 | a2\n 11819: a3 = a3 << 0x10\n 11822: a4 = a4 << 0x18\n 11825: a3 = a3 | a4\n 11828: a1 = a1 | a3\n 11831: a2 = u8 [a0 + 0x5]\n 11834: a3 = u8 [a0 + 0x4]\n 11837: a4 = u8 [a0 + 0x6]\n 11840: a5 = u8 [a0 + 0x7]\n 11843: a2 = a2 << 0x8\n 11846: a2 = a2 | a3\n 11849: a4 = a4 << 0x10\n 11852: a5 = a5 << 0x18\n 11855: a4 = a4 | a5\n 11858: a2 = a2 | a4\n 11861: a2 = a2 << 0x20\n 11864: t0 = a2 | a1\n 11867: a2 = u8 [a0 + 0x9]\n 11870: a3 = u8 [a0 + 0x8]\n 11873: a4 = u8 [a0 + 0xa]\n 11876: a5 = u8 [a0 + 0xb]\n 11879: a2 = a2 << 0x8\n 11882: a2 = a2 | a3\n 11885: a4 = a4 << 0x10\n 11888: a5 = a5 << 0x18\n 11891: a4 = a4 | a5\n 11894: a2 = a2 | a4\n 11897: a3 = u8 [a0 + 0xd]\n 11900: a4 = u8 [a0 + 0xc]\n 11903: a5 = u8 [a0 + 0xe]\n 11906: s1 = u8 [a0 + 0xf]\n 11909: a3 = a3 << 0x8\n 11912: a3 = a3 | a4\n 11915: a5 = a5 << 0x10\n 11918: s1 = s1 << 0x18\n 11921: a5 = a5 | s1\n 11924: a3 = a3 | a5\n 11927: a3 = a3 << 0x20\n 11930: a2 = a2 | a3\n 11933: a3 = u8 [a0 + 0x11]\n 11936: a4 = u8 [a0 + 0x10]\n 11939: a5 = u8 [a0 + 0x12]\n 11942: s1 = u8 [a0 + 0x13]\n 11945: a3 = a3 << 0x8\n 11948: a3 = a3 | a4\n 11951: a5 = a5 << 0x10\n 11954: s1 = s1 << 0x18\n 11957: a5 = a5 | s1\n 11960: a3 = a3 | a5\n 11963: a4 = u8 [a0 + 0x15]\n 11966: a5 = u8 [a0 + 0x14]\n 11969: s1 = u8 [a0 + 0x16]\n 11972: a1 = u8 [a0 + 0x17]\n 11975: a4 = a4 << 0x8\n 11978: a4 = a4 | a5\n 11981: s1 = s1 << 0x10\n 11984: a1 = a1 << 0x18\n 11987: a1 = a1 | s1\n 11990: a1 = a1 | a4\n 11993: a1 = a1 << 0x20\n 11996: a3 = a3 | a1\n 11999: a1 = u8 [a0 + 0x19]\n 12002: a4 = u8 [a0 + 0x18]\n 12005: a5 = u8 [a0 + 0x1a]\n 12008: s1 = u8 [a0 + 0x1b]\n 12011: a1 = a1 << 0x8\n 12014: a1 = a1 | a4\n 12017: a5 = a5 << 0x10\n 12020: s1 = s1 << 0x18\n 12023: a5 = a5 | s1\n 12026: a1 = a1 | a5\n 12029: a4 = u8 [a0 + 0x1d]\n 12032: a5 = u8 [a0 + 0x1c]\n 12035: s1 = u8 [a0 + 0x1e]\n 12038: a0 = u8 [a0 + 0x1f]\n 12041: a4 = a4 << 0x8\n 12044: a4 = a4 | a5\n 12047: s1 = s1 << 0x10\n 12050: a0 = a0 << 0x18\n 12053: a0 = a0 | s1\n 12056: a0 = a0 | a4\n 12059: a0 = a0 << 0x20\n 12062: a0 = a0 | a1\n 12065: a4 = reverse a0\n 12067: u64 [sp + 0x8] = a4\n 12070: a3 = reverse a3\n 12072: u64 [sp + 0x10] = a3\n 12075: a1 = reverse a2\n 12077: u64 [sp + 0x18] = a1\n 12080: s1 = reverse t0\n 12082: a0 = u64 [sp + 0x20]\n 12085: u64 [sp + 0x58] = a0\n 12088: a0 = u64 [sp + 0x28]\n 12091: u64 [sp + 0x50] = a0\n 12094: a0 = u64 [sp + 0x30]\n 12097: u64 [sp + 0x48] = a0\n 12100: a0 = u64 [sp + 0x38]\n 12103: u64 [sp + 0x40] = a0\n 12106: u64 [sp + 0x78] = s1\n 12109: u64 [sp + 0x70] = a1\n 12112: u64 [sp + 0x68] = a3\n 12115: a0 = sp + 0x80\n 12119: a1 = sp + 0x60\n 12122: a2 = sp + 0x40\n 12125: u64 [sp + 0x60] = a4\n 12128: ra = 148, jump @147\n      : @168 [@dyn 74] (gas: 12)\n 12134: a4 = u64 [sp + 0x10]\n 12137: a2 = u64 [sp + 0x8]\n 12140: u64 [sp + 0x38] = s1\n 12143: a0 = a4 | s1\n 12146: s1 = u64 [sp + 0x18]\n 12149: a1 = a2 | s1\n 12152: a1 = a1 | a0\n 12155: a1 = a1 >> 0x20\n 12158: a0 = a0 | s1\n 12161: a0 = a0 << 0x20\n 12164: a0 = a0 | a1\n 12167: jump @170 if a0 != 0\n      : @169 (gas: 29)\n 12170: a0 = u64 [sp + 0x88]\n 12174: a1 = u64 [sp + 0x98]\n 12178: u64 [sp + 0x30] = a1\n 12181: t1 = u64 [sp + 0x80]\n 12185: a1 = u64 [sp + 0x90]\n 12189: t2 = a0 ^ a4\n 12192: a5 = a0 <u a4\n 12195: ra = t1 <u a2\n 12198: a5 = ra if t2 == 0\n 12201: a3 = a1 - s1\n 12204: t2 = a3 - a5\n 12207: t0 = a3 <u a5\n 12210: a3 = a1 <u s1\n 12213: a1 = u64 [sp + 0x38]\n 12216: a5 = u64 [sp + 0x30]\n 12219: a5 = a5 - a1\n 12222: a5 = a5 - a3\n 12225: a5 = a5 - t0\n 12228: a0 = a0 - a4\n 12231: a0 = a0 - ra\n 12234: s1 = t1 - a2\n 12237: a0 = a0 | a5\n 12240: a1 = s1 | t2\n 12243: a1 = a1 | a0\n 12246: a0 = a0 | t2\n 12249: a1 = a1 >> 0x20\n 12252: a0 = a0 << 0x20\n 12255: a0 = a0 | a1\n 12258: jump @173 if a0 == 0\n      : @170 (gas: 1)\n 12261: trap\n      : @171 (gas: 3)\n 12262: a0 = 0\n 12264: a1 = 0\n 12266: ra = 150, jump @0\n      : @172 [@dyn 75] (gas: 5)\n 12272: i32 a1 = a0 + 0\n 12274: a0 = 0x1\n 12277: a2 = 0\n 12279: ecalli 12 // 'seal_return'\n 12281: fallthrough\n      : @173 (gas: 4)\n 12282: i32 a0 = a2 + 0\n 12284: i32 s1 = s1 + 0\n 12286: a1 = s1\n 12288: ra = 152, jump @0\n      : @174 [@dyn 76] (gas: 6)\n 12294: i32 a1 = a0 + 0\n 12296: a0 = 0\n 12298: a2 = s1\n 12300: ra = 0x9a\n 12304: ecalli 12 // 'seal_return'\n 12306: fallthrough\n      : @175 [@dyn 77] (gas: 52)\n 12307: sp = sp + 0xffffffffffffff80\n 12310: u64 [sp + 0x78] = ra\n 12313: u64 [sp + 0x70] = s0\n 12316: u64 [sp + 0x68] = s1\n 12319: s0 = sp + 0x80\n 12323: sp = sp & 0xffffffffffffffe0\n 12326: t2 = u64 [a1 + 0x10]\n 12329: a5 = u64 [a1 + 0x8]\n 12332: t0 = u64 [a2 + 0x8]\n 12335: s1 = u64 [a1]\n 12337: u64 [sp + 0x10] = s1\n 12340: a4 = u64 [a2]\n 12342: u64 [sp + 0x18] = a4\n 12345: ra = u64 [a2 + 0x10]\n 12348: a3 = t0 ^ a5\n 12351: u64 [sp + 0x38] = a3\n 12354: a3 = t0 <u a5\n 12357: a4 = a4 <u s1\n 12360: t1 = u64 [sp + 0x38]\n 12363: a3 = a4 if t1 == 0\n 12366: t1 = a4\n 12368: a1 = u64 [a1 + 0x18]\n 12371: u64 [sp + 0x38] = a1\n 12374: a1 = u64 [a2 + 0x18]\n 12377: u64 [sp + 0x20] = a1\n 12380: a1 = ra - t2\n 12383: a2 = a1 - a3\n 12386: u64 [sp + 0x28] = a2\n 12389: a2 = a1 <u a3\n 12392: u64 [sp + 0x30] = t2\n 12395: a3 = ra <u t2\n 12398: a1 = u64 [sp + 0x38]\n 12401: a4 = u64 [sp + 0x20]\n 12404: a1 = a4 - a1\n 12407: a1 = a1 - a3\n 12410: t2 = a1 - a2\n 12413: s1 = t0 - a5\n 12416: a2 = s1 - t1\n 12419: t0 = u64 [sp + 0x10]\n 12422: a1 = u64 [sp + 0x18]\n 12425: a3 = a1 - t0\n 12428: a4 = a2 >u 0\n 12430: a3 = a3 <u 0x20\n 12433: a3 = a3 ^ 0x1\n 12436: a3 = a4 if a2 != 0\n 12439: a2 = t2 >s 0\n 12441: a1 = u64 [sp + 0x28]\n 12444: a4 = a1 >u 0\n 12446: a4 = a2 if t2 != 0\n 12449: a1 = a1 | t2\n 12452: a3 = a4 if a1 != 0\n 12455: jump @179 if a3 == 0\n      : @176 (gas: 11)\n 12458: s1 = a0\n 12460: a2 = u64 [sp + 0x30]\n 12463: a0 = t0 | a2\n 12466: a1 = u64 [sp + 0x38]\n 12469: a1 = a1 | a5\n 12472: a0 = a0 | a1\n 12475: a0 = a0 >> 0x20\n 12478: a1 = a1 | a2\n 12481: a1 = a1 << 0x20\n 12484: a0 = a0 | a1\n 12487: jump @178 if a0 != 0\n      : @177 (gas: 17)\n 12490: i32 a1 = t0 + 0\n 12492: i32 a0 = sp + 0x40\n 12495: ecalli 3 // 'call_data_load'\n 12497: a0 = u64 [sp + 0x58]\n 12500: a1 = u64 [sp + 0x50]\n 12503: a2 = u64 [sp + 0x48]\n 12506: a3 = u64 [sp + 0x40]\n 12509: u64 [s1 + 0x18] = a0\n 12512: u64 [s1 + 0x10] = a1\n 12515: u64 [s1 + 0x8] = a2\n 12518: u64 [s1] = a3\n 12520: sp = s0 + 0xffffffffffffff80\n 12523: ra = u64 [sp + 0x78]\n 12526: s0 = u64 [sp + 0x70]\n 12529: s1 = u64 [sp + 0x68]\n 12532: sp = sp + 0x80\n 12536: ret\n      : @178 (gas: 1)\n 12538: trap\n      : @179 (gas: 3)\n 12539: a0 = 0\n 12541: a1 = 0\n 12543: ra = 156, jump @0\n      : @180 [@dyn 78] (gas: 6)\n 12549: i32 a1 = a0 + 0\n 12551: a0 = 0x1\n 12554: a2 = 0\n 12556: ra = 0x9e\n 12560: ecalli 12 // 'seal_return'\n 12562: fallthrough\n      : @181 [@dyn 79] (gas: 12)\n 12563: sp = sp + 0xffffffffffffff80\n 12566: u64 [sp + 0x78] = ra\n 12569: u64 [sp + 0x70] = s0\n 12572: s0 = sp + 0x80\n 12576: sp = sp & 0xffffffffffffffe0\n 12579: u64 [sp + 56] = 0\n 12582: u64 [sp + 48] = 0\n 12585: u64 [sp + 40] = 0\n 12588: u64 [sp + 32] = 0\n 12591: i32 a0 = sp + 0x20\n 12594: ecalli 15 // 'value_transferred'\n 12596: fallthrough\n      : @182 (gas: 8)\n 12597: a0 = u64 [sp + 0x30]\n 12600: a1 = u64 [sp + 0x38]\n 12603: a2 = u64 [sp + 0x28]\n 12606: a3 = u64 [sp + 0x20]\n 12609: a1 = a1 | a2\n 12612: a0 = a0 | a3\n 12615: a0 = a0 | a1\n 12618: jump @188 if a0 != 0\n      : @183 (gas: 2)\n 12622: a0 = i32 [0x20004]\n 12627: jump @188 if a0 <=u 35\n      : @184 (gas: 42)\n 12632: i32 a0 = sp + 0x40\n 12635: a1 = 0x4\n 12638: ecalli 3 // 'call_data_load'\n 12640: a1 = u64 [sp + 0x40]\n 12643: a0 = u64 [sp + 0x48]\n 12646: a2 = u64 [sp + 0x50]\n 12649: a3 = u64 [sp + 0x58]\n 12652: u64 [sp + 0x18] = a3\n 12655: u64 [sp + 0x10] = a2\n 12658: u64 [sp + 0x8] = a0\n 12661: a0 = sp\n 12663: u64 [sp] = a1\n 12665: ra = 0xa0\n 12669: sp = sp + 0xfffffffffffffa80\n 12673: u64 [sp + 0x578] = ra\n 12677: u64 [sp + 0x570] = s0\n 12681: u64 [sp + 0x568] = s1\n 12685: s0 = sp + 0x580\n 12689: sp = sp & 0xffffffffffffffe0\n 12692: a1 = u64 [a0]\n 12694: u64 [sp + 0xf0] = a1\n 12698: a1 = u64 [a0 + 0x8]\n 12701: u64 [sp + 0xe8] = a1\n 12705: a1 = u64 [a0 + 0x10]\n 12708: u64 [sp + 0xf8] = a1\n 12712: s1 = u64 [a0 + 0x18]\n 12715: u64 [sp + 1336] = 0\n 12719: u64 [sp + 1328] = 0\n 12723: u64 [sp + 1320] = 0\n 12727: u64 [sp + 1312] = 0\n 12731: u64 [sp + 1368] = 0\n 12735: u64 [sp + 1360] = 0\n 12739: u64 [sp + 1352] = 0\n 12743: u64 [sp + 1344] = 0\n 12747: u32 [sp + 1280] = 0x20\n 12752: i32 a1 = sp + 0x520\n 12756: i32 a3 = sp + 0x540\n 12760: i32 a4 = sp + 0x500\n 12764: a2 = 0xffffffffffffffff\n 12767: a0 = 0\n 12769: ecalli 7 // 'get_storage'\n 12771: jump @414\n      : @185 [@dyn 80] (gas: 3)\n 12774: a0 = 0x40\n 12777: a1 = 0x20\n 12780: ra = 162, jump @0\n      : @186 [@dyn 81] (gas: 100)\n 12786: a1 = u8 [a0 + 0x11]\n 12789: a2 = u8 [a0 + 0x10]\n 12792: a3 = u8 [a0 + 0x12]\n 12795: a4 = u8 [a0 + 0x13]\n 12798: a1 = a1 << 0x8\n 12801: a1 = a1 | a2\n 12804: a3 = a3 << 0x10\n 12807: a4 = a4 << 0x18\n 12810: a3 = a3 | a4\n 12813: a1 = a1 | a3\n 12816: a2 = u8 [a0 + 0x15]\n 12819: a3 = u8 [a0 + 0x14]\n 12822: a4 = u8 [a0 + 0x16]\n 12825: a5 = u8 [a0 + 0x17]\n 12828: a2 = a2 << 0x8\n 12831: a2 = a2 | a3\n 12834: a4 = a4 << 0x10\n 12837: a5 = a5 << 0x18\n 12840: a4 = a4 | a5\n 12843: a2 = a2 | a4\n 12846: a2 = a2 << 0x20\n 12849: t0 = a2 | a1\n 12852: a2 = u8 [a0 + 0x1]\n 12855: a3 = u8 [a0]\n 12857: a4 = u8 [a0 + 0x2]\n 12860: a5 = u8 [a0 + 0x3]\n 12863: a2 = a2 << 0x8\n 12866: a2 = a2 | a3\n 12869: a4 = a4 << 0x10\n 12872: a5 = a5 << 0x18\n 12875: a4 = a4 | a5\n 12878: a2 = a2 | a4\n 12881: a3 = u8 [a0 + 0x5]\n 12884: a4 = u8 [a0 + 0x4]\n 12887: a5 = u8 [a0 + 0x6]\n 12890: a1 = u8 [a0 + 0x7]\n 12893: a3 = a3 << 0x8\n 12896: a3 = a3 | a4\n 12899: a5 = a5 << 0x10\n 12902: a1 = a1 << 0x18\n 12905: a1 = a1 | a5\n 12908: a1 = a1 | a3\n 12911: a1 = a1 << 0x20\n 12914: t1 = a1 | a2\n 12917: a1 = u8 [a0 + 0x19]\n 12920: a3 = u8 [a0 + 0x18]\n 12923: a4 = u8 [a0 + 0x1a]\n 12926: a5 = u8 [a0 + 0x1b]\n 12929: a1 = a1 << 0x8\n 12932: a1 = a1 | a3\n 12935: a4 = a4 << 0x10\n 12938: a5 = a5 << 0x18\n 12941: a4 = a4 | a5\n 12944: a1 = a1 | a4\n 12947: a3 = u8 [a0 + 0x1d]\n 12950: a4 = u8 [a0 + 0x1c]\n 12953: a5 = u8 [a0 + 0x1e]\n 12956: a2 = u8 [a0 + 0x1f]\n 12959: a3 = a3 << 0x8\n 12962: a3 = a3 | a4\n 12965: a5 = a5 << 0x10\n 12968: a2 = a2 << 0x18\n 12971: a2 = a2 | a5\n 12974: a2 = a2 | a3\n 12977: a2 = a2 << 0x20\n 12980: a3 = a2 | a1\n 12983: a1 = u8 [a0 + 0x9]\n 12986: a2 = u8 [a0 + 0x8]\n 12989: a4 = u8 [a0 + 0xa]\n 12992: a5 = u8 [a0 + 0xb]\n 12995: a1 = a1 << 0x8\n 12998: a1 = a1 | a2\n 13001: a4 = a4 << 0x10\n 13004: a5 = a5 << 0x18\n 13007: a4 = a4 | a5\n 13010: a1 = a1 | a4\n 13013: a2 = u8 [a0 + 0xd]\n 13016: a4 = u8 [a0 + 0xc]\n 13019: a5 = u8 [a0 + 0xe]\n 13022: a0 = u8 [a0 + 0xf]\n 13025: a2 = a2 << 0x8\n 13028: a2 = a2 | a4\n 13031: a5 = a5 << 0x10\n 13034: a0 = a0 << 0x18\n 13037: a0 = a0 | a5\n 13040: a0 = a0 | a2\n 13043: a0 = a0 << 0x20\n 13046: a0 = a0 | a1\n 13049: a1 = reverse a0\n 13051: a0 = reverse a3\n 13053: a2 = reverse t1\n 13055: a3 = reverse t0\n 13057: a2 = a2 | a3\n 13060: a3 = a0 | a1\n 13063: a3 = a3 | a2\n 13066: a3 = a3 >> 0x20\n 13069: a1 = a1 | a2\n 13072: a1 = a1 << 0x20\n 13075: a1 = a1 | a3\n 13078: jump @190 if a1 == 0\n      : @187 (gas: 1)\n 13081: trap\n      : @188 (gas: 3)\n 13082: a0 = 0\n 13084: a1 = 0\n 13086: ra = 164, jump @0\n      : @189 [@dyn 82] (gas: 7)\n 13092: i32 a1 = a0 + 0\n 13094: a0 = 0x1\n 13097: a2 = 0\n 13099: ecalli 12 // 'seal_return'\n 13101: i32 a0 = a0 + 0\n 13103: ra = 0xa6\n 13107: jump @0\n      : @190 (gas: 2)\n 13110: i32 a0 = a0 + 0\n 13112: ra = 166, jump @0\n      : @191 [@dyn 83] (gas: 6)\n 13118: i32 a1 = a0 + 0\n 13120: a0 = 0\n 13122: a2 = 0\n 13124: ra = 0xa8\n 13128: ecalli 12 // 'seal_return'\n 13130: fallthrough\n      : @192 [@dyn 84] (gas: 13)\n 13131: sp = sp + 0xffffffffffffffb0\n 13134: u64 [sp + 0x48] = ra\n 13137: u64 [sp + 0x40] = s0\n 13140: s0 = sp + 0x50\n 13143: sp = sp & 0xfffffffffffffff0\n 13146: u64 [sp + 48] = 0\n 13149: u64 [sp + 40] = 0\n 13152: u64 [sp + 32] = 0\n 13155: a0 = 0x4e487b7100000000\n 13165: a1 = sp + 0x20\n 13168: u64 [sp + 0x38] = a0\n 13171: a0 = 0\n 13173: ra = 170, jump @8\n      : @193 [@dyn 85] (gas: 7)\n 13179: u64 [sp + 24] = 0\n 13182: u64 [sp + 16] = 0\n 13185: u64 [sp + 0] = 0x32\n 13188: a0 = 0x4\n 13191: a1 = sp\n 13193: u64 [sp + 8] = 0\n 13196: ra = 172, jump @8\n      : @194 [@dyn 86] (gas: 3)\n 13202: a1 = 0x24\n 13205: a0 = 0\n 13207: ra = 174, jump @0\n      : @195 [@dyn 87] (gas: 6)\n 13213: i32 a1 = a0 + 0\n 13215: a0 = 0x1\n 13218: a2 = 0x24\n 13221: ra = 0xb0\n 13225: ecalli 12 // 'seal_return'\n 13227: fallthrough\n      : @196 [@dyn 88] (gas: 40)\n 13228: sp = sp + 0xffffffffffffffa0\n 13231: u64 [sp + 0x58] = ra\n 13234: u64 [sp + 0x50] = s0\n 13237: u64 [sp + 0x48] = s1\n 13240: s0 = sp + 0x60\n 13243: sp = sp & 0xffffffffffffffe0\n 13246: s1 = a0\n 13248: a0 = u64 [a1 + 0x18]\n 13251: a2 = u64 [a1 + 0x10]\n 13254: a3 = u64 [a1 + 0x8]\n 13257: a1 = u64 [a1]\n 13259: u64 [sp + 0x18] = a0\n 13262: u64 [sp + 0x10] = a2\n 13265: u64 [sp + 0x8] = a3\n 13268: u64 [sp] = a1\n 13270: u64 [sp + 56] = 0\n 13273: u64 [sp + 48] = 0\n 13276: u64 [sp + 40] = 0\n 13279: u64 [sp + 32] = 0\n 13282: u32 [sp + 64] = 0x20\n 13286: i32 a1 = sp + 0\n 13288: i32 a3 = sp + 0x20\n 13291: i32 a4 = sp + 0x40\n 13294: a2 = 0xffffffffffffffff\n 13297: a0 = 0\n 13299: ecalli 7 // 'get_storage'\n 13301: a0 = u64 [sp + 0x38]\n 13304: a1 = u64 [sp + 0x30]\n 13307: a2 = u64 [sp + 0x28]\n 13310: a3 = u64 [sp + 0x20]\n 13313: u64 [s1 + 0x18] = a0\n 13316: u64 [s1 + 0x10] = a1\n 13319: u64 [s1 + 0x8] = a2\n 13322: u64 [s1] = a3\n 13324: sp = s0 + 0xffffffffffffffa0\n 13327: ra = u64 [sp + 0x58]\n 13330: s0 = u64 [sp + 0x50]\n 13333: s1 = u64 [sp + 0x48]\n 13336: sp = sp + 0x60\n 13339: ret\n      : @197 (gas: 38)\n 13341: sp = sp + 0xfffffffffffffee0\n 13345: u64 [sp + 0x118] = ra\n 13349: u64 [sp + 0x110] = s0\n 13353: u64 [sp + 0x108] = s1\n 13357: s0 = sp + 0x120\n 13361: sp = sp & 0xffffffffffffffe0\n 13364: u64 [sp + 0x40] = a0\n 13367: a0 = u64 [a2]\n 13369: u64 [sp + 0x50] = a0\n 13372: a0 = u64 [a2 + 0x8]\n 13375: u64 [sp + 0x58] = a0\n 13378: a0 = u64 [a2 + 0x10]\n 13381: u64 [sp + 0x48] = a0\n 13384: s1 = u64 [a2 + 0x18]\n 13387: a4 = u64 [a1 + 0x18]\n 13390: a3 = u64 [a1 + 0x10]\n 13393: a2 = u64 [a1 + 0x8]\n 13396: a0 = u64 [a1]\n 13398: u64 [sp + 0x18] = a4\n 13401: u64 [sp + 0xb8] = a4\n 13405: u64 [sp + 0x20] = a3\n 13408: u64 [sp + 0xb0] = a3\n 13412: u64 [sp + 0x28] = a2\n 13415: u64 [sp + 0xa8] = a2\n 13419: u64 [sp + 0x30] = a0\n 13422: u64 [sp + 0xa0] = a0\n 13426: u64 [sp + 248] = 0\n 13430: u64 [sp + 240] = 0\n 13434: u64 [sp + 232] = 0\n 13438: u64 [sp + 224] = 0\n 13442: u32 [sp + 192] = 0x20\n 13447: i32 a1 = sp + 0xa0\n 13451: i32 a3 = sp + 0xe0\n 13455: i32 a4 = sp + 0xc0\n 13459: a2 = 0xffffffffffffffff\n 13462: a0 = 0\n 13464: ecalli 7 // 'get_storage'\n 13466: fallthrough\n      : @198 (gas: 20)\n 13467: a0 = u64 [sp + 0xf8]\n 13471: t0 = u64 [sp + 0xe0]\n 13475: a2 = u64 [sp + 0xf0]\n 13479: a3 = u64 [sp + 0xe8]\n 13483: a4 = a0 ^ s1\n 13486: u64 [sp + 0x38] = s1\n 13489: a0 = s1 <u a0\n 13492: s1 = u64 [sp + 0x48]\n 13495: a5 = s1 <u a2\n 13498: a5 = a0 if a4 != 0\n 13501: a1 = u64 [sp + 0x58]\n 13504: a0 = a3 ^ a1\n 13507: a3 = a1 <u a3\n 13510: a1 = u64 [sp + 0x50]\n 13513: a1 = a1 <u t0\n 13516: a1 = a3 if a0 != 0\n 13519: a0 = a2 ^ s1\n 13522: a0 = a0 | a4\n 13525: a1 = a5 if a0 != 0\n 13528: jump @202 if a1 == 0\n      : @199 (gas: 3)\n 13532: a1 = 0x20\n 13535: a0 = 0\n 13537: ra = 178, jump @0\n      : @200 [@dyn 89] (gas: 71)\n 13543: a1 = u64 [sp + 0x18]\n 13546: a1 = reverse a1\n 13548: a2 = u64 [sp + 0x20]\n 13551: a2 = reverse a2\n 13553: a3 = u64 [sp + 0x28]\n 13556: a3 = reverse a3\n 13558: a4 = u64 [sp + 0x30]\n 13561: a4 = reverse a4\n 13563: a5 = a4 >> 0x38\n 13566: u8 [a0 + 0x1f] = a5\n 13569: a5 = a4 >> 0x30\n 13572: u8 [a0 + 0x1e] = a5\n 13575: a5 = a4 >> 0x28\n 13578: u8 [a0 + 0x1d] = a5\n 13581: a5 = a4 >> 0x20\n 13584: u8 [a0 + 0x1c] = a5\n 13587: a5 = a4 >> 0x18\n 13590: u8 [a0 + 0x1b] = a5\n 13593: a5 = a4 >> 0x10\n 13596: u8 [a0 + 0x1a] = a5\n 13599: a5 = a4 >> 0x8\n 13602: u8 [a0 + 0x19] = a5\n 13605: u8 [a0 + 0x18] = a4\n 13608: u8 [a0 + 0x10] = a3\n 13611: a4 = a3 >> 0x38\n 13614: u8 [a0 + 0x17] = a4\n 13617: a4 = a3 >> 0x30\n 13620: u8 [a0 + 0x16] = a4\n 13623: a4 = a3 >> 0x28\n 13626: u8 [a0 + 0x15] = a4\n 13629: a4 = a3 >> 0x20\n 13632: u8 [a0 + 0x14] = a4\n 13635: a4 = a3 >> 0x18\n 13638: u8 [a0 + 0x13] = a4\n 13641: a4 = a3 >> 0x10\n 13644: u8 [a0 + 0x12] = a4\n 13647: a3 = a3 >> 0x8\n 13650: u8 [a0 + 0x11] = a3\n 13653: u8 [a0 + 0x8] = a2\n 13656: a3 = a2 >> 0x38\n 13659: u8 [a0 + 0xf] = a3\n 13662: a3 = a2 >> 0x30\n 13665: u8 [a0 + 0xe] = a3\n 13668: a3 = a2 >> 0x28\n 13671: u8 [a0 + 0xd] = a3\n 13674: a3 = a2 >> 0x20\n 13677: u8 [a0 + 0xc] = a3\n 13680: a3 = a2 >> 0x18\n 13683: u8 [a0 + 0xb] = a3\n 13686: a3 = a2 >> 0x10\n 13689: u8 [a0 + 0xa] = a3\n 13692: a2 = a2 >> 0x8\n 13695: u8 [a0 + 0x9] = a2\n 13698: u8 [a0] = a1\n 13700: a2 = a1 >> 0x38\n 13703: u8 [a0 + 0x7] = a2\n 13706: a2 = a1 >> 0x30\n 13709: u8 [a0 + 0x6] = a2\n 13712: a2 = a1 >> 0x28\n 13715: u8 [a0 + 0x5] = a2\n 13718: a2 = a1 >> 0x20\n 13721: u8 [a0 + 0x4] = a2\n 13724: a2 = a1 >> 0x18\n 13727: u8 [a0 + 0x3] = a2\n 13730: a2 = a1 >> 0x10\n 13733: u8 [a0 + 0x2] = a2\n 13736: a1 = a1 >> 0x8\n 13739: u8 [a0 + 0x1] = a1\n 13742: a1 = 0x20\n 13745: a0 = 0\n 13747: ra = 180, jump @0\n      : @201 [@dyn 90] (gas: 55)\n 13753: i32 a0 = a0 + 0\n 13755: i32 a2 = sp + 0xe0\n 13759: a1 = 0x20\n 13762: ecalli 8 // 'hash_keccak_256'\n 13764: a0 = u64 [sp + 0xe0]\n 13768: a1 = u64 [sp + 0xe8]\n 13772: a2 = u64 [sp + 0xf8]\n 13776: a3 = u64 [sp + 0xf0]\n 13780: t0 = reverse a0\n 13782: a1 = reverse a1\n 13784: a2 = reverse a2\n 13786: a3 = reverse a3\n 13788: s1 = u64 [sp + 0x48]\n 13791: a4 = s1 >> 0x3e\n 13794: a5 = u64 [sp + 0x38]\n 13797: a5 = a5 << 0x2\n 13800: t1 = a5 | a4\n 13803: a5 = u64 [sp + 0x58]\n 13806: a4 = a5 >> 0x3e\n 13809: a0 = s1 << 0x2\n 13812: t2 = a0 | a4\n 13815: a4 = u64 [sp + 0x50]\n 13818: a0 = a4 >> 0x3e\n 13821: s1 = a5 << 0x2\n 13824: a5 = s1 | a0\n 13827: s1 = a4 << 0x2\n 13830: a5 = a5 + a3\n 13833: s1 = s1 + a2\n 13836: a2 = s1 <u a2\n 13839: a5 = a5 + a2\n 13842: a4 = a5 ^ a3\n 13845: a3 = a5 <u a3\n 13848: a3 = a2 if a4 == 0\n 13851: a0 = a1 + t2\n 13854: a3 = a3 + a0\n 13857: a2 = a3 <u a0\n 13860: t0 = t0 + t1\n 13863: a0 = a0 <u a1\n 13866: a0 = a0 + t0\n 13869: a0 = a0 + a2\n 13872: a1 = u64 [sp + 0x40]\n 13875: u64 [a1 + 56] = 0\n 13878: u64 [a1 + 48] = 0\n 13881: u64 [a1 + 40] = 0\n 13884: u64 [a1 + 32] = 0\n 13887: u64 [a1] = s1\n 13889: u64 [a1 + 0x8] = a5\n 13892: u64 [a1 + 0x10] = a3\n 13895: u64 [a1 + 0x18] = a0\n 13898: sp = s0 + 0xfffffffffffffee0\n 13902: ra = u64 [sp + 0x118]\n 13906: s0 = u64 [sp + 0x110]\n 13910: s1 = u64 [sp + 0x108]\n 13914: sp = sp + 0x120\n 13918: ret\n      : @202 (gas: 8)\n 13920: u64 [sp + 144] = 0\n 13924: u64 [sp + 136] = 0\n 13928: u64 [sp + 128] = 0\n 13932: a0 = 0x4e487b7100000000\n 13942: a1 = sp + 0x80\n 13946: u64 [sp + 0x98] = a0\n 13950: a0 = 0\n 13952: ra = 182, jump @8\n      : @203 [@dyn 91] (gas: 7)\n 13958: u64 [sp + 120] = 0\n 13961: u64 [sp + 112] = 0\n 13964: u64 [sp + 96] = 0x32\n 13968: a0 = 0x4\n 13971: a1 = sp + 0x60\n 13974: u64 [sp + 104] = 0\n 13977: ra = 184, jump @8\n      : @204 [@dyn 92] (gas: 3)\n 13983: a1 = 0x24\n 13986: a0 = 0\n 13988: ra = 186, jump @0\n      : @205 [@dyn 93] (gas: 6)\n 13994: i32 a1 = a0 + 0\n 13996: a0 = 0x1\n 13999: a2 = 0x24\n 14002: ra = 0xbc\n 14006: ecalli 12 // 'seal_return'\n 14008: fallthrough\n      : @206 [@dyn 94] (gas: 9)\n 14009: a2 = u64 [a1 + 0x18]\n 14012: a3 = u64 [a1 + 0x10]\n 14015: a4 = u64 [a1 + 0x8]\n 14018: a1 = u64 [a1]\n 14020: u64 [a0 + 0x18] = a2\n 14023: u64 [a0 + 0x10] = a3\n 14026: u64 [a0 + 0x8] = a4\n 14029: u64 [a0] = a1\n 14031: ret\n      : @207 (gas: 19)\n 14033: t1 = u64 [sp + 0x70]\n 14036: t0 = u64 [sp + 0x68]\n 14039: a0 = u64 [sp + 0x138]\n 14043: a1 = u64 [sp + 0x120]\n 14047: t2 = u64 [sp + 0x130]\n 14051: a3 = u64 [sp + 0x128]\n 14055: a4 = a0 ^ t0\n 14058: a0 = t0 <u a0\n 14061: a2 = u64 [sp + 0x78]\n 14064: a5 = a2 <u t2\n 14067: a5 = a0 if a4 != 0\n 14070: a0 = a3 ^ s1\n 14073: a3 = s1 <u a3\n 14076: a1 = t1 <u a1\n 14079: a1 = a3 if a0 != 0\n 14082: a0 = t2 ^ a2\n 14085: a0 = a0 | a4\n 14088: a1 = a5 if a0 != 0\n 14091: jump @210 if a1 == 0\n      : @208 (gas: 12)\n 14095: u64 [sp + 0x80] = t1\n 14099: u64 [sp + 184] = 0\n 14103: u64 [sp + 176] = 0\n 14107: u64 [sp + 168] = 0\n 14111: u64 [sp + 160] = 0\n 14115: u64 [sp + 0x88] = s1\n 14119: u64 [sp + 0x90] = a2\n 14123: a0 = sp + 0xc0\n 14127: a1 = sp + 0xa0\n 14131: a2 = sp + 0x80\n 14135: u64 [sp + 0x98] = t0\n 14139: ra = 190, jump @197\n      : @209 [@dyn 95] (gas: 157)\n 14145: a0 = u64 [sp + 0xd8]\n 14149: u64 [sp + 0x78] = a0\n 14152: a3 = u64 [sp + 0xd0]\n 14156: u64 [sp + 0x68] = a3\n 14159: a1 = u64 [sp + 0xc8]\n 14163: u64 [sp + 0x70] = a1\n 14166: s1 = u64 [sp + 0xc0]\n 14170: u64 [sp + 0x118] = a0\n 14174: u64 [sp + 0x110] = a3\n 14178: u64 [sp + 0x108] = a1\n 14182: u64 [sp + 0x100] = s1\n 14186: u64 [sp + 312] = 0\n 14190: u64 [sp + 304] = 0\n 14194: u64 [sp + 296] = 0\n 14198: u64 [sp + 288] = 0\n 14202: u32 [sp + 320] = 0x20\n 14207: i32 a1 = sp + 0x100\n 14211: i32 a3 = sp + 0x120\n 14215: i32 a4 = sp + 0x140\n 14219: a2 = 0xffffffffffffffff\n 14222: a0 = 0\n 14224: ecalli 7 // 'get_storage'\n 14226: a0 = s1 + 0x1\n 14229: a1 = a0 <u 0x1\n 14232: a2 = u64 [sp + 0x70]\n 14235: a1 = a1 + a2\n 14238: a2 = a0 | a1\n 14241: a2 = a2 <u 0x1\n 14244: a3 = u64 [sp + 0x68]\n 14247: a2 = a2 + a3\n 14250: a3 = a2 <u a3\n 14253: a4 = u64 [sp + 0x78]\n 14256: a3 = a3 + a4\n 14259: u64 [sp + 0x118] = a3\n 14263: u64 [sp + 0x110] = a2\n 14267: a2 = u64 [sp + 0x120]\n 14271: u64 [sp + 0x60] = a2\n 14274: u64 [sp + 0x108] = a1\n 14278: a1 = u64 [sp + 0x128]\n 14282: u64 [sp + 0x58] = a1\n 14285: u64 [sp + 0x100] = a0\n 14289: a0 = u32 [sp + 0x130]\n 14293: u64 [sp + 0x50] = a0\n 14296: u64 [sp + 312] = 0\n 14300: u64 [sp + 304] = 0\n 14304: u64 [sp + 296] = 0\n 14308: u64 [sp + 288] = 0\n 14312: u32 [sp + 320] = 0x20\n 14317: i32 a1 = sp + 0x100\n 14321: i32 a3 = sp + 0x120\n 14325: i32 a4 = sp + 0x140\n 14329: a2 = 0xffffffffffffffff\n 14332: a0 = 0\n 14334: ecalli 7 // 'get_storage'\n 14336: a0 = s1 + 0x2\n 14339: a1 = a0 <u s1\n 14342: a3 = u64 [sp + 0x70]\n 14345: a2 = a3 + a1\n 14348: a3 = a2 <u a3\n 14351: a3 = a1 if a1 == 0\n 14354: a1 = u64 [sp + 0x68]\n 14357: a3 = a3 + a1\n 14360: a1 = a3 <u a1\n 14363: a4 = u64 [sp + 0x78]\n 14366: a1 = a1 + a4\n 14369: u64 [sp + 0x118] = a1\n 14373: a1 = u64 [sp + 0x120]\n 14377: u64 [sp + 0x48] = a1\n 14380: u64 [sp + 0x110] = a3\n 14384: a1 = u64 [sp + 0x128]\n 14388: u64 [sp + 0x40] = a1\n 14391: u64 [sp + 0x108] = a2\n 14395: a1 = u64 [sp + 0x130]\n 14399: u64 [sp + 0x38] = a1\n 14402: u64 [sp + 0x100] = a0\n 14406: a0 = u64 [sp + 0x138]\n 14410: u64 [sp + 0x30] = a0\n 14413: u64 [sp + 312] = 0\n 14417: u64 [sp + 304] = 0\n 14421: u64 [sp + 296] = 0\n 14425: u64 [sp + 288] = 0\n 14429: u32 [sp + 320] = 0x20\n 14434: i32 a1 = sp + 0x100\n 14438: i32 a3 = sp + 0x120\n 14442: i32 a4 = sp + 0x140\n 14446: a2 = 0xffffffffffffffff\n 14449: a0 = 0\n 14451: ecalli 7 // 'get_storage'\n 14453: a0 = u64 [sp + 0x120]\n 14457: u64 [sp + 0x10] = a0\n 14460: a0 = u64 [sp + 0x128]\n 14464: u64 [sp + 0x20] = a0\n 14467: a0 = u64 [sp + 0x130]\n 14471: u64 [sp + 0x18] = a0\n 14474: a0 = u64 [sp + 0x138]\n 14478: u64 [sp + 0x8] = a0\n 14481: a0 = s1 + 0x3\n 14484: a1 = a0 <u s1\n 14487: a3 = u64 [sp + 0x70]\n 14490: a2 = a3 + a1\n 14493: a3 = a2 <u a3\n 14496: a3 = a1 if a1 == 0\n 14499: a1 = u64 [sp + 0x68]\n 14502: a3 = a3 + a1\n 14505: a1 = a3 <u a1\n 14508: a4 = u64 [sp + 0x78]\n 14511: a1 = a1 + a4\n 14514: u64 [sp + 0x118] = a1\n 14518: u64 [sp + 0x110] = a3\n 14522: u64 [sp + 0x108] = a2\n 14526: u64 [sp + 0x100] = a0\n 14530: u64 [sp + 312] = 0\n 14534: u64 [sp + 304] = 0\n 14538: u64 [sp + 296] = 0\n 14542: u64 [sp + 288] = 0\n 14546: u32 [sp + 320] = 0x20\n 14551: i32 a1 = sp + 0x100\n 14555: i32 a3 = sp + 0x120\n 14559: i32 a4 = sp + 0x140\n 14563: a2 = 0xffffffffffffffff\n 14566: a0 = 0\n 14568: ecalli 7 // 'get_storage'\n 14570: a0 = u8 [sp + 0x120]\n 14574: a1 = u64 [sp + 0x28]\n 14577: u64 [a1 + 0x60] = a0\n 14580: a0 = u64 [sp + 0x8]\n 14583: u64 [a1 + 0x58] = a0\n 14586: a0 = u64 [sp + 0x18]\n 14589: u64 [a1 + 0x50] = a0\n 14592: a0 = u64 [sp + 0x20]\n 14595: u64 [a1 + 0x48] = a0\n 14598: a0 = u64 [sp + 0x10]\n 14601: u64 [a1 + 0x40] = a0\n 14604: a0 = u64 [sp + 0x30]\n 14607: u64 [a1 + 0x38] = a0\n 14610: a0 = u64 [sp + 0x38]\n 14613: u64 [a1 + 0x30] = a0\n 14616: a0 = u64 [sp + 0x40]\n 14619: u64 [a1 + 0x28] = a0\n 14622: a0 = u64 [sp + 0x48]\n 14625: u64 [a1 + 0x20] = a0\n 14628: a0 = u64 [sp + 0x50]\n 14631: u64 [a1 + 0x10] = a0\n 14634: a0 = u64 [sp + 0x58]\n 14637: u64 [a1 + 0x8] = a0\n 14640: a0 = u64 [sp + 0x60]\n 14643: u64 [a1] = a0\n 14645: u64 [a1 + 120] = 0\n 14648: u64 [a1 + 112] = 0\n 14651: u64 [a1 + 104] = 0\n 14654: u64 [a1 + 24] = 0\n 14657: sp = s0 + 0xfffffffffffffea0\n 14661: ra = u64 [sp + 0x158]\n 14665: s0 = u64 [sp + 0x150]\n 14669: s1 = u64 [sp + 0x148]\n 14673: sp = sp + 0x160\n 14677: ret\n      : @210 (gas: 2)\n 14679: a0 = 0\n 14681: ra = 192, jump @0\n      : @211 [@dyn 96] (gas: 6)\n 14687: i32 a1 = a0 + 0\n 14689: a0 = 0x1\n 14692: a2 = 0\n 14694: ra = 0xc2\n 14698: ecalli 12 // 'seal_return'\n 14700: fallthrough\n      : @212 [@dyn 97] (gas: 21)\n 14701: sp = sp + 0xffffffffffffff50\n 14705: u64 [sp + 0xa8] = ra\n 14709: u64 [sp + 0xa0] = s0\n 14713: u64 [sp + 0x98] = s1\n 14717: s0 = u64 [a1 + 0x10]\n 14720: t0 = u64 [a1 + 0x18]\n 14723: s1 = u64 [a1 + 0x8]\n 14726: a1 = u64 [a1]\n 14728: u64 [sp + 0x88] = s1\n 14732: u64 [sp + 0x70] = t0\n 14735: t0 = s1 | t0\n 14738: u64 [sp + 0x90] = a1\n 14742: s1 = a1 | s0\n 14745: s1 = s1 | t0\n 14748: s1 = s1 >> 0x20\n 14751: u64 [sp + 0x78] = s0\n 14754: a1 = t0 | s0\n 14757: a1 = a1 << 0x20\n 14760: a1 = a1 | s1\n 14763: u64 [sp + 0x40] = a0\n 14766: jump @221 if a1 != 0\n      : @213 (gas: 34)\n 14770: a0 = u64 [a5 + 0x18]\n 14773: u64 [sp + 0x18] = a0\n 14776: a0 = u64 [a5 + 0x10]\n 14779: u64 [sp + 0x8] = a0\n 14782: a0 = u64 [a5 + 0x8]\n 14785: u64 [sp + 0x10] = a0\n 14788: a0 = u64 [a5]\n 14790: u64 [sp] = a0\n 14792: a0 = u64 [a4 + 0x18]\n 14795: u64 [sp + 0x20] = a0\n 14798: a0 = u64 [a4 + 0x10]\n 14801: u64 [sp + 0x28] = a0\n 14804: a0 = u64 [a4 + 0x8]\n 14807: u64 [sp + 0x30] = a0\n 14810: a0 = u64 [a4]\n 14812: u64 [sp + 0x38] = a0\n 14815: a0 = u64 [a3 + 0x18]\n 14818: u64 [sp + 0x50] = a0\n 14821: a0 = u64 [a3 + 0x10]\n 14824: u64 [sp + 0x58] = a0\n 14827: a0 = u64 [a3 + 0x8]\n 14830: u64 [sp + 0x60] = a0\n 14833: a0 = u64 [a2 + 0x10]\n 14836: a1 = u64 [a3]\n 14838: u64 [sp + 0x48] = a1\n 14841: s1 = u64 [a2 + 0x8]\n 14844: a1 = u64 [a2]\n 14846: u64 [sp + 0x68] = a1\n 14849: a0 = a0 << 0x20\n 14852: s0 = a0 >> 0x20\n 14855: a0 = i32 [sp + 0x90]\n 14859: a1 = 0x20\n 14862: u64 [sp + 0x80] = a0\n 14866: ra = 196, jump @0\n      : @214 [@dyn 98] (gas: 65)\n 14872: a1 = reverse s0\n 14874: a2 = reverse s1\n 14876: a3 = u64 [sp + 0x68]\n 14879: a3 = reverse a3\n 14881: a4 = a3 >> 0x38\n 14884: u8 [a0 + 0x1f] = a4\n 14887: a4 = a3 >> 0x30\n 14890: u8 [a0 + 0x1e] = a4\n 14893: a4 = a3 >> 0x28\n 14896: u8 [a0 + 0x1d] = a4\n 14899: a4 = a3 >> 0x20\n 14902: u8 [a0 + 0x1c] = a4\n 14905: a4 = a3 >> 0x18\n 14908: u8 [a0 + 0x1b] = a4\n 14911: a4 = a3 >> 0x10\n 14914: u8 [a0 + 0x1a] = a4\n 14917: a4 = a3 >> 0x8\n 14920: u8 [a0 + 0x19] = a4\n 14923: u8 [a0 + 0x18] = a3\n 14926: u8 [a0 + 0x10] = a2\n 14929: u8 [a0 + 11] = 0\n 14932: u8 [a0 + 10] = 0\n 14935: u8 [a0 + 9] = 0\n 14938: u8 [a0 + 7] = 0\n 14941: u8 [a0 + 6] = 0\n 14944: u8 [a0 + 5] = 0\n 14947: u8 [a0 + 4] = 0\n 14950: u8 [a0 + 3] = 0\n 14953: u8 [a0 + 2] = 0\n 14956: u8 [a0 + 1] = 0\n 14959: u8 [a0 + 0] = 0\n 14961: a3 = a2 >> 0x38\n 14964: u8 [a0 + 0x17] = a3\n 14967: a3 = a2 >> 0x30\n 14970: u8 [a0 + 0x16] = a3\n 14973: a3 = a2 >> 0x28\n 14976: u8 [a0 + 0x15] = a3\n 14979: a3 = a2 >> 0x20\n 14982: u8 [a0 + 0x14] = a3\n 14985: a3 = a2 >> 0x18\n 14988: u8 [a0 + 0x13] = a3\n 14991: a3 = a2 >> 0x10\n 14994: u8 [a0 + 0x12] = a3\n 14997: a2 = a2 >> 0x8\n 15000: u8 [a0 + 0x11] = a2\n 15003: u8 [a0 + 0x8] = a1\n 15006: a2 = a1 >> 0x38\n 15009: u8 [a0 + 0xf] = a2\n 15012: a2 = a1 >> 0x30\n 15015: u8 [a0 + 0xe] = a2\n 15018: a2 = a1 >> 0x28\n 15021: u8 [a0 + 0xd] = a2\n 15024: a1 = a1 >> 0x20\n 15027: a2 = u64 [sp + 0x78]\n 15030: a4 = u64 [sp + 0x70]\n 15033: a4 = a4 | a2\n 15036: s1 = 0x100000000\n 15046: a2 = 0xffffffe0\n 15056: a3 = u64 [sp + 0x90]\n 15060: a2 = a3 <u a2\n 15063: a3 = u64 [sp + 0x88]\n 15067: a2 = 0 if a3 != 0\n 15069: a2 = 0 if a4 != 0\n 15071: u8 [a0 + 0xc] = a1\n 15074: jump @221 if a2 == 0\n      : @215 (gas: 5)\n 15078: s0 = a4\n 15080: a0 = u64 [sp + 0x80]\n 15084: i32 a0 = a0 + 0x20\n 15087: a1 = 0x20\n 15090: ra = 198, jump @0\n      : @216 [@dyn 99] (gas: 75)\n 15096: a1 = u64 [sp + 0x50]\n 15099: a1 = reverse a1\n 15101: a2 = u64 [sp + 0x58]\n 15104: a2 = reverse a2\n 15106: a3 = u64 [sp + 0x60]\n 15109: a3 = reverse a3\n 15111: a4 = u64 [sp + 0x48]\n 15114: a4 = reverse a4\n 15116: a5 = a4 >> 0x38\n 15119: u8 [a0 + 0x1f] = a5\n 15122: a5 = a4 >> 0x30\n 15125: u8 [a0 + 0x1e] = a5\n 15128: a5 = a4 >> 0x28\n 15131: u8 [a0 + 0x1d] = a5\n 15134: a5 = a4 >> 0x20\n 15137: u8 [a0 + 0x1c] = a5\n 15140: a5 = a4 >> 0x18\n 15143: u8 [a0 + 0x1b] = a5\n 15146: a5 = a4 >> 0x10\n 15149: u8 [a0 + 0x1a] = a5\n 15152: a5 = a4 >> 0x8\n 15155: u8 [a0 + 0x19] = a5\n 15158: u8 [a0 + 0x18] = a4\n 15161: u8 [a0 + 0x10] = a3\n 15164: a4 = a3 >> 0x38\n 15167: u8 [a0 + 0x17] = a4\n 15170: a4 = a3 >> 0x30\n 15173: u8 [a0 + 0x16] = a4\n 15176: a4 = a3 >> 0x28\n 15179: u8 [a0 + 0x15] = a4\n 15182: a4 = a3 >> 0x20\n 15185: u8 [a0 + 0x14] = a4\n 15188: a4 = a3 >> 0x18\n 15191: u8 [a0 + 0x13] = a4\n 15194: a4 = a3 >> 0x10\n 15197: u8 [a0 + 0x12] = a4\n 15200: a3 = a3 >> 0x8\n 15203: u8 [a0 + 0x11] = a3\n 15206: u8 [a0 + 0x8] = a2\n 15209: a3 = a2 >> 0x38\n 15212: u8 [a0 + 0xf] = a3\n 15215: a3 = a2 >> 0x30\n 15218: u8 [a0 + 0xe] = a3\n 15221: a3 = a2 >> 0x28\n 15224: u8 [a0 + 0xd] = a3\n 15227: a3 = a2 >> 0x20\n 15230: u8 [a0 + 0xc] = a3\n 15233: a3 = a2 >> 0x18\n 15236: u8 [a0 + 0xb] = a3\n 15239: a3 = a2 >> 0x10\n 15242: u8 [a0 + 0xa] = a3\n 15245: a2 = a2 >> 0x8\n 15248: u8 [a0 + 0x9] = a2\n 15251: u8 [a0] = a1\n 15253: a2 = a1 >> 0x38\n 15256: u8 [a0 + 0x7] = a2\n 15259: a2 = a1 >> 0x30\n 15262: u8 [a0 + 0x6] = a2\n 15265: a2 = a1 >> 0x28\n 15268: u8 [a0 + 0x5] = a2\n 15271: a2 = a1 >> 0x20\n 15274: u8 [a0 + 0x4] = a2\n 15277: a2 = a1 >> 0x18\n 15280: u8 [a0 + 0x3] = a2\n 15283: a2 = a1 >> 0x10\n 15286: u8 [a0 + 0x2] = a2\n 15289: a1 = a1 >> 0x8\n 15292: a2 = s1 + 0xffffffffffffffc0\n 15295: a3 = u64 [sp + 0x90]\n 15299: a2 = a3 <u a2\n 15302: a3 = u64 [sp + 0x88]\n 15306: a2 = 0 if a3 != 0\n 15308: a2 = 0 if s0 != 0\n 15310: u8 [a0 + 0x1] = a1\n 15313: jump @221 if a2 == 0\n      : @217 (gas: 4)\n 15317: a0 = u64 [sp + 0x80]\n 15321: i32 a0 = a0 + 0x40\n 15324: a1 = 0x20\n 15327: ra = 200, jump @0\n      : @218 [@dyn 100] (gas: 75)\n 15333: a1 = u64 [sp + 0x20]\n 15336: a1 = reverse a1\n 15338: a2 = u64 [sp + 0x28]\n 15341: a2 = reverse a2\n 15343: a3 = u64 [sp + 0x30]\n 15346: a3 = reverse a3\n 15348: a4 = u64 [sp + 0x38]\n 15351: a4 = reverse a4\n 15353: a5 = a4 >> 0x38\n 15356: u8 [a0 + 0x1f] = a5\n 15359: a5 = a4 >> 0x30\n 15362: u8 [a0 + 0x1e] = a5\n 15365: a5 = a4 >> 0x28\n 15368: u8 [a0 + 0x1d] = a5\n 15371: a5 = a4 >> 0x20\n 15374: u8 [a0 + 0x1c] = a5\n 15377: a5 = a4 >> 0x18\n 15380: u8 [a0 + 0x1b] = a5\n 15383: a5 = a4 >> 0x10\n 15386: u8 [a0 + 0x1a] = a5\n 15389: a5 = a4 >> 0x8\n 15392: u8 [a0 + 0x19] = a5\n 15395: u8 [a0 + 0x18] = a4\n 15398: u8 [a0 + 0x10] = a3\n 15401: a4 = a3 >> 0x38\n 15404: u8 [a0 + 0x17] = a4\n 15407: a4 = a3 >> 0x30\n 15410: u8 [a0 + 0x16] = a4\n 15413: a4 = a3 >> 0x28\n 15416: u8 [a0 + 0x15] = a4\n 15419: a4 = a3 >> 0x20\n 15422: u8 [a0 + 0x14] = a4\n 15425: a4 = a3 >> 0x18\n 15428: u8 [a0 + 0x13] = a4\n 15431: a4 = a3 >> 0x10\n 15434: u8 [a0 + 0x12] = a4\n 15437: a3 = a3 >> 0x8\n 15440: u8 [a0 + 0x11] = a3\n 15443: u8 [a0 + 0x8] = a2\n 15446: a3 = a2 >> 0x38\n 15449: u8 [a0 + 0xf] = a3\n 15452: a3 = a2 >> 0x30\n 15455: u8 [a0 + 0xe] = a3\n 15458: a3 = a2 >> 0x28\n 15461: u8 [a0 + 0xd] = a3\n 15464: a3 = a2 >> 0x20\n 15467: u8 [a0 + 0xc] = a3\n 15470: a3 = a2 >> 0x18\n 15473: u8 [a0 + 0xb] = a3\n 15476: a3 = a2 >> 0x10\n 15479: u8 [a0 + 0xa] = a3\n 15482: a2 = a2 >> 0x8\n 15485: u8 [a0 + 0x9] = a2\n 15488: u8 [a0] = a1\n 15490: a2 = a1 >> 0x38\n 15493: u8 [a0 + 0x7] = a2\n 15496: a2 = a1 >> 0x30\n 15499: u8 [a0 + 0x6] = a2\n 15502: a2 = a1 >> 0x28\n 15505: u8 [a0 + 0x5] = a2\n 15508: a2 = a1 >> 0x20\n 15511: u8 [a0 + 0x4] = a2\n 15514: a2 = a1 >> 0x18\n 15517: u8 [a0 + 0x3] = a2\n 15520: a2 = a1 >> 0x10\n 15523: u8 [a0 + 0x2] = a2\n 15526: a1 = a1 >> 0x8\n 15529: a2 = 0xffffffa0\n 15539: a3 = u64 [sp + 0x90]\n 15543: a2 = a3 <u a2\n 15546: a3 = u64 [sp + 0x88]\n 15550: a2 = 0 if a3 != 0\n 15552: a2 = 0 if s0 != 0\n 15554: u8 [a0 + 0x1] = a1\n 15557: jump @221 if a2 == 0\n      : @219 (gas: 27)\n 15561: a0 = u64 [sp + 0x90]\n 15565: s1 = a0 + 0x80\n 15569: a0 = s1 <u a0\n 15572: a1 = u64 [sp + 0x88]\n 15576: a2 = a1 + a0\n 15579: u64 [sp + 0x90] = a2\n 15583: s0 = a2 <u a1\n 15586: s0 = a0 if a0 == 0\n 15589: a0 = u64 [sp + 0x78]\n 15592: s0 = s0 + a0\n 15595: a0 = s0 <u a0\n 15598: a1 = u64 [sp + 0x70]\n 15601: a0 = a0 + a1\n 15604: u64 [sp + 0x88] = a0\n 15608: a0 = u64 [sp + 0x8]\n 15611: a1 = u64 [sp]\n 15613: a0 = a0 | a1\n 15616: a1 = u64 [sp + 0x18]\n 15619: a2 = u64 [sp + 0x10]\n 15622: a1 = a1 | a2\n 15625: a0 = a0 | a1\n 15628: a0 = a0 >u 0\n 15630: u64 [sp + 0x78] = a0\n 15633: a0 = u64 [sp + 0x80]\n 15637: i32 a0 = a0 + 0x60\n 15640: a1 = 0x20\n 15643: ra = 202, jump @0\n      : @220 [@dyn 101] (gas: 45)\n 15649: u8 [a0 + 30] = 0\n 15652: u8 [a0 + 29] = 0\n 15655: u8 [a0 + 28] = 0\n 15658: u8 [a0 + 27] = 0\n 15661: u8 [a0 + 26] = 0\n 15664: u8 [a0 + 25] = 0\n 15667: u8 [a0 + 24] = 0\n 15670: u8 [a0 + 23] = 0\n 15673: u8 [a0 + 22] = 0\n 15676: u8 [a0 + 21] = 0\n 15679: u8 [a0 + 20] = 0\n 15682: u8 [a0 + 19] = 0\n 15685: u8 [a0 + 18] = 0\n 15688: u8 [a0 + 17] = 0\n 15691: u8 [a0 + 16] = 0\n 15694: u8 [a0 + 15] = 0\n 15697: u8 [a0 + 14] = 0\n 15700: u8 [a0 + 13] = 0\n 15703: u8 [a0 + 12] = 0\n 15706: u8 [a0 + 11] = 0\n 15709: u8 [a0 + 10] = 0\n 15712: u8 [a0 + 9] = 0\n 15715: u8 [a0 + 8] = 0\n 15718: u8 [a0 + 7] = 0\n 15721: u8 [a0 + 6] = 0\n 15724: u8 [a0 + 5] = 0\n 15727: u8 [a0 + 4] = 0\n 15730: u8 [a0 + 3] = 0\n 15733: u8 [a0 + 2] = 0\n 15736: u8 [a0 + 1] = 0\n 15739: u8 [a0 + 0] = 0\n 15741: a1 = u64 [sp + 0x78]\n 15744: u8 [a0 + 0x1f] = a1\n 15747: a0 = u64 [sp + 0x40]\n 15750: u64 [a0] = s1\n 15752: a1 = u64 [sp + 0x88]\n 15756: u64 [a0 + 0x18] = a1\n 15759: a1 = u64 [sp + 0x90]\n 15763: u64 [a0 + 0x8] = a1\n 15766: u64 [a0 + 0x10] = s0\n 15769: ra = u64 [sp + 0xa8]\n 15773: s0 = u64 [sp + 0xa0]\n 15777: s1 = u64 [sp + 0x98]\n 15781: sp = sp + 0xb0\n 15785: ret\n      : @221 (gas: 1)\n 15787: trap\n      : @222 (gas: 8)\n 15788: a0 = u64 [sp + 0x150]\n 15792: a1 = u64 [sp + 0x158]\n 15796: a2 = u64 [sp + 0x148]\n 15800: a3 = u64 [sp + 0x140]\n 15804: a1 = a1 | a2\n 15807: a0 = a0 | a3\n 15810: a0 = a0 | a1\n 15813: jump @234 if a0 != 0\n      : @223 (gas: 2)\n 15817: a0 = i32 [0x20004]\n 15822: jump @234 if a0 <=u 35\n      : @224 (gas: 44)\n 15827: i32 a0 = sp + 0x160\n 15831: a1 = 0x4\n 15834: ecalli 3 // 'call_data_load'\n 15836: a2 = u64 [sp + 0x160]\n 15840: a0 = u64 [sp + 0x168]\n 15844: a1 = u64 [sp + 0x170]\n 15848: a3 = u64 [sp + 0x178]\n 15852: u64 [sp + 0xb8] = a3\n 15856: u64 [sp + 0xb0] = a1\n 15860: u64 [sp + 0xa8] = a0\n 15864: a0 = sp + 0xc0\n 15868: a1 = sp + 0xa0\n 15872: u64 [sp + 0xa0] = a2\n 15876: ra = 0xcc\n 15880: sp = sp + 0xfffffffffffffea0\n 15884: u64 [sp + 0x158] = ra\n 15888: u64 [sp + 0x150] = s0\n 15892: u64 [sp + 0x148] = s1\n 15896: s0 = sp + 0x160\n 15900: sp = sp & 0xffffffffffffffe0\n 15903: u64 [sp + 0x28] = a0\n 15906: a0 = u64 [a1]\n 15908: u64 [sp + 0x70] = a0\n 15911: s1 = u64 [a1 + 0x8]\n 15914: a0 = u64 [a1 + 0x10]\n 15917: u64 [sp + 0x78] = a0\n 15920: a0 = u64 [a1 + 0x18]\n 15923: u64 [sp + 0x68] = a0\n 15926: u64 [sp + 280] = 0\n 15930: u64 [sp + 272] = 0\n 15934: u64 [sp + 264] = 0\n 15938: u64 [sp + 256] = 0\n 15942: u64 [sp + 312] = 0\n 15946: u64 [sp + 304] = 0\n 15950: u64 [sp + 296] = 0\n 15954: u64 [sp + 288] = 0\n 15958: u32 [sp + 320] = 0x20\n 15963: i32 a1 = sp + 0x100\n 15967: i32 a3 = sp + 0x120\n 15971: i32 a4 = sp + 0x140\n 15975: a2 = 0xffffffffffffffff\n 15978: a0 = 0\n 15980: ecalli 7 // 'get_storage'\n 15982: jump @207\n      : @225 [@dyn 102] (gas: 33)\n 15985: a0 = u64 [sp + 0x138]\n 15989: u64 [sp + 0x30] = a0\n 15992: a0 = u64 [sp + 0x130]\n 15996: u64 [sp + 0x20] = a0\n 15999: a0 = u64 [sp + 0x128]\n 16003: u64 [sp + 0x28] = a0\n 16006: a0 = u64 [sp + 0x120]\n 16010: u64 [sp + 0x18] = a0\n 16013: a0 = u64 [sp + 0x118]\n 16017: u64 [sp + 0x38] = a0\n 16020: a0 = u64 [sp + 0x110]\n 16024: u64 [sp + 0x40] = a0\n 16027: a0 = u64 [sp + 0x108]\n 16031: u64 [sp + 0x48] = a0\n 16034: a0 = u64 [sp + 0x100]\n 16038: u64 [sp + 0x50] = a0\n 16041: a0 = u64 [sp + 0xf8]\n 16045: u64 [sp + 0x58] = a0\n 16048: a0 = u64 [sp + 0xf0]\n 16052: u64 [sp + 0x60] = a0\n 16055: a0 = u64 [sp + 0xe8]\n 16059: u64 [sp + 0x68] = a0\n 16062: a0 = u64 [sp + 0xe0]\n 16066: u64 [sp + 0x70] = a0\n 16069: a0 = u64 [sp + 0xd0]\n 16073: u64 [sp + 0x88] = a0\n 16077: a0 = u64 [sp + 0xc8]\n 16081: u64 [sp + 0x90] = a0\n 16085: a0 = u64 [sp + 0xc0]\n 16089: u64 [sp + 0x98] = a0\n 16093: a0 = 0x40\n 16096: a1 = 0x20\n 16099: ra = 206, jump @0\n      : @226 [@dyn 103] (gas: 100)\n 16105: a1 = u8 [a0 + 0x11]\n 16108: a2 = u8 [a0 + 0x10]\n 16111: a3 = u8 [a0 + 0x12]\n 16114: a4 = u8 [a0 + 0x13]\n 16117: a1 = a1 << 0x8\n 16120: a1 = a1 | a2\n 16123: a3 = a3 << 0x10\n 16126: a4 = a4 << 0x18\n 16129: a3 = a3 | a4\n 16132: a1 = a1 | a3\n 16135: a2 = u8 [a0 + 0x15]\n 16138: a3 = u8 [a0 + 0x14]\n 16141: a4 = u8 [a0 + 0x16]\n 16144: a5 = u8 [a0 + 0x17]\n 16147: a2 = a2 << 0x8\n 16150: a2 = a2 | a3\n 16153: a4 = a4 << 0x10\n 16156: a5 = a5 << 0x18\n 16159: a4 = a4 | a5\n 16162: a2 = a2 | a4\n 16165: a2 = a2 << 0x20\n 16168: t0 = a2 | a1\n 16171: a2 = u8 [a0 + 0x1]\n 16174: a3 = u8 [a0]\n 16176: a4 = u8 [a0 + 0x2]\n 16179: a5 = u8 [a0 + 0x3]\n 16182: a2 = a2 << 0x8\n 16185: a2 = a2 | a3\n 16188: a4 = a4 << 0x10\n 16191: a5 = a5 << 0x18\n 16194: a4 = a4 | a5\n 16197: a2 = a2 | a4\n 16200: a3 = u8 [a0 + 0x5]\n 16203: a4 = u8 [a0 + 0x4]\n 16206: a5 = u8 [a0 + 0x6]\n 16209: s1 = u8 [a0 + 0x7]\n 16212: a3 = a3 << 0x8\n 16215: a3 = a3 | a4\n 16218: a5 = a5 << 0x10\n 16221: s1 = s1 << 0x18\n 16224: a5 = a5 | s1\n 16227: a3 = a3 | a5\n 16230: a3 = a3 << 0x20\n 16233: a2 = a2 | a3\n 16236: a3 = u8 [a0 + 0x19]\n 16239: a4 = u8 [a0 + 0x18]\n 16242: a5 = u8 [a0 + 0x1a]\n 16245: s1 = u8 [a0 + 0x1b]\n 16248: a3 = a3 << 0x8\n 16251: a3 = a3 | a4\n 16254: a5 = a5 << 0x10\n 16257: s1 = s1 << 0x18\n 16260: a5 = a5 | s1\n 16263: a3 = a3 | a5\n 16266: a4 = u8 [a0 + 0x1d]\n 16269: a5 = u8 [a0 + 0x1c]\n 16272: s1 = u8 [a0 + 0x1e]\n 16275: a1 = u8 [a0 + 0x1f]\n 16278: a4 = a4 << 0x8\n 16281: a4 = a4 | a5\n 16284: s1 = s1 << 0x10\n 16287: a1 = a1 << 0x18\n 16290: a1 = a1 | s1\n 16293: a1 = a1 | a4\n 16296: a1 = a1 << 0x20\n 16299: a3 = a3 | a1\n 16302: a1 = u8 [a0 + 0x9]\n 16305: a4 = u8 [a0 + 0x8]\n 16308: a5 = u8 [a0 + 0xa]\n 16311: s1 = u8 [a0 + 0xb]\n 16314: a1 = a1 << 0x8\n 16317: a1 = a1 | a4\n 16320: a5 = a5 << 0x10\n 16323: s1 = s1 << 0x18\n 16326: a5 = a5 | s1\n 16329: a1 = a1 | a5\n 16332: a4 = u8 [a0 + 0xd]\n 16335: a5 = u8 [a0 + 0xc]\n 16338: s1 = u8 [a0 + 0xe]\n 16341: a0 = u8 [a0 + 0xf]\n 16344: a4 = a4 << 0x8\n 16347: a4 = a4 | a5\n 16350: s1 = s1 << 0x10\n 16353: a0 = a0 << 0x18\n 16356: a0 = a0 | s1\n 16359: a0 = a0 | a4\n 16362: a0 = a0 << 0x20\n 16365: a0 = a0 | a1\n 16368: s1 = reverse a0\n 16370: a3 = reverse a3\n 16372: a4 = reverse a2\n 16374: a2 = reverse t0\n 16376: a0 = a2 | a4\n 16379: a1 = a3 | s1\n 16382: a1 = a1 | a0\n 16385: a1 = a1 >> 0x20\n 16388: a0 = a0 | s1\n 16391: a0 = a0 << 0x20\n 16394: a0 = a0 | a1\n 16397: jump @233 if a0 != 0\n      : @227 (gas: 11)\n 16401: a0 = u64 [sp + 0x88]\n 16405: a0 = a0 << 0x20\n 16408: a0 = a0 >> 0x20\n 16411: u64 [sp + 0x10] = a0\n 16414: i32 a0 = a3 + 0\n 16416: a1 = 0x20\n 16419: u64 [sp + 0x8] = a0\n 16422: u64 [sp + 0x80] = a3\n 16426: u64 [sp + 0x78] = a2\n 16429: u64 [sp + 0x88] = a4\n 16433: ra = 208, jump @0\n      : @228 [@dyn 104] (gas: 66)\n 16439: a1 = u64 [sp + 0x10]\n 16442: a1 = reverse a1\n 16444: a2 = u64 [sp + 0x90]\n 16448: a2 = reverse a2\n 16450: a3 = u64 [sp + 0x98]\n 16454: a3 = reverse a3\n 16456: a4 = a3 >> 0x38\n 16459: u8 [a0 + 0x1f] = a4\n 16462: a4 = a3 >> 0x30\n 16465: u8 [a0 + 0x1e] = a4\n 16468: a4 = a3 >> 0x28\n 16471: u8 [a0 + 0x1d] = a4\n 16474: a4 = a3 >> 0x20\n 16477: u8 [a0 + 0x1c] = a4\n 16480: a4 = a3 >> 0x18\n 16483: u8 [a0 + 0x1b] = a4\n 16486: a4 = a3 >> 0x10\n 16489: u8 [a0 + 0x1a] = a4\n 16492: a4 = a3 >> 0x8\n 16495: u8 [a0 + 0x19] = a4\n 16498: u8 [a0 + 0x18] = a3\n 16501: u8 [a0 + 0x10] = a2\n 16504: u8 [a0 + 11] = 0\n 16507: u8 [a0 + 10] = 0\n 16510: u8 [a0 + 9] = 0\n 16513: u8 [a0 + 7] = 0\n 16516: u8 [a0 + 6] = 0\n 16519: u8 [a0 + 5] = 0\n 16522: u8 [a0 + 4] = 0\n 16525: u8 [a0 + 3] = 0\n 16528: u8 [a0 + 2] = 0\n 16531: u8 [a0 + 1] = 0\n 16534: u8 [a0 + 0] = 0\n 16536: a3 = a2 >> 0x38\n 16539: u8 [a0 + 0x17] = a3\n 16542: a3 = a2 >> 0x30\n 16545: u8 [a0 + 0x16] = a3\n 16548: a3 = a2 >> 0x28\n 16551: u8 [a0 + 0x15] = a3\n 16554: a3 = a2 >> 0x20\n 16557: u8 [a0 + 0x14] = a3\n 16560: a3 = a2 >> 0x18\n 16563: u8 [a0 + 0x13] = a3\n 16566: a3 = a2 >> 0x10\n 16569: u8 [a0 + 0x12] = a3\n 16572: a2 = a2 >> 0x8\n 16575: u8 [a0 + 0x11] = a2\n 16578: u8 [a0 + 0x8] = a1\n 16581: a2 = a1 >> 0x38\n 16584: u8 [a0 + 0xf] = a2\n 16587: a2 = a1 >> 0x30\n 16590: u8 [a0 + 0xe] = a2\n 16593: a2 = a1 >> 0x28\n 16596: u8 [a0 + 0xd] = a2\n 16599: a1 = a1 >> 0x20\n 16602: a2 = u64 [sp + 0x88]\n 16606: s1 = s1 | a2\n 16609: a4 = 0x100000000\n 16619: a2 = 0xffffffe0\n 16629: a3 = u64 [sp + 0x80]\n 16633: a2 = a3 <u a2\n 16636: a3 = u64 [sp + 0x78]\n 16639: a2 = 0 if a3 != 0\n 16641: a2 = 0 if s1 != 0\n 16643: u8 [a0 + 0xc] = a1\n 16646: jump @233 if a2 == 0\n      : @229 (gas: 5)\n 16650: a0 = u64 [sp + 0x8]\n 16653: i32 a0 = a0 + 0x20\n 16656: a1 = 0x20\n 16659: u64 [sp + 0x98] = a4\n 16663: ra = 210, jump @0\n      : @230 [@dyn 105] (gas: 76)\n 16669: a1 = u64 [sp + 0x58]\n 16672: a1 = reverse a1\n 16674: a2 = u64 [sp + 0x60]\n 16677: a2 = reverse a2\n 16679: a3 = u64 [sp + 0x68]\n 16682: a3 = reverse a3\n 16684: a4 = u64 [sp + 0x70]\n 16687: a4 = reverse a4\n 16689: a5 = a4 >> 0x38\n 16692: u8 [a0 + 0x1f] = a5\n 16695: a5 = a4 >> 0x30\n 16698: u8 [a0 + 0x1e] = a5\n 16701: a5 = a4 >> 0x28\n 16704: u8 [a0 + 0x1d] = a5\n 16707: a5 = a4 >> 0x20\n 16710: u8 [a0 + 0x1c] = a5\n 16713: a5 = a4 >> 0x18\n 16716: u8 [a0 + 0x1b] = a5\n 16719: a5 = a4 >> 0x10\n 16722: u8 [a0 + 0x1a] = a5\n 16725: a5 = a4 >> 0x8\n 16728: u8 [a0 + 0x19] = a5\n 16731: u8 [a0 + 0x18] = a4\n 16734: u8 [a0 + 0x10] = a3\n 16737: a4 = a3 >> 0x38\n 16740: u8 [a0 + 0x17] = a4\n 16743: a4 = a3 >> 0x30\n 16746: u8 [a0 + 0x16] = a4\n 16749: a4 = a3 >> 0x28\n 16752: u8 [a0 + 0x15] = a4\n 16755: a4 = a3 >> 0x20\n 16758: u8 [a0 + 0x14] = a4\n 16761: a4 = a3 >> 0x18\n 16764: u8 [a0 + 0x13] = a4\n 16767: a4 = a3 >> 0x10\n 16770: u8 [a0 + 0x12] = a4\n 16773: a4 = u64 [sp + 0x78]\n 16776: a3 = a3 >> 0x8\n 16779: u8 [a0 + 0x11] = a3\n 16782: u8 [a0 + 0x8] = a2\n 16785: a3 = a2 >> 0x38\n 16788: u8 [a0 + 0xf] = a3\n 16791: a3 = a2 >> 0x30\n 16794: u8 [a0 + 0xe] = a3\n 16797: a3 = a2 >> 0x28\n 16800: u8 [a0 + 0xd] = a3\n 16803: a3 = a2 >> 0x20\n 16806: u8 [a0 + 0xc] = a3\n 16809: a3 = a2 >> 0x18\n 16812: u8 [a0 + 0xb] = a3\n 16815: a3 = a2 >> 0x10\n 16818: u8 [a0 + 0xa] = a3\n 16821: a3 = u64 [sp + 0x80]\n 16825: a2 = a2 >> 0x8\n 16828: u8 [a0 + 0x9] = a2\n 16831: u8 [a0] = a1\n 16833: a2 = a1 >> 0x38\n 16836: u8 [a0 + 0x7] = a2\n 16839: a2 = a1 >> 0x30\n 16842: u8 [a0 + 0x6] = a2\n 16845: a2 = a1 >> 0x28\n 16848: u8 [a0 + 0x5] = a2\n 16851: a2 = a1 >> 0x20\n 16854: u8 [a0 + 0x4] = a2\n 16857: a2 = a1 >> 0x18\n 16860: u8 [a0 + 0x3] = a2\n 16863: a2 = a1 >> 0x10\n 16866: u8 [a0 + 0x2] = a2\n 16869: a1 = a1 >> 0x8\n 16872: a2 = u64 [sp + 0x98]\n 16876: a2 = a2 + 0xffffffffffffffc0\n 16879: a2 = a3 <u a2\n 16882: a2 = 0 if a4 != 0\n 16884: a2 = 0 if s1 != 0\n 16886: u8 [a0 + 0x1] = a1\n 16889: jump @233 if a2 == 0\n      : @231 (gas: 6)\n 16893: a5 = s1\n 16895: s1 = u64 [sp + 0x8]\n 16898: i32 a0 = s1 + 0x40\n 16901: a1 = 0x20\n 16904: u64 [sp + 0x98] = a5\n 16908: ra = 212, jump @0\n      : @232 [@dyn 106] (gas: 76)\n 16914: a1 = u64 [sp + 0x38]\n 16917: a1 = reverse a1\n 16919: a2 = u64 [sp + 0x40]\n 16922: a2 = reverse a2\n 16924: a3 = u64 [sp + 0x48]\n 16927: a3 = reverse a3\n 16929: a4 = u64 [sp + 0x50]\n 16932: a4 = reverse a4\n 16934: a5 = a4 >> 0x38\n 16937: u8 [a0 + 0x1f] = a5\n 16940: a5 = a4 >> 0x30\n 16943: u8 [a0 + 0x1e] = a5\n 16946: a5 = a4 >> 0x28\n 16949: u8 [a0 + 0x1d] = a5\n 16952: a5 = a4 >> 0x20\n 16955: u8 [a0 + 0x1c] = a5\n 16958: a5 = a4 >> 0x18\n 16961: u8 [a0 + 0x1b] = a5\n 16964: a5 = a4 >> 0x10\n 16967: u8 [a0 + 0x1a] = a5\n 16970: a5 = a4 >> 0x8\n 16973: u8 [a0 + 0x19] = a5\n 16976: u8 [a0 + 0x18] = a4\n 16979: u8 [a0 + 0x10] = a3\n 16982: a4 = a3 >> 0x38\n 16985: u8 [a0 + 0x17] = a4\n 16988: a4 = a3 >> 0x30\n 16991: u8 [a0 + 0x16] = a4\n 16994: a4 = a3 >> 0x28\n 16997: u8 [a0 + 0x15] = a4\n 17000: a4 = a3 >> 0x20\n 17003: u8 [a0 + 0x14] = a4\n 17006: a4 = a3 >> 0x18\n 17009: u8 [a0 + 0x13] = a4\n 17012: a4 = a3 >> 0x10\n 17015: u8 [a0 + 0x12] = a4\n 17018: a3 = a3 >> 0x8\n 17021: u8 [a0 + 0x11] = a3\n 17024: u8 [a0 + 0x8] = a2\n 17027: a3 = a2 >> 0x38\n 17030: u8 [a0 + 0xf] = a3\n 17033: a3 = a2 >> 0x30\n 17036: u8 [a0 + 0xe] = a3\n 17039: a3 = a2 >> 0x28\n 17042: u8 [a0 + 0xd] = a3\n 17045: a3 = a2 >> 0x20\n 17048: u8 [a0 + 0xc] = a3\n 17051: a3 = a2 >> 0x18\n 17054: u8 [a0 + 0xb] = a3\n 17057: a3 = a2 >> 0x10\n 17060: u8 [a0 + 0xa] = a3\n 17063: a2 = a2 >> 0x8\n 17066: u8 [a0 + 0x9] = a2\n 17069: u8 [a0] = a1\n 17071: a2 = a1 >> 0x38\n 17074: u8 [a0 + 0x7] = a2\n 17077: a2 = a1 >> 0x30\n 17080: u8 [a0 + 0x6] = a2\n 17083: a2 = a1 >> 0x28\n 17086: u8 [a0 + 0x5] = a2\n 17089: a2 = a1 >> 0x20\n 17092: u8 [a0 + 0x4] = a2\n 17095: a2 = a1 >> 0x18\n 17098: u8 [a0 + 0x3] = a2\n 17101: a2 = a1 >> 0x10\n 17104: u8 [a0 + 0x2] = a2\n 17107: a1 = a1 >> 0x8\n 17110: a2 = 0xffffffa0\n 17120: a3 = u64 [sp + 0x80]\n 17124: a2 = a3 <u a2\n 17127: a3 = u64 [sp + 0x78]\n 17130: a2 = 0 if a3 != 0\n 17132: a3 = u64 [sp + 0x98]\n 17136: a2 = 0 if a3 != 0\n 17138: u8 [a0 + 0x1] = a1\n 17141: jump @236 if a2 != 0\n      : @233 (gas: 1)\n 17144: trap\n      : @234 (gas: 3)\n 17145: a0 = 0\n 17147: a1 = 0\n 17149: ra = 214, jump @0\n      : @235 [@dyn 107] (gas: 5)\n 17155: i32 a1 = a0 + 0\n 17157: a0 = 0x1\n 17160: a2 = 0\n 17162: ecalli 12 // 'seal_return'\n 17164: fallthrough\n      : @236 (gas: 12)\n 17165: a0 = u64 [sp + 0x20]\n 17168: a1 = u64 [sp + 0x18]\n 17171: a0 = a0 | a1\n 17174: a1 = u64 [sp + 0x30]\n 17177: a2 = u64 [sp + 0x28]\n 17180: a1 = a1 | a2\n 17183: a0 = a0 | a1\n 17186: a0 = a0 >u 0\n 17188: u64 [sp + 0x98] = a0\n 17192: i32 a0 = s1 + 0x60\n 17195: a1 = 0x20\n 17198: ra = 216, jump @0\n      : @237 [@dyn 108] (gas: 36)\n 17204: u8 [a0 + 30] = 0\n 17207: u8 [a0 + 29] = 0\n 17210: u8 [a0 + 28] = 0\n 17213: u8 [a0 + 27] = 0\n 17216: u8 [a0 + 26] = 0\n 17219: u8 [a0 + 25] = 0\n 17222: u8 [a0 + 24] = 0\n 17225: u8 [a0 + 23] = 0\n 17228: u8 [a0 + 22] = 0\n 17231: u8 [a0 + 21] = 0\n 17234: u8 [a0 + 20] = 0\n 17237: u8 [a0 + 19] = 0\n 17240: u8 [a0 + 18] = 0\n 17243: u8 [a0 + 17] = 0\n 17246: u8 [a0 + 16] = 0\n 17249: u8 [a0 + 15] = 0\n 17252: u8 [a0 + 14] = 0\n 17255: u8 [a0 + 13] = 0\n 17258: u8 [a0 + 12] = 0\n 17261: u8 [a0 + 11] = 0\n 17264: u8 [a0 + 10] = 0\n 17267: u8 [a0 + 9] = 0\n 17270: u8 [a0 + 8] = 0\n 17273: u8 [a0 + 7] = 0\n 17276: u8 [a0 + 6] = 0\n 17279: u8 [a0 + 5] = 0\n 17282: u8 [a0 + 4] = 0\n 17285: u8 [a0 + 3] = 0\n 17288: u8 [a0 + 2] = 0\n 17291: u8 [a0 + 1] = 0\n 17294: u8 [a0 + 0] = 0\n 17296: a1 = u64 [sp + 0x98]\n 17300: u8 [a0 + 0x1f] = a1\n 17303: a1 = 0x80\n 17307: a0 = s1\n 17309: ra = 218, jump @0\n      : @238 [@dyn 109] (gas: 6)\n 17315: i32 a1 = a0 + 0\n 17317: a2 = 0x80\n 17321: a0 = 0\n 17323: ra = 0xdc\n 17327: ecalli 12 // 'seal_return'\n 17329: fallthrough\n      : @239 [@dyn 110] (gas: 9)\n 17330: a2 = u64 [a1 + 0x18]\n 17333: a3 = u64 [a1 + 0x10]\n 17336: a4 = u64 [a1 + 0x8]\n 17339: a1 = u64 [a1]\n 17341: u64 [a0 + 0x18] = a2\n 17344: u64 [a0 + 0x10] = a3\n 17347: u64 [a0 + 0x8] = a4\n 17350: u64 [a0] = a1\n 17352: ret\n      : @240 (gas: 17)\n 17354: sp = sp + 0xffffffffffffffa0\n 17357: u64 [sp + 0x58] = ra\n 17360: u64 [sp + 0x50] = s0\n 17363: u64 [sp + 0x48] = s1\n 17366: a3 = u64 [a1 + 0x18]\n 17369: a4 = u64 [a1 + 0x10]\n 17372: a5 = u64 [a1 + 0x8]\n 17375: s1 = u64 [a1]\n 17377: a1 = a5 | a3\n 17380: a2 = s1 | a4\n 17383: a2 = a2 | a1\n 17386: a2 = a2 >> 0x20\n 17389: a1 = a1 | a4\n 17392: a1 = a1 << 0x20\n 17395: a1 = a1 | a2\n 17398: u64 [sp + 0x28] = a0\n 17401: jump @247 if a1 != 0\n      : @241 (gas: 19)\n 17405: a0 = s1 + 0x20\n 17408: u64 [sp + 0x30] = a0\n 17411: a0 = a0 <u s1\n 17414: a1 = a5 + a0\n 17417: u64 [sp + 0x40] = a1\n 17420: u64 [sp + 0x8] = a5\n 17423: s0 = a1 <u a5\n 17426: s0 = a0 if a0 == 0\n 17429: s0 = s0 + a4\n 17432: u64 [sp + 0x10] = a4\n 17435: a0 = s0 <u a4\n 17438: u64 [sp + 0x18] = a3\n 17441: a0 = a0 + a3\n 17444: u64 [sp + 0x38] = a0\n 17447: u64 [sp] = s1\n 17449: i32 a0 = s1 + 0\n 17451: a1 = 0x20\n 17454: s1 = 0x20\n 17457: ra = 222, jump @0\n      : @242 [@dyn 111] (gas: 45)\n 17463: u8 [a0 + 0x1f] = s1\n 17466: a1 = u64 [sp + 0x30]\n 17469: s1 = a1\n 17471: a1 = a1 | s0\n 17474: a2 = u64 [sp + 0x40]\n 17477: a4 = u64 [sp + 0x38]\n 17480: a2 = a2 | a4\n 17483: a1 = a1 | a2\n 17486: a1 = a1 >> 0x20\n 17489: u64 [sp + 0x20] = s0\n 17492: a2 = a2 | s0\n 17495: a2 = a2 << 0x20\n 17498: a1 = a1 | a2\n 17501: u8 [a0 + 30] = 0\n 17504: u8 [a0 + 29] = 0\n 17507: u8 [a0 + 28] = 0\n 17510: u8 [a0 + 27] = 0\n 17513: u8 [a0 + 26] = 0\n 17516: u8 [a0 + 25] = 0\n 17519: u8 [a0 + 24] = 0\n 17522: u8 [a0 + 23] = 0\n 17525: u8 [a0 + 22] = 0\n 17528: u8 [a0 + 21] = 0\n 17531: u8 [a0 + 20] = 0\n 17534: u8 [a0 + 19] = 0\n 17537: u8 [a0 + 18] = 0\n 17540: u8 [a0 + 17] = 0\n 17543: u8 [a0 + 16] = 0\n 17546: u8 [a0 + 15] = 0\n 17549: u8 [a0 + 14] = 0\n 17552: u8 [a0 + 13] = 0\n 17555: u8 [a0 + 12] = 0\n 17558: u8 [a0 + 11] = 0\n 17561: u8 [a0 + 10] = 0\n 17564: u8 [a0 + 9] = 0\n 17567: u8 [a0 + 8] = 0\n 17570: u8 [a0 + 7] = 0\n 17573: u8 [a0 + 6] = 0\n 17576: u8 [a0 + 5] = 0\n 17579: u8 [a0 + 4] = 0\n 17582: u8 [a0 + 3] = 0\n 17585: u8 [a0 + 2] = 0\n 17588: u8 [a0 + 1] = 0\n 17591: u8 [a0 + 0] = 0\n 17593: jump @247 if a1 != 0\n      : @243 (gas: 4)\n 17597: i32 s0 = s1 + 0\n 17599: a1 = 0x20\n 17602: a0 = s0\n 17604: ra = 224, jump @0\n      : @244 [@dyn 112] (gas: 41)\n 17610: u8 [a0 + 31] = 0xf\n 17614: u8 [a0 + 30] = 0\n 17617: u8 [a0 + 29] = 0\n 17620: u8 [a0 + 28] = 0\n 17623: u8 [a0 + 27] = 0\n 17626: u8 [a0 + 26] = 0\n 17629: u8 [a0 + 25] = 0\n 17632: u8 [a0 + 24] = 0\n 17635: u8 [a0 + 23] = 0\n 17638: u8 [a0 + 22] = 0\n 17641: u8 [a0 + 21] = 0\n 17644: u8 [a0 + 20] = 0\n 17647: u8 [a0 + 19] = 0\n 17650: u8 [a0 + 18] = 0\n 17653: u8 [a0 + 17] = 0\n 17656: u8 [a0 + 16] = 0\n 17659: u8 [a0 + 15] = 0\n 17662: u8 [a0 + 14] = 0\n 17665: u8 [a0 + 13] = 0\n 17668: u8 [a0 + 12] = 0\n 17671: u8 [a0 + 11] = 0\n 17674: u8 [a0 + 10] = 0\n 17677: u8 [a0 + 9] = 0\n 17680: u8 [a0 + 8] = 0\n 17683: u8 [a0 + 7] = 0\n 17686: u8 [a0 + 6] = 0\n 17689: u8 [a0 + 5] = 0\n 17692: u8 [a0 + 4] = 0\n 17695: u8 [a0 + 3] = 0\n 17698: u8 [a0 + 2] = 0\n 17701: u8 [a0 + 1] = 0\n 17704: a1 = u64 [sp + 0x20]\n 17707: a2 = u64 [sp + 0x38]\n 17710: a1 = a1 | a2\n 17713: a2 = 0xffffffe0\n 17723: a2 = s1 <u a2\n 17726: a3 = u64 [sp + 0x40]\n 17729: a2 = 0 if a3 != 0\n 17731: a2 = 0 if a1 != 0\n 17733: u8 [a0 + 0] = 0\n 17735: jump @247 if a2 == 0\n      : @245 (gas: 3)\n 17739: i32 a0 = s0 + 0x20\n 17742: a1 = 0x20\n 17745: ra = 226, jump @0\n      : @246 [@dyn 113] (gas: 55)\n 17751: u8 [a0 + 31] = 0\n 17754: u8 [a0 + 30] = 0\n 17757: u8 [a0 + 29] = 0\n 17760: u8 [a0 + 28] = 0\n 17763: u8 [a0 + 27] = 0\n 17766: u8 [a0 + 26] = 0\n 17769: u8 [a0 + 25] = 0\n 17772: u8 [a0 + 24] = 0\n 17775: u8 [a0 + 23] = 0\n 17778: u8 [a0 + 22] = 0\n 17781: u8 [a0 + 21] = 0\n 17784: u8 [a0 + 20] = 0\n 17787: u8 [a0 + 19] = 0\n 17790: u8 [a0 + 18] = 0\n 17793: u8 [a0 + 17] = 0\n 17796: u8 [a0 + 16] = 0\n 17799: u8 [a0 + 15] = 0\n 17802: u8 [a0 + 14] = 0x44\n 17806: u8 [a0 + 13] = 0x49\n 17810: a5 = 0x20\n 17813: u8 [a0 + 0xc] = a5\n 17816: u8 [a0 + 11] = 0x64\n 17820: u8 [a0 + 10] = 0x72\n 17824: u8 [a0 + 9] = 0x61\n 17828: u8 [a0 + 8] = 0x63\n 17832: u8 [a0 + 0x7] = a5\n 17835: u8 [a0 + 6] = 0x64\n 17839: u8 [a0 + 5] = 0x69\n 17843: u8 [a0 + 4] = 0x6c\n 17847: u8 [a0 + 3] = 0x61\n 17851: u8 [a0 + 2] = 0x76\n 17855: u8 [a0 + 1] = 0x6e\n 17859: u8 [a0 + 0] = 0x49\n 17862: a1 = u64 [sp]\n 17864: a0 = a1 + 0x60\n 17867: a1 = a0 <u a1\n 17870: a3 = u64 [sp + 0x8]\n 17873: a2 = a3 + a1\n 17876: a3 = a2 <u a3\n 17879: a3 = a1 if a1 == 0\n 17882: a1 = u64 [sp + 0x10]\n 17885: a3 = a3 + a1\n 17888: a1 = a3 <u a1\n 17891: a4 = u64 [sp + 0x18]\n 17894: a1 = a1 + a4\n 17897: a4 = u64 [sp + 0x28]\n 17900: u64 [a4] = a0\n 17902: u64 [a4 + 0x8] = a2\n 17905: u64 [a4 + 0x10] = a3\n 17908: u64 [a4 + 0x18] = a1\n 17911: ra = u64 [sp + 0x58]\n 17914: s0 = u64 [sp + 0x50]\n 17917: s1 = u64 [sp + 0x48]\n 17920: sp = sp + 0x60\n 17923: ret\n      : @247 (gas: 1)\n 17925: trap\n      : @248 (gas: 9)\n 17926: sp = sp + 0xffffffffffffffc0\n 17929: u64 [sp + 0x38] = ra\n 17932: u64 [sp + 0x30] = s0\n 17935: u64 [sp + 0x28] = s1\n 17938: s0 = sp + 0x40\n 17941: sp = sp & 0xffffffffffffffe0\n 17944: a0 = 0x40\n 17947: a1 = 0x20\n 17950: ra = 228, jump @0\n      : @249 [@dyn 114] (gas: 97)\n 17956: a1 = u8 [a0 + 0x11]\n 17959: a2 = u8 [a0 + 0x10]\n 17962: a3 = u8 [a0 + 0x12]\n 17965: a4 = u8 [a0 + 0x13]\n 17968: a1 = a1 << 0x8\n 17971: a1 = a1 | a2\n 17974: a3 = a3 << 0x10\n 17977: a4 = a4 << 0x18\n 17980: a3 = a3 | a4\n 17983: a1 = a1 | a3\n 17986: a2 = u8 [a0 + 0x15]\n 17989: a3 = u8 [a0 + 0x14]\n 17992: a4 = u8 [a0 + 0x16]\n 17995: a5 = u8 [a0 + 0x17]\n 17998: a2 = a2 << 0x8\n 18001: a2 = a2 | a3\n 18004: a4 = a4 << 0x10\n 18007: a5 = a5 << 0x18\n 18010: a4 = a4 | a5\n 18013: a2 = a2 | a4\n 18016: a2 = a2 << 0x20\n 18019: t0 = a2 | a1\n 18022: a2 = u8 [a0 + 0x1]\n 18025: a3 = u8 [a0]\n 18027: a4 = u8 [a0 + 0x2]\n 18030: a5 = u8 [a0 + 0x3]\n 18033: a2 = a2 << 0x8\n 18036: a2 = a2 | a3\n 18039: a4 = a4 << 0x10\n 18042: a5 = a5 << 0x18\n 18045: a4 = a4 | a5\n 18048: a2 = a2 | a4\n 18051: a3 = u8 [a0 + 0x5]\n 18054: a4 = u8 [a0 + 0x4]\n 18057: a5 = u8 [a0 + 0x6]\n 18060: s1 = u8 [a0 + 0x7]\n 18063: a3 = a3 << 0x8\n 18066: a3 = a3 | a4\n 18069: a5 = a5 << 0x10\n 18072: s1 = s1 << 0x18\n 18075: a5 = a5 | s1\n 18078: a3 = a3 | a5\n 18081: a3 = a3 << 0x20\n 18084: a2 = a2 | a3\n 18087: a3 = u8 [a0 + 0x19]\n 18090: a4 = u8 [a0 + 0x18]\n 18093: a5 = u8 [a0 + 0x1a]\n 18096: s1 = u8 [a0 + 0x1b]\n 18099: a3 = a3 << 0x8\n 18102: a3 = a3 | a4\n 18105: a5 = a5 << 0x10\n 18108: s1 = s1 << 0x18\n 18111: a5 = a5 | s1\n 18114: a3 = a3 | a5\n 18117: a4 = u8 [a0 + 0x1d]\n 18120: a5 = u8 [a0 + 0x1c]\n 18123: s1 = u8 [a0 + 0x1e]\n 18126: a1 = u8 [a0 + 0x1f]\n 18129: a4 = a4 << 0x8\n 18132: a4 = a4 | a5\n 18135: s1 = s1 << 0x10\n 18138: a1 = a1 << 0x18\n 18141: a1 = a1 | s1\n 18144: a1 = a1 | a4\n 18147: a1 = a1 << 0x20\n 18150: a3 = a3 | a1\n 18153: a1 = u8 [a0 + 0x9]\n 18156: a4 = u8 [a0 + 0x8]\n 18159: a5 = u8 [a0 + 0xa]\n 18162: s1 = u8 [a0 + 0xb]\n 18165: a1 = a1 << 0x8\n 18168: a1 = a1 | a4\n 18171: a5 = a5 << 0x10\n 18174: s1 = s1 << 0x18\n 18177: a5 = a5 | s1\n 18180: a1 = a1 | a5\n 18183: a4 = u8 [a0 + 0xd]\n 18186: a5 = u8 [a0 + 0xc]\n 18189: s1 = u8 [a0 + 0xe]\n 18192: a0 = u8 [a0 + 0xf]\n 18195: a4 = a4 << 0x8\n 18198: a4 = a4 | a5\n 18201: s1 = s1 << 0x10\n 18204: a0 = a0 << 0x18\n 18207: a0 = a0 | s1\n 18210: a0 = a0 | a4\n 18213: a0 = a0 << 0x20\n 18216: a0 = a0 | a1\n 18219: s1 = reverse a0\n 18221: a0 = reverse a3\n 18223: u64 [sp + 0x8] = a0\n 18226: a0 = reverse a2\n 18228: u64 [sp + 0x18] = a0\n 18231: a0 = reverse t0\n 18233: u64 [sp + 0x10] = a0\n 18236: ecalli 11 // 'return_data_size'\n 18238: fallthrough\n      : @250 (gas: 11)\n 18239: a3 = u64 [sp + 0x8]\n 18242: a1 = u64 [sp + 0x18]\n 18245: a2 = u64 [sp + 0x10]\n 18248: a1 = a1 | a2\n 18251: a2 = a3 | s1\n 18254: a2 = a2 | a1\n 18257: a2 = a2 >> 0x20\n 18260: a1 = a1 | s1\n 18263: a1 = a1 << 0x20\n 18266: a1 = a1 | a2\n 18269: jump @257 if a1 != 0\n      : @251 (gas: 3)\n 18272: s1 = a0\n 18274: a0 = a0 >> 0x20\n 18277: jump @257 if a0 != 0\n      : @252 (gas: 5)\n 18280: i32 a0 = a3 + 0\n 18282: i32 a1 = s1 + 0\n 18284: u64 [sp + 0x18] = a1\n 18287: u64 [sp + 0x10] = a0\n 18290: ra = 230, jump @0\n      : @253 [@dyn 115] (gas: 6)\n 18296: u32 [sp + 0x20] = s1\n 18299: i32 a0 = a0 + 0\n 18301: i32 a1 = sp + 0x20\n 18304: a2 = 0\n 18306: ecalli 10 // 'return_data_copy'\n 18308: fallthrough\n      : @254 (gas: 3)\n 18309: a0 = i32 [sp + 0x20]\n 18312: a1 = u64 [sp + 0x18]\n 18315: jump @257 if a0 <u a1\n      : @255 (gas: 2)\n 18318: ecalli 11 // 'return_data_size'\n 18320: fallthrough\n      : @256 (gas: 2)\n 18321: a1 = a0 >> 0x20\n 18324: jump @258 if a1 == 0\n      : @257 (gas: 1)\n 18327: trap\n      : @258 (gas: 4)\n 18328: i32 s1 = a0 + 0\n 18330: a0 = u64 [sp + 0x10]\n 18333: a1 = s1\n 18335: ra = 232, jump @0\n      : @259 [@dyn 116] (gas: 6)\n 18341: i32 a1 = a0 + 0\n 18343: a0 = 0x1\n 18346: a2 = s1\n 18348: ra = 0xea\n 18352: ecalli 12 // 'seal_return'\n 18354: fallthrough\n      : @260 [@dyn 117] (gas: 12)\n 18355: a1 = u64 [a0 + 0x10]\n 18358: a2 = u64 [a0 + 0x18]\n 18361: a3 = u64 [a0 + 0x8]\n 18364: a0 = u64 [a0]\n 18366: a2 = a2 | a3\n 18369: a3 = a0 | a1\n 18372: a3 = a3 | a2\n 18375: a3 = a3 >> 0x20\n 18378: a1 = a1 | a2\n 18381: a1 = a1 << 0x20\n 18384: a1 = a1 | a3\n 18387: jump @263 if a1 != 0\n      : @261 (gas: 7)\n 18391: sp = sp + 0xfffffffffffffff0\n 18394: u64 [sp + 0x8] = ra\n 18397: u64 [sp] = s0\n 18399: i32 a0 = a0 + 0\n 18401: a1 = 0x20\n 18404: s0 = 0x20\n 18407: ra = 236, jump @0\n      : @262 [@dyn 118] (gas: 37)\n 18413: u8 [a0 + 31] = 0\n 18416: u8 [a0 + 30] = 0\n 18419: u8 [a0 + 29] = 0\n 18422: u8 [a0 + 28] = 0\n 18425: u8 [a0 + 27] = 0\n 18428: u8 [a0 + 26] = 0\n 18431: u8 [a0 + 25] = 0\n 18434: u8 [a0 + 24] = 0\n 18437: u8 [a0 + 23] = 0\n 18440: u8 [a0 + 22] = 0\n 18443: u8 [a0 + 21] = 0\n 18446: u8 [a0 + 20] = 0\n 18449: u8 [a0 + 19] = 0\n 18452: u8 [a0 + 18] = 0\n 18455: u8 [a0 + 17] = 0\n 18458: u8 [a0 + 16] = 0\n 18461: u8 [a0 + 15] = 0\n 18464: u8 [a0 + 14] = 0\n 18467: u8 [a0 + 13] = 0\n 18470: u8 [a0 + 12] = 0\n 18473: u8 [a0 + 11] = 0\n 18476: u8 [a0 + 10] = 0\n 18479: u8 [a0 + 9] = 0\n 18482: u8 [a0 + 8] = 0\n 18485: u8 [a0 + 7] = 0\n 18488: u8 [a0 + 6] = 0x64\n 18492: u8 [a0 + 5] = 0x72\n 18496: u8 [a0 + 4] = 0x61\n 18500: u8 [a0 + 3] = 0x63\n 18504: u8 [a0 + 0x2] = s0\n 18507: u8 [a0 + 1] = 0x6f\n 18511: a1 = 0x4e\n 18514: u8 [a0] = a1\n 18516: ra = u64 [sp + 0x8]\n 18519: s0 = u64 [sp]\n 18521: sp = sp + 0x10\n 18524: ret\n      : @263 (gas: 1)\n 18526: trap\n      : @264 (gas: 17)\n 18527: sp = sp + 0xffffffffffffffa0\n 18530: u64 [sp + 0x58] = ra\n 18533: u64 [sp + 0x50] = s0\n 18536: u64 [sp + 0x48] = s1\n 18539: a3 = u64 [a1 + 0x18]\n 18542: a4 = u64 [a1 + 0x10]\n 18545: a5 = u64 [a1 + 0x8]\n 18548: s1 = u64 [a1]\n 18550: a1 = a5 | a3\n 18553: a2 = s1 | a4\n 18556: a2 = a2 | a1\n 18559: a2 = a2 >> 0x20\n 18562: a1 = a1 | a4\n 18565: a1 = a1 << 0x20\n 18568: a1 = a1 | a2\n 18571: u64 [sp + 0x28] = a0\n 18574: jump @271 if a1 != 0\n      : @265 (gas: 19)\n 18578: a0 = s1 + 0x20\n 18581: u64 [sp + 0x30] = a0\n 18584: a0 = a0 <u s1\n 18587: a1 = a5 + a0\n 18590: u64 [sp + 0x40] = a1\n 18593: u64 [sp + 0x8] = a5\n 18596: s0 = a1 <u a5\n 18599: s0 = a0 if a0 == 0\n 18602: s0 = s0 + a4\n 18605: u64 [sp + 0x10] = a4\n 18608: a0 = s0 <u a4\n 18611: u64 [sp + 0x18] = a3\n 18614: a0 = a0 + a3\n 18617: u64 [sp + 0x38] = a0\n 18620: u64 [sp] = s1\n 18622: i32 a0 = s1 + 0\n 18624: a1 = 0x20\n 18627: s1 = 0x20\n 18630: ra = 238, jump @0\n      : @266 [@dyn 119] (gas: 45)\n 18636: u8 [a0 + 0x1f] = s1\n 18639: a1 = u64 [sp + 0x30]\n 18642: s1 = a1\n 18644: a1 = a1 | s0\n 18647: a2 = u64 [sp + 0x40]\n 18650: a4 = u64 [sp + 0x38]\n 18653: a2 = a2 | a4\n 18656: a1 = a1 | a2\n 18659: a1 = a1 >> 0x20\n 18662: u64 [sp + 0x20] = s0\n 18665: a2 = a2 | s0\n 18668: a2 = a2 << 0x20\n 18671: a1 = a1 | a2\n 18674: u8 [a0 + 30] = 0\n 18677: u8 [a0 + 29] = 0\n 18680: u8 [a0 + 28] = 0\n 18683: u8 [a0 + 27] = 0\n 18686: u8 [a0 + 26] = 0\n 18689: u8 [a0 + 25] = 0\n 18692: u8 [a0 + 24] = 0\n 18695: u8 [a0 + 23] = 0\n 18698: u8 [a0 + 22] = 0\n 18701: u8 [a0 + 21] = 0\n 18704: u8 [a0 + 20] = 0\n 18707: u8 [a0 + 19] = 0\n 18710: u8 [a0 + 18] = 0\n 18713: u8 [a0 + 17] = 0\n 18716: u8 [a0 + 16] = 0\n 18719: u8 [a0 + 15] = 0\n 18722: u8 [a0 + 14] = 0\n 18725: u8 [a0 + 13] = 0\n 18728: u8 [a0 + 12] = 0\n 18731: u8 [a0 + 11] = 0\n 18734: u8 [a0 + 10] = 0\n 18737: u8 [a0 + 9] = 0\n 18740: u8 [a0 + 8] = 0\n 18743: u8 [a0 + 7] = 0\n 18746: u8 [a0 + 6] = 0\n 18749: u8 [a0 + 5] = 0\n 18752: u8 [a0 + 4] = 0\n 18755: u8 [a0 + 3] = 0\n 18758: u8 [a0 + 2] = 0\n 18761: u8 [a0 + 1] = 0\n 18764: u8 [a0 + 0] = 0\n 18766: jump @271 if a1 != 0\n      : @267 (gas: 4)\n 18770: i32 s0 = s1 + 0\n 18772: a1 = 0x20\n 18775: a0 = s0\n 18777: ra = 240, jump @0\n      : @268 [@dyn 120] (gas: 41)\n 18783: u8 [a0 + 31] = 0x7\n 18787: u8 [a0 + 30] = 0\n 18790: u8 [a0 + 29] = 0\n 18793: u8 [a0 + 28] = 0\n 18796: u8 [a0 + 27] = 0\n 18799: u8 [a0 + 26] = 0\n 18802: u8 [a0 + 25] = 0\n 18805: u8 [a0 + 24] = 0\n 18808: u8 [a0 + 23] = 0\n 18811: u8 [a0 + 22] = 0\n 18814: u8 [a0 + 21] = 0\n 18817: u8 [a0 + 20] = 0\n 18820: u8 [a0 + 19] = 0\n 18823: u8 [a0 + 18] = 0\n 18826: u8 [a0 + 17] = 0\n 18829: u8 [a0 + 16] = 0\n 18832: u8 [a0 + 15] = 0\n 18835: u8 [a0 + 14] = 0\n 18838: u8 [a0 + 13] = 0\n 18841: u8 [a0 + 12] = 0\n 18844: u8 [a0 + 11] = 0\n 18847: u8 [a0 + 10] = 0\n 18850: u8 [a0 + 9] = 0\n 18853: u8 [a0 + 8] = 0\n 18856: u8 [a0 + 7] = 0\n 18859: u8 [a0 + 6] = 0\n 18862: u8 [a0 + 5] = 0\n 18865: u8 [a0 + 4] = 0\n 18868: u8 [a0 + 3] = 0\n 18871: u8 [a0 + 2] = 0\n 18874: u8 [a0 + 1] = 0\n 18877: a1 = u64 [sp + 0x20]\n 18880: a2 = u64 [sp + 0x38]\n 18883: a1 = a1 | a2\n 18886: a2 = 0xffffffe0\n 18896: a2 = s1 <u a2\n 18899: a3 = u64 [sp + 0x40]\n 18902: a2 = 0 if a3 != 0\n 18904: a2 = 0 if a1 != 0\n 18906: u8 [a0 + 0] = 0\n 18908: jump @271 if a2 == 0\n      : @269 (gas: 3)\n 18912: i32 a0 = s0 + 0x20\n 18915: a1 = 0x20\n 18918: ra = 242, jump @0\n      : @270 [@dyn 121] (gas: 54)\n 18924: u8 [a0 + 31] = 0\n 18927: u8 [a0 + 30] = 0\n 18930: u8 [a0 + 29] = 0\n 18933: u8 [a0 + 28] = 0\n 18936: u8 [a0 + 27] = 0\n 18939: u8 [a0 + 26] = 0\n 18942: u8 [a0 + 25] = 0\n 18945: u8 [a0 + 24] = 0\n 18948: u8 [a0 + 23] = 0\n 18951: u8 [a0 + 22] = 0\n 18954: u8 [a0 + 21] = 0\n 18957: u8 [a0 + 20] = 0\n 18960: u8 [a0 + 19] = 0\n 18963: u8 [a0 + 18] = 0\n 18966: u8 [a0 + 17] = 0\n 18969: u8 [a0 + 16] = 0\n 18972: u8 [a0 + 15] = 0\n 18975: u8 [a0 + 14] = 0\n 18978: u8 [a0 + 13] = 0\n 18981: u8 [a0 + 12] = 0\n 18984: u8 [a0 + 11] = 0\n 18987: u8 [a0 + 10] = 0\n 18990: u8 [a0 + 9] = 0\n 18993: u8 [a0 + 8] = 0\n 18996: u8 [a0 + 7] = 0\n 18999: u8 [a0 + 6] = 0x64\n 19003: u8 [a0 + 5] = 0x72\n 19007: u8 [a0 + 4] = 0x61\n 19011: u8 [a0 + 3] = 0x63\n 19015: u8 [a0 + 2] = 0x20\n 19019: u8 [a0 + 1] = 0x6f\n 19023: u8 [a0 + 0] = 0x4e\n 19026: a1 = u64 [sp]\n 19028: a0 = a1 + 0x60\n 19031: a1 = a0 <u a1\n 19034: a3 = u64 [sp + 0x8]\n 19037: a2 = a3 + a1\n 19040: a3 = a2 <u a3\n 19043: a3 = a1 if a1 == 0\n 19046: a1 = u64 [sp + 0x10]\n 19049: a3 = a3 + a1\n 19052: a1 = a3 <u a1\n 19055: a4 = u64 [sp + 0x18]\n 19058: a1 = a1 + a4\n 19061: a4 = u64 [sp + 0x28]\n 19064: u64 [a4] = a0\n 19066: u64 [a4 + 0x8] = a2\n 19069: u64 [a4 + 0x10] = a3\n 19072: u64 [a4 + 0x18] = a1\n 19075: ra = u64 [sp + 0x58]\n 19078: s0 = u64 [sp + 0x50]\n 19081: s1 = u64 [sp + 0x48]\n 19084: sp = sp + 0x60\n 19087: ret\n      : @271 (gas: 1)\n 19089: trap\n      : @272 (gas: 22)\n 19090: sp = sp + 0xfffffffffffffee0\n 19094: u64 [sp + 0x118] = ra\n 19098: u64 [sp + 0x110] = s0\n 19102: u64 [sp + 0x108] = s1\n 19106: s0 = sp + 0x120\n 19110: sp = sp & 0xffffffffffffffe0\n 19113: a4 = u64 [a1 + 0x10]\n 19116: a5 = u64 [a1 + 0x18]\n 19119: a2 = u64 [a1 + 0x8]\n 19122: a3 = u64 [a1]\n 19124: u64 [sp + 0x70] = a2\n 19127: u64 [sp + 0x58] = a5\n 19130: a1 = a2 | a5\n 19133: u64 [sp + 0x80] = a3\n 19137: a2 = a3 | a4\n 19140: a2 = a2 | a1\n 19143: a2 = a2 >> 0x20\n 19146: u64 [sp + 0x60] = a4\n 19149: a1 = a1 | a4\n 19152: a1 = a1 << 0x20\n 19155: a1 = a1 | a2\n 19158: jump @284 if a1 != 0\n      : @273 (gas: 12)\n 19162: a1 = u64 [a0 + 0x18]\n 19165: u64 [sp + 0x78] = a1\n 19168: a1 = u64 [a0 + 0x10]\n 19171: u64 [sp + 0x98] = a1\n 19175: a1 = u64 [a0 + 0x8]\n 19178: u64 [sp + 0x90] = a1\n 19182: a0 = u64 [a0]\n 19184: u64 [sp + 0x88] = a0\n 19188: a0 = i32 [sp + 0x80]\n 19192: a1 = 0x20\n 19195: u64 [sp + 0x68] = a0\n 19198: ra = 244, jump @0\n      : @274 [@dyn 122] (gas: 105)\n 19204: a1 = u8 [a0 + 0x11]\n 19207: a2 = u8 [a0 + 0x10]\n 19210: a3 = u8 [a0 + 0x12]\n 19213: a4 = u8 [a0 + 0x13]\n 19216: a1 = a1 << 0x8\n 19219: a1 = a1 | a2\n 19222: a3 = a3 << 0x10\n 19225: a4 = a4 << 0x18\n 19228: a3 = a3 | a4\n 19231: a1 = a1 | a3\n 19234: a2 = u8 [a0 + 0x15]\n 19237: a3 = u8 [a0 + 0x14]\n 19240: a4 = u8 [a0 + 0x16]\n 19243: a5 = u8 [a0 + 0x17]\n 19246: a2 = a2 << 0x8\n 19249: a2 = a2 | a3\n 19252: a4 = a4 << 0x10\n 19255: a5 = a5 << 0x18\n 19258: a4 = a4 | a5\n 19261: a2 = a2 | a4\n 19264: a2 = a2 << 0x20\n 19267: a1 = a1 | a2\n 19270: a2 = u8 [a0 + 0x19]\n 19273: a3 = u8 [a0 + 0x18]\n 19276: a4 = u8 [a0 + 0x1a]\n 19279: a5 = u8 [a0 + 0x1b]\n 19282: a2 = a2 << 0x8\n 19285: a2 = a2 | a3\n 19288: a4 = a4 << 0x10\n 19291: a5 = a5 << 0x18\n 19294: a4 = a4 | a5\n 19297: a2 = a2 | a4\n 19300: a3 = u8 [a0 + 0x1d]\n 19303: a4 = u8 [a0 + 0x1c]\n 19306: a5 = u8 [a0 + 0x1e]\n 19309: s1 = u8 [a0 + 0x1f]\n 19312: a3 = a3 << 0x8\n 19315: a3 = a3 | a4\n 19318: a5 = a5 << 0x10\n 19321: s1 = s1 << 0x18\n 19324: a5 = a5 | s1\n 19327: a3 = a3 | a5\n 19330: a3 = a3 << 0x20\n 19333: a2 = a2 | a3\n 19336: a3 = u8 [a0 + 0xd]\n 19339: a4 = u8 [a0 + 0xc]\n 19342: a5 = u8 [a0 + 0xe]\n 19345: a0 = u8 [a0 + 0xf]\n 19348: a3 = a3 << 0x8\n 19351: a3 = a3 | a4\n 19354: a5 = a5 << 0x10\n 19357: a0 = a0 << 0x18\n 19360: a0 = a0 | a5\n 19363: a0 = a0 | a3\n 19366: a2 = reverse a2\n 19368: u64 [sp + 0x50] = a2\n 19371: a1 = reverse a1\n 19373: u64 [sp + 0x48] = a1\n 19376: s1 = reverse a0\n 19378: s1 = s1 >> 0x20\n 19381: u64 [sp + 0x40] = s1\n 19384: s1 = u64 [sp + 0x78]\n 19387: u64 [sp + 0xd8] = s1\n 19391: a0 = u64 [sp + 0x98]\n 19395: u64 [sp + 0xd0] = a0\n 19399: a0 = u64 [sp + 0x90]\n 19403: u64 [sp + 0xc8] = a0\n 19407: a0 = u64 [sp + 0x88]\n 19411: u64 [sp + 0xc0] = a0\n 19415: u64 [sp + 248] = 0\n 19419: u64 [sp + 240] = 0\n 19423: u64 [sp + 232] = 0\n 19427: u64 [sp + 224] = 0\n 19431: u32 [sp + 160] = 0x20\n 19436: i32 a1 = sp + 0xc0\n 19440: i32 a3 = sp + 0xe0\n 19444: i32 a4 = sp + 0xa0\n 19448: a2 = 0xffffffffffffffff\n 19451: a0 = 0\n 19453: ecalli 7 // 'get_storage'\n 19455: a0 = u32 [sp + 0xf4]\n 19459: a0 = a0 << 0x20\n 19462: a1 = u64 [sp + 0xf8]\n 19466: a2 = u64 [sp + 0x40]\n 19469: a0 = a0 | a2\n 19472: u64 [sp + 0xd8] = s1\n 19476: a2 = u64 [sp + 0x98]\n 19480: u64 [sp + 0xd0] = a2\n 19484: a2 = u64 [sp + 0x90]\n 19488: u64 [sp + 0xc8] = a2\n 19492: a2 = u64 [sp + 0x88]\n 19496: u64 [sp + 0xc0] = a2\n 19500: u64 [sp + 0xf8] = a1\n 19504: u64 [sp + 0xf0] = a0\n 19508: a0 = u64 [sp + 0x48]\n 19511: u64 [sp + 0xe8] = a0\n 19515: a0 = u64 [sp + 0x50]\n 19518: u64 [sp + 0xe0] = a0\n 19522: i32 a1 = sp + 0xc0\n 19526: i32 a3 = sp + 0xe0\n 19530: a2 = 0xffffffffffffffff\n 19533: a4 = 0x20\n 19536: a0 = 0\n 19538: ecalli 14 // 'set_storage'\n 19540: fallthrough\n      : @275 (gas: 13)\n 19541: a0 = u64 [sp + 0x60]\n 19544: a2 = u64 [sp + 0x58]\n 19547: a2 = a2 | a0\n 19550: a0 = 0x100000000\n 19560: u64 [sp + 0x40] = a0\n 19563: a0 = 0xffffffe0\n 19573: a1 = u64 [sp + 0x80]\n 19577: a0 = a1 <u a0\n 19580: a1 = u64 [sp + 0x70]\n 19583: a0 = 0 if a1 != 0\n 19585: u64 [sp + 0x60] = a2\n 19588: a0 = 0 if a2 != 0\n 19590: jump @284 if a0 == 0\n      : @276 (gas: 20)\n 19594: a0 = u64 [sp + 0x88]\n 19598: a2 = a0 + 0x1\n 19601: u64 [sp + 0x48] = a2\n 19604: a0 = a2 <u 0x1\n 19607: a1 = u64 [sp + 0x90]\n 19611: a0 = a0 + a1\n 19614: u64 [sp + 0x58] = a0\n 19617: a0 = a0 | a2\n 19620: a0 = a0 <u 0x1\n 19623: a1 = u64 [sp + 0x98]\n 19627: a0 = a0 + a1\n 19630: u64 [sp + 0x50] = a0\n 19633: a0 = a0 <u a1\n 19636: a1 = u64 [sp + 0x78]\n 19639: a0 = a0 + a1\n 19642: u64 [sp + 0x38] = a0\n 19645: a0 = u64 [sp + 0x68]\n 19648: i32 a0 = a0 + 0x20\n 19651: a1 = 0x20\n 19654: ra = 246, jump @0\n      : @277 [@dyn 123] (gas: 137)\n 19660: a1 = u8 [a0 + 0x1]\n 19663: a2 = u8 [a0]\n 19665: a3 = u8 [a0 + 0x2]\n 19668: a4 = u8 [a0 + 0x3]\n 19671: a1 = a1 << 0x8\n 19674: a1 = a1 | a2\n 19677: a3 = a3 << 0x10\n 19680: a4 = a4 << 0x18\n 19683: a3 = a3 | a4\n 19686: a1 = a1 | a3\n 19689: a2 = u8 [a0 + 0x5]\n 19692: a3 = u8 [a0 + 0x4]\n 19695: a4 = u8 [a0 + 0x6]\n 19698: a5 = u8 [a0 + 0x7]\n 19701: a2 = a2 << 0x8\n 19704: a2 = a2 | a3\n 19707: a4 = a4 << 0x10\n 19710: a5 = a5 << 0x18\n 19713: a4 = a4 | a5\n 19716: a2 = a2 | a4\n 19719: a2 = a2 << 0x20\n 19722: t0 = a2 | a1\n 19725: a2 = u8 [a0 + 0x9]\n 19728: a3 = u8 [a0 + 0x8]\n 19731: a4 = u8 [a0 + 0xa]\n 19734: a5 = u8 [a0 + 0xb]\n 19737: a2 = a2 << 0x8\n 19740: a2 = a2 | a3\n 19743: a4 = a4 << 0x10\n 19746: a5 = a5 << 0x18\n 19749: a4 = a4 | a5\n 19752: a2 = a2 | a4\n 19755: a3 = u8 [a0 + 0xd]\n 19758: a4 = u8 [a0 + 0xc]\n 19761: a5 = u8 [a0 + 0xe]\n 19764: s1 = u8 [a0 + 0xf]\n 19767: a3 = a3 << 0x8\n 19770: a3 = a3 | a4\n 19773: a5 = a5 << 0x10\n 19776: s1 = s1 << 0x18\n 19779: a5 = a5 | s1\n 19782: a3 = a3 | a5\n 19785: a3 = a3 << 0x20\n 19788: a2 = a2 | a3\n 19791: a3 = u8 [a0 + 0x11]\n 19794: a4 = u8 [a0 + 0x10]\n 19797: a5 = u8 [a0 + 0x12]\n 19800: s1 = u8 [a0 + 0x13]\n 19803: a3 = a3 << 0x8\n 19806: a3 = a3 | a4\n 19809: a5 = a5 << 0x10\n 19812: s1 = s1 << 0x18\n 19815: a5 = a5 | s1\n 19818: a3 = a3 | a5\n 19821: a4 = u8 [a0 + 0x15]\n 19824: a5 = u8 [a0 + 0x14]\n 19827: s1 = u8 [a0 + 0x16]\n 19830: a1 = u8 [a0 + 0x17]\n 19833: a4 = a4 << 0x8\n 19836: a4 = a4 | a5\n 19839: s1 = s1 << 0x10\n 19842: a1 = a1 << 0x18\n 19845: a1 = a1 | s1\n 19848: a1 = a1 | a4\n 19851: a1 = a1 << 0x20\n 19854: a3 = a3 | a1\n 19857: a1 = u8 [a0 + 0x19]\n 19860: a4 = u8 [a0 + 0x18]\n 19863: a5 = u8 [a0 + 0x1a]\n 19866: s1 = u8 [a0 + 0x1b]\n 19869: a1 = a1 << 0x8\n 19872: a1 = a1 | a4\n 19875: a5 = a5 << 0x10\n 19878: s1 = s1 << 0x18\n 19881: a5 = a5 | s1\n 19884: a1 = a1 | a5\n 19887: a4 = u8 [a0 + 0x1d]\n 19890: a5 = u8 [a0 + 0x1c]\n 19893: s1 = u8 [a0 + 0x1e]\n 19896: a0 = u8 [a0 + 0x1f]\n 19899: a4 = a4 << 0x8\n 19902: a4 = a4 | a5\n 19905: s1 = s1 << 0x10\n 19908: a0 = a0 << 0x18\n 19911: a0 = a0 | s1\n 19914: a0 = a0 | a4\n 19917: a0 = a0 << 0x20\n 19920: a0 = a0 | a1\n 19923: u32 [sp + 160] = 0x20\n 19928: a0 = reverse a0\n 19930: u64 [sp + 0x30] = a0\n 19933: a0 = reverse a3\n 19935: u64 [sp + 0x28] = a0\n 19938: a0 = reverse a2\n 19940: u64 [sp + 0x20] = a0\n 19943: a0 = reverse t0\n 19945: u64 [sp + 0x18] = a0\n 19948: a0 = u64 [sp + 0x50]\n 19951: u64 [sp + 0xd0] = a0\n 19955: a0 = u64 [sp + 0x58]\n 19958: u64 [sp + 0xc8] = a0\n 19962: a0 = u64 [sp + 0x48]\n 19965: u64 [sp + 0xc0] = a0\n 19969: s1 = u64 [sp + 0x38]\n 19972: u64 [sp + 0xd8] = s1\n 19976: u64 [sp + 248] = 0\n 19980: u64 [sp + 240] = 0\n 19984: u64 [sp + 232] = 0\n 19988: u64 [sp + 224] = 0\n 19992: i32 a1 = sp + 0xc0\n 19996: i32 a3 = sp + 0xe0\n 20000: i32 a4 = sp + 0xa0\n 20004: a2 = 0xffffffffffffffff\n 20007: a0 = 0\n 20009: ecalli 7 // 'get_storage'\n 20011: u64 [sp + 0xd8] = s1\n 20015: a0 = u64 [sp + 0x50]\n 20018: u64 [sp + 0xd0] = a0\n 20022: a0 = u64 [sp + 0x58]\n 20025: u64 [sp + 0xc8] = a0\n 20029: a0 = u64 [sp + 0x48]\n 20032: u64 [sp + 0xc0] = a0\n 20036: a0 = u64 [sp + 0x18]\n 20039: u64 [sp + 0xf8] = a0\n 20043: a0 = u64 [sp + 0x20]\n 20046: u64 [sp + 0xf0] = a0\n 20050: a0 = u64 [sp + 0x28]\n 20053: u64 [sp + 0xe8] = a0\n 20057: a0 = u64 [sp + 0x30]\n 20060: u64 [sp + 0xe0] = a0\n 20064: i32 a1 = sp + 0xc0\n 20068: i32 a3 = sp + 0xe0\n 20072: a2 = 0xffffffffffffffff\n 20075: a4 = 0x20\n 20078: a0 = 0\n 20080: ecalli 14 // 'set_storage'\n 20082: fallthrough\n      : @278 (gas: 9)\n 20083: a0 = u64 [sp + 0x40]\n 20086: a0 = a0 + 0xffffffffffffffc0\n 20089: a1 = u64 [sp + 0x80]\n 20093: a0 = a1 <u a0\n 20096: a1 = u64 [sp + 0x70]\n 20099: a0 = 0 if a1 != 0\n 20101: a1 = u64 [sp + 0x60]\n 20104: a0 = 0 if a1 != 0\n 20106: jump @284 if a0 == 0\n      : @279 (gas: 20)\n 20110: a0 = u64 [sp + 0x88]\n 20114: a1 = a0 + 0x2\n 20117: u64 [sp + 0x48] = a1\n 20120: a0 = a1 <u a0\n 20123: a1 = u64 [sp + 0x90]\n 20127: a2 = a1 + a0\n 20130: u64 [sp + 0x58] = a2\n 20133: a1 = a2 <u a1\n 20136: a1 = a0 if a0 == 0\n 20139: a0 = u64 [sp + 0x98]\n 20143: a1 = a1 + a0\n 20146: u64 [sp + 0x50] = a1\n 20149: a0 = a1 <u a0\n 20152: a1 = u64 [sp + 0x78]\n 20155: a0 = a0 + a1\n 20158: u64 [sp + 0x40] = a0\n 20161: a0 = u64 [sp + 0x68]\n 20164: i32 a0 = a0 + 0x40\n 20167: a1 = 0x20\n 20170: ra = 248, jump @0\n      : @280 [@dyn 124] (gas: 137)\n 20176: a1 = u8 [a0 + 0x1]\n 20179: a2 = u8 [a0]\n 20181: a3 = u8 [a0 + 0x2]\n 20184: a4 = u8 [a0 + 0x3]\n 20187: a1 = a1 << 0x8\n 20190: a1 = a1 | a2\n 20193: a3 = a3 << 0x10\n 20196: a4 = a4 << 0x18\n 20199: a3 = a3 | a4\n 20202: a1 = a1 | a3\n 20205: a2 = u8 [a0 + 0x5]\n 20208: a3 = u8 [a0 + 0x4]\n 20211: a4 = u8 [a0 + 0x6]\n 20214: a5 = u8 [a0 + 0x7]\n 20217: a2 = a2 << 0x8\n 20220: a2 = a2 | a3\n 20223: a4 = a4 << 0x10\n 20226: a5 = a5 << 0x18\n 20229: a4 = a4 | a5\n 20232: a2 = a2 | a4\n 20235: a2 = a2 << 0x20\n 20238: t0 = a2 | a1\n 20241: a2 = u8 [a0 + 0x9]\n 20244: a3 = u8 [a0 + 0x8]\n 20247: a4 = u8 [a0 + 0xa]\n 20250: a5 = u8 [a0 + 0xb]\n 20253: a2 = a2 << 0x8\n 20256: a2 = a2 | a3\n 20259: a4 = a4 << 0x10\n 20262: a5 = a5 << 0x18\n 20265: a4 = a4 | a5\n 20268: a2 = a2 | a4\n 20271: a3 = u8 [a0 + 0xd]\n 20274: a4 = u8 [a0 + 0xc]\n 20277: a5 = u8 [a0 + 0xe]\n 20280: s1 = u8 [a0 + 0xf]\n 20283: a3 = a3 << 0x8\n 20286: a3 = a3 | a4\n 20289: a5 = a5 << 0x10\n 20292: s1 = s1 << 0x18\n 20295: a5 = a5 | s1\n 20298: a3 = a3 | a5\n 20301: a3 = a3 << 0x20\n 20304: a2 = a2 | a3\n 20307: a3 = u8 [a0 + 0x11]\n 20310: a4 = u8 [a0 + 0x10]\n 20313: a5 = u8 [a0 + 0x12]\n 20316: s1 = u8 [a0 + 0x13]\n 20319: a3 = a3 << 0x8\n 20322: a3 = a3 | a4\n 20325: a5 = a5 << 0x10\n 20328: s1 = s1 << 0x18\n 20331: a5 = a5 | s1\n 20334: a3 = a3 | a5\n 20337: a4 = u8 [a0 + 0x15]\n 20340: a5 = u8 [a0 + 0x14]\n 20343: s1 = u8 [a0 + 0x16]\n 20346: a1 = u8 [a0 + 0x17]\n 20349: a4 = a4 << 0x8\n 20352: a4 = a4 | a5\n 20355: s1 = s1 << 0x10\n 20358: a1 = a1 << 0x18\n 20361: a1 = a1 | s1\n 20364: a1 = a1 | a4\n 20367: a1 = a1 << 0x20\n 20370: a3 = a3 | a1\n 20373: a1 = u8 [a0 + 0x19]\n 20376: a4 = u8 [a0 + 0x18]\n 20379: a5 = u8 [a0 + 0x1a]\n 20382: s1 = u8 [a0 + 0x1b]\n 20385: a1 = a1 << 0x8\n 20388: a1 = a1 | a4\n 20391: a5 = a5 << 0x10\n 20394: s1 = s1 << 0x18\n 20397: a5 = a5 | s1\n 20400: a1 = a1 | a5\n 20403: a4 = u8 [a0 + 0x1d]\n 20406: a5 = u8 [a0 + 0x1c]\n 20409: s1 = u8 [a0 + 0x1e]\n 20412: a0 = u8 [a0 + 0x1f]\n 20415: a4 = a4 << 0x8\n 20418: a4 = a4 | a5\n 20421: s1 = s1 << 0x10\n 20424: a0 = a0 << 0x18\n 20427: a0 = a0 | s1\n 20430: a0 = a0 | a4\n 20433: a0 = a0 << 0x20\n 20436: a0 = a0 | a1\n 20439: a0 = reverse a0\n 20441: u64 [sp + 0x38] = a0\n 20444: a0 = reverse a3\n 20446: u64 [sp + 0x30] = a0\n 20449: a0 = reverse a2\n 20451: u64 [sp + 0x28] = a0\n 20454: a0 = reverse t0\n 20456: u64 [sp + 0x20] = a0\n 20459: a0 = u64 [sp + 0x50]\n 20462: u64 [sp + 0xd0] = a0\n 20466: a0 = u64 [sp + 0x58]\n 20469: u64 [sp + 0xc8] = a0\n 20473: a0 = u64 [sp + 0x48]\n 20476: u64 [sp + 0xc0] = a0\n 20480: s1 = u64 [sp + 0x40]\n 20483: u64 [sp + 0xd8] = s1\n 20487: u64 [sp + 248] = 0\n 20491: u64 [sp + 240] = 0\n 20495: u64 [sp + 232] = 0\n 20499: u64 [sp + 224] = 0\n 20503: u32 [sp + 160] = 0x20\n 20508: i32 a1 = sp + 0xc0\n 20512: i32 a3 = sp + 0xe0\n 20516: i32 a4 = sp + 0xa0\n 20520: a2 = 0xffffffffffffffff\n 20523: a0 = 0\n 20525: ecalli 7 // 'get_storage'\n 20527: u64 [sp + 0xd8] = s1\n 20531: a0 = u64 [sp + 0x50]\n 20534: u64 [sp + 0xd0] = a0\n 20538: a0 = u64 [sp + 0x58]\n 20541: u64 [sp + 0xc8] = a0\n 20545: a0 = u64 [sp + 0x48]\n 20548: u64 [sp + 0xc0] = a0\n 20552: a0 = u64 [sp + 0x20]\n 20555: u64 [sp + 0xf8] = a0\n 20559: a0 = u64 [sp + 0x28]\n 20562: u64 [sp + 0xf0] = a0\n 20566: a0 = u64 [sp + 0x30]\n 20569: u64 [sp + 0xe8] = a0\n 20573: a0 = u64 [sp + 0x38]\n 20576: u64 [sp + 0xe0] = a0\n 20580: i32 a1 = sp + 0xc0\n 20584: i32 a3 = sp + 0xe0\n 20588: a2 = 0xffffffffffffffff\n 20591: a4 = 0x20\n 20594: a0 = 0\n 20596: ecalli 14 // 'set_storage'\n 20598: fallthrough\n      : @281 (gas: 8)\n 20599: a0 = 0xffffffa0\n 20609: a1 = u64 [sp + 0x80]\n 20613: a0 = a1 <u a0\n 20616: a1 = u64 [sp + 0x70]\n 20619: a0 = 0 if a1 != 0\n 20621: a1 = u64 [sp + 0x60]\n 20624: a0 = 0 if a1 != 0\n 20626: jump @284 if a0 == 0\n      : @282 (gas: 20)\n 20630: a0 = u64 [sp + 0x88]\n 20634: a1 = a0 + 0x3\n 20637: u64 [sp + 0x80] = a1\n 20641: a0 = a1 <u a0\n 20644: a1 = u64 [sp + 0x90]\n 20648: a2 = a1 + a0\n 20651: u64 [sp + 0x88] = a2\n 20655: a1 = a2 <u a1\n 20658: a1 = a0 if a0 == 0\n 20661: a0 = u64 [sp + 0x98]\n 20665: a1 = a1 + a0\n 20668: u64 [sp + 0x90] = a1\n 20672: a0 = a1 <u a0\n 20675: a1 = u64 [sp + 0x78]\n 20678: a0 = a0 + a1\n 20681: u64 [sp + 0x98] = a0\n 20685: a0 = u64 [sp + 0x68]\n 20688: i32 a0 = a0 + 0x60\n 20691: a1 = 0x20\n 20694: ra = 250, jump @0\n      : @283 [@dyn 125] (gas: 140)\n 20700: a1 = u8 [a0 + 0x11]\n 20703: a2 = u8 [a0 + 0x10]\n 20706: a3 = u8 [a0 + 0x12]\n 20709: a4 = u8 [a0 + 0x13]\n 20712: a1 = a1 << 0x8\n 20715: a1 = a1 | a2\n 20718: a3 = a3 << 0x10\n 20721: a4 = a4 << 0x18\n 20724: a3 = a3 | a4\n 20727: t0 = a3 | a1\n 20730: a1 = u8 [a0 + 0x1]\n 20733: a2 = u8 [a0]\n 20735: a3 = u8 [a0 + 0x2]\n 20738: a4 = u8 [a0 + 0x3]\n 20741: a1 = a1 << 0x8\n 20744: a1 = a1 | a2\n 20747: a3 = a3 << 0x10\n 20750: a4 = a4 << 0x18\n 20753: a2 = a4 | a3\n 20756: t1 = a2 | a1\n 20759: a1 = u8 [a0 + 0x15]\n 20762: a3 = u8 [a0 + 0x14]\n 20765: a4 = u8 [a0 + 0x16]\n 20768: a5 = u8 [a0 + 0x17]\n 20771: a1 = a1 << 0x8\n 20774: a1 = a1 | a3\n 20777: a4 = a4 << 0x10\n 20780: a5 = a5 << 0x18\n 20783: a3 = a5 | a4\n 20786: t2 = a3 | a1\n 20789: a1 = u8 [a0 + 0x5]\n 20792: a4 = u8 [a0 + 0x4]\n 20795: a5 = u8 [a0 + 0x6]\n 20798: s1 = u8 [a0 + 0x7]\n 20801: a1 = a1 << 0x8\n 20804: a1 = a1 | a4\n 20807: a5 = a5 << 0x10\n 20810: s1 = s1 << 0x18\n 20813: a4 = s1 | a5\n 20816: ra = a4 | a1\n 20819: a1 = u8 [a0 + 0x19]\n 20822: a5 = u8 [a0 + 0x18]\n 20825: s1 = u8 [a0 + 0x1a]\n 20828: a2 = u8 [a0 + 0x1b]\n 20831: a1 = a1 << 0x8\n 20834: a1 = a1 | a5\n 20837: s1 = s1 << 0x10\n 20840: a2 = a2 << 0x18\n 20843: a2 = a2 | s1\n 20846: a5 = a2 | a1\n 20849: a1 = u8 [a0 + 0x9]\n 20852: a2 = u8 [a0 + 0x8]\n 20855: s1 = u8 [a0 + 0xa]\n 20858: a3 = u8 [a0 + 0xb]\n 20861: a1 = a1 << 0x8\n 20864: a1 = a1 | a2\n 20867: s1 = s1 << 0x10\n 20870: a3 = a3 << 0x18\n 20873: a3 = a3 | s1\n 20876: a1 = a1 | a3\n 20879: a2 = u8 [a0 + 0x1d]\n 20882: a3 = u8 [a0 + 0x1c]\n 20885: s1 = u8 [a0 + 0x1e]\n 20888: a4 = u8 [a0 + 0x1f]\n 20891: a2 = a2 << 0x8\n 20894: a2 = a2 | a3\n 20897: s1 = s1 << 0x10\n 20900: a4 = a4 << 0x18\n 20903: a4 = a4 | s1\n 20906: a2 = a2 | a4\n 20909: a3 = u8 [a0 + 0xd]\n 20912: a4 = u8 [a0 + 0xc]\n 20915: s1 = u8 [a0 + 0xe]\n 20918: a0 = u8 [a0 + 0xf]\n 20921: a3 = a3 << 0x8\n 20924: a3 = a3 | a4\n 20927: s1 = s1 << 0x10\n 20930: a0 = a0 << 0x18\n 20933: a0 = a0 | s1\n 20936: a0 = a0 | a3\n 20939: a0 = a0 | a2\n 20942: a1 = a1 | a5\n 20945: a0 = a0 << 0x20\n 20948: a0 = a0 | a1\n 20951: a1 = ra | t2\n 20954: a2 = t1 | t0\n 20957: a1 = a1 << 0x20\n 20960: a1 = a1 | a2\n 20963: a0 = a0 | a1\n 20966: u32 [sp + 160] = 0x20\n 20971: a0 = a0 >u 0\n 20973: u64 [sp + 0x78] = a0\n 20976: a0 = u64 [sp + 0x90]\n 20980: u64 [sp + 0xd0] = a0\n 20984: a0 = u64 [sp + 0x88]\n 20988: u64 [sp + 0xc8] = a0\n 20992: a0 = u64 [sp + 0x80]\n 20996: u64 [sp + 0xc0] = a0\n 21000: s1 = u64 [sp + 0x98]\n 21004: u64 [sp + 0xd8] = s1\n 21008: u64 [sp + 248] = 0\n 21012: u64 [sp + 240] = 0\n 21016: u64 [sp + 232] = 0\n 21020: u64 [sp + 224] = 0\n 21024: i32 a1 = sp + 0xc0\n 21028: i32 a3 = sp + 0xe0\n 21032: i32 a4 = sp + 0xa0\n 21036: a2 = 0xffffffffffffffff\n 21039: a0 = 0\n 21041: ecalli 7 // 'get_storage'\n 21043: a0 = u64 [sp + 0xe0]\n 21047: a1 = u64 [sp + 0xe8]\n 21051: a2 = u64 [sp + 0xf0]\n 21055: a3 = u64 [sp + 0xf8]\n 21059: a0 = a0 & 0xffffffffffffff00\n 21063: a4 = u64 [sp + 0x78]\n 21066: a0 = a0 | a4\n 21069: u64 [sp + 0xd8] = s1\n 21073: a4 = u64 [sp + 0x90]\n 21077: u64 [sp + 0xd0] = a4\n 21081: a4 = u64 [sp + 0x88]\n 21085: u64 [sp + 0xc8] = a4\n 21089: a4 = u64 [sp + 0x80]\n 21093: u64 [sp + 0xc0] = a4\n 21097: u64 [sp + 0xf8] = a3\n 21101: u64 [sp + 0xf0] = a2\n 21105: u64 [sp + 0xe8] = a1\n 21109: u64 [sp + 0xe0] = a0\n 21113: i32 a1 = sp + 0xc0\n 21117: i32 a3 = sp + 0xe0\n 21121: a2 = 0xffffffffffffffff\n 21124: a4 = 0x20\n 21127: a0 = 0\n 21129: ecalli 14 // 'set_storage'\n 21131: sp = s0 + 0xfffffffffffffee0\n 21135: ra = u64 [sp + 0x118]\n 21139: s0 = u64 [sp + 0x110]\n 21143: s1 = u64 [sp + 0x108]\n 21147: sp = sp + 0x120\n 21151: ret\n      : @284 (gas: 1)\n 21153: trap\n      : @285 (gas: 7)\n 21154: a3 = u64 [sp + 0x1f8]\n 21158: s1 = u64 [sp + 0x1f0]\n 21162: a2 = u64 [sp + 0x1e8]\n 21166: a0 = s1 | a3\n 21169: a1 = a2 <u 0x1\n 21172: a1 = 0 if a0 != 0\n 21174: jump @290 if a1 == 0\n      : @286 (gas: 49)\n 21178: a0 = u64 [sp + 0x1e0]\n 21182: u64 [sp + 0x18] = a0\n 21185: a0 = a0 + 0x1\n 21188: a1 = a0 <u 0x1\n 21191: a1 = a1 + a2\n 21194: u64 [sp + 0x1e0] = a0\n 21198: a0 = a0 | a1\n 21201: u64 [sp + 0x1e8] = a1\n 21205: a0 = a0 <u 0x1\n 21208: a0 = a0 + s1\n 21211: u64 [sp + 0x1f0] = a0\n 21215: a0 = a0 <u s1\n 21218: a0 = a0 + a3\n 21221: u64 [sp + 0x1f8] = a0\n 21225: a0 = u64 [sp + 0x50]\n 21228: u64 [sp + 0x1c8] = a0\n 21232: a0 = u64 [sp + 0x58]\n 21235: u64 [sp + 0x1c0] = a0\n 21239: a0 = u64 [sp + 0x48]\n 21242: u64 [sp + 0x1d0] = a0\n 21246: a0 = u64 [sp + 0x40]\n 21249: u64 [sp + 0x1d8] = a0\n 21253: i32 a1 = sp + 0x1c0\n 21257: u64 [sp + 0x10] = a3\n 21260: i32 a3 = sp + 0x1e0\n 21264: u64 [sp + 0x8] = a2\n 21267: a2 = 0xffffffffffffffff\n 21270: a4 = 0x20\n 21273: a0 = 0\n 21275: ecalli 14 // 'set_storage'\n 21277: a0 = u64 [sp + 0x10]\n 21280: u64 [sp + 0x138] = a0\n 21284: u64 [sp + 0x130] = s1\n 21288: a0 = u64 [sp + 0x8]\n 21291: u64 [sp + 0x128] = a0\n 21295: a0 = u64 [sp + 0x18]\n 21298: u64 [sp + 0x120] = a0\n 21302: a0 = u64 [sp + 0x40]\n 21305: u64 [sp + 0x158] = a0\n 21309: a0 = u64 [sp + 0x48]\n 21312: u64 [sp + 0x150] = a0\n 21316: a0 = u64 [sp + 0x50]\n 21319: u64 [sp + 0x148] = a0\n 21323: a0 = sp + 0x160\n 21327: a1 = sp + 0x140\n 21331: a2 = sp + 0x120\n 21335: a3 = u64 [sp + 0x58]\n 21338: u64 [sp + 0x140] = a3\n 21342: ra = 252, jump @197\n      : @287 [@dyn 126] (gas: 8)\n 21348: a0 = u64 [sp + 0x198]\n 21352: a1 = u64 [sp + 0x190]\n 21356: a2 = u64 [sp + 0x188]\n 21360: a3 = u64 [sp + 0x180]\n 21364: a0 = a0 | a2\n 21367: a1 = a1 | a3\n 21370: a0 = a0 | a1\n 21373: jump @292 if a0 != 0\n      : @288 (gas: 19)\n 21377: a2 = u64 [sp + 0x178]\n 21381: a0 = u64 [sp + 0x170]\n 21385: a1 = u64 [sp + 0x168]\n 21389: a3 = u64 [sp + 0x160]\n 21393: a4 = u64 [sp + 0x20]\n 21396: u64 [sp + 0xa0] = a4\n 21400: u64 [sp + 0xc0] = a3\n 21404: a3 = u64 [sp + 0x28]\n 21407: u64 [sp + 0xa8] = a3\n 21411: u64 [sp + 0xc8] = a1\n 21415: a1 = u64 [sp + 0x30]\n 21418: u64 [sp + 0xb0] = a1\n 21422: u64 [sp + 0xd0] = a0\n 21426: a0 = u64 [sp + 0x38]\n 21429: u64 [sp + 0xb8] = a0\n 21433: a0 = sp + 0xc0\n 21437: a1 = sp + 0xa0\n 21441: u64 [sp + 0xd8] = a2\n 21445: ra = 254, jump @272\n      : @289 [@dyn 127] (gas: 6)\n 21451: sp = s0 + 0xfffffffffffffde0\n 21455: ra = u64 [sp + 0x218]\n 21459: s0 = u64 [sp + 0x210]\n 21463: s1 = u64 [sp + 0x208]\n 21467: sp = sp + 0x220\n 21471: ret\n      : @290 (gas: 8)\n 21473: u64 [sp + 144] = 0\n 21477: u64 [sp + 136] = 0\n 21481: u64 [sp + 128] = 0\n 21485: a0 = 0x4e487b7100000000\n 21495: a1 = sp + 0x80\n 21499: u64 [sp + 0x98] = a0\n 21503: a0 = 0\n 21505: ra = 256, jump @8\n      : @291 [@dyn 128] (gas: 8)\n 21511: u64 [sp + 120] = 0\n 21514: u64 [sp + 112] = 0\n 21517: u64 [sp + 96] = 0x41\n 21521: a0 = 0x4\n 21524: a1 = sp + 0x60\n 21527: u64 [sp + 104] = 0\n 21530: ra = 0x104\n 21534: jump @8\n      : @292 (gas: 8)\n 21537: u64 [sp + 272] = 0\n 21541: u64 [sp + 264] = 0\n 21545: u64 [sp + 256] = 0\n 21549: a0 = 0x4e487b7100000000\n 21559: a1 = sp + 0x100\n 21563: u64 [sp + 0x118] = a0\n 21567: a0 = 0\n 21569: ra = 258, jump @8\n      : @293 [@dyn 129] (gas: 7)\n 21575: u64 [sp + 248] = 0\n 21579: u64 [sp + 240] = 0\n 21583: u64 [sp + 232] = 0\n 21587: a0 = 0x4\n 21590: a1 = sp + 0xe0\n 21594: u64 [sp + 224] = 0\n 21598: ra = 260, jump @8\n      : @294 [@dyn 130] (gas: 3)\n 21604: a1 = 0x24\n 21607: a0 = 0\n 21609: ra = 262, jump @0\n      : @295 [@dyn 131] (gas: 6)\n 21615: i32 a1 = a0 + 0\n 21617: a0 = 0x1\n 21620: a2 = 0x24\n 21623: ra = 0x108\n 21627: ecalli 12 // 'seal_return'\n 21629: fallthrough\n      : @296 [@dyn 132] (gas: 21)\n 21630: sp = sp + 0xfffffffffffffd20\n 21634: u64 [sp + 0x2d8] = ra\n 21638: u64 [sp + 0x2d0] = s0\n 21642: u64 [sp + 0x2c8] = s1\n 21646: s0 = sp + 0x2e0\n 21650: sp = sp & 0xffffffffffffffe0\n 21653: a2 = u64 [a0 + 0x18]\n 21656: a3 = u64 [a0 + 0x10]\n 21659: s1 = u64 [a0]\n 21661: a0 = u64 [a0 + 0x8]\n 21664: a4 = a2 >u 0\n 21666: a5 = a3 >u 0\n 21668: a5 = a4 if a2 != 0\n 21671: a4 = a0 >u 0\n 21673: u64 [sp + 0x50] = s1\n 21676: s1 = s1 <u 0x9\n 21679: s1 = s1 ^ 0x1\n 21682: s1 = a4 if a0 != 0\n 21685: a2 = a2 | a3\n 21688: s1 = a5 if a2 != 0\n 21691: jump @331 if s1 != 0\n      : @297 (gas: 10)\n 21695: a0 = u64 [a1 + 0x18]\n 21698: a3 = u64 [a1]\n 21700: a2 = u64 [a1 + 0x8]\n 21703: a1 = u64 [a1 + 0x10]\n 21706: u64 [sp + 0x10] = a3\n 21709: a3 = a3 <u 0x9\n 21712: a3 = 0 if a2 != 0\n 21714: a0 = a0 | a1\n 21717: a3 = 0 if a0 != 0\n 21719: jump @331 if a3 == 0\n      : @298 (gas: 32)\n 21723: u64 [sp + 664] = 0\n 21727: u64 [sp + 656] = 0\n 21731: u64 [sp + 648] = 0\n 21735: u64 [sp + 640] = 0x1\n 21740: u64 [sp + 696] = 0\n 21744: u64 [sp + 688] = 0\n 21748: u64 [sp + 680] = 0\n 21752: u64 [sp + 672] = 0\n 21756: u32 [sp + 704] = 0x20\n 21761: i32 a1 = sp + 0x280\n 21765: i32 a3 = sp + 0x2a0\n 21769: i32 a4 = sp + 0x2c0\n 21773: a2 = 0xffffffffffffffff\n 21776: a0 = 0\n 21778: ecalli 7 // 'get_storage'\n 21780: a0 = u64 [sp + 0x2b0]\n 21784: u64 [sp + 0x28] = a0\n 21787: a0 = u64 [sp + 0x2a8]\n 21791: u64 [sp + 0x20] = a0\n 21794: a0 = u64 [sp + 0x2a0]\n 21798: u64 [sp + 0x30] = a0\n 21801: i32 a0 = sp + 0x1c0\n 21805: ecalli 5 // 'caller'\n 21807: a0 = i32 [sp + 0x1d0]\n 21811: u64 [sp + 0x48] = a0\n 21814: a0 = u64 [sp + 0x1c0]\n 21818: u64 [sp + 0x40] = a0\n 21821: a0 = u64 [sp + 0x1c8]\n 21825: u64 [sp + 0x38] = a0\n 21828: a0 = 0x40\n 21831: a1 = 0x20\n 21834: ra = 266, jump @0\n      : @299 [@dyn 133] (gas: 102)\n 21840: a1 = u8 [a0 + 0x11]\n 21843: a2 = u8 [a0 + 0x10]\n 21846: a3 = u8 [a0 + 0x12]\n 21849: a4 = u8 [a0 + 0x13]\n 21852: a1 = a1 << 0x8\n 21855: a1 = a1 | a2\n 21858: a3 = a3 << 0x10\n 21861: a4 = a4 << 0x18\n 21864: a3 = a3 | a4\n 21867: a1 = a1 | a3\n 21870: a2 = u8 [a0 + 0x15]\n 21873: a3 = u8 [a0 + 0x14]\n 21876: a4 = u8 [a0 + 0x16]\n 21879: a5 = u8 [a0 + 0x17]\n 21882: a2 = a2 << 0x8\n 21885: a2 = a2 | a3\n 21888: a4 = a4 << 0x10\n 21891: a5 = a5 << 0x18\n 21894: a4 = a4 | a5\n 21897: a2 = a2 | a4\n 21900: a2 = a2 << 0x20\n 21903: t0 = a2 | a1\n 21906: a2 = u8 [a0 + 0x1]\n 21909: a3 = u8 [a0]\n 21911: a4 = u8 [a0 + 0x2]\n 21914: a5 = u8 [a0 + 0x3]\n 21917: a2 = a2 << 0x8\n 21920: a2 = a2 | a3\n 21923: a4 = a4 << 0x10\n 21926: a5 = a5 << 0x18\n 21929: a4 = a4 | a5\n 21932: a2 = a2 | a4\n 21935: a3 = u8 [a0 + 0x5]\n 21938: a4 = u8 [a0 + 0x4]\n 21941: a5 = u8 [a0 + 0x6]\n 21944: s1 = u8 [a0 + 0x7]\n 21947: a3 = a3 << 0x8\n 21950: a3 = a3 | a4\n 21953: a5 = a5 << 0x10\n 21956: s1 = s1 << 0x18\n 21959: a5 = a5 | s1\n 21962: a3 = a3 | a5\n 21965: a3 = a3 << 0x20\n 21968: a2 = a2 | a3\n 21971: a3 = u8 [a0 + 0x19]\n 21974: a4 = u8 [a0 + 0x18]\n 21977: a5 = u8 [a0 + 0x1a]\n 21980: s1 = u8 [a0 + 0x1b]\n 21983: a3 = a3 << 0x8\n 21986: a3 = a3 | a4\n 21989: a5 = a5 << 0x10\n 21992: s1 = s1 << 0x18\n 21995: a5 = a5 | s1\n 21998: a3 = a3 | a5\n 22001: a4 = u8 [a0 + 0x1d]\n 22004: a5 = u8 [a0 + 0x1c]\n 22007: s1 = u8 [a0 + 0x1e]\n 22010: a1 = u8 [a0 + 0x1f]\n 22013: a4 = a4 << 0x8\n 22016: a4 = a4 | a5\n 22019: s1 = s1 << 0x10\n 22022: a1 = a1 << 0x18\n 22025: a1 = a1 | s1\n 22028: a1 = a1 | a4\n 22031: a1 = a1 << 0x20\n 22034: a3 = a3 | a1\n 22037: a1 = u8 [a0 + 0x9]\n 22040: a4 = u8 [a0 + 0x8]\n 22043: a5 = u8 [a0 + 0xa]\n 22046: s1 = u8 [a0 + 0xb]\n 22049: a1 = a1 << 0x8\n 22052: a1 = a1 | a4\n 22055: a5 = a5 << 0x10\n 22058: s1 = s1 << 0x18\n 22061: a5 = a5 | s1\n 22064: a1 = a1 | a5\n 22067: a4 = u8 [a0 + 0xd]\n 22070: a5 = u8 [a0 + 0xc]\n 22073: s1 = u8 [a0 + 0xe]\n 22076: a0 = u8 [a0 + 0xf]\n 22079: a4 = a4 << 0x8\n 22082: a4 = a4 | a5\n 22085: s1 = s1 << 0x10\n 22088: a0 = a0 << 0x18\n 22091: a0 = a0 | s1\n 22094: a0 = a0 | a4\n 22097: a0 = a0 << 0x20\n 22100: a0 = a0 | a1\n 22103: s1 = reverse a0\n 22105: a3 = reverse a3\n 22107: a1 = reverse a2\n 22109: a0 = reverse t0\n 22111: u64 [sp + 0x78] = a0\n 22114: u64 [sp + 0x60] = a1\n 22117: a0 = a0 | a1\n 22120: a1 = a3 | s1\n 22123: a1 = a1 | a0\n 22126: a1 = a1 >> 0x20\n 22129: a0 = a0 | s1\n 22132: a0 = a0 << 0x20\n 22135: a0 = a0 | a1\n 22138: jump @343 if a0 != 0\n      : @300 (gas: 5)\n 22142: i32 a0 = a3 + 0\n 22144: a1 = 0x20\n 22147: u64 [sp + 0x68] = a0\n 22150: u64 [sp + 0x70] = a3\n 22153: ra = 268, jump @0\n      : @301 [@dyn 134] (gas: 43)\n 22159: u8 [a0 + 31] = 0\n 22162: u8 [a0 + 30] = 0\n 22165: u8 [a0 + 29] = 0\n 22168: u8 [a0 + 28] = 0\n 22171: u8 [a0 + 27] = 0\n 22174: u8 [a0 + 26] = 0\n 22177: u8 [a0 + 25] = 0\n 22180: u8 [a0 + 24] = 0\n 22183: u8 [a0 + 23] = 0\n 22186: u8 [a0 + 22] = 0\n 22189: u8 [a0 + 21] = 0\n 22192: u8 [a0 + 20] = 0\n 22195: u8 [a0 + 19] = 0\n 22198: u8 [a0 + 18] = 0\n 22201: u8 [a0 + 17] = 0\n 22204: u8 [a0 + 16] = 0\n 22207: u8 [a0 + 15] = 0\n 22210: u8 [a0 + 14] = 0\n 22213: u8 [a0 + 13] = 0\n 22216: u8 [a0 + 12] = 0\n 22219: u8 [a0 + 11] = 0\n 22222: u8 [a0 + 10] = 0\n 22225: u8 [a0 + 9] = 0\n 22228: u8 [a0 + 8] = 0\n 22231: u8 [a0 + 7] = 0\n 22234: u8 [a0 + 6] = 0\n 22237: u8 [a0 + 5] = 0\n 22240: u8 [a0 + 3] = 0xe6\n 22245: u8 [a0 + 2] = 0x8c\n 22250: u8 [a0 + 1] = 0xca\n 22255: u8 [a0 + 0] = 0x4d\n 22258: u64 [sp + 0x18] = s1\n 22261: a3 = u64 [sp + 0x60]\n 22264: a3 = a3 | s1\n 22267: a1 = 0xfffffffc\n 22277: a2 = u64 [sp + 0x70]\n 22280: a1 = a2 <u a1\n 22283: a2 = u64 [sp + 0x78]\n 22286: a1 = 0 if a2 != 0\n 22288: u64 [sp + 0x58] = a3\n 22291: a1 = 0 if a3 != 0\n 22293: u8 [a0 + 4] = 0\n 22296: jump @343 if a1 == 0\n      : @302 (gas: 19)\n 22300: a0 = u64 [sp + 0x38]\n 22303: a0 = reverse a0\n 22305: a1 = a0 >> 0x20\n 22308: a2 = u64 [sp + 0x40]\n 22311: a2 = reverse a2\n 22313: a3 = a2 << 0x20\n 22316: a1 = a1 | a3\n 22319: u64 [sp + 0x40] = a1\n 22322: a0 = a0 << 0x20\n 22325: a1 = u64 [sp + 0x48]\n 22328: a1 = reverse a1\n 22330: a1 = a1 >> 0x20\n 22333: a0 = a0 | a1\n 22336: u64 [sp + 0x48] = a0\n 22339: s1 = a2 >> 0x20\n 22342: a0 = u64 [sp + 0x68]\n 22345: i32 a0 = a0 + 0x4\n 22348: a1 = 0x20\n 22351: ra = 270, jump @0\n      : @303 [@dyn 135] (gas: 64)\n 22357: a1 = reverse s1\n 22359: a2 = u64 [sp + 0x40]\n 22362: a2 = reverse a2\n 22364: a3 = u64 [sp + 0x48]\n 22367: a3 = reverse a3\n 22369: a4 = a3 >> 0x38\n 22372: u8 [a0 + 0x1f] = a4\n 22375: a4 = a3 >> 0x30\n 22378: u8 [a0 + 0x1e] = a4\n 22381: a4 = a3 >> 0x28\n 22384: u8 [a0 + 0x1d] = a4\n 22387: a4 = a3 >> 0x20\n 22390: u8 [a0 + 0x1c] = a4\n 22393: a4 = a3 >> 0x18\n 22396: u8 [a0 + 0x1b] = a4\n 22399: a4 = a3 >> 0x10\n 22402: u8 [a0 + 0x1a] = a4\n 22405: a4 = a3 >> 0x8\n 22408: u8 [a0 + 0x19] = a4\n 22411: u8 [a0 + 0x18] = a3\n 22414: u8 [a0 + 0x10] = a2\n 22417: u8 [a0 + 11] = 0\n 22420: u8 [a0 + 10] = 0\n 22423: u8 [a0 + 9] = 0\n 22426: u8 [a0 + 7] = 0\n 22429: u8 [a0 + 6] = 0\n 22432: u8 [a0 + 5] = 0\n 22435: u8 [a0 + 4] = 0\n 22438: u8 [a0 + 3] = 0\n 22441: u8 [a0 + 2] = 0\n 22444: u8 [a0 + 1] = 0\n 22447: u8 [a0 + 0] = 0\n 22449: a3 = a2 >> 0x38\n 22452: u8 [a0 + 0x17] = a3\n 22455: a3 = a2 >> 0x30\n 22458: u8 [a0 + 0x16] = a3\n 22461: a3 = a2 >> 0x28\n 22464: u8 [a0 + 0x15] = a3\n 22467: a3 = a2 >> 0x20\n 22470: u8 [a0 + 0x14] = a3\n 22473: a3 = a2 >> 0x18\n 22476: u8 [a0 + 0x13] = a3\n 22479: a3 = a2 >> 0x10\n 22482: u8 [a0 + 0x12] = a3\n 22485: a2 = a2 >> 0x8\n 22488: u8 [a0 + 0x11] = a2\n 22491: u8 [a0 + 0x8] = a1\n 22494: a2 = a1 >> 0x38\n 22497: u8 [a0 + 0xf] = a2\n 22500: a2 = a1 >> 0x30\n 22503: u8 [a0 + 0xe] = a2\n 22506: a2 = a1 >> 0x28\n 22509: u8 [a0 + 0xd] = a2\n 22512: a1 = a1 >> 0x20\n 22515: s1 = 0x100000000\n 22525: a2 = 0xffffffdc\n 22535: a3 = u64 [sp + 0x70]\n 22538: a2 = a3 <u a2\n 22541: a3 = u64 [sp + 0x78]\n 22544: a2 = 0 if a3 != 0\n 22546: a3 = u64 [sp + 0x58]\n 22549: a2 = 0 if a3 != 0\n 22551: u8 [a0 + 0xc] = a1\n 22554: jump @343 if a2 == 0\n      : @304 (gas: 4)\n 22558: a0 = u64 [sp + 0x68]\n 22561: i32 a0 = a0 + 0x24\n 22564: a1 = 0x20\n 22567: ra = 272, jump @0\n      : @305 [@dyn 136] (gas: 43)\n 22573: a2 = u64 [sp + 0x50]\n 22576: a1 = a2 << 0x38\n 22579: u8 [a0 + 0x1f] = a2\n 22582: u8 [a0 + 30] = 0\n 22585: u8 [a0 + 29] = 0\n 22588: u8 [a0 + 28] = 0\n 22591: u8 [a0 + 27] = 0\n 22594: u8 [a0 + 26] = 0\n 22597: u8 [a0 + 25] = 0\n 22600: u64 [sp + 0x48] = a1\n 22603: u8 [a0 + 0x18] = a1\n 22606: u8 [a0 + 23] = 0\n 22609: u8 [a0 + 22] = 0\n 22612: u8 [a0 + 21] = 0\n 22615: u8 [a0 + 20] = 0\n 22618: u8 [a0 + 19] = 0\n 22621: u8 [a0 + 18] = 0\n 22624: u8 [a0 + 17] = 0\n 22627: u8 [a0 + 16] = 0\n 22630: u8 [a0 + 15] = 0\n 22633: u8 [a0 + 14] = 0\n 22636: u8 [a0 + 13] = 0\n 22639: u8 [a0 + 12] = 0\n 22642: u8 [a0 + 11] = 0\n 22645: u8 [a0 + 10] = 0\n 22648: u8 [a0 + 9] = 0\n 22651: u8 [a0 + 8] = 0\n 22654: u8 [a0 + 7] = 0\n 22657: u8 [a0 + 6] = 0\n 22660: u8 [a0 + 5] = 0\n 22663: u8 [a0 + 4] = 0\n 22666: u8 [a0 + 3] = 0\n 22669: u8 [a0 + 2] = 0\n 22672: u8 [a0 + 1] = 0\n 22675: a1 = s1 + 0xffffffffffffffbc\n 22678: a2 = u64 [sp + 0x70]\n 22681: a1 = a2 <u a1\n 22684: a2 = u64 [sp + 0x78]\n 22687: a1 = 0 if a2 != 0\n 22689: a2 = u64 [sp + 0x58]\n 22692: a1 = 0 if a2 != 0\n 22694: u8 [a0 + 0] = 0\n 22696: jump @343 if a1 == 0\n      : @306 (gas: 4)\n 22700: s1 = u64 [sp + 0x68]\n 22703: i32 a0 = s1 + 0x44\n 22706: a1 = 0x20\n 22709: ra = 274, jump @0\n      : @307 [@dyn 137] (gas: 56)\n 22715: u8 [a0 + 31] = 0x1\n 22719: u8 [a0 + 30] = 0\n 22722: u8 [a0 + 29] = 0\n 22725: u8 [a0 + 28] = 0\n 22728: u8 [a0 + 27] = 0\n 22731: u8 [a0 + 26] = 0\n 22734: u8 [a0 + 25] = 0\n 22737: u8 [a0 + 24] = 0\n 22740: u8 [a0 + 23] = 0\n 22743: u8 [a0 + 22] = 0\n 22746: u8 [a0 + 21] = 0\n 22749: u8 [a0 + 20] = 0\n 22752: u8 [a0 + 19] = 0\n 22755: u8 [a0 + 18] = 0\n 22758: u8 [a0 + 17] = 0\n 22761: u8 [a0 + 16] = 0\n 22764: u8 [a0 + 15] = 0\n 22767: u8 [a0 + 14] = 0\n 22770: u8 [a0 + 13] = 0\n 22773: u8 [a0 + 12] = 0\n 22776: u8 [a0 + 11] = 0\n 22779: u8 [a0 + 10] = 0\n 22782: u8 [a0 + 9] = 0\n 22785: u8 [a0 + 8] = 0\n 22788: u8 [a0 + 7] = 0\n 22791: u8 [a0 + 6] = 0\n 22794: u8 [a0 + 5] = 0\n 22797: u8 [a0 + 4] = 0\n 22800: u8 [a0 + 3] = 0\n 22803: u8 [a0 + 2] = 0\n 22806: u8 [a0 + 1] = 0\n 22809: u8 [a0 + 0] = 0\n 22811: ecalli 9 // 'ref_time_left'\n 22813: a0 = u64 [sp + 0x20]\n 22816: a0 = reverse a0\n 22818: a1 = a0 << 0x20\n 22821: a2 = u64 [sp + 0x28]\n 22824: a2 = reverse a2\n 22826: a2 = a2 >> 0x20\n 22829: a1 = a1 | a2\n 22832: a2 = u64 [sp + 0x30]\n 22835: a2 = reverse a2\n 22837: a3 = a2 << 0x20\n 22840: a0 = a0 >> 0x20\n 22843: a0 = a0 | a3\n 22846: a2 = a2 >> 0x20\n 22849: u64 [sp + 0x1e8] = a0\n 22853: u64 [sp + 0x1e0] = a1\n 22857: u32 [sp + 0x1f0] = a2\n 22861: u64 [sp + 536] = 0\n 22865: u64 [sp + 528] = 0\n 22869: u64 [sp + 520] = 0\n 22873: u64 [sp + 512] = 0\n 22877: a1 = 0x64\n 22880: a0 = s1\n 22882: ra = 276, jump @0\n      : @308 [@dyn 138] (gas: 4)\n 22888: u64 [sp + 0x58] = a0\n 22891: a1 = 0x20\n 22894: a0 = s1\n 22896: ra = 278, jump @0\n      : @309 [@dyn 139] (gas: 31)\n 22902: u32 [sp + 544] = 0x20\n 22907: u64 [sp + 600] = 0\n 22911: u64 [sp + 592] = 0\n 22915: u64 [sp + 584] = 0\n 22919: u64 [sp + 576] = 0\n 22923: a1 = sp + 0x1e0\n 22927: a1 = a1 << 0x20\n 22930: a1 = a1 >> 0x20\n 22933: a2 = 0x1800000000\n 22943: s1 = a1 | a2\n 22946: a1 = sp + 0x200\n 22950: a1 = a1 << 0x20\n 22953: a1 = a1 >> 0x20\n 22956: a2 = sp + 0x240\n 22960: a2 = a2 << 0x20\n 22963: a3 = a2 | a1\n 22966: a1 = u64 [sp + 0x58]\n 22969: a1 = a1 << 0x20\n 22972: a1 = a1 >> 0x20\n 22975: a2 = 0x6400000000\n 22985: a4 = a1 | a2\n 22988: a0 = a0 << 0x20\n 22991: a0 = a0 >> 0x20\n 22994: a1 = sp + 0x220\n 22998: a1 = a1 << 0x20\n 23001: a5 = a1 | a0\n 23004: a1 = 0xffffffffffffffff\n 23007: a2 = 0xffffffffffffffff\n 23010: a0 = s1\n 23012: ecalli 1 // 'call'\n 23014: fallthrough\n      : @310 (gas: 1)\n 23015: jump @336 if a0 != 0\n      : @311 (gas: 2)\n 23019: ecalli 11 // 'return_data_size'\n 23021: fallthrough\n      : @312 (gas: 2)\n 23022: a1 = 0x20\n 23025: jump @314 if a0 >=u a1\n      : @313 (gas: 3)\n 23028: ecalli 11 // 'return_data_size'\n 23030: a1 = a0\n 23032: fallthrough\n      : @314 (gas: 28)\n 23033: a4 = 0\n 23035: a3 = u64 [sp + 0x60]\n 23038: a2 = u64 [sp + 0x70]\n 23041: s1 = u64 [sp + 0x78]\n 23044: a0 = a1 + 0x1f\n 23047: u64 [sp + 0x70] = a1\n 23050: a1 = a0 <u a1\n 23053: u64 [sp + 120] = 0\n 23056: a1 = a1 & 0x1\n 23059: a0 = a0 & 0xffffffffffffffe0\n 23062: a2 = a2 + a0\n 23065: u64 [sp + 0x60] = a2\n 23068: a0 = a2 <u a0\n 23071: s1 = s1 + a1\n 23074: s1 = s1 + a0\n 23077: a2 = s1 ^ a1\n 23080: a1 = s1 <u a1\n 23083: a1 = a0 if a2 == 0\n 23086: a0 = u64 [sp + 0x18]\n 23089: a1 = a1 + a0\n 23092: a0 = a1 <u a0\n 23095: a0 = a0 + a3\n 23098: u64 [sp + 0x58] = a1\n 23101: u64 [sp + 0x50] = a0\n 23104: a0 = a0 | a1\n 23107: a1 = s1 <u 0x1\n 23110: a1 = 0 if a0 != 0\n 23112: jump @346 if a1 == 0\n      : @315 (gas: 3)\n 23116: a0 = 0x40\n 23119: a1 = 0x20\n 23122: ra = 280, jump @0\n      : @316 [@dyn 140] (gas: 79)\n 23128: a1 = u64 [sp + 0x50]\n 23131: a1 = reverse a1\n 23133: a2 = u64 [sp + 0x58]\n 23136: a2 = reverse a2\n 23138: a3 = reverse s1\n 23140: a4 = u64 [sp + 0x60]\n 23143: a4 = reverse a4\n 23145: u8 [a0 + 0x18] = a4\n 23148: a5 = a4 >> 0x38\n 23151: u8 [a0 + 0x1f] = a5\n 23154: a5 = a4 >> 0x30\n 23157: u8 [a0 + 0x1e] = a5\n 23160: a5 = a4 >> 0x28\n 23163: u8 [a0 + 0x1d] = a5\n 23166: a5 = a4 >> 0x20\n 23169: u8 [a0 + 0x1c] = a5\n 23172: a5 = a4 >> 0x18\n 23175: u8 [a0 + 0x1b] = a5\n 23178: a5 = a4 >> 0x10\n 23181: u8 [a0 + 0x1a] = a5\n 23184: a4 = a4 >> 0x8\n 23187: u8 [a0 + 0x19] = a4\n 23190: u8 [a0 + 0x10] = a3\n 23193: a4 = a3 >> 0x38\n 23196: u8 [a0 + 0x17] = a4\n 23199: a4 = a3 >> 0x30\n 23202: u8 [a0 + 0x16] = a4\n 23205: a4 = a3 >> 0x28\n 23208: u8 [a0 + 0x15] = a4\n 23211: a4 = a3 >> 0x20\n 23214: u8 [a0 + 0x14] = a4\n 23217: a4 = a3 >> 0x18\n 23220: u8 [a0 + 0x13] = a4\n 23223: a4 = a3 >> 0x10\n 23226: u8 [a0 + 0x12] = a4\n 23229: a3 = a3 >> 0x8\n 23232: u8 [a0 + 0x11] = a3\n 23235: u8 [a0 + 0x8] = a2\n 23238: a3 = a2 >> 0x38\n 23241: u8 [a0 + 0xf] = a3\n 23244: a3 = a2 >> 0x30\n 23247: u8 [a0 + 0xe] = a3\n 23250: a3 = a2 >> 0x28\n 23253: u8 [a0 + 0xd] = a3\n 23256: a3 = a2 >> 0x20\n 23259: u8 [a0 + 0xc] = a3\n 23262: a3 = a2 >> 0x18\n 23265: u8 [a0 + 0xb] = a3\n 23268: a3 = a2 >> 0x10\n 23271: u8 [a0 + 0xa] = a3\n 23274: a2 = a2 >> 0x8\n 23277: u8 [a0 + 0x9] = a2\n 23280: u8 [a0] = a1\n 23282: a2 = a1 >> 0x38\n 23285: u8 [a0 + 0x7] = a2\n 23288: a2 = a1 >> 0x30\n 23291: u8 [a0 + 0x6] = a2\n 23294: a2 = a1 >> 0x28\n 23297: u8 [a0 + 0x5] = a2\n 23300: a2 = a1 >> 0x20\n 23303: u8 [a0 + 0x4] = a2\n 23306: a2 = a1 >> 0x18\n 23309: u8 [a0 + 0x3] = a2\n 23312: a2 = a1 >> 0x10\n 23315: u8 [a0 + 0x2] = a2\n 23318: a1 = a1 >> 0x8\n 23321: a5 = u64 [sp + 0x78]\n 23324: a2 = a5 >u 0\n 23326: a3 = u64 [sp + 0x70]\n 23329: a3 = a3 <u 0x20\n 23332: a3 = a3 ^ 0x1\n 23335: a3 = a2 if a5 != 0\n 23338: a2 = a5 >u 0\n 23340: a4 = a5 >u 0\n 23342: a4 = a2 if a5 == 0\n 23345: a2 = a5 | a5\n 23348: a4 = a3 if a2 == 0\n 23351: u8 [a0 + 0x1] = a1\n 23354: jump @344 if a4 == 0\n      : @317 (gas: 3)\n 23358: a1 = 0x20\n 23361: a0 = u64 [sp + 0x68]\n 23364: ra = 282, jump @0\n      : @318 [@dyn 141] (gas: 96)\n 23370: a1 = u8 [a0 + 0x9]\n 23373: a2 = u8 [a0 + 0x8]\n 23376: a3 = u8 [a0 + 0xa]\n 23379: a4 = u8 [a0 + 0xb]\n 23382: a1 = a1 << 0x8\n 23385: a1 = a1 | a2\n 23388: a3 = a3 << 0x10\n 23391: a4 = a4 << 0x18\n 23394: a3 = a3 | a4\n 23397: a1 = a1 | a3\n 23400: a2 = u8 [a0 + 0xd]\n 23403: a3 = u8 [a0 + 0xc]\n 23406: a4 = u8 [a0 + 0xe]\n 23409: a5 = u8 [a0 + 0xf]\n 23412: a2 = a2 << 0x8\n 23415: a2 = a2 | a3\n 23418: a4 = a4 << 0x10\n 23421: a5 = a5 << 0x18\n 23424: a4 = a4 | a5\n 23427: a2 = a2 | a4\n 23430: a2 = a2 << 0x20\n 23433: t0 = a2 | a1\n 23436: a2 = u8 [a0 + 0x1]\n 23439: a3 = u8 [a0]\n 23441: a4 = u8 [a0 + 0x2]\n 23444: a5 = u8 [a0 + 0x3]\n 23447: a2 = a2 << 0x8\n 23450: a2 = a2 | a3\n 23453: a4 = a4 << 0x10\n 23456: a5 = a5 << 0x18\n 23459: a4 = a4 | a5\n 23462: a2 = a2 | a4\n 23465: a3 = u8 [a0 + 0x5]\n 23468: a4 = u8 [a0 + 0x4]\n 23471: a5 = u8 [a0 + 0x6]\n 23474: s1 = u8 [a0 + 0x7]\n 23477: a3 = a3 << 0x8\n 23480: a3 = a3 | a4\n 23483: a5 = a5 << 0x10\n 23486: s1 = s1 << 0x18\n 23489: a5 = a5 | s1\n 23492: a3 = a3 | a5\n 23495: a3 = a3 << 0x20\n 23498: a2 = a2 | a3\n 23501: a3 = u8 [a0 + 0x19]\n 23504: a4 = u8 [a0 + 0x18]\n 23507: a5 = u8 [a0 + 0x1a]\n 23510: s1 = u8 [a0 + 0x1b]\n 23513: a3 = a3 << 0x8\n 23516: a3 = a3 | a4\n 23519: a5 = a5 << 0x10\n 23522: s1 = s1 << 0x18\n 23525: a5 = a5 | s1\n 23528: a3 = a3 | a5\n 23531: a4 = u8 [a0 + 0x1d]\n 23534: a5 = u8 [a0 + 0x1c]\n 23537: s1 = u8 [a0 + 0x1e]\n 23540: a1 = u8 [a0 + 0x1f]\n 23543: a4 = a4 << 0x8\n 23546: a4 = a4 | a5\n 23549: s1 = s1 << 0x10\n 23552: a1 = a1 << 0x18\n 23555: a1 = a1 | s1\n 23558: a1 = a1 | a4\n 23561: a1 = a1 << 0x20\n 23564: a3 = a3 | a1\n 23567: a1 = u8 [a0 + 0x11]\n 23570: a4 = u8 [a0 + 0x10]\n 23573: a5 = u8 [a0 + 0x12]\n 23576: s1 = u8 [a0 + 0x13]\n 23579: a1 = a1 << 0x8\n 23582: a1 = a1 | a4\n 23585: a5 = a5 << 0x10\n 23588: s1 = s1 << 0x18\n 23591: a5 = a5 | s1\n 23594: a1 = a1 | a5\n 23597: a4 = u8 [a0 + 0x15]\n 23600: a5 = u8 [a0 + 0x14]\n 23603: s1 = u8 [a0 + 0x16]\n 23606: a0 = u8 [a0 + 0x17]\n 23609: a4 = a4 << 0x8\n 23612: a4 = a4 | a5\n 23615: s1 = s1 << 0x10\n 23618: a0 = a0 << 0x18\n 23621: a0 = a0 | s1\n 23624: a0 = a0 | a4\n 23627: a0 = a0 << 0x20\n 23630: a0 = a0 | a1\n 23633: a1 = reverse a0\n 23635: a4 = reverse a3\n 23637: a4 = a4 <u 0x2\n 23640: a4 = 0 if a1 != 0\n 23642: a1 = t0 | a2\n 23645: a1 = reverse a1\n 23647: a4 = 0 if a1 != 0\n 23649: jump @344 if a4 == 0\n      : @319 (gas: 4)\n 23653: a0 = a0 | a2\n 23656: a1 = t0 | a3\n 23659: a0 = a0 | a1\n 23662: jump @337 if a0 == 0\n      : @320 (gas: 14)\n 23666: i32 a0 = sp + 0x260\n 23670: ecalli 5 // 'caller'\n 23672: a0 = u32 [sp + 0x270]\n 23676: u64 [sp + 0x68] = a0\n 23679: a0 = u64 [sp + 0x268]\n 23683: u64 [sp + 0x50] = a0\n 23686: s1 = u64 [sp + 0x260]\n 23690: u64 [sp + 408] = 0\n 23694: u64 [sp + 400] = 0\n 23698: u64 [sp + 384] = 0x80\n 23704: a0 = sp + 0x1a0\n 23708: a1 = sp + 0x180\n 23712: u64 [sp + 392] = 0\n 23716: ra = 284, jump @49\n      : @321 [@dyn 142] (gas: 16)\n 23722: a2 = u64 [sp + 0x1b8]\n 23726: a3 = u64 [sp + 0x1b0]\n 23730: a0 = u64 [sp + 0x1a8]\n 23734: a1 = u64 [sp + 0x1a0]\n 23738: u64 [sp + 0x70] = a0\n 23741: u64 [sp + 0x58] = a2\n 23744: a0 = a0 | a2\n 23747: u64 [sp + 0x78] = a1\n 23750: a1 = a1 | a3\n 23753: a1 = a1 | a0\n 23756: a1 = a1 >> 0x20\n 23759: u64 [sp + 0x60] = a3\n 23762: a0 = a0 | a3\n 23765: a0 = a0 << 0x20\n 23768: a0 = a0 | a1\n 23771: jump @343 if a0 != 0\n      : @322 (gas: 17)\n 23775: a0 = reverse s1\n 23777: a0 = a0 << 0x20\n 23780: a1 = u64 [sp + 0x50]\n 23783: a1 = reverse a1\n 23785: a2 = a1 >> 0x20\n 23788: a0 = a0 | a2\n 23791: u64 [sp + 0x50] = a0\n 23794: a1 = a1 << 0x20\n 23797: a0 = u64 [sp + 0x68]\n 23800: a0 = reverse a0\n 23802: a0 = a0 >> 0x20\n 23805: a0 = a0 | a1\n 23808: u64 [sp + 0x40] = a0\n 23811: a0 = i32 [sp + 0x78]\n 23814: a1 = 0x20\n 23817: u64 [sp + 0x68] = a0\n 23820: ra = 286, jump @0\n      : @323 [@dyn 143] (gas: 65)\n 23826: a1 = u64 [sp + 0x40]\n 23829: a1 = reverse a1\n 23831: a2 = u64 [sp + 0x50]\n 23834: a2 = reverse a2\n 23836: a3 = s1 >> 0x18\n 23839: u8 [a0 + 0xf] = a3\n 23842: a3 = s1 >> 0x10\n 23845: u8 [a0 + 0xe] = a3\n 23848: a3 = s1 >> 0x8\n 23851: u8 [a0 + 0xd] = a3\n 23854: u8 [a0 + 0xc] = s1\n 23857: u8 [a0 + 11] = 0\n 23860: u8 [a0 + 10] = 0\n 23863: u8 [a0 + 9] = 0\n 23866: u8 [a0 + 8] = 0\n 23869: u8 [a0 + 7] = 0\n 23872: u8 [a0 + 6] = 0\n 23875: u8 [a0 + 5] = 0\n 23878: u8 [a0 + 4] = 0\n 23881: u8 [a0 + 3] = 0\n 23884: u8 [a0 + 2] = 0\n 23887: u8 [a0 + 1] = 0\n 23890: u8 [a0 + 0] = 0\n 23892: u8 [a0 + 0x10] = a2\n 23895: u8 [a0 + 0x18] = a1\n 23898: a3 = a2 >> 0x38\n 23901: u8 [a0 + 0x17] = a3\n 23904: a3 = a2 >> 0x30\n 23907: u8 [a0 + 0x16] = a3\n 23910: a3 = a2 >> 0x28\n 23913: u8 [a0 + 0x15] = a3\n 23916: a3 = a2 >> 0x20\n 23919: u8 [a0 + 0x14] = a3\n 23922: a3 = a2 >> 0x18\n 23925: u8 [a0 + 0x13] = a3\n 23928: a3 = a2 >> 0x10\n 23931: u8 [a0 + 0x12] = a3\n 23934: a2 = a2 >> 0x8\n 23937: u8 [a0 + 0x11] = a2\n 23940: a2 = a1 >> 0x38\n 23943: u8 [a0 + 0x1f] = a2\n 23946: a2 = a1 >> 0x30\n 23949: u8 [a0 + 0x1e] = a2\n 23952: a2 = a1 >> 0x28\n 23955: u8 [a0 + 0x1d] = a2\n 23958: a2 = a1 >> 0x20\n 23961: u8 [a0 + 0x1c] = a2\n 23964: a2 = a1 >> 0x18\n 23967: u8 [a0 + 0x1b] = a2\n 23970: a2 = a1 >> 0x10\n 23973: u8 [a0 + 0x1a] = a2\n 23976: a1 = a1 >> 0x8\n 23979: a2 = u64 [sp + 0x58]\n 23982: a4 = u64 [sp + 0x60]\n 23985: a4 = a4 | a2\n 23988: s1 = 0x100000000\n 23998: a2 = 0xffffffe0\n 24008: a3 = u64 [sp + 0x78]\n 24011: a2 = a3 <u a2\n 24014: a3 = u64 [sp + 0x70]\n 24017: a2 = 0 if a3 != 0\n 24019: u64 [sp + 0x50] = a4\n 24022: a2 = 0 if a4 != 0\n 24024: u8 [a0 + 0x19] = a1\n 24027: jump @343 if a2 == 0\n      : @324 (gas: 4)\n 24031: a0 = u64 [sp + 0x68]\n 24034: i32 a0 = a0 + 0x20\n 24037: a1 = 0x20\n 24040: ra = 288, jump @0\n      : @325 [@dyn 144] (gas: 48)\n 24046: u8 [a0 + 23] = 0\n 24049: u8 [a0 + 22] = 0\n 24052: u8 [a0 + 21] = 0\n 24055: u8 [a0 + 20] = 0\n 24058: u8 [a0 + 19] = 0\n 24061: u8 [a0 + 18] = 0\n 24064: u8 [a0 + 17] = 0\n 24067: u8 [a0 + 16] = 0\n 24070: u8 [a0 + 15] = 0\n 24073: u8 [a0 + 14] = 0\n 24076: u8 [a0 + 13] = 0\n 24079: u8 [a0 + 12] = 0\n 24082: u8 [a0 + 11] = 0\n 24085: u8 [a0 + 10] = 0\n 24088: u8 [a0 + 9] = 0\n 24091: u8 [a0 + 8] = 0\n 24094: u8 [a0 + 7] = 0\n 24097: u8 [a0 + 6] = 0\n 24100: u8 [a0 + 5] = 0\n 24103: u8 [a0 + 4] = 0\n 24106: u8 [a0 + 3] = 0\n 24109: u8 [a0 + 2] = 0\n 24112: u8 [a0 + 1] = 0\n 24115: u8 [a0 + 0] = 0\n 24117: a2 = u64 [sp + 0x48]\n 24120: u8 [a0 + 0x18] = a2\n 24123: a1 = a2 >> 0x38\n 24126: u8 [a0 + 0x1f] = a1\n 24129: a1 = a2 >> 0x30\n 24132: u8 [a0 + 0x1e] = a1\n 24135: a1 = a2 >> 0x28\n 24138: u8 [a0 + 0x1d] = a1\n 24141: a1 = a2 >> 0x20\n 24144: u8 [a0 + 0x1c] = a1\n 24147: a1 = a2 >> 0x18\n 24150: u8 [a0 + 0x1b] = a1\n 24153: a1 = a2 >> 0x10\n 24156: u8 [a0 + 0x1a] = a1\n 24159: a1 = a2 >> 0x8\n 24162: a2 = s1 + 0xffffffffffffffc0\n 24165: a3 = u64 [sp + 0x78]\n 24168: a2 = a3 <u a2\n 24171: a3 = u64 [sp + 0x70]\n 24174: a2 = 0 if a3 != 0\n 24176: a3 = u64 [sp + 0x50]\n 24179: a2 = 0 if a3 != 0\n 24181: u8 [a0 + 0x19] = a1\n 24184: jump @343 if a2 == 0\n      : @326 (gas: 4)\n 24188: a0 = u64 [sp + 0x68]\n 24191: i32 a0 = a0 + 0x40\n 24194: a1 = 0x20\n 24197: ra = 290, jump @0\n      : @327 [@dyn 145] (gas: 42)\n 24203: a1 = u64 [sp + 0x10]\n 24206: u8 [a0 + 0x1f] = a1\n 24209: s1 = 0x1\n 24212: a1 = 0xffffffa0\n 24222: a2 = u64 [sp + 0x78]\n 24225: a1 = a2 <u a1\n 24228: a2 = u64 [sp + 0x70]\n 24231: a1 = 0 if a2 != 0\n 24233: a2 = u64 [sp + 0x50]\n 24236: a1 = 0 if a2 != 0\n 24238: u8 [a0 + 30] = 0\n 24241: u8 [a0 + 29] = 0\n 24244: u8 [a0 + 28] = 0\n 24247: u8 [a0 + 27] = 0\n 24250: u8 [a0 + 26] = 0\n 24253: u8 [a0 + 25] = 0\n 24256: u8 [a0 + 24] = 0\n 24259: u8 [a0 + 23] = 0\n 24262: u8 [a0 + 22] = 0\n 24265: u8 [a0 + 21] = 0\n 24268: u8 [a0 + 20] = 0\n 24271: u8 [a0 + 19] = 0\n 24274: u8 [a0 + 18] = 0\n 24277: u8 [a0 + 17] = 0\n 24280: u8 [a0 + 16] = 0\n 24283: u8 [a0 + 15] = 0\n 24286: u8 [a0 + 14] = 0\n 24289: u8 [a0 + 13] = 0\n 24292: u8 [a0 + 12] = 0\n 24295: u8 [a0 + 11] = 0\n 24298: u8 [a0 + 10] = 0\n 24301: u8 [a0 + 9] = 0\n 24304: u8 [a0 + 8] = 0\n 24307: u8 [a0 + 7] = 0\n 24310: u8 [a0 + 6] = 0\n 24313: u8 [a0 + 5] = 0\n 24316: u8 [a0 + 4] = 0\n 24319: u8 [a0 + 3] = 0\n 24322: u8 [a0 + 2] = 0\n 24325: u8 [a0 + 1] = 0\n 24328: u8 [a0 + 0] = 0\n 24330: jump @343 if a1 == 0\n      : @328 (gas: 4)\n 24334: a0 = u64 [sp + 0x68]\n 24337: i32 a0 = a0 + 0x60\n 24340: a1 = 0x20\n 24343: ra = 292, jump @0\n      : @329 [@dyn 146] (gas: 85)\n 24349: u8 [a0 + 0x1f] = s1\n 24352: u8 [a0 + 30] = 0\n 24355: u8 [a0 + 29] = 0\n 24358: u8 [a0 + 28] = 0\n 24361: u8 [a0 + 27] = 0\n 24364: u8 [a0 + 26] = 0\n 24367: u8 [a0 + 25] = 0\n 24370: u8 [a0 + 24] = 0\n 24373: u8 [a0 + 23] = 0\n 24376: u8 [a0 + 22] = 0\n 24379: u8 [a0 + 21] = 0\n 24382: u8 [a0 + 20] = 0\n 24385: u8 [a0 + 19] = 0\n 24388: u8 [a0 + 18] = 0\n 24391: u8 [a0 + 17] = 0\n 24394: u8 [a0 + 16] = 0\n 24397: u8 [a0 + 15] = 0\n 24400: u8 [a0 + 14] = 0\n 24403: u8 [a0 + 13] = 0\n 24406: u8 [a0 + 12] = 0\n 24409: u8 [a0 + 11] = 0\n 24412: u8 [a0 + 10] = 0\n 24415: u8 [a0 + 9] = 0\n 24418: u8 [a0 + 8] = 0\n 24421: u8 [a0 + 7] = 0\n 24424: u8 [a0 + 6] = 0\n 24427: u8 [a0 + 5] = 0\n 24430: u8 [a0 + 4] = 0\n 24433: u8 [a0 + 3] = 0\n 24436: u8 [a0 + 2] = 0\n 24439: u8 [a0 + 1] = 0\n 24442: u8 [a0 + 0] = 0\n 24444: a0 = u64 [sp + 0x58]\n 24447: u64 [sp + 0x158] = a0\n 24451: a0 = u64 [sp + 0x60]\n 24454: u64 [sp + 0x150] = a0\n 24458: a0 = u64 [sp + 0x70]\n 24461: u64 [sp + 0x148] = a0\n 24465: a0 = u64 [sp + 0x78]\n 24468: u64 [sp + 0x140] = a0\n 24472: u64 [sp + 376] = 0\n 24476: u64 [sp + 368] = 0\n 24480: u64 [sp + 360] = 0\n 24484: a0 = sp + 0x160\n 24488: a1 = sp + 0x140\n 24492: u64 [sp + 352] = 0\n 24496: ra = 0x126\n 24500: sp = sp + 0xfffffffffffffde0\n 24504: u64 [sp + 0x218] = ra\n 24508: u64 [sp + 0x210] = s0\n 24512: u64 [sp + 0x208] = s1\n 24516: s0 = sp + 0x220\n 24520: sp = sp & 0xffffffffffffffe0\n 24523: a2 = u64 [a1 + 0x18]\n 24526: u64 [sp + 0x38] = a2\n 24529: a2 = u64 [a1 + 0x10]\n 24532: u64 [sp + 0x30] = a2\n 24535: a2 = u64 [a1 + 0x8]\n 24538: u64 [sp + 0x28] = a2\n 24541: a1 = u64 [a1]\n 24543: u64 [sp + 0x20] = a1\n 24546: a3 = u64 [a0 + 0x18]\n 24549: a2 = u64 [a0 + 0x10]\n 24552: a1 = u64 [a0 + 0x8]\n 24555: a0 = u64 [a0]\n 24557: u64 [sp + 0x40] = a3\n 24560: u64 [sp + 0x1d8] = a3\n 24564: u64 [sp + 0x48] = a2\n 24567: u64 [sp + 0x1d0] = a2\n 24571: u64 [sp + 0x50] = a1\n 24574: u64 [sp + 0x1c8] = a1\n 24578: u64 [sp + 0x58] = a0\n 24581: u64 [sp + 0x1c0] = a0\n 24585: u64 [sp + 504] = 0\n 24589: u64 [sp + 496] = 0\n 24593: u64 [sp + 488] = 0\n 24597: u64 [sp + 480] = 0\n 24601: u32 [sp + 416] = 0x20\n 24606: i32 a1 = sp + 0x1c0\n 24610: i32 a3 = sp + 0x1e0\n 24614: i32 a4 = sp + 0x1a0\n 24618: a2 = 0xffffffffffffffff\n 24621: a0 = 0\n 24623: ecalli 7 // 'get_storage'\n 24625: jump @285\n      : @330 [@dyn 147] (gas: 6)\n 24628: sp = s0 + 0xfffffffffffffd20\n 24632: ra = u64 [sp + 0x2d8]\n 24636: s0 = u64 [sp + 0x2d0]\n 24640: s1 = u64 [sp + 0x2c8]\n 24644: sp = sp + 0x2e0\n 24648: ret\n      : @331 (gas: 3)\n 24650: a0 = 0x40\n 24653: a1 = 0x20\n 24656: ra = 296, jump @0\n      : @332 [@dyn 148] (gas: 103)\n 24662: a1 = u8 [a0 + 0x11]\n 24665: a2 = u8 [a0 + 0x10]\n 24668: a3 = u8 [a0 + 0x12]\n 24671: a4 = u8 [a0 + 0x13]\n 24674: a1 = a1 << 0x8\n 24677: a1 = a1 | a2\n 24680: a3 = a3 << 0x10\n 24683: a4 = a4 << 0x18\n 24686: a3 = a3 | a4\n 24689: a1 = a1 | a3\n 24692: a2 = u8 [a0 + 0x15]\n 24695: a3 = u8 [a0 + 0x14]\n 24698: a4 = u8 [a0 + 0x16]\n 24701: a5 = u8 [a0 + 0x17]\n 24704: a2 = a2 << 0x8\n 24707: a2 = a2 | a3\n 24710: a4 = a4 << 0x10\n 24713: a5 = a5 << 0x18\n 24716: a4 = a4 | a5\n 24719: a2 = a2 | a4\n 24722: a2 = a2 << 0x20\n 24725: t0 = a2 | a1\n 24728: a2 = u8 [a0 + 0x1]\n 24731: a3 = u8 [a0]\n 24733: a4 = u8 [a0 + 0x2]\n 24736: a5 = u8 [a0 + 0x3]\n 24739: a2 = a2 << 0x8\n 24742: a2 = a2 | a3\n 24745: a4 = a4 << 0x10\n 24748: a5 = a5 << 0x18\n 24751: a4 = a4 | a5\n 24754: a2 = a2 | a4\n 24757: a3 = u8 [a0 + 0x5]\n 24760: a4 = u8 [a0 + 0x4]\n 24763: a5 = u8 [a0 + 0x6]\n 24766: s1 = u8 [a0 + 0x7]\n 24769: a3 = a3 << 0x8\n 24772: a3 = a3 | a4\n 24775: a5 = a5 << 0x10\n 24778: s1 = s1 << 0x18\n 24781: a5 = a5 | s1\n 24784: a3 = a3 | a5\n 24787: a3 = a3 << 0x20\n 24790: a2 = a2 | a3\n 24793: a3 = u8 [a0 + 0x19]\n 24796: a4 = u8 [a0 + 0x18]\n 24799: a5 = u8 [a0 + 0x1a]\n 24802: s1 = u8 [a0 + 0x1b]\n 24805: a3 = a3 << 0x8\n 24808: a3 = a3 | a4\n 24811: a5 = a5 << 0x10\n 24814: s1 = s1 << 0x18\n 24817: a5 = a5 | s1\n 24820: a3 = a3 | a5\n 24823: a4 = u8 [a0 + 0x1d]\n 24826: a5 = u8 [a0 + 0x1c]\n 24829: s1 = u8 [a0 + 0x1e]\n 24832: a1 = u8 [a0 + 0x1f]\n 24835: a4 = a4 << 0x8\n 24838: a4 = a4 | a5\n 24841: s1 = s1 << 0x10\n 24844: a1 = a1 << 0x18\n 24847: a1 = a1 | s1\n 24850: a1 = a1 | a4\n 24853: a1 = a1 << 0x20\n 24856: a3 = a3 | a1\n 24859: a1 = u8 [a0 + 0x9]\n 24862: a4 = u8 [a0 + 0x8]\n 24865: a5 = u8 [a0 + 0xa]\n 24868: s1 = u8 [a0 + 0xb]\n 24871: a1 = a1 << 0x8\n 24874: a1 = a1 | a4\n 24877: a5 = a5 << 0x10\n 24880: s1 = s1 << 0x18\n 24883: a5 = a5 | s1\n 24886: a1 = a1 | a5\n 24889: a4 = u8 [a0 + 0xd]\n 24892: a5 = u8 [a0 + 0xc]\n 24895: s1 = u8 [a0 + 0xe]\n 24898: a0 = u8 [a0 + 0xf]\n 24901: a4 = a4 << 0x8\n 24904: a4 = a4 | a5\n 24907: s1 = s1 << 0x10\n 24910: a0 = a0 << 0x18\n 24913: a0 = a0 | s1\n 24916: a0 = a0 | a4\n 24919: a0 = a0 << 0x20\n 24922: a0 = a0 | a1\n 24925: s1 = reverse a0\n 24927: a1 = reverse a3\n 24929: a2 = reverse a2\n 24931: a0 = reverse t0\n 24933: u64 [sp + 0x78] = a0\n 24936: u64 [sp + 0x70] = a2\n 24939: a0 = a0 | a2\n 24942: a2 = a1\n 24944: a1 = a1 | s1\n 24947: a1 = a1 | a0\n 24950: a1 = a1 >> 0x20\n 24953: a0 = a0 | s1\n 24956: a0 = a0 << 0x20\n 24959: a0 = a0 | a1\n 24962: jump @343 if a0 != 0\n      : @333 (gas: 5)\n 24966: u64 [sp + 0x68] = a2\n 24969: i32 a0 = a2 + 0\n 24971: a1 = 0x20\n 24974: u64 [sp + 0x60] = a0\n 24977: ra = 298, jump @0\n      : @334 [@dyn 149] (gas: 50)\n 24983: u8 [a0 + 31] = 0\n 24986: u8 [a0 + 30] = 0\n 24989: u8 [a0 + 29] = 0\n 24992: u8 [a0 + 28] = 0\n 24995: u8 [a0 + 27] = 0\n 24998: u8 [a0 + 26] = 0\n 25001: u8 [a0 + 25] = 0\n 25004: u8 [a0 + 24] = 0\n 25007: u8 [a0 + 23] = 0\n 25010: u8 [a0 + 22] = 0\n 25013: u8 [a0 + 21] = 0\n 25016: u8 [a0 + 20] = 0\n 25019: u8 [a0 + 19] = 0\n 25022: u8 [a0 + 18] = 0\n 25025: u8 [a0 + 17] = 0\n 25028: u8 [a0 + 16] = 0\n 25031: u8 [a0 + 15] = 0\n 25034: u8 [a0 + 14] = 0\n 25037: u8 [a0 + 13] = 0\n 25040: u8 [a0 + 12] = 0\n 25043: u8 [a0 + 11] = 0\n 25046: u8 [a0 + 10] = 0\n 25049: u8 [a0 + 9] = 0\n 25052: u8 [a0 + 8] = 0\n 25055: u8 [a0 + 7] = 0\n 25058: u8 [a0 + 6] = 0\n 25061: u8 [a0 + 5] = 0\n 25064: u8 [a0 + 4] = 0\n 25067: u8 [a0 + 3] = 0xa0\n 25072: u8 [a0 + 2] = 0x79\n 25076: u8 [a0 + 1] = 0xc3\n 25081: u8 [a0 + 0] = 0x8\n 25084: a1 = u64 [sp + 0x68]\n 25087: a0 = a1 + 0x4\n 25090: a1 = a0 <u a1\n 25093: a3 = u64 [sp + 0x78]\n 25096: a2 = a3 + a1\n 25099: a3 = a2 <u a3\n 25102: a3 = a1 if a1 == 0\n 25105: a3 = a3 + s1\n 25108: a1 = a3 <u s1\n 25111: a4 = u64 [sp + 0x70]\n 25114: a4 = a4 + a1\n 25117: u64 [sp + 0x88] = a2\n 25121: u64 [sp + 0x80] = a0\n 25125: u64 [sp + 0x90] = a3\n 25129: a0 = sp + 0xa0\n 25133: a1 = sp + 0x80\n 25137: u64 [sp + 0x98] = a4\n 25141: ra = 300, jump @240\n      : @335 [@dyn 150] (gas: 5)\n 25147: a0 = u64 [sp + 0xa8]\n 25151: t0 = u64 [sp + 0xb8]\n 25155: t1 = u64 [sp + 0xa0]\n 25159: a3 = u64 [sp + 0xb0]\n 25163: jump @342\n      : @336 (gas: 1)\n 25166: ra = 302, jump @248\n      : @337 [@dyn 151] (gas: 3)\n 25172: a0 = 0x40\n 25175: a1 = 0x20\n 25178: ra = 304, jump @0\n      : @338 [@dyn 152] (gas: 103)\n 25184: a1 = u8 [a0 + 0x11]\n 25187: a2 = u8 [a0 + 0x10]\n 25190: a3 = u8 [a0 + 0x12]\n 25193: a4 = u8 [a0 + 0x13]\n 25196: a1 = a1 << 0x8\n 25199: a1 = a1 | a2\n 25202: a3 = a3 << 0x10\n 25205: a4 = a4 << 0x18\n 25208: a3 = a3 | a4\n 25211: a1 = a1 | a3\n 25214: a2 = u8 [a0 + 0x15]\n 25217: a3 = u8 [a0 + 0x14]\n 25220: a4 = u8 [a0 + 0x16]\n 25223: a5 = u8 [a0 + 0x17]\n 25226: a2 = a2 << 0x8\n 25229: a2 = a2 | a3\n 25232: a4 = a4 << 0x10\n 25235: a5 = a5 << 0x18\n 25238: a4 = a4 | a5\n 25241: a2 = a2 | a4\n 25244: a2 = a2 << 0x20\n 25247: t0 = a2 | a1\n 25250: a2 = u8 [a0 + 0x1]\n 25253: a3 = u8 [a0]\n 25255: a4 = u8 [a0 + 0x2]\n 25258: a5 = u8 [a0 + 0x3]\n 25261: a2 = a2 << 0x8\n 25264: a2 = a2 | a3\n 25267: a4 = a4 << 0x10\n 25270: a5 = a5 << 0x18\n 25273: a4 = a4 | a5\n 25276: a2 = a2 | a4\n 25279: a3 = u8 [a0 + 0x5]\n 25282: a4 = u8 [a0 + 0x4]\n 25285: a5 = u8 [a0 + 0x6]\n 25288: s1 = u8 [a0 + 0x7]\n 25291: a3 = a3 << 0x8\n 25294: a3 = a3 | a4\n 25297: a5 = a5 << 0x10\n 25300: s1 = s1 << 0x18\n 25303: a5 = a5 | s1\n 25306: a3 = a3 | a5\n 25309: a3 = a3 << 0x20\n 25312: a2 = a2 | a3\n 25315: a3 = u8 [a0 + 0x19]\n 25318: a4 = u8 [a0 + 0x18]\n 25321: a5 = u8 [a0 + 0x1a]\n 25324: s1 = u8 [a0 + 0x1b]\n 25327: a3 = a3 << 0x8\n 25330: a3 = a3 | a4\n 25333: a5 = a5 << 0x10\n 25336: s1 = s1 << 0x18\n 25339: a5 = a5 | s1\n 25342: a3 = a3 | a5\n 25345: a4 = u8 [a0 + 0x1d]\n 25348: a5 = u8 [a0 + 0x1c]\n 25351: s1 = u8 [a0 + 0x1e]\n 25354: a1 = u8 [a0 + 0x1f]\n 25357: a4 = a4 << 0x8\n 25360: a4 = a4 | a5\n 25363: s1 = s1 << 0x10\n 25366: a1 = a1 << 0x18\n 25369: a1 = a1 | s1\n 25372: a1 = a1 | a4\n 25375: a1 = a1 << 0x20\n 25378: a3 = a3 | a1\n 25381: a1 = u8 [a0 + 0x9]\n 25384: a4 = u8 [a0 + 0x8]\n 25387: a5 = u8 [a0 + 0xa]\n 25390: s1 = u8 [a0 + 0xb]\n 25393: a1 = a1 << 0x8\n 25396: a1 = a1 | a4\n 25399: a5 = a5 << 0x10\n 25402: s1 = s1 << 0x18\n 25405: a5 = a5 | s1\n 25408: a1 = a1 | a5\n 25411: a4 = u8 [a0 + 0xd]\n 25414: a5 = u8 [a0 + 0xc]\n 25417: s1 = u8 [a0 + 0xe]\n 25420: a0 = u8 [a0 + 0xf]\n 25423: a4 = a4 << 0x8\n 25426: a4 = a4 | a5\n 25429: s1 = s1 << 0x10\n 25432: a0 = a0 << 0x18\n 25435: a0 = a0 | s1\n 25438: a0 = a0 | a4\n 25441: a0 = a0 << 0x20\n 25444: a0 = a0 | a1\n 25447: s1 = reverse a0\n 25449: a1 = reverse a3\n 25451: a2 = reverse a2\n 25453: a0 = reverse t0\n 25455: u64 [sp + 0x78] = a0\n 25458: u64 [sp + 0x70] = a2\n 25461: a0 = a0 | a2\n 25464: a2 = a1\n 25466: a1 = a1 | s1\n 25469: a1 = a1 | a0\n 25472: a1 = a1 >> 0x20\n 25475: a0 = a0 | s1\n 25478: a0 = a0 << 0x20\n 25481: a0 = a0 | a1\n 25484: jump @343 if a0 != 0\n      : @339 (gas: 5)\n 25488: u64 [sp + 0x68] = a2\n 25491: i32 a0 = a2 + 0\n 25493: a1 = 0x20\n 25496: u64 [sp + 0x60] = a0\n 25499: ra = 306, jump @0\n      : @340 [@dyn 153] (gas: 50)\n 25505: u8 [a0 + 31] = 0\n 25508: u8 [a0 + 30] = 0\n 25511: u8 [a0 + 29] = 0\n 25514: u8 [a0 + 28] = 0\n 25517: u8 [a0 + 27] = 0\n 25520: u8 [a0 + 26] = 0\n 25523: u8 [a0 + 25] = 0\n 25526: u8 [a0 + 24] = 0\n 25529: u8 [a0 + 23] = 0\n 25532: u8 [a0 + 22] = 0\n 25535: u8 [a0 + 21] = 0\n 25538: u8 [a0 + 20] = 0\n 25541: u8 [a0 + 19] = 0\n 25544: u8 [a0 + 18] = 0\n 25547: u8 [a0 + 17] = 0\n 25550: u8 [a0 + 16] = 0\n 25553: u8 [a0 + 15] = 0\n 25556: u8 [a0 + 14] = 0\n 25559: u8 [a0 + 13] = 0\n 25562: u8 [a0 + 12] = 0\n 25565: u8 [a0 + 11] = 0\n 25568: u8 [a0 + 10] = 0\n 25571: u8 [a0 + 9] = 0\n 25574: u8 [a0 + 8] = 0\n 25577: u8 [a0 + 7] = 0\n 25580: u8 [a0 + 6] = 0\n 25583: u8 [a0 + 5] = 0\n 25586: u8 [a0 + 4] = 0\n 25589: u8 [a0 + 3] = 0xa0\n 25594: u8 [a0 + 2] = 0x79\n 25598: u8 [a0 + 1] = 0xc3\n 25603: u8 [a0 + 0] = 0x8\n 25606: a1 = u64 [sp + 0x68]\n 25609: a0 = a1 + 0x4\n 25612: a1 = a0 <u a1\n 25615: a3 = u64 [sp + 0x78]\n 25618: a2 = a3 + a1\n 25621: a3 = a2 <u a3\n 25624: a3 = a1 if a1 == 0\n 25627: a3 = a3 + s1\n 25630: a1 = a3 <u s1\n 25633: a4 = u64 [sp + 0x70]\n 25636: a4 = a4 + a1\n 25639: u64 [sp + 0x108] = a2\n 25643: u64 [sp + 0x100] = a0\n 25647: u64 [sp + 0x110] = a3\n 25651: a0 = sp + 0x120\n 25655: a1 = sp + 0x100\n 25659: u64 [sp + 0x118] = a4\n 25663: ra = 308, jump @264\n      : @341 [@dyn 154] (gas: 5)\n 25669: a0 = u64 [sp + 0x128]\n 25673: t0 = u64 [sp + 0x138]\n 25677: t1 = u64 [sp + 0x120]\n 25681: a3 = u64 [sp + 0x130]\n 25685: fallthrough\n      : @342 (gas: 26)\n 25686: a1 = u64 [sp + 0x78]\n 25689: a4 = a0 ^ a1\n 25692: a5 = a0 <u a1\n 25695: t2 = a1\n 25697: a2 = u64 [sp + 0x68]\n 25700: a1 = t1 <u a2\n 25703: a5 = a1 if a4 == 0\n 25706: a4 = a3 - s1\n 25709: a3 = a3 <u s1\n 25712: s1 = u64 [sp + 0x70]\n 25715: s1 = t0 - s1\n 25718: s1 = s1 - a3\n 25721: a3 = a4 <u a5\n 25724: s1 = s1 - a3\n 25727: a4 = a4 - a5\n 25730: a0 = a0 - t2\n 25733: a1 = a0 - a1\n 25736: a0 = t1 - a2\n 25739: a1 = a1 | s1\n 25742: a2 = a0 | a4\n 25745: a2 = a2 | a1\n 25748: a1 = a1 | a4\n 25751: a2 = a2 >> 0x20\n 25754: a1 = a1 << 0x20\n 25757: a1 = a1 | a2\n 25760: jump @350 if a1 == 0\n      : @343 (gas: 1)\n 25763: trap\n      : @344 (gas: 3)\n 25764: a0 = 0\n 25766: a1 = 0\n 25768: ra = 310, jump @0\n      : @345 [@dyn 155] (gas: 5)\n 25774: i32 a1 = a0 + 0\n 25776: a0 = 0x1\n 25779: a2 = 0\n 25781: ecalli 12 // 'seal_return'\n 25783: fallthrough\n      : @346 (gas: 8)\n 25784: u64 [sp + 240] = 0\n 25788: u64 [sp + 232] = 0\n 25792: u64 [sp + 224] = 0\n 25796: a0 = 0x4e487b7100000000\n 25806: a1 = sp + 0xe0\n 25810: u64 [sp + 0xf8] = a0\n 25814: a0 = 0\n 25816: ra = 312, jump @8\n      : @347 [@dyn 156] (gas: 7)\n 25822: u64 [sp + 216] = 0\n 25826: u64 [sp + 208] = 0\n 25830: u64 [sp + 192] = 0x41\n 25835: a0 = 0x4\n 25838: a1 = sp + 0xc0\n 25842: u64 [sp + 200] = 0\n 25846: ra = 314, jump @8\n      : @348 [@dyn 157] (gas: 3)\n 25852: a1 = 0x24\n 25855: a0 = 0\n 25857: ra = 316, jump @0\n      : @349 [@dyn 158] (gas: 5)\n 25863: i32 a1 = a0 + 0\n 25865: a0 = 0x1\n 25868: a2 = 0x24\n 25871: ecalli 12 // 'seal_return'\n 25873: fallthrough\n      : @350 (gas: 4)\n 25874: i32 s1 = a0 + 0\n 25876: a0 = u64 [sp + 0x60]\n 25879: a1 = s1\n 25881: ra = 318, jump @0\n      : @351 [@dyn 159] (gas: 6)\n 25887: i32 a1 = a0 + 0\n 25889: a0 = 0x1\n 25892: a2 = s1\n 25894: ra = 0x140\n 25898: ecalli 12 // 'seal_return'\n 25900: fallthrough\n      : @352 [@dyn 160] (gas: 6)\n 25901: u64 [a0 + 24] = 0\n 25904: u64 [a0 + 16] = 0\n 25907: u64 [a0 + 8] = 0\n 25910: a1 = 0x60\n 25913: u64 [a0] = a1\n 25915: ret\n      : @353 (gas: 14)\n 25917: sp = sp + 0xffffffffffffff10\n 25921: u64 [sp + 0xe8] = ra\n 25925: u64 [sp + 0xe0] = s0\n 25929: u64 [sp + 0xd8] = s1\n 25933: s0 = sp + 0xf0\n 25937: sp = sp & 0xfffffffffffffff0\n 25940: a2 = u64 [a1 + 0x18]\n 25943: a4 = u64 [a1 + 0x10]\n 25946: a5 = u64 [a1 + 0x8]\n 25949: s1 = a4 | a2\n 25952: a3 = a5 <u 0x1\n 25955: a3 = 0 if s1 != 0\n 25957: u64 [sp + 0x48] = a0\n 25960: jump @359 if a3 == 0\n      : @354 (gas: 30)\n 25964: s1 = u64 [a1]\n 25966: a0 = a4 >> 0x3b\n 25969: u64 [sp + 0x20] = a2\n 25972: a1 = a2 << 0x5\n 25975: a0 = a0 | a1\n 25978: a1 = a5 >> 0x3b\n 25981: u64 [sp + 0x28] = a4\n 25984: a2 = a4 << 0x5\n 25987: a1 = a1 | a2\n 25990: a2 = s1 >> 0x3b\n 25993: u64 [sp + 0x10] = a5\n 25996: a3 = a5 << 0x5\n 25999: a2 = a2 | a3\n 26002: u64 [sp + 0x18] = s1\n 26005: a3 = s1 << 0x5\n 26008: a4 = a3 + 0x20\n 26011: a3 = a4 <u a3\n 26014: a5 = a2 + a3\n 26017: a2 = a5 <u a2\n 26020: a2 = a3 if a3 == 0\n 26023: a2 = a2 + a1\n 26026: a1 = a2 <u a1\n 26029: a3 = a0 + a1\n 26032: u64 [sp + 0x90] = a4\n 26036: u64 [sp + 0x98] = a5\n 26040: u64 [sp + 0xa0] = a2\n 26044: a0 = sp + 0xb0\n 26048: a1 = sp + 0x90\n 26052: u64 [sp + 0xa8] = a3\n 26056: ra = 322, jump @49\n      : @355 [@dyn 161] (gas: 15)\n 26062: a0 = u64 [sp + 0xc8]\n 26066: a2 = u64 [sp + 0xc0]\n 26070: a1 = u64 [sp + 0xb8]\n 26074: a3 = u64 [sp + 0xb0]\n 26078: u64 [sp + 0x38] = a0\n 26081: u64 [sp + 0x30] = a1\n 26084: a0 = a0 | a1\n 26087: a1 = a3 | a2\n 26090: a1 = a1 | a0\n 26093: a1 = a1 >> 0x20\n 26096: u64 [sp + 0x40] = a2\n 26099: a0 = a0 | a2\n 26102: a0 = a0 << 0x20\n 26105: a0 = a0 | a1\n 26108: jump @358 if a0 != 0\n      : @356 (gas: 4)\n 26112: i32 a0 = a3 + 0\n 26114: a1 = 0x20\n 26117: u64 [sp + 0x8] = a3\n 26120: ra = 324, jump @0\n      : @357 [@dyn 162] (gas: 83)\n 26126: a1 = u64 [sp + 0x20]\n 26129: a1 = reverse a1\n 26131: a2 = u64 [sp + 0x28]\n 26134: a2 = reverse a2\n 26136: a3 = u64 [sp + 0x10]\n 26139: a3 = reverse a3\n 26141: a4 = u64 [sp + 0x18]\n 26144: a4 = reverse a4\n 26146: a5 = a4 >> 0x38\n 26149: u8 [a0 + 0x1f] = a5\n 26152: a5 = a4 >> 0x30\n 26155: u8 [a0 + 0x1e] = a5\n 26158: a5 = a4 >> 0x28\n 26161: u8 [a0 + 0x1d] = a5\n 26164: a5 = a4 >> 0x20\n 26167: u8 [a0 + 0x1c] = a5\n 26170: a5 = a4 >> 0x18\n 26173: u8 [a0 + 0x1b] = a5\n 26176: a5 = a4 >> 0x10\n 26179: u8 [a0 + 0x1a] = a5\n 26182: a5 = a4 >> 0x8\n 26185: u8 [a0 + 0x19] = a5\n 26188: u8 [a0 + 0x18] = a4\n 26191: u8 [a0 + 0x10] = a3\n 26194: a4 = a3 >> 0x38\n 26197: u8 [a0 + 0x17] = a4\n 26200: a4 = a3 >> 0x30\n 26203: u8 [a0 + 0x16] = a4\n 26206: a4 = a3 >> 0x28\n 26209: u8 [a0 + 0x15] = a4\n 26212: a4 = a3 >> 0x20\n 26215: u8 [a0 + 0x14] = a4\n 26218: a4 = a3 >> 0x18\n 26221: u8 [a0 + 0x13] = a4\n 26224: a4 = a3 >> 0x10\n 26227: u8 [a0 + 0x12] = a4\n 26230: a3 = a3 >> 0x8\n 26233: u8 [a0 + 0x11] = a3\n 26236: u8 [a0 + 0x8] = a2\n 26239: a3 = a2 >> 0x38\n 26242: u8 [a0 + 0xf] = a3\n 26245: a3 = a2 >> 0x30\n 26248: u8 [a0 + 0xe] = a3\n 26251: a3 = a2 >> 0x28\n 26254: u8 [a0 + 0xd] = a3\n 26257: a3 = a2 >> 0x20\n 26260: u8 [a0 + 0xc] = a3\n 26263: a3 = a2 >> 0x18\n 26266: u8 [a0 + 0xb] = a3\n 26269: a3 = a2 >> 0x10\n 26272: u8 [a0 + 0xa] = a3\n 26275: a2 = a2 >> 0x8\n 26278: u8 [a0 + 0x9] = a2\n 26281: u8 [a0] = a1\n 26283: a2 = a1 >> 0x38\n 26286: u8 [a0 + 0x7] = a2\n 26289: a2 = a1 >> 0x30\n 26292: u8 [a0 + 0x6] = a2\n 26295: a2 = a1 >> 0x28\n 26298: u8 [a0 + 0x5] = a2\n 26301: a2 = a1 >> 0x20\n 26304: u8 [a0 + 0x4] = a2\n 26307: a2 = a1 >> 0x18\n 26310: u8 [a0 + 0x3] = a2\n 26313: a2 = a1 >> 0x10\n 26316: u8 [a0 + 0x2] = a2\n 26319: a1 = a1 >> 0x8\n 26322: u8 [a0 + 0x1] = a1\n 26325: a0 = u64 [sp + 0x48]\n 26328: a1 = u64 [sp + 0x8]\n 26331: u64 [a0] = a1\n 26333: a1 = u64 [sp + 0x38]\n 26336: u64 [a0 + 0x18] = a1\n 26339: a1 = u64 [sp + 0x30]\n 26342: u64 [a0 + 0x8] = a1\n 26345: a1 = u64 [sp + 0x40]\n 26348: u64 [a0 + 0x10] = a1\n 26351: sp = s0 + 0xffffffffffffff10\n 26355: ra = u64 [sp + 0xe8]\n 26359: s0 = u64 [sp + 0xe0]\n 26363: s1 = u64 [sp + 0xd8]\n 26367: sp = sp + 0xf0\n 26371: ret\n      : @358 (gas: 1)\n 26373: trap\n      : @359 (gas: 8)\n 26374: u64 [sp + 128] = 0\n 26378: u64 [sp + 120] = 0\n 26381: u64 [sp + 112] = 0\n 26384: a0 = 0x4e487b7100000000\n 26394: a1 = sp + 0x70\n 26397: u64 [sp + 0x88] = a0\n 26401: a0 = 0\n 26403: ra = 326, jump @8\n      : @360 [@dyn 163] (gas: 7)\n 26409: u64 [sp + 104] = 0\n 26412: u64 [sp + 96] = 0\n 26415: u64 [sp + 80] = 0x41\n 26419: a0 = 0x4\n 26422: a1 = sp + 0x50\n 26425: u64 [sp + 88] = 0\n 26428: ra = 328, jump @8\n      : @361 [@dyn 164] (gas: 3)\n 26434: a1 = 0x24\n 26437: a0 = 0\n 26439: ra = 330, jump @0\n      : @362 [@dyn 165] (gas: 6)\n 26445: i32 a1 = a0 + 0\n 26447: a0 = 0x1\n 26450: a2 = 0x24\n 26453: ra = 0x14c\n 26457: ecalli 12 // 'seal_return'\n 26459: fallthrough\n      : @363 [@dyn 166] (gas: 14)\n 26460: sp = sp + 0xffffffffffffffa0\n 26463: u64 [sp + 0x58] = ra\n 26466: u64 [sp + 0x50] = s0\n 26469: u64 [sp + 0x48] = s1\n 26472: s0 = sp + 0x60\n 26475: sp = sp & 0xfffffffffffffff0\n 26478: s1 = a0\n 26480: u64 [sp + 24] = 0\n 26483: u64 [sp + 16] = 0\n 26486: u64 [sp + 0] = 0x80\n 26490: a0 = sp + 0x20\n 26493: a1 = sp\n 26495: u64 [sp + 8] = 0\n 26498: ra = 334, jump @49\n      : @364 [@dyn 167] (gas: 14)\n 26504: a0 = u64 [sp + 0x30]\n 26507: a1 = u64 [sp + 0x38]\n 26510: a2 = u64 [sp + 0x20]\n 26513: a3 = u64 [sp + 0x28]\n 26516: u64 [s1 + 0x10] = a0\n 26519: u64 [s1 + 0x18] = a1\n 26522: u64 [s1] = a2\n 26524: u64 [s1 + 0x8] = a3\n 26527: sp = s0 + 0xffffffffffffffa0\n 26530: ra = u64 [sp + 0x58]\n 26533: s0 = u64 [sp + 0x50]\n 26536: s1 = u64 [sp + 0x48]\n 26539: sp = sp + 0x60\n 26542: ret\n      : @365 [@dyn 168] (gas: 27)\n 26544: a0 = u64 [sp + 0xb8]\n 26548: u64 [sp + 0x48] = a0\n 26551: s1 = u64 [sp + 0xb0]\n 26555: a0 = u64 [sp + 0xa8]\n 26559: u64 [sp + 0x70] = a0\n 26562: a0 = u64 [sp + 0xa0]\n 26566: u64 [sp + 0x78] = a0\n 26569: a0 = u64 [sp + 0x60]\n 26572: u64 [sp + 0xd8] = a0\n 26576: a0 = u64 [sp + 0x68]\n 26579: u64 [sp + 0xd0] = a0\n 26583: a0 = u64 [sp + 0x58]\n 26586: u64 [sp + 0xc8] = a0\n 26590: a0 = u64 [sp + 0x50]\n 26593: u64 [sp + 0xc0] = a0\n 26597: u64 [sp + 248] = 0\n 26601: u64 [sp + 240] = 0\n 26605: u64 [sp + 232] = 0\n 26609: u64 [sp + 224] = 0\n 26613: u32 [sp + 256] = 0x20\n 26618: i32 a1 = sp + 0xc0\n 26622: i32 a3 = sp + 0xe0\n 26626: i32 a4 = sp + 0x100\n 26630: a2 = 0xffffffffffffffff\n 26633: a0 = 0\n 26635: ecalli 7 // 'get_storage'\n 26637: fallthrough\n      : @366 (gas: 12)\n 26638: a0 = u64 [sp + 0x48]\n 26641: a1 = u64 [sp + 0x70]\n 26644: a0 = a0 | a1\n 26647: a1 = u64 [sp + 0x78]\n 26650: a1 = a1 | s1\n 26653: a1 = a1 | a0\n 26656: a1 = a1 >> 0x20\n 26659: u64 [sp + 0x38] = s1\n 26662: a0 = a0 | s1\n 26665: a0 = a0 << 0x20\n 26668: a0 = a0 | a1\n 26671: jump @378 if a0 != 0\n      : @367 (gas: 11)\n 26675: a0 = u64 [sp + 0xf0]\n 26679: a1 = u64 [sp + 0xe8]\n 26683: u64 [sp + 0x28] = a1\n 26686: a1 = u64 [sp + 0xe0]\n 26690: u64 [sp + 0x30] = a1\n 26693: a0 = a0 << 0x20\n 26696: s1 = a0 >> 0x20\n 26699: a0 = i32 [sp + 0x78]\n 26702: a1 = 0x20\n 26705: u64 [sp + 0x40] = a0\n 26708: ra = 338, jump @0\n      : @368 [@dyn 169] (gas: 83)\n 26714: a1 = reverse s1\n 26716: a2 = u64 [sp + 0x28]\n 26719: a2 = reverse a2\n 26721: a3 = u64 [sp + 0x30]\n 26724: a3 = reverse a3\n 26726: a4 = a3 >> 0x38\n 26729: u8 [a0 + 0x1f] = a4\n 26732: a4 = a3 >> 0x30\n 26735: u8 [a0 + 0x1e] = a4\n 26738: a4 = a3 >> 0x28\n 26741: u8 [a0 + 0x1d] = a4\n 26744: a4 = a3 >> 0x20\n 26747: u8 [a0 + 0x1c] = a4\n 26750: a4 = a3 >> 0x18\n 26753: u8 [a0 + 0x1b] = a4\n 26756: a4 = a3 >> 0x10\n 26759: u8 [a0 + 0x1a] = a4\n 26762: a4 = a3 >> 0x8\n 26765: u8 [a0 + 0x19] = a4\n 26768: u8 [a0 + 0x18] = a3\n 26771: u8 [a0 + 0x10] = a2\n 26774: u8 [a0 + 11] = 0\n 26777: u8 [a0 + 10] = 0\n 26780: u8 [a0 + 9] = 0\n 26783: u8 [a0 + 7] = 0\n 26786: u8 [a0 + 6] = 0\n 26789: u8 [a0 + 5] = 0\n 26792: u8 [a0 + 4] = 0\n 26795: u8 [a0 + 3] = 0\n 26798: u8 [a0 + 2] = 0\n 26801: u8 [a0 + 1] = 0\n 26804: u8 [a0 + 0] = 0\n 26806: a3 = a2 >> 0x38\n 26809: u8 [a0 + 0x17] = a3\n 26812: a3 = a2 >> 0x30\n 26815: u8 [a0 + 0x16] = a3\n 26818: a3 = a2 >> 0x28\n 26821: u8 [a0 + 0x15] = a3\n 26824: a3 = a2 >> 0x20\n 26827: u8 [a0 + 0x14] = a3\n 26830: a3 = a2 >> 0x18\n 26833: u8 [a0 + 0x13] = a3\n 26836: a3 = a2 >> 0x10\n 26839: u8 [a0 + 0x12] = a3\n 26842: a2 = a2 >> 0x8\n 26845: u8 [a0 + 0x11] = a2\n 26848: u8 [a0 + 0x8] = a1\n 26851: a2 = a1 >> 0x38\n 26854: u8 [a0 + 0xf] = a2\n 26857: a2 = a1 >> 0x30\n 26860: u8 [a0 + 0xe] = a2\n 26863: a2 = a1 >> 0x28\n 26866: u8 [a0 + 0xd] = a2\n 26869: a1 = a1 >> 0x20\n 26872: u8 [a0 + 0xc] = a1\n 26875: a0 = u64 [sp + 0x50]\n 26878: a0 = a0 + 0x1\n 26881: a1 = a0 <u 0x1\n 26884: a2 = u64 [sp + 0x58]\n 26887: a1 = a1 + a2\n 26890: a2 = a0 | a1\n 26893: a2 = a2 <u 0x1\n 26896: a3 = u64 [sp + 0x68]\n 26899: a2 = a2 + a3\n 26902: a3 = a2 <u a3\n 26905: a4 = u64 [sp + 0x60]\n 26908: a3 = a3 + a4\n 26911: u64 [sp + 0xd8] = a3\n 26915: u64 [sp + 0xd0] = a2\n 26919: u64 [sp + 0xc8] = a1\n 26923: u64 [sp + 0xc0] = a0\n 26927: u64 [sp + 248] = 0\n 26931: u64 [sp + 240] = 0\n 26935: u64 [sp + 232] = 0\n 26939: u64 [sp + 224] = 0\n 26943: u32 [sp + 256] = 0x20\n 26948: i32 a1 = sp + 0xc0\n 26952: i32 a3 = sp + 0xe0\n 26956: i32 a4 = sp + 0x100\n 26960: a2 = 0xffffffffffffffff\n 26963: a0 = 0\n 26965: ecalli 7 // 'get_storage'\n 26967: fallthrough\n      : @369 (gas: 13)\n 26968: a0 = u64 [sp + 0x48]\n 26971: a2 = u64 [sp + 0x38]\n 26974: a2 = a2 | a0\n 26977: a0 = 0x100000000\n 26987: u64 [sp + 0x28] = a0\n 26990: a0 = 0xffffffe0\n 27000: a1 = u64 [sp + 0x78]\n 27003: a0 = a1 <u a0\n 27006: a1 = u64 [sp + 0x70]\n 27009: a0 = 0 if a1 != 0\n 27011: u64 [sp + 0x30] = a2\n 27014: a0 = 0 if a2 != 0\n 27016: jump @378 if a0 == 0\n      : @370 (gas: 11)\n 27020: s1 = u64 [sp + 0xf8]\n 27024: a0 = u64 [sp + 0xf0]\n 27028: u64 [sp + 0x8] = a0\n 27031: a0 = u64 [sp + 0xe8]\n 27035: u64 [sp + 0x10] = a0\n 27038: a0 = u64 [sp + 0xe0]\n 27042: u64 [sp + 0x18] = a0\n 27045: a0 = u64 [sp + 0x40]\n 27048: i32 a0 = a0 + 0x20\n 27051: a1 = 0x20\n 27054: ra = 340, jump @0\n      : @371 [@dyn 170] (gas: 95)\n 27060: a1 = reverse s1\n 27062: a2 = u64 [sp + 0x8]\n 27065: a2 = reverse a2\n 27067: a3 = u64 [sp + 0x10]\n 27070: a3 = reverse a3\n 27072: a4 = u64 [sp + 0x18]\n 27075: a4 = reverse a4\n 27077: a5 = a4 >> 0x38\n 27080: u8 [a0 + 0x1f] = a5\n 27083: a5 = a4 >> 0x30\n 27086: u8 [a0 + 0x1e] = a5\n 27089: a5 = a4 >> 0x28\n 27092: u8 [a0 + 0x1d] = a5\n 27095: a5 = a4 >> 0x20\n 27098: u8 [a0 + 0x1c] = a5\n 27101: a5 = a4 >> 0x18\n 27104: u8 [a0 + 0x1b] = a5\n 27107: a5 = a4 >> 0x10\n 27110: u8 [a0 + 0x1a] = a5\n 27113: a5 = a4 >> 0x8\n 27116: u8 [a0 + 0x19] = a5\n 27119: u8 [a0 + 0x18] = a4\n 27122: u8 [a0 + 0x10] = a3\n 27125: a4 = a3 >> 0x38\n 27128: u8 [a0 + 0x17] = a4\n 27131: a4 = a3 >> 0x30\n 27134: u8 [a0 + 0x16] = a4\n 27137: a4 = a3 >> 0x28\n 27140: u8 [a0 + 0x15] = a4\n 27143: a4 = a3 >> 0x20\n 27146: u8 [a0 + 0x14] = a4\n 27149: a4 = a3 >> 0x18\n 27152: u8 [a0 + 0x13] = a4\n 27155: a4 = a3 >> 0x10\n 27158: u8 [a0 + 0x12] = a4\n 27161: a3 = a3 >> 0x8\n 27164: u8 [a0 + 0x11] = a3\n 27167: u8 [a0 + 0x8] = a2\n 27170: a3 = a2 >> 0x38\n 27173: u8 [a0 + 0xf] = a3\n 27176: a3 = a2 >> 0x30\n 27179: u8 [a0 + 0xe] = a3\n 27182: a3 = a2 >> 0x28\n 27185: u8 [a0 + 0xd] = a3\n 27188: a3 = a2 >> 0x20\n 27191: u8 [a0 + 0xc] = a3\n 27194: a3 = a2 >> 0x18\n 27197: u8 [a0 + 0xb] = a3\n 27200: a3 = a2 >> 0x10\n 27203: u8 [a0 + 0xa] = a3\n 27206: a2 = a2 >> 0x8\n 27209: u8 [a0 + 0x9] = a2\n 27212: u8 [a0] = a1\n 27214: a2 = a1 >> 0x38\n 27217: u8 [a0 + 0x7] = a2\n 27220: a2 = a1 >> 0x30\n 27223: u8 [a0 + 0x6] = a2\n 27226: a2 = a1 >> 0x28\n 27229: u8 [a0 + 0x5] = a2\n 27232: a2 = a1 >> 0x20\n 27235: u8 [a0 + 0x4] = a2\n 27238: a2 = a1 >> 0x18\n 27241: u8 [a0 + 0x3] = a2\n 27244: a2 = a1 >> 0x10\n 27247: u8 [a0 + 0x2] = a2\n 27250: a1 = a1 >> 0x8\n 27253: u8 [a0 + 0x1] = a1\n 27256: a1 = u64 [sp + 0x50]\n 27259: a0 = a1 + 0x2\n 27262: a1 = a0 <u a1\n 27265: a3 = u64 [sp + 0x58]\n 27268: a2 = a3 + a1\n 27271: a3 = a2 <u a3\n 27274: a3 = a1 if a1 == 0\n 27277: a1 = u64 [sp + 0x68]\n 27280: a3 = a3 + a1\n 27283: a1 = a3 <u a1\n 27286: a4 = u64 [sp + 0x60]\n 27289: a1 = a1 + a4\n 27292: u64 [sp + 0xd8] = a1\n 27296: u64 [sp + 0xd0] = a3\n 27300: u64 [sp + 0xc8] = a2\n 27304: u64 [sp + 0xc0] = a0\n 27308: u64 [sp + 248] = 0\n 27312: u64 [sp + 240] = 0\n 27316: u64 [sp + 232] = 0\n 27320: u64 [sp + 224] = 0\n 27324: u32 [sp + 256] = 0x20\n 27329: i32 a1 = sp + 0xc0\n 27333: i32 a3 = sp + 0xe0\n 27337: i32 a4 = sp + 0x100\n 27341: a2 = 0xffffffffffffffff\n 27344: a0 = 0\n 27346: ecalli 7 // 'get_storage'\n 27348: fallthrough\n      : @372 (gas: 9)\n 27349: a0 = u64 [sp + 0x28]\n 27352: a0 = a0 + 0xffffffffffffffc0\n 27355: a1 = u64 [sp + 0x78]\n 27358: a0 = a1 <u a0\n 27361: a1 = u64 [sp + 0x70]\n 27364: a0 = 0 if a1 != 0\n 27366: a1 = u64 [sp + 0x30]\n 27369: a0 = 0 if a1 != 0\n 27371: jump @378 if a0 == 0\n      : @373 (gas: 11)\n 27375: s1 = u64 [sp + 0xf8]\n 27379: a0 = u64 [sp + 0xf0]\n 27383: u64 [sp + 0x10] = a0\n 27386: a0 = u64 [sp + 0xe8]\n 27390: u64 [sp + 0x18] = a0\n 27393: a0 = u64 [sp + 0xe0]\n 27397: u64 [sp + 0x28] = a0\n 27400: a0 = u64 [sp + 0x40]\n 27403: i32 a0 = a0 + 0x40\n 27406: a1 = 0x20\n 27409: ra = 342, jump @0\n      : @374 [@dyn 171] (gas: 95)\n 27415: a1 = reverse s1\n 27417: a2 = u64 [sp + 0x10]\n 27420: a2 = reverse a2\n 27422: a3 = u64 [sp + 0x18]\n 27425: a3 = reverse a3\n 27427: a4 = u64 [sp + 0x28]\n 27430: a4 = reverse a4\n 27432: a5 = a4 >> 0x38\n 27435: u8 [a0 + 0x1f] = a5\n 27438: a5 = a4 >> 0x30\n 27441: u8 [a0 + 0x1e] = a5\n 27444: a5 = a4 >> 0x28\n 27447: u8 [a0 + 0x1d] = a5\n 27450: a5 = a4 >> 0x20\n 27453: u8 [a0 + 0x1c] = a5\n 27456: a5 = a4 >> 0x18\n 27459: u8 [a0 + 0x1b] = a5\n 27462: a5 = a4 >> 0x10\n 27465: u8 [a0 + 0x1a] = a5\n 27468: a5 = a4 >> 0x8\n 27471: u8 [a0 + 0x19] = a5\n 27474: u8 [a0 + 0x18] = a4\n 27477: u8 [a0 + 0x10] = a3\n 27480: a4 = a3 >> 0x38\n 27483: u8 [a0 + 0x17] = a4\n 27486: a4 = a3 >> 0x30\n 27489: u8 [a0 + 0x16] = a4\n 27492: a4 = a3 >> 0x28\n 27495: u8 [a0 + 0x15] = a4\n 27498: a4 = a3 >> 0x20\n 27501: u8 [a0 + 0x14] = a4\n 27504: a4 = a3 >> 0x18\n 27507: u8 [a0 + 0x13] = a4\n 27510: a4 = a3 >> 0x10\n 27513: u8 [a0 + 0x12] = a4\n 27516: a3 = a3 >> 0x8\n 27519: u8 [a0 + 0x11] = a3\n 27522: u8 [a0 + 0x8] = a2\n 27525: a3 = a2 >> 0x38\n 27528: u8 [a0 + 0xf] = a3\n 27531: a3 = a2 >> 0x30\n 27534: u8 [a0 + 0xe] = a3\n 27537: a3 = a2 >> 0x28\n 27540: u8 [a0 + 0xd] = a3\n 27543: a3 = a2 >> 0x20\n 27546: u8 [a0 + 0xc] = a3\n 27549: a3 = a2 >> 0x18\n 27552: u8 [a0 + 0xb] = a3\n 27555: a3 = a2 >> 0x10\n 27558: u8 [a0 + 0xa] = a3\n 27561: a2 = a2 >> 0x8\n 27564: u8 [a0 + 0x9] = a2\n 27567: u8 [a0] = a1\n 27569: a2 = a1 >> 0x38\n 27572: u8 [a0 + 0x7] = a2\n 27575: a2 = a1 >> 0x30\n 27578: u8 [a0 + 0x6] = a2\n 27581: a2 = a1 >> 0x28\n 27584: u8 [a0 + 0x5] = a2\n 27587: a2 = a1 >> 0x20\n 27590: u8 [a0 + 0x4] = a2\n 27593: a2 = a1 >> 0x18\n 27596: u8 [a0 + 0x3] = a2\n 27599: a2 = a1 >> 0x10\n 27602: u8 [a0 + 0x2] = a2\n 27605: a1 = a1 >> 0x8\n 27608: u8 [a0 + 0x1] = a1\n 27611: a1 = u64 [sp + 0x50]\n 27614: a0 = a1 + 0x3\n 27617: a1 = a0 <u a1\n 27620: a3 = u64 [sp + 0x58]\n 27623: a2 = a3 + a1\n 27626: a3 = a2 <u a3\n 27629: a3 = a1 if a1 == 0\n 27632: a1 = u64 [sp + 0x68]\n 27635: a3 = a3 + a1\n 27638: a1 = a3 <u a1\n 27641: a4 = u64 [sp + 0x60]\n 27644: a1 = a1 + a4\n 27647: u64 [sp + 0xd8] = a1\n 27651: u64 [sp + 0xd0] = a3\n 27655: u64 [sp + 0xc8] = a2\n 27659: u64 [sp + 0xc0] = a0\n 27663: u64 [sp + 248] = 0\n 27667: u64 [sp + 240] = 0\n 27671: u64 [sp + 232] = 0\n 27675: u64 [sp + 224] = 0\n 27679: u32 [sp + 256] = 0x20\n 27684: i32 a1 = sp + 0xc0\n 27688: i32 a3 = sp + 0xe0\n 27692: i32 a4 = sp + 0x100\n 27696: a2 = 0xffffffffffffffff\n 27699: a0 = 0\n 27701: ecalli 7 // 'get_storage'\n 27703: fallthrough\n      : @375 (gas: 8)\n 27704: a0 = 0xffffffa0\n 27714: a1 = u64 [sp + 0x78]\n 27717: a0 = a1 <u a0\n 27720: a1 = u64 [sp + 0x70]\n 27723: a0 = 0 if a1 != 0\n 27725: a1 = u64 [sp + 0x30]\n 27728: a0 = 0 if a1 != 0\n 27730: jump @378 if a0 == 0\n      : @376 (gas: 7)\n 27734: a0 = u64 [sp + 0xe0]\n 27738: a0 = a0 & 0xff\n 27742: s1 = a0 >u 0\n 27744: a0 = u64 [sp + 0x40]\n 27747: i32 a0 = a0 + 0x60\n 27750: a1 = 0x20\n 27753: ra = 344, jump @0\n      : @377 [@dyn 172] (gas: 47)\n 27759: u8 [a0 + 0x1f] = s1\n 27762: u8 [a0 + 30] = 0\n 27765: u8 [a0 + 29] = 0\n 27768: u8 [a0 + 28] = 0\n 27771: u8 [a0 + 27] = 0\n 27774: u8 [a0 + 26] = 0\n 27777: u8 [a0 + 25] = 0\n 27780: u8 [a0 + 24] = 0\n 27783: u8 [a0 + 23] = 0\n 27786: u8 [a0 + 22] = 0\n 27789: u8 [a0 + 21] = 0\n 27792: u8 [a0 + 20] = 0\n 27795: u8 [a0 + 19] = 0\n 27798: u8 [a0 + 18] = 0\n 27801: u8 [a0 + 17] = 0\n 27804: u8 [a0 + 16] = 0\n 27807: u8 [a0 + 15] = 0\n 27810: u8 [a0 + 14] = 0\n 27813: u8 [a0 + 13] = 0\n 27816: u8 [a0 + 12] = 0\n 27819: u8 [a0 + 11] = 0\n 27822: u8 [a0 + 10] = 0\n 27825: u8 [a0 + 9] = 0\n 27828: u8 [a0 + 8] = 0\n 27831: u8 [a0 + 7] = 0\n 27834: u8 [a0 + 6] = 0\n 27837: u8 [a0 + 5] = 0\n 27840: u8 [a0 + 4] = 0\n 27843: u8 [a0 + 3] = 0\n 27846: u8 [a0 + 2] = 0\n 27849: u8 [a0 + 1] = 0\n 27852: u8 [a0 + 0] = 0\n 27854: a0 = u64 [sp + 0x20]\n 27857: a1 = u64 [sp + 0x78]\n 27860: u64 [a0] = a1\n 27862: a1 = u64 [sp + 0x48]\n 27865: u64 [a0 + 0x18] = a1\n 27868: a1 = u64 [sp + 0x70]\n 27871: u64 [a0 + 0x8] = a1\n 27874: a1 = u64 [sp + 0x38]\n 27877: u64 [a0 + 0x10] = a1\n 27880: sp = s0 + 0xfffffffffffffee0\n 27884: ra = u64 [sp + 0x118]\n 27888: s0 = u64 [sp + 0x110]\n 27892: s1 = u64 [sp + 0x108]\n 27896: sp = sp + 0x120\n 27900: ret\n      : @378 (gas: 1)\n 27902: trap\n      : @379 [@dyn 173] (gas: 11)\n 27903: a0 = u64 [sp + 0x138]\n 27907: u64 [sp + 0x38] = a0\n 27910: a0 = u64 [sp + 0x130]\n 27914: u64 [sp + 0x30] = a0\n 27917: a0 = u64 [sp + 0x128]\n 27921: u64 [sp + 0x28] = a0\n 27924: a0 = u64 [sp + 0x120]\n 27928: u64 [sp + 0x20] = a0\n 27931: a1 = 0x20\n 27934: a0 = 0\n 27936: ra = 348, jump @0\n      : @380 [@dyn 174] (gas: 70)\n 27942: a1 = u64 [sp + 0x88]\n 27946: a1 = reverse a1\n 27948: a2 = u64 [sp + 0x90]\n 27952: a2 = reverse a2\n 27954: a3 = u64 [sp + 0x98]\n 27958: a3 = reverse a3\n 27960: a4 = reverse s1\n 27962: a5 = a4 >> 0x38\n 27965: u8 [a0 + 0x1f] = a5\n 27968: a5 = a4 >> 0x30\n 27971: u8 [a0 + 0x1e] = a5\n 27974: a5 = a4 >> 0x28\n 27977: u8 [a0 + 0x1d] = a5\n 27980: a5 = a4 >> 0x20\n 27983: u8 [a0 + 0x1c] = a5\n 27986: a5 = a4 >> 0x18\n 27989: u8 [a0 + 0x1b] = a5\n 27992: a5 = a4 >> 0x10\n 27995: u8 [a0 + 0x1a] = a5\n 27998: a5 = a4 >> 0x8\n 28001: u8 [a0 + 0x19] = a5\n 28004: u8 [a0 + 0x18] = a4\n 28007: a4 = a3 >> 0x38\n 28010: u8 [a0 + 0x17] = a4\n 28013: a4 = a3 >> 0x30\n 28016: u8 [a0 + 0x16] = a4\n 28019: a4 = a3 >> 0x28\n 28022: u8 [a0 + 0x15] = a4\n 28025: a4 = a3 >> 0x20\n 28028: u8 [a0 + 0x14] = a4\n 28031: a4 = a3 >> 0x18\n 28034: u8 [a0 + 0x13] = a4\n 28037: a4 = a3 >> 0x10\n 28040: u8 [a0 + 0x12] = a4\n 28043: a4 = a3 >> 0x8\n 28046: u8 [a0 + 0x11] = a4\n 28049: u8 [a0 + 0x10] = a3\n 28052: a3 = a2 >> 0x38\n 28055: u8 [a0 + 0xf] = a3\n 28058: a3 = a2 >> 0x30\n 28061: u8 [a0 + 0xe] = a3\n 28064: a3 = a2 >> 0x28\n 28067: u8 [a0 + 0xd] = a3\n 28070: a3 = a2 >> 0x20\n 28073: u8 [a0 + 0xc] = a3\n 28076: a3 = a2 >> 0x18\n 28079: u8 [a0 + 0xb] = a3\n 28082: a3 = a2 >> 0x10\n 28085: u8 [a0 + 0xa] = a3\n 28088: a3 = a2 >> 0x8\n 28091: u8 [a0 + 0x9] = a3\n 28094: u8 [a0 + 0x8] = a2\n 28097: a2 = a1 >> 0x38\n 28100: u8 [a0 + 0x7] = a2\n 28103: a2 = a1 >> 0x30\n 28106: u8 [a0 + 0x6] = a2\n 28109: a2 = a1 >> 0x28\n 28112: u8 [a0 + 0x5] = a2\n 28115: a2 = a1 >> 0x20\n 28118: u8 [a0 + 0x4] = a2\n 28121: a2 = a1 >> 0x18\n 28124: u8 [a0 + 0x3] = a2\n 28127: a2 = a1 >> 0x10\n 28130: u8 [a0 + 0x2] = a2\n 28133: a2 = a1 >> 0x8\n 28136: u8 [a0 + 0x1] = a2\n 28139: u8 [a0] = a1\n 28141: a1 = 0x20\n 28144: a0 = 0\n 28146: ra = 350, jump @0\n      : @381 [@dyn 175] (gas: 5)\n 28152: i32 a0 = a0 + 0\n 28154: i32 a2 = sp + 0x180\n 28158: a1 = 0x20\n 28161: ecalli 8 // 'hash_keccak_256'\n 28163: fallthrough\n      : @382 (gas: 8)\n 28164: a0 = u64 [sp + 0xb8]\n 28168: a2 = u64 [sp + 0xb0]\n 28172: a0 = a0 | a2\n 28175: a1 = u64 [sp + 0xa0]\n 28179: a2 = u64 [sp + 0xa8]\n 28183: a1 = a1 | a2\n 28186: a0 = a0 | a1\n 28189: jump @388 if a0 == 0\n      : @383 (gas: 143)\n 28193: a1 = u64 [sp + 0x20]\n 28196: a2 = a1 + 0x20\n 28199: a0 = a2 <u a1\n 28202: t0 = a1\n 28204: a1 = u64 [sp + 0x28]\n 28207: a5 = a1 + a0\n 28210: t2 = a5 <u a1\n 28213: s1 = a1\n 28215: t2 = a0 if a0 == 0\n 28218: ra = u64 [sp + 0x30]\n 28221: t2 = t2 + ra\n 28224: t1 = t2 <u ra\n 28227: a0 = u64 [sp + 0x38]\n 28230: t1 = t1 + a0\n 28233: a0 = t2 >u 0\n 28235: a1 = t1 >u 0\n 28237: a1 = a0 if t1 == 0\n 28240: a0 = 0x100000000\n 28250: u64 [sp + 0x90] = a2\n 28254: a4 = a2\n 28256: a4 = a0 if a1 == 0\n 28259: a3 = a2\n 28261: u64 [sp + 0x88] = a5\n 28265: a3 = a0 if a5 == 0\n 28268: a0 = maxu(a2, a0)\n 28271: a0 = a3 if a5 != 0\n 28274: a3 = t2 | t1\n 28277: a0 = a4 if a3 != 0\n 28280: a2 = a5\n 28282: a2 = 0 if a1 == 0\n 28284: a2 = a5 if a3 == 0\n 28287: a3 = s1 ^ 0xffffffffffffffff\n 28290: a1 = a3 + a2\n 28293: a2 = t0 ^ 0xffffffffffffffff\n 28296: a0 = a0 + a2\n 28299: a2 = a0 <u a2\n 28302: a1 = a1 + a2\n 28305: a4 = a1 ^ a3\n 28308: t0 = a1 <u a3\n 28311: t0 = a2 if a4 == 0\n 28314: u64 [sp + 0x80] = t2\n 28318: a3 = t2\n 28320: u64 [sp + 0x98] = t1\n 28324: a3 = 0 if t1 == 0\n 28326: a3 = t2 if t1 == 0\n 28329: ra = ra ^ 0xffffffffffffffff\n 28332: t1 = ra + a3\n 28335: t0 = t0 + t1\n 28338: a2 = t0 << 0x3b\n 28341: s1 = a1 >> 0x5\n 28344: a2 = a2 | s1\n 28347: u64 [sp + 0x70] = a2\n 28350: a1 = a1 << 0x3b\n 28353: a0 = a0 >> 0x5\n 28356: s1 = a0 | a1\n 28359: u64 [sp + 0x78] = s1\n 28362: a4 = u64 [sp + 0xa8]\n 28366: a0 = a4 <u 0x1\n 28369: a3 = u64 [sp + 0xb0]\n 28373: a5 = a3 - a0\n 28376: t2 = a4 + 0xffffffffffffffff\n 28379: a0 = a5 ^ a2\n 28382: a1 = a5 <u a2\n 28385: a2 = t2 <u s1\n 28388: a2 = a1 if a0 != 0\n 28391: a0 = a4 | a3\n 28394: a0 = a0 <u 0x1\n 28397: a4 = u64 [sp + 0xa0]\n 28401: a1 = a4 <u a0\n 28404: a3 = u64 [sp + 0xb8]\n 28408: a1 = a3 - a1\n 28411: a0 = a4 - a0\n 28414: a3 = t1 <u ra\n 28417: a4 = u64 [sp + 0x38]\n 28420: ra = a4 ^ 0xffffffffffffffff\n 28423: a4 = u64 [sp + 0x98]\n 28427: ra = ra + a4\n 28430: a3 = a3 + ra\n 28433: s1 = t0 <u t1\n 28436: s1 = s1 + a3\n 28439: t0 = t0 >> 0x5\n 28442: a3 = s1 << 0x3b\n 28445: ra = t0 | a3\n 28448: s1 = s1 >> 0x5\n 28451: t0 = a0 <u ra\n 28454: t1 = a1 ^ s1\n 28457: a3 = a1 <u s1\n 28460: a3 = t0 if t1 == 0\n 28463: a4 = a0 ^ ra\n 28466: a4 = a4 | t1\n 28469: a3 = a2 if a4 == 0\n 28472: a1 = s1 if a3 == 0\n 28475: a0 = ra if a3 == 0\n 28478: a2 = u64 [sp + 0x70]\n 28481: a5 = a2 if a3 == 0\n 28484: a2 = u64 [sp + 0x190]\n 28488: a4 = u64 [sp + 0x78]\n 28491: t2 = a4 if a3 == 0\n 28494: a3 = t2 >> 0x3b\n 28497: a4 = a5 << 0x5\n 28500: t0 = a4 | a3\n 28503: a5 = a5 >> 0x3b\n 28506: a4 = a0 << 0x5\n 28509: a3 = a4 | a5\n 28512: a5 = u64 [sp + 0x180]\n 28516: a0 = a0 >> 0x3b\n 28519: a1 = a1 << 0x5\n 28522: a0 = a0 | a1\n 28525: a1 = u64 [sp + 0x188]\n 28529: a4 = u64 [sp + 0x98]\n 28533: a0 = a0 + a4\n 28536: s1 = u64 [sp + 0x198]\n 28540: a5 = reverse a5\n 28542: t1 = reverse a1\n 28544: ra = reverse a2\n 28546: a4 = reverse s1\n 28548: t2 = t2 << 0x5\n 28551: a1 = u64 [sp + 0x80]\n 28555: s1 = a1 + a3\n 28558: a1 = s1 <u a1\n 28561: a0 = a0 + a1\n 28564: a2 = u64 [sp + 0x88]\n 28568: a3 = a2 + t0\n 28571: a1 = u64 [sp + 0x90]\n 28575: t2 = t2 + a1\n 28578: u64 [sp + 0x58] = t2\n 28581: a1 = t2 <u a1\n 28584: a3 = a3 + a1\n 28587: t0 = a3 ^ a2\n 28590: u64 [sp + 0x50] = a3\n 28593: a3 = a3 <u a2\n 28596: a3 = a1 if t0 == 0\n 28599: a3 = a3 + s1\n 28602: u64 [sp + 0x48] = a3\n 28605: a1 = a3 <u s1\n 28608: a0 = a0 + a1\n 28611: u64 [sp + 0x40] = a0\n 28614: t0 = u64 [sp + 0x20]\n 28617: a1 = u64 [sp + 0x28]\n 28620: a2 = u64 [sp + 0x30]\n 28623: a0 = u64 [sp + 0x38]\n 28626: u64 [sp + 0xb8] = a0\n 28630: fallthrough\n      : @384 (gas: 47)\n 28631: a0 = a2\n 28633: a3 = t0 + 0x20\n 28636: u64 [sp + 0xa0] = a3\n 28640: a2 = a3 <u t0\n 28643: a3 = a1 + a2\n 28646: u64 [sp + 0xb0] = a3\n 28650: s1 = a3 <u a1\n 28653: s1 = a2 if a2 == 0\n 28656: s1 = s1 + a0\n 28659: u64 [sp + 0xa8] = s1\n 28663: a0 = s1 <u a0\n 28666: s1 = u64 [sp + 0xb8]\n 28670: s1 = s1 + a0\n 28673: u64 [sp + 0x80] = a4\n 28677: u64 [sp + 0xc0] = a4\n 28681: u64 [sp + 0x88] = ra\n 28685: u64 [sp + 0xc8] = ra\n 28689: u64 [sp + 0x90] = t1\n 28693: u64 [sp + 0xd0] = t1\n 28697: a0 = sp + 0xe0\n 28701: a1 = sp + 0xc0\n 28705: u64 [sp + 0x98] = a5\n 28709: u64 [sp + 0xd8] = a5\n 28713: ra = 0x160\n 28717: sp = sp + 0xfffffffffffffee0\n 28721: u64 [sp + 0x118] = ra\n 28725: u64 [sp + 0x110] = s0\n 28729: u64 [sp + 0x108] = s1\n 28733: s0 = sp + 0x120\n 28737: sp = sp & 0xffffffffffffffe0\n 28740: a2 = u64 [a1]\n 28742: u64 [sp + 0x50] = a2\n 28745: a2 = u64 [a1 + 0x8]\n 28748: u64 [sp + 0x58] = a2\n 28751: a2 = u64 [a1 + 0x10]\n 28754: u64 [sp + 0x68] = a2\n 28757: a1 = u64 [a1 + 0x18]\n 28760: u64 [sp + 0x60] = a1\n 28763: u64 [sp + 0x20] = a0\n 28766: u64 [sp + 152] = 0\n 28770: u64 [sp + 144] = 0\n 28774: u64 [sp + 128] = 0x80\n 28780: a0 = sp + 0xa0\n 28784: a1 = sp + 0x80\n 28788: u64 [sp + 136] = 0\n 28792: ra = 0x150\n 28796: jump @49\n      : @385 [@dyn 176] (gas: 12)\n 28799: a2 = u64 [sp + 0xa0]\n 28803: a3 = u64 [sp + 0xa8]\n 28807: a0 = a2 | a3\n 28810: u64 [sp + 0xb8] = s1\n 28814: a1 = u64 [sp + 0xb0]\n 28818: a1 = a1 | s1\n 28821: a0 = a0 | a1\n 28824: a0 = a0 >> 0x20\n 28827: a1 = a1 | a3\n 28830: a1 = a1 << 0x20\n 28833: a0 = a0 | a1\n 28836: jump @389 if a0 != 0\n      : @386 (gas: 12)\n 28840: a0 = u64 [sp + 0xf8]\n 28844: u64 [sp + 0x70] = a0\n 28847: a0 = u64 [sp + 0xf0]\n 28851: u64 [sp + 0x78] = a0\n 28854: a0 = u64 [sp + 0xe8]\n 28858: u64 [sp + 0x68] = a0\n 28861: a0 = u64 [sp + 0xe0]\n 28865: u64 [sp + 0x60] = a0\n 28868: i32 a0 = a2 + 0\n 28870: a1 = 0x20\n 28873: s1 = a2\n 28875: ra = 354, jump @0\n      : @387 [@dyn 177] (gas: 99)\n 28881: t0 = s1\n 28883: a1 = u64 [sp + 0x60]\n 28886: a1 = reverse a1\n 28888: a2 = a1 >> 0x38\n 28891: u8 [a0 + 0x1f] = a2\n 28894: a2 = a1 >> 0x30\n 28897: u8 [a0 + 0x1e] = a2\n 28900: a2 = a1 >> 0x28\n 28903: u8 [a0 + 0x1d] = a2\n 28906: a2 = a1 >> 0x20\n 28909: u8 [a0 + 0x1c] = a2\n 28912: a2 = a1 >> 0x18\n 28915: u8 [a0 + 0x1b] = a2\n 28918: a2 = a1 >> 0x10\n 28921: u8 [a0 + 0x1a] = a2\n 28924: a2 = a1 >> 0x8\n 28927: u8 [a0 + 0x19] = a2\n 28930: a2 = u64 [sp + 0x68]\n 28933: a2 = reverse a2\n 28935: u8 [a0 + 0x18] = a1\n 28938: a1 = a2 >> 0x38\n 28941: u8 [a0 + 0x17] = a1\n 28944: a1 = a2 >> 0x30\n 28947: u8 [a0 + 0x16] = a1\n 28950: a1 = a2 >> 0x28\n 28953: u8 [a0 + 0x15] = a1\n 28956: a1 = a2 >> 0x20\n 28959: u8 [a0 + 0x14] = a1\n 28962: a1 = a2 >> 0x18\n 28965: u8 [a0 + 0x13] = a1\n 28968: a1 = a2 >> 0x10\n 28971: u8 [a0 + 0x12] = a1\n 28974: a1 = u64 [sp + 0x70]\n 28977: a1 = reverse a1\n 28979: a3 = u64 [sp + 0x78]\n 28982: a3 = reverse a3\n 28984: u8 [a0 + 0x10] = a2\n 28987: a2 = a2 >> 0x8\n 28990: u8 [a0 + 0x11] = a2\n 28993: u8 [a0 + 0x8] = a3\n 28996: a2 = a3 >> 0x38\n 28999: u8 [a0 + 0xf] = a2\n 29002: a2 = a3 >> 0x30\n 29005: u8 [a0 + 0xe] = a2\n 29008: a2 = a3 >> 0x28\n 29011: u8 [a0 + 0xd] = a2\n 29014: a2 = a3 >> 0x20\n 29017: u8 [a0 + 0xc] = a2\n 29020: a2 = a3 >> 0x18\n 29023: u8 [a0 + 0xb] = a2\n 29026: a2 = a3 >> 0x10\n 29029: u8 [a0 + 0xa] = a2\n 29032: a3 = a3 >> 0x8\n 29035: u8 [a0 + 0x9] = a3\n 29038: u8 [a0] = a1\n 29040: a2 = a1 >> 0x38\n 29043: u8 [a0 + 0x7] = a2\n 29046: a2 = a1 >> 0x30\n 29049: u8 [a0 + 0x6] = a2\n 29052: a2 = a1 >> 0x28\n 29055: u8 [a0 + 0x5] = a2\n 29058: a2 = a1 >> 0x20\n 29061: u8 [a0 + 0x4] = a2\n 29064: a2 = a1 >> 0x18\n 29067: u8 [a0 + 0x3] = a2\n 29070: a2 = a1 >> 0x10\n 29073: u8 [a0 + 0x2] = a2\n 29076: a1 = a1 >> 0x8\n 29079: u8 [a0 + 0x1] = a1\n 29082: a1 = u64 [sp + 0x80]\n 29086: t1 = a1 + 0x4\n 29089: a1 = t1 <u a1\n 29092: a3 = u64 [sp + 0x88]\n 29096: a0 = a3 + a1\n 29099: a3 = a0 <u a3\n 29102: a3 = a1 if a1 == 0\n 29105: a1 = u64 [sp + 0x58]\n 29108: a1 = a1 ^ s1\n 29111: a4 = u64 [sp + 0x48]\n 29114: a2 = u64 [sp + 0xa8]\n 29118: a4 = a4 ^ a2\n 29121: t2 = a1 | a4\n 29124: a4 = u64 [sp + 0x50]\n 29127: a1 = u64 [sp + 0xb0]\n 29131: a4 = a4 ^ a1\n 29134: a5 = u64 [sp + 0x40]\n 29137: s1 = u64 [sp + 0xb8]\n 29141: a5 = a5 ^ s1\n 29144: a4 = a4 | a5\n 29147: s1 = t2 | a4\n 29150: a4 = u64 [sp + 0x90]\n 29154: a3 = a3 + a4\n 29157: a4 = a3 <u a4\n 29160: a5 = u64 [sp + 0x98]\n 29164: a5 = a5 + a4\n 29167: a4 = t1\n 29169: ra = a0\n 29171: t1 = a3\n 29173: jump @384 if s1 != 0\n      : @388 (gas: 15)\n 29177: a0 = u64 [sp + 0x18]\n 29180: a1 = u64 [sp + 0x20]\n 29183: u64 [a0] = a1\n 29185: a1 = u64 [sp + 0x28]\n 29188: u64 [a0 + 0x8] = a1\n 29191: a1 = u64 [sp + 0x30]\n 29194: u64 [a0 + 0x10] = a1\n 29197: a1 = u64 [sp + 0x38]\n 29200: u64 [a0 + 0x18] = a1\n 29203: sp = s0 + 0xfffffffffffffe40\n 29207: ra = u64 [sp + 0x1b8]\n 29211: s0 = u64 [sp + 0x1b0]\n 29215: s1 = u64 [sp + 0x1a8]\n 29219: sp = sp + 0x1c0\n 29223: ret\n      : @389 (gas: 1)\n 29225: trap\n      : @390 (gas: 17)\n 29226: sp = sp + 0xffffffffffffffa0\n 29229: u64 [sp + 0x58] = ra\n 29232: u64 [sp + 0x50] = s0\n 29235: u64 [sp + 0x48] = s1\n 29238: a3 = u64 [a1 + 0x18]\n 29241: a4 = u64 [a1 + 0x10]\n 29244: a5 = u64 [a1 + 0x8]\n 29247: s1 = u64 [a1]\n 29249: a1 = a5 | a3\n 29252: a2 = s1 | a4\n 29255: a2 = a2 | a1\n 29258: a2 = a2 >> 0x20\n 29261: a1 = a1 | a4\n 29264: a1 = a1 << 0x20\n 29267: a1 = a1 | a2\n 29270: u64 [sp + 0x28] = a0\n 29273: jump @397 if a1 != 0\n      : @391 (gas: 19)\n 29277: a0 = s1 + 0x20\n 29280: u64 [sp + 0x30] = a0\n 29283: a0 = a0 <u s1\n 29286: a1 = a5 + a0\n 29289: u64 [sp + 0x40] = a1\n 29292: u64 [sp + 0x8] = a5\n 29295: s0 = a1 <u a5\n 29298: s0 = a0 if a0 == 0\n 29301: s0 = s0 + a4\n 29304: u64 [sp + 0x10] = a4\n 29307: a0 = s0 <u a4\n 29310: u64 [sp + 0x18] = a3\n 29313: a0 = a0 + a3\n 29316: u64 [sp + 0x38] = a0\n 29319: u64 [sp] = s1\n 29321: i32 a0 = s1 + 0\n 29323: a1 = 0x20\n 29326: s1 = 0x20\n 29329: ra = 356, jump @0\n      : @392 [@dyn 178] (gas: 45)\n 29335: u8 [a0 + 0x1f] = s1\n 29338: a1 = u64 [sp + 0x30]\n 29341: s1 = a1\n 29343: a1 = a1 | s0\n 29346: a2 = u64 [sp + 0x40]\n 29349: a4 = u64 [sp + 0x38]\n 29352: a2 = a2 | a4\n 29355: a1 = a1 | a2\n 29358: a1 = a1 >> 0x20\n 29361: u64 [sp + 0x20] = s0\n 29364: a2 = a2 | s0\n 29367: a2 = a2 << 0x20\n 29370: a1 = a1 | a2\n 29373: u8 [a0 + 30] = 0\n 29376: u8 [a0 + 29] = 0\n 29379: u8 [a0 + 28] = 0\n 29382: u8 [a0 + 27] = 0\n 29385: u8 [a0 + 26] = 0\n 29388: u8 [a0 + 25] = 0\n 29391: u8 [a0 + 24] = 0\n 29394: u8 [a0 + 23] = 0\n 29397: u8 [a0 + 22] = 0\n 29400: u8 [a0 + 21] = 0\n 29403: u8 [a0 + 20] = 0\n 29406: u8 [a0 + 19] = 0\n 29409: u8 [a0 + 18] = 0\n 29412: u8 [a0 + 17] = 0\n 29415: u8 [a0 + 16] = 0\n 29418: u8 [a0 + 15] = 0\n 29421: u8 [a0 + 14] = 0\n 29424: u8 [a0 + 13] = 0\n 29427: u8 [a0 + 12] = 0\n 29430: u8 [a0 + 11] = 0\n 29433: u8 [a0 + 10] = 0\n 29436: u8 [a0 + 9] = 0\n 29439: u8 [a0 + 8] = 0\n 29442: u8 [a0 + 7] = 0\n 29445: u8 [a0 + 6] = 0\n 29448: u8 [a0 + 5] = 0\n 29451: u8 [a0 + 4] = 0\n 29454: u8 [a0 + 3] = 0\n 29457: u8 [a0 + 2] = 0\n 29460: u8 [a0 + 1] = 0\n 29463: u8 [a0 + 0] = 0\n 29465: jump @397 if a1 != 0\n      : @393 (gas: 4)\n 29469: i32 s0 = s1 + 0\n 29471: a1 = 0x20\n 29474: a0 = s0\n 29476: ra = 358, jump @0\n      : @394 [@dyn 179] (gas: 41)\n 29482: u8 [a0 + 31] = 0xa\n 29486: u8 [a0 + 30] = 0\n 29489: u8 [a0 + 29] = 0\n 29492: u8 [a0 + 28] = 0\n 29495: u8 [a0 + 27] = 0\n 29498: u8 [a0 + 26] = 0\n 29501: u8 [a0 + 25] = 0\n 29504: u8 [a0 + 24] = 0\n 29507: u8 [a0 + 23] = 0\n 29510: u8 [a0 + 22] = 0\n 29513: u8 [a0 + 21] = 0\n 29516: u8 [a0 + 20] = 0\n 29519: u8 [a0 + 19] = 0\n 29522: u8 [a0 + 18] = 0\n 29525: u8 [a0 + 17] = 0\n 29528: u8 [a0 + 16] = 0\n 29531: u8 [a0 + 15] = 0\n 29534: u8 [a0 + 14] = 0\n 29537: u8 [a0 + 13] = 0\n 29540: u8 [a0 + 12] = 0\n 29543: u8 [a0 + 11] = 0\n 29546: u8 [a0 + 10] = 0\n 29549: u8 [a0 + 9] = 0\n 29552: u8 [a0 + 8] = 0\n 29555: u8 [a0 + 7] = 0\n 29558: u8 [a0 + 6] = 0\n 29561: u8 [a0 + 5] = 0\n 29564: u8 [a0 + 4] = 0\n 29567: u8 [a0 + 3] = 0\n 29570: u8 [a0 + 2] = 0\n 29573: u8 [a0 + 1] = 0\n 29576: a1 = u64 [sp + 0x20]\n 29579: a2 = u64 [sp + 0x38]\n 29582: a1 = a1 | a2\n 29585: a2 = 0xffffffe0\n 29595: a2 = s1 <u a2\n 29598: a3 = u64 [sp + 0x40]\n 29601: a2 = 0 if a3 != 0\n 29603: a2 = 0 if a1 != 0\n 29605: u8 [a0 + 0] = 0\n 29607: jump @397 if a2 == 0\n      : @395 (gas: 3)\n 29611: i32 a0 = s0 + 0x20\n 29614: a1 = 0x20\n 29617: ra = 360, jump @0\n      : @396 [@dyn 180] (gas: 54)\n 29623: u8 [a0 + 31] = 0\n 29626: u8 [a0 + 30] = 0\n 29629: u8 [a0 + 29] = 0\n 29632: u8 [a0 + 28] = 0\n 29635: u8 [a0 + 27] = 0\n 29638: u8 [a0 + 26] = 0\n 29641: u8 [a0 + 25] = 0\n 29644: u8 [a0 + 24] = 0\n 29647: u8 [a0 + 23] = 0\n 29650: u8 [a0 + 22] = 0\n 29653: u8 [a0 + 21] = 0\n 29656: u8 [a0 + 20] = 0\n 29659: u8 [a0 + 19] = 0\n 29662: u8 [a0 + 18] = 0\n 29665: u8 [a0 + 17] = 0\n 29668: u8 [a0 + 16] = 0\n 29671: u8 [a0 + 15] = 0\n 29674: u8 [a0 + 14] = 0\n 29677: u8 [a0 + 13] = 0\n 29680: u8 [a0 + 12] = 0\n 29683: u8 [a0 + 11] = 0\n 29686: u8 [a0 + 10] = 0\n 29689: u8 [a0 + 9] = 0x44\n 29693: u8 [a0 + 8] = 0x49\n 29697: u8 [a0 + 7] = 0x20\n 29701: u8 [a0 + 6] = 0x64\n 29705: u8 [a0 + 5] = 0x69\n 29709: u8 [a0 + 4] = 0x6c\n 29713: u8 [a0 + 3] = 0x61\n 29717: u8 [a0 + 2] = 0x76\n 29721: u8 [a0 + 1] = 0x6e\n 29725: u8 [a0 + 0] = 0x49\n 29728: a1 = u64 [sp]\n 29730: a0 = a1 + 0x60\n 29733: a1 = a0 <u a1\n 29736: a3 = u64 [sp + 0x8]\n 29739: a2 = a3 + a1\n 29742: a3 = a2 <u a3\n 29745: a3 = a1 if a1 == 0\n 29748: a1 = u64 [sp + 0x10]\n 29751: a3 = a3 + a1\n 29754: a1 = a3 <u a1\n 29757: a4 = u64 [sp + 0x18]\n 29760: a1 = a1 + a4\n 29763: a4 = u64 [sp + 0x28]\n 29766: u64 [a4] = a0\n 29768: u64 [a4 + 0x8] = a2\n 29771: u64 [a4 + 0x10] = a3\n 29774: u64 [a4 + 0x18] = a1\n 29777: ra = u64 [sp + 0x58]\n 29780: s0 = u64 [sp + 0x50]\n 29783: s1 = u64 [sp + 0x48]\n 29786: sp = sp + 0x60\n 29789: ret\n      : @397 (gas: 1)\n 29791: trap\n      : @398 (gas: 17)\n 29792: sp = sp + 0xffffffffffffffa0\n 29795: u64 [sp + 0x58] = ra\n 29798: u64 [sp + 0x50] = s0\n 29801: u64 [sp + 0x48] = s1\n 29804: a3 = u64 [a1 + 0x18]\n 29807: a4 = u64 [a1 + 0x10]\n 29810: a5 = u64 [a1 + 0x8]\n 29813: s1 = u64 [a1]\n 29815: a1 = a5 | a3\n 29818: a2 = s1 | a4\n 29821: a2 = a2 | a1\n 29824: a2 = a2 >> 0x20\n 29827: a1 = a1 | a4\n 29830: a1 = a1 << 0x20\n 29833: a1 = a1 | a2\n 29836: u64 [sp + 0x28] = a0\n 29839: jump @405 if a1 != 0\n      : @399 (gas: 19)\n 29843: a0 = s1 + 0x20\n 29846: u64 [sp + 0x30] = a0\n 29849: a0 = a0 <u s1\n 29852: a1 = a5 + a0\n 29855: u64 [sp + 0x40] = a1\n 29858: u64 [sp + 0x8] = a5\n 29861: s0 = a1 <u a5\n 29864: s0 = a0 if a0 == 0\n 29867: s0 = s0 + a4\n 29870: u64 [sp + 0x10] = a4\n 29873: a0 = s0 <u a4\n 29876: u64 [sp + 0x18] = a3\n 29879: a0 = a0 + a3\n 29882: u64 [sp + 0x38] = a0\n 29885: u64 [sp] = s1\n 29887: i32 a0 = s1 + 0\n 29889: a1 = 0x20\n 29892: s1 = 0x20\n 29895: ra = 362, jump @0\n      : @400 [@dyn 181] (gas: 45)\n 29901: u8 [a0 + 0x1f] = s1\n 29904: a1 = u64 [sp + 0x30]\n 29907: s1 = a1\n 29909: a1 = a1 | s0\n 29912: a2 = u64 [sp + 0x40]\n 29915: a4 = u64 [sp + 0x38]\n 29918: a2 = a2 | a4\n 29921: a1 = a1 | a2\n 29924: a1 = a1 >> 0x20\n 29927: u64 [sp + 0x20] = s0\n 29930: a2 = a2 | s0\n 29933: a2 = a2 << 0x20\n 29936: a1 = a1 | a2\n 29939: u8 [a0 + 30] = 0\n 29942: u8 [a0 + 29] = 0\n 29945: u8 [a0 + 28] = 0\n 29948: u8 [a0 + 27] = 0\n 29951: u8 [a0 + 26] = 0\n 29954: u8 [a0 + 25] = 0\n 29957: u8 [a0 + 24] = 0\n 29960: u8 [a0 + 23] = 0\n 29963: u8 [a0 + 22] = 0\n 29966: u8 [a0 + 21] = 0\n 29969: u8 [a0 + 20] = 0\n 29972: u8 [a0 + 19] = 0\n 29975: u8 [a0 + 18] = 0\n 29978: u8 [a0 + 17] = 0\n 29981: u8 [a0 + 16] = 0\n 29984: u8 [a0 + 15] = 0\n 29987: u8 [a0 + 14] = 0\n 29990: u8 [a0 + 13] = 0\n 29993: u8 [a0 + 12] = 0\n 29996: u8 [a0 + 11] = 0\n 29999: u8 [a0 + 10] = 0\n 30002: u8 [a0 + 9] = 0\n 30005: u8 [a0 + 8] = 0\n 30008: u8 [a0 + 7] = 0\n 30011: u8 [a0 + 6] = 0\n 30014: u8 [a0 + 5] = 0\n 30017: u8 [a0 + 4] = 0\n 30020: u8 [a0 + 3] = 0\n 30023: u8 [a0 + 2] = 0\n 30026: u8 [a0 + 1] = 0\n 30029: u8 [a0 + 0] = 0\n 30031: jump @405 if a1 != 0\n      : @401 (gas: 4)\n 30035: i32 s0 = s1 + 0\n 30037: a1 = 0x20\n 30040: a0 = s0\n 30042: ra = 364, jump @0\n      : @402 [@dyn 182] (gas: 41)\n 30048: u8 [a0 + 31] = 0x8\n 30052: u8 [a0 + 30] = 0\n 30055: u8 [a0 + 29] = 0\n 30058: u8 [a0 + 28] = 0\n 30061: u8 [a0 + 27] = 0\n 30064: u8 [a0 + 26] = 0\n 30067: u8 [a0 + 25] = 0\n 30070: u8 [a0 + 24] = 0\n 30073: u8 [a0 + 23] = 0\n 30076: u8 [a0 + 22] = 0\n 30079: u8 [a0 + 21] = 0\n 30082: u8 [a0 + 20] = 0\n 30085: u8 [a0 + 19] = 0\n 30088: u8 [a0 + 18] = 0\n 30091: u8 [a0 + 17] = 0\n 30094: u8 [a0 + 16] = 0\n 30097: u8 [a0 + 15] = 0\n 30100: u8 [a0 + 14] = 0\n 30103: u8 [a0 + 13] = 0\n 30106: u8 [a0 + 12] = 0\n 30109: u8 [a0 + 11] = 0\n 30112: u8 [a0 + 10] = 0\n 30115: u8 [a0 + 9] = 0\n 30118: u8 [a0 + 8] = 0\n 30121: u8 [a0 + 7] = 0\n 30124: u8 [a0 + 6] = 0\n 30127: u8 [a0 + 5] = 0\n 30130: u8 [a0 + 4] = 0\n 30133: u8 [a0 + 3] = 0\n 30136: u8 [a0 + 2] = 0\n 30139: u8 [a0 + 1] = 0\n 30142: a1 = u64 [sp + 0x20]\n 30145: a2 = u64 [sp + 0x38]\n 30148: a1 = a1 | a2\n 30151: a2 = 0xffffffe0\n 30161: a2 = s1 <u a2\n 30164: a3 = u64 [sp + 0x40]\n 30167: a2 = 0 if a3 != 0\n 30169: a2 = 0 if a1 != 0\n 30171: u8 [a0 + 0] = 0\n 30173: jump @405 if a2 == 0\n      : @403 (gas: 3)\n 30177: i32 a0 = s0 + 0x20\n 30180: a1 = 0x20\n 30183: ra = 366, jump @0\n      : @404 [@dyn 183] (gas: 54)\n 30189: u8 [a0 + 31] = 0\n 30192: u8 [a0 + 30] = 0\n 30195: u8 [a0 + 29] = 0\n 30198: u8 [a0 + 28] = 0\n 30201: u8 [a0 + 27] = 0\n 30204: u8 [a0 + 26] = 0\n 30207: u8 [a0 + 25] = 0\n 30210: u8 [a0 + 24] = 0\n 30213: u8 [a0 + 23] = 0\n 30216: u8 [a0 + 22] = 0\n 30219: u8 [a0 + 21] = 0\n 30222: u8 [a0 + 20] = 0\n 30225: u8 [a0 + 19] = 0\n 30228: u8 [a0 + 18] = 0\n 30231: u8 [a0 + 17] = 0\n 30234: u8 [a0 + 16] = 0\n 30237: u8 [a0 + 15] = 0\n 30240: u8 [a0 + 14] = 0\n 30243: u8 [a0 + 13] = 0\n 30246: u8 [a0 + 12] = 0\n 30249: u8 [a0 + 11] = 0\n 30252: u8 [a0 + 10] = 0\n 30255: u8 [a0 + 9] = 0\n 30258: u8 [a0 + 8] = 0\n 30261: u8 [a0 + 7] = 0x65\n 30265: u8 [a0 + 6] = 0x76\n 30269: u8 [a0 + 5] = 0x69\n 30273: u8 [a0 + 4] = 0x74\n 30277: u8 [a0 + 3] = 0x63\n 30281: u8 [a0 + 2] = 0x61\n 30285: u8 [a0 + 1] = 0x6e\n 30289: u8 [a0 + 0] = 0x49\n 30292: a1 = u64 [sp]\n 30294: a0 = a1 + 0x60\n 30297: a1 = a0 <u a1\n 30300: a3 = u64 [sp + 0x8]\n 30303: a2 = a3 + a1\n 30306: a3 = a2 <u a3\n 30309: a3 = a1 if a1 == 0\n 30312: a1 = u64 [sp + 0x10]\n 30315: a3 = a3 + a1\n 30318: a1 = a3 <u a1\n 30321: a4 = u64 [sp + 0x18]\n 30324: a1 = a1 + a4\n 30327: a4 = u64 [sp + 0x28]\n 30330: u64 [a4] = a0\n 30332: u64 [a4 + 0x8] = a2\n 30335: u64 [a4 + 0x10] = a3\n 30338: u64 [a4 + 0x18] = a1\n 30341: ra = u64 [sp + 0x58]\n 30344: s0 = u64 [sp + 0x50]\n 30347: s1 = u64 [sp + 0x48]\n 30350: sp = sp + 0x60\n 30353: ret\n      : @405 (gas: 1)\n 30355: trap\n      : @406 (gas: 17)\n 30356: sp = sp + 0xffffffffffffffa0\n 30359: u64 [sp + 0x58] = ra\n 30362: u64 [sp + 0x50] = s0\n 30365: u64 [sp + 0x48] = s1\n 30368: a3 = u64 [a1 + 0x18]\n 30371: a4 = u64 [a1 + 0x10]\n 30374: a5 = u64 [a1 + 0x8]\n 30377: s1 = u64 [a1]\n 30379: a1 = a5 | a3\n 30382: a2 = s1 | a4\n 30385: a2 = a2 | a1\n 30388: a2 = a2 >> 0x20\n 30391: a1 = a1 | a4\n 30394: a1 = a1 << 0x20\n 30397: a1 = a1 | a2\n 30400: u64 [sp + 0x28] = a0\n 30403: jump @413 if a1 != 0\n      : @407 (gas: 19)\n 30407: a0 = s1 + 0x20\n 30410: u64 [sp + 0x30] = a0\n 30413: a0 = a0 <u s1\n 30416: a1 = a5 + a0\n 30419: u64 [sp + 0x40] = a1\n 30422: u64 [sp + 0x8] = a5\n 30425: s0 = a1 <u a5\n 30428: s0 = a0 if a0 == 0\n 30431: s0 = s0 + a4\n 30434: u64 [sp + 0x10] = a4\n 30437: a0 = s0 <u a4\n 30440: u64 [sp + 0x18] = a3\n 30443: a0 = a0 + a3\n 30446: u64 [sp + 0x38] = a0\n 30449: u64 [sp] = s1\n 30451: i32 a0 = s1 + 0\n 30453: a1 = 0x20\n 30456: s1 = 0x20\n 30459: ra = 368, jump @0\n      : @408 [@dyn 184] (gas: 45)\n 30465: u8 [a0 + 0x1f] = s1\n 30468: a1 = u64 [sp + 0x30]\n 30471: s1 = a1\n 30473: a1 = a1 | s0\n 30476: a2 = u64 [sp + 0x40]\n 30479: a4 = u64 [sp + 0x38]\n 30482: a2 = a2 | a4\n 30485: a1 = a1 | a2\n 30488: a1 = a1 >> 0x20\n 30491: u64 [sp + 0x20] = s0\n 30494: a2 = a2 | s0\n 30497: a2 = a2 << 0x20\n 30500: a1 = a1 | a2\n 30503: u8 [a0 + 30] = 0\n 30506: u8 [a0 + 29] = 0\n 30509: u8 [a0 + 28] = 0\n 30512: u8 [a0 + 27] = 0\n 30515: u8 [a0 + 26] = 0\n 30518: u8 [a0 + 25] = 0\n 30521: u8 [a0 + 24] = 0\n 30524: u8 [a0 + 23] = 0\n 30527: u8 [a0 + 22] = 0\n 30530: u8 [a0 + 21] = 0\n 30533: u8 [a0 + 20] = 0\n 30536: u8 [a0 + 19] = 0\n 30539: u8 [a0 + 18] = 0\n 30542: u8 [a0 + 17] = 0\n 30545: u8 [a0 + 16] = 0\n 30548: u8 [a0 + 15] = 0\n 30551: u8 [a0 + 14] = 0\n 30554: u8 [a0 + 13] = 0\n 30557: u8 [a0 + 12] = 0\n 30560: u8 [a0 + 11] = 0\n 30563: u8 [a0 + 10] = 0\n 30566: u8 [a0 + 9] = 0\n 30569: u8 [a0 + 8] = 0\n 30572: u8 [a0 + 7] = 0\n 30575: u8 [a0 + 6] = 0\n 30578: u8 [a0 + 5] = 0\n 30581: u8 [a0 + 4] = 0\n 30584: u8 [a0 + 3] = 0\n 30587: u8 [a0 + 2] = 0\n 30590: u8 [a0 + 1] = 0\n 30593: u8 [a0 + 0] = 0\n 30595: jump @413 if a1 != 0\n      : @409 (gas: 4)\n 30599: i32 s0 = s1 + 0\n 30601: a1 = 0x20\n 30604: a0 = s0\n 30606: ra = 370, jump @0\n      : @410 [@dyn 185] (gas: 41)\n 30612: u8 [a0 + 31] = 0xb\n 30616: u8 [a0 + 30] = 0\n 30619: u8 [a0 + 29] = 0\n 30622: u8 [a0 + 28] = 0\n 30625: u8 [a0 + 27] = 0\n 30628: u8 [a0 + 26] = 0\n 30631: u8 [a0 + 25] = 0\n 30634: u8 [a0 + 24] = 0\n 30637: u8 [a0 + 23] = 0\n 30640: u8 [a0 + 22] = 0\n 30643: u8 [a0 + 21] = 0\n 30646: u8 [a0 + 20] = 0\n 30649: u8 [a0 + 19] = 0\n 30652: u8 [a0 + 18] = 0\n 30655: u8 [a0 + 17] = 0\n 30658: u8 [a0 + 16] = 0\n 30661: u8 [a0 + 15] = 0\n 30664: u8 [a0 + 14] = 0\n 30667: u8 [a0 + 13] = 0\n 30670: u8 [a0 + 12] = 0\n 30673: u8 [a0 + 11] = 0\n 30676: u8 [a0 + 10] = 0\n 30679: u8 [a0 + 9] = 0\n 30682: u8 [a0 + 8] = 0\n 30685: u8 [a0 + 7] = 0\n 30688: u8 [a0 + 6] = 0\n 30691: u8 [a0 + 5] = 0\n 30694: u8 [a0 + 4] = 0\n 30697: u8 [a0 + 3] = 0\n 30700: u8 [a0 + 2] = 0\n 30703: u8 [a0 + 1] = 0\n 30706: a1 = u64 [sp + 0x20]\n 30709: a2 = u64 [sp + 0x38]\n 30712: a1 = a1 | a2\n 30715: a2 = 0xffffffe0\n 30725: a2 = s1 <u a2\n 30728: a3 = u64 [sp + 0x40]\n 30731: a2 = 0 if a3 != 0\n 30733: a2 = 0 if a1 != 0\n 30735: u8 [a0 + 0] = 0\n 30737: jump @413 if a2 == 0\n      : @411 (gas: 3)\n 30741: i32 a0 = s0 + 0x20\n 30744: a1 = 0x20\n 30747: ra = 372, jump @0\n      : @412 [@dyn 186] (gas: 54)\n 30753: u8 [a0 + 31] = 0\n 30756: u8 [a0 + 30] = 0\n 30759: u8 [a0 + 29] = 0\n 30762: u8 [a0 + 28] = 0\n 30765: u8 [a0 + 27] = 0\n 30768: u8 [a0 + 26] = 0\n 30771: u8 [a0 + 25] = 0\n 30774: u8 [a0 + 24] = 0\n 30777: u8 [a0 + 23] = 0\n 30780: u8 [a0 + 22] = 0\n 30783: u8 [a0 + 21] = 0\n 30786: u8 [a0 + 20] = 0\n 30789: u8 [a0 + 19] = 0\n 30792: u8 [a0 + 18] = 0\n 30795: u8 [a0 + 17] = 0\n 30798: u8 [a0 + 16] = 0\n 30801: u8 [a0 + 15] = 0\n 30804: u8 [a0 + 14] = 0\n 30807: u8 [a0 + 13] = 0\n 30810: u8 [a0 + 12] = 0\n 30813: u8 [a0 + 11] = 0\n 30816: u8 [a0 + 10] = 0x67\n 30820: u8 [a0 + 9] = 0x6e\n 30824: u8 [a0 + 8] = 0x69\n 30828: u8 [a0 + 7] = 0x74\n 30832: u8 [a0 + 6] = 0x73\n 30836: u8 [a0 + 5] = 0x69\n 30840: u8 [a0 + 4] = 0x6c\n 30844: u8 [a0 + 3] = 0x20\n 30848: u8 [a0 + 2] = 0x6e\n 30852: u8 [a0 + 1] = 0x77\n 30856: u8 [a0 + 0] = 0x4f\n 30859: a1 = u64 [sp]\n 30861: a0 = a1 + 0x60\n 30864: a1 = a0 <u a1\n 30867: a3 = u64 [sp + 0x8]\n 30870: a2 = a3 + a1\n 30873: a3 = a2 <u a3\n 30876: a3 = a1 if a1 == 0\n 30879: a1 = u64 [sp + 0x10]\n 30882: a3 = a3 + a1\n 30885: a1 = a3 <u a1\n 30888: a4 = u64 [sp + 0x18]\n 30891: a1 = a1 + a4\n 30894: a4 = u64 [sp + 0x28]\n 30897: u64 [a4] = a0\n 30899: u64 [a4 + 0x8] = a2\n 30902: u64 [a4 + 0x10] = a3\n 30905: u64 [a4 + 0x18] = a1\n 30908: ra = u64 [sp + 0x58]\n 30911: s0 = u64 [sp + 0x50]\n 30914: s1 = u64 [sp + 0x48]\n 30917: sp = sp + 0x60\n 30920: ret\n      : @413 (gas: 1)\n 30922: trap\n      : @414 (gas: 19)\n 30923: t1 = u64 [sp + 0xf0]\n 30927: t0 = u64 [sp + 0xe8]\n 30931: a0 = u64 [sp + 0x558]\n 30935: a1 = u64 [sp + 0x540]\n 30939: t2 = u64 [sp + 0x550]\n 30943: a3 = u64 [sp + 0x548]\n 30947: a4 = a0 ^ s1\n 30950: a0 = s1 <u a0\n 30953: a2 = u64 [sp + 0xf8]\n 30957: a5 = a2 <u t2\n 30960: a5 = a0 if a4 != 0\n 30963: a0 = a3 ^ t0\n 30966: a3 = t0 <u a3\n 30969: a1 = t1 <u a1\n 30972: a1 = a3 if a0 != 0\n 30975: a0 = t2 ^ a2\n 30978: a0 = a0 | a4\n 30981: a1 = a5 if a0 != 0\n 30984: jump @416 if a1 != 0\n      : @415 (gas: 1)\n 30987: jump @499\n      : @416 (gas: 12)\n 30990: u64 [sp + 0x200] = t1\n 30994: u64 [sp + 568] = 0\n 30998: u64 [sp + 560] = 0\n 31002: u64 [sp + 552] = 0\n 31006: u64 [sp + 544] = 0\n 31010: u64 [sp + 0x208] = t0\n 31014: u64 [sp + 0x210] = a2\n 31018: a0 = sp + 0x240\n 31022: a1 = sp + 0x220\n 31026: a2 = sp + 0x200\n 31030: u64 [sp + 0x218] = s1\n 31034: ra = 374, jump @197\n      : @417 [@dyn 187] (gas: 36)\n 31040: a0 = u64 [sp + 0x240]\n 31044: a4 = u64 [sp + 0x258]\n 31048: a1 = u64 [sp + 0x248]\n 31052: a5 = u64 [sp + 0x250]\n 31056: a2 = a0 + 0x3\n 31059: u64 [sp + 0xf0] = a0\n 31063: a0 = a2 <u a0\n 31066: a3 = a1 + a0\n 31069: u64 [sp + 0xe8] = a1\n 31073: a1 = a3 <u a1\n 31076: a1 = a0 if a0 == 0\n 31079: a1 = a1 + a5\n 31082: u64 [sp + 0xd0] = a5\n 31086: a0 = a1 <u a5\n 31089: u64 [sp + 0xf8] = a4\n 31093: a0 = a0 + a4\n 31096: u64 [sp + 0xb0] = a3\n 31100: u64 [sp + 0x528] = a3\n 31104: u64 [sp + 0x20] = a2\n 31107: u64 [sp + 0x520] = a2\n 31111: u64 [sp + 0xa8] = a1\n 31115: u64 [sp + 0x530] = a1\n 31119: u64 [sp + 0xa0] = a0\n 31123: u64 [sp + 0x538] = a0\n 31127: u64 [sp + 1368] = 0\n 31131: u64 [sp + 1360] = 0\n 31135: u64 [sp + 1352] = 0\n 31139: u64 [sp + 1344] = 0\n 31143: u32 [sp + 1280] = 0x20\n 31148: i32 a1 = sp + 0x520\n 31152: i32 a3 = sp + 0x540\n 31156: i32 a4 = sp + 0x500\n 31160: a2 = 0xffffffffffffffff\n 31163: a0 = 0\n 31165: ecalli 7 // 'get_storage'\n 31167: fallthrough\n      : @418 (gas: 2)\n 31168: a0 = u8 [sp + 0x540]\n 31172: jump @420 if a0 != 0\n      : @419 (gas: 1)\n 31175: jump @504\n      : @420 (gas: 37)\n 31178: i32 a0 = sp + 0x2c0\n 31182: ecalli 5 // 'caller'\n 31184: a0 = u64 [sp + 0x2c8]\n 31188: a1 = u64 [sp + 0x2c0]\n 31192: a2 = i32 [sp + 0x2d0]\n 31196: a0 = reverse a0\n 31198: a3 = a0 >> 0x20\n 31201: s1 = reverse a1\n 31203: a1 = s1 << 0x20\n 31206: a1 = a1 | a3\n 31209: u64 [sp + 0xe0] = a1\n 31213: a0 = a0 << 0x20\n 31216: a1 = reverse a2\n 31218: a1 = a1 >> 0x20\n 31221: a0 = a0 | a1\n 31224: u64 [sp + 0xd8] = a0\n 31228: s1 = s1 >> 0x20\n 31231: a0 = u64 [sp + 0xf8]\n 31235: u64 [sp + 0x538] = a0\n 31239: a0 = u64 [sp + 0xd0]\n 31243: u64 [sp + 0x530] = a0\n 31247: a0 = u64 [sp + 0xe8]\n 31251: u64 [sp + 0x528] = a0\n 31255: a0 = u64 [sp + 0xf0]\n 31259: u64 [sp + 0x520] = a0\n 31263: u64 [sp + 1368] = 0\n 31267: u64 [sp + 1360] = 0\n 31271: u64 [sp + 1352] = 0\n 31275: u64 [sp + 1344] = 0\n 31279: u32 [sp + 1280] = 0x20\n 31284: i32 a1 = sp + 0x520\n 31288: i32 a3 = sp + 0x540\n 31292: i32 a4 = sp + 0x500\n 31296: a2 = 0xffffffffffffffff\n 31299: a0 = 0\n 31301: ecalli 7 // 'get_storage'\n 31303: fallthrough\n      : @421 (gas: 11)\n 31304: a0 = u32 [sp + 0x550]\n 31308: a1 = u64 [sp + 0x540]\n 31312: a2 = u64 [sp + 0x548]\n 31316: a0 = a0 ^ s1\n 31319: a3 = u64 [sp + 0xd8]\n 31323: a1 = a1 ^ a3\n 31326: a0 = a0 | a1\n 31329: a1 = u64 [sp + 0xe0]\n 31333: a1 = a1 ^ a2\n 31336: a0 = a0 | a1\n 31339: jump @423 if a0 != 0\n      : @422 (gas: 1)\n 31342: jump @509\n      : @423 (gas: 72)\n 31345: u64 [sp + 1336] = 0\n 31349: u64 [sp + 1328] = 0\n 31353: u64 [sp + 1320] = 0\n 31357: u64 [sp + 1312] = 0x1\n 31362: u64 [sp + 1368] = 0\n 31366: u64 [sp + 1360] = 0\n 31370: u64 [sp + 1352] = 0\n 31374: u64 [sp + 1344] = 0\n 31378: s1 = 0x20\n 31381: u32 [sp + 0x500] = s1\n 31385: i32 a1 = sp + 0x520\n 31389: i32 a3 = sp + 0x540\n 31393: i32 a4 = sp + 0x500\n 31397: a2 = 0xffffffffffffffff\n 31400: a0 = 0\n 31402: ecalli 7 // 'get_storage'\n 31404: a0 = u64 [sp + 0x550]\n 31408: u64 [sp + 0x58] = a0\n 31411: a0 = u64 [sp + 0x548]\n 31415: u64 [sp + 0x50] = a0\n 31418: a0 = u64 [sp + 0x540]\n 31422: u64 [sp + 0x60] = a0\n 31425: i32 a0 = sp + 0x2e0\n 31429: ecalli 5 // 'caller'\n 31431: a0 = i32 [sp + 0x2f0]\n 31435: u64 [sp + 0x98] = a0\n 31439: a0 = u64 [sp + 0x2e0]\n 31443: u64 [sp + 0x90] = a0\n 31447: a0 = u64 [sp + 0xf0]\n 31451: a2 = a0 + 0x2\n 31454: a0 = a2 <u a0\n 31457: a1 = u64 [sp + 0xe8]\n 31461: a3 = a1 + a0\n 31464: a1 = a3 <u a1\n 31467: a1 = a0 if a0 == 0\n 31470: a0 = u64 [sp + 0x2e8]\n 31474: u64 [sp + 0x88] = a0\n 31478: a0 = u64 [sp + 0xd0]\n 31482: a1 = a1 + a0\n 31485: u32 [sp + 0x500] = s1\n 31489: a0 = a1 <u a0\n 31492: a4 = u64 [sp + 0xf8]\n 31496: a0 = a0 + a4\n 31499: u64 [sp + 0x30] = a0\n 31502: u64 [sp + 0x538] = a0\n 31506: u64 [sp + 0x38] = a1\n 31509: u64 [sp + 0x530] = a1\n 31513: u64 [sp + 0x40] = a3\n 31516: u64 [sp + 0x528] = a3\n 31520: u64 [sp + 0x48] = a2\n 31523: u64 [sp + 0x520] = a2\n 31527: u64 [sp + 1368] = 0\n 31531: u64 [sp + 1360] = 0\n 31535: u64 [sp + 1352] = 0\n 31539: u64 [sp + 1344] = 0\n 31543: i32 a1 = sp + 0x520\n 31547: i32 a3 = sp + 0x540\n 31551: i32 a4 = sp + 0x500\n 31555: a2 = 0xffffffffffffffff\n 31558: a0 = 0\n 31560: ecalli 7 // 'get_storage'\n 31562: a0 = u64 [sp + 0x558]\n 31566: u64 [sp + 0x68] = a0\n 31569: a0 = u64 [sp + 0x550]\n 31573: u64 [sp + 0x70] = a0\n 31576: a0 = u64 [sp + 0x548]\n 31580: u64 [sp + 0x78] = a0\n 31583: a0 = u64 [sp + 0x540]\n 31587: u64 [sp + 0x80] = a0\n 31591: a0 = 0x40\n 31594: a1 = 0x20\n 31597: ra = 376, jump @0\n      : @424 [@dyn 188] (gas: 102)\n 31603: a1 = u8 [a0 + 0x11]\n 31606: a2 = u8 [a0 + 0x10]\n 31609: a3 = u8 [a0 + 0x12]\n 31612: a4 = u8 [a0 + 0x13]\n 31615: a1 = a1 << 0x8\n 31618: a1 = a1 | a2\n 31621: a3 = a3 << 0x10\n 31624: a4 = a4 << 0x18\n 31627: a3 = a3 | a4\n 31630: a1 = a1 | a3\n 31633: a2 = u8 [a0 + 0x15]\n 31636: a3 = u8 [a0 + 0x14]\n 31639: a4 = u8 [a0 + 0x16]\n 31642: a5 = u8 [a0 + 0x17]\n 31645: a2 = a2 << 0x8\n 31648: a2 = a2 | a3\n 31651: a4 = a4 << 0x10\n 31654: a5 = a5 << 0x18\n 31657: a4 = a4 | a5\n 31660: a2 = a2 | a4\n 31663: a2 = a2 << 0x20\n 31666: t0 = a2 | a1\n 31669: a2 = u8 [a0 + 0x1]\n 31672: a3 = u8 [a0]\n 31674: a4 = u8 [a0 + 0x2]\n 31677: a5 = u8 [a0 + 0x3]\n 31680: a2 = a2 << 0x8\n 31683: a2 = a2 | a3\n 31686: a4 = a4 << 0x10\n 31689: a5 = a5 << 0x18\n 31692: a4 = a4 | a5\n 31695: a2 = a2 | a4\n 31698: a3 = u8 [a0 + 0x5]\n 31701: a4 = u8 [a0 + 0x4]\n 31704: a5 = u8 [a0 + 0x6]\n 31707: s1 = u8 [a0 + 0x7]\n 31710: a3 = a3 << 0x8\n 31713: a3 = a3 | a4\n 31716: a5 = a5 << 0x10\n 31719: s1 = s1 << 0x18\n 31722: a5 = a5 | s1\n 31725: a3 = a3 | a5\n 31728: a3 = a3 << 0x20\n 31731: a2 = a2 | a3\n 31734: a3 = u8 [a0 + 0x19]\n 31737: a4 = u8 [a0 + 0x18]\n 31740: a5 = u8 [a0 + 0x1a]\n 31743: s1 = u8 [a0 + 0x1b]\n 31746: a3 = a3 << 0x8\n 31749: a3 = a3 | a4\n 31752: a5 = a5 << 0x10\n 31755: s1 = s1 << 0x18\n 31758: a5 = a5 | s1\n 31761: a3 = a3 | a5\n 31764: a4 = u8 [a0 + 0x1d]\n 31767: a5 = u8 [a0 + 0x1c]\n 31770: s1 = u8 [a0 + 0x1e]\n 31773: a1 = u8 [a0 + 0x1f]\n 31776: a4 = a4 << 0x8\n 31779: a4 = a4 | a5\n 31782: s1 = s1 << 0x10\n 31785: a1 = a1 << 0x18\n 31788: a1 = a1 | s1\n 31791: a1 = a1 | a4\n 31794: a1 = a1 << 0x20\n 31797: a3 = a3 | a1\n 31800: a1 = u8 [a0 + 0x9]\n 31803: a4 = u8 [a0 + 0x8]\n 31806: a5 = u8 [a0 + 0xa]\n 31809: s1 = u8 [a0 + 0xb]\n 31812: a1 = a1 << 0x8\n 31815: a1 = a1 | a4\n 31818: a5 = a5 << 0x10\n 31821: s1 = s1 << 0x18\n 31824: a5 = a5 | s1\n 31827: a1 = a1 | a5\n 31830: a4 = u8 [a0 + 0xd]\n 31833: a5 = u8 [a0 + 0xc]\n 31836: s1 = u8 [a0 + 0xe]\n 31839: a0 = u8 [a0 + 0xf]\n 31842: a4 = a4 << 0x8\n 31845: a4 = a4 | a5\n 31848: s1 = s1 << 0x10\n 31851: a0 = a0 << 0x18\n 31854: a0 = a0 | s1\n 31857: a0 = a0 | a4\n 31860: a0 = a0 << 0x20\n 31863: a0 = a0 | a1\n 31866: s1 = reverse a0\n 31868: a3 = reverse a3\n 31870: a1 = reverse a2\n 31872: a0 = reverse t0\n 31874: u64 [sp + 0xe0] = a0\n 31878: u64 [sp + 0xc0] = a1\n 31882: a0 = a0 | a1\n 31885: a1 = a3 | s1\n 31888: a1 = a1 | a0\n 31891: a1 = a1 >> 0x20\n 31894: a0 = a0 | s1\n 31897: a0 = a0 << 0x20\n 31900: a0 = a0 | a1\n 31903: jump @426 if a0 == 0\n      : @425 (gas: 1)\n 31906: jump @520\n      : @426 (gas: 5)\n 31909: i32 a0 = a3 + 0\n 31911: a1 = 0x20\n 31914: u64 [sp + 0xc8] = a0\n 31918: u64 [sp + 0xd8] = a3\n 31922: ra = 378, jump @0\n      : @427 [@dyn 189] (gas: 43)\n 31928: u8 [a0 + 31] = 0\n 31931: u8 [a0 + 30] = 0\n 31934: u8 [a0 + 29] = 0\n 31937: u8 [a0 + 28] = 0\n 31940: u8 [a0 + 27] = 0\n 31943: u8 [a0 + 26] = 0\n 31946: u8 [a0 + 25] = 0\n 31949: u8 [a0 + 24] = 0\n 31952: u8 [a0 + 23] = 0\n 31955: u8 [a0 + 22] = 0\n 31958: u8 [a0 + 21] = 0\n 31961: u8 [a0 + 20] = 0\n 31964: u8 [a0 + 19] = 0\n 31967: u8 [a0 + 18] = 0\n 31970: u8 [a0 + 17] = 0\n 31973: u8 [a0 + 16] = 0\n 31976: u8 [a0 + 15] = 0\n 31979: u8 [a0 + 14] = 0\n 31982: u8 [a0 + 13] = 0\n 31985: u8 [a0 + 12] = 0\n 31988: u8 [a0 + 11] = 0\n 31991: u8 [a0 + 10] = 0\n 31994: u8 [a0 + 9] = 0\n 31997: u8 [a0 + 8] = 0\n 32000: u8 [a0 + 7] = 0\n 32003: u8 [a0 + 6] = 0\n 32006: u8 [a0 + 5] = 0\n 32009: u8 [a0 + 3] = 0xe6\n 32014: u8 [a0 + 2] = 0x8c\n 32019: u8 [a0 + 1] = 0xca\n 32024: u8 [a0 + 0] = 0x4d\n 32027: u64 [sp + 0x28] = s1\n 32030: a3 = u64 [sp + 0xc0]\n 32034: a3 = a3 | s1\n 32037: a1 = 0xfffffffc\n 32047: a2 = u64 [sp + 0xd8]\n 32051: a1 = a2 <u a1\n 32054: a2 = u64 [sp + 0xe0]\n 32058: a1 = 0 if a2 != 0\n 32060: u64 [sp + 0xb8] = a3\n 32064: a1 = 0 if a3 != 0\n 32066: u8 [a0 + 4] = 0\n 32069: jump @429 if a1 != 0\n      : @428 (gas: 1)\n 32072: jump @520\n      : @429 (gas: 19)\n 32075: a0 = u64 [sp + 0x88]\n 32079: a0 = reverse a0\n 32081: a1 = a0 >> 0x20\n 32084: a2 = u64 [sp + 0x90]\n 32088: a2 = reverse a2\n 32090: a3 = a2 << 0x20\n 32093: a1 = a1 | a3\n 32096: u64 [sp + 0x90] = a1\n 32100: a0 = a0 << 0x20\n 32103: a1 = u64 [sp + 0x98]\n 32107: a1 = reverse a1\n 32109: a1 = a1 >> 0x20\n 32112: a0 = a0 | a1\n 32115: u64 [sp + 0x98] = a0\n 32119: s1 = a2 >> 0x20\n 32122: a0 = u64 [sp + 0xc8]\n 32126: i32 a0 = a0 + 0x4\n 32129: a1 = 0x20\n 32132: ra = 380, jump @0\n      : @430 [@dyn 190] (gas: 64)\n 32138: a1 = reverse s1\n 32140: a2 = u64 [sp + 0x90]\n 32144: a2 = reverse a2\n 32146: a3 = u64 [sp + 0x98]\n 32150: a3 = reverse a3\n 32152: a4 = a3 >> 0x38\n 32155: u8 [a0 + 0x1f] = a4\n 32158: a4 = a3 >> 0x30\n 32161: u8 [a0 + 0x1e] = a4\n 32164: a4 = a3 >> 0x28\n 32167: u8 [a0 + 0x1d] = a4\n 32170: a4 = a3 >> 0x20\n 32173: u8 [a0 + 0x1c] = a4\n 32176: a4 = a3 >> 0x18\n 32179: u8 [a0 + 0x1b] = a4\n 32182: a4 = a3 >> 0x10\n 32185: u8 [a0 + 0x1a] = a4\n 32188: a4 = a3 >> 0x8\n 32191: u8 [a0 + 0x19] = a4\n 32194: u8 [a0 + 0x18] = a3\n 32197: u8 [a0 + 0x10] = a2\n 32200: u8 [a0 + 11] = 0\n 32203: u8 [a0 + 10] = 0\n 32206: u8 [a0 + 9] = 0\n 32209: u8 [a0 + 7] = 0\n 32212: u8 [a0 + 6] = 0\n 32215: u8 [a0 + 5] = 0\n 32218: u8 [a0 + 4] = 0\n 32221: u8 [a0 + 3] = 0\n 32224: u8 [a0 + 2] = 0\n 32227: u8 [a0 + 1] = 0\n 32230: u8 [a0 + 0] = 0\n 32232: a3 = a2 >> 0x38\n 32235: u8 [a0 + 0x17] = a3\n 32238: a3 = a2 >> 0x30\n 32241: u8 [a0 + 0x16] = a3\n 32244: a3 = a2 >> 0x28\n 32247: u8 [a0 + 0x15] = a3\n 32250: a3 = a2 >> 0x20\n 32253: u8 [a0 + 0x14] = a3\n 32256: a3 = a2 >> 0x18\n 32259: u8 [a0 + 0x13] = a3\n 32262: a3 = a2 >> 0x10\n 32265: u8 [a0 + 0x12] = a3\n 32268: a2 = a2 >> 0x8\n 32271: u8 [a0 + 0x11] = a2\n 32274: u8 [a0 + 0x8] = a1\n 32277: a2 = a1 >> 0x38\n 32280: u8 [a0 + 0xf] = a2\n 32283: a2 = a1 >> 0x30\n 32286: u8 [a0 + 0xe] = a2\n 32289: a2 = a1 >> 0x28\n 32292: u8 [a0 + 0xd] = a2\n 32295: a1 = a1 >> 0x20\n 32298: s1 = 0x100000000\n 32308: a2 = 0xffffffdc\n 32318: a3 = u64 [sp + 0xd8]\n 32322: a2 = a3 <u a2\n 32325: a3 = u64 [sp + 0xe0]\n 32329: a2 = 0 if a3 != 0\n 32331: a3 = u64 [sp + 0xb8]\n 32335: a2 = 0 if a3 != 0\n 32337: u8 [a0 + 0xc] = a1\n 32340: jump @432 if a2 != 0\n      : @431 (gas: 1)\n 32343: jump @520\n      : @432 (gas: 4)\n 32346: a0 = u64 [sp + 0xc8]\n 32350: i32 a0 = a0 + 0x24\n 32353: a1 = 0x20\n 32356: ra = 382, jump @0\n      : @433 [@dyn 191] (gas: 76)\n 32362: a1 = u64 [sp + 0x68]\n 32365: a1 = reverse a1\n 32367: a2 = u64 [sp + 0x70]\n 32370: a2 = reverse a2\n 32372: a3 = u64 [sp + 0x78]\n 32375: a3 = reverse a3\n 32377: a4 = u64 [sp + 0x80]\n 32381: a4 = reverse a4\n 32383: a5 = a4 >> 0x38\n 32386: u8 [a0 + 0x1f] = a5\n 32389: a5 = a4 >> 0x30\n 32392: u8 [a0 + 0x1e] = a5\n 32395: a5 = a4 >> 0x28\n 32398: u8 [a0 + 0x1d] = a5\n 32401: a5 = a4 >> 0x20\n 32404: u8 [a0 + 0x1c] = a5\n 32407: a5 = a4 >> 0x18\n 32410: u8 [a0 + 0x1b] = a5\n 32413: a5 = a4 >> 0x10\n 32416: u8 [a0 + 0x1a] = a5\n 32419: a5 = a4 >> 0x8\n 32422: u8 [a0 + 0x19] = a5\n 32425: u8 [a0 + 0x18] = a4\n 32428: u8 [a0 + 0x10] = a3\n 32431: a4 = a3 >> 0x38\n 32434: u8 [a0 + 0x17] = a4\n 32437: a4 = a3 >> 0x30\n 32440: u8 [a0 + 0x16] = a4\n 32443: a4 = a3 >> 0x28\n 32446: u8 [a0 + 0x15] = a4\n 32449: a4 = a3 >> 0x20\n 32452: u8 [a0 + 0x14] = a4\n 32455: a4 = a3 >> 0x18\n 32458: u8 [a0 + 0x13] = a4\n 32461: a4 = a3 >> 0x10\n 32464: u8 [a0 + 0x12] = a4\n 32467: a3 = a3 >> 0x8\n 32470: u8 [a0 + 0x11] = a3\n 32473: u8 [a0 + 0x8] = a2\n 32476: a3 = a2 >> 0x38\n 32479: u8 [a0 + 0xf] = a3\n 32482: a3 = a2 >> 0x30\n 32485: u8 [a0 + 0xe] = a3\n 32488: a3 = a2 >> 0x28\n 32491: u8 [a0 + 0xd] = a3\n 32494: a3 = a2 >> 0x20\n 32497: u8 [a0 + 0xc] = a3\n 32500: a3 = a2 >> 0x18\n 32503: u8 [a0 + 0xb] = a3\n 32506: a3 = a2 >> 0x10\n 32509: u8 [a0 + 0xa] = a3\n 32512: a2 = a2 >> 0x8\n 32515: u8 [a0 + 0x9] = a2\n 32518: u8 [a0] = a1\n 32520: a2 = a1 >> 0x38\n 32523: u8 [a0 + 0x7] = a2\n 32526: a2 = a1 >> 0x30\n 32529: u8 [a0 + 0x6] = a2\n 32532: a2 = a1 >> 0x28\n 32535: u8 [a0 + 0x5] = a2\n 32538: a2 = a1 >> 0x20\n 32541: u8 [a0 + 0x4] = a2\n 32544: a2 = a1 >> 0x18\n 32547: u8 [a0 + 0x3] = a2\n 32550: a2 = a1 >> 0x10\n 32553: u8 [a0 + 0x2] = a2\n 32556: a1 = a1 >> 0x8\n 32559: a2 = s1 + 0xffffffffffffffbc\n 32562: a3 = u64 [sp + 0xd8]\n 32566: a2 = a3 <u a2\n 32569: a3 = u64 [sp + 0xe0]\n 32573: a2 = 0 if a3 != 0\n 32575: a3 = u64 [sp + 0xb8]\n 32579: a2 = 0 if a3 != 0\n 32581: u8 [a0 + 0x1] = a1\n 32584: jump @435 if a2 != 0\n      : @434 (gas: 1)\n 32587: jump @520\n      : @435 (gas: 4)\n 32590: s1 = u64 [sp + 0xc8]\n 32594: i32 a0 = s1 + 0x44\n 32597: a1 = 0x20\n 32600: ra = 384, jump @0\n      : @436 [@dyn 192] (gas: 56)\n 32606: u8 [a0 + 31] = 0x1\n 32610: u8 [a0 + 30] = 0\n 32613: u8 [a0 + 29] = 0\n 32616: u8 [a0 + 28] = 0\n 32619: u8 [a0 + 27] = 0\n 32622: u8 [a0 + 26] = 0\n 32625: u8 [a0 + 25] = 0\n 32628: u8 [a0 + 24] = 0\n 32631: u8 [a0 + 23] = 0\n 32634: u8 [a0 + 22] = 0\n 32637: u8 [a0 + 21] = 0\n 32640: u8 [a0 + 20] = 0\n 32643: u8 [a0 + 19] = 0\n 32646: u8 [a0 + 18] = 0\n 32649: u8 [a0 + 17] = 0\n 32652: u8 [a0 + 16] = 0\n 32655: u8 [a0 + 15] = 0\n 32658: u8 [a0 + 14] = 0\n 32661: u8 [a0 + 13] = 0\n 32664: u8 [a0 + 12] = 0\n 32667: u8 [a0 + 11] = 0\n 32670: u8 [a0 + 10] = 0\n 32673: u8 [a0 + 9] = 0\n 32676: u8 [a0 + 8] = 0\n 32679: u8 [a0 + 7] = 0\n 32682: u8 [a0 + 6] = 0\n 32685: u8 [a0 + 5] = 0\n 32688: u8 [a0 + 4] = 0\n 32691: u8 [a0 + 3] = 0\n 32694: u8 [a0 + 2] = 0\n 32697: u8 [a0 + 1] = 0\n 32700: u8 [a0 + 0] = 0\n 32702: ecalli 9 // 'ref_time_left'\n 32704: a0 = u64 [sp + 0x50]\n 32707: a0 = reverse a0\n 32709: a1 = a0 << 0x20\n 32712: a2 = u64 [sp + 0x58]\n 32715: a2 = reverse a2\n 32717: a2 = a2 >> 0x20\n 32720: a1 = a1 | a2\n 32723: a2 = u64 [sp + 0x60]\n 32726: a2 = reverse a2\n 32728: a3 = a2 << 0x20\n 32731: a0 = a0 >> 0x20\n 32734: a0 = a0 | a3\n 32737: a2 = a2 >> 0x20\n 32740: u64 [sp + 0x308] = a0\n 32744: u64 [sp + 0x300] = a1\n 32748: u32 [sp + 0x310] = a2\n 32752: u64 [sp + 824] = 0\n 32756: u64 [sp + 816] = 0\n 32760: u64 [sp + 808] = 0\n 32764: u64 [sp + 800] = 0\n 32768: a1 = 0x64\n 32771: a0 = s1\n 32773: ra = 386, jump @0\n      : @437 [@dyn 193] (gas: 4)\n 32780: u64 [sp + 0xb8] = a0\n 32784: a1 = 0x20\n 32787: a0 = s1\n 32789: ra = 388, jump @0\n      : @438 [@dyn 194] (gas: 31)\n 32796: u32 [sp + 832] = 0x20\n 32801: u64 [sp + 888] = 0\n 32805: u64 [sp + 880] = 0\n 32809: u64 [sp + 872] = 0\n 32813: u64 [sp + 864] = 0\n 32817: a1 = sp + 0x300\n 32821: a1 = a1 << 0x20\n 32824: a1 = a1 >> 0x20\n 32827: a2 = 0x1800000000\n 32837: s1 = a1 | a2\n 32840: a1 = sp + 0x320\n 32844: a1 = a1 << 0x20\n 32847: a1 = a1 >> 0x20\n 32850: a2 = sp + 0x360\n 32854: a2 = a2 << 0x20\n 32857: a3 = a2 | a1\n 32860: a1 = u64 [sp + 0xb8]\n 32864: a1 = a1 << 0x20\n 32867: a1 = a1 >> 0x20\n 32870: a2 = 0x6400000000\n 32880: a4 = a1 | a2\n 32883: a0 = a0 << 0x20\n 32886: a0 = a0 >> 0x20\n 32889: a1 = sp + 0x340\n 32893: a1 = a1 << 0x20\n 32896: a5 = a1 | a0\n 32899: a1 = 0xffffffffffffffff\n 32902: a2 = 0xffffffffffffffff\n 32905: a0 = s1\n 32907: ecalli 1 // 'call'\n 32909: fallthrough\n      : @439 (gas: 1)\n 32910: jump @441 if a0 == 0\n      : @440 (gas: 1)\n 32913: jump @498\n      : @441 (gas: 2)\n 32916: ecalli 11 // 'return_data_size'\n 32918: fallthrough\n      : @442 (gas: 2)\n 32919: a1 = 0x20\n 32922: jump @444 if a0 >=u a1\n      : @443 (gas: 3)\n 32925: ecalli 11 // 'return_data_size'\n 32927: a1 = a0\n 32929: fallthrough\n      : @444 (gas: 28)\n 32930: a4 = 0\n 32932: a3 = u64 [sp + 0xc0]\n 32936: a2 = u64 [sp + 0xd8]\n 32940: s1 = u64 [sp + 0xe0]\n 32944: a0 = a1 + 0x1f\n 32947: u64 [sp + 0xd8] = a1\n 32951: a1 = a0 <u a1\n 32954: u64 [sp + 224] = 0\n 32958: a1 = a1 & 0x1\n 32961: a0 = a0 & 0xffffffffffffffe0\n 32964: a2 = a2 + a0\n 32967: u64 [sp + 0xc0] = a2\n 32971: a0 = a2 <u a0\n 32974: s1 = s1 + a1\n 32977: s1 = s1 + a0\n 32980: a2 = s1 ^ a1\n 32983: a1 = s1 <u a1\n 32986: a1 = a0 if a2 == 0\n 32989: a0 = u64 [sp + 0x28]\n 32992: a1 = a1 + a0\n 32995: a0 = a1 <u a0\n 32998: a0 = a0 + a3\n 33001: u64 [sp + 0xb8] = a1\n 33005: u64 [sp + 0x98] = a0\n 33009: a0 = a0 | a1\n 33012: a1 = s1 <u 0x1\n 33015: a1 = 0 if a0 != 0\n 33017: jump @446 if a1 != 0\n      : @445 (gas: 1)\n 33020: jump @524\n      : @446 (gas: 3)\n 33023: a0 = 0x40\n 33026: a1 = 0x20\n 33029: ra = 390, jump @0\n      : @447 [@dyn 195] (gas: 79)\n 33036: a1 = u64 [sp + 0x98]\n 33040: a1 = reverse a1\n 33042: a2 = u64 [sp + 0xb8]\n 33046: a2 = reverse a2\n 33048: a3 = reverse s1\n 33050: a4 = u64 [sp + 0xc0]\n 33054: a4 = reverse a4\n 33056: u8 [a0 + 0x18] = a4\n 33059: a5 = a4 >> 0x38\n 33062: u8 [a0 + 0x1f] = a5\n 33065: a5 = a4 >> 0x30\n 33068: u8 [a0 + 0x1e] = a5\n 33071: a5 = a4 >> 0x28\n 33074: u8 [a0 + 0x1d] = a5\n 33077: a5 = a4 >> 0x20\n 33080: u8 [a0 + 0x1c] = a5\n 33083: a5 = a4 >> 0x18\n 33086: u8 [a0 + 0x1b] = a5\n 33089: a5 = a4 >> 0x10\n 33092: u8 [a0 + 0x1a] = a5\n 33095: a4 = a4 >> 0x8\n 33098: u8 [a0 + 0x19] = a4\n 33101: u8 [a0 + 0x10] = a3\n 33104: a4 = a3 >> 0x38\n 33107: u8 [a0 + 0x17] = a4\n 33110: a4 = a3 >> 0x30\n 33113: u8 [a0 + 0x16] = a4\n 33116: a4 = a3 >> 0x28\n 33119: u8 [a0 + 0x15] = a4\n 33122: a4 = a3 >> 0x20\n 33125: u8 [a0 + 0x14] = a4\n 33128: a4 = a3 >> 0x18\n 33131: u8 [a0 + 0x13] = a4\n 33134: a4 = a3 >> 0x10\n 33137: u8 [a0 + 0x12] = a4\n 33140: a3 = a3 >> 0x8\n 33143: u8 [a0 + 0x11] = a3\n 33146: u8 [a0 + 0x8] = a2\n 33149: a3 = a2 >> 0x38\n 33152: u8 [a0 + 0xf] = a3\n 33155: a3 = a2 >> 0x30\n 33158: u8 [a0 + 0xe] = a3\n 33161: a3 = a2 >> 0x28\n 33164: u8 [a0 + 0xd] = a3\n 33167: a3 = a2 >> 0x20\n 33170: u8 [a0 + 0xc] = a3\n 33173: a3 = a2 >> 0x18\n 33176: u8 [a0 + 0xb] = a3\n 33179: a3 = a2 >> 0x10\n 33182: u8 [a0 + 0xa] = a3\n 33185: a2 = a2 >> 0x8\n 33188: u8 [a0 + 0x9] = a2\n 33191: u8 [a0] = a1\n 33193: a2 = a1 >> 0x38\n 33196: u8 [a0 + 0x7] = a2\n 33199: a2 = a1 >> 0x30\n 33202: u8 [a0 + 0x6] = a2\n 33205: a2 = a1 >> 0x28\n 33208: u8 [a0 + 0x5] = a2\n 33211: a2 = a1 >> 0x20\n 33214: u8 [a0 + 0x4] = a2\n 33217: a2 = a1 >> 0x18\n 33220: u8 [a0 + 0x3] = a2\n 33223: a2 = a1 >> 0x10\n 33226: u8 [a0 + 0x2] = a2\n 33229: a1 = a1 >> 0x8\n 33232: a5 = u64 [sp + 0xe0]\n 33236: a2 = a5 >u 0\n 33238: a3 = u64 [sp + 0xd8]\n 33242: a3 = a3 <u 0x20\n 33245: a3 = a3 ^ 0x1\n 33248: a3 = a2 if a5 != 0\n 33251: a2 = a5 >u 0\n 33253: a4 = a5 >u 0\n 33255: a4 = a2 if a5 == 0\n 33258: a2 = a5 | a5\n 33261: a4 = a3 if a2 == 0\n 33264: u8 [a0 + 0x1] = a1\n 33267: jump @449 if a4 != 0\n      : @448 (gas: 1)\n 33270: jump @521\n      : @449 (gas: 3)\n 33273: a1 = 0x20\n 33276: a0 = u64 [sp + 0xc8]\n 33280: ra = 392, jump @0\n      : @450 [@dyn 196] (gas: 96)\n 33287: a1 = u8 [a0 + 0x9]\n 33290: a2 = u8 [a0 + 0x8]\n 33293: a3 = u8 [a0 + 0xa]\n 33296: a4 = u8 [a0 + 0xb]\n 33299: a1 = a1 << 0x8\n 33302: a1 = a1 | a2\n 33305: a3 = a3 << 0x10\n 33308: a4 = a4 << 0x18\n 33311: a3 = a3 | a4\n 33314: a1 = a1 | a3\n 33317: a2 = u8 [a0 + 0xd]\n 33320: a3 = u8 [a0 + 0xc]\n 33323: a4 = u8 [a0 + 0xe]\n 33326: a5 = u8 [a0 + 0xf]\n 33329: a2 = a2 << 0x8\n 33332: a2 = a2 | a3\n 33335: a4 = a4 << 0x10\n 33338: a5 = a5 << 0x18\n 33341: a4 = a4 | a5\n 33344: a2 = a2 | a4\n 33347: a2 = a2 << 0x20\n 33350: t0 = a2 | a1\n 33353: a2 = u8 [a0 + 0x1]\n 33356: a3 = u8 [a0]\n 33358: a4 = u8 [a0 + 0x2]\n 33361: a5 = u8 [a0 + 0x3]\n 33364: a2 = a2 << 0x8\n 33367: a2 = a2 | a3\n 33370: a4 = a4 << 0x10\n 33373: a5 = a5 << 0x18\n 33376: a4 = a4 | a5\n 33379: a2 = a2 | a4\n 33382: a3 = u8 [a0 + 0x5]\n 33385: a4 = u8 [a0 + 0x4]\n 33388: a5 = u8 [a0 + 0x6]\n 33391: s1 = u8 [a0 + 0x7]\n 33394: a3 = a3 << 0x8\n 33397: a3 = a3 | a4\n 33400: a5 = a5 << 0x10\n 33403: s1 = s1 << 0x18\n 33406: a5 = a5 | s1\n 33409: a3 = a3 | a5\n 33412: a3 = a3 << 0x20\n 33415: a2 = a2 | a3\n 33418: a3 = u8 [a0 + 0x19]\n 33421: a4 = u8 [a0 + 0x18]\n 33424: a5 = u8 [a0 + 0x1a]\n 33427: s1 = u8 [a0 + 0x1b]\n 33430: a3 = a3 << 0x8\n 33433: a3 = a3 | a4\n 33436: a5 = a5 << 0x10\n 33439: s1 = s1 << 0x18\n 33442: a5 = a5 | s1\n 33445: a3 = a3 | a5\n 33448: a4 = u8 [a0 + 0x1d]\n 33451: a5 = u8 [a0 + 0x1c]\n 33454: s1 = u8 [a0 + 0x1e]\n 33457: a1 = u8 [a0 + 0x1f]\n 33460: a4 = a4 << 0x8\n 33463: a4 = a4 | a5\n 33466: s1 = s1 << 0x10\n 33469: a1 = a1 << 0x18\n 33472: a1 = a1 | s1\n 33475: a1 = a1 | a4\n 33478: a1 = a1 << 0x20\n 33481: a3 = a3 | a1\n 33484: a1 = u8 [a0 + 0x11]\n 33487: a4 = u8 [a0 + 0x10]\n 33490: a5 = u8 [a0 + 0x12]\n 33493: s1 = u8 [a0 + 0x13]\n 33496: a1 = a1 << 0x8\n 33499: a1 = a1 | a4\n 33502: a5 = a5 << 0x10\n 33505: s1 = s1 << 0x18\n 33508: a5 = a5 | s1\n 33511: a1 = a1 | a5\n 33514: a4 = u8 [a0 + 0x15]\n 33517: a5 = u8 [a0 + 0x14]\n 33520: s1 = u8 [a0 + 0x16]\n 33523: a0 = u8 [a0 + 0x17]\n 33526: a4 = a4 << 0x8\n 33529: a4 = a4 | a5\n 33532: s1 = s1 << 0x10\n 33535: a0 = a0 << 0x18\n 33538: a0 = a0 | s1\n 33541: a0 = a0 | a4\n 33544: a0 = a0 << 0x20\n 33547: a0 = a0 | a1\n 33550: a1 = reverse a0\n 33552: a4 = reverse a3\n 33554: a4 = a4 <u 0x2\n 33557: a4 = 0 if a1 != 0\n 33559: a1 = t0 | a2\n 33562: a1 = reverse a1\n 33564: a4 = 0 if a1 != 0\n 33566: jump @452 if a4 != 0\n      : @451 (gas: 1)\n 33569: jump @521\n      : @452 (gas: 4)\n 33572: a0 = a0 | a2\n 33575: a1 = t0 | a3\n 33578: a0 = a0 | a1\n 33581: jump @454 if a0 != 0\n      : @453 (gas: 1)\n 33584: jump @514\n      : @454 (gas: 104)\n 33587: u64 [sp + 1336] = 0\n 33591: u64 [sp + 1328] = 0\n 33595: u64 [sp + 1320] = 0\n 33599: u64 [sp + 1312] = 0x1\n 33604: u64 [sp + 1368] = 0\n 33608: u64 [sp + 1360] = 0\n 33612: u64 [sp + 1352] = 0\n 33616: u64 [sp + 1344] = 0\n 33620: s1 = 0x20\n 33623: u32 [sp + 0x500] = s1\n 33627: i32 a1 = sp + 0x520\n 33631: i32 a3 = sp + 0x540\n 33635: i32 a4 = sp + 0x500\n 33639: a2 = 0xffffffffffffffff\n 33642: a0 = 0\n 33644: ecalli 7 // 'get_storage'\n 33646: a0 = u64 [sp + 0x540]\n 33650: u64 [sp + 0xe0] = a0\n 33654: a0 = u64 [sp + 0x550]\n 33658: u64 [sp + 0xd8] = a0\n 33662: a0 = u64 [sp + 0x548]\n 33666: u64 [sp + 0xc8] = a0\n 33670: i32 a0 = sp + 0x380\n 33674: ecalli 5 // 'caller'\n 33676: a0 = i32 [sp + 0x390]\n 33680: u64 [sp + 0xb8] = a0\n 33684: a0 = u64 [sp + 0x380]\n 33688: u64 [sp + 0x98] = a0\n 33692: a0 = u64 [sp + 0x388]\n 33696: u64 [sp + 0x90] = a0\n 33700: a0 = u64 [sp + 0xf8]\n 33704: u64 [sp + 0x538] = a0\n 33708: a0 = u64 [sp + 0xd0]\n 33712: u64 [sp + 0x530] = a0\n 33716: a0 = u64 [sp + 0xe8]\n 33720: u64 [sp + 0x528] = a0\n 33724: a0 = u64 [sp + 0xf0]\n 33728: u64 [sp + 0x520] = a0\n 33732: u64 [sp + 1368] = 0\n 33736: u64 [sp + 1360] = 0\n 33740: u64 [sp + 1352] = 0\n 33744: u64 [sp + 1344] = 0\n 33748: u32 [sp + 0x500] = s1\n 33752: i32 a1 = sp + 0x520\n 33756: i32 a3 = sp + 0x540\n 33760: i32 a4 = sp + 0x500\n 33764: a2 = 0xffffffffffffffff\n 33767: a0 = 0\n 33769: ecalli 7 // 'get_storage'\n 33771: a0 = u64 [sp + 0x548]\n 33775: u64 [sp + 0x80] = a0\n 33779: a0 = u64 [sp + 0x540]\n 33783: u64 [sp + 0x88] = a0\n 33787: a0 = u32 [sp + 0x550]\n 33791: u64 [sp + 0x78] = a0\n 33794: a0 = u64 [sp + 0x30]\n 33797: u64 [sp + 0x538] = a0\n 33801: a0 = u64 [sp + 0x38]\n 33804: u64 [sp + 0x530] = a0\n 33808: a0 = u64 [sp + 0x40]\n 33811: u64 [sp + 0x528] = a0\n 33815: a0 = u64 [sp + 0x48]\n 33818: u64 [sp + 0x520] = a0\n 33822: u64 [sp + 1368] = 0\n 33826: u64 [sp + 1360] = 0\n 33830: u64 [sp + 1352] = 0\n 33834: u64 [sp + 1344] = 0\n 33838: u32 [sp + 0x500] = s1\n 33842: i32 a1 = sp + 0x520\n 33846: i32 a3 = sp + 0x540\n 33850: i32 a4 = sp + 0x500\n 33854: a2 = 0xffffffffffffffff\n 33857: a0 = 0\n 33859: ecalli 7 // 'get_storage'\n 33861: a0 = u64 [sp + 0x558]\n 33865: u64 [sp + 0x50] = a0\n 33868: a0 = u64 [sp + 0x550]\n 33872: u64 [sp + 0x58] = a0\n 33875: a0 = u64 [sp + 0x548]\n 33879: u64 [sp + 0x60] = a0\n 33882: a0 = u64 [sp + 0x540]\n 33886: u64 [sp + 0x68] = a0\n 33889: a0 = u64 [sp + 0xc8]\n 33893: a0 = reverse a0\n 33895: a1 = a0 << 0x20\n 33898: a2 = u64 [sp + 0xd8]\n 33902: a2 = reverse a2\n 33904: a2 = a2 >> 0x20\n 33907: a3 = a2 | a1\n 33910: a0 = a0 >> 0x20\n 33913: a1 = u64 [sp + 0xe0]\n 33917: a1 = reverse a1\n 33919: a2 = a1 << 0x20\n 33922: a0 = a0 | a2\n 33925: a1 = a1 >> 0x20\n 33928: u64 [sp + 0x38] = a0\n 33931: u64 [sp + 0x3a8] = a0\n 33935: u64 [sp + 0x48] = a3\n 33938: u64 [sp + 0x3a0] = a3\n 33942: u64 [sp + 0x40] = a1\n 33945: u32 [sp + 0x3b0] = a1\n 33949: i32 a0 = sp + 0x3a0\n 33953: ecalli 6 // 'code_size'\n 33955: fallthrough\n      : @455 (gas: 1)\n 33956: jump @457 if a0 != 0\n      : @456 (gas: 1)\n 33959: jump @522\n      : @457 (gas: 3)\n 33962: a0 = 0x40\n 33965: a1 = 0x20\n 33968: ra = 394, jump @0\n      : @458 [@dyn 197] (gas: 107)\n 33975: a1 = u8 [a0 + 0x11]\n 33978: a2 = u8 [a0 + 0x10]\n 33981: a3 = u8 [a0 + 0x12]\n 33984: a4 = u8 [a0 + 0x13]\n 33987: a1 = a1 << 0x8\n 33990: a1 = a1 | a2\n 33993: a3 = a3 << 0x10\n 33996: a4 = a4 << 0x18\n 33999: a3 = a3 | a4\n 34002: a1 = a1 | a3\n 34005: a2 = u8 [a0 + 0x15]\n 34008: a3 = u8 [a0 + 0x14]\n 34011: a4 = u8 [a0 + 0x16]\n 34014: a5 = u8 [a0 + 0x17]\n 34017: a2 = a2 << 0x8\n 34020: a2 = a2 | a3\n 34023: a4 = a4 << 0x10\n 34026: a5 = a5 << 0x18\n 34029: a4 = a4 | a5\n 34032: a2 = a2 | a4\n 34035: a2 = a2 << 0x20\n 34038: t1 = a2 | a1\n 34041: a1 = u8 [a0 + 0x1]\n 34044: a2 = u8 [a0]\n 34046: a3 = u8 [a0 + 0x2]\n 34049: a4 = u8 [a0 + 0x3]\n 34052: a1 = a1 << 0x8\n 34055: a1 = a1 | a2\n 34058: a3 = a3 << 0x10\n 34061: a4 = a4 << 0x18\n 34064: a3 = a3 | a4\n 34067: a1 = a1 | a3\n 34070: a2 = u8 [a0 + 0x5]\n 34073: a3 = u8 [a0 + 0x4]\n 34076: a4 = u8 [a0 + 0x6]\n 34079: a5 = u8 [a0 + 0x7]\n 34082: a2 = a2 << 0x8\n 34085: a2 = a2 | a3\n 34088: a4 = a4 << 0x10\n 34091: a5 = a5 << 0x18\n 34094: a4 = a4 | a5\n 34097: a2 = a2 | a4\n 34100: a2 = a2 << 0x20\n 34103: t0 = a2 | a1\n 34106: a1 = u8 [a0 + 0x19]\n 34109: a2 = u8 [a0 + 0x18]\n 34112: a3 = u8 [a0 + 0x1a]\n 34115: a4 = u8 [a0 + 0x1b]\n 34118: a1 = a1 << 0x8\n 34121: a1 = a1 | a2\n 34124: a3 = a3 << 0x10\n 34127: a4 = a4 << 0x18\n 34130: a3 = a3 | a4\n 34133: a1 = a1 | a3\n 34136: a2 = u8 [a0 + 0x1d]\n 34139: a3 = u8 [a0 + 0x1c]\n 34142: a4 = u8 [a0 + 0x1e]\n 34145: a5 = u8 [a0 + 0x1f]\n 34148: a2 = a2 << 0x8\n 34151: a2 = a2 | a3\n 34154: a4 = a4 << 0x10\n 34157: a5 = a5 << 0x18\n 34160: a4 = a4 | a5\n 34163: a2 = a2 | a4\n 34166: a2 = a2 << 0x20\n 34169: a5 = a2 | a1\n 34172: a1 = u8 [a0 + 0x9]\n 34175: a2 = u8 [a0 + 0x8]\n 34178: a3 = u8 [a0 + 0xa]\n 34181: a4 = u8 [a0 + 0xb]\n 34184: a1 = a1 << 0x8\n 34187: a1 = a1 | a2\n 34190: a3 = a3 << 0x10\n 34193: a4 = a4 << 0x18\n 34196: a3 = a3 | a4\n 34199: a1 = a1 | a3\n 34202: a2 = u8 [a0 + 0xd]\n 34205: a3 = u8 [a0 + 0xc]\n 34208: a4 = u8 [a0 + 0xe]\n 34211: a0 = u8 [a0 + 0xf]\n 34214: a2 = a2 << 0x8\n 34217: a2 = a2 | a3\n 34220: a4 = a4 << 0x10\n 34223: a0 = a0 << 0x18\n 34226: a0 = a0 | a4\n 34229: a0 = a0 | a2\n 34232: a0 = a0 << 0x20\n 34235: a0 = a0 | a1\n 34238: u64 [sp + 0x10] = a0\n 34241: s1 = reverse a0\n 34243: u64 [sp + 0x18] = a5\n 34246: a1 = reverse a5\n 34248: u64 [sp + 0x30] = t0\n 34251: a2 = reverse t0\n 34253: u64 [sp + 0x28] = t1\n 34256: a0 = reverse t1\n 34258: u64 [sp + 0xd8] = a0\n 34262: u64 [sp + 0xc0] = a2\n 34266: a0 = a0 | a2\n 34269: u64 [sp + 0xe0] = a1\n 34273: a1 = a1 | s1\n 34276: a1 = a1 | a0\n 34279: a1 = a1 >> 0x20\n 34282: a0 = a0 | s1\n 34285: a0 = a0 << 0x20\n 34288: a0 = a0 | a1\n 34291: jump @460 if a0 == 0\n      : @459 (gas: 1)\n 34294: jump @520\n      : @460 (gas: 4)\n 34297: a0 = i32 [sp + 0xe0]\n 34301: a1 = 0x20\n 34304: u64 [sp + 0xc8] = a0\n 34308: ra = 396, jump @0\n      : @461 [@dyn 198] (gas: 44)\n 34315: u8 [a0 + 31] = 0\n 34318: u8 [a0 + 30] = 0\n 34321: u8 [a0 + 29] = 0\n 34324: u8 [a0 + 28] = 0\n 34327: u8 [a0 + 27] = 0\n 34330: u8 [a0 + 26] = 0\n 34333: u8 [a0 + 25] = 0\n 34336: u8 [a0 + 24] = 0\n 34339: u8 [a0 + 23] = 0\n 34342: u8 [a0 + 22] = 0\n 34345: u8 [a0 + 21] = 0\n 34348: u8 [a0 + 20] = 0\n 34351: u8 [a0 + 19] = 0\n 34354: u8 [a0 + 18] = 0\n 34357: u8 [a0 + 17] = 0\n 34360: u8 [a0 + 16] = 0\n 34363: u8 [a0 + 15] = 0\n 34366: u8 [a0 + 14] = 0\n 34369: u8 [a0 + 13] = 0\n 34372: u8 [a0 + 12] = 0\n 34375: u8 [a0 + 11] = 0\n 34378: u8 [a0 + 10] = 0\n 34381: u8 [a0 + 9] = 0\n 34384: u8 [a0 + 8] = 0\n 34387: u8 [a0 + 7] = 0\n 34390: u8 [a0 + 6] = 0\n 34393: u8 [a0 + 5] = 0\n 34396: u8 [a0 + 3] = 0x42\n 34400: u8 [a0 + 2] = 0x24\n 34404: u8 [a0 + 1] = 0x35\n 34408: u8 [a0 + 0] = 0x65\n 34411: a3 = u64 [sp + 0xc0]\n 34415: a3 = a3 | s1\n 34418: a1 = 0x100000000\n 34428: u64 [sp + 0x70] = a1\n 34431: a1 = 0xfffffffc\n 34441: a2 = u64 [sp + 0xe0]\n 34445: a1 = a2 <u a1\n 34448: a2 = u64 [sp + 0xd8]\n 34452: a1 = 0 if a2 != 0\n 34454: u64 [sp + 0xc0] = a3\n 34458: a1 = 0 if a3 != 0\n 34460: u8 [a0 + 4] = 0\n 34463: jump @463 if a1 != 0\n      : @462 (gas: 1)\n 34466: jump @520\n      : @463 (gas: 19)\n 34469: a0 = u64 [sp + 0x90]\n 34473: a0 = reverse a0\n 34475: a1 = a0 >> 0x20\n 34478: a2 = u64 [sp + 0x98]\n 34482: a2 = reverse a2\n 34484: a3 = a2 << 0x20\n 34487: a1 = a1 | a3\n 34490: u64 [sp + 0x98] = a1\n 34494: a0 = a0 << 0x20\n 34497: a1 = u64 [sp + 0xb8]\n 34501: a1 = reverse a1\n 34503: a1 = a1 >> 0x20\n 34506: a0 = a0 | a1\n 34509: u64 [sp + 0xb8] = a0\n 34513: s1 = a2 >> 0x20\n 34516: a0 = u64 [sp + 0xc8]\n 34520: i32 a0 = a0 + 0x4\n 34523: a1 = 0x20\n 34526: ra = 398, jump @0\n      : @464 [@dyn 199] (gas: 64)\n 34533: a1 = reverse s1\n 34535: a2 = u64 [sp + 0x98]\n 34539: a2 = reverse a2\n 34541: a3 = u64 [sp + 0xb8]\n 34545: a3 = reverse a3\n 34547: a4 = a3 >> 0x38\n 34550: u8 [a0 + 0x1f] = a4\n 34553: a4 = a3 >> 0x30\n 34556: u8 [a0 + 0x1e] = a4\n 34559: a4 = a3 >> 0x28\n 34562: u8 [a0 + 0x1d] = a4\n 34565: a4 = a3 >> 0x20\n 34568: u8 [a0 + 0x1c] = a4\n 34571: a4 = a3 >> 0x18\n 34574: u8 [a0 + 0x1b] = a4\n 34577: a4 = a3 >> 0x10\n 34580: u8 [a0 + 0x1a] = a4\n 34583: a4 = a3 >> 0x8\n 34586: u8 [a0 + 0x19] = a4\n 34589: u8 [a0 + 0x18] = a3\n 34592: u8 [a0 + 0x10] = a2\n 34595: u8 [a0 + 11] = 0\n 34598: u8 [a0 + 10] = 0\n 34601: u8 [a0 + 9] = 0\n 34604: u8 [a0 + 7] = 0\n 34607: u8 [a0 + 6] = 0\n 34610: u8 [a0 + 5] = 0\n 34613: u8 [a0 + 4] = 0\n 34616: u8 [a0 + 3] = 0\n 34619: u8 [a0 + 2] = 0\n 34622: u8 [a0 + 1] = 0\n 34625: u8 [a0 + 0] = 0\n 34627: a3 = a2 >> 0x38\n 34630: u8 [a0 + 0x17] = a3\n 34633: a3 = a2 >> 0x30\n 34636: u8 [a0 + 0x16] = a3\n 34639: a3 = a2 >> 0x28\n 34642: u8 [a0 + 0x15] = a3\n 34645: a3 = a2 >> 0x20\n 34648: u8 [a0 + 0x14] = a3\n 34651: a3 = a2 >> 0x18\n 34654: u8 [a0 + 0x13] = a3\n 34657: a3 = a2 >> 0x10\n 34660: u8 [a0 + 0x12] = a3\n 34663: a2 = a2 >> 0x8\n 34666: u8 [a0 + 0x11] = a2\n 34669: u8 [a0 + 0x8] = a1\n 34672: a2 = a1 >> 0x38\n 34675: u8 [a0 + 0xf] = a2\n 34678: a2 = a1 >> 0x30\n 34681: u8 [a0 + 0xe] = a2\n 34684: a2 = a1 >> 0x28\n 34687: u8 [a0 + 0xd] = a2\n 34690: a1 = a1 >> 0x20\n 34693: a2 = u64 [sp + 0x70]\n 34696: a2 = a2 + 0xffffffffffffffdc\n 34699: a3 = u64 [sp + 0xe0]\n 34703: a2 = a3 <u a2\n 34706: a3 = u64 [sp + 0xd8]\n 34710: a2 = 0 if a3 != 0\n 34712: a3 = u64 [sp + 0xc0]\n 34716: a2 = 0 if a3 != 0\n 34718: u8 [a0 + 0xc] = a1\n 34721: jump @466 if a2 != 0\n      : @465 (gas: 1)\n 34724: jump @520\n      : @466 (gas: 4)\n 34727: a0 = u64 [sp + 0xc8]\n 34731: i32 a0 = a0 + 0x24\n 34734: a1 = 0x20\n 34737: ra = 400, jump @0\n      : @467 [@dyn 200] (gas: 65)\n 34744: a1 = u64 [sp + 0x78]\n 34747: a1 = reverse a1\n 34749: a2 = u64 [sp + 0x80]\n 34753: a2 = reverse a2\n 34755: a3 = u64 [sp + 0x88]\n 34759: a3 = reverse a3\n 34761: a4 = a3 >> 0x38\n 34764: u8 [a0 + 0x1f] = a4\n 34767: a4 = a3 >> 0x30\n 34770: u8 [a0 + 0x1e] = a4\n 34773: a4 = a3 >> 0x28\n 34776: u8 [a0 + 0x1d] = a4\n 34779: a4 = a3 >> 0x20\n 34782: u8 [a0 + 0x1c] = a4\n 34785: a4 = a3 >> 0x18\n 34788: u8 [a0 + 0x1b] = a4\n 34791: a4 = a3 >> 0x10\n 34794: u8 [a0 + 0x1a] = a4\n 34797: a4 = a3 >> 0x8\n 34800: u8 [a0 + 0x19] = a4\n 34803: u8 [a0 + 0x18] = a3\n 34806: u8 [a0 + 0x10] = a2\n 34809: u8 [a0 + 11] = 0\n 34812: u8 [a0 + 10] = 0\n 34815: u8 [a0 + 9] = 0\n 34818: u8 [a0 + 7] = 0\n 34821: u8 [a0 + 6] = 0\n 34824: u8 [a0 + 5] = 0\n 34827: u8 [a0 + 4] = 0\n 34830: u8 [a0 + 3] = 0\n 34833: u8 [a0 + 2] = 0\n 34836: u8 [a0 + 1] = 0\n 34839: u8 [a0 + 0] = 0\n 34841: a3 = a2 >> 0x38\n 34844: u8 [a0 + 0x17] = a3\n 34847: a3 = a2 >> 0x30\n 34850: u8 [a0 + 0x16] = a3\n 34853: a3 = a2 >> 0x28\n 34856: u8 [a0 + 0x15] = a3\n 34859: a3 = a2 >> 0x20\n 34862: u8 [a0 + 0x14] = a3\n 34865: a3 = a2 >> 0x18\n 34868: u8 [a0 + 0x13] = a3\n 34871: a3 = a2 >> 0x10\n 34874: u8 [a0 + 0x12] = a3\n 34877: a2 = a2 >> 0x8\n 34880: u8 [a0 + 0x11] = a2\n 34883: u8 [a0 + 0x8] = a1\n 34886: a2 = a1 >> 0x38\n 34889: u8 [a0 + 0xf] = a2\n 34892: a2 = a1 >> 0x30\n 34895: u8 [a0 + 0xe] = a2\n 34898: a2 = a1 >> 0x28\n 34901: u8 [a0 + 0xd] = a2\n 34904: a1 = a1 >> 0x20\n 34907: s1 = 0x100000000\n 34917: a2 = 0xffffffbc\n 34927: a3 = u64 [sp + 0xe0]\n 34931: a2 = a3 <u a2\n 34934: a3 = u64 [sp + 0xd8]\n 34938: a2 = 0 if a3 != 0\n 34940: a3 = u64 [sp + 0xc0]\n 34944: a2 = 0 if a3 != 0\n 34946: u8 [a0 + 0xc] = a1\n 34949: jump @469 if a2 != 0\n      : @468 (gas: 1)\n 34952: jump @520\n      : @469 (gas: 4)\n 34955: a0 = u64 [sp + 0xc8]\n 34959: i32 a0 = a0 + 0x44\n 34962: a1 = 0x20\n 34965: ra = 402, jump @0\n      : @470 [@dyn 201] (gas: 76)\n 34972: a1 = u64 [sp + 0x50]\n 34975: a1 = reverse a1\n 34977: a2 = u64 [sp + 0x58]\n 34980: a2 = reverse a2\n 34982: a3 = u64 [sp + 0x60]\n 34985: a3 = reverse a3\n 34987: a4 = u64 [sp + 0x68]\n 34990: a4 = reverse a4\n 34992: a5 = a4 >> 0x38\n 34995: u8 [a0 + 0x1f] = a5\n 34998: a5 = a4 >> 0x30\n 35001: u8 [a0 + 0x1e] = a5\n 35004: a5 = a4 >> 0x28\n 35007: u8 [a0 + 0x1d] = a5\n 35010: a5 = a4 >> 0x20\n 35013: u8 [a0 + 0x1c] = a5\n 35016: a5 = a4 >> 0x18\n 35019: u8 [a0 + 0x1b] = a5\n 35022: a5 = a4 >> 0x10\n 35025: u8 [a0 + 0x1a] = a5\n 35028: a5 = a4 >> 0x8\n 35031: u8 [a0 + 0x19] = a5\n 35034: u8 [a0 + 0x18] = a4\n 35037: u8 [a0 + 0x10] = a3\n 35040: a4 = a3 >> 0x38\n 35043: u8 [a0 + 0x17] = a4\n 35046: a4 = a3 >> 0x30\n 35049: u8 [a0 + 0x16] = a4\n 35052: a4 = a3 >> 0x28\n 35055: u8 [a0 + 0x15] = a4\n 35058: a4 = a3 >> 0x20\n 35061: u8 [a0 + 0x14] = a4\n 35064: a4 = a3 >> 0x18\n 35067: u8 [a0 + 0x13] = a4\n 35070: a4 = a3 >> 0x10\n 35073: u8 [a0 + 0x12] = a4\n 35076: a3 = a3 >> 0x8\n 35079: u8 [a0 + 0x11] = a3\n 35082: u8 [a0 + 0x8] = a2\n 35085: a3 = a2 >> 0x38\n 35088: u8 [a0 + 0xf] = a3\n 35091: a3 = a2 >> 0x30\n 35094: u8 [a0 + 0xe] = a3\n 35097: a3 = a2 >> 0x28\n 35100: u8 [a0 + 0xd] = a3\n 35103: a3 = a2 >> 0x20\n 35106: u8 [a0 + 0xc] = a3\n 35109: a3 = a2 >> 0x18\n 35112: u8 [a0 + 0xb] = a3\n 35115: a3 = a2 >> 0x10\n 35118: u8 [a0 + 0xa] = a3\n 35121: a2 = a2 >> 0x8\n 35124: u8 [a0 + 0x9] = a2\n 35127: u8 [a0] = a1\n 35129: a2 = a1 >> 0x38\n 35132: u8 [a0 + 0x7] = a2\n 35135: a2 = a1 >> 0x30\n 35138: u8 [a0 + 0x6] = a2\n 35141: a2 = a1 >> 0x28\n 35144: u8 [a0 + 0x5] = a2\n 35147: a2 = a1 >> 0x20\n 35150: u8 [a0 + 0x4] = a2\n 35153: a2 = a1 >> 0x18\n 35156: u8 [a0 + 0x3] = a2\n 35159: a2 = a1 >> 0x10\n 35162: u8 [a0 + 0x2] = a2\n 35165: a1 = a1 >> 0x8\n 35168: a2 = s1 + 0xffffffffffffff9c\n 35171: a3 = u64 [sp + 0xe0]\n 35175: a2 = a3 <u a2\n 35178: a3 = u64 [sp + 0xd8]\n 35182: a2 = 0 if a3 != 0\n 35184: a3 = u64 [sp + 0xc0]\n 35188: a2 = 0 if a3 != 0\n 35190: u8 [a0 + 0x1] = a1\n 35193: jump @472 if a2 != 0\n      : @471 (gas: 1)\n 35196: jump @520\n      : @472 (gas: 8)\n 35199: a0 = 0x8400000000\n 35209: u64 [sp + 0xd8] = a0\n 35213: a0 = 0x800000000\n 35223: u64 [sp + 0xc0] = a0\n 35227: s1 = u64 [sp + 0xc8]\n 35231: i32 a0 = s1 + 0x64\n 35234: a1 = 0x20\n 35237: ra = 404, jump @0\n      : @473 [@dyn 202] (gas: 46)\n 35244: u8 [a0 + 31] = 0x1\n 35248: u8 [a0 + 30] = 0\n 35251: u8 [a0 + 29] = 0\n 35254: u8 [a0 + 28] = 0\n 35257: u8 [a0 + 27] = 0\n 35260: u8 [a0 + 26] = 0\n 35263: u8 [a0 + 25] = 0\n 35266: u8 [a0 + 24] = 0\n 35269: u8 [a0 + 23] = 0\n 35272: u8 [a0 + 22] = 0\n 35275: u8 [a0 + 21] = 0\n 35278: u8 [a0 + 20] = 0\n 35281: u8 [a0 + 19] = 0\n 35284: u8 [a0 + 18] = 0\n 35287: u8 [a0 + 17] = 0\n 35290: u8 [a0 + 16] = 0\n 35293: u8 [a0 + 15] = 0\n 35296: u8 [a0 + 14] = 0\n 35299: u8 [a0 + 13] = 0\n 35302: u8 [a0 + 12] = 0\n 35305: u8 [a0 + 11] = 0\n 35308: u8 [a0 + 10] = 0\n 35311: u8 [a0 + 9] = 0\n 35314: u8 [a0 + 8] = 0\n 35317: u8 [a0 + 7] = 0\n 35320: u8 [a0 + 6] = 0\n 35323: u8 [a0 + 5] = 0\n 35326: u8 [a0 + 4] = 0\n 35329: u8 [a0 + 3] = 0\n 35332: u8 [a0 + 2] = 0\n 35335: u8 [a0 + 1] = 0\n 35338: u8 [a0 + 0] = 0\n 35340: ecalli 9 // 'ref_time_left'\n 35342: a0 = u64 [sp + 0x38]\n 35345: u64 [sp + 0x3c8] = a0\n 35349: a0 = u64 [sp + 0x48]\n 35352: u64 [sp + 0x3c0] = a0\n 35356: a0 = u64 [sp + 0x40]\n 35359: u32 [sp + 0x3d0] = a0\n 35363: u64 [sp + 1016] = 0\n 35367: u64 [sp + 1008] = 0\n 35371: u64 [sp + 1000] = 0\n 35375: u64 [sp + 992] = 0\n 35379: a1 = 0x84\n 35383: a0 = s1\n 35385: ra = 406, jump @0\n      : @474 [@dyn 203] (gas: 4)\n 35392: u64 [sp + 0xe0] = a0\n 35396: a0 = s1\n 35398: a1 = 0\n 35400: ra = 408, jump @0\n      : @475 [@dyn 204] (gas: 31)\n 35407: u32 [sp + 1024] = 0\n 35411: u64 [sp + 1080] = 0xffffffffffffffff\n 35416: u64 [sp + 1072] = 0xffffffffffffffff\n 35421: u64 [sp + 1064] = 0xffffffffffffffff\n 35426: u64 [sp + 1056] = 0xffffffffffffffff\n 35431: a1 = sp + 0x3c0\n 35435: a1 = a1 << 0x20\n 35438: a1 = a1 >> 0x20\n 35441: s1 = u64 [sp + 0xc0]\n 35445: s1 = s1 | a1\n 35448: a1 = sp + 0x3e0\n 35452: a1 = a1 << 0x20\n 35455: a1 = a1 >> 0x20\n 35458: a2 = sp + 0x420\n 35462: a2 = a2 << 0x20\n 35465: a3 = a2 | a1\n 35468: a1 = u64 [sp + 0xe0]\n 35472: a1 = a1 << 0x20\n 35475: a1 = a1 >> 0x20\n 35478: a4 = u64 [sp + 0xd8]\n 35482: a4 = a4 | a1\n 35485: a0 = a0 << 0x20\n 35488: a0 = a0 >> 0x20\n 35491: a1 = sp + 0x400\n 35495: a1 = a1 << 0x20\n 35498: a5 = a1 | a0\n 35501: a1 = 0xffffffffffffffff\n 35504: a2 = 0xffffffffffffffff\n 35507: a0 = s1\n 35509: ecalli 1 // 'call'\n 35511: fallthrough\n      : @476 (gas: 1)\n 35512: jump @498 if a0 != 0\n      : @477 (gas: 4)\n 35516: ecalli 11 // 'return_data_size'\n 35518: a0 = 0x40\n 35521: a1 = 0x20\n 35524: ra = 410, jump @0\n      : @478 [@dyn 205] (gas: 174)\n 35531: a3 = u64 [sp + 0x18]\n 35534: u8 [a0 + 0x18] = a3\n 35537: a2 = u64 [sp + 0x28]\n 35540: a1 = a2 >> 0x38\n 35543: u8 [a0 + 0x17] = a1\n 35546: a1 = a2 >> 0x30\n 35549: u8 [a0 + 0x16] = a1\n 35552: a1 = a2 >> 0x28\n 35555: u8 [a0 + 0x15] = a1\n 35558: a1 = a2 >> 0x20\n 35561: u8 [a0 + 0x14] = a1\n 35564: a1 = a2 >> 0x18\n 35567: u8 [a0 + 0x13] = a1\n 35570: a1 = a2 >> 0x10\n 35573: u8 [a0 + 0x12] = a1\n 35576: a1 = a2 >> 0x8\n 35579: u8 [a0 + 0x11] = a1\n 35582: u8 [a0 + 0x10] = a2\n 35585: a2 = u64 [sp + 0x10]\n 35588: a1 = a2 >> 0x38\n 35591: u8 [a0 + 0xf] = a1\n 35594: a1 = a2 >> 0x30\n 35597: u8 [a0 + 0xe] = a1\n 35600: a1 = a2 >> 0x28\n 35603: u8 [a0 + 0xd] = a1\n 35606: a1 = a2 >> 0x20\n 35609: u8 [a0 + 0xc] = a1\n 35612: a1 = a2 >> 0x18\n 35615: u8 [a0 + 0xb] = a1\n 35618: a1 = a2 >> 0x10\n 35621: u8 [a0 + 0xa] = a1\n 35624: a1 = a2 >> 0x8\n 35627: u8 [a0 + 0x9] = a1\n 35630: u8 [a0 + 0x8] = a2\n 35633: a2 = u64 [sp + 0x30]\n 35636: a1 = a2 >> 0x38\n 35639: u8 [a0 + 0x7] = a1\n 35642: a1 = a2 >> 0x30\n 35645: u8 [a0 + 0x6] = a1\n 35648: a1 = a2 >> 0x28\n 35651: u8 [a0 + 0x5] = a1\n 35654: a1 = a2 >> 0x20\n 35657: u8 [a0 + 0x4] = a1\n 35660: a1 = a2 >> 0x18\n 35663: u8 [a0 + 0x3] = a1\n 35666: a1 = a2 >> 0x10\n 35669: u8 [a0 + 0x2] = a1\n 35672: a1 = a2 >> 0x8\n 35675: u8 [a0 + 0x1] = a1\n 35678: u8 [a0] = a2\n 35680: a1 = a3 >> 0x38\n 35683: u8 [a0 + 0x1f] = a1\n 35686: a1 = a3 >> 0x30\n 35689: u8 [a0 + 0x1e] = a1\n 35692: a1 = a3 >> 0x28\n 35695: u8 [a0 + 0x1d] = a1\n 35698: a1 = a3 >> 0x20\n 35701: u8 [a0 + 0x1c] = a1\n 35704: a1 = a3 >> 0x18\n 35707: u8 [a0 + 0x1b] = a1\n 35710: a1 = a3 >> 0x10\n 35713: u8 [a0 + 0x1a] = a1\n 35716: a1 = a3 >> 0x8\n 35719: u8 [a0 + 0x19] = a1\n 35722: u64 [sp + 1336] = 0\n 35726: u64 [sp + 1328] = 0\n 35730: u64 [sp + 1320] = 0\n 35734: u64 [sp + 1312] = 0x1\n 35739: u64 [sp + 1368] = 0\n 35743: u64 [sp + 1360] = 0\n 35747: u64 [sp + 1352] = 0\n 35751: u64 [sp + 1344] = 0\n 35755: u32 [sp + 1280] = 0x20\n 35760: i32 a1 = sp + 0x520\n 35764: i32 a3 = sp + 0x540\n 35768: i32 a4 = sp + 0x500\n 35772: a2 = 0xffffffffffffffff\n 35775: a0 = 0\n 35777: ecalli 7 // 'get_storage'\n 35779: a0 = u64 [sp + 0x540]\n 35783: u64 [sp + 0xe0] = a0\n 35787: a0 = u64 [sp + 0x550]\n 35791: u64 [sp + 0xc8] = a0\n 35795: a0 = u64 [sp + 0x548]\n 35799: u64 [sp + 0xb8] = a0\n 35803: a0 = u64 [sp + 0xf8]\n 35807: u64 [sp + 0x538] = a0\n 35811: s1 = u64 [sp + 0xd0]\n 35815: u64 [sp + 0x530] = s1\n 35819: a0 = u64 [sp + 0xe8]\n 35823: u64 [sp + 0x528] = a0\n 35827: a0 = u64 [sp + 0xf0]\n 35831: u64 [sp + 0x520] = a0\n 35835: u64 [sp + 1368] = 0\n 35839: u64 [sp + 1360] = 0\n 35843: u64 [sp + 1352] = 0\n 35847: u64 [sp + 1344] = 0\n 35851: u32 [sp + 1280] = 0x20\n 35856: i32 a1 = sp + 0x520\n 35860: i32 a3 = sp + 0x540\n 35864: i32 a4 = sp + 0x500\n 35868: a2 = 0xffffffffffffffff\n 35871: a0 = 0\n 35873: ecalli 7 // 'get_storage'\n 35875: a0 = u64 [sp + 0x540]\n 35879: u64 [sp + 0x98] = a0\n 35883: a0 = u64 [sp + 0x548]\n 35887: u64 [sp + 0x90] = a0\n 35891: a0 = u64 [sp + 0x550]\n 35895: u64 [sp + 0x88] = a0\n 35899: i32 a0 = sp + 0x440\n 35903: ecalli 5 // 'caller'\n 35905: a0 = i32 [sp + 0x450]\n 35909: u64 [sp + 0x80] = a0\n 35913: a0 = u64 [sp + 0x440]\n 35917: u64 [sp + 0x78] = a0\n 35920: a0 = u64 [sp + 0x448]\n 35924: u64 [sp + 0x70] = a0\n 35927: a0 = u64 [sp + 0xf0]\n 35931: a0 = a0 + 0x1\n 35934: a1 = a0 <u 0x1\n 35937: a2 = u64 [sp + 0xe8]\n 35941: a1 = a1 + a2\n 35944: a2 = a0 | a1\n 35947: a2 = a2 <u 0x1\n 35950: a2 = a2 + s1\n 35953: a3 = a2 <u s1\n 35956: a4 = u64 [sp + 0xf8]\n 35960: a3 = a3 + a4\n 35963: u64 [sp + 0x538] = a3\n 35967: u64 [sp + 0x530] = a2\n 35971: u64 [sp + 0x528] = a1\n 35975: u64 [sp + 0x520] = a0\n 35979: u64 [sp + 1368] = 0\n 35983: u64 [sp + 1360] = 0\n 35987: u64 [sp + 1352] = 0\n 35991: u64 [sp + 1344] = 0\n 35995: u32 [sp + 1280] = 0x20\n 36000: i32 a1 = sp + 0x520\n 36004: i32 a3 = sp + 0x540\n 36008: i32 a4 = sp + 0x500\n 36012: a2 = 0xffffffffffffffff\n 36015: a0 = 0\n 36017: ecalli 7 // 'get_storage'\n 36019: a0 = u64 [sp + 0x558]\n 36023: u64 [sp + 0x50] = a0\n 36026: a0 = u64 [sp + 0x550]\n 36030: u64 [sp + 0x58] = a0\n 36033: a0 = u64 [sp + 0x548]\n 36037: u64 [sp + 0x60] = a0\n 36040: a0 = u64 [sp + 0x540]\n 36044: u64 [sp + 0x68] = a0\n 36047: a0 = u64 [sp + 0xb8]\n 36051: a0 = reverse a0\n 36053: a1 = a0 << 0x20\n 36056: a2 = u64 [sp + 0xc8]\n 36060: a2 = reverse a2\n 36062: a2 = a2 >> 0x20\n 36065: a3 = a2 | a1\n 36068: a0 = a0 >> 0x20\n 36071: a1 = u64 [sp + 0xe0]\n 36075: a1 = reverse a1\n 36077: a2 = a1 << 0x20\n 36080: a0 = a0 | a2\n 36083: a1 = a1 >> 0x20\n 36086: u64 [sp + 0x38] = a0\n 36089: u64 [sp + 0x468] = a0\n 36093: u64 [sp + 0x48] = a3\n 36096: u64 [sp + 0x460] = a3\n 36100: u64 [sp + 0x40] = a1\n 36103: u32 [sp + 0x470] = a1\n 36107: i32 a0 = sp + 0x460\n 36111: ecalli 6 // 'code_size'\n 36113: fallthrough\n      : @479 (gas: 1)\n 36114: jump @481 if a0 != 0\n      : @480 (gas: 1)\n 36117: jump @522\n      : @481 (gas: 3)\n 36120: a0 = 0x40\n 36123: a1 = 0x20\n 36126: ra = 412, jump @0\n      : @482 [@dyn 206] (gas: 107)\n 36133: a1 = u8 [a0 + 0x11]\n 36136: a2 = u8 [a0 + 0x10]\n 36139: a3 = u8 [a0 + 0x12]\n 36142: a4 = u8 [a0 + 0x13]\n 36145: a1 = a1 << 0x8\n 36148: a1 = a1 | a2\n 36151: a3 = a3 << 0x10\n 36154: a4 = a4 << 0x18\n 36157: a3 = a3 | a4\n 36160: a1 = a1 | a3\n 36163: a2 = u8 [a0 + 0x15]\n 36166: a3 = u8 [a0 + 0x14]\n 36169: a4 = u8 [a0 + 0x16]\n 36172: a5 = u8 [a0 + 0x17]\n 36175: a2 = a2 << 0x8\n 36178: a2 = a2 | a3\n 36181: a4 = a4 << 0x10\n 36184: a5 = a5 << 0x18\n 36187: a4 = a4 | a5\n 36190: a2 = a2 | a4\n 36193: a2 = a2 << 0x20\n 36196: t1 = a2 | a1\n 36199: a1 = u8 [a0 + 0x1]\n 36202: a2 = u8 [a0]\n 36204: a3 = u8 [a0 + 0x2]\n 36207: a4 = u8 [a0 + 0x3]\n 36210: a1 = a1 << 0x8\n 36213: a1 = a1 | a2\n 36216: a3 = a3 << 0x10\n 36219: a4 = a4 << 0x18\n 36222: a3 = a3 | a4\n 36225: a1 = a1 | a3\n 36228: a2 = u8 [a0 + 0x5]\n 36231: a3 = u8 [a0 + 0x4]\n 36234: a4 = u8 [a0 + 0x6]\n 36237: a5 = u8 [a0 + 0x7]\n 36240: a2 = a2 << 0x8\n 36243: a2 = a2 | a3\n 36246: a4 = a4 << 0x10\n 36249: a5 = a5 << 0x18\n 36252: a4 = a4 | a5\n 36255: a2 = a2 | a4\n 36258: a2 = a2 << 0x20\n 36261: t0 = a2 | a1\n 36264: a1 = u8 [a0 + 0x19]\n 36267: a2 = u8 [a0 + 0x18]\n 36270: a3 = u8 [a0 + 0x1a]\n 36273: a4 = u8 [a0 + 0x1b]\n 36276: a1 = a1 << 0x8\n 36279: a1 = a1 | a2\n 36282: a3 = a3 << 0x10\n 36285: a4 = a4 << 0x18\n 36288: a3 = a3 | a4\n 36291: a1 = a1 | a3\n 36294: a2 = u8 [a0 + 0x1d]\n 36297: a3 = u8 [a0 + 0x1c]\n 36300: a4 = u8 [a0 + 0x1e]\n 36303: a5 = u8 [a0 + 0x1f]\n 36306: a2 = a2 << 0x8\n 36309: a2 = a2 | a3\n 36312: a4 = a4 << 0x10\n 36315: a5 = a5 << 0x18\n 36318: a4 = a4 | a5\n 36321: a2 = a2 | a4\n 36324: a2 = a2 << 0x20\n 36327: a5 = a2 | a1\n 36330: a1 = u8 [a0 + 0x9]\n 36333: a2 = u8 [a0 + 0x8]\n 36336: a3 = u8 [a0 + 0xa]\n 36339: a4 = u8 [a0 + 0xb]\n 36342: a1 = a1 << 0x8\n 36345: a1 = a1 | a2\n 36348: a3 = a3 << 0x10\n 36351: a4 = a4 << 0x18\n 36354: a3 = a3 | a4\n 36357: a1 = a1 | a3\n 36360: a2 = u8 [a0 + 0xd]\n 36363: a3 = u8 [a0 + 0xc]\n 36366: a4 = u8 [a0 + 0xe]\n 36369: a0 = u8 [a0 + 0xf]\n 36372: a2 = a2 << 0x8\n 36375: a2 = a2 | a3\n 36378: a4 = a4 << 0x10\n 36381: a0 = a0 << 0x18\n 36384: a0 = a0 | a4\n 36387: a0 = a0 | a2\n 36390: a0 = a0 << 0x20\n 36393: a0 = a0 | a1\n 36396: u64 [sp + 0x10] = a0\n 36399: s1 = reverse a0\n 36401: u64 [sp + 0x18] = a5\n 36404: a1 = reverse a5\n 36406: u64 [sp + 0x30] = t0\n 36409: a2 = reverse t0\n 36411: u64 [sp + 0x28] = t1\n 36414: a0 = reverse t1\n 36416: u64 [sp + 0xf0] = a0\n 36420: u64 [sp + 0xe0] = a2\n 36424: a0 = a0 | a2\n 36427: u64 [sp + 0xf8] = a1\n 36431: a1 = a1 | s1\n 36434: a1 = a1 | a0\n 36437: a1 = a1 >> 0x20\n 36440: a0 = a0 | s1\n 36443: a0 = a0 << 0x20\n 36446: a0 = a0 | a1\n 36449: jump @520 if a0 != 0\n      : @483 (gas: 4)\n 36453: a0 = i32 [sp + 0xf8]\n 36457: a1 = 0x20\n 36460: u64 [sp + 0xe8] = a0\n 36464: ra = 414, jump @0\n      : @484 [@dyn 207] (gas: 44)\n 36471: u8 [a0 + 31] = 0\n 36474: u8 [a0 + 30] = 0\n 36477: u8 [a0 + 29] = 0\n 36480: u8 [a0 + 28] = 0\n 36483: u8 [a0 + 27] = 0\n 36486: u8 [a0 + 26] = 0\n 36489: u8 [a0 + 25] = 0\n 36492: u8 [a0 + 24] = 0\n 36495: u8 [a0 + 23] = 0\n 36498: u8 [a0 + 22] = 0\n 36501: u8 [a0 + 21] = 0\n 36504: u8 [a0 + 20] = 0\n 36507: u8 [a0 + 19] = 0\n 36510: u8 [a0 + 18] = 0\n 36513: u8 [a0 + 17] = 0\n 36516: u8 [a0 + 16] = 0\n 36519: u8 [a0 + 15] = 0\n 36522: u8 [a0 + 14] = 0\n 36525: u8 [a0 + 13] = 0\n 36528: u8 [a0 + 12] = 0\n 36531: u8 [a0 + 11] = 0\n 36534: u8 [a0 + 10] = 0\n 36537: u8 [a0 + 9] = 0\n 36540: u8 [a0 + 8] = 0\n 36543: u8 [a0 + 7] = 0\n 36546: u8 [a0 + 6] = 0\n 36549: u8 [a0 + 5] = 0\n 36552: u8 [a0 + 3] = 0x42\n 36556: u8 [a0 + 2] = 0x24\n 36560: u8 [a0 + 1] = 0x35\n 36564: u8 [a0 + 0] = 0x65\n 36567: a3 = u64 [sp + 0xe0]\n 36571: a3 = a3 | s1\n 36574: a1 = 0x100000000\n 36584: u64 [sp + 0xd0] = a1\n 36588: a1 = 0xfffffffc\n 36598: a2 = u64 [sp + 0xf8]\n 36602: a1 = a2 <u a1\n 36605: a2 = u64 [sp + 0xf0]\n 36609: a1 = 0 if a2 != 0\n 36611: u64 [sp + 0xe0] = a3\n 36615: a1 = 0 if a3 != 0\n 36617: u8 [a0 + 4] = 0\n 36620: jump @520 if a1 == 0\n      : @485 (gas: 13)\n 36624: a0 = 0xffffffff\n 36634: s1 = u64 [sp + 0x88]\n 36638: s1 = s1 & a0\n 36641: a0 = u64 [sp + 0x90]\n 36645: a0 = a0 & 0xffffffffffffffff\n 36648: u64 [sp + 0xb8] = a0\n 36652: a0 = u64 [sp + 0x98]\n 36656: a0 = a0 & 0xffffffffffffffff\n 36659: u64 [sp + 0xc8] = a0\n 36663: a0 = u64 [sp + 0xe8]\n 36667: i32 a0 = a0 + 0x4\n 36670: a1 = 0x20\n 36673: ra = 416, jump @0\n      : @486 [@dyn 208] (gas: 64)\n 36680: a1 = reverse s1\n 36682: a2 = u64 [sp + 0xb8]\n 36686: a2 = reverse a2\n 36688: a3 = u64 [sp + 0xc8]\n 36692: a3 = reverse a3\n 36694: a4 = a3 >> 0x38\n 36697: u8 [a0 + 0x1f] = a4\n 36700: a4 = a3 >> 0x30\n 36703: u8 [a0 + 0x1e] = a4\n 36706: a4 = a3 >> 0x28\n 36709: u8 [a0 + 0x1d] = a4\n 36712: a4 = a3 >> 0x20\n 36715: u8 [a0 + 0x1c] = a4\n 36718: a4 = a3 >> 0x18\n 36721: u8 [a0 + 0x1b] = a4\n 36724: a4 = a3 >> 0x10\n 36727: u8 [a0 + 0x1a] = a4\n 36730: a4 = a3 >> 0x8\n 36733: u8 [a0 + 0x19] = a4\n 36736: u8 [a0 + 0x18] = a3\n 36739: u8 [a0 + 0x10] = a2\n 36742: u8 [a0 + 11] = 0\n 36745: u8 [a0 + 10] = 0\n 36748: u8 [a0 + 9] = 0\n 36751: u8 [a0 + 7] = 0\n 36754: u8 [a0 + 6] = 0\n 36757: u8 [a0 + 5] = 0\n 36760: u8 [a0 + 4] = 0\n 36763: u8 [a0 + 3] = 0\n 36766: u8 [a0 + 2] = 0\n 36769: u8 [a0 + 1] = 0\n 36772: u8 [a0 + 0] = 0\n 36774: a3 = a2 >> 0x38\n 36777: u8 [a0 + 0x17] = a3\n 36780: a3 = a2 >> 0x30\n 36783: u8 [a0 + 0x16] = a3\n 36786: a3 = a2 >> 0x28\n 36789: u8 [a0 + 0x15] = a3\n 36792: a3 = a2 >> 0x20\n 36795: u8 [a0 + 0x14] = a3\n 36798: a3 = a2 >> 0x18\n 36801: u8 [a0 + 0x13] = a3\n 36804: a3 = a2 >> 0x10\n 36807: u8 [a0 + 0x12] = a3\n 36810: a2 = a2 >> 0x8\n 36813: u8 [a0 + 0x11] = a2\n 36816: u8 [a0 + 0x8] = a1\n 36819: a2 = a1 >> 0x38\n 36822: u8 [a0 + 0xf] = a2\n 36825: a2 = a1 >> 0x30\n 36828: u8 [a0 + 0xe] = a2\n 36831: a2 = a1 >> 0x28\n 36834: u8 [a0 + 0xd] = a2\n 36837: a1 = a1 >> 0x20\n 36840: a2 = u64 [sp + 0xd0]\n 36844: a2 = a2 + 0xffffffffffffffdc\n 36847: a3 = u64 [sp + 0xf8]\n 36851: a2 = a3 <u a2\n 36854: a3 = u64 [sp + 0xf0]\n 36858: a2 = 0 if a3 != 0\n 36860: a3 = u64 [sp + 0xe0]\n 36864: a2 = 0 if a3 != 0\n 36866: u8 [a0 + 0xc] = a1\n 36869: jump @520 if a2 == 0\n      : @487 (gas: 19)\n 36873: a0 = u64 [sp + 0x70]\n 36876: a0 = reverse a0\n 36878: a1 = a0 >> 0x20\n 36881: a2 = u64 [sp + 0x78]\n 36884: a2 = reverse a2\n 36886: a3 = a2 << 0x20\n 36889: a1 = a1 | a3\n 36892: u64 [sp + 0xd0] = a1\n 36896: a0 = a0 << 0x20\n 36899: a1 = u64 [sp + 0x80]\n 36903: a1 = reverse a1\n 36905: a1 = a1 >> 0x20\n 36908: a0 = a0 | a1\n 36911: u64 [sp + 0xc8] = a0\n 36915: s1 = a2 >> 0x20\n 36918: a0 = u64 [sp + 0xe8]\n 36922: i32 a0 = a0 + 0x24\n 36925: a1 = 0x20\n 36928: ra = 418, jump @0\n      : @488 [@dyn 209] (gas: 64)\n 36935: a1 = reverse s1\n 36937: a2 = u64 [sp + 0xd0]\n 36941: a2 = reverse a2\n 36943: a3 = u64 [sp + 0xc8]\n 36947: a3 = reverse a3\n 36949: a4 = a3 >> 0x38\n 36952: u8 [a0 + 0x1f] = a4\n 36955: a4 = a3 >> 0x30\n 36958: u8 [a0 + 0x1e] = a4\n 36961: a4 = a3 >> 0x28\n 36964: u8 [a0 + 0x1d] = a4\n 36967: a4 = a3 >> 0x20\n 36970: u8 [a0 + 0x1c] = a4\n 36973: a4 = a3 >> 0x18\n 36976: u8 [a0 + 0x1b] = a4\n 36979: a4 = a3 >> 0x10\n 36982: u8 [a0 + 0x1a] = a4\n 36985: a4 = a3 >> 0x8\n 36988: u8 [a0 + 0x19] = a4\n 36991: u8 [a0 + 0x18] = a3\n 36994: u8 [a0 + 0x10] = a2\n 36997: u8 [a0 + 11] = 0\n 37000: u8 [a0 + 10] = 0\n 37003: u8 [a0 + 9] = 0\n 37006: u8 [a0 + 7] = 0\n 37009: u8 [a0 + 6] = 0\n 37012: u8 [a0 + 5] = 0\n 37015: u8 [a0 + 4] = 0\n 37018: u8 [a0 + 3] = 0\n 37021: u8 [a0 + 2] = 0\n 37024: u8 [a0 + 1] = 0\n 37027: u8 [a0 + 0] = 0\n 37029: a3 = a2 >> 0x38\n 37032: u8 [a0 + 0x17] = a3\n 37035: a3 = a2 >> 0x30\n 37038: u8 [a0 + 0x16] = a3\n 37041: a3 = a2 >> 0x28\n 37044: u8 [a0 + 0x15] = a3\n 37047: a3 = a2 >> 0x20\n 37050: u8 [a0 + 0x14] = a3\n 37053: a3 = a2 >> 0x18\n 37056: u8 [a0 + 0x13] = a3\n 37059: a3 = a2 >> 0x10\n 37062: u8 [a0 + 0x12] = a3\n 37065: a2 = a2 >> 0x8\n 37068: u8 [a0 + 0x11] = a2\n 37071: u8 [a0 + 0x8] = a1\n 37074: a2 = a1 >> 0x38\n 37077: u8 [a0 + 0xf] = a2\n 37080: a2 = a1 >> 0x30\n 37083: u8 [a0 + 0xe] = a2\n 37086: a2 = a1 >> 0x28\n 37089: u8 [a0 + 0xd] = a2\n 37092: a1 = a1 >> 0x20\n 37095: s1 = 0x100000000\n 37105: a2 = 0xffffffbc\n 37115: a3 = u64 [sp + 0xf8]\n 37119: a2 = a3 <u a2\n 37122: a3 = u64 [sp + 0xf0]\n 37126: a2 = 0 if a3 != 0\n 37128: a3 = u64 [sp + 0xe0]\n 37132: a2 = 0 if a3 != 0\n 37134: u8 [a0 + 0xc] = a1\n 37137: jump @520 if a2 == 0\n      : @489 (gas: 4)\n 37141: a0 = u64 [sp + 0xe8]\n 37145: i32 a0 = a0 + 0x44\n 37148: a1 = 0x20\n 37151: ra = 420, jump @0\n      : @490 [@dyn 210] (gas: 76)\n 37158: a1 = u64 [sp + 0x50]\n 37161: a1 = reverse a1\n 37163: a2 = u64 [sp + 0x58]\n 37166: a2 = reverse a2\n 37168: a3 = u64 [sp + 0x60]\n 37171: a3 = reverse a3\n 37173: a4 = u64 [sp + 0x68]\n 37176: a4 = reverse a4\n 37178: a5 = a4 >> 0x38\n 37181: u8 [a0 + 0x1f] = a5\n 37184: a5 = a4 >> 0x30\n 37187: u8 [a0 + 0x1e] = a5\n 37190: a5 = a4 >> 0x28\n 37193: u8 [a0 + 0x1d] = a5\n 37196: a5 = a4 >> 0x20\n 37199: u8 [a0 + 0x1c] = a5\n 37202: a5 = a4 >> 0x18\n 37205: u8 [a0 + 0x1b] = a5\n 37208: a5 = a4 >> 0x10\n 37211: u8 [a0 + 0x1a] = a5\n 37214: a5 = a4 >> 0x8\n 37217: u8 [a0 + 0x19] = a5\n 37220: u8 [a0 + 0x18] = a4\n 37223: u8 [a0 + 0x10] = a3\n 37226: a4 = a3 >> 0x38\n 37229: u8 [a0 + 0x17] = a4\n 37232: a4 = a3 >> 0x30\n 37235: u8 [a0 + 0x16] = a4\n 37238: a4 = a3 >> 0x28\n 37241: u8 [a0 + 0x15] = a4\n 37244: a4 = a3 >> 0x20\n 37247: u8 [a0 + 0x14] = a4\n 37250: a4 = a3 >> 0x18\n 37253: u8 [a0 + 0x13] = a4\n 37256: a4 = a3 >> 0x10\n 37259: u8 [a0 + 0x12] = a4\n 37262: a3 = a3 >> 0x8\n 37265: u8 [a0 + 0x11] = a3\n 37268: u8 [a0 + 0x8] = a2\n 37271: a3 = a2 >> 0x38\n 37274: u8 [a0 + 0xf] = a3\n 37277: a3 = a2 >> 0x30\n 37280: u8 [a0 + 0xe] = a3\n 37283: a3 = a2 >> 0x28\n 37286: u8 [a0 + 0xd] = a3\n 37289: a3 = a2 >> 0x20\n 37292: u8 [a0 + 0xc] = a3\n 37295: a3 = a2 >> 0x18\n 37298: u8 [a0 + 0xb] = a3\n 37301: a3 = a2 >> 0x10\n 37304: u8 [a0 + 0xa] = a3\n 37307: a2 = a2 >> 0x8\n 37310: u8 [a0 + 0x9] = a2\n 37313: u8 [a0] = a1\n 37315: a2 = a1 >> 0x38\n 37318: u8 [a0 + 0x7] = a2\n 37321: a2 = a1 >> 0x30\n 37324: u8 [a0 + 0x6] = a2\n 37327: a2 = a1 >> 0x28\n 37330: u8 [a0 + 0x5] = a2\n 37333: a2 = a1 >> 0x20\n 37336: u8 [a0 + 0x4] = a2\n 37339: a2 = a1 >> 0x18\n 37342: u8 [a0 + 0x3] = a2\n 37345: a2 = a1 >> 0x10\n 37348: u8 [a0 + 0x2] = a2\n 37351: a1 = a1 >> 0x8\n 37354: a2 = s1 + 0xffffffffffffff9c\n 37357: a3 = u64 [sp + 0xf8]\n 37361: a2 = a3 <u a2\n 37364: a3 = u64 [sp + 0xf0]\n 37368: a2 = 0 if a3 != 0\n 37370: a3 = u64 [sp + 0xe0]\n 37374: a2 = 0 if a3 != 0\n 37376: u8 [a0 + 0x1] = a1\n 37379: jump @520 if a2 == 0\n      : @491 (gas: 4)\n 37383: s1 = u64 [sp + 0xe8]\n 37387: i32 a0 = s1 + 0x64\n 37390: a1 = 0x20\n 37393: ra = 422, jump @0\n      : @492 [@dyn 211] (gas: 46)\n 37400: u8 [a0 + 31] = 0x1\n 37404: u8 [a0 + 30] = 0\n 37407: u8 [a0 + 29] = 0\n 37410: u8 [a0 + 28] = 0\n 37413: u8 [a0 + 27] = 0\n 37416: u8 [a0 + 26] = 0\n 37419: u8 [a0 + 25] = 0\n 37422: u8 [a0 + 24] = 0\n 37425: u8 [a0 + 23] = 0\n 37428: u8 [a0 + 22] = 0\n 37431: u8 [a0 + 21] = 0\n 37434: u8 [a0 + 20] = 0\n 37437: u8 [a0 + 19] = 0\n 37440: u8 [a0 + 18] = 0\n 37443: u8 [a0 + 17] = 0\n 37446: u8 [a0 + 16] = 0\n 37449: u8 [a0 + 15] = 0\n 37452: u8 [a0 + 14] = 0\n 37455: u8 [a0 + 13] = 0\n 37458: u8 [a0 + 12] = 0\n 37461: u8 [a0 + 11] = 0\n 37464: u8 [a0 + 10] = 0\n 37467: u8 [a0 + 9] = 0\n 37470: u8 [a0 + 8] = 0\n 37473: u8 [a0 + 7] = 0\n 37476: u8 [a0 + 6] = 0\n 37479: u8 [a0 + 5] = 0\n 37482: u8 [a0 + 4] = 0\n 37485: u8 [a0 + 3] = 0\n 37488: u8 [a0 + 2] = 0\n 37491: u8 [a0 + 1] = 0\n 37494: u8 [a0 + 0] = 0\n 37496: ecalli 9 // 'ref_time_left'\n 37498: a0 = u64 [sp + 0x38]\n 37501: u64 [sp + 0x488] = a0\n 37505: a0 = u64 [sp + 0x48]\n 37508: u64 [sp + 0x480] = a0\n 37512: a0 = u64 [sp + 0x40]\n 37515: u32 [sp + 0x490] = a0\n 37519: u64 [sp + 1208] = 0\n 37523: u64 [sp + 1200] = 0\n 37527: u64 [sp + 1192] = 0\n 37531: u64 [sp + 1184] = 0\n 37535: a1 = 0x84\n 37539: a0 = s1\n 37541: ra = 424, jump @0\n      : @493 [@dyn 212] (gas: 4)\n 37548: u64 [sp + 0xf8] = a0\n 37552: a0 = s1\n 37554: a1 = 0\n 37556: ra = 426, jump @0\n      : @494 [@dyn 213] (gas: 31)\n 37563: u32 [sp + 1216] = 0\n 37567: u64 [sp + 1272] = 0xffffffffffffffff\n 37572: u64 [sp + 1264] = 0xffffffffffffffff\n 37577: u64 [sp + 1256] = 0xffffffffffffffff\n 37582: u64 [sp + 1248] = 0xffffffffffffffff\n 37587: a1 = sp + 0x480\n 37591: a1 = a1 << 0x20\n 37594: a1 = a1 >> 0x20\n 37597: s1 = u64 [sp + 0xc0]\n 37601: s1 = s1 | a1\n 37604: a1 = sp + 0x4a0\n 37608: a1 = a1 << 0x20\n 37611: a1 = a1 >> 0x20\n 37614: a2 = sp + 0x4e0\n 37618: a2 = a2 << 0x20\n 37621: a3 = a2 | a1\n 37624: a1 = u64 [sp + 0xf8]\n 37628: a1 = a1 << 0x20\n 37631: a1 = a1 >> 0x20\n 37634: a4 = u64 [sp + 0xd8]\n 37638: a4 = a4 | a1\n 37641: a0 = a0 << 0x20\n 37644: a0 = a0 >> 0x20\n 37647: a1 = sp + 0x4c0\n 37651: a1 = a1 << 0x20\n 37654: a5 = a1 | a0\n 37657: a1 = 0xffffffffffffffff\n 37660: a2 = 0xffffffffffffffff\n 37663: a0 = s1\n 37665: ecalli 1 // 'call'\n 37667: fallthrough\n      : @495 (gas: 1)\n 37668: jump @498 if a0 != 0\n      : @496 (gas: 4)\n 37672: ecalli 11 // 'return_data_size'\n 37674: a0 = 0x40\n 37677: a1 = 0x20\n 37680: ra = 428, jump @0\n      : @497 [@dyn 214] (gas: 111)\n 37687: a3 = u64 [sp + 0x18]\n 37690: u8 [a0 + 0x18] = a3\n 37693: a2 = u64 [sp + 0x28]\n 37696: a1 = a2 >> 0x38\n 37699: u8 [a0 + 0x17] = a1\n 37702: a1 = a2 >> 0x30\n 37705: u8 [a0 + 0x16] = a1\n 37708: a1 = a2 >> 0x28\n 37711: u8 [a0 + 0x15] = a1\n 37714: a1 = a2 >> 0x20\n 37717: u8 [a0 + 0x14] = a1\n 37720: a1 = a2 >> 0x18\n 37723: u8 [a0 + 0x13] = a1\n 37726: a1 = a2 >> 0x10\n 37729: u8 [a0 + 0x12] = a1\n 37732: a1 = a2 >> 0x8\n 37735: u8 [a0 + 0x11] = a1\n 37738: u8 [a0 + 0x10] = a2\n 37741: a2 = u64 [sp + 0x10]\n 37744: a1 = a2 >> 0x38\n 37747: u8 [a0 + 0xf] = a1\n 37750: a1 = a2 >> 0x30\n 37753: u8 [a0 + 0xe] = a1\n 37756: a1 = a2 >> 0x28\n 37759: u8 [a0 + 0xd] = a1\n 37762: a1 = a2 >> 0x20\n 37765: u8 [a0 + 0xc] = a1\n 37768: a1 = a2 >> 0x18\n 37771: u8 [a0 + 0xb] = a1\n 37774: a1 = a2 >> 0x10\n 37777: u8 [a0 + 0xa] = a1\n 37780: a1 = a2 >> 0x8\n 37783: u8 [a0 + 0x9] = a1\n 37786: u8 [a0 + 0x8] = a2\n 37789: a2 = u64 [sp + 0x30]\n 37792: a1 = a2 >> 0x38\n 37795: u8 [a0 + 0x7] = a1\n 37798: a1 = a2 >> 0x30\n 37801: u8 [a0 + 0x6] = a1\n 37804: a1 = a2 >> 0x28\n 37807: u8 [a0 + 0x5] = a1\n 37810: a1 = a2 >> 0x20\n 37813: u8 [a0 + 0x4] = a1\n 37816: a1 = a2 >> 0x18\n 37819: u8 [a0 + 0x3] = a1\n 37822: a1 = a2 >> 0x10\n 37825: u8 [a0 + 0x2] = a1\n 37828: a1 = a2 >> 0x8\n 37831: u8 [a0 + 0x1] = a1\n 37834: u8 [a0] = a2\n 37836: a1 = a3 >> 0x38\n 37839: u8 [a0 + 0x1f] = a1\n 37842: a1 = a3 >> 0x30\n 37845: u8 [a0 + 0x1e] = a1\n 37848: a1 = a3 >> 0x28\n 37851: u8 [a0 + 0x1d] = a1\n 37854: a1 = a3 >> 0x20\n 37857: u8 [a0 + 0x1c] = a1\n 37860: a1 = a3 >> 0x18\n 37863: u8 [a0 + 0x1b] = a1\n 37866: a1 = a3 >> 0x10\n 37869: u8 [a0 + 0x1a] = a1\n 37872: a1 = a3 >> 0x8\n 37875: u8 [a0 + 0x19] = a1\n 37878: a0 = u64 [sp + 0xa0]\n 37882: u64 [sp + 0x538] = a0\n 37886: a0 = u64 [sp + 0xa8]\n 37890: u64 [sp + 0x530] = a0\n 37894: a0 = u64 [sp + 0xb0]\n 37898: u64 [sp + 0x528] = a0\n 37902: s1 = u64 [sp + 0x20]\n 37905: u64 [sp + 0x520] = s1\n 37909: u64 [sp + 1368] = 0\n 37913: u64 [sp + 1360] = 0\n 37917: u64 [sp + 1352] = 0\n 37921: u64 [sp + 1344] = 0\n 37925: u32 [sp + 1280] = 0x20\n 37930: i32 a1 = sp + 0x520\n 37934: i32 a3 = sp + 0x540\n 37938: i32 a4 = sp + 0x500\n 37942: a2 = 0xffffffffffffffff\n 37945: a0 = 0\n 37947: ecalli 7 // 'get_storage'\n 37949: a0 = u64 [sp + 0x540]\n 37953: a1 = u64 [sp + 0x548]\n 37957: a2 = u64 [sp + 0x550]\n 37961: a3 = u64 [sp + 0x558]\n 37965: a0 = a0 & 0xffffffffffffff00\n 37969: a4 = u64 [sp + 0xa0]\n 37973: u64 [sp + 0x538] = a4\n 37977: a4 = u64 [sp + 0xa8]\n 37981: u64 [sp + 0x530] = a4\n 37985: a4 = u64 [sp + 0xb0]\n 37989: u64 [sp + 0x528] = a4\n 37993: u64 [sp + 0x520] = s1\n 37997: u64 [sp + 0x558] = a3\n 38001: u64 [sp + 0x550] = a2\n 38005: u64 [sp + 0x548] = a1\n 38009: u64 [sp + 0x540] = a0\n 38013: i32 a1 = sp + 0x520\n 38017: i32 a3 = sp + 0x540\n 38021: a2 = 0xffffffffffffffff\n 38024: a4 = 0x20\n 38027: a0 = 0\n 38029: ecalli 14 // 'set_storage'\n 38031: sp = s0 + 0xfffffffffffffa80\n 38035: ra = u64 [sp + 0x578]\n 38039: s0 = u64 [sp + 0x570]\n 38043: s1 = u64 [sp + 0x568]\n 38047: sp = sp + 0x580\n 38051: ret\n      : @498 (gas: 1)\n 38053: ra = 430, jump @248\n      : @499 [@dyn 215] (gas: 3)\n 38059: a0 = 0x40\n 38062: a1 = 0x20\n 38065: ra = 432, jump @0\n      : @500 [@dyn 216] (gas: 103)\n 38072: a1 = u8 [a0 + 0x11]\n 38075: a2 = u8 [a0 + 0x10]\n 38078: a3 = u8 [a0 + 0x12]\n 38081: a4 = u8 [a0 + 0x13]\n 38084: a1 = a1 << 0x8\n 38087: a1 = a1 | a2\n 38090: a3 = a3 << 0x10\n 38093: a4 = a4 << 0x18\n 38096: a3 = a3 | a4\n 38099: a1 = a1 | a3\n 38102: a2 = u8 [a0 + 0x15]\n 38105: a3 = u8 [a0 + 0x14]\n 38108: a4 = u8 [a0 + 0x16]\n 38111: a5 = u8 [a0 + 0x17]\n 38114: a2 = a2 << 0x8\n 38117: a2 = a2 | a3\n 38120: a4 = a4 << 0x10\n 38123: a5 = a5 << 0x18\n 38126: a4 = a4 | a5\n 38129: a2 = a2 | a4\n 38132: a2 = a2 << 0x20\n 38135: t0 = a2 | a1\n 38138: a2 = u8 [a0 + 0x1]\n 38141: a3 = u8 [a0]\n 38143: a4 = u8 [a0 + 0x2]\n 38146: a5 = u8 [a0 + 0x3]\n 38149: a2 = a2 << 0x8\n 38152: a2 = a2 | a3\n 38155: a4 = a4 << 0x10\n 38158: a5 = a5 << 0x18\n 38161: a4 = a4 | a5\n 38164: a2 = a2 | a4\n 38167: a3 = u8 [a0 + 0x5]\n 38170: a4 = u8 [a0 + 0x4]\n 38173: a5 = u8 [a0 + 0x6]\n 38176: s1 = u8 [a0 + 0x7]\n 38179: a3 = a3 << 0x8\n 38182: a3 = a3 | a4\n 38185: a5 = a5 << 0x10\n 38188: s1 = s1 << 0x18\n 38191: a5 = a5 | s1\n 38194: a3 = a3 | a5\n 38197: a3 = a3 << 0x20\n 38200: a2 = a2 | a3\n 38203: a3 = u8 [a0 + 0x19]\n 38206: a4 = u8 [a0 + 0x18]\n 38209: a5 = u8 [a0 + 0x1a]\n 38212: s1 = u8 [a0 + 0x1b]\n 38215: a3 = a3 << 0x8\n 38218: a3 = a3 | a4\n 38221: a5 = a5 << 0x10\n 38224: s1 = s1 << 0x18\n 38227: a5 = a5 | s1\n 38230: a3 = a3 | a5\n 38233: a4 = u8 [a0 + 0x1d]\n 38236: a5 = u8 [a0 + 0x1c]\n 38239: s1 = u8 [a0 + 0x1e]\n 38242: a1 = u8 [a0 + 0x1f]\n 38245: a4 = a4 << 0x8\n 38248: a4 = a4 | a5\n 38251: s1 = s1 << 0x10\n 38254: a1 = a1 << 0x18\n 38257: a1 = a1 | s1\n 38260: a1 = a1 | a4\n 38263: a1 = a1 << 0x20\n 38266: a3 = a3 | a1\n 38269: a1 = u8 [a0 + 0x9]\n 38272: a4 = u8 [a0 + 0x8]\n 38275: a5 = u8 [a0 + 0xa]\n 38278: s1 = u8 [a0 + 0xb]\n 38281: a1 = a1 << 0x8\n 38284: a1 = a1 | a4\n 38287: a5 = a5 << 0x10\n 38290: s1 = s1 << 0x18\n 38293: a5 = a5 | s1\n 38296: a1 = a1 | a5\n 38299: a4 = u8 [a0 + 0xd]\n 38302: a5 = u8 [a0 + 0xc]\n 38305: s1 = u8 [a0 + 0xe]\n 38308: a0 = u8 [a0 + 0xf]\n 38311: a4 = a4 << 0x8\n 38314: a4 = a4 | a5\n 38317: s1 = s1 << 0x10\n 38320: a0 = a0 << 0x18\n 38323: a0 = a0 | s1\n 38326: a0 = a0 | a4\n 38329: a0 = a0 << 0x20\n 38332: a0 = a0 | a1\n 38335: s1 = reverse a0\n 38337: a1 = reverse a3\n 38339: a2 = reverse a2\n 38341: a0 = reverse t0\n 38343: u64 [sp + 0xf8] = a0\n 38347: u64 [sp + 0xf0] = a2\n 38351: a0 = a0 | a2\n 38354: a2 = a1\n 38356: a1 = a1 | s1\n 38359: a1 = a1 | a0\n 38362: a1 = a1 >> 0x20\n 38365: a0 = a0 | s1\n 38368: a0 = a0 << 0x20\n 38371: a0 = a0 | a1\n 38374: jump @520 if a0 != 0\n      : @501 (gas: 5)\n 38378: u64 [sp + 0xe8] = a2\n 38382: i32 a0 = a2 + 0\n 38384: a1 = 0x20\n 38387: u64 [sp + 0xe0] = a0\n 38391: ra = 434, jump @0\n      : @502 [@dyn 217] (gas: 50)\n 38398: u8 [a0 + 31] = 0\n 38401: u8 [a0 + 30] = 0\n 38404: u8 [a0 + 29] = 0\n 38407: u8 [a0 + 28] = 0\n 38410: u8 [a0 + 27] = 0\n 38413: u8 [a0 + 26] = 0\n 38416: u8 [a0 + 25] = 0\n 38419: u8 [a0 + 24] = 0\n 38422: u8 [a0 + 23] = 0\n 38425: u8 [a0 + 22] = 0\n 38428: u8 [a0 + 21] = 0\n 38431: u8 [a0 + 20] = 0\n 38434: u8 [a0 + 19] = 0\n 38437: u8 [a0 + 18] = 0\n 38440: u8 [a0 + 17] = 0\n 38443: u8 [a0 + 16] = 0\n 38446: u8 [a0 + 15] = 0\n 38449: u8 [a0 + 14] = 0\n 38452: u8 [a0 + 13] = 0\n 38455: u8 [a0 + 12] = 0\n 38458: u8 [a0 + 11] = 0\n 38461: u8 [a0 + 10] = 0\n 38464: u8 [a0 + 9] = 0\n 38467: u8 [a0 + 8] = 0\n 38470: u8 [a0 + 7] = 0\n 38473: u8 [a0 + 6] = 0\n 38476: u8 [a0 + 5] = 0\n 38479: u8 [a0 + 4] = 0\n 38482: u8 [a0 + 3] = 0xa0\n 38487: u8 [a0 + 2] = 0x79\n 38491: u8 [a0 + 1] = 0xc3\n 38496: u8 [a0 + 0] = 0x8\n 38499: a1 = u64 [sp + 0xe8]\n 38503: a0 = a1 + 0x4\n 38506: a1 = a0 <u a1\n 38509: a3 = u64 [sp + 0xf8]\n 38513: a2 = a3 + a1\n 38516: a3 = a2 <u a3\n 38519: a3 = a1 if a1 == 0\n 38522: a3 = a3 + s1\n 38525: a1 = a3 <u s1\n 38528: a4 = u64 [sp + 0xf0]\n 38532: a4 = a4 + a1\n 38535: u64 [sp + 0x288] = a2\n 38539: u64 [sp + 0x280] = a0\n 38543: u64 [sp + 0x290] = a3\n 38547: a0 = sp + 0x2a0\n 38551: a1 = sp + 0x280\n 38555: u64 [sp + 0x298] = a4\n 38559: ra = 436, jump @390\n      : @503 [@dyn 218] (gas: 5)\n 38565: a0 = u64 [sp + 0x2a8]\n 38569: t0 = u64 [sp + 0x2b8]\n 38573: t1 = u64 [sp + 0x2a0]\n 38577: a3 = u64 [sp + 0x2b0]\n 38581: jump @519\n      : @504 (gas: 3)\n 38584: a0 = 0x40\n 38587: a1 = 0x20\n 38590: ra = 438, jump @0\n      : @505 [@dyn 219] (gas: 103)\n 38597: a1 = u8 [a0 + 0x11]\n 38600: a2 = u8 [a0 + 0x10]\n 38603: a3 = u8 [a0 + 0x12]\n 38606: a4 = u8 [a0 + 0x13]\n 38609: a1 = a1 << 0x8\n 38612: a1 = a1 | a2\n 38615: a3 = a3 << 0x10\n 38618: a4 = a4 << 0x18\n 38621: a3 = a3 | a4\n 38624: a1 = a1 | a3\n 38627: a2 = u8 [a0 + 0x15]\n 38630: a3 = u8 [a0 + 0x14]\n 38633: a4 = u8 [a0 + 0x16]\n 38636: a5 = u8 [a0 + 0x17]\n 38639: a2 = a2 << 0x8\n 38642: a2 = a2 | a3\n 38645: a4 = a4 << 0x10\n 38648: a5 = a5 << 0x18\n 38651: a4 = a4 | a5\n 38654: a2 = a2 | a4\n 38657: a2 = a2 << 0x20\n 38660: t0 = a2 | a1\n 38663: a2 = u8 [a0 + 0x1]\n 38666: a3 = u8 [a0]\n 38668: a4 = u8 [a0 + 0x2]\n 38671: a5 = u8 [a0 + 0x3]\n 38674: a2 = a2 << 0x8\n 38677: a2 = a2 | a3\n 38680: a4 = a4 << 0x10\n 38683: a5 = a5 << 0x18\n 38686: a4 = a4 | a5\n 38689: a2 = a2 | a4\n 38692: a3 = u8 [a0 + 0x5]\n 38695: a4 = u8 [a0 + 0x4]\n 38698: a5 = u8 [a0 + 0x6]\n 38701: s1 = u8 [a0 + 0x7]\n 38704: a3 = a3 << 0x8\n 38707: a3 = a3 | a4\n 38710: a5 = a5 << 0x10\n 38713: s1 = s1 << 0x18\n 38716: a5 = a5 | s1\n 38719: a3 = a3 | a5\n 38722: a3 = a3 << 0x20\n 38725: a2 = a2 | a3\n 38728: a3 = u8 [a0 + 0x19]\n 38731: a4 = u8 [a0 + 0x18]\n 38734: a5 = u8 [a0 + 0x1a]\n 38737: s1 = u8 [a0 + 0x1b]\n 38740: a3 = a3 << 0x8\n 38743: a3 = a3 | a4\n 38746: a5 = a5 << 0x10\n 38749: s1 = s1 << 0x18\n 38752: a5 = a5 | s1\n 38755: a3 = a3 | a5\n 38758: a4 = u8 [a0 + 0x1d]\n 38761: a5 = u8 [a0 + 0x1c]\n 38764: s1 = u8 [a0 + 0x1e]\n 38767: a1 = u8 [a0 + 0x1f]\n 38770: a4 = a4 << 0x8\n 38773: a4 = a4 | a5\n 38776: s1 = s1 << 0x10\n 38779: a1 = a1 << 0x18\n 38782: a1 = a1 | s1\n 38785: a1 = a1 | a4\n 38788: a1 = a1 << 0x20\n 38791: a3 = a3 | a1\n 38794: a1 = u8 [a0 + 0x9]\n 38797: a4 = u8 [a0 + 0x8]\n 38800: a5 = u8 [a0 + 0xa]\n 38803: s1 = u8 [a0 + 0xb]\n 38806: a1 = a1 << 0x8\n 38809: a1 = a1 | a4\n 38812: a5 = a5 << 0x10\n 38815: s1 = s1 << 0x18\n 38818: a5 = a5 | s1\n 38821: a1 = a1 | a5\n 38824: a4 = u8 [a0 + 0xd]\n 38827: a5 = u8 [a0 + 0xc]\n 38830: s1 = u8 [a0 + 0xe]\n 38833: a0 = u8 [a0 + 0xf]\n 38836: a4 = a4 << 0x8\n 38839: a4 = a4 | a5\n 38842: s1 = s1 << 0x10\n 38845: a0 = a0 << 0x18\n 38848: a0 = a0 | s1\n 38851: a0 = a0 | a4\n 38854: a0 = a0 << 0x20\n 38857: a0 = a0 | a1\n 38860: s1 = reverse a0\n 38862: a1 = reverse a3\n 38864: a2 = reverse a2\n 38866: a0 = reverse t0\n 38868: u64 [sp + 0xf8] = a0\n 38872: u64 [sp + 0xf0] = a2\n 38876: a0 = a0 | a2\n 38879: a2 = a1\n 38881: a1 = a1 | s1\n 38884: a1 = a1 | a0\n 38887: a1 = a1 >> 0x20\n 38890: a0 = a0 | s1\n 38893: a0 = a0 << 0x20\n 38896: a0 = a0 | a1\n 38899: jump @520 if a0 != 0\n      : @506 (gas: 5)\n 38903: u64 [sp + 0xe8] = a2\n 38907: i32 a0 = a2 + 0\n 38909: a1 = 0x20\n 38912: u64 [sp + 0xe0] = a0\n 38916: ra = 440, jump @0\n      : @507 [@dyn 220] (gas: 50)\n 38923: u8 [a0 + 31] = 0\n 38926: u8 [a0 + 30] = 0\n 38929: u8 [a0 + 29] = 0\n 38932: u8 [a0 + 28] = 0\n 38935: u8 [a0 + 27] = 0\n 38938: u8 [a0 + 26] = 0\n 38941: u8 [a0 + 25] = 0\n 38944: u8 [a0 + 24] = 0\n 38947: u8 [a0 + 23] = 0\n 38950: u8 [a0 + 22] = 0\n 38953: u8 [a0 + 21] = 0\n 38956: u8 [a0 + 20] = 0\n 38959: u8 [a0 + 19] = 0\n 38962: u8 [a0 + 18] = 0\n 38965: u8 [a0 + 17] = 0\n 38968: u8 [a0 + 16] = 0\n 38971: u8 [a0 + 15] = 0\n 38974: u8 [a0 + 14] = 0\n 38977: u8 [a0 + 13] = 0\n 38980: u8 [a0 + 12] = 0\n 38983: u8 [a0 + 11] = 0\n 38986: u8 [a0 + 10] = 0\n 38989: u8 [a0 + 9] = 0\n 38992: u8 [a0 + 8] = 0\n 38995: u8 [a0 + 7] = 0\n 38998: u8 [a0 + 6] = 0\n 39001: u8 [a0 + 5] = 0\n 39004: u8 [a0 + 4] = 0\n 39007: u8 [a0 + 3] = 0xa0\n 39012: u8 [a0 + 2] = 0x79\n 39016: u8 [a0 + 1] = 0xc3\n 39021: u8 [a0 + 0] = 0x8\n 39024: a1 = u64 [sp + 0xe8]\n 39028: a0 = a1 + 0x4\n 39031: a1 = a0 <u a1\n 39034: a3 = u64 [sp + 0xf8]\n 39038: a2 = a3 + a1\n 39041: a3 = a2 <u a3\n 39044: a3 = a1 if a1 == 0\n 39047: a3 = a3 + s1\n 39050: a1 = a3 <u s1\n 39053: a4 = u64 [sp + 0xf0]\n 39057: a4 = a4 + a1\n 39060: u64 [sp + 0x108] = a2\n 39064: u64 [sp + 0x100] = a0\n 39068: u64 [sp + 0x110] = a3\n 39072: a0 = sp + 0x120\n 39076: a1 = sp + 0x100\n 39080: u64 [sp + 0x118] = a4\n 39084: ra = 442, jump @398\n      : @508 [@dyn 221] (gas: 5)\n 39090: a0 = u64 [sp + 0x128]\n 39094: t0 = u64 [sp + 0x138]\n 39098: t1 = u64 [sp + 0x120]\n 39102: a3 = u64 [sp + 0x130]\n 39106: jump @519\n      : @509 (gas: 3)\n 39109: a0 = 0x40\n 39112: a1 = 0x20\n 39115: ra = 444, jump @0\n      : @510 [@dyn 222] (gas: 103)\n 39122: a1 = u8 [a0 + 0x11]\n 39125: a2 = u8 [a0 + 0x10]\n 39128: a3 = u8 [a0 + 0x12]\n 39131: a4 = u8 [a0 + 0x13]\n 39134: a1 = a1 << 0x8\n 39137: a1 = a1 | a2\n 39140: a3 = a3 << 0x10\n 39143: a4 = a4 << 0x18\n 39146: a3 = a3 | a4\n 39149: a1 = a1 | a3\n 39152: a2 = u8 [a0 + 0x15]\n 39155: a3 = u8 [a0 + 0x14]\n 39158: a4 = u8 [a0 + 0x16]\n 39161: a5 = u8 [a0 + 0x17]\n 39164: a2 = a2 << 0x8\n 39167: a2 = a2 | a3\n 39170: a4 = a4 << 0x10\n 39173: a5 = a5 << 0x18\n 39176: a4 = a4 | a5\n 39179: a2 = a2 | a4\n 39182: a2 = a2 << 0x20\n 39185: t0 = a2 | a1\n 39188: a2 = u8 [a0 + 0x1]\n 39191: a3 = u8 [a0]\n 39193: a4 = u8 [a0 + 0x2]\n 39196: a5 = u8 [a0 + 0x3]\n 39199: a2 = a2 << 0x8\n 39202: a2 = a2 | a3\n 39205: a4 = a4 << 0x10\n 39208: a5 = a5 << 0x18\n 39211: a4 = a4 | a5\n 39214: a2 = a2 | a4\n 39217: a3 = u8 [a0 + 0x5]\n 39220: a4 = u8 [a0 + 0x4]\n 39223: a5 = u8 [a0 + 0x6]\n 39226: s1 = u8 [a0 + 0x7]\n 39229: a3 = a3 << 0x8\n 39232: a3 = a3 | a4\n 39235: a5 = a5 << 0x10\n 39238: s1 = s1 << 0x18\n 39241: a5 = a5 | s1\n 39244: a3 = a3 | a5\n 39247: a3 = a3 << 0x20\n 39250: a2 = a2 | a3\n 39253: a3 = u8 [a0 + 0x19]\n 39256: a4 = u8 [a0 + 0x18]\n 39259: a5 = u8 [a0 + 0x1a]\n 39262: s1 = u8 [a0 + 0x1b]\n 39265: a3 = a3 << 0x8\n 39268: a3 = a3 | a4\n 39271: a5 = a5 << 0x10\n 39274: s1 = s1 << 0x18\n 39277: a5 = a5 | s1\n 39280: a3 = a3 | a5\n 39283: a4 = u8 [a0 + 0x1d]\n 39286: a5 = u8 [a0 + 0x1c]\n 39289: s1 = u8 [a0 + 0x1e]\n 39292: a1 = u8 [a0 + 0x1f]\n 39295: a4 = a4 << 0x8\n 39298: a4 = a4 | a5\n 39301: s1 = s1 << 0x10\n 39304: a1 = a1 << 0x18\n 39307: a1 = a1 | s1\n 39310: a1 = a1 | a4\n 39313: a1 = a1 << 0x20\n 39316: a3 = a3 | a1\n 39319: a1 = u8 [a0 + 0x9]\n 39322: a4 = u8 [a0 + 0x8]\n 39325: a5 = u8 [a0 + 0xa]\n 39328: s1 = u8 [a0 + 0xb]\n 39331: a1 = a1 << 0x8\n 39334: a1 = a1 | a4\n 39337: a5 = a5 << 0x10\n 39340: s1 = s1 << 0x18\n 39343: a5 = a5 | s1\n 39346: a1 = a1 | a5\n 39349: a4 = u8 [a0 + 0xd]\n 39352: a5 = u8 [a0 + 0xc]\n 39355: s1 = u8 [a0 + 0xe]\n 39358: a0 = u8 [a0 + 0xf]\n 39361: a4 = a4 << 0x8\n 39364: a4 = a4 | a5\n 39367: s1 = s1 << 0x10\n 39370: a0 = a0 << 0x18\n 39373: a0 = a0 | s1\n 39376: a0 = a0 | a4\n 39379: a0 = a0 << 0x20\n 39382: a0 = a0 | a1\n 39385: s1 = reverse a0\n 39387: a1 = reverse a3\n 39389: a2 = reverse a2\n 39391: a0 = reverse t0\n 39393: u64 [sp + 0xf8] = a0\n 39397: u64 [sp + 0xf0] = a2\n 39401: a0 = a0 | a2\n 39404: a2 = a1\n 39406: a1 = a1 | s1\n 39409: a1 = a1 | a0\n 39412: a1 = a1 >> 0x20\n 39415: a0 = a0 | s1\n 39418: a0 = a0 << 0x20\n 39421: a0 = a0 | a1\n 39424: jump @520 if a0 != 0\n      : @511 (gas: 5)\n 39428: u64 [sp + 0xe8] = a2\n 39432: i32 a0 = a2 + 0\n 39434: a1 = 0x20\n 39437: u64 [sp + 0xe0] = a0\n 39441: ra = 446, jump @0\n      : @512 [@dyn 223] (gas: 50)\n 39448: u8 [a0 + 31] = 0\n 39451: u8 [a0 + 30] = 0\n 39454: u8 [a0 + 29] = 0\n 39457: u8 [a0 + 28] = 0\n 39460: u8 [a0 + 27] = 0\n 39463: u8 [a0 + 26] = 0\n 39466: u8 [a0 + 25] = 0\n 39469: u8 [a0 + 24] = 0\n 39472: u8 [a0 + 23] = 0\n 39475: u8 [a0 + 22] = 0\n 39478: u8 [a0 + 21] = 0\n 39481: u8 [a0 + 20] = 0\n 39484: u8 [a0 + 19] = 0\n 39487: u8 [a0 + 18] = 0\n 39490: u8 [a0 + 17] = 0\n 39493: u8 [a0 + 16] = 0\n 39496: u8 [a0 + 15] = 0\n 39499: u8 [a0 + 14] = 0\n 39502: u8 [a0 + 13] = 0\n 39505: u8 [a0 + 12] = 0\n 39508: u8 [a0 + 11] = 0\n 39511: u8 [a0 + 10] = 0\n 39514: u8 [a0 + 9] = 0\n 39517: u8 [a0 + 8] = 0\n 39520: u8 [a0 + 7] = 0\n 39523: u8 [a0 + 6] = 0\n 39526: u8 [a0 + 5] = 0\n 39529: u8 [a0 + 4] = 0\n 39532: u8 [a0 + 3] = 0xa0\n 39537: u8 [a0 + 2] = 0x79\n 39541: u8 [a0 + 1] = 0xc3\n 39546: u8 [a0 + 0] = 0x8\n 39549: a1 = u64 [sp + 0xe8]\n 39553: a0 = a1 + 0x4\n 39556: a1 = a0 <u a1\n 39559: a3 = u64 [sp + 0xf8]\n 39563: a2 = a3 + a1\n 39566: a3 = a2 <u a3\n 39569: a3 = a1 if a1 == 0\n 39572: a3 = a3 + s1\n 39575: a1 = a3 <u s1\n 39578: a4 = u64 [sp + 0xf0]\n 39582: a4 = a4 + a1\n 39585: u64 [sp + 0x148] = a2\n 39589: u64 [sp + 0x140] = a0\n 39593: u64 [sp + 0x150] = a3\n 39597: a0 = sp + 0x160\n 39601: a1 = sp + 0x140\n 39605: u64 [sp + 0x158] = a4\n 39609: ra = 448, jump @406\n      : @513 [@dyn 224] (gas: 5)\n 39615: a0 = u64 [sp + 0x168]\n 39619: t0 = u64 [sp + 0x178]\n 39623: t1 = u64 [sp + 0x160]\n 39627: a3 = u64 [sp + 0x170]\n 39631: jump @519\n      : @514 (gas: 3)\n 39634: a0 = 0x40\n 39637: a1 = 0x20\n 39640: ra = 450, jump @0\n      : @515 [@dyn 225] (gas: 103)\n 39647: a1 = u8 [a0 + 0x11]\n 39650: a2 = u8 [a0 + 0x10]\n 39653: a3 = u8 [a0 + 0x12]\n 39656: a4 = u8 [a0 + 0x13]\n 39659: a1 = a1 << 0x8\n 39662: a1 = a1 | a2\n 39665: a3 = a3 << 0x10\n 39668: a4 = a4 << 0x18\n 39671: a3 = a3 | a4\n 39674: a1 = a1 | a3\n 39677: a2 = u8 [a0 + 0x15]\n 39680: a3 = u8 [a0 + 0x14]\n 39683: a4 = u8 [a0 + 0x16]\n 39686: a5 = u8 [a0 + 0x17]\n 39689: a2 = a2 << 0x8\n 39692: a2 = a2 | a3\n 39695: a4 = a4 << 0x10\n 39698: a5 = a5 << 0x18\n 39701: a4 = a4 | a5\n 39704: a2 = a2 | a4\n 39707: a2 = a2 << 0x20\n 39710: t0 = a2 | a1\n 39713: a2 = u8 [a0 + 0x1]\n 39716: a3 = u8 [a0]\n 39718: a4 = u8 [a0 + 0x2]\n 39721: a5 = u8 [a0 + 0x3]\n 39724: a2 = a2 << 0x8\n 39727: a2 = a2 | a3\n 39730: a4 = a4 << 0x10\n 39733: a5 = a5 << 0x18\n 39736: a4 = a4 | a5\n 39739: a2 = a2 | a4\n 39742: a3 = u8 [a0 + 0x5]\n 39745: a4 = u8 [a0 + 0x4]\n 39748: a5 = u8 [a0 + 0x6]\n 39751: s1 = u8 [a0 + 0x7]\n 39754: a3 = a3 << 0x8\n 39757: a3 = a3 | a4\n 39760: a5 = a5 << 0x10\n 39763: s1 = s1 << 0x18\n 39766: a5 = a5 | s1\n 39769: a3 = a3 | a5\n 39772: a3 = a3 << 0x20\n 39775: a2 = a2 | a3\n 39778: a3 = u8 [a0 + 0x19]\n 39781: a4 = u8 [a0 + 0x18]\n 39784: a5 = u8 [a0 + 0x1a]\n 39787: s1 = u8 [a0 + 0x1b]\n 39790: a3 = a3 << 0x8\n 39793: a3 = a3 | a4\n 39796: a5 = a5 << 0x10\n 39799: s1 = s1 << 0x18\n 39802: a5 = a5 | s1\n 39805: a3 = a3 | a5\n 39808: a4 = u8 [a0 + 0x1d]\n 39811: a5 = u8 [a0 + 0x1c]\n 39814: s1 = u8 [a0 + 0x1e]\n 39817: a1 = u8 [a0 + 0x1f]\n 39820: a4 = a4 << 0x8\n 39823: a4 = a4 | a5\n 39826: s1 = s1 << 0x10\n 39829: a1 = a1 << 0x18\n 39832: a1 = a1 | s1\n 39835: a1 = a1 | a4\n 39838: a1 = a1 << 0x20\n 39841: a3 = a3 | a1\n 39844: a1 = u8 [a0 + 0x9]\n 39847: a4 = u8 [a0 + 0x8]\n 39850: a5 = u8 [a0 + 0xa]\n 39853: s1 = u8 [a0 + 0xb]\n 39856: a1 = a1 << 0x8\n 39859: a1 = a1 | a4\n 39862: a5 = a5 << 0x10\n 39865: s1 = s1 << 0x18\n 39868: a5 = a5 | s1\n 39871: a1 = a1 | a5\n 39874: a4 = u8 [a0 + 0xd]\n 39877: a5 = u8 [a0 + 0xc]\n 39880: s1 = u8 [a0 + 0xe]\n 39883: a0 = u8 [a0 + 0xf]\n 39886: a4 = a4 << 0x8\n 39889: a4 = a4 | a5\n 39892: s1 = s1 << 0x10\n 39895: a0 = a0 << 0x18\n 39898: a0 = a0 | s1\n 39901: a0 = a0 | a4\n 39904: a0 = a0 << 0x20\n 39907: a0 = a0 | a1\n 39910: s1 = reverse a0\n 39912: a1 = reverse a3\n 39914: a2 = reverse a2\n 39916: a0 = reverse t0\n 39918: u64 [sp + 0xf8] = a0\n 39922: u64 [sp + 0xf0] = a2\n 39926: a0 = a0 | a2\n 39929: a2 = a1\n 39931: a1 = a1 | s1\n 39934: a1 = a1 | a0\n 39937: a1 = a1 >> 0x20\n 39940: a0 = a0 | s1\n 39943: a0 = a0 << 0x20\n 39946: a0 = a0 | a1\n 39949: jump @520 if a0 != 0\n      : @516 (gas: 5)\n 39953: u64 [sp + 0xe8] = a2\n 39957: i32 a0 = a2 + 0\n 39959: a1 = 0x20\n 39962: u64 [sp + 0xe0] = a0\n 39966: ra = 452, jump @0\n      : @517 [@dyn 226] (gas: 50)\n 39973: u8 [a0 + 31] = 0\n 39976: u8 [a0 + 30] = 0\n 39979: u8 [a0 + 29] = 0\n 39982: u8 [a0 + 28] = 0\n 39985: u8 [a0 + 27] = 0\n 39988: u8 [a0 + 26] = 0\n 39991: u8 [a0 + 25] = 0\n 39994: u8 [a0 + 24] = 0\n 39997: u8 [a0 + 23] = 0\n 40000: u8 [a0 + 22] = 0\n 40003: u8 [a0 + 21] = 0\n 40006: u8 [a0 + 20] = 0\n 40009: u8 [a0 + 19] = 0\n 40012: u8 [a0 + 18] = 0\n 40015: u8 [a0 + 17] = 0\n 40018: u8 [a0 + 16] = 0\n 40021: u8 [a0 + 15] = 0\n 40024: u8 [a0 + 14] = 0\n 40027: u8 [a0 + 13] = 0\n 40030: u8 [a0 + 12] = 0\n 40033: u8 [a0 + 11] = 0\n 40036: u8 [a0 + 10] = 0\n 40039: u8 [a0 + 9] = 0\n 40042: u8 [a0 + 8] = 0\n 40045: u8 [a0 + 7] = 0\n 40048: u8 [a0 + 6] = 0\n 40051: u8 [a0 + 5] = 0\n 40054: u8 [a0 + 4] = 0\n 40057: u8 [a0 + 3] = 0xa0\n 40062: u8 [a0 + 2] = 0x79\n 40066: u8 [a0 + 1] = 0xc3\n 40071: u8 [a0 + 0] = 0x8\n 40074: a1 = u64 [sp + 0xe8]\n 40078: a0 = a1 + 0x4\n 40081: a1 = a0 <u a1\n 40084: a3 = u64 [sp + 0xf8]\n 40088: a2 = a3 + a1\n 40091: a3 = a2 <u a3\n 40094: a3 = a1 if a1 == 0\n 40097: a3 = a3 + s1\n 40100: a1 = a3 <u s1\n 40103: a4 = u64 [sp + 0xf0]\n 40107: a4 = a4 + a1\n 40110: u64 [sp + 0x1c8] = a2\n 40114: u64 [sp + 0x1c0] = a0\n 40118: u64 [sp + 0x1d0] = a3\n 40122: a0 = sp + 0x1e0\n 40126: a1 = sp + 0x1c0\n 40130: u64 [sp + 0x1d8] = a4\n 40134: ra = 454, jump @264\n      : @518 [@dyn 227] (gas: 5)\n 40140: a0 = u64 [sp + 0x1e8]\n 40144: t0 = u64 [sp + 0x1f8]\n 40148: t1 = u64 [sp + 0x1e0]\n 40152: a3 = u64 [sp + 0x1f0]\n 40156: fallthrough\n      : @519 (gas: 26)\n 40157: a1 = u64 [sp + 0xf8]\n 40161: a4 = a0 ^ a1\n 40164: a5 = a0 <u a1\n 40167: t2 = a1\n 40169: a2 = u64 [sp + 0xe8]\n 40173: a1 = t1 <u a2\n 40176: a5 = a1 if a4 == 0\n 40179: a4 = a3 - s1\n 40182: a3 = a3 <u s1\n 40185: s1 = u64 [sp + 0xf0]\n 40189: s1 = t0 - s1\n 40192: s1 = s1 - a3\n 40195: a3 = a4 <u a5\n 40198: s1 = s1 - a3\n 40201: a4 = a4 - a5\n 40204: a0 = a0 - t2\n 40207: a1 = a0 - a1\n 40210: a0 = t1 - a2\n 40213: a1 = a1 | s1\n 40216: a2 = a0 | a4\n 40219: a2 = a2 | a1\n 40222: a1 = a1 | a4\n 40225: a2 = a2 >> 0x20\n 40228: a1 = a1 << 0x20\n 40231: a1 = a1 | a2\n 40234: jump @528 if a1 == 0\n      : @520 (gas: 1)\n 40238: trap\n      : @521 (gas: 4)\n 40239: a0 = 0\n 40241: a1 = 0\n 40243: ra = 0x1c8\n 40247: jump @0\n      : @522 (gas: 2)\n 40251: a1 = 0\n 40253: ra = 456, jump @0\n      : @523 [@dyn 228] (gas: 5)\n 40260: i32 a1 = a0 + 0\n 40262: a0 = 0x1\n 40265: a2 = 0\n 40267: ecalli 12 // 'seal_return'\n 40269: fallthrough\n      : @524 (gas: 8)\n 40270: u64 [sp + 432] = 0\n 40274: u64 [sp + 424] = 0\n 40278: u64 [sp + 416] = 0\n 40282: a0 = 0x4e487b7100000000\n 40292: a1 = sp + 0x1a0\n 40296: u64 [sp + 0x1b8] = a0\n 40300: a0 = 0\n 40302: ra = 458, jump @8\n      : @525 [@dyn 229] (gas: 7)\n 40309: u64 [sp + 408] = 0\n 40313: u64 [sp + 400] = 0\n 40317: u64 [sp + 384] = 0x41\n 40322: a0 = 0x4\n 40325: a1 = sp + 0x180\n 40329: u64 [sp + 392] = 0\n 40333: ra = 460, jump @8\n      : @526 [@dyn 230] (gas: 3)\n 40340: a1 = 0x24\n 40343: a0 = 0\n 40345: ra = 462, jump @0\n      : @527 [@dyn 231] (gas: 5)\n 40352: i32 a1 = a0 + 0\n 40354: a0 = 0x1\n 40357: a2 = 0x24\n 40360: ecalli 12 // 'seal_return'\n 40362: fallthrough\n      : @528 (gas: 4)\n 40363: i32 s1 = a0 + 0\n 40365: a0 = u64 [sp + 0xe0]\n 40369: a1 = s1\n 40371: ra = 464, jump @0\n      : @529 [@dyn 232] (gas: 7)\n 40378: i32 a1 = a0 + 0\n 40380: a0 = 0x1\n 40383: a2 = s1\n 40385: ecalli 12 // 'seal_return'\n 40387: a0 = 0\n 40389: ra = 0x1d2\n 40393: jump @10\n      : @530 [export #0: 'call'] (gas: 2)\n 40397: a0 = 0\n 40399: ra = 466, jump @10\n      : @531 [@dyn 233] [export #1: 'deploy'] (gas: 2)\n 40406: a0 = 0x1\n 40409: ra = 468, jump @10\n      : @532 [@dyn 234] (gas: 27)\n 40416: sp = sp + 0xffffffffffffff80\n 40419: u64 [sp + 0x78] = ra\n 40422: u64 [sp + 0x70] = s0\n 40425: u64 [sp + 0x68] = s1\n 40428: s0 = sp + 0x80\n 40432: sp = sp & 0xfffffffffffffff0\n 40435: t0 = u64 [a1]\n 40437: t1 = u64 [a1 + 0x8]\n 40440: t2 = u64 [a1 + 0x10]\n 40443: a1 = u64 [a1 + 0x18]\n 40446: a3 = u64 [a2]\n 40448: a4 = u64 [a2 + 0x8]\n 40451: a5 = u64 [a2 + 0x10]\n 40454: a2 = u64 [a2 + 0x18]\n 40457: s1 = a0\n 40459: u64 [sp + 0x18] = a2\n 40462: u64 [sp + 0x10] = a5\n 40465: u64 [sp + 0x8] = a4\n 40468: u64 [sp] = a3\n 40470: u64 [sp + 0x38] = a1\n 40473: u64 [sp + 0x30] = t2\n 40476: u64 [sp + 0x28] = t1\n 40479: a0 = sp + 0x40\n 40482: a1 = sp + 0x20\n 40485: a2 = sp\n 40487: u64 [sp + 0x20] = t0\n 40490: ra = 470, jump @125\n      : @533 [@dyn 235] (gas: 14)\n 40497: a0 = u64 [sp + 0x50]\n 40500: a1 = u64 [sp + 0x58]\n 40503: a2 = u64 [sp + 0x40]\n 40506: a3 = u64 [sp + 0x48]\n 40509: u64 [s1 + 0x10] = a0\n 40512: u64 [s1 + 0x18] = a1\n 40515: u64 [s1] = a2\n 40517: u64 [s1 + 0x8] = a3\n 40520: sp = s0 + 0xffffffffffffff80\n 40523: ra = u64 [sp + 0x78]\n 40526: s0 = u64 [sp + 0x70]\n 40529: s1 = u64 [sp + 0x68]\n 40532: sp = sp + 0x80\n 40536: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"acceptListing(uint256)": "b0eceb7e",
							"createListing(uint256,uint256)": "a79123a9",
							"getAllListings()": "ae73ccec",
							"inventory()": "15d52a5c",
							"listings(uint256)": "de74e57b",
							"owner()": "8da5cb5b"
						}
					},
					"irOptimized": "/// @use-src 0:\"CardTrading.sol\"\nobject \"CardTrading_214\" {\n    code {\n        {\n            /// @src 0:397:2255  \"contract CardTrading {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := copy_arguments_for_constructor_object_CardTrading()\n            constructor_CardTrading(_1)\n            let _2 := allocate_unbounded()\n            codecopy(_2, dataoffset(\"CardTrading_214_deployed\"), datasize(\"CardTrading_214_deployed\"))\n            return(_2, datasize(\"CardTrading_214_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function cleanup_address(value) -> cleaned\n        {\n            cleaned := cleanup_uint160(value)\n        }\n        function validator_revert_address(value)\n        {\n            if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n        }\n        function abi_decode_address_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_address(value)\n        }\n        function abi_decode_tuple_address_fromMemory(headStart, dataEnd) -> value0\n        {\n            if slt(sub(dataEnd, headStart), 32)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := 0\n            value0 := abi_decode_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_CardTrading() -> ret_param\n        {\n            let programSize := datasize(\"CardTrading_214\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param := abi_decode_tuple_address_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_contract_IInventoryManager(value)\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_contract_IInventoryManager_to_contract_IInventoryManager(value) -> converted\n        {\n            converted := convert_uint160_to_contract_IInventoryManager(value)\n        }\n        function prepare_store_contract_IInventoryManager(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_contract_IInventoryManager_to_contract_IInventoryManager(slot, value)\n        {\n            let convertedValue := convert_contract_IInventoryManager_to_contract_IInventoryManager(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_contract_IInventoryManager(convertedValue)))\n        }\n        function convert_uint160_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function prepare_store_address(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_address_to_address(slot, value)\n        {\n            let convertedValue := convert_address_to_address(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n        }\n        function shift_right_unsigned(value) -> newValue\n        { newValue := shr(0, value) }\n        function cleanup_from_storage_contract_IInventoryManager(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function extract_from_storage_value_offset_contract_IInventoryManager(slot_value) -> value\n        {\n            value := cleanup_from_storage_contract_IInventoryManager(shift_right_unsigned(slot_value))\n        }\n        function read_from_storage_split_offset_contract_IInventoryManager(slot) -> value\n        {\n            value := extract_from_storage_value_offset_contract_IInventoryManager(sload(slot))\n        }\n        function convert_contract_IInventoryManager_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function convert_contract_CardTrading_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n        { revert(0, 0) }\n        function shift_left_224(value) -> newValue\n        { newValue := shl(224, value) }\n        function abi_decode_fromMemory(headStart, dataEnd)\n        {\n            if slt(sub(dataEnd, headStart), 0)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n        }\n        function abi_encode_address(value, pos)\n        {\n            mstore(pos, cleanup_address(value))\n        }\n        function abi_encode_tuple_address(headStart, value0) -> tail\n        {\n            tail := add(headStart, 32)\n            abi_encode_address(value0, add(headStart, 0))\n        }\n        /// @ast-id 83 @src 0:661:1106  \"constructor(address inventoryAddress) {...\"\n        function constructor_CardTrading(var_inventoryAddress)\n        {\n            /// @src 0:740:756  \"inventoryAddress\"\n            let _1 := var_inventoryAddress\n            let expr := _1\n            /// @src 0:722:757  \"IInventoryManager(inventoryAddress)\"\n            let expr_62_address := convert_address_to_contract_IInventoryManager(expr)\n            /// @src 0:710:757  \"inventory = IInventoryManager(inventoryAddress)\"\n            update_storage_value_offset_contract_IInventoryManager_to_contract_IInventoryManager(0x01, expr_62_address)\n            /// @src 0:776:786  \"msg.sender\"\n            let expr_1 := caller()\n            /// @src 0:768:786  \"owner = msg.sender\"\n            update_storage_value_offset_address_to_address(0x02, expr_1)\n            /// @src 0:882:891  \"inventory\"\n            let _address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n            let expr_address := _address\n            /// @src 0:882:910  \"inventory.setTradingContract\"\n            let expr_71_address := convert_contract_IInventoryManager_to_address(expr_address)\n            let expr_functionSelector := 0x5be6f2c7\n            /// @src 0:919:923  \"this\"\n            let expr_74_address := address()\n            /// @src 0:911:924  \"address(this)\"\n            let expr_2 := convert_contract_CardTrading_to_address(expr_74_address)\n            /// @src 0:882:925  \"inventory.setTradingContract(address(this))\"\n            if iszero(extcodesize(expr_71_address))\n            {\n                revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            }\n            let _2 := allocate_unbounded()\n            mstore(_2, shift_left_224(expr_functionSelector))\n            let _3 := abi_encode_tuple_address(add(_2, 4), expr_2)\n            let trySuccessCondition := call(gas(), expr_71_address, 0, _2, sub(_3, _2), _2, 0)\n            if trySuccessCondition\n            {\n                let _4 := 0\n                if gt(_4, returndatasize()) { _4 := returndatasize() }\n                finalize_allocation(_2, _4)\n                abi_decode_fromMemory(_2, add(_2, _4))\n            }\n            /// @src 0:878:1099  \"try inventory.setTradingContract(address(this)) {...\"\n            switch iszero(trySuccessCondition)\n            case 0 { }\n            default {\n                let _5 := 1\n                if _5 { }\n            }\n        }\n    }\n    /// @use-src 0:\"CardTrading.sol\"\n    object \"CardTrading_214_deployed\" {\n        code {\n            {\n                /// @src 0:397:2255  \"contract CardTrading {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x15d52a5c { external_fun_inventory() }\n                    case 0x8da5cb5b { external_fun_owner() }\n                    case 0xa79123a9 { external_fun_createListing() }\n                    case 0xae73ccec { external_fun_getAllListings() }\n                    case 0xb0eceb7e { external_fun_acceptListing() }\n                    case 0xde74e57b { external_fun_listings() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_contract_IInventoryManager(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_contract_IInventoryManager(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_contract_IInventoryManager(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_contract_IInventoryManager(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_contract_IInventoryManager(sload(slot), offset)\n            }\n            /// @ast-id 52 @src 0:591:625  \"IInventoryManager public inventory\"\n            function getter_fun_inventory() -> ret_address\n            {\n                let slot := 1\n                let offset := 0\n                ret_address := read_from_storage_split_dynamic_contract_IInventoryManager(slot, offset)\n            }\n            /// @src 0:397:2255  \"contract CardTrading {...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_contract_IInventoryManager_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function abi_encode_contract_IInventoryManager(value, pos)\n            {\n                mstore(pos, convert_contract_IInventoryManager_to_address(value))\n            }\n            function abi_encode_tuple_contract_IInventoryManager(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_contract_IInventoryManager(value0, add(headStart, 0))\n            }\n            function external_fun_inventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_inventory()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_contract_IInventoryManager(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 54 @src 0:632:652  \"address public owner\"\n            function getter_fun_owner() -> ret\n            {\n                let slot := 2\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:397:2255  \"contract CardTrading {...\"\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_owner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_owner()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_uint256t_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_createListing()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_uint256t_uint256(4, calldatasize())\n                fun_createListing(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_array_struct_Listing_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_struct_Listing_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_struct_Listing_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_address_to_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_struct_Listing(value, pos)\n            {\n                let memberValue0 := mload(add(value, 0x00))\n                abi_encode_address_to_address(memberValue0, add(pos, 0x00))\n                let memberValue0_1 := mload(add(value, 0x20))\n                abi_encode_uint256(memberValue0_1, add(pos, 0x20))\n                let memberValue0_2 := mload(add(value, 0x40))\n                abi_encode_uint256(memberValue0_2, add(pos, 0x40))\n                let memberValue0_3 := mload(add(value, 0x60))\n                abi_encode_bool(memberValue0_3, add(pos, 0x60))\n            }\n            function abi_encodeUpdatedPos_struct_Listing(value0, pos) -> updatedPos\n            {\n                abi_encode_struct_Listing(value0, pos)\n                updatedPos := add(pos, 0x80)\n            }\n            function array_nextElement_array_struct_Listing_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_struct_Listing_memory_ptr_dyn_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_array_struct_Listing_dyn(value)\n                pos := array_storeLengthForEncoding_array_struct_Listing_dyn(pos, length)\n                let baseRef := array_dataslot_array_struct_Listing_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_struct_Listing(elementValue0, pos)\n                    srcPtr := array_nextElement_array_struct_Listing_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encode_array_struct_Listing_dyn(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_struct_Listing_memory_ptr_dyn_memory_ptr(value0, tail)\n            }\n            function external_fun_getAllListings()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_getAllListings()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_struct_Listing_dyn(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function external_fun_acceptListing()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_acceptListing(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_struct_Listing_storage_dyn(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_struct_Listing_storage_dyn(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_struct_Listing__dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Listing_storage_dyn(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Listing_storage_dyn(array)\n                slot := add(dataArea, mul(index, 4))\n                offset := 0\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            /// @ast-id 49 @src 0:559:584  \"Listing[] public listings\"\n            function getter_fun_listings(key) -> ret, ret_1, ret_2, ret_3\n            {\n                let slot := 0\n                let offset := 0\n                if iszero(lt(key, array_length_array_struct_Listing_storage_dyn(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_struct_Listing__dyn(slot, key)\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                ret_2 := read_from_storage_split_offset_uint256(add(slot, 2))\n                ret_3 := read_from_storage_split_offset_bool(add(slot, 3))\n            }\n            /// @src 0:397:2255  \"contract CardTrading {...\"\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_address_uint256_uint256_bool(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                abi_encode_uint256_to_uint256(value2, add(headStart, 64))\n                abi_encode_bool_to_bool(value3, add(headStart, 96))\n            }\n            function external_fun_listings()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3 := getter_fun_listings(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint256_uint256_bool(memPos, ret, ret_1, ret_2, ret_3)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid card ID\")\n            }\n            function abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function extract_from_storage_value_offset_contract_IInventoryManager(slot_value) -> value\n            {\n                value := cleanup_from_storage_contract_IInventoryManager(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_contract_IInventoryManager(slot) -> value\n            {\n                value := extract_from_storage_value_offset_contract_IInventoryManager(sload(slot))\n            }\n            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            { revert(0, 0) }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function shift_left_224(value) -> newValue\n            { newValue := shl(224, value) }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_bool_fromMemory(offset, end) -> value\n            {\n                value := mload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_bool_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function abi_encode_rational_by(value, pos)\n            {\n                mstore(pos, convert_t_rational_by_to_t_uint256(value))\n            }\n            function abi_encode_address_uint256_rational_by(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 96)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                abi_encode_rational_by(value2, add(headStart, 64))\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function store_literal_in_memory_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05(memPtr)\n            {\n                mstore(add(memPtr, 0), \"No card\")\n            }\n            function abi_encode_stringliteral_ec62(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 7)\n                store_literal_in_memory_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_ec62(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_ec62(tail)\n            }\n            function require_helper_stringliteral_ec62(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_ec62(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_array_array_struct_Listing_storage_dyn_storage_to_array_struct_Listing__dyn_ptr(value) -> converted\n            { converted := value }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function allocate_memory_struct_struct_Listing_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function write_to_memory_uint256(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint256(value))\n            }\n            function write_to_memory_bool(memPtr, value)\n            {\n                mstore(memPtr, cleanup_bool(value))\n            }\n            function array_dataslot_array_struct_Listing_storage_dyn_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_struct_Listing_storage_dyn_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_struct_Listing__dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Listing_storage_dyn_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Listing_storage_dyn_ptr(array)\n                slot := add(dataArea, mul(index, 4))\n                offset := 0\n            }\n            function panic_error_0x00()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x00)\n                revert(0, 0x24)\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_20_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function read_from_memoryt_uint256(ptr) -> returnValue\n            {\n                let value := cleanup_uint256(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function read_from_memoryt_bool(ptr) -> returnValue\n            {\n                let value := cleanup_bool(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function copy_struct_to_storage_from_struct_Listing_to_struct_Listing(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 2)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_uint256(memberSrcPtr_2)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 3)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_bool(memberSrcPtr_3)\n                update_storage_value_offset_bool_to_bool(memberSlot_3, memberValue_3)\n            }\n            function update_storage_value_struct_Listing_to_struct_Listing(slot, offset, value)\n            {\n                if offset { panic_error_0x00() }\n                copy_struct_to_storage_from_struct_Listing_to_struct_Listing(slot, value)\n            }\n            function array_push_from_struct_Listing_to_array_struct_Listing_storage_dyn_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_struct_Listing__dyn_ptr(array, oldLen)\n                update_storage_value_struct_Listing_to_struct_Listing(slot, offset, value0)\n            }\n            /// @ast-id 125 @src 0:1114:1533  \"function createListing(uint offerCardId, uint requestCardId) external {...\"\n            function fun_createListing(var_offerCardId, var_requestCardId)\n            {\n                /// @src 0:1203:1214  \"offerCardId\"\n                let _1 := var_offerCardId\n                let expr := _1\n                /// @src 0:1217:1218  \"9\"\n                let expr_1 := 0x09\n                /// @src 0:1203:1218  \"offerCardId < 9\"\n                let expr_2 := lt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:1203:1239  \"offerCardId < 9 && requestCardId < 9\"\n                let expr_3 := expr_2\n                if expr_3\n                {\n                    /// @src 0:1222:1235  \"requestCardId\"\n                    let _2 := var_requestCardId\n                    let expr_4 := _2\n                    /// @src 0:1238:1239  \"9\"\n                    let expr_5 := 0x09\n                    /// @src 0:1222:1239  \"requestCardId < 9\"\n                    let expr_6 := lt(cleanup_uint256(expr_4), convert_rational_by_to_uint256(expr_5))\n                    /// @src 0:1203:1239  \"offerCardId < 9 && requestCardId < 9\"\n                    expr_3 := expr_6\n                }\n                /// @src 0:1195:1259  \"require(offerCardId < 9 && requestCardId < 9, \\\"Invalid card ID\\\")\"\n                require_helper_stringliteral(expr_3)\n                /// @src 0:1278:1287  \"inventory\"\n                let _3_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_102_address := _3_address\n                /// @src 0:1278:1295  \"inventory.hasCard\"\n                let expr_103_address := convert_contract_IInventoryManager_to_address(expr_102_address)\n                let expr_103_functionSelector := 0x4dca8ce6\n                /// @src 0:1296:1306  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 0:1308:1319  \"offerCardId\"\n                let _3 := var_offerCardId\n                let expr_8 := _3\n                /// @src 0:1321:1322  \"1\"\n                let expr_9 := 0x01\n                /// @src 0:1278:1323  \"inventory.hasCard(msg.sender, offerCardId, 1)\"\n                let _4 := allocate_unbounded()\n                mstore(_4, shift_left_224(expr_103_functionSelector))\n                let _5 := abi_encode_address_uint256_rational_by(add(_4, 4), expr_7, expr_8, expr_9)\n                let _6 := staticcall(gas(), expr_103_address, _4, sub(_5, _4), _4, 32)\n                if iszero(_6) { revert_forward() }\n                let expr_10\n                if _6\n                {\n                    let _7 := 32\n                    if gt(_7, returndatasize()) { _7 := returndatasize() }\n                    finalize_allocation(_4, _7)\n                    expr_10 := abi_decode_bool_fromMemory(_4, add(_4, _7))\n                }\n                /// @src 0:1270:1335  \"require(inventory.hasCard(msg.sender, offerCardId, 1), \\\"No card\\\")\"\n                require_helper_stringliteral_ec62(expr_10)\n                /// @src 0:1348:1356  \"listings\"\n                let _9_slot := 0x00\n                let expr_112_slot := _9_slot\n                /// @src 0:1348:1361  \"listings.push\"\n                let expr_self_slot := convert_array_array_struct_Listing_storage_dyn_storage_to_array_struct_Listing__dyn_ptr(expr_112_slot)\n                /// @src 0:1393:1403  \"msg.sender\"\n                let expr_11 := caller()\n                /// @src 0:1431:1442  \"offerCardId\"\n                let _8 := var_offerCardId\n                let expr_12 := _8\n                /// @src 0:1472:1485  \"requestCardId\"\n                let _9 := var_requestCardId\n                let expr_13 := _9\n                /// @src 0:1508:1512  \"true\"\n                let expr_14 := 0x01\n                /// @src 0:1362:1524  \"Listing({...\"\n                let expr_mpos := allocate_memory_struct_struct_Listing_storage_ptr()\n                write_to_memory_address(add(expr_mpos, 0), expr_11)\n                write_to_memory_uint256(add(expr_mpos, 32), expr_12)\n                write_to_memory_uint256(add(expr_mpos, 64), expr_13)\n                write_to_memory_bool(add(expr_mpos, 96), expr_14)\n                /// @src 0:1348:1525  \"listings.push(Listing({...\"\n                array_push_from_struct_Listing_to_array_struct_Listing_storage_dyn_ptr(expr_self_slot, expr_mpos)\n            }\n            /// @src 0:397:2255  \"contract CardTrading {...\"\n            function zero_value_for_split_array_struct_Listing_dyn() -> ret\n            { ret := 96 }\n            function array_allocation_size_array_struct_Listing_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_array_struct_Listing_dyn(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_struct_Listing_dyn(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function allocate_memory_struct_struct_Listing() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function read_from_storage_reference_type_struct_Listing(slot) -> value\n            {\n                value := allocate_memory_struct_struct_Listing()\n                let memberValue := read_from_storage_split_offset_address(add(slot, 0))\n                write_to_memory_address(add(value, 0), memberValue)\n                let memberValue_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                write_to_memory_uint256(add(value, 32), memberValue_1)\n                let memberValue_2 := read_from_storage_split_offset_uint256(add(slot, 2))\n                write_to_memory_uint256(add(value, 64), memberValue_2)\n                let memberValue_3 := read_from_storage_split_offset_bool(add(slot, 3))\n                write_to_memory_bool(add(value, 96), memberValue_3)\n            }\n            function convert_struct_Listing_storage_to_struct_Listing(value) -> converted\n            {\n                converted := read_from_storage_reference_type_struct_Listing(value)\n            }\n            function copy_array_from_storage_to_memory_array_struct_Listing__dyn(slot) -> memPtr\n            {\n                let length := array_length_array_struct_Listing_storage_dyn(slot)\n                memPtr := allocate_memory_array_array_struct_Listing_dyn(length)\n                let mpos := memPtr\n                mpos := add(mpos, 0x20)\n                let spos := array_dataslot_array_struct_Listing_storage_dyn(slot)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, convert_struct_Listing_storage_to_struct_Listing(spos))\n                    mpos := add(mpos, 0x20)\n                    spos := add(spos, 4)\n                }\n            }\n            function convert_array_array_struct_Listing_storage_dyn_to_array_struct_Listing_dyn(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_struct_Listing__dyn(value)\n            }\n            /// @ast-id 213 @src 0:2151:2252  \"function getAllListings() external view returns (Listing[] memory) {...\"\n            function fun_getAllListings() -> var_mpos\n            {\n                /// @src 0:2200:2216  \"Listing[] memory\"\n                let zero_array_struct_Listing_dyn_mpos := zero_value_for_split_array_struct_Listing_dyn()\n                var_mpos := zero_array_struct_Listing_dyn_mpos\n                /// @src 0:2236:2244  \"listings\"\n                let _13_slot := 0x00\n                let expr_210_slot := _13_slot\n                /// @src 0:2229:2244  \"return listings\"\n                var_mpos := convert_array_array_struct_Listing_storage_dyn_to_array_struct_Listing_dyn(expr_210_slot)\n                leave\n            }\n            /// @src 0:397:2255  \"contract CardTrading {...\"\n            function store_literal_in_memory_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid ID\")\n            }\n            function abi_encode_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 10)\n                store_literal_in_memory_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_87f3(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff(tail)\n            }\n            function require_helper_stringliteral_87f3(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_87f3(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_struct_Listing_storage_to_struct_Listing_ptr(value) -> converted\n            { converted := value }\n            function store_literal_in_memory_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Inactive\")\n            }\n            function abi_encode_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 8)\n                store_literal_in_memory_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_8ab6(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646(tail)\n            }\n            function require_helper_stringliteral_8ab6(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8ab6(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Own listing\")\n            }\n            function abi_encode_stringliteral_5a8b(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 11)\n                store_literal_in_memory_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_5a8b(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_5a8b(tail)\n            }\n            function require_helper_stringliteral_5a8b(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_5a8b(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function abi_decode_fromMemory(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function abi_encode_address_address_uint256_rational_by(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_address(value1, add(headStart, 32))\n                abi_encode_uint256_to_uint256(value2, add(headStart, 64))\n                abi_encode_rational_by(value3, add(headStart, 96))\n            }\n            /// @ast-id 203 @src 0:1541:2143  \"function acceptListing(uint listingId) external {...\"\n            function fun_acceptListing(var_listingId)\n            {\n                /// @src 0:1608:1617  \"listingId\"\n                let _1 := var_listingId\n                let expr := _1\n                /// @src 0:1620:1628  \"listings\"\n                let _15_slot := 0x00\n                let expr_132_slot := _15_slot\n                /// @src 0:1620:1635  \"listings.length\"\n                let expr_1 := array_length_array_struct_Listing_storage_dyn(expr_132_slot)\n                /// @src 0:1608:1635  \"listingId < listings.length\"\n                let expr_2 := lt(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 0:1600:1650  \"require(listingId < listings.length, \\\"Invalid ID\\\")\"\n                require_helper_stringliteral_87f3(expr_2)\n                /// @src 0:1687:1695  \"listings\"\n                let _16_slot := 0x00\n                let expr_141_slot := _16_slot\n                /// @src 0:1696:1705  \"listingId\"\n                let _2 := var_listingId\n                let expr_3 := _2\n                /// @src 0:1687:1706  \"listings[listingId]\"\n                let _3, _4 := storage_array_index_access_struct_Listing__dyn(expr_141_slot, expr_3)\n                let _20_slot := _3\n                let expr_143_slot := _20_slot\n                /// @src 0:1661:1706  \"Listing storage listing = listings[listingId]\"\n                let var_listing_slot := convert_struct_Listing_storage_to_struct_Listing_ptr(expr_143_slot)\n                /// @src 0:1725:1732  \"listing\"\n                let _21_slot := var_listing_slot\n                let expr_146_slot := _21_slot\n                /// @src 0:1725:1739  \"listing.active\"\n                let _5 := add(expr_146_slot, 3)\n                let _6 := read_from_storage_split_offset_bool(_5)\n                let expr_4 := _6\n                /// @src 0:1717:1752  \"require(listing.active, \\\"Inactive\\\")\"\n                require_helper_stringliteral_8ab6(expr_4)\n                /// @src 0:1771:1781  \"msg.sender\"\n                let expr_5 := caller()\n                /// @src 0:1785:1792  \"listing\"\n                let _24_slot := var_listing_slot\n                let expr_154_slot := _24_slot\n                /// @src 0:1785:1799  \"listing.seller\"\n                let _7 := add(expr_154_slot, 0)\n                let _8 := read_from_storage_split_offset_address(_7)\n                let expr_6 := _8\n                /// @src 0:1771:1799  \"msg.sender != listing.seller\"\n                let expr_7 := iszero(eq(cleanup_address(expr_5), cleanup_address(expr_6)))\n                /// @src 0:1763:1815  \"require(msg.sender != listing.seller, \\\"Own listing\\\")\"\n                require_helper_stringliteral_5a8b(expr_7)\n                /// @src 0:1834:1843  \"inventory\"\n                let _27_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_address := _27_address\n                /// @src 0:1834:1851  \"inventory.hasCard\"\n                let expr_162_address := convert_contract_IInventoryManager_to_address(expr_address)\n                let expr_162_functionSelector := 0x4dca8ce6\n                /// @src 0:1852:1862  \"msg.sender\"\n                let expr_8 := caller()\n                /// @src 0:1864:1871  \"listing\"\n                let _28_slot := var_listing_slot\n                let expr_165_slot := _28_slot\n                /// @src 0:1864:1885  \"listing.requestCardId\"\n                let _9 := add(expr_165_slot, 2)\n                let _10 := read_from_storage_split_offset_uint256(_9)\n                let expr_9 := _10\n                /// @src 0:1887:1888  \"1\"\n                let expr_10 := 0x01\n                /// @src 0:1834:1889  \"inventory.hasCard(msg.sender, listing.requestCardId, 1)\"\n                let _11 := allocate_unbounded()\n                mstore(_11, shift_left_224(expr_162_functionSelector))\n                let _12 := abi_encode_address_uint256_rational_by(add(_11, 4), expr_8, expr_9, expr_10)\n                let _13 := staticcall(gas(), expr_162_address, _11, sub(_12, _11), _11, 32)\n                if iszero(_13) { revert_forward() }\n                let expr_11\n                if _13\n                {\n                    let _14 := 32\n                    if gt(_14, returndatasize()) { _14 := returndatasize() }\n                    finalize_allocation(_11, _14)\n                    expr_11 := abi_decode_bool_fromMemory(_11, add(_11, _14))\n                }\n                /// @src 0:1826:1901  \"require(inventory.hasCard(msg.sender, listing.requestCardId, 1), \\\"No card\\\")\"\n                require_helper_stringliteral_ec62(expr_11)\n                /// @src 0:1937:1946  \"inventory\"\n                let _35_address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_172_address := _35_address\n                /// @src 0:1937:1960  \"inventory.transferCards\"\n                let expr_174_address := convert_contract_IInventoryManager_to_address(expr_172_address)\n                let expr_functionSelector := 0x65352442\n                /// @src 0:1961:1971  \"msg.sender\"\n                let expr_12 := caller()\n                /// @src 0:1973:1980  \"listing\"\n                let _36_slot := var_listing_slot\n                let expr_177_slot := _36_slot\n                /// @src 0:1973:1987  \"listing.seller\"\n                let _15 := add(expr_177_slot, 0)\n                let _16 := read_from_storage_split_offset_address(_15)\n                let expr_13 := _16\n                /// @src 0:1989:1996  \"listing\"\n                let _39_slot := var_listing_slot\n                let expr_179_slot := _39_slot\n                /// @src 0:1989:2010  \"listing.requestCardId\"\n                let _17 := add(expr_179_slot, 2)\n                let _18 := read_from_storage_split_offset_uint256(_17)\n                let expr_14 := _18\n                /// @src 0:2012:2013  \"1\"\n                let expr_15 := 0x01\n                /// @src 0:1937:2014  \"inventory.transferCards(msg.sender, listing.seller, listing.requestCardId, 1)\"\n                if iszero(extcodesize(expr_174_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _19 := allocate_unbounded()\n                mstore(_19, shift_left_224(expr_functionSelector))\n                let _20 := abi_encode_address_address_uint256_rational_by(add(_19, 4), expr_12, expr_13, expr_14, expr_15)\n                let _21 := call(gas(), expr_174_address, 0, _19, sub(_20, _19), _19, 0)\n                if iszero(_21) { revert_forward() }\n                if _21\n                {\n                    let _22 := 0\n                    if gt(_22, returndatasize()) { _22 := returndatasize() }\n                    finalize_allocation(_19, _22)\n                    abi_decode_fromMemory(_19, add(_19, _22))\n                }\n                /// @src 0:2025:2034  \"inventory\"\n                let _address := read_from_storage_split_offset_contract_IInventoryManager(0x01)\n                let expr_184_address := _address\n                /// @src 0:2025:2048  \"inventory.transferCards\"\n                let expr_186_address := convert_contract_IInventoryManager_to_address(expr_184_address)\n                let expr_186_functionSelector := 0x65352442\n                /// @src 0:2049:2056  \"listing\"\n                let _47_slot := var_listing_slot\n                let expr_187_slot := _47_slot\n                /// @src 0:2049:2063  \"listing.seller\"\n                let _23 := add(expr_187_slot, 0)\n                let _24 := read_from_storage_split_offset_address(_23)\n                let expr_16 := _24\n                /// @src 0:2065:2075  \"msg.sender\"\n                let expr_17 := caller()\n                /// @src 0:2077:2084  \"listing\"\n                let _50_slot := var_listing_slot\n                let expr_slot := _50_slot\n                /// @src 0:2077:2096  \"listing.offerCardId\"\n                let _25 := add(expr_slot, 1)\n                let _26 := read_from_storage_split_offset_uint256(_25)\n                let expr_18 := _26\n                /// @src 0:2098:2099  \"1\"\n                let expr_19 := 0x01\n                /// @src 0:2025:2100  \"inventory.transferCards(listing.seller, msg.sender, listing.offerCardId, 1)\"\n                if iszero(extcodesize(expr_186_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _27 := allocate_unbounded()\n                mstore(_27, shift_left_224(expr_186_functionSelector))\n                let _28 := abi_encode_address_address_uint256_rational_by(add(_27, 4), expr_16, expr_17, expr_18, expr_19)\n                let _29 := call(gas(), expr_186_address, 0, _27, sub(_28, _27), _27, 0)\n                if iszero(_29) { revert_forward() }\n                if _29\n                {\n                    let _30 := 0\n                    if gt(_30, returndatasize()) { _30 := returndatasize() }\n                    finalize_allocation(_27, _30)\n                    abi_decode_fromMemory(_27, add(_27, _30))\n                }\n                /// @src 0:2130:2135  \"false\"\n                let expr_20 := 0x00\n                /// @src 0:2113:2120  \"listing\"\n                let _slot := var_listing_slot\n                let expr_196_slot := _slot\n                /// @src 0:2113:2127  \"listing.active\"\n                let _31 := add(expr_196_slot, 3)\n                /// @src 0:2113:2135  \"listing.active = false\"\n                update_storage_value_offset_bool_to_bool(_31, expr_20)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212205bad7ebb7795b91ad6d2db0bff0ce913e47f54693d8ad276d9d62675410f43d064736f6c634300081c0033\"\n    }\n}\n",
					"hash": "8c65e2505f5cf15ff0b037ad022514c783b907b5b1f1313ec95c0176f8f997fc",
					"factoryDependencies": {}
				},
				"IInventoryManager": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								}
							],
							"name": "addCard",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "hasCard",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								}
							],
							"name": "setTradingContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferCards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hasCard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTradingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CardTrading.sol\":\"IInventoryManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"CardTrading.sol\":{\"keccak256\":\"0xeb24e4d552399fc89280b7ed6272d890b3c8737e1e77e57e91eb764e5edef340\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b414cd95d880656fbb8f1a33817c2333caa317c07a63ef4840403d7c071019d0\",\"dweb:/ipfs/Qme19nRZk8TsS6mS2vcB3D4Sqg5H1pX3UmeWLW1kuLzGWB\"]}},\"version\":1}",
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"evm": {
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"addCard(address,uint256)": "f9c775ea",
							"hasCard(address,uint256,uint256)": "4dca8ce6",
							"setTradingContract(address)": "5be6f2c7",
							"transferCards(address,address,uint256,uint256)": "65352442"
						}
					},
					"irOptimized": ""
				}
			}
		},
		"sources": {
			"CardTrading.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "CardTrading.sol",
					"exportedSymbols": {
						"CardTrading": [
							214
						],
						"IInventoryManager": [
							36
						]
					},
					"id": 215,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IInventoryManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 36,
							"linearizedBaseContracts": [
								36
							],
							"name": "IInventoryManager",
							"nameLocation": "70:17:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "f9c775ea",
									"id": 8,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addCard",
									"nameLocation": "104:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "120:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 8,
												"src": "112:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "112:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "129:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 8,
												"src": "124:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "124:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "111:25:0"
									},
									"returnParameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "145:0:0"
									},
									"scope": 36,
									"src": "95:51:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "65352442",
									"id": 19,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferCards",
									"nameLocation": "161:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "183:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "175:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "175:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "197:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "189:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "189:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "206:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "201:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 13,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "201:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "219:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "214:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 15,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "214:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "174:52:0"
									},
									"returnParameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "235:0:0"
									},
									"scope": 36,
									"src": "152:84:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4dca8ce6",
									"id": 30,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasCard",
									"nameLocation": "251:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "267:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "259:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 20,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "259:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "278:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "273:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 22,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "273:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "291:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "286:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 24,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "286:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "258:40:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "322:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 27,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "322:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "321:6:0"
									},
									"scope": 36,
									"src": "242:86:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "5be6f2c7",
									"id": 35,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTradingContract",
									"nameLocation": "343:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "370:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "362:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 31,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "362:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "361:19:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "389:0:0"
									},
									"scope": 36,
									"src": "334:56:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 215,
							"src": "60:333:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CardTrading",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 214,
							"linearizedBaseContracts": [
								214
							],
							"name": "CardTrading",
							"nameLocation": "406:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "CardTrading.Listing",
									"id": 45,
									"members": [
										{
											"constant": false,
											"id": 38,
											"mutability": "mutable",
											"name": "seller",
											"nameLocation": "459:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 45,
											"src": "451:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 37,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "451:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 40,
											"mutability": "mutable",
											"name": "offerCardId",
											"nameLocation": "481:11:0",
											"nodeType": "VariableDeclaration",
											"scope": 45,
											"src": "476:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 39,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "476:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 42,
											"mutability": "mutable",
											"name": "requestCardId",
											"nameLocation": "508:13:0",
											"nodeType": "VariableDeclaration",
											"scope": 45,
											"src": "503:18:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 41,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "503:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 44,
											"mutability": "mutable",
											"name": "active",
											"nameLocation": "537:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 45,
											"src": "532:11:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 43,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "532:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Listing",
									"nameLocation": "432:7:0",
									"nodeType": "StructDefinition",
									"scope": 214,
									"src": "425:126:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "de74e57b",
									"id": 49,
									"mutability": "mutable",
									"name": "listings",
									"nameLocation": "576:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 214,
									"src": "559:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_struct$_Listing_$45_storage_$dyn_storage",
										"typeString": "struct CardTrading.Listing[]"
									},
									"typeName": {
										"baseType": {
											"id": 47,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 46,
												"name": "Listing",
												"nameLocations": [
													"559:7:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "559:7:0"
											},
											"referencedDeclaration": 45,
											"src": "559:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
												"typeString": "struct CardTrading.Listing"
											}
										},
										"id": 48,
										"nodeType": "ArrayTypeName",
										"src": "559:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_struct$_Listing_$45_storage_$dyn_storage_ptr",
											"typeString": "struct CardTrading.Listing[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "15d52a5c",
									"id": 52,
									"mutability": "mutable",
									"name": "inventory",
									"nameLocation": "616:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 214,
									"src": "591:34:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IInventoryManager_$36",
										"typeString": "contract IInventoryManager"
									},
									"typeName": {
										"id": 51,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 50,
											"name": "IInventoryManager",
											"nameLocations": [
												"591:17:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 36,
											"src": "591:17:0"
										},
										"referencedDeclaration": 36,
										"src": "591:17:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IInventoryManager_$36",
											"typeString": "contract IInventoryManager"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 54,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "647:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 214,
									"src": "632:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 53,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "632:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "699:407:0",
										"statements": [
											{
												"expression": {
													"id": 63,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 59,
														"name": "inventory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 52,
														"src": "710:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IInventoryManager_$36",
															"typeString": "contract IInventoryManager"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 61,
																"name": "inventoryAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 56,
																"src": "740:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 60,
															"name": "IInventoryManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 36,
															"src": "722:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IInventoryManager_$36_$",
																"typeString": "type(contract IInventoryManager)"
															}
														},
														"id": 62,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "722:35:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IInventoryManager_$36",
															"typeString": "contract IInventoryManager"
														}
													},
													"src": "710:47:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IInventoryManager_$36",
														"typeString": "contract IInventoryManager"
													}
												},
												"id": 64,
												"nodeType": "ExpressionStatement",
												"src": "710:47:0"
											},
											{
												"expression": {
													"id": 68,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 65,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "768:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 66,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "776:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 67,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "780:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "776:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "768:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 69,
												"nodeType": "ExpressionStatement",
												"src": "768:18:0"
											},
											{
												"clauses": [
													{
														"block": {
															"id": 77,
															"nodeType": "Block",
															"src": "926:83:0",
															"statements": []
														},
														"errorName": "",
														"id": 78,
														"nodeType": "TryCatchClause",
														"src": "926:83:0"
													},
													{
														"block": {
															"id": 79,
															"nodeType": "Block",
															"src": "1016:83:0",
															"statements": []
														},
														"errorName": "",
														"id": 80,
														"nodeType": "TryCatchClause",
														"src": "1010:89:0"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 74,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "919:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_CardTrading_$214",
																		"typeString": "contract CardTrading"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_CardTrading_$214",
																		"typeString": "contract CardTrading"
																	}
																],
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "911:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 72,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "911:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "911:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 70,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 52,
															"src": "882:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInventoryManager_$36",
																"typeString": "contract IInventoryManager"
															}
														},
														"id": 71,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "892:18:0",
														"memberName": "setTradingContract",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 35,
														"src": "882:28:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address) external"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "882:43:0",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "TryStatement",
												"src": "878:221:0"
											}
										]
									},
									"id": 83,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "inventoryAddress",
												"nameLocation": "681:16:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "673:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 55,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "673:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:26:0"
									},
									"returnParameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "699:0:0"
									},
									"scope": 214,
									"src": "661:445:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "1184:349:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 93,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 91,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 85,
																	"src": "1203:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "39",
																	"id": 92,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1217:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_9_by_1",
																		"typeString": "int_const 9"
																	},
																	"value": "9"
																},
																"src": "1203:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 96,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 94,
																	"name": "requestCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 87,
																	"src": "1222:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "39",
																	"id": 95,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1238:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_9_by_1",
																		"typeString": "int_const 9"
																	},
																	"value": "9"
																},
																"src": "1222:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1203:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642063617264204944",
															"id": 98,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1241:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															},
															"value": "Invalid card ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8239130c7f9c93c8a6f1ab793103a7979addb588c060d08a6d46c5ad2ada1adb",
																"typeString": "literal_string \"Invalid card ID\""
															}
														],
														"id": 90,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1195:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 99,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1195:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 100,
												"nodeType": "ExpressionStatement",
												"src": "1195:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 104,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1296:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 105,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1300:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1296:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 106,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 85,
																	"src": "1308:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "31",
																	"id": 107,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1321:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	}
																],
																"expression": {
																	"id": 102,
																	"name": "inventory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 52,
																	"src": "1278:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IInventoryManager_$36",
																		"typeString": "contract IInventoryManager"
																	}
																},
																"id": 103,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1288:7:0",
																"memberName": "hasCard",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 30,
																"src": "1278:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,uint256) view external returns (bool)"
																}
															},
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1278:45:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2063617264",
															"id": 109,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1325:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															},
															"value": "No card"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															}
														],
														"id": 101,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1270:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1270:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 111,
												"nodeType": "ExpressionStatement",
												"src": "1270:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 116,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1393:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 117,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1397:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1393:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 118,
																	"name": "offerCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 85,
																	"src": "1431:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 119,
																	"name": "requestCardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 87,
																	"src": "1472:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "74727565",
																	"id": 120,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1508:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 115,
																"name": "Listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 45,
																"src": "1362:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_struct$_Listing_$45_storage_ptr_$",
																	"typeString": "type(struct CardTrading.Listing storage pointer)"
																}
															},
															"id": 121,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "structConstructorCall",
															"lValueRequested": false,
															"nameLocations": [
																"1385:6:0",
																"1418:11:0",
																"1457:13:0",
																"1500:6:0"
															],
															"names": [
																"seller",
																"offerCardId",
																"requestCardId",
																"active"
															],
															"nodeType": "FunctionCall",
															"src": "1362:162:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$45_memory_ptr",
																"typeString": "struct CardTrading.Listing memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Listing_$45_memory_ptr",
																"typeString": "struct CardTrading.Listing memory"
															}
														],
														"expression": {
															"id": 112,
															"name": "listings",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 49,
															"src": "1348:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Listing_$45_storage_$dyn_storage",
																"typeString": "struct CardTrading.Listing storage ref[] storage ref"
															}
														},
														"id": 114,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1357:4:0",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "1348:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Listing_$45_storage_$dyn_storage_ptr_$_t_struct$_Listing_$45_storage_$returns$__$attached_to$_t_array$_t_struct$_Listing_$45_storage_$dyn_storage_ptr_$",
															"typeString": "function (struct CardTrading.Listing storage ref[] storage pointer,struct CardTrading.Listing storage ref)"
														}
													},
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1348:177:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 123,
												"nodeType": "ExpressionStatement",
												"src": "1348:177:0"
											}
										]
									},
									"functionSelector": "a79123a9",
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createListing",
									"nameLocation": "1123:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "offerCardId",
												"nameLocation": "1142:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "1137:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 84,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1137:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "requestCardId",
												"nameLocation": "1160:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "1155:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 86,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1155:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1136:38:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1184:0:0"
									},
									"scope": 214,
									"src": "1114:419:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 202,
										"nodeType": "Block",
										"src": "1589:554:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 134,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 131,
																"name": "listingId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 127,
																"src": "1608:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 132,
																	"name": "listings",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 49,
																	"src": "1620:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Listing_$45_storage_$dyn_storage",
																		"typeString": "struct CardTrading.Listing storage ref[] storage ref"
																	}
																},
																"id": 133,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1629:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "1620:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1608:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c6964204944",
															"id": 135,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1637:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															},
															"value": "Invalid ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_87f3886812bef0a0dc3e6d6f4cf3f9f092baac9eb28036985fa1468b76a81eff",
																"typeString": "literal_string \"Invalid ID\""
															}
														],
														"id": 130,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1600:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1600:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 137,
												"nodeType": "ExpressionStatement",
												"src": "1600:50:0"
											},
											{
												"assignments": [
													140
												],
												"declarations": [
													{
														"constant": false,
														"id": 140,
														"mutability": "mutable",
														"name": "listing",
														"nameLocation": "1677:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 202,
														"src": "1661:23:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
															"typeString": "struct CardTrading.Listing"
														},
														"typeName": {
															"id": 139,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 138,
																"name": "Listing",
																"nameLocations": [
																	"1661:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 45,
																"src": "1661:7:0"
															},
															"referencedDeclaration": 45,
															"src": "1661:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
																"typeString": "struct CardTrading.Listing"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 144,
												"initialValue": {
													"baseExpression": {
														"id": 141,
														"name": "listings",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 49,
														"src": "1687:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Listing_$45_storage_$dyn_storage",
															"typeString": "struct CardTrading.Listing storage ref[] storage ref"
														}
													},
													"id": 143,
													"indexExpression": {
														"id": 142,
														"name": "listingId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 127,
														"src": "1696:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1687:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Listing_$45_storage",
														"typeString": "struct CardTrading.Listing storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1661:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 146,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 140,
																"src": "1725:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 147,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1733:6:0",
															"memberName": "active",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 44,
															"src": "1725:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e616374697665",
															"id": 148,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1741:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646",
																"typeString": "literal_string \"Inactive\""
															},
															"value": "Inactive"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8ab6980eebf45f7e7935328290280398bfdef3fc0c531ddfb9152f949dbec646",
																"typeString": "literal_string \"Inactive\""
															}
														],
														"id": 145,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1717:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1717:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 150,
												"nodeType": "ExpressionStatement",
												"src": "1717:35:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 156,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 152,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1771:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 153,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1775:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1771:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 154,
																	"name": "listing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 140,
																	"src": "1785:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
																		"typeString": "struct CardTrading.Listing storage pointer"
																	}
																},
																"id": 155,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1793:6:0",
																"memberName": "seller",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 38,
																"src": "1785:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1771:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e206c697374696e67",
															"id": 157,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1801:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226",
																"typeString": "literal_string \"Own listing\""
															},
															"value": "Own listing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5a8b89499fc60be7e69dcac7dcfbc64f46906ec2cd86dedfe5d4d2f4e219f226",
																"typeString": "literal_string \"Own listing\""
															}
														],
														"id": 151,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1763:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1763:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 159,
												"nodeType": "ExpressionStatement",
												"src": "1763:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 163,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1852:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 164,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1856:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1852:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"expression": {
																		"id": 165,
																		"name": "listing",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 140,
																		"src": "1864:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
																			"typeString": "struct CardTrading.Listing storage pointer"
																		}
																	},
																	"id": 166,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1872:13:0",
																	"memberName": "requestCardId",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 42,
																	"src": "1864:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "31",
																	"id": 167,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1887:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	}
																],
																"expression": {
																	"id": 161,
																	"name": "inventory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 52,
																	"src": "1834:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IInventoryManager_$36",
																		"typeString": "contract IInventoryManager"
																	}
																},
																"id": 162,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1844:7:0",
																"memberName": "hasCard",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 30,
																"src": "1834:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,uint256) view external returns (bool)"
																}
															},
															"id": 168,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1834:55:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2063617264",
															"id": 169,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1891:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															},
															"value": "No card"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ec62d956ae80c3ab34529c35b5086b71f5ff119b9c62265e234e8a2de2f9bc05",
																"typeString": "literal_string \"No card\""
															}
														],
														"id": 160,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1826:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1826:75:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 171,
												"nodeType": "ExpressionStatement",
												"src": "1826:75:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 175,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1961:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 176,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1965:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1961:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 177,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 140,
																"src": "1973:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 178,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1981:6:0",
															"memberName": "seller",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 38,
															"src": "1973:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 179,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 140,
																"src": "1989:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 180,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1997:13:0",
															"memberName": "requestCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 42,
															"src": "1989:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 181,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2012:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"expression": {
															"id": 172,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 52,
															"src": "1937:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInventoryManager_$36",
																"typeString": "contract IInventoryManager"
															}
														},
														"id": 174,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1947:13:0",
														"memberName": "transferCards",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 19,
														"src": "1937:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256) external"
														}
													},
													"id": 182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1937:77:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 183,
												"nodeType": "ExpressionStatement",
												"src": "1937:77:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 187,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 140,
																"src": "2049:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 188,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2057:6:0",
															"memberName": "seller",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 38,
															"src": "2049:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 189,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2065:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 190,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2069:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2065:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 191,
																"name": "listing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 140,
																"src": "2077:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
																	"typeString": "struct CardTrading.Listing storage pointer"
																}
															},
															"id": 192,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2085:11:0",
															"memberName": "offerCardId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 40,
															"src": "2077:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 193,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2098:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"expression": {
															"id": 184,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 52,
															"src": "2025:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInventoryManager_$36",
																"typeString": "contract IInventoryManager"
															}
														},
														"id": 186,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2035:13:0",
														"memberName": "transferCards",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 19,
														"src": "2025:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256) external"
														}
													},
													"id": 194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2025:75:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 195,
												"nodeType": "ExpressionStatement",
												"src": "2025:75:0"
											},
											{
												"expression": {
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 196,
															"name": "listing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 140,
															"src": "2113:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
																"typeString": "struct CardTrading.Listing storage pointer"
															}
														},
														"id": 198,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2121:6:0",
														"memberName": "active",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 44,
														"src": "2113:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 199,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2130:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2113:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 201,
												"nodeType": "ExpressionStatement",
												"src": "2113:22:0"
											}
										]
									},
									"functionSelector": "b0eceb7e",
									"id": 203,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "acceptListing",
									"nameLocation": "1550:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "listingId",
												"nameLocation": "1569:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1564:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1564:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1563:16:0"
									},
									"returnParameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1589:0:0"
									},
									"scope": 214,
									"src": "1541:602:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 212,
										"nodeType": "Block",
										"src": "2218:34:0",
										"statements": [
											{
												"expression": {
													"id": 210,
													"name": "listings",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 49,
													"src": "2236:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Listing_$45_storage_$dyn_storage",
														"typeString": "struct CardTrading.Listing storage ref[] storage ref"
													}
												},
												"functionReturnParameters": 209,
												"id": 211,
												"nodeType": "Return",
												"src": "2229:15:0"
											}
										]
									},
									"functionSelector": "ae73ccec",
									"id": 213,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAllListings",
									"nameLocation": "2160:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2174:2:0"
									},
									"returnParameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "2200:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Listing_$45_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct CardTrading.Listing[]"
												},
												"typeName": {
													"baseType": {
														"id": 206,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 205,
															"name": "Listing",
															"nameLocations": [
																"2200:7:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 45,
															"src": "2200:7:0"
														},
														"referencedDeclaration": 45,
														"src": "2200:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Listing_$45_storage_ptr",
															"typeString": "struct CardTrading.Listing"
														}
													},
													"id": 207,
													"nodeType": "ArrayTypeName",
													"src": "2200:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Listing_$45_storage_$dyn_storage_ptr",
														"typeString": "struct CardTrading.Listing[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2199:18:0"
									},
									"scope": 214,
									"src": "2151:101:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 215,
							"src": "397:1858:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:2224:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}