{
	"id": "b885aa6ee02e039165e1d42248d616e1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"CardGame.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\n\r\npragma solidity >=0.8.2 <0.9.0;\r\n\r\n\r\n\r\n\r\nimport \"./CardInventory.sol\";\r\n\r\n\r\ncontract CardGame {\r\n    CardInventory public inventory;\r\n    uint public totalCardTypes = 5;\r\n\r\n\r\n    event CardWon(address indexed user, uint cardId);\r\n\r\n\r\n    constructor(address _inventory) {\r\n        inventory = CardInventory(_inventory);\r\n    }\r\n\r\n\r\n    function spinWheel() external {\r\n        uint random = uint(\r\n            keccak256(abi.encodePacked(block.timestamp, msg.sender, block.prevrandao))\r\n        ) % totalCardTypes;\r\n\r\n\r\n        inventory.addCard(msg.sender, random, 1);\r\n        emit CardWon(msg.sender, random);\r\n    }\r\n}\r\n"
			},
			"CardInventory.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.2 <0.9.0;\r\n\r\n\r\n\r\n\r\ncontract CardInventory {\r\n    mapping(address => mapping(uint => uint)) private cardBalances;\r\n\r\n\r\n    function addCard(address user, uint cardId, uint amount) external {\r\n        cardBalances[user][cardId] += amount;\r\n    }\r\n\r\n\r\n    function removeCard(address user, uint cardId, uint amount) external {\r\n        require(cardBalances[user][cardId] >= amount, \"Not enough cards\");\r\n        cardBalances[user][cardId] -= amount;\r\n    }\r\n\r\n\r\n    function getBalance(address user, uint cardId) external view returns (uint) {\r\n        return cardBalances[user][cardId];\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"CardGame.sol": {
				"CardGame": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_inventory",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								}
							],
							"name": "CardWon",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "inventory",
							"outputs": [
								{
									"internalType": "contract CardInventory",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "spinWheel",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalCardTypes",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inventory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"CardWon\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"contract CardInventory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spinWheel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCardTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CardGame.sol\":\"CardGame\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"CardGame.sol\":{\"keccak256\":\"0xd610da504318077c6c94571e746e5dc6caa0b165a720dba99917c69f59f595c7\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5b65c66b70ec033a08709b2062e2c162de17cdb54ed97856b70afb082fef51e3\",\"dweb:/ipfs/QmS18fX9LHMVCfaeqdXaxsqejdhRKskEgBTdNnd485R63a\"]},\"CardInventory.sol\":{\"keccak256\":\"0x01c80db43ea035f45b0e8d628ac6d96624b438283db1a028cbf7c03dbbb0d845\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a74736717bbb9ec6fae143864c29666906616529cedb93b5015991b1528c531c\",\"dweb:/ipfs/QmSu563K6Z5CE6EG7ujgiP9WTpDGwikXMEW3Vs6nT5sgp1\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 5,
								"contract": "CardGame.sol:CardGame",
								"label": "inventory",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(CardInventory)137"
							},
							{
								"astId": 8,
								"contract": "CardGame.sol:CardGame",
								"label": "totalCardTypes",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_contract(CardInventory)137": {
								"encoding": "inplace",
								"label": "contract CardInventory",
								"numberOfBytes": "20"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 32/65584 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 4315\n// Code size = 13441 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20020]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20020] = a1\n    42: a1 = 0x20030\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20030\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 3 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20024] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @29\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffff20\n   342: u64 [sp + 0xd8] = ra\n   346: u64 [sp + 0xd0] = s0\n   350: u64 [sp + 0xc8] = s1\n   354: s0 = sp + 0xe0\n   358: sp = sp & 0xffffffffffffffe0\n   361: a0 = 0x40\n   364: a1 = 0x20\n   367: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   372: u8 [a0 + 31] = 0x80\n   377: u8 [a0 + 30] = 0\n   380: u8 [a0 + 29] = 0\n   383: u8 [a0 + 28] = 0\n   386: u8 [a0 + 27] = 0\n   389: u8 [a0 + 26] = 0\n   392: u8 [a0 + 25] = 0\n   395: u8 [a0 + 24] = 0\n   398: u8 [a0 + 23] = 0\n   401: u8 [a0 + 22] = 0\n   404: u8 [a0 + 21] = 0\n   407: u8 [a0 + 20] = 0\n   410: u8 [a0 + 19] = 0\n   413: u8 [a0 + 18] = 0\n   416: u8 [a0 + 17] = 0\n   419: u8 [a0 + 16] = 0\n   422: u8 [a0 + 15] = 0\n   425: u8 [a0 + 14] = 0\n   428: u8 [a0 + 13] = 0\n   431: u8 [a0 + 12] = 0\n   434: u8 [a0 + 11] = 0\n   437: u8 [a0 + 10] = 0\n   440: u8 [a0 + 9] = 0\n   443: u8 [a0 + 8] = 0\n   446: u8 [a0 + 7] = 0\n   449: u8 [a0 + 6] = 0\n   452: u8 [a0 + 5] = 0\n   455: u8 [a0 + 4] = 0\n   458: u8 [a0 + 3] = 0\n   461: u8 [a0 + 2] = 0\n   464: u8 [a0 + 1] = 0\n   467: u8 [a0 + 0] = 0\n   469: u64 [sp + 88] = 0\n   472: u64 [sp + 64] = 0\n   475: u64 [sp + 72] = 0\n   478: u64 [sp + 80] = 0\n   481: i32 a0 = sp + 0x40\n   484: ecalli 16 // 'value_transferred'\n   486: fallthrough\n      : @16 (gas: 8)\n   487: a0 = u64 [sp + 0x50]\n   490: a1 = u64 [sp + 0x58]\n   493: a2 = u64 [sp + 0x48]\n   496: a3 = u64 [sp + 0x40]\n   499: a1 = a1 | a2\n   502: a0 = a0 | a3\n   505: a0 = a0 | a1\n   508: jump @21 if a0 != 0\n      : @17 (gas: 38)\n   512: a0 = sp + 0x20\n   515: ra = 0xa\n   518: sp = sp + 0xffffffffffffff90\n   521: u64 [sp + 0x68] = ra\n   524: u64 [sp + 0x60] = s0\n   527: u64 [sp + 0x58] = s1\n   530: s0 = sp + 0x70\n   533: sp = sp & 0xfffffffffffffff0\n   536: s1 = i32 [0x20024]\n   541: u64 [sp + 0x8] = a0\n   544: a0 = s1 << 0x20\n   547: a0 = a0 >> 0x20\n   550: u64 [sp + 40] = 0\n   553: u64 [sp + 32] = 0\n   556: u64 [sp + 0x10] = a0\n   559: a0 = sp + 0x30\n   562: a1 = sp + 0x10\n   565: u64 [sp + 24] = 0\n   568: ra = 0x2e\n   571: sp = sp + 0xffffffffffffff60\n   575: u64 [sp + 0x98] = ra\n   579: u64 [sp + 0x90] = s0\n   583: u64 [sp + 0x88] = s1\n   587: s0 = sp + 0xa0\n   591: sp = sp & 0xfffffffffffffff0\n   594: a2 = u64 [a1 + 0x18]\n   597: u64 [sp + 0x30] = a2\n   600: a2 = u64 [a1 + 0x10]\n   603: u64 [sp + 0x28] = a2\n   606: a2 = u64 [a1 + 0x8]\n   609: u64 [sp + 0x20] = a2\n   612: a1 = u64 [a1]\n   614: u64 [sp + 0x18] = a1\n   617: u64 [sp + 0x38] = a0\n   620: a0 = 0x40\n   623: a1 = 0x20\n   626: ra = 0x22\n   629: jump @0\n      : @18 [@dyn 5] (gas: 75)\n   632: a0 = u64 [sp + 0x20]\n   635: u64 [sp + 0x18] = a0\n   638: a0 = u64 [sp + 0x28]\n   641: u64 [sp + 0x10] = a0\n   644: a0 = u32 [sp + 0x30]\n   647: u64 [sp + 0x8] = a0\n   650: u64 [sp + 152] = 0\n   654: u64 [sp + 144] = 0\n   658: u64 [sp + 136] = 0\n   662: s1 = 0x1\n   665: u64 [sp + 0x80] = s1\n   669: u64 [sp + 184] = 0\n   673: u64 [sp + 176] = 0\n   677: u64 [sp + 168] = 0\n   681: u64 [sp + 160] = 0\n   685: u32 [sp + 96] = 0x20\n   689: i32 a1 = sp + 0x80\n   693: i32 a3 = sp + 0xa0\n   697: i32 a4 = sp + 0x60\n   700: a2 = 0xffffffffffffffff\n   703: a0 = 0\n   705: ecalli 7 // 'get_storage'\n   707: u64 [sp + 152] = 0\n   711: u64 [sp + 144] = 0\n   715: u64 [sp + 136] = 0\n   719: u64 [sp + 0x80] = s1\n   723: u64 [sp + 184] = 0\n   727: u64 [sp + 176] = 0\n   731: u64 [sp + 168] = 0\n   735: u64 [sp + 160] = 0x5\n   740: i32 a1 = sp + 0x80\n   744: i32 a3 = sp + 0xa0\n   748: a2 = 0xffffffffffffffff\n   751: a4 = 0x20\n   754: a0 = 0\n   756: ecalli 15 // 'set_storage'\n   758: u64 [sp + 152] = 0\n   762: u64 [sp + 144] = 0\n   766: u64 [sp + 136] = 0\n   770: u64 [sp + 128] = 0\n   774: u64 [sp + 184] = 0\n   778: u64 [sp + 176] = 0\n   782: u64 [sp + 168] = 0\n   786: u64 [sp + 160] = 0\n   790: u32 [sp + 96] = 0x20\n   794: i32 a1 = sp + 0x80\n   798: i32 a3 = sp + 0xa0\n   802: i32 a4 = sp + 0x60\n   805: a2 = 0xffffffffffffffff\n   808: a0 = 0\n   810: ecalli 7 // 'get_storage'\n   812: a0 = u32 [sp + 0xb4]\n   816: a0 = a0 << 0x20\n   819: a1 = u64 [sp + 0xb8]\n   823: a2 = u64 [sp + 0x8]\n   826: a0 = a0 | a2\n   829: u64 [sp + 152] = 0\n   833: u64 [sp + 144] = 0\n   837: u64 [sp + 136] = 0\n   841: u64 [sp + 128] = 0\n   845: u64 [sp + 0xb8] = a1\n   849: u64 [sp + 0xb0] = a0\n   853: a0 = u64 [sp + 0x10]\n   856: u64 [sp + 0xa8] = a0\n   860: a0 = u64 [sp + 0x18]\n   863: u64 [sp + 0xa0] = a0\n   867: i32 a1 = sp + 0x80\n   871: i32 a3 = sp + 0xa0\n   875: a2 = 0xffffffffffffffff\n   878: a4 = 0x20\n   881: a0 = 0\n   883: ecalli 15 // 'set_storage'\n   885: a0 = 0x40\n   888: a1 = 0x20\n   891: ra = 12, jump @0\n      : @19 [@dyn 6] (gas: 100)\n   896: a1 = u8 [a0 + 0x11]\n   899: a2 = u8 [a0 + 0x10]\n   902: a3 = u8 [a0 + 0x12]\n   905: a4 = u8 [a0 + 0x13]\n   908: a1 = a1 << 0x8\n   911: a1 = a1 | a2\n   914: a3 = a3 << 0x10\n   917: a4 = a4 << 0x18\n   920: a3 = a3 | a4\n   923: a1 = a1 | a3\n   926: a2 = u8 [a0 + 0x15]\n   929: a3 = u8 [a0 + 0x14]\n   932: a4 = u8 [a0 + 0x16]\n   935: a5 = u8 [a0 + 0x17]\n   938: a2 = a2 << 0x8\n   941: a2 = a2 | a3\n   944: a4 = a4 << 0x10\n   947: a5 = a5 << 0x18\n   950: a4 = a4 | a5\n   953: a2 = a2 | a4\n   956: a2 = a2 << 0x20\n   959: t0 = a2 | a1\n   962: a2 = u8 [a0 + 0x1]\n   965: a3 = u8 [a0]\n   967: a4 = u8 [a0 + 0x2]\n   970: a5 = u8 [a0 + 0x3]\n   973: a2 = a2 << 0x8\n   976: a2 = a2 | a3\n   979: a4 = a4 << 0x10\n   982: a5 = a5 << 0x18\n   985: a4 = a4 | a5\n   988: a2 = a2 | a4\n   991: a3 = u8 [a0 + 0x5]\n   994: a4 = u8 [a0 + 0x4]\n   997: a5 = u8 [a0 + 0x6]\n  1000: s1 = u8 [a0 + 0x7]\n  1003: a3 = a3 << 0x8\n  1006: a3 = a3 | a4\n  1009: a5 = a5 << 0x10\n  1012: s1 = s1 << 0x18\n  1015: a5 = a5 | s1\n  1018: a3 = a3 | a5\n  1021: a3 = a3 << 0x20\n  1024: a2 = a2 | a3\n  1027: a3 = u8 [a0 + 0x19]\n  1030: a4 = u8 [a0 + 0x18]\n  1033: a5 = u8 [a0 + 0x1a]\n  1036: s1 = u8 [a0 + 0x1b]\n  1039: a3 = a3 << 0x8\n  1042: a3 = a3 | a4\n  1045: a5 = a5 << 0x10\n  1048: s1 = s1 << 0x18\n  1051: a5 = a5 | s1\n  1054: a3 = a3 | a5\n  1057: a4 = u8 [a0 + 0x1d]\n  1060: a5 = u8 [a0 + 0x1c]\n  1063: s1 = u8 [a0 + 0x1e]\n  1066: a1 = u8 [a0 + 0x1f]\n  1069: a4 = a4 << 0x8\n  1072: a4 = a4 | a5\n  1075: s1 = s1 << 0x10\n  1078: a1 = a1 << 0x18\n  1081: a1 = a1 | s1\n  1084: a1 = a1 | a4\n  1087: a1 = a1 << 0x20\n  1090: a3 = a3 | a1\n  1093: a1 = u8 [a0 + 0x9]\n  1096: a4 = u8 [a0 + 0x8]\n  1099: a5 = u8 [a0 + 0xa]\n  1102: s1 = u8 [a0 + 0xb]\n  1105: a1 = a1 << 0x8\n  1108: a1 = a1 | a4\n  1111: a5 = a5 << 0x10\n  1114: s1 = s1 << 0x18\n  1117: a5 = a5 | s1\n  1120: a1 = a1 | a5\n  1123: a4 = u8 [a0 + 0xd]\n  1126: a5 = u8 [a0 + 0xc]\n  1129: s1 = u8 [a0 + 0xe]\n  1132: a0 = u8 [a0 + 0xf]\n  1135: a4 = a4 << 0x8\n  1138: a4 = a4 | a5\n  1141: s1 = s1 << 0x10\n  1144: a0 = a0 << 0x18\n  1147: a0 = a0 | s1\n  1150: a0 = a0 | a4\n  1153: a0 = a0 << 0x20\n  1156: a0 = a0 | a1\n  1159: a0 = reverse a0\n  1161: s1 = reverse a3\n  1163: a1 = reverse a2\n  1165: a2 = reverse t0\n  1167: a1 = a1 | a2\n  1170: a2 = s1 | a0\n  1173: a2 = a2 | a1\n  1176: a2 = a2 >> 0x20\n  1179: a0 = a0 | a1\n  1182: a0 = a0 << 0x20\n  1185: a0 = a0 | a2\n  1188: jump @23 if a0 == 0\n      : @20 (gas: 1)\n  1191: trap\n      : @21 (gas: 3)\n  1192: a0 = 0\n  1194: a1 = 0\n  1196: ra = 14, jump @0\n      : @22 [@dyn 7] (gas: 5)\n  1201: i32 a1 = a0 + 0\n  1203: a0 = 0x1\n  1206: a2 = 0\n  1208: ecalli 13 // 'seal_return'\n  1210: fallthrough\n      : @23 (gas: 4)\n  1211: i32 s1 = s1 + 0\n  1213: a0 = s1\n  1215: a1 = 0\n  1217: ra = 16, jump @0\n      : @24 [@dyn 8] (gas: 5)\n  1222: i32 a0 = a0 + 0\n  1224: a1 = 0\n  1226: a2 = 0\n  1228: ecalli 1 // 'call_data_copy'\n  1230: fallthrough\n      : @25 (gas: 2)\n  1231: a1 = i32 [0x20028]\n  1236: jump @27 if a1 == 0\n      : @26 (gas: 4)\n  1239: a0 = 0x30030\n  1244: i32 a0 = a0 + 0\n  1246: ecalli 14 // 'set_immutable_data'\n  1248: fallthrough\n      : @27 (gas: 3)\n  1249: a0 = s1\n  1251: a1 = 0\n  1253: ra = 18, jump @0\n      : @28 [@dyn 9] (gas: 6)\n  1258: i32 a1 = a0 + 0\n  1260: a0 = 0\n  1262: a2 = 0\n  1264: ra = 0x14\n  1267: ecalli 13 // 'seal_return'\n  1269: fallthrough\n      : @29 [@dyn 10] (gas: 8)\n  1270: sp = sp + 0xffffffffffffffc0\n  1273: u64 [sp + 0x38] = ra\n  1276: u64 [sp + 0x30] = s0\n  1279: s0 = sp + 0x40\n  1282: sp = sp & 0xffffffffffffffe0\n  1285: a0 = 0x40\n  1288: a1 = 0x20\n  1291: ra = 22, jump @0\n      : @30 [@dyn 11] (gas: 34)\n  1296: u8 [a0 + 31] = 0x80\n  1301: u8 [a0 + 30] = 0\n  1304: u8 [a0 + 29] = 0\n  1307: u8 [a0 + 28] = 0\n  1310: u8 [a0 + 27] = 0\n  1313: u8 [a0 + 26] = 0\n  1316: u8 [a0 + 25] = 0\n  1319: u8 [a0 + 24] = 0\n  1322: u8 [a0 + 23] = 0\n  1325: u8 [a0 + 22] = 0\n  1328: u8 [a0 + 21] = 0\n  1331: u8 [a0 + 20] = 0\n  1334: u8 [a0 + 19] = 0\n  1337: u8 [a0 + 18] = 0\n  1340: u8 [a0 + 17] = 0\n  1343: u8 [a0 + 16] = 0\n  1346: u8 [a0 + 15] = 0\n  1349: u8 [a0 + 14] = 0\n  1352: u8 [a0 + 13] = 0\n  1355: u8 [a0 + 12] = 0\n  1358: u8 [a0 + 11] = 0\n  1361: u8 [a0 + 10] = 0\n  1364: u8 [a0 + 9] = 0\n  1367: u8 [a0 + 8] = 0\n  1370: u8 [a0 + 7] = 0\n  1373: u8 [a0 + 3] = 0\n  1376: u8 [a0 + 2] = 0\n  1379: u8 [a0 + 1] = 0\n  1382: u8 [a0 + 0] = 0\n  1384: a1 = i32 [0x20024]\n  1389: u8 [a0 + 6] = 0\n  1392: u8 [a0 + 5] = 0\n  1395: u8 [a0 + 4] = 0\n  1398: jump @36 if a1 <u 4\n      : @31 (gas: 4)\n  1402: i32 a0 = sp + 0\n  1404: a1 = 0\n  1406: ecalli 2 // 'call_data_load'\n  1408: fallthrough\n      : @32 (gas: 2)\n  1409: a0 = i32 [sp + 0x1c]\n  1412: jump @38 if a0 == 251016457\n      : @33 (gas: 1)\n  1419: jump @37 if a0 == 366291548\n      : @34 (gas: 1)\n  1426: jump @36 if a0 != 367849362\n      : @35 (gas: 13)\n  1433: ra = 0x18\n  1436: sp = sp + 0xffffffffffffffc0\n  1439: u64 [sp + 0x38] = ra\n  1442: u64 [sp + 0x30] = s0\n  1445: s0 = sp + 0x40\n  1448: sp = sp & 0xffffffffffffffe0\n  1451: u64 [sp + 24] = 0\n  1454: u64 [sp + 16] = 0\n  1457: u64 [sp + 8] = 0\n  1460: u64 [sp + 0] = 0\n  1462: i32 a0 = sp + 0\n  1464: ecalli 16 // 'value_transferred'\n  1466: jump @83\n      : @36 [@dyn 12] (gas: 7)\n  1469: ra = 0x1a\n  1472: sp = sp + 0xfffffffffffffff8\n  1475: u64 [sp] = ra\n  1477: a0 = 0\n  1479: a1 = 0\n  1481: ra = 0x56\n  1484: jump @0\n      : @37 [@dyn 13] (gas: 14)\n  1487: ra = 0x1c\n  1490: sp = sp + 0xffffffffffffff60\n  1494: u64 [sp + 0x98] = ra\n  1498: u64 [sp + 0x90] = s0\n  1502: u64 [sp + 0x88] = s1\n  1506: s0 = sp + 0xa0\n  1510: sp = sp & 0xffffffffffffffe0\n  1513: u64 [sp + 56] = 0\n  1516: u64 [sp + 48] = 0\n  1519: u64 [sp + 40] = 0\n  1522: u64 [sp + 32] = 0\n  1525: i32 a0 = sp + 0x20\n  1528: ecalli 16 // 'value_transferred'\n  1530: jump @72\n      : @38 [@dyn 14] (gas: 14)\n  1533: ra = 0x1e\n  1536: sp = sp + 0xffffffffffffff60\n  1540: u64 [sp + 0x98] = ra\n  1544: u64 [sp + 0x90] = s0\n  1548: u64 [sp + 0x88] = s1\n  1552: s0 = sp + 0xa0\n  1556: sp = sp & 0xffffffffffffffe0\n  1559: u64 [sp + 56] = 0\n  1562: u64 [sp + 48] = 0\n  1565: u64 [sp + 40] = 0\n  1568: u64 [sp + 32] = 0\n  1571: i32 a0 = sp + 0x20\n  1574: ecalli 16 // 'value_transferred'\n  1576: jump @61\n      : @39 [@dyn 15] (gas: 7)\n  1579: sp = sp + 0xfffffffffffffff0\n  1582: u64 [sp + 0x8] = ra\n  1585: u64 [sp] = s0\n  1587: s0 = a0\n  1589: a0 = 0x40\n  1592: a1 = 0x20\n  1595: ra = 32, jump @0\n      : @40 [@dyn 16] (gas: 100)\n  1600: a1 = u8 [a0 + 0x1]\n  1603: a2 = u8 [a0]\n  1605: a3 = u8 [a0 + 0x2]\n  1608: a4 = u8 [a0 + 0x3]\n  1611: a1 = a1 << 0x8\n  1614: a1 = a1 | a2\n  1617: a3 = a3 << 0x10\n  1620: a4 = a4 << 0x18\n  1623: a3 = a3 | a4\n  1626: a1 = a1 | a3\n  1629: a2 = u8 [a0 + 0x5]\n  1632: a3 = u8 [a0 + 0x4]\n  1635: a4 = u8 [a0 + 0x6]\n  1638: a5 = u8 [a0 + 0x7]\n  1641: a2 = a2 << 0x8\n  1644: a2 = a2 | a3\n  1647: a4 = a4 << 0x10\n  1650: a5 = a5 << 0x18\n  1653: a4 = a4 | a5\n  1656: a2 = a2 | a4\n  1659: a2 = a2 << 0x20\n  1662: t0 = a2 | a1\n  1665: a2 = u8 [a0 + 0x9]\n  1668: a3 = u8 [a0 + 0x8]\n  1671: a4 = u8 [a0 + 0xa]\n  1674: a5 = u8 [a0 + 0xb]\n  1677: a2 = a2 << 0x8\n  1680: a2 = a2 | a3\n  1683: a4 = a4 << 0x10\n  1686: a5 = a5 << 0x18\n  1689: a4 = a4 | a5\n  1692: a2 = a2 | a4\n  1695: a3 = u8 [a0 + 0xd]\n  1698: a4 = u8 [a0 + 0xc]\n  1701: a5 = u8 [a0 + 0xe]\n  1704: a1 = u8 [a0 + 0xf]\n  1707: a3 = a3 << 0x8\n  1710: a3 = a3 | a4\n  1713: a5 = a5 << 0x10\n  1716: a1 = a1 << 0x18\n  1719: a1 = a1 | a5\n  1722: a1 = a1 | a3\n  1725: a1 = a1 << 0x20\n  1728: t1 = a1 | a2\n  1731: a1 = u8 [a0 + 0x11]\n  1734: a3 = u8 [a0 + 0x10]\n  1737: a4 = u8 [a0 + 0x12]\n  1740: a5 = u8 [a0 + 0x13]\n  1743: a1 = a1 << 0x8\n  1746: a1 = a1 | a3\n  1749: a4 = a4 << 0x10\n  1752: a5 = a5 << 0x18\n  1755: a4 = a4 | a5\n  1758: a1 = a1 | a4\n  1761: a3 = u8 [a0 + 0x15]\n  1764: a4 = u8 [a0 + 0x14]\n  1767: a5 = u8 [a0 + 0x16]\n  1770: a2 = u8 [a0 + 0x17]\n  1773: a3 = a3 << 0x8\n  1776: a3 = a3 | a4\n  1779: a5 = a5 << 0x10\n  1782: a2 = a2 << 0x18\n  1785: a2 = a2 | a5\n  1788: a2 = a2 | a3\n  1791: a2 = a2 << 0x20\n  1794: a3 = a2 | a1\n  1797: a1 = u8 [a0 + 0x19]\n  1800: a2 = u8 [a0 + 0x18]\n  1803: a4 = u8 [a0 + 0x1a]\n  1806: a5 = u8 [a0 + 0x1b]\n  1809: a1 = a1 << 0x8\n  1812: a1 = a1 | a2\n  1815: a4 = a4 << 0x10\n  1818: a5 = a5 << 0x18\n  1821: a4 = a4 | a5\n  1824: a1 = a1 | a4\n  1827: a2 = u8 [a0 + 0x1d]\n  1830: a4 = u8 [a0 + 0x1c]\n  1833: a5 = u8 [a0 + 0x1e]\n  1836: a0 = u8 [a0 + 0x1f]\n  1839: a2 = a2 << 0x8\n  1842: a2 = a2 | a4\n  1845: a5 = a5 << 0x10\n  1848: a0 = a0 << 0x18\n  1851: a0 = a0 | a5\n  1854: a0 = a0 | a2\n  1857: a0 = a0 << 0x20\n  1860: a0 = a0 | a1\n  1863: a0 = reverse a0\n  1865: a1 = reverse a3\n  1867: a2 = reverse t1\n  1869: a3 = reverse t0\n  1871: u64 [s0 + 0x18] = a3\n  1874: u64 [s0 + 0x10] = a2\n  1877: u64 [s0 + 0x8] = a1\n  1880: u64 [s0] = a0\n  1882: ra = u64 [sp + 0x8]\n  1885: s0 = u64 [sp]\n  1887: sp = sp + 0x10\n  1890: ret\n      : @41 [@dyn 17] (gas: 130)\n  1892: a1 = u8 [a0 + 0x19]\n  1895: a2 = u8 [a0 + 0x18]\n  1898: a3 = u8 [a0 + 0x1a]\n  1901: a4 = u8 [a0 + 0x1b]\n  1904: a1 = a1 << 0x8\n  1907: a1 = a1 | a2\n  1910: a3 = a3 << 0x10\n  1913: a4 = a4 << 0x18\n  1916: a3 = a3 | a4\n  1919: a1 = a1 | a3\n  1922: a2 = u8 [a0 + 0x1d]\n  1925: a3 = u8 [a0 + 0x1c]\n  1928: a4 = u8 [a0 + 0x1e]\n  1931: a5 = u8 [a0 + 0x1f]\n  1934: a2 = a2 << 0x8\n  1937: a2 = a2 | a3\n  1940: a4 = a4 << 0x10\n  1943: a5 = a5 << 0x18\n  1946: a4 = a4 | a5\n  1949: a2 = a2 | a4\n  1952: a2 = a2 << 0x20\n  1955: t0 = a2 | a1\n  1958: a2 = u8 [a0 + 0x11]\n  1961: a3 = u8 [a0 + 0x10]\n  1964: a4 = u8 [a0 + 0x12]\n  1967: a5 = u8 [a0 + 0x13]\n  1970: a2 = a2 << 0x8\n  1973: a2 = a2 | a3\n  1976: a4 = a4 << 0x10\n  1979: a5 = a5 << 0x18\n  1982: a4 = a4 | a5\n  1985: a2 = a2 | a4\n  1988: a3 = u8 [a0 + 0x15]\n  1991: a4 = u8 [a0 + 0x14]\n  1994: a5 = u8 [a0 + 0x16]\n  1997: s1 = u8 [a0 + 0x17]\n  2000: a3 = a3 << 0x8\n  2003: a3 = a3 | a4\n  2006: a5 = a5 << 0x10\n  2009: s1 = s1 << 0x18\n  2012: a5 = a5 | s1\n  2015: a3 = a3 | a5\n  2018: a3 = a3 << 0x20\n  2021: a2 = a2 | a3\n  2024: a3 = u8 [a0 + 0x9]\n  2027: a4 = u8 [a0 + 0x8]\n  2030: a5 = u8 [a0 + 0xa]\n  2033: s1 = u8 [a0 + 0xb]\n  2036: a3 = a3 << 0x8\n  2039: a3 = a3 | a4\n  2042: a5 = a5 << 0x10\n  2045: s1 = s1 << 0x18\n  2048: a5 = a5 | s1\n  2051: a3 = a3 | a5\n  2054: a4 = u8 [a0 + 0xd]\n  2057: a5 = u8 [a0 + 0xc]\n  2060: s1 = u8 [a0 + 0xe]\n  2063: a1 = u8 [a0 + 0xf]\n  2066: a4 = a4 << 0x8\n  2069: a4 = a4 | a5\n  2072: s1 = s1 << 0x10\n  2075: a1 = a1 << 0x18\n  2078: a1 = a1 | s1\n  2081: a1 = a1 | a4\n  2084: a1 = a1 << 0x20\n  2087: a3 = a3 | a1\n  2090: a1 = u8 [a0 + 0x1]\n  2093: a4 = u8 [a0]\n  2095: a5 = u8 [a0 + 0x2]\n  2098: s1 = u8 [a0 + 0x3]\n  2101: a1 = a1 << 0x8\n  2104: a1 = a1 | a4\n  2107: a5 = a5 << 0x10\n  2110: s1 = s1 << 0x18\n  2113: a5 = a5 | s1\n  2116: a1 = a1 | a5\n  2119: a4 = u8 [a0 + 0x5]\n  2122: a5 = u8 [a0 + 0x4]\n  2125: s1 = u8 [a0 + 0x6]\n  2128: a0 = u8 [a0 + 0x7]\n  2131: a4 = a4 << 0x8\n  2134: a4 = a4 | a5\n  2137: s1 = s1 << 0x10\n  2140: a0 = a0 << 0x18\n  2143: a0 = a0 | s1\n  2146: a0 = a0 | a4\n  2149: a0 = a0 << 0x20\n  2152: a0 = a0 | a1\n  2155: t1 = reverse a0\n  2157: t2 = reverse a3\n  2159: s1 = reverse a2\n  2161: a5 = reverse t0\n  2163: a1 = u64 [sp + 0x18]\n  2166: a0 = a1 + 0x1f\n  2169: a1 = a0 <u a1\n  2172: a3 = u64 [sp + 0x20]\n  2175: a2 = a3 + a1\n  2178: a3 = a2 <u a3\n  2181: a3 = a1 if a1 == 0\n  2184: a1 = u64 [sp + 0x28]\n  2187: a3 = a3 + a1\n  2190: a1 = a3 <u a1\n  2193: a4 = u64 [sp + 0x30]\n  2196: a1 = a1 + a4\n  2199: a0 = a0 & 0xffffffffffffffe0\n  2202: a0 = a0 + a5\n  2205: u64 [sp + 0x28] = a5\n  2208: u64 [sp + 0x10] = a0\n  2211: a4 = a0 <u a5\n  2214: a2 = a2 + s1\n  2217: a5 = a2 + a4\n  2220: a2 = a5 ^ s1\n  2223: u64 [sp + 0x30] = s1\n  2226: a0 = a5 <u s1\n  2229: a0 = a4 if a2 == 0\n  2232: a3 = a3 + t2\n  2235: a4 = a3 + a0\n  2238: s1 = a4 <u a3\n  2241: a2 = a3 <u t2\n  2244: a1 = a1 + t1\n  2247: a1 = a1 + a2\n  2250: s1 = s1 + a1\n  2253: a1 = a4 >u 0\n  2255: a2 = s1 >u 0\n  2257: a2 = a1 if s1 == 0\n  2260: a1 = a4 | s1\n  2263: u64 [sp + 0x8] = a5\n  2266: a3 = a5 >u 0\n  2268: a3 = a2 if a1 != 0\n  2271: jump @45 if a3 != 0\n      : @42 (gas: 8)\n  2275: a1 = a4 <u t2\n  2278: a2 = s1 ^ t1\n  2281: a3 = s1 <u t1\n  2284: a3 = a1 if a2 == 0\n  2287: a1 = a4 ^ t2\n  2290: a1 = a1 | a2\n  2293: a0 = a3 if a1 != 0\n  2296: jump @45 if a0 != 0\n      : @43 (gas: 6)\n  2300: a0 = 0x40\n  2303: a1 = 0x20\n  2306: u64 [sp + 0x20] = t2\n  2309: u64 [sp + 0x18] = t1\n  2312: u64 [sp] = a4\n  2314: ra = 36, jump @0\n      : @44 [@dyn 18] (gas: 82)\n  2319: a1 = reverse s1\n  2321: a2 = u64 [sp]\n  2323: a2 = reverse a2\n  2325: a3 = u64 [sp + 0x8]\n  2328: a3 = reverse a3\n  2330: a4 = u64 [sp + 0x10]\n  2333: a4 = reverse a4\n  2335: u8 [a0 + 0x18] = a4\n  2338: a5 = a4 >> 0x38\n  2341: u8 [a0 + 0x1f] = a5\n  2344: a5 = a4 >> 0x30\n  2347: u8 [a0 + 0x1e] = a5\n  2350: a5 = a4 >> 0x28\n  2353: u8 [a0 + 0x1d] = a5\n  2356: a5 = a4 >> 0x20\n  2359: u8 [a0 + 0x1c] = a5\n  2362: a5 = a4 >> 0x18\n  2365: u8 [a0 + 0x1b] = a5\n  2368: a5 = a4 >> 0x10\n  2371: u8 [a0 + 0x1a] = a5\n  2374: a4 = a4 >> 0x8\n  2377: u8 [a0 + 0x19] = a4\n  2380: u8 [a0 + 0x10] = a3\n  2383: a4 = a3 >> 0x38\n  2386: u8 [a0 + 0x17] = a4\n  2389: a4 = a3 >> 0x30\n  2392: u8 [a0 + 0x16] = a4\n  2395: a4 = a3 >> 0x28\n  2398: u8 [a0 + 0x15] = a4\n  2401: a4 = a3 >> 0x20\n  2404: u8 [a0 + 0x14] = a4\n  2407: a4 = a3 >> 0x18\n  2410: u8 [a0 + 0x13] = a4\n  2413: a4 = a3 >> 0x10\n  2416: u8 [a0 + 0x12] = a4\n  2419: a3 = a3 >> 0x8\n  2422: u8 [a0 + 0x11] = a3\n  2425: u8 [a0 + 0x8] = a2\n  2428: a3 = a2 >> 0x38\n  2431: u8 [a0 + 0xf] = a3\n  2434: a3 = a2 >> 0x30\n  2437: u8 [a0 + 0xe] = a3\n  2440: a3 = a2 >> 0x28\n  2443: u8 [a0 + 0xd] = a3\n  2446: a3 = a2 >> 0x20\n  2449: u8 [a0 + 0xc] = a3\n  2452: a3 = a2 >> 0x18\n  2455: u8 [a0 + 0xb] = a3\n  2458: a3 = a2 >> 0x10\n  2461: u8 [a0 + 0xa] = a3\n  2464: a2 = a2 >> 0x8\n  2467: u8 [a0 + 0x9] = a2\n  2470: u8 [a0] = a1\n  2472: a2 = a1 >> 0x38\n  2475: u8 [a0 + 0x7] = a2\n  2478: a2 = a1 >> 0x30\n  2481: u8 [a0 + 0x6] = a2\n  2484: a2 = a1 >> 0x28\n  2487: u8 [a0 + 0x5] = a2\n  2490: a2 = a1 >> 0x20\n  2493: u8 [a0 + 0x4] = a2\n  2496: a2 = a1 >> 0x18\n  2499: u8 [a0 + 0x3] = a2\n  2502: a2 = a1 >> 0x10\n  2505: u8 [a0 + 0x2] = a2\n  2508: a1 = a1 >> 0x8\n  2511: u8 [a0 + 0x1] = a1\n  2514: a0 = u64 [sp + 0x38]\n  2517: a1 = u64 [sp + 0x28]\n  2520: u64 [a0] = a1\n  2522: a1 = u64 [sp + 0x18]\n  2525: u64 [a0 + 0x18] = a1\n  2528: a1 = u64 [sp + 0x30]\n  2531: u64 [a0 + 0x8] = a1\n  2534: a1 = u64 [sp + 0x20]\n  2537: u64 [a0 + 0x10] = a1\n  2540: sp = s0 + 0xffffffffffffff60\n  2544: ra = u64 [sp + 0x98]\n  2548: s0 = u64 [sp + 0x90]\n  2552: s1 = u64 [sp + 0x88]\n  2556: sp = sp + 0xa0\n  2560: ret\n      : @45 (gas: 8)\n  2562: u64 [sp + 112] = 0\n  2565: u64 [sp + 104] = 0\n  2568: u64 [sp + 96] = 0\n  2571: a0 = 0x4e487b7100000000\n  2581: a1 = sp + 0x60\n  2584: u64 [sp + 0x78] = a0\n  2587: a0 = 0\n  2589: ra = 38, jump @8\n      : @46 [@dyn 19] (gas: 7)\n  2594: u64 [sp + 88] = 0\n  2597: u64 [sp + 80] = 0\n  2600: u64 [sp + 64] = 0x41\n  2604: a0 = 0x4\n  2607: a1 = sp + 0x40\n  2610: u64 [sp + 72] = 0\n  2613: ra = 40, jump @8\n      : @47 [@dyn 20] (gas: 3)\n  2618: a1 = 0x24\n  2621: a0 = 0\n  2623: ra = 42, jump @0\n      : @48 [@dyn 21] (gas: 6)\n  2628: i32 a1 = a0 + 0\n  2630: a0 = 0x1\n  2633: a2 = 0x24\n  2636: ra = 0x2c\n  2639: ecalli 13 // 'seal_return'\n  2641: fallthrough\n      : @49 [@dyn 22] (gas: 8)\n  2642: a2 = u32 [a1 + 0x10]\n  2645: a3 = u64 [a1 + 0x8]\n  2648: a1 = u64 [a1]\n  2650: u64 [a0 + 24] = 0\n  2653: u64 [a0 + 0x10] = a2\n  2656: u64 [a0 + 0x8] = a3\n  2659: u64 [a0] = a1\n  2661: ret\n      : @50 [@dyn 23] (gas: 12)\n  2663: a1 = u64 [sp + 0x48]\n  2666: a2 = u64 [sp + 0x40]\n  2669: a3 = u64 [sp + 0x38]\n  2672: a0 = u64 [sp + 0x30]\n  2675: a1 = a1 | a3\n  2678: a3 = a0 | a2\n  2681: a3 = a3 | a1\n  2684: a3 = a3 >> 0x20\n  2687: a1 = a1 | a2\n  2690: a1 = a1 << 0x20\n  2693: a1 = a1 | a3\n  2696: jump @57 if a1 != 0\n      : @51 (gas: 4)\n  2700: i32 a0 = a0 + 0\n  2702: u64 [sp] = a0\n  2704: a1 = s1\n  2706: ra = 48, jump @0\n      : @52 [@dyn 24] (gas: 5)\n  2711: i32 a0 = a0 + 0\n  2713: a1 = s1\n  2715: a2 = 0\n  2717: ecalli 1 // 'call_data_copy'\n  2719: fallthrough\n      : @53 (gas: 1)\n  2720: jump @58 if s1 <=u 31\n      : @54 (gas: 3)\n  2725: a1 = 0x20\n  2728: a0 = u64 [sp]\n  2730: ra = 50, jump @0\n      : @55 [@dyn 25] (gas: 54)\n  2735: a1 = u8 [a0 + 0x9]\n  2738: a2 = u8 [a0 + 0x8]\n  2741: a3 = u8 [a0 + 0xa]\n  2744: a4 = u8 [a0 + 0xb]\n  2747: a1 = a1 << 0x8\n  2750: a1 = a1 | a2\n  2753: a3 = a3 << 0x10\n  2756: a4 = a4 << 0x18\n  2759: a3 = a3 | a4\n  2762: a1 = a1 | a3\n  2765: a2 = u8 [a0 + 0xd]\n  2768: a3 = u8 [a0 + 0xc]\n  2771: a4 = u8 [a0 + 0xe]\n  2774: a5 = u8 [a0 + 0xf]\n  2777: a2 = a2 << 0x8\n  2780: a2 = a2 | a3\n  2783: a4 = a4 << 0x10\n  2786: a5 = a5 << 0x18\n  2789: a4 = a4 | a5\n  2792: a2 = a2 | a4\n  2795: a2 = a2 << 0x20\n  2798: a2 = a2 | a1\n  2801: a1 = u8 [a0 + 0x1]\n  2804: a3 = u8 [a0]\n  2806: a4 = u8 [a0 + 0x2]\n  2809: a5 = u8 [a0 + 0x3]\n  2812: a1 = a1 << 0x8\n  2815: a1 = a1 | a3\n  2818: a4 = a4 << 0x10\n  2821: a5 = a5 << 0x18\n  2824: a4 = a4 | a5\n  2827: a1 = a1 | a4\n  2830: a3 = u8 [a0 + 0x5]\n  2833: a4 = u8 [a0 + 0x4]\n  2836: a5 = u8 [a0 + 0x6]\n  2839: s1 = u8 [a0 + 0x7]\n  2842: a3 = a3 << 0x8\n  2845: a3 = a3 | a4\n  2848: a5 = a5 << 0x10\n  2851: s1 = s1 << 0x18\n  2854: a5 = a5 | s1\n  2857: a3 = a3 | a5\n  2860: a3 = a3 << 0x20\n  2863: a1 = a1 | a3\n  2866: t0 = reverse a1\n  2868: a2 = reverse a2\n  2870: a3 = 0x100000000\n  2880: a3 = a3 ^ a2\n  2883: a3 = a3 | t0\n  2886: a4 = a2 >> 0x20\n  2889: a4 = a4 <u 0x1\n  2892: a4 = 0 if t0 != 0\n  2894: a4 = 0 if a3 == 0\n  2896: jump @58 if a4 == 0\n      : @56 (gas: 57)\n  2900: a3 = u8 [a0 + 0x19]\n  2903: a4 = u8 [a0 + 0x18]\n  2906: a5 = u8 [a0 + 0x1a]\n  2909: s1 = u8 [a0 + 0x1b]\n  2912: a3 = a3 << 0x8\n  2915: a3 = a3 | a4\n  2918: a5 = a5 << 0x10\n  2921: s1 = s1 << 0x18\n  2924: a5 = a5 | s1\n  2927: a3 = a3 | a5\n  2930: a4 = u8 [a0 + 0x1d]\n  2933: a5 = u8 [a0 + 0x1c]\n  2936: s1 = u8 [a0 + 0x1e]\n  2939: a1 = u8 [a0 + 0x1f]\n  2942: a4 = a4 << 0x8\n  2945: a4 = a4 | a5\n  2948: s1 = s1 << 0x10\n  2951: a1 = a1 << 0x18\n  2954: a1 = a1 | s1\n  2957: a1 = a1 | a4\n  2960: a1 = a1 << 0x20\n  2963: a3 = a3 | a1\n  2966: a1 = u8 [a0 + 0x11]\n  2969: a4 = u8 [a0 + 0x10]\n  2972: a5 = u8 [a0 + 0x12]\n  2975: s1 = u8 [a0 + 0x13]\n  2978: a1 = a1 << 0x8\n  2981: a1 = a1 | a4\n  2984: a5 = a5 << 0x10\n  2987: s1 = s1 << 0x18\n  2990: a5 = a5 | s1\n  2993: a1 = a1 | a5\n  2996: a4 = u8 [a0 + 0x15]\n  2999: a5 = u8 [a0 + 0x14]\n  3002: s1 = u8 [a0 + 0x16]\n  3005: a0 = u8 [a0 + 0x17]\n  3008: a4 = a4 << 0x8\n  3011: a4 = a4 | a5\n  3014: s1 = s1 << 0x10\n  3017: a0 = a0 << 0x18\n  3020: a0 = a0 | s1\n  3023: a0 = a0 | a4\n  3026: a0 = a0 << 0x20\n  3029: a0 = a0 | a1\n  3032: a0 = reverse a0\n  3034: a1 = reverse a3\n  3036: a3 = u64 [sp + 0x8]\n  3039: u64 [a3] = a1\n  3041: u64 [a3 + 0x8] = a0\n  3044: u64 [a3 + 0x10] = a2\n  3047: u64 [a3 + 0x18] = t0\n  3050: sp = s0 + 0xffffffffffffff90\n  3053: ra = u64 [sp + 0x68]\n  3056: s0 = u64 [sp + 0x60]\n  3059: s1 = u64 [sp + 0x58]\n  3062: sp = sp + 0x70\n  3065: ret\n      : @57 (gas: 1)\n  3067: trap\n      : @58 (gas: 3)\n  3068: a0 = 0\n  3070: a1 = 0\n  3072: ra = 52, jump @0\n      : @59 [@dyn 26] (gas: 6)\n  3077: i32 a1 = a0 + 0\n  3079: a0 = 0x1\n  3082: a2 = 0\n  3084: ra = 0x36\n  3087: ecalli 13 // 'seal_return'\n  3089: fallthrough\n      : @60 [@dyn 27] (gas: 9)\n  3090: a2 = u64 [a1 + 0x18]\n  3093: a3 = u64 [a1 + 0x10]\n  3096: a4 = u64 [a1 + 0x8]\n  3099: a1 = u64 [a1]\n  3101: u64 [a0 + 0x18] = a2\n  3104: u64 [a0 + 0x10] = a3\n  3107: u64 [a0 + 0x8] = a4\n  3110: u64 [a0] = a1\n  3112: ret\n      : @61 (gas: 8)\n  3114: a0 = u64 [sp + 0x30]\n  3117: a1 = u64 [sp + 0x38]\n  3120: a2 = u64 [sp + 0x28]\n  3123: a3 = u64 [sp + 0x20]\n  3126: a1 = a1 | a2\n  3129: a0 = a0 | a3\n  3132: a0 = a0 | a1\n  3135: jump @66 if a0 != 0\n      : @62 (gas: 2)\n  3139: a0 = i32 [0x20024]\n  3144: jump @66 if a0 <=u 3\n      : @63 (gas: 26)\n  3149: u64 [sp + 88] = 0\n  3152: u64 [sp + 80] = 0\n  3155: u64 [sp + 72] = 0\n  3158: u64 [sp + 64] = 0x1\n  3162: u64 [sp + 120] = 0\n  3165: u64 [sp + 112] = 0\n  3168: u64 [sp + 104] = 0\n  3171: u64 [sp + 96] = 0\n  3174: u32 [sp + 128] = 0x20\n  3179: i32 a1 = sp + 0x40\n  3182: i32 a3 = sp + 0x60\n  3185: i32 a4 = sp + 0x80\n  3189: a2 = 0xffffffffffffffff\n  3192: a0 = 0\n  3194: ecalli 7 // 'get_storage'\n  3196: a0 = u64 [sp + 0x78]\n  3199: u64 [sp] = a0\n  3201: a0 = u64 [sp + 0x70]\n  3204: u64 [sp + 0x8] = a0\n  3207: a0 = u64 [sp + 0x68]\n  3210: u64 [sp + 0x10] = a0\n  3213: a0 = u64 [sp + 0x60]\n  3216: u64 [sp + 0x18] = a0\n  3219: a0 = 0x40\n  3222: a1 = 0x20\n  3225: ra = 56, jump @0\n      : @64 [@dyn 28] (gas: 100)\n  3230: a1 = u8 [a0 + 0x11]\n  3233: a2 = u8 [a0 + 0x10]\n  3236: a3 = u8 [a0 + 0x12]\n  3239: a4 = u8 [a0 + 0x13]\n  3242: a1 = a1 << 0x8\n  3245: a1 = a1 | a2\n  3248: a3 = a3 << 0x10\n  3251: a4 = a4 << 0x18\n  3254: a3 = a3 | a4\n  3257: a1 = a1 | a3\n  3260: a2 = u8 [a0 + 0x15]\n  3263: a3 = u8 [a0 + 0x14]\n  3266: a4 = u8 [a0 + 0x16]\n  3269: a5 = u8 [a0 + 0x17]\n  3272: a2 = a2 << 0x8\n  3275: a2 = a2 | a3\n  3278: a4 = a4 << 0x10\n  3281: a5 = a5 << 0x18\n  3284: a4 = a4 | a5\n  3287: a2 = a2 | a4\n  3290: a2 = a2 << 0x20\n  3293: t0 = a2 | a1\n  3296: a2 = u8 [a0 + 0x1]\n  3299: a3 = u8 [a0]\n  3301: a4 = u8 [a0 + 0x2]\n  3304: a5 = u8 [a0 + 0x3]\n  3307: a2 = a2 << 0x8\n  3310: a2 = a2 | a3\n  3313: a4 = a4 << 0x10\n  3316: a5 = a5 << 0x18\n  3319: a4 = a4 | a5\n  3322: a2 = a2 | a4\n  3325: a3 = u8 [a0 + 0x5]\n  3328: a4 = u8 [a0 + 0x4]\n  3331: a5 = u8 [a0 + 0x6]\n  3334: s1 = u8 [a0 + 0x7]\n  3337: a3 = a3 << 0x8\n  3340: a3 = a3 | a4\n  3343: a5 = a5 << 0x10\n  3346: s1 = s1 << 0x18\n  3349: a5 = a5 | s1\n  3352: a3 = a3 | a5\n  3355: a3 = a3 << 0x20\n  3358: a2 = a2 | a3\n  3361: a3 = u8 [a0 + 0x19]\n  3364: a4 = u8 [a0 + 0x18]\n  3367: a5 = u8 [a0 + 0x1a]\n  3370: s1 = u8 [a0 + 0x1b]\n  3373: a3 = a3 << 0x8\n  3376: a3 = a3 | a4\n  3379: a5 = a5 << 0x10\n  3382: s1 = s1 << 0x18\n  3385: a5 = a5 | s1\n  3388: a3 = a3 | a5\n  3391: a4 = u8 [a0 + 0x1d]\n  3394: a5 = u8 [a0 + 0x1c]\n  3397: s1 = u8 [a0 + 0x1e]\n  3400: a1 = u8 [a0 + 0x1f]\n  3403: a4 = a4 << 0x8\n  3406: a4 = a4 | a5\n  3409: s1 = s1 << 0x10\n  3412: a1 = a1 << 0x18\n  3415: a1 = a1 | s1\n  3418: a1 = a1 | a4\n  3421: a1 = a1 << 0x20\n  3424: a3 = a3 | a1\n  3427: a1 = u8 [a0 + 0x9]\n  3430: a4 = u8 [a0 + 0x8]\n  3433: a5 = u8 [a0 + 0xa]\n  3436: s1 = u8 [a0 + 0xb]\n  3439: a1 = a1 << 0x8\n  3442: a1 = a1 | a4\n  3445: a5 = a5 << 0x10\n  3448: s1 = s1 << 0x18\n  3451: a5 = a5 | s1\n  3454: a1 = a1 | a5\n  3457: a4 = u8 [a0 + 0xd]\n  3460: a5 = u8 [a0 + 0xc]\n  3463: s1 = u8 [a0 + 0xe]\n  3466: a0 = u8 [a0 + 0xf]\n  3469: a4 = a4 << 0x8\n  3472: a4 = a4 | a5\n  3475: s1 = s1 << 0x10\n  3478: a0 = a0 << 0x18\n  3481: a0 = a0 | s1\n  3484: a0 = a0 | a4\n  3487: a0 = a0 << 0x20\n  3490: a0 = a0 | a1\n  3493: a1 = reverse a0\n  3495: a0 = reverse a3\n  3497: a2 = reverse a2\n  3499: a3 = reverse t0\n  3501: a2 = a2 | a3\n  3504: a3 = a0 | a1\n  3507: a3 = a3 | a2\n  3510: a3 = a3 >> 0x20\n  3513: a1 = a1 | a2\n  3516: a1 = a1 << 0x20\n  3519: a1 = a1 | a3\n  3522: jump @68 if a1 == 0\n      : @65 (gas: 1)\n  3525: trap\n      : @66 (gas: 3)\n  3526: a0 = 0\n  3528: a1 = 0\n  3530: ra = 58, jump @0\n      : @67 [@dyn 29] (gas: 5)\n  3535: i32 a1 = a0 + 0\n  3537: a0 = 0x1\n  3540: a2 = 0\n  3542: ecalli 13 // 'seal_return'\n  3544: fallthrough\n      : @68 (gas: 4)\n  3545: i32 s1 = a0 + 0\n  3547: a1 = 0x20\n  3550: a0 = s1\n  3552: ra = 60, jump @0\n      : @69 [@dyn 30] (gas: 71)\n  3557: a1 = u64 [sp]\n  3559: a1 = reverse a1\n  3561: a2 = u64 [sp + 0x8]\n  3564: a2 = reverse a2\n  3566: a3 = u64 [sp + 0x10]\n  3569: a3 = reverse a3\n  3571: a4 = u64 [sp + 0x18]\n  3574: a4 = reverse a4\n  3576: a5 = a4 >> 0x38\n  3579: u8 [a0 + 0x1f] = a5\n  3582: a5 = a4 >> 0x30\n  3585: u8 [a0 + 0x1e] = a5\n  3588: a5 = a4 >> 0x28\n  3591: u8 [a0 + 0x1d] = a5\n  3594: a5 = a4 >> 0x20\n  3597: u8 [a0 + 0x1c] = a5\n  3600: a5 = a4 >> 0x18\n  3603: u8 [a0 + 0x1b] = a5\n  3606: a5 = a4 >> 0x10\n  3609: u8 [a0 + 0x1a] = a5\n  3612: a5 = a4 >> 0x8\n  3615: u8 [a0 + 0x19] = a5\n  3618: u8 [a0 + 0x18] = a4\n  3621: u8 [a0 + 0x10] = a3\n  3624: a4 = a3 >> 0x38\n  3627: u8 [a0 + 0x17] = a4\n  3630: a4 = a3 >> 0x30\n  3633: u8 [a0 + 0x16] = a4\n  3636: a4 = a3 >> 0x28\n  3639: u8 [a0 + 0x15] = a4\n  3642: a4 = a3 >> 0x20\n  3645: u8 [a0 + 0x14] = a4\n  3648: a4 = a3 >> 0x18\n  3651: u8 [a0 + 0x13] = a4\n  3654: a4 = a3 >> 0x10\n  3657: u8 [a0 + 0x12] = a4\n  3660: a3 = a3 >> 0x8\n  3663: u8 [a0 + 0x11] = a3\n  3666: u8 [a0 + 0x8] = a2\n  3669: a3 = a2 >> 0x38\n  3672: u8 [a0 + 0xf] = a3\n  3675: a3 = a2 >> 0x30\n  3678: u8 [a0 + 0xe] = a3\n  3681: a3 = a2 >> 0x28\n  3684: u8 [a0 + 0xd] = a3\n  3687: a3 = a2 >> 0x20\n  3690: u8 [a0 + 0xc] = a3\n  3693: a3 = a2 >> 0x18\n  3696: u8 [a0 + 0xb] = a3\n  3699: a3 = a2 >> 0x10\n  3702: u8 [a0 + 0xa] = a3\n  3705: a2 = a2 >> 0x8\n  3708: u8 [a0 + 0x9] = a2\n  3711: u8 [a0] = a1\n  3713: a2 = a1 >> 0x38\n  3716: u8 [a0 + 0x7] = a2\n  3719: a2 = a1 >> 0x30\n  3722: u8 [a0 + 0x6] = a2\n  3725: a2 = a1 >> 0x28\n  3728: u8 [a0 + 0x5] = a2\n  3731: a2 = a1 >> 0x20\n  3734: u8 [a0 + 0x4] = a2\n  3737: a2 = a1 >> 0x18\n  3740: u8 [a0 + 0x3] = a2\n  3743: a2 = a1 >> 0x10\n  3746: u8 [a0 + 0x2] = a2\n  3749: a1 = a1 >> 0x8\n  3752: u8 [a0 + 0x1] = a1\n  3755: a1 = 0x20\n  3758: a0 = s1\n  3760: ra = 62, jump @0\n      : @70 [@dyn 31] (gas: 6)\n  3765: i32 a1 = a0 + 0\n  3767: a2 = 0x20\n  3770: a0 = 0\n  3772: ra = 0x40\n  3775: ecalli 13 // 'seal_return'\n  3777: fallthrough\n      : @71 [@dyn 32] (gas: 194)\n  3778: sp = sp + 0xffffffffffffffa0\n  3781: u64 [sp + 0x58] = ra\n  3784: u64 [sp + 0x50] = s0\n  3787: u64 [sp + 0x48] = s1\n  3790: u64 [sp] = a0\n  3792: t1 = u64 [a1]\n  3794: ra = u64 [a1 + 0x8]\n  3797: a4 = u64 [a1 + 0x10]\n  3800: a1 = u64 [a1 + 0x18]\n  3803: t0 = u64 [a2]\n  3805: a3 = u64 [a2 + 0x8]\n  3808: t2 = u64 [a2 + 0x18]\n  3811: a2 = u64 [a2 + 0x10]\n  3814: s0 = t0 >> 0x3d\n  3817: s1 = a3 << 0x3\n  3820: s0 = s0 | s1\n  3823: a3 = a3 >> 0x3d\n  3826: s1 = a2 << 0x3\n  3829: a3 = a3 | s1\n  3832: a2 = a2 >> 0x3d\n  3835: t2 = t2 << 0x3\n  3838: s1 = t2 | a2\n  3841: t2 = t0 << 0x3\n  3844: a2 = s1 >u 0\n  3846: a5 = a3 >u 0\n  3848: a5 = a2 if s1 != 0\n  3851: a0 = s0 >u 0\n  3853: a2 = t2 <u 0x100\n  3857: t2 = a2 ^ 0x1\n  3860: t2 = a0 if s0 != 0\n  3863: a3 = a3 | s1\n  3866: t2 = a5 if a3 != 0\n  3869: u8 [sp + 71] = 0\n  3872: u8 [sp + 70] = 0\n  3875: u8 [sp + 69] = 0\n  3878: u8 [sp + 68] = 0\n  3881: u8 [sp + 67] = 0\n  3884: u8 [sp + 66] = 0\n  3887: u8 [sp + 65] = 0\n  3890: u8 [sp + 64] = 0\n  3893: u8 [sp + 63] = 0\n  3896: u8 [sp + 62] = 0\n  3899: u8 [sp + 61] = 0\n  3902: u8 [sp + 60] = 0\n  3905: u8 [sp + 59] = 0\n  3908: u8 [sp + 58] = 0\n  3911: u8 [sp + 57] = 0\n  3914: u8 [sp + 56] = 0\n  3917: u8 [sp + 55] = 0\n  3920: u8 [sp + 54] = 0\n  3923: u8 [sp + 53] = 0\n  3926: u8 [sp + 52] = 0\n  3929: u8 [sp + 51] = 0\n  3932: u8 [sp + 50] = 0\n  3935: u8 [sp + 49] = 0\n  3938: u8 [sp + 48] = 0\n  3941: u8 [sp + 47] = 0\n  3944: u8 [sp + 46] = 0\n  3947: u8 [sp + 45] = 0\n  3950: u8 [sp + 44] = 0\n  3953: u8 [sp + 43] = 0\n  3956: u8 [sp + 42] = 0\n  3959: u8 [sp + 41] = 0\n  3962: u8 [sp + 40] = 0\n  3965: u8 [sp + 0x20] = a1\n  3968: u8 [sp + 0x18] = a4\n  3971: u8 [sp + 0x10] = ra\n  3974: u8 [sp + 0x8] = t1\n  3977: a0 = a1 >> 0x38\n  3980: u8 [sp + 0x27] = a0\n  3983: a0 = a1 >> 0x30\n  3986: u8 [sp + 0x26] = a0\n  3989: a0 = a1 >> 0x28\n  3992: u8 [sp + 0x25] = a0\n  3995: a0 = a1 >> 0x20\n  3998: u8 [sp + 0x24] = a0\n  4001: a0 = a1 >> 0x18\n  4004: u8 [sp + 0x23] = a0\n  4007: a0 = a1 >> 0x10\n  4010: u8 [sp + 0x22] = a0\n  4013: a1 = a1 >> 0x8\n  4016: u8 [sp + 0x21] = a1\n  4019: a0 = a4 >> 0x38\n  4022: u8 [sp + 0x1f] = a0\n  4025: a0 = a4 >> 0x30\n  4028: u8 [sp + 0x1e] = a0\n  4031: a0 = a4 >> 0x28\n  4034: u8 [sp + 0x1d] = a0\n  4037: a0 = a4 >> 0x20\n  4040: u8 [sp + 0x1c] = a0\n  4043: a0 = a4 >> 0x18\n  4046: u8 [sp + 0x1b] = a0\n  4049: a0 = a4 >> 0x10\n  4052: u8 [sp + 0x1a] = a0\n  4055: a4 = a4 >> 0x8\n  4058: u8 [sp + 0x19] = a4\n  4061: a0 = ra >> 0x38\n  4064: u8 [sp + 0x17] = a0\n  4067: a0 = ra >> 0x30\n  4070: u8 [sp + 0x16] = a0\n  4073: a0 = ra >> 0x28\n  4076: u8 [sp + 0x15] = a0\n  4079: a0 = ra >> 0x20\n  4082: u8 [sp + 0x14] = a0\n  4085: a0 = ra >> 0x18\n  4088: u8 [sp + 0x13] = a0\n  4091: a0 = ra >> 0x10\n  4094: u8 [sp + 0x12] = a0\n  4097: a0 = ra >> 0x8\n  4100: u8 [sp + 0x11] = a0\n  4103: a0 = t1 >> 0x38\n  4106: u8 [sp + 0xf] = a0\n  4109: a0 = t1 >> 0x30\n  4112: u8 [sp + 0xe] = a0\n  4115: a0 = t1 >> 0x28\n  4118: u8 [sp + 0xd] = a0\n  4121: a0 = t1 >> 0x20\n  4124: u8 [sp + 0xc] = a0\n  4127: a0 = t1 >> 0x18\n  4130: u8 [sp + 0xb] = a0\n  4133: a0 = t1 >> 0x10\n  4136: u8 [sp + 0xa] = a0\n  4139: a0 = t1 >> 0x8\n  4142: u8 [sp + 0x9] = a0\n  4145: a1 = t0 & 0x1f\n  4148: a0 = sp + 0x8\n  4151: a1 = a1 + a0\n  4154: a0 = u8 [a1 + 0x9]\n  4157: a2 = u8 [a1 + 0x8]\n  4160: a3 = u8 [a1 + 0xa]\n  4163: a4 = u8 [a1 + 0xb]\n  4166: a0 = a0 << 0x8\n  4169: a0 = a0 | a2\n  4172: a3 = a3 << 0x10\n  4175: a4 = a4 << 0x18\n  4178: a3 = a3 | a4\n  4181: a0 = a0 | a3\n  4184: a2 = u8 [a1 + 0xd]\n  4187: a3 = u8 [a1 + 0xc]\n  4190: a4 = u8 [a1 + 0xe]\n  4193: a5 = u8 [a1 + 0xf]\n  4196: a2 = a2 << 0x8\n  4199: a2 = a2 | a3\n  4202: a4 = a4 << 0x10\n  4205: a5 = a5 << 0x18\n  4208: a4 = a4 | a5\n  4211: a2 = a2 | a4\n  4214: a2 = a2 << 0x20\n  4217: a3 = a2 | a0\n  4220: a0 = u8 [a1 + 0x1]\n  4223: a2 = u8 [a1]\n  4225: a4 = u8 [a1 + 0x2]\n  4228: a5 = u8 [a1 + 0x3]\n  4231: a0 = a0 << 0x8\n  4234: a0 = a0 | a2\n  4237: a4 = a4 << 0x10\n  4240: a5 = a5 << 0x18\n  4243: a4 = a4 | a5\n  4246: a0 = a0 | a4\n  4249: a2 = u8 [a1 + 0x5]\n  4252: a4 = u8 [a1 + 0x4]\n  4255: a5 = u8 [a1 + 0x6]\n  4258: s1 = u8 [a1 + 0x7]\n  4261: a2 = a2 << 0x8\n  4264: a2 = a2 | a4\n  4267: a5 = a5 << 0x10\n  4270: s1 = s1 << 0x18\n  4273: a5 = a5 | s1\n  4276: a2 = a2 | a5\n  4279: a2 = a2 << 0x20\n  4282: a0 = a0 | a2\n  4285: a2 = u8 [a1 + 0x11]\n  4288: a4 = u8 [a1 + 0x10]\n  4291: a5 = u8 [a1 + 0x12]\n  4294: a1 = u8 [a1 + 0x13]\n  4297: a2 = a2 << 0x8\n  4300: a2 = a2 | a4\n  4303: a5 = a5 << 0x10\n  4306: a1 = a1 << 0x18\n  4309: a1 = a1 | a5\n  4312: a1 = a1 | a2\n  4315: a0 = 0 if t2 != 0\n  4317: a3 = 0 if t2 != 0\n  4319: a1 = 0 if t2 != 0\n  4321: a2 = u64 [sp]\n  4323: u64 [a2 + 24] = 0\n  4326: u64 [a2 + 0x10] = a1\n  4329: u64 [a2 + 0x8] = a3\n  4332: u64 [a2] = a0\n  4334: ra = u64 [sp + 0x58]\n  4337: s0 = u64 [sp + 0x50]\n  4340: s1 = u64 [sp + 0x48]\n  4343: sp = sp + 0x60\n  4346: ret\n      : @72 (gas: 8)\n  4348: a0 = u64 [sp + 0x30]\n  4351: a1 = u64 [sp + 0x38]\n  4354: a2 = u64 [sp + 0x28]\n  4357: a3 = u64 [sp + 0x20]\n  4360: a1 = a1 | a2\n  4363: a0 = a0 | a3\n  4366: a0 = a0 | a1\n  4369: jump @77 if a0 != 0\n      : @73 (gas: 2)\n  4373: a0 = i32 [0x20024]\n  4378: jump @77 if a0 <=u 3\n      : @74 (gas: 24)\n  4383: u64 [sp + 88] = 0\n  4386: u64 [sp + 80] = 0\n  4389: u64 [sp + 72] = 0\n  4392: u64 [sp + 64] = 0\n  4395: u64 [sp + 120] = 0\n  4398: u64 [sp + 112] = 0\n  4401: u64 [sp + 104] = 0\n  4404: u64 [sp + 96] = 0\n  4407: u32 [sp + 128] = 0x20\n  4412: i32 a1 = sp + 0x40\n  4415: i32 a3 = sp + 0x60\n  4418: i32 a4 = sp + 0x80\n  4422: a2 = 0xffffffffffffffff\n  4425: a0 = 0\n  4427: ecalli 7 // 'get_storage'\n  4429: a0 = u64 [sp + 0x70]\n  4432: u64 [sp + 0x8] = a0\n  4435: a0 = u64 [sp + 0x68]\n  4438: u64 [sp + 0x10] = a0\n  4441: a0 = u64 [sp + 0x60]\n  4444: u64 [sp + 0x18] = a0\n  4447: a0 = 0x40\n  4450: a1 = 0x20\n  4453: ra = 66, jump @0\n      : @75 [@dyn 33] (gas: 100)\n  4458: a1 = u8 [a0 + 0x11]\n  4461: a2 = u8 [a0 + 0x10]\n  4464: a3 = u8 [a0 + 0x12]\n  4467: a4 = u8 [a0 + 0x13]\n  4470: a1 = a1 << 0x8\n  4473: a1 = a1 | a2\n  4476: a3 = a3 << 0x10\n  4479: a4 = a4 << 0x18\n  4482: a3 = a3 | a4\n  4485: a1 = a1 | a3\n  4488: a2 = u8 [a0 + 0x15]\n  4491: a3 = u8 [a0 + 0x14]\n  4494: a4 = u8 [a0 + 0x16]\n  4497: a5 = u8 [a0 + 0x17]\n  4500: a2 = a2 << 0x8\n  4503: a2 = a2 | a3\n  4506: a4 = a4 << 0x10\n  4509: a5 = a5 << 0x18\n  4512: a4 = a4 | a5\n  4515: a2 = a2 | a4\n  4518: a2 = a2 << 0x20\n  4521: t0 = a2 | a1\n  4524: a2 = u8 [a0 + 0x1]\n  4527: a3 = u8 [a0]\n  4529: a4 = u8 [a0 + 0x2]\n  4532: a5 = u8 [a0 + 0x3]\n  4535: a2 = a2 << 0x8\n  4538: a2 = a2 | a3\n  4541: a4 = a4 << 0x10\n  4544: a5 = a5 << 0x18\n  4547: a4 = a4 | a5\n  4550: a2 = a2 | a4\n  4553: a3 = u8 [a0 + 0x5]\n  4556: a4 = u8 [a0 + 0x4]\n  4559: a5 = u8 [a0 + 0x6]\n  4562: s1 = u8 [a0 + 0x7]\n  4565: a3 = a3 << 0x8\n  4568: a3 = a3 | a4\n  4571: a5 = a5 << 0x10\n  4574: s1 = s1 << 0x18\n  4577: a5 = a5 | s1\n  4580: a3 = a3 | a5\n  4583: a3 = a3 << 0x20\n  4586: a2 = a2 | a3\n  4589: a3 = u8 [a0 + 0x19]\n  4592: a4 = u8 [a0 + 0x18]\n  4595: a5 = u8 [a0 + 0x1a]\n  4598: s1 = u8 [a0 + 0x1b]\n  4601: a3 = a3 << 0x8\n  4604: a3 = a3 | a4\n  4607: a5 = a5 << 0x10\n  4610: s1 = s1 << 0x18\n  4613: a5 = a5 | s1\n  4616: a3 = a3 | a5\n  4619: a4 = u8 [a0 + 0x1d]\n  4622: a5 = u8 [a0 + 0x1c]\n  4625: s1 = u8 [a0 + 0x1e]\n  4628: a1 = u8 [a0 + 0x1f]\n  4631: a4 = a4 << 0x8\n  4634: a4 = a4 | a5\n  4637: s1 = s1 << 0x10\n  4640: a1 = a1 << 0x18\n  4643: a1 = a1 | s1\n  4646: a1 = a1 | a4\n  4649: a1 = a1 << 0x20\n  4652: a3 = a3 | a1\n  4655: a1 = u8 [a0 + 0x9]\n  4658: a4 = u8 [a0 + 0x8]\n  4661: a5 = u8 [a0 + 0xa]\n  4664: s1 = u8 [a0 + 0xb]\n  4667: a1 = a1 << 0x8\n  4670: a1 = a1 | a4\n  4673: a5 = a5 << 0x10\n  4676: s1 = s1 << 0x18\n  4679: a5 = a5 | s1\n  4682: a1 = a1 | a5\n  4685: a4 = u8 [a0 + 0xd]\n  4688: a5 = u8 [a0 + 0xc]\n  4691: s1 = u8 [a0 + 0xe]\n  4694: a0 = u8 [a0 + 0xf]\n  4697: a4 = a4 << 0x8\n  4700: a4 = a4 | a5\n  4703: s1 = s1 << 0x10\n  4706: a0 = a0 << 0x18\n  4709: a0 = a0 | s1\n  4712: a0 = a0 | a4\n  4715: a0 = a0 << 0x20\n  4718: a0 = a0 | a1\n  4721: a1 = reverse a0\n  4723: a0 = reverse a3\n  4725: a2 = reverse a2\n  4727: a3 = reverse t0\n  4729: a2 = a2 | a3\n  4732: a3 = a0 | a1\n  4735: a3 = a3 | a2\n  4738: a3 = a3 >> 0x20\n  4741: a1 = a1 | a2\n  4744: a1 = a1 << 0x20\n  4747: a1 = a1 | a3\n  4750: jump @79 if a1 == 0\n      : @76 (gas: 1)\n  4753: trap\n      : @77 (gas: 3)\n  4754: a0 = 0\n  4756: a1 = 0\n  4758: ra = 68, jump @0\n      : @78 [@dyn 34] (gas: 5)\n  4763: i32 a1 = a0 + 0\n  4765: a0 = 0x1\n  4768: a2 = 0\n  4770: ecalli 13 // 'seal_return'\n  4772: fallthrough\n      : @79 (gas: 7)\n  4773: a1 = u64 [sp + 0x8]\n  4776: a1 = a1 << 0x20\n  4779: s1 = a1 >> 0x20\n  4782: i32 a0 = a0 + 0\n  4784: u64 [sp + 0x8] = a0\n  4787: a1 = 0x20\n  4790: ra = 70, jump @0\n      : @80 [@dyn 35] (gas: 58)\n  4795: a1 = reverse s1\n  4797: a2 = u64 [sp + 0x10]\n  4800: a2 = reverse a2\n  4802: a3 = u64 [sp + 0x18]\n  4805: a3 = reverse a3\n  4807: a4 = a3 >> 0x38\n  4810: u8 [a0 + 0x1f] = a4\n  4813: a4 = a3 >> 0x30\n  4816: u8 [a0 + 0x1e] = a4\n  4819: a4 = a3 >> 0x28\n  4822: u8 [a0 + 0x1d] = a4\n  4825: a4 = a3 >> 0x20\n  4828: u8 [a0 + 0x1c] = a4\n  4831: a4 = a3 >> 0x18\n  4834: u8 [a0 + 0x1b] = a4\n  4837: a4 = a3 >> 0x10\n  4840: u8 [a0 + 0x1a] = a4\n  4843: a4 = a3 >> 0x8\n  4846: u8 [a0 + 0x19] = a4\n  4849: u8 [a0 + 0x18] = a3\n  4852: u8 [a0 + 0x10] = a2\n  4855: u8 [a0 + 11] = 0\n  4858: u8 [a0 + 10] = 0\n  4861: u8 [a0 + 9] = 0\n  4864: u8 [a0 + 7] = 0\n  4867: u8 [a0 + 6] = 0\n  4870: u8 [a0 + 5] = 0\n  4873: u8 [a0 + 4] = 0\n  4876: u8 [a0 + 3] = 0\n  4879: u8 [a0 + 2] = 0\n  4882: u8 [a0 + 1] = 0\n  4885: u8 [a0 + 0] = 0\n  4887: a3 = a2 >> 0x38\n  4890: u8 [a0 + 0x17] = a3\n  4893: a3 = a2 >> 0x30\n  4896: u8 [a0 + 0x16] = a3\n  4899: a3 = a2 >> 0x28\n  4902: u8 [a0 + 0x15] = a3\n  4905: a3 = a2 >> 0x20\n  4908: u8 [a0 + 0x14] = a3\n  4911: a3 = a2 >> 0x18\n  4914: u8 [a0 + 0x13] = a3\n  4917: a3 = a2 >> 0x10\n  4920: u8 [a0 + 0x12] = a3\n  4923: a2 = a2 >> 0x8\n  4926: u8 [a0 + 0x11] = a2\n  4929: u8 [a0 + 0x8] = a1\n  4932: a2 = a1 >> 0x38\n  4935: u8 [a0 + 0xf] = a2\n  4938: a2 = a1 >> 0x30\n  4941: u8 [a0 + 0xe] = a2\n  4944: a2 = a1 >> 0x28\n  4947: u8 [a0 + 0xd] = a2\n  4950: a1 = a1 >> 0x20\n  4953: u8 [a0 + 0xc] = a1\n  4956: a1 = 0x20\n  4959: a0 = u64 [sp + 0x8]\n  4962: ra = 72, jump @0\n      : @81 [@dyn 36] (gas: 6)\n  4967: i32 a1 = a0 + 0\n  4969: a2 = 0x20\n  4972: a0 = 0\n  4974: ra = 0x4a\n  4977: ecalli 13 // 'seal_return'\n  4979: fallthrough\n      : @82 [@dyn 37] (gas: 9)\n  4980: a2 = u64 [a1 + 0x18]\n  4983: a3 = u64 [a1 + 0x10]\n  4986: a4 = u64 [a1 + 0x8]\n  4989: a1 = u64 [a1]\n  4991: u64 [a0 + 0x18] = a2\n  4994: u64 [a0 + 0x10] = a3\n  4997: u64 [a0 + 0x8] = a4\n  5000: u64 [a0] = a1\n  5002: ret\n      : @83 (gas: 8)\n  5004: a0 = u64 [sp + 0x10]\n  5007: a1 = u64 [sp + 0x18]\n  5010: a2 = u64 [sp + 0x8]\n  5013: a3 = u64 [sp]\n  5015: a1 = a1 | a2\n  5018: a0 = a0 | a3\n  5021: a0 = a0 | a1\n  5024: jump @89 if a0 != 0\n      : @84 (gas: 2)\n  5028: a0 = i32 [0x20024]\n  5033: jump @89 if a0 <=u 3\n      : @85 (gas: 1)\n  5038: ra = 76, jump @111\n      : @86 [@dyn 38] (gas: 3)\n  5043: a0 = 0x40\n  5046: a1 = 0x20\n  5049: ra = 78, jump @0\n      : @87 [@dyn 39] (gas: 100)\n  5054: a1 = u8 [a0 + 0x11]\n  5057: a2 = u8 [a0 + 0x10]\n  5060: a3 = u8 [a0 + 0x12]\n  5063: a4 = u8 [a0 + 0x13]\n  5066: a1 = a1 << 0x8\n  5069: a1 = a1 | a2\n  5072: a3 = a3 << 0x10\n  5075: a4 = a4 << 0x18\n  5078: a3 = a3 | a4\n  5081: a1 = a1 | a3\n  5084: a2 = u8 [a0 + 0x15]\n  5087: a3 = u8 [a0 + 0x14]\n  5090: a4 = u8 [a0 + 0x16]\n  5093: a5 = u8 [a0 + 0x17]\n  5096: a2 = a2 << 0x8\n  5099: a2 = a2 | a3\n  5102: a4 = a4 << 0x10\n  5105: a5 = a5 << 0x18\n  5108: a4 = a4 | a5\n  5111: a2 = a2 | a4\n  5114: a2 = a2 << 0x20\n  5117: t0 = a2 | a1\n  5120: a2 = u8 [a0 + 0x1]\n  5123: a3 = u8 [a0]\n  5125: a4 = u8 [a0 + 0x2]\n  5128: a5 = u8 [a0 + 0x3]\n  5131: a2 = a2 << 0x8\n  5134: a2 = a2 | a3\n  5137: a4 = a4 << 0x10\n  5140: a5 = a5 << 0x18\n  5143: a4 = a4 | a5\n  5146: a2 = a2 | a4\n  5149: a3 = u8 [a0 + 0x5]\n  5152: a4 = u8 [a0 + 0x4]\n  5155: a5 = u8 [a0 + 0x6]\n  5158: a1 = u8 [a0 + 0x7]\n  5161: a3 = a3 << 0x8\n  5164: a3 = a3 | a4\n  5167: a5 = a5 << 0x10\n  5170: a1 = a1 << 0x18\n  5173: a1 = a1 | a5\n  5176: a1 = a1 | a3\n  5179: a1 = a1 << 0x20\n  5182: t1 = a1 | a2\n  5185: a1 = u8 [a0 + 0x19]\n  5188: a3 = u8 [a0 + 0x18]\n  5191: a4 = u8 [a0 + 0x1a]\n  5194: a5 = u8 [a0 + 0x1b]\n  5197: a1 = a1 << 0x8\n  5200: a1 = a1 | a3\n  5203: a4 = a4 << 0x10\n  5206: a5 = a5 << 0x18\n  5209: a4 = a4 | a5\n  5212: a1 = a1 | a4\n  5215: a3 = u8 [a0 + 0x1d]\n  5218: a4 = u8 [a0 + 0x1c]\n  5221: a5 = u8 [a0 + 0x1e]\n  5224: a2 = u8 [a0 + 0x1f]\n  5227: a3 = a3 << 0x8\n  5230: a3 = a3 | a4\n  5233: a5 = a5 << 0x10\n  5236: a2 = a2 << 0x18\n  5239: a2 = a2 | a5\n  5242: a2 = a2 | a3\n  5245: a2 = a2 << 0x20\n  5248: a3 = a2 | a1\n  5251: a1 = u8 [a0 + 0x9]\n  5254: a2 = u8 [a0 + 0x8]\n  5257: a4 = u8 [a0 + 0xa]\n  5260: a5 = u8 [a0 + 0xb]\n  5263: a1 = a1 << 0x8\n  5266: a1 = a1 | a2\n  5269: a4 = a4 << 0x10\n  5272: a5 = a5 << 0x18\n  5275: a4 = a4 | a5\n  5278: a1 = a1 | a4\n  5281: a2 = u8 [a0 + 0xd]\n  5284: a4 = u8 [a0 + 0xc]\n  5287: a5 = u8 [a0 + 0xe]\n  5290: a0 = u8 [a0 + 0xf]\n  5293: a2 = a2 << 0x8\n  5296: a2 = a2 | a4\n  5299: a5 = a5 << 0x10\n  5302: a0 = a0 << 0x18\n  5305: a0 = a0 | a5\n  5308: a0 = a0 | a2\n  5311: a0 = a0 << 0x20\n  5314: a0 = a0 | a1\n  5317: a1 = reverse a0\n  5319: a0 = reverse a3\n  5321: a2 = reverse t1\n  5323: a3 = reverse t0\n  5325: a2 = a2 | a3\n  5328: a3 = a0 | a1\n  5331: a3 = a3 | a2\n  5334: a3 = a3 >> 0x20\n  5337: a1 = a1 | a2\n  5340: a1 = a1 << 0x20\n  5343: a1 = a1 | a3\n  5346: jump @91 if a1 == 0\n      : @88 (gas: 1)\n  5349: trap\n      : @89 (gas: 3)\n  5350: a0 = 0\n  5352: a1 = 0\n  5354: ra = 80, jump @0\n      : @90 [@dyn 40] (gas: 7)\n  5359: i32 a1 = a0 + 0\n  5361: a0 = 0x1\n  5364: a2 = 0\n  5366: ecalli 13 // 'seal_return'\n  5368: i32 a0 = a0 + 0\n  5370: ra = 0x52\n  5373: jump @0\n      : @91 (gas: 2)\n  5376: i32 a0 = a0 + 0\n  5378: ra = 82, jump @0\n      : @92 [@dyn 41] (gas: 6)\n  5383: i32 a1 = a0 + 0\n  5385: a0 = 0\n  5387: a2 = 0\n  5389: ra = 0x54\n  5392: ecalli 13 // 'seal_return'\n  5394: fallthrough\n      : @93 [@dyn 42] (gas: 9)\n  5395: a2 = u64 [a1 + 0x18]\n  5398: a3 = u64 [a1 + 0x10]\n  5401: a4 = u64 [a1 + 0x8]\n  5404: a1 = u64 [a1]\n  5406: u64 [a0 + 0x18] = a2\n  5409: u64 [a0 + 0x10] = a3\n  5412: u64 [a0 + 0x8] = a4\n  5415: u64 [a0] = a1\n  5417: ret\n      : @94 [@dyn 43] (gas: 6)\n  5419: i32 a1 = a0 + 0\n  5421: a0 = 0x1\n  5424: a2 = 0\n  5426: ra = 0x58\n  5429: ecalli 13 // 'seal_return'\n  5431: fallthrough\n      : @95 [@dyn 44] (gas: 7)\n  5432: a1 = u64 [a1]\n  5434: a1 = a1 << 0x20\n  5437: u64 [a0 + 0x18] = a1\n  5440: u64 [a0 + 16] = 0\n  5443: u64 [a0 + 8] = 0\n  5446: u64 [a0 + 0] = 0\n  5448: ret\n      : @96 (gas: 12)\n  5450: a2 = u64 [a1 + 0x10]\n  5453: a3 = u64 [a1 + 0x18]\n  5456: a4 = u64 [a1 + 0x8]\n  5459: a1 = u64 [a1]\n  5461: a3 = a3 | a4\n  5464: a4 = a1 | a2\n  5467: a4 = a4 | a3\n  5470: a4 = a4 >> 0x20\n  5473: a2 = a2 | a3\n  5476: a2 = a2 << 0x20\n  5479: a2 = a2 | a4\n  5482: jump @99 if a2 != 0\n      : @97 (gas: 13)\n  5486: sp = sp + 0xffffffffffffffe0\n  5489: u64 [sp + 0x18] = ra\n  5492: u64 [sp + 0x10] = s0\n  5495: u64 [sp + 0x8] = s1\n  5498: a2 = u64 [a0 + 0x10]\n  5501: a3 = u64 [a0 + 0x8]\n  5504: u64 [sp] = a3\n  5506: s1 = u64 [a0]\n  5508: a2 = a2 << 0x20\n  5511: s0 = a2 >> 0x20\n  5514: i32 a0 = a1 + 0\n  5516: a1 = 0x20\n  5519: ra = 90, jump @0\n      : @98 [@dyn 45] (gas: 59)\n  5524: a1 = reverse s0\n  5526: a2 = u64 [sp]\n  5528: a2 = reverse a2\n  5530: a3 = reverse s1\n  5532: a4 = a3 >> 0x38\n  5535: u8 [a0 + 0x1f] = a4\n  5538: a4 = a3 >> 0x30\n  5541: u8 [a0 + 0x1e] = a4\n  5544: a4 = a3 >> 0x28\n  5547: u8 [a0 + 0x1d] = a4\n  5550: a4 = a3 >> 0x20\n  5553: u8 [a0 + 0x1c] = a4\n  5556: a4 = a3 >> 0x18\n  5559: u8 [a0 + 0x1b] = a4\n  5562: a4 = a3 >> 0x10\n  5565: u8 [a0 + 0x1a] = a4\n  5568: a4 = a3 >> 0x8\n  5571: u8 [a0 + 0x19] = a4\n  5574: u8 [a0 + 0x18] = a3\n  5577: u8 [a0 + 0x10] = a2\n  5580: u8 [a0 + 11] = 0\n  5583: u8 [a0 + 10] = 0\n  5586: u8 [a0 + 9] = 0\n  5589: u8 [a0 + 7] = 0\n  5592: u8 [a0 + 6] = 0\n  5595: u8 [a0 + 5] = 0\n  5598: u8 [a0 + 4] = 0\n  5601: u8 [a0 + 3] = 0\n  5604: u8 [a0 + 2] = 0\n  5607: u8 [a0 + 1] = 0\n  5610: u8 [a0 + 0] = 0\n  5612: a3 = a2 >> 0x38\n  5615: u8 [a0 + 0x17] = a3\n  5618: a3 = a2 >> 0x30\n  5621: u8 [a0 + 0x16] = a3\n  5624: a3 = a2 >> 0x28\n  5627: u8 [a0 + 0x15] = a3\n  5630: a3 = a2 >> 0x20\n  5633: u8 [a0 + 0x14] = a3\n  5636: a3 = a2 >> 0x18\n  5639: u8 [a0 + 0x13] = a3\n  5642: a3 = a2 >> 0x10\n  5645: u8 [a0 + 0x12] = a3\n  5648: a2 = a2 >> 0x8\n  5651: u8 [a0 + 0x11] = a2\n  5654: u8 [a0 + 0x8] = a1\n  5657: a2 = a1 >> 0x38\n  5660: u8 [a0 + 0xf] = a2\n  5663: a2 = a1 >> 0x30\n  5666: u8 [a0 + 0xe] = a2\n  5669: a2 = a1 >> 0x28\n  5672: u8 [a0 + 0xd] = a2\n  5675: a1 = a1 >> 0x20\n  5678: u8 [a0 + 0xc] = a1\n  5681: ra = u64 [sp + 0x18]\n  5684: s0 = u64 [sp + 0x10]\n  5687: s1 = u64 [sp + 0x8]\n  5690: sp = sp + 0x20\n  5693: ret\n      : @99 (gas: 1)\n  5695: trap\n      : @100 [@dyn 46] (gas: 97)\n  5696: a1 = u8 [a0 + 0x11]\n  5699: a2 = u8 [a0 + 0x10]\n  5702: a3 = u8 [a0 + 0x12]\n  5705: a4 = u8 [a0 + 0x13]\n  5708: a1 = a1 << 0x8\n  5711: a1 = a1 | a2\n  5714: a3 = a3 << 0x10\n  5717: a4 = a4 << 0x18\n  5720: a3 = a3 | a4\n  5723: a1 = a1 | a3\n  5726: a2 = u8 [a0 + 0x15]\n  5729: a3 = u8 [a0 + 0x14]\n  5732: a4 = u8 [a0 + 0x16]\n  5735: a5 = u8 [a0 + 0x17]\n  5738: a2 = a2 << 0x8\n  5741: a2 = a2 | a3\n  5744: a4 = a4 << 0x10\n  5747: a5 = a5 << 0x18\n  5750: a4 = a4 | a5\n  5753: a2 = a2 | a4\n  5756: a2 = a2 << 0x20\n  5759: t0 = a2 | a1\n  5762: a2 = u8 [a0 + 0x1]\n  5765: a3 = u8 [a0]\n  5767: a4 = u8 [a0 + 0x2]\n  5770: a5 = u8 [a0 + 0x3]\n  5773: a2 = a2 << 0x8\n  5776: a2 = a2 | a3\n  5779: a4 = a4 << 0x10\n  5782: a5 = a5 << 0x18\n  5785: a4 = a4 | a5\n  5788: a2 = a2 | a4\n  5791: a3 = u8 [a0 + 0x5]\n  5794: a4 = u8 [a0 + 0x4]\n  5797: a5 = u8 [a0 + 0x6]\n  5800: s1 = u8 [a0 + 0x7]\n  5803: a3 = a3 << 0x8\n  5806: a3 = a3 | a4\n  5809: a5 = a5 << 0x10\n  5812: s1 = s1 << 0x18\n  5815: a5 = a5 | s1\n  5818: a3 = a3 | a5\n  5821: a3 = a3 << 0x20\n  5824: a2 = a2 | a3\n  5827: a3 = u8 [a0 + 0x19]\n  5830: a4 = u8 [a0 + 0x18]\n  5833: a5 = u8 [a0 + 0x1a]\n  5836: s1 = u8 [a0 + 0x1b]\n  5839: a3 = a3 << 0x8\n  5842: a3 = a3 | a4\n  5845: a5 = a5 << 0x10\n  5848: s1 = s1 << 0x18\n  5851: a5 = a5 | s1\n  5854: a3 = a3 | a5\n  5857: a4 = u8 [a0 + 0x1d]\n  5860: a5 = u8 [a0 + 0x1c]\n  5863: s1 = u8 [a0 + 0x1e]\n  5866: a1 = u8 [a0 + 0x1f]\n  5869: a4 = a4 << 0x8\n  5872: a4 = a4 | a5\n  5875: s1 = s1 << 0x10\n  5878: a1 = a1 << 0x18\n  5881: a1 = a1 | s1\n  5884: a1 = a1 | a4\n  5887: a1 = a1 << 0x20\n  5890: a3 = a3 | a1\n  5893: a1 = u8 [a0 + 0x9]\n  5896: a4 = u8 [a0 + 0x8]\n  5899: a5 = u8 [a0 + 0xa]\n  5902: s1 = u8 [a0 + 0xb]\n  5905: a1 = a1 << 0x8\n  5908: a1 = a1 | a4\n  5911: a5 = a5 << 0x10\n  5914: s1 = s1 << 0x18\n  5917: a5 = a5 | s1\n  5920: a1 = a1 | a5\n  5923: a4 = u8 [a0 + 0xd]\n  5926: a5 = u8 [a0 + 0xc]\n  5929: s1 = u8 [a0 + 0xe]\n  5932: a0 = u8 [a0 + 0xf]\n  5935: a4 = a4 << 0x8\n  5938: a4 = a4 | a5\n  5941: s1 = s1 << 0x10\n  5944: a0 = a0 << 0x18\n  5947: a0 = a0 | s1\n  5950: a0 = a0 | a4\n  5953: a0 = a0 << 0x20\n  5956: a0 = a0 | a1\n  5959: s1 = reverse a0\n  5961: a0 = reverse a3\n  5963: u64 [sp + 0x8] = a0\n  5966: a0 = reverse a2\n  5968: u64 [sp + 0x18] = a0\n  5971: a0 = reverse t0\n  5973: u64 [sp + 0x10] = a0\n  5976: ecalli 12 // 'return_data_size'\n  5978: fallthrough\n      : @101 (gas: 11)\n  5979: a3 = u64 [sp + 0x8]\n  5982: a1 = u64 [sp + 0x18]\n  5985: a2 = u64 [sp + 0x10]\n  5988: a1 = a1 | a2\n  5991: a2 = a3 | s1\n  5994: a2 = a2 | a1\n  5997: a2 = a2 >> 0x20\n  6000: a1 = a1 | s1\n  6003: a1 = a1 << 0x20\n  6006: a1 = a1 | a2\n  6009: jump @108 if a1 != 0\n      : @102 (gas: 3)\n  6012: s1 = a0\n  6014: a0 = a0 >> 0x20\n  6017: jump @108 if a0 != 0\n      : @103 (gas: 5)\n  6020: i32 a0 = a3 + 0\n  6022: i32 a1 = s1 + 0\n  6024: u64 [sp + 0x18] = a1\n  6027: u64 [sp + 0x10] = a0\n  6030: ra = 94, jump @0\n      : @104 [@dyn 47] (gas: 6)\n  6035: u32 [sp + 0x20] = s1\n  6038: i32 a0 = a0 + 0\n  6040: i32 a1 = sp + 0x20\n  6043: a2 = 0\n  6045: ecalli 11 // 'return_data_copy'\n  6047: fallthrough\n      : @105 (gas: 3)\n  6048: a0 = i32 [sp + 0x20]\n  6051: a1 = u64 [sp + 0x18]\n  6054: jump @108 if a0 <u a1\n      : @106 (gas: 2)\n  6057: ecalli 12 // 'return_data_size'\n  6059: fallthrough\n      : @107 (gas: 2)\n  6060: a1 = a0 >> 0x20\n  6063: jump @109 if a1 == 0\n      : @108 (gas: 1)\n  6066: trap\n      : @109 (gas: 4)\n  6067: i32 s1 = a0 + 0\n  6069: a0 = u64 [sp + 0x10]\n  6072: a1 = s1\n  6074: ra = 96, jump @0\n      : @110 [@dyn 48] (gas: 6)\n  6079: i32 a1 = a0 + 0\n  6081: a0 = 0x1\n  6084: a2 = s1\n  6086: ra = 0x62\n  6089: ecalli 13 // 'seal_return'\n  6091: fallthrough\n      : @111 [@dyn 49] (gas: 28)\n  6092: sp = sp + 0xfffffffffffffc00\n  6096: u64 [sp + 0x3f8] = ra\n  6100: u64 [sp + 0x3f0] = s0\n  6104: u64 [sp + 0x3e8] = s1\n  6108: s0 = sp + 0x400\n  6112: sp = sp & 0xffffffffffffffe0\n  6115: s1 = sp\n  6117: i32 a0 = s1 + 0x240\n  6121: ecalli 9 // 'now'\n  6123: a0 = u64 [s1 + 0x258]\n  6127: u64 [s1 + 0x128] = a0\n  6131: a0 = u64 [s1 + 0x250]\n  6135: u64 [s1 + 0x130] = a0\n  6139: a0 = u64 [s1 + 0x248]\n  6143: u64 [s1 + 0x138] = a0\n  6147: a0 = u64 [s1 + 0x240]\n  6151: u64 [s1 + 0x140] = a0\n  6155: i32 a0 = s1 + 0x260\n  6159: ecalli 4 // 'caller'\n  6161: a0 = u32 [s1 + 0x270]\n  6165: u64 [s1 + 0x110] = a0\n  6169: a0 = u64 [s1 + 0x268]\n  6173: u64 [s1 + 0x100] = a0\n  6177: a0 = u64 [s1 + 0x260]\n  6181: u64 [s1 + 0x108] = a0\n  6185: a0 = 0x40\n  6188: a1 = 0x20\n  6191: ra = 100, jump @0\n      : @112 [@dyn 50] (gas: 116)\n  6196: a1 = u8 [a0 + 0x19]\n  6199: a2 = u8 [a0 + 0x18]\n  6202: a3 = u8 [a0 + 0x1a]\n  6205: a4 = u8 [a0 + 0x1b]\n  6208: a1 = a1 << 0x8\n  6211: a1 = a1 | a2\n  6214: a3 = a3 << 0x10\n  6217: a4 = a4 << 0x18\n  6220: a3 = a3 | a4\n  6223: a1 = a1 | a3\n  6226: a2 = u8 [a0 + 0x1d]\n  6229: a3 = u8 [a0 + 0x1c]\n  6232: a4 = u8 [a0 + 0x1e]\n  6235: a5 = u8 [a0 + 0x1f]\n  6238: a2 = a2 << 0x8\n  6241: a2 = a2 | a3\n  6244: a4 = a4 << 0x10\n  6247: a5 = a5 << 0x18\n  6250: a4 = a4 | a5\n  6253: a2 = a2 | a4\n  6256: a2 = a2 << 0x20\n  6259: t0 = a2 | a1\n  6262: a2 = u8 [a0 + 0x11]\n  6265: a3 = u8 [a0 + 0x10]\n  6268: a4 = u8 [a0 + 0x12]\n  6271: a5 = u8 [a0 + 0x13]\n  6274: a2 = a2 << 0x8\n  6277: a2 = a2 | a3\n  6280: a4 = a4 << 0x10\n  6283: a5 = a5 << 0x18\n  6286: a4 = a4 | a5\n  6289: a2 = a2 | a4\n  6292: a3 = u8 [a0 + 0x15]\n  6295: a4 = u8 [a0 + 0x14]\n  6298: a5 = u8 [a0 + 0x16]\n  6301: a1 = u8 [a0 + 0x17]\n  6304: a3 = a3 << 0x8\n  6307: a3 = a3 | a4\n  6310: a5 = a5 << 0x10\n  6313: a1 = a1 << 0x18\n  6316: a1 = a1 | a5\n  6319: a1 = a1 | a3\n  6322: a1 = a1 << 0x20\n  6325: t1 = a1 | a2\n  6328: a1 = u8 [a0 + 0x9]\n  6331: a3 = u8 [a0 + 0x8]\n  6334: a4 = u8 [a0 + 0xa]\n  6337: a5 = u8 [a0 + 0xb]\n  6340: a1 = a1 << 0x8\n  6343: a1 = a1 | a3\n  6346: a4 = a4 << 0x10\n  6349: a5 = a5 << 0x18\n  6352: a4 = a4 | a5\n  6355: a1 = a1 | a4\n  6358: a3 = u8 [a0 + 0xd]\n  6361: a4 = u8 [a0 + 0xc]\n  6364: a5 = u8 [a0 + 0xe]\n  6367: a2 = u8 [a0 + 0xf]\n  6370: a3 = a3 << 0x8\n  6373: a3 = a3 | a4\n  6376: a5 = a5 << 0x10\n  6379: a2 = a2 << 0x18\n  6382: a2 = a2 | a5\n  6385: a2 = a2 | a3\n  6388: a2 = a2 << 0x20\n  6391: a3 = a2 | a1\n  6394: a1 = u8 [a0 + 0x1]\n  6397: a2 = u8 [a0]\n  6399: a4 = u8 [a0 + 0x2]\n  6402: a5 = u8 [a0 + 0x3]\n  6405: a1 = a1 << 0x8\n  6408: a1 = a1 | a2\n  6411: a4 = a4 << 0x10\n  6414: a5 = a5 << 0x18\n  6417: a4 = a4 | a5\n  6420: a1 = a1 | a4\n  6423: a2 = u8 [a0 + 0x5]\n  6426: a4 = u8 [a0 + 0x4]\n  6429: a5 = u8 [a0 + 0x6]\n  6432: a0 = u8 [a0 + 0x7]\n  6435: a2 = a2 << 0x8\n  6438: a2 = a2 | a4\n  6441: a5 = a5 << 0x10\n  6444: a0 = a0 << 0x18\n  6447: a0 = a0 | a5\n  6450: a0 = a0 | a2\n  6453: a0 = a0 << 0x20\n  6456: a0 = a0 | a1\n  6459: a2 = reverse a0\n  6461: a3 = reverse a3\n  6463: a1 = reverse t1\n  6465: a0 = reverse t0\n  6467: a4 = a0 + 0x20\n  6470: u64 [s1 + 0x148] = a0\n  6474: a0 = a4 <u a0\n  6477: a5 = a1 + a0\n  6480: u64 [s1 + 0x150] = a1\n  6484: a1 = a5 <u a1\n  6487: a1 = a0 if a0 == 0\n  6490: a1 = a1 + a3\n  6493: u64 [s1 + 0x158] = a3\n  6497: a0 = a1 <u a3\n  6500: u64 [s1 + 0x160] = a2\n  6504: a2 = a2 + a0\n  6507: u64 [s1 + 0x178] = a4\n  6511: a0 = a4 | a1\n  6514: u64 [s1 + 0x168] = a5\n  6518: u64 [s1 + 0x118] = a2\n  6522: a2 = a2 | a5\n  6525: a0 = a0 | a2\n  6528: a0 = a0 >> 0x20\n  6531: u64 [s1 + 0x120] = a1\n  6535: a1 = a1 | a2\n  6538: a1 = a1 << 0x20\n  6541: a0 = a0 | a1\n  6544: jump @114 if a0 == 0\n      : @113 (gas: 1)\n  6547: jump @161\n      : @114 (gas: 4)\n  6550: a0 = i32 [s1 + 0x178]\n  6554: a1 = 0x20\n  6557: u64 [s1 + 0x170] = a0\n  6561: ra = 102, jump @0\n      : @115 [@dyn 51] (gas: 81)\n  6566: a1 = u64 [s1 + 0x128]\n  6570: a1 = reverse a1\n  6572: a2 = u64 [s1 + 0x130]\n  6576: a2 = reverse a2\n  6578: a3 = u64 [s1 + 0x138]\n  6582: a3 = reverse a3\n  6584: a4 = u64 [s1 + 0x140]\n  6588: a4 = reverse a4\n  6590: a5 = a4 >> 0x38\n  6593: u8 [a0 + 0x1f] = a5\n  6596: a5 = a4 >> 0x30\n  6599: u8 [a0 + 0x1e] = a5\n  6602: a5 = a4 >> 0x28\n  6605: u8 [a0 + 0x1d] = a5\n  6608: a5 = a4 >> 0x20\n  6611: u8 [a0 + 0x1c] = a5\n  6614: a5 = a4 >> 0x18\n  6617: u8 [a0 + 0x1b] = a5\n  6620: a5 = a4 >> 0x10\n  6623: u8 [a0 + 0x1a] = a5\n  6626: a5 = a4 >> 0x8\n  6629: u8 [a0 + 0x19] = a5\n  6632: u8 [a0 + 0x18] = a4\n  6635: u8 [a0 + 0x10] = a3\n  6638: a4 = a3 >> 0x38\n  6641: u8 [a0 + 0x17] = a4\n  6644: a4 = a3 >> 0x30\n  6647: u8 [a0 + 0x16] = a4\n  6650: a4 = a3 >> 0x28\n  6653: u8 [a0 + 0x15] = a4\n  6656: a4 = a3 >> 0x20\n  6659: u8 [a0 + 0x14] = a4\n  6662: a4 = a3 >> 0x18\n  6665: u8 [a0 + 0x13] = a4\n  6668: a4 = a3 >> 0x10\n  6671: u8 [a0 + 0x12] = a4\n  6674: a3 = a3 >> 0x8\n  6677: u8 [a0 + 0x11] = a3\n  6680: u8 [a0 + 0x8] = a2\n  6683: a3 = a2 >> 0x38\n  6686: u8 [a0 + 0xf] = a3\n  6689: a3 = a2 >> 0x30\n  6692: u8 [a0 + 0xe] = a3\n  6695: a3 = a2 >> 0x28\n  6698: u8 [a0 + 0xd] = a3\n  6701: a3 = a2 >> 0x20\n  6704: u8 [a0 + 0xc] = a3\n  6707: a3 = a2 >> 0x18\n  6710: u8 [a0 + 0xb] = a3\n  6713: a3 = a2 >> 0x10\n  6716: u8 [a0 + 0xa] = a3\n  6719: a2 = a2 >> 0x8\n  6722: u8 [a0 + 0x9] = a2\n  6725: u8 [a0] = a1\n  6727: a2 = a1 >> 0x38\n  6730: u8 [a0 + 0x7] = a2\n  6733: a2 = a1 >> 0x30\n  6736: u8 [a0 + 0x6] = a2\n  6739: a2 = a1 >> 0x28\n  6742: u8 [a0 + 0x5] = a2\n  6745: a2 = a1 >> 0x20\n  6748: u8 [a0 + 0x4] = a2\n  6751: a2 = a1 >> 0x18\n  6754: u8 [a0 + 0x3] = a2\n  6757: a2 = a1 >> 0x10\n  6760: u8 [a0 + 0x2] = a2\n  6763: a1 = a1 >> 0x8\n  6766: a2 = u64 [s1 + 0x120]\n  6770: a3 = u64 [s1 + 0x118]\n  6774: a4 = a2 | a3\n  6777: a2 = 0x100000000\n  6787: u64 [s1 + 0x138] = a2\n  6791: a2 = 0xffffffe0\n  6801: a3 = u64 [s1 + 0x178]\n  6805: a2 = a3 <u a2\n  6808: a3 = u64 [s1 + 0x168]\n  6812: a2 = 0 if a3 != 0\n  6814: u64 [s1 + 0x140] = a4\n  6818: a2 = 0 if a4 != 0\n  6820: u8 [a0 + 0x1] = a1\n  6823: jump @117 if a2 != 0\n      : @116 (gas: 1)\n  6826: jump @161\n      : @117 (gas: 4)\n  6829: a0 = u64 [s1 + 0x170]\n  6833: i32 a0 = a0 + 0x20\n  6836: a1 = 0x20\n  6839: ra = 104, jump @0\n      : @118 [@dyn 52] (gas: 61)\n  6844: u8 [a0 + 31] = 0\n  6847: u8 [a0 + 30] = 0\n  6850: u8 [a0 + 29] = 0\n  6853: u8 [a0 + 28] = 0\n  6856: u8 [a0 + 27] = 0\n  6859: u8 [a0 + 26] = 0\n  6862: u8 [a0 + 25] = 0\n  6865: u8 [a0 + 24] = 0\n  6868: u8 [a0 + 23] = 0\n  6871: u8 [a0 + 22] = 0\n  6874: u8 [a0 + 21] = 0\n  6877: u8 [a0 + 20] = 0\n  6880: a2 = u64 [s1 + 0x110]\n  6884: u8 [a0 + 0x10] = a2\n  6887: a3 = u64 [s1 + 0x100]\n  6891: a1 = a3 >> 0x38\n  6894: u8 [a0 + 0xf] = a1\n  6897: a1 = a3 >> 0x30\n  6900: u8 [a0 + 0xe] = a1\n  6903: a1 = a3 >> 0x28\n  6906: u8 [a0 + 0xd] = a1\n  6909: a1 = a3 >> 0x20\n  6912: u8 [a0 + 0xc] = a1\n  6915: a1 = a3 >> 0x18\n  6918: u8 [a0 + 0xb] = a1\n  6921: a1 = a3 >> 0x10\n  6924: u8 [a0 + 0xa] = a1\n  6927: a1 = a3 >> 0x8\n  6930: u8 [a0 + 0x9] = a1\n  6933: u8 [a0 + 0x8] = a3\n  6936: a3 = u64 [s1 + 0x108]\n  6940: a1 = a3 >> 0x38\n  6943: u8 [a0 + 0x7] = a1\n  6946: a1 = a3 >> 0x30\n  6949: u8 [a0 + 0x6] = a1\n  6952: a1 = a3 >> 0x28\n  6955: u8 [a0 + 0x5] = a1\n  6958: a1 = a3 >> 0x20\n  6961: u8 [a0 + 0x4] = a1\n  6964: a1 = a3 >> 0x18\n  6967: u8 [a0 + 0x3] = a1\n  6970: a1 = a3 >> 0x10\n  6973: u8 [a0 + 0x2] = a1\n  6976: a1 = a3 >> 0x8\n  6979: u8 [a0 + 0x1] = a1\n  6982: u8 [a0] = a3\n  6984: a1 = a2 >> 0x18\n  6987: u8 [a0 + 0x13] = a1\n  6990: a1 = a2 >> 0x10\n  6993: u8 [a0 + 0x12] = a1\n  6996: a1 = a2 >> 0x8\n  6999: a2 = u64 [s1 + 0x138]\n  7003: a2 = a2 + 0xffffffffffffffcc\n  7006: a3 = u64 [s1 + 0x178]\n  7010: a2 = a3 <u a2\n  7013: a3 = u64 [s1 + 0x168]\n  7017: a2 = 0 if a3 != 0\n  7019: a3 = u64 [s1 + 0x140]\n  7023: a2 = 0 if a3 != 0\n  7025: u8 [a0 + 0x11] = a1\n  7028: jump @120 if a2 != 0\n      : @119 (gas: 1)\n  7031: jump @161\n      : @120 (gas: 4)\n  7034: a0 = u64 [s1 + 0x170]\n  7038: i32 a0 = a0 + 0x34\n  7041: a1 = 0x20\n  7044: ra = 106, jump @0\n      : @121 [@dyn 53] (gas: 44)\n  7049: u8 [a0 + 30] = 0x40\n  7053: u8 [a0 + 29] = 0xf0\n  7058: u8 [a0 + 28] = 0x9b\n  7063: u8 [a0 + 27] = 0xbc\n  7068: u8 [a0 + 26] = 0xe1\n  7073: u8 [a0 + 25] = 0x8\n  7077: a4 = u64 [s1 + 0x158]\n  7081: a3 = u64 [s1 + 0x148]\n  7085: a1 = a3 | a4\n  7088: a2 = u64 [s1 + 0x160]\n  7092: a5 = u64 [s1 + 0x150]\n  7096: a2 = a2 | a5\n  7099: a1 = a1 | a2\n  7102: a1 = a1 >> 0x20\n  7105: a2 = a2 | a4\n  7108: a2 = a2 << 0x20\n  7111: a1 = a1 | a2\n  7114: u8 [a0 + 31] = 0\n  7117: u8 [a0 + 24] = 0\n  7120: u8 [a0 + 23] = 0\n  7123: u8 [a0 + 22] = 0\n  7126: u8 [a0 + 21] = 0\n  7129: u8 [a0 + 20] = 0\n  7132: u8 [a0 + 19] = 0\n  7135: u8 [a0 + 18] = 0\n  7138: u8 [a0 + 17] = 0\n  7141: u8 [a0 + 16] = 0\n  7144: u8 [a0 + 15] = 0\n  7147: u8 [a0 + 14] = 0\n  7150: u8 [a0 + 13] = 0\n  7153: u8 [a0 + 12] = 0\n  7156: u8 [a0 + 11] = 0\n  7159: u8 [a0 + 10] = 0\n  7162: u8 [a0 + 9] = 0\n  7165: u8 [a0 + 8] = 0\n  7168: u8 [a0 + 7] = 0\n  7171: u8 [a0 + 6] = 0\n  7174: u8 [a0 + 5] = 0\n  7177: u8 [a0 + 4] = 0\n  7180: u8 [a0 + 3] = 0\n  7183: u8 [a0 + 2] = 0\n  7186: u8 [a0 + 1] = 0\n  7189: u8 [a0 + 0] = 0\n  7191: jump @123 if a1 == 0\n      : @122 (gas: 1)\n  7194: jump @161\n      : @123 (gas: 4)\n  7197: i32 a0 = a3 + 0\n  7199: u64 [s1 + 0x178] = a0\n  7203: a1 = 0x20\n  7206: ra = 108, jump @0\n      : @124 [@dyn 54] (gas: 51)\n  7211: u8 [a0 + 31] = 0x54\n  7215: u8 [a0 + 30] = 0\n  7218: u8 [a0 + 29] = 0\n  7221: u8 [a0 + 28] = 0\n  7224: u8 [a0 + 27] = 0\n  7227: u8 [a0 + 26] = 0\n  7230: u8 [a0 + 25] = 0\n  7233: u8 [a0 + 24] = 0\n  7236: u8 [a0 + 23] = 0\n  7239: u8 [a0 + 22] = 0\n  7242: u8 [a0 + 21] = 0\n  7245: u8 [a0 + 20] = 0\n  7248: u8 [a0 + 19] = 0\n  7251: u8 [a0 + 18] = 0\n  7254: u8 [a0 + 17] = 0\n  7257: u8 [a0 + 16] = 0\n  7260: u8 [a0 + 15] = 0\n  7263: u8 [a0 + 14] = 0\n  7266: u8 [a0 + 13] = 0\n  7269: u8 [a0 + 12] = 0\n  7272: u8 [a0 + 11] = 0\n  7275: u8 [a0 + 10] = 0\n  7278: u8 [a0 + 9] = 0\n  7281: u8 [a0 + 8] = 0\n  7284: u8 [a0 + 7] = 0\n  7287: u8 [a0 + 6] = 0\n  7290: u8 [a0 + 5] = 0\n  7293: u8 [a0 + 4] = 0\n  7296: u8 [a0 + 3] = 0\n  7299: u8 [a0 + 2] = 0\n  7302: u8 [a0 + 1] = 0\n  7305: u8 [a0 + 0] = 0\n  7307: a0 = u64 [s1 + 0x148]\n  7311: a1 = a0 + 0x80\n  7315: u64 [s1 + 0x168] = a1\n  7319: a0 = a1 <u a0\n  7322: a1 = u64 [s1 + 0x150]\n  7326: a2 = a1 + a0\n  7329: u64 [s1 + 0x148] = a2\n  7333: a1 = a2 <u a1\n  7336: a1 = a0 if a0 == 0\n  7339: a0 = u64 [s1 + 0x158]\n  7343: a1 = a1 + a0\n  7346: u64 [s1 + 0x150] = a1\n  7350: a0 = a1 <u a0\n  7353: a1 = u64 [s1 + 0x160]\n  7357: a0 = a0 + a1\n  7360: u64 [s1 + 0x160] = a0\n  7364: a0 = 0x40\n  7367: a1 = 0x20\n  7370: ra = 110, jump @0\n      : @125 [@dyn 55] (gas: 71)\n  7375: a1 = u64 [s1 + 0x160]\n  7379: a1 = reverse a1\n  7381: a2 = u64 [s1 + 0x150]\n  7385: a2 = reverse a2\n  7387: a3 = u64 [s1 + 0x148]\n  7391: a3 = reverse a3\n  7393: a4 = u64 [s1 + 0x168]\n  7397: a4 = reverse a4\n  7399: a5 = a4 >> 0x38\n  7402: u8 [a0 + 0x1f] = a5\n  7405: a5 = a4 >> 0x30\n  7408: u8 [a0 + 0x1e] = a5\n  7411: a5 = a4 >> 0x28\n  7414: u8 [a0 + 0x1d] = a5\n  7417: a5 = a4 >> 0x20\n  7420: u8 [a0 + 0x1c] = a5\n  7423: a5 = a4 >> 0x18\n  7426: u8 [a0 + 0x1b] = a5\n  7429: a5 = a4 >> 0x10\n  7432: u8 [a0 + 0x1a] = a5\n  7435: a5 = a4 >> 0x8\n  7438: u8 [a0 + 0x19] = a5\n  7441: u8 [a0 + 0x18] = a4\n  7444: a4 = a3 >> 0x38\n  7447: u8 [a0 + 0x17] = a4\n  7450: a4 = a3 >> 0x30\n  7453: u8 [a0 + 0x16] = a4\n  7456: a4 = a3 >> 0x28\n  7459: u8 [a0 + 0x15] = a4\n  7462: a4 = a3 >> 0x20\n  7465: u8 [a0 + 0x14] = a4\n  7468: a4 = a3 >> 0x18\n  7471: u8 [a0 + 0x13] = a4\n  7474: a4 = a3 >> 0x10\n  7477: u8 [a0 + 0x12] = a4\n  7480: a4 = a3 >> 0x8\n  7483: u8 [a0 + 0x11] = a4\n  7486: u8 [a0 + 0x10] = a3\n  7489: u8 [a0 + 0x8] = a2\n  7492: a3 = a2 >> 0x38\n  7495: u8 [a0 + 0xf] = a3\n  7498: a3 = a2 >> 0x30\n  7501: u8 [a0 + 0xe] = a3\n  7504: a3 = a2 >> 0x28\n  7507: u8 [a0 + 0xd] = a3\n  7510: a3 = a2 >> 0x20\n  7513: u8 [a0 + 0xc] = a3\n  7516: a3 = a2 >> 0x18\n  7519: u8 [a0 + 0xb] = a3\n  7522: a3 = a2 >> 0x10\n  7525: u8 [a0 + 0xa] = a3\n  7528: a2 = a2 >> 0x8\n  7531: u8 [a0 + 0x9] = a2\n  7534: u8 [a0] = a1\n  7536: a2 = a1 >> 0x38\n  7539: u8 [a0 + 0x7] = a2\n  7542: a2 = a1 >> 0x30\n  7545: u8 [a0 + 0x6] = a2\n  7548: a2 = a1 >> 0x28\n  7551: u8 [a0 + 0x5] = a2\n  7554: a2 = a1 >> 0x20\n  7557: u8 [a0 + 0x4] = a2\n  7560: a2 = a1 >> 0x18\n  7563: u8 [a0 + 0x3] = a2\n  7566: a2 = a1 >> 0x10\n  7569: u8 [a0 + 0x2] = a2\n  7572: a1 = a1 >> 0x8\n  7575: u8 [a0 + 0x1] = a1\n  7578: a1 = 0x20\n  7581: a0 = u64 [s1 + 0x178]\n  7585: ra = 112, jump @0\n      : @126 [@dyn 56] (gas: 100)\n  7590: a1 = u8 [a0 + 0x11]\n  7593: a2 = u8 [a0 + 0x10]\n  7596: a3 = u8 [a0 + 0x12]\n  7599: a4 = u8 [a0 + 0x13]\n  7602: a1 = a1 << 0x8\n  7605: a1 = a1 | a2\n  7608: a3 = a3 << 0x10\n  7611: a4 = a4 << 0x18\n  7614: a3 = a3 | a4\n  7617: a1 = a1 | a3\n  7620: a2 = u8 [a0 + 0x15]\n  7623: a3 = u8 [a0 + 0x14]\n  7626: a4 = u8 [a0 + 0x16]\n  7629: a5 = u8 [a0 + 0x17]\n  7632: a2 = a2 << 0x8\n  7635: a2 = a2 | a3\n  7638: a4 = a4 << 0x10\n  7641: a5 = a5 << 0x18\n  7644: a4 = a4 | a5\n  7647: a2 = a2 | a4\n  7650: a2 = a2 << 0x20\n  7653: t0 = a2 | a1\n  7656: a2 = u8 [a0 + 0x1]\n  7659: a3 = u8 [a0]\n  7661: a4 = u8 [a0 + 0x2]\n  7664: a5 = u8 [a0 + 0x3]\n  7667: a2 = a2 << 0x8\n  7670: a2 = a2 | a3\n  7673: a4 = a4 << 0x10\n  7676: a5 = a5 << 0x18\n  7679: a4 = a4 | a5\n  7682: a2 = a2 | a4\n  7685: a3 = u8 [a0 + 0x5]\n  7688: a4 = u8 [a0 + 0x4]\n  7691: a5 = u8 [a0 + 0x6]\n  7694: a1 = u8 [a0 + 0x7]\n  7697: a3 = a3 << 0x8\n  7700: a3 = a3 | a4\n  7703: a5 = a5 << 0x10\n  7706: a1 = a1 << 0x18\n  7709: a1 = a1 | a5\n  7712: a1 = a1 | a3\n  7715: a1 = a1 << 0x20\n  7718: t1 = a1 | a2\n  7721: a1 = u8 [a0 + 0x19]\n  7724: a3 = u8 [a0 + 0x18]\n  7727: a4 = u8 [a0 + 0x1a]\n  7730: a5 = u8 [a0 + 0x1b]\n  7733: a1 = a1 << 0x8\n  7736: a1 = a1 | a3\n  7739: a4 = a4 << 0x10\n  7742: a5 = a5 << 0x18\n  7745: a4 = a4 | a5\n  7748: a1 = a1 | a4\n  7751: a3 = u8 [a0 + 0x1d]\n  7754: a4 = u8 [a0 + 0x1c]\n  7757: a5 = u8 [a0 + 0x1e]\n  7760: a2 = u8 [a0 + 0x1f]\n  7763: a3 = a3 << 0x8\n  7766: a3 = a3 | a4\n  7769: a5 = a5 << 0x10\n  7772: a2 = a2 << 0x18\n  7775: a2 = a2 | a5\n  7778: a2 = a2 | a3\n  7781: a2 = a2 << 0x20\n  7784: a3 = a2 | a1\n  7787: a1 = u8 [a0 + 0x9]\n  7790: a2 = u8 [a0 + 0x8]\n  7793: a4 = u8 [a0 + 0xa]\n  7796: a5 = u8 [a0 + 0xb]\n  7799: a1 = a1 << 0x8\n  7802: a1 = a1 | a2\n  7805: a4 = a4 << 0x10\n  7808: a5 = a5 << 0x18\n  7811: a4 = a4 | a5\n  7814: a1 = a1 | a4\n  7817: a2 = u8 [a0 + 0xd]\n  7820: a4 = u8 [a0 + 0xc]\n  7823: a5 = u8 [a0 + 0xe]\n  7826: a0 = u8 [a0 + 0xf]\n  7829: a2 = a2 << 0x8\n  7832: a2 = a2 | a4\n  7835: a5 = a5 << 0x10\n  7838: a0 = a0 << 0x18\n  7841: a0 = a0 | a5\n  7844: a0 = a0 | a2\n  7847: a0 = a0 << 0x20\n  7850: a0 = a0 | a1\n  7853: a1 = reverse a0\n  7855: a0 = reverse a3\n  7857: a2 = reverse t1\n  7859: a3 = reverse t0\n  7861: a2 = a2 | a3\n  7864: a3 = a0 | a1\n  7867: a3 = a3 | a2\n  7870: a3 = a3 >> 0x20\n  7873: a1 = a1 | a2\n  7876: a1 = a1 << 0x20\n  7879: a1 = a1 | a3\n  7882: jump @128 if a1 == 0\n      : @127 (gas: 1)\n  7885: jump @161\n      : @128 (gas: 4)\n  7888: i32 a1 = a0 + 0\n  7890: u64 [s1 + 0x178] = a1\n  7894: a0 = u64 [s1 + 0x170]\n  7898: ra = 114, jump @0\n      : @129 [@dyn 57] (gas: 33)\n  7903: a1 = sp + 0xffffffffffffffe0\n  7906: a1 = a1 & 0xffffffffffffffe0\n  7909: u64 [s1 + 0x160] = a1\n  7913: sp = a1\n  7915: i32 a0 = a0 + 0\n  7917: i32 a2 = a1 + 0\n  7919: a1 = u64 [s1 + 0x178]\n  7923: ecalli 8 // 'hash_keccak_256'\n  7925: a1 = u64 [s1 + 0x160]\n  7929: a0 = u64 [a1 + 0x18]\n  7932: u64 [s1 + 0x168] = a0\n  7936: a0 = u64 [a1 + 0x10]\n  7939: u64 [s1 + 0x170] = a0\n  7943: a0 = u64 [a1 + 0x8]\n  7946: u64 [s1 + 0x158] = a0\n  7950: a0 = u64 [a1]\n  7952: u64 [s1 + 0x160] = a0\n  7956: u64 [s1 + 888] = 0\n  7960: u64 [s1 + 880] = 0\n  7964: u64 [s1 + 872] = 0\n  7968: u64 [s1 + 864] = 0x1\n  7973: u64 [s1 + 952] = 0\n  7977: u64 [s1 + 944] = 0\n  7981: u64 [s1 + 936] = 0\n  7985: u64 [s1 + 928] = 0\n  7989: u32 [s1 + 896] = 0x20\n  7994: i32 a1 = s1 + 0x360\n  7998: i32 a3 = s1 + 0x3a0\n  8002: i32 a4 = s1 + 0x380\n  8006: a2 = 0xffffffffffffffff\n  8009: a0 = 0\n  8011: ecalli 7 // 'get_storage'\n  8013: fallthrough\n      : @130 (gas: 9)\n  8014: a4 = u64 [s1 + 0x3b8]\n  8018: a5 = u64 [s1 + 0x3b0]\n  8022: a3 = u64 [s1 + 0x3a8]\n  8026: a2 = u64 [s1 + 0x3a0]\n  8030: a0 = a3 | a4\n  8033: a1 = a2 | a5\n  8036: a0 = a0 | a1\n  8039: u64 [s1 + 0x178] = a0\n  8043: jump @132 if a0 != 0\n      : @131 (gas: 1)\n  8046: jump @163\n      : @132 (gas: 77)\n  8049: a0 = u64 [s1 + 0x158]\n  8053: ra = reverse a0\n  8055: a0 = u64 [s1 + 0x168]\n  8059: a0 = reverse a0\n  8061: u64 [s1 + 0xc8] = a0\n  8065: t1 = a0\n  8067: a0 = u64 [s1 + 0x160]\n  8071: t2 = reverse a0\n  8073: a0 = u64 [s1 + 0x170]\n  8077: t0 = reverse a0\n  8079: u64 [s1 + 0x110] = a2\n  8083: a1 = clz a2\n  8085: a1 = a1 + 0x40\n  8088: a2 = clz a3\n  8090: u64 [s1 + 0xf8] = a3\n  8094: a2 = a1 if a3 == 0\n  8097: a3 = a2 + 0x80\n  8101: a1 = a3 <u a2\n  8104: a0 = a5 | a4\n  8107: a1 = 0 if a0 != 0\n  8109: u64 [s1 + 0x108] = a5\n  8113: a2 = clz a5\n  8115: a5 = a2 + 0x40\n  8118: a2 = clz a4\n  8120: u64 [s1 + 0x100] = a4\n  8124: a2 = a5 if a4 == 0\n  8127: a2 = a3 if a0 == 0\n  8130: a3 = clz t0\n  8132: a4 = clz t1\n  8134: a5 = a4 + 0x40\n  8137: a5 = a3 if t0 != 0\n  8140: a3 = clz t2\n  8142: a4 = clz ra\n  8144: a4 = a4 + 0x40\n  8147: a4 = a3 if t2 != 0\n  8150: a3 = a5 + 0x80\n  8154: a0 = a3 <u a5\n  8157: a5 = ra | t2\n  8160: a4 = a3 if a5 == 0\n  8163: a0 = 0 if a5 != 0\n  8165: a3 = a2 <u a4\n  8168: t1 = a1 ^ a0\n  8171: a5 = a1 <u a0\n  8174: a5 = a3 if t1 == 0\n  8177: a1 = a1 - a0\n  8180: a1 = a1 - a3\n  8183: a3 = a5 <u 0x1\n  8186: a3 = a3 + 0xffffffffffffffff\n  8189: a4 = a2 - a4\n  8192: t1 = -a5\n  8194: a0 = t1 >u 0\n  8196: a2 = a3 >u 0\n  8198: a2 = a0 if a3 == 0\n  8201: u64 [s1 + 0x170] = a4\n  8205: a0 = a4 <u 0x100\n  8209: a0 = a0 ^ 0x1\n  8212: a4 = a1 >u 0\n  8214: a0 = a4 if a1 != 0\n  8217: a0 = a2 if a5 != 0\n  8220: a2 = t0 | t2\n  8223: a5 = u64 [s1 + 0xc8]\n  8227: a4 = a5 | ra\n  8230: a2 = a2 | a4\n  8233: a4 = u64 [s1 + 0x178]\n  8237: a4 = a4 <u 0x1\n  8240: a2 = a2 <u 0x1\n  8243: a2 = a2 | a4\n  8246: u64 [s1 + 0xb0] = t2\n  8250: u64 [s1 + 0xb8] = ra\n  8254: u64 [s1 + 0xc0] = t0\n  8258: a0 = a0 | a2\n  8261: t2 = 0 if a0 != 0\n  8263: ra = 0 if a0 != 0\n  8265: t0 = 0 if a0 != 0\n  8267: a4 = a5\n  8269: a4 = 0 if a0 != 0\n  8271: jump @140 if a0 != 0\n      : @133 (gas: 6)\n  8275: a5 = u64 [s1 + 0x170]\n  8279: a0 = a5 ^ 0xff\n  8283: a0 = a0 | t1\n  8286: a2 = a1 | a3\n  8289: a0 = a0 | a2\n  8292: jump @140 if a0 == 0\n      : @134 (gas: 257)\n  8296: a2 = a5 + 0x1\n  8299: u64 [s1 + 0x178] = a2\n  8303: a0 = a2 <u 0x1\n  8306: a0 = a0 + a1\n  8309: u64 [s1 + 0x150] = a0\n  8313: a0 = a0 | a2\n  8316: a0 = a0 <u 0x1\n  8319: a0 = a0 + t1\n  8322: u64 [s1 + 0x148] = a0\n  8326: a0 = a0 <u t1\n  8329: a0 = a0 + a3\n  8332: u64 [s1 + 0x140] = a0\n  8336: a1 = u64 [s1 + 0xc8]\n  8340: u8 [s1 + 0x220] = a1\n  8344: u8 [s1 + 543] = 0\n  8348: u8 [s1 + 542] = 0\n  8352: u8 [s1 + 541] = 0\n  8356: u8 [s1 + 540] = 0\n  8360: u8 [s1 + 539] = 0\n  8364: u8 [s1 + 538] = 0\n  8368: u8 [s1 + 537] = 0\n  8372: u8 [s1 + 536] = 0\n  8376: u8 [s1 + 535] = 0\n  8380: u8 [s1 + 534] = 0\n  8384: u8 [s1 + 533] = 0\n  8388: u8 [s1 + 532] = 0\n  8392: u8 [s1 + 531] = 0\n  8396: u8 [s1 + 530] = 0\n  8400: u8 [s1 + 529] = 0\n  8404: u8 [s1 + 528] = 0\n  8408: u8 [s1 + 527] = 0\n  8412: u8 [s1 + 526] = 0\n  8416: u8 [s1 + 525] = 0\n  8420: u8 [s1 + 524] = 0\n  8424: u8 [s1 + 523] = 0\n  8428: u8 [s1 + 522] = 0\n  8432: u8 [s1 + 521] = 0\n  8436: u8 [s1 + 520] = 0\n  8440: u8 [s1 + 519] = 0\n  8444: u8 [s1 + 518] = 0\n  8448: u8 [s1 + 517] = 0\n  8452: u8 [s1 + 516] = 0\n  8456: u8 [s1 + 515] = 0\n  8460: u8 [s1 + 514] = 0\n  8464: u8 [s1 + 513] = 0\n  8468: u8 [s1 + 512] = 0\n  8472: a3 = u64 [s1 + 0xc0]\n  8476: u8 [s1 + 0x228] = a3\n  8480: a0 = a1 >> 0x38\n  8483: u64 [s1 + 0x128] = a0\n  8487: u8 [s1 + 0x227] = a0\n  8491: a0 = a1 >> 0x30\n  8494: u64 [s1 + 0x120] = a0\n  8498: u8 [s1 + 0x226] = a0\n  8502: a0 = a1 >> 0x28\n  8505: u64 [s1 + 0x118] = a0\n  8509: u8 [s1 + 0x225] = a0\n  8513: i32 t0 = 0xff - a5\n  8517: a0 = t0 << 0x38\n  8520: a0 = a0 >> 0x3b\n  8523: a2 = s1 + 0x220\n  8527: a2 = a2 - a0\n  8530: a0 = a1 >> 0x20\n  8533: u64 [s1 + 0x90] = a0\n  8537: u8 [s1 + 0x224] = a0\n  8541: a0 = a1 >> 0x18\n  8544: u64 [s1 + 0x88] = a0\n  8548: u8 [s1 + 0x223] = a0\n  8552: a0 = a1 >> 0x10\n  8555: u64 [s1 + 0x80] = a0\n  8559: u8 [s1 + 0x222] = a0\n  8563: a1 = a1 >> 0x8\n  8566: u64 [s1 + 0x78] = a1\n  8569: u8 [s1 + 0x221] = a1\n  8573: a0 = u64 [s1 + 0xb8]\n  8577: u8 [s1 + 0x230] = a0\n  8581: a1 = a3 >> 0x38\n  8584: u64 [s1 + 0x70] = a1\n  8587: u8 [s1 + 0x22f] = a1\n  8591: a1 = a3 >> 0x30\n  8594: u64 [s1 + 0x68] = a1\n  8597: u8 [s1 + 0x22e] = a1\n  8601: a1 = a3 >> 0x28\n  8604: u64 [s1 + 0x60] = a1\n  8607: u8 [s1 + 0x22d] = a1\n  8611: a1 = a3 >> 0x20\n  8614: u64 [s1 + 0x58] = a1\n  8617: u8 [s1 + 0x22c] = a1\n  8621: a1 = a3 >> 0x18\n  8624: u64 [s1 + 0x50] = a1\n  8627: u8 [s1 + 0x22b] = a1\n  8631: a1 = a3 >> 0x10\n  8634: u64 [s1 + 0x48] = a1\n  8637: u8 [s1 + 0x22a] = a1\n  8641: a3 = a3 >> 0x8\n  8644: u64 [s1 + 0x40] = a3\n  8647: u8 [s1 + 0x229] = a3\n  8651: ra = u64 [s1 + 0xb0]\n  8655: u8 [s1 + 0x238] = ra\n  8659: a1 = a0 >> 0x38\n  8662: u64 [s1 + 0x38] = a1\n  8665: u8 [s1 + 0x237] = a1\n  8669: a1 = a0 >> 0x30\n  8672: u64 [s1 + 0x30] = a1\n  8675: u8 [s1 + 0x236] = a1\n  8679: a1 = a0 >> 0x28\n  8682: u64 [s1 + 0x28] = a1\n  8685: u8 [s1 + 0x235] = a1\n  8689: a1 = a0 >> 0x20\n  8692: u64 [s1 + 0x20] = a1\n  8695: u8 [s1 + 0x234] = a1\n  8699: a1 = a0 >> 0x18\n  8702: u64 [s1 + 0x18] = a1\n  8705: u8 [s1 + 0x233] = a1\n  8709: a1 = a0 >> 0x10\n  8712: u64 [s1 + 0x10] = a1\n  8715: u8 [s1 + 0x232] = a1\n  8719: a0 = a0 >> 0x8\n  8722: u64 [s1 + 0xf0] = a0\n  8726: u8 [s1 + 0x231] = a0\n  8730: a0 = ra >> 0x38\n  8733: u64 [s1 + 0xe8] = a0\n  8737: u8 [s1 + 0x23f] = a0\n  8741: a0 = ra >> 0x30\n  8744: u64 [s1 + 0xe0] = a0\n  8748: u8 [s1 + 0x23e] = a0\n  8752: a0 = ra >> 0x28\n  8755: u64 [s1 + 0xd8] = a0\n  8759: u8 [s1 + 0x23d] = a0\n  8763: a0 = ra >> 0x20\n  8766: u64 [s1 + 0xd0] = a0\n  8770: u8 [s1 + 0x23c] = a0\n  8774: a0 = ra >> 0x18\n  8777: u64 [s1 + 0xa8] = a0\n  8781: u8 [s1 + 0x23b] = a0\n  8785: a0 = ra >> 0x10\n  8788: u64 [s1 + 0xa0] = a0\n  8792: u8 [s1 + 0x23a] = a0\n  8796: a0 = ra >> 0x8\n  8799: u64 [s1 + 0x98] = a0\n  8803: u8 [s1 + 0x239] = a0\n  8807: a0 = u8 [a2 + 0x19]\n  8810: a1 = u8 [a2 + 0x18]\n  8813: a4 = u8 [a2 + 0x1a]\n  8816: a5 = u8 [a2 + 0x1b]\n  8819: a0 = a0 << 0x8\n  8822: a0 = a0 | a1\n  8825: a4 = a4 << 0x10\n  8828: a5 = a5 << 0x18\n  8831: a4 = a4 | a5\n  8834: a0 = a0 | a4\n  8837: a1 = u8 [a2 + 0x1d]\n  8840: a4 = u8 [a2 + 0x1c]\n  8843: a5 = u8 [a2 + 0x1e]\n  8846: a3 = u8 [a2 + 0x1f]\n  8849: a1 = a1 << 0x8\n  8852: a1 = a1 | a4\n  8855: a5 = a5 << 0x10\n  8858: a3 = a3 << 0x18\n  8861: a3 = a3 | a5\n  8864: a1 = a1 | a3\n  8867: a1 = a1 << 0x20\n  8870: t1 = a1 | a0\n  8873: a0 = u8 [a2 + 0x11]\n  8876: a1 = u8 [a2 + 0x10]\n  8879: a3 = u8 [a2 + 0x12]\n  8882: a5 = u8 [a2 + 0x13]\n  8885: a0 = a0 << 0x8\n  8888: a0 = a0 | a1\n  8891: a3 = a3 << 0x10\n  8894: a5 = a5 << 0x18\n  8897: a3 = a3 | a5\n  8900: a0 = a0 | a3\n  8903: a1 = u8 [a2 + 0x15]\n  8906: a3 = u8 [a2 + 0x14]\n  8909: a5 = u8 [a2 + 0x16]\n  8912: a4 = u8 [a2 + 0x17]\n  8915: a1 = a1 << 0x8\n  8918: a1 = a1 | a3\n  8921: a5 = a5 << 0x10\n  8924: a4 = a4 << 0x18\n  8927: a4 = a4 | a5\n  8930: a1 = a1 | a4\n  8933: a1 = a1 << 0x20\n  8936: t2 = a1 | a0\n  8939: a3 = t0 & 0x7\n  8942: a0 = t1 << a3\n  8945: a5 = t2 >> 0x1\n  8948: t0 = a3 ^ 0x3f\n  8951: a5 = a5 >> t0\n  8954: a0 = a0 | a5\n  8957: u64 [s1 + 0x170] = a0\n  8961: a0 = u8 [a2 + 0x9]\n  8964: a5 = u8 [a2 + 0x8]\n  8967: a4 = u8 [a2 + 0xa]\n  8970: a1 = u8 [a2 + 0xb]\n  8973: a0 = a0 << 0x8\n  8976: a0 = a0 | a5\n  8979: a4 = a4 << 0x10\n  8982: a1 = a1 << 0x18\n  8985: a1 = a1 | a4\n  8988: t1 = a1 | a0\n  8991: a1 = u8 [a2 + 0xd]\n  8994: a4 = u8 [a2 + 0xc]\n  8997: a5 = u8 [a2 + 0xe]\n  9000: a0 = u8 [a2 + 0xf]\n  9003: a1 = a1 << 0x8\n  9006: a1 = a1 | a4\n  9009: a5 = a5 << 0x10\n  9012: a0 = a0 << 0x18\n  9015: a0 = a0 | a5\n  9018: a0 = a0 | a1\n  9021: a0 = a0 << 0x20\n  9024: t1 = a0 | t1\n  9027: a0 = t1 >> 0x1\n  9030: a1 = a3 ^ 0xffffffffffffffff\n  9033: a0 = a0 >> a1\n  9036: a1 = t2 << a3\n  9039: a0 = a0 | a1\n  9042: u64 [s1 + 0x168] = a0\n  9046: a0 = u8 [a2 + 0x1]\n  9049: a1 = u8 [a2]\n  9051: a4 = u8 [a2 + 0x2]\n  9054: a5 = u8 [a2 + 0x3]\n  9057: a0 = a0 << 0x8\n  9060: a0 = a0 | a1\n  9063: a4 = a4 << 0x10\n  9066: a5 = a5 << 0x18\n  9069: a4 = a4 | a5\n  9072: a0 = a0 | a4\n  9075: a1 = u8 [a2 + 0x5]\n  9078: a4 = u8 [a2 + 0x4]\n  9081: a5 = u8 [a2 + 0x6]\n  9084: a2 = u8 [a2 + 0x7]\n  9087: a1 = a1 << 0x8\n  9090: a1 = a1 | a4\n  9093: a4 = u64 [s1 + 0x150]\n  9097: a5 = a5 << 0x10\n  9100: a2 = a2 << 0x18\n  9103: a2 = a2 | a5\n  9106: t2 = u64 [s1 + 0x140]\n  9110: a1 = a1 | a2\n  9113: a1 = a1 << 0x20\n  9116: a0 = a0 | a1\n  9119: a1 = a0 >> 0x1\n  9122: a1 = a1 >> t0\n  9125: a2 = t1 << a3\n  9128: a5 = u64 [s1 + 0x148]\n  9132: a1 = a1 | a2\n  9135: u64 [s1 + 0x158] = a1\n  9139: a1 = a4 | t2\n  9142: a2 = u64 [s1 + 0x178]\n  9146: a2 = a2 | a5\n  9149: a1 = a1 | a2\n  9152: a0 = a0 << a3\n  9155: u64 [s1 + 0x160] = a0\n  9159: jump @138 if a1 == 0\n      : @135 (gas: 226)\n  9163: u64 [s1 + 312] = 0\n  9167: u64 [s1 + 304] = 0\n  9171: a0 = u64 [s1 + 0x128]\n  9175: u8 [s1 + 0x1c7] = a0\n  9179: a0 = u64 [s1 + 0x120]\n  9183: u8 [s1 + 0x1c6] = a0\n  9187: a0 = u64 [s1 + 0x118]\n  9191: u8 [s1 + 0x1c5] = a0\n  9195: a0 = u64 [s1 + 0x90]\n  9199: u8 [s1 + 0x1c4] = a0\n  9203: a0 = u64 [s1 + 0x88]\n  9207: u8 [s1 + 0x1c3] = a0\n  9211: a0 = u64 [s1 + 0x80]\n  9215: u8 [s1 + 0x1c2] = a0\n  9219: a0 = u64 [s1 + 0x78]\n  9222: u8 [s1 + 0x1c1] = a0\n  9226: a0 = u64 [s1 + 0x70]\n  9229: u8 [s1 + 0x1cf] = a0\n  9233: a0 = u64 [s1 + 0x68]\n  9236: u8 [s1 + 0x1ce] = a0\n  9240: a0 = u64 [s1 + 0x60]\n  9243: u8 [s1 + 0x1cd] = a0\n  9247: a0 = u64 [s1 + 0x58]\n  9250: u8 [s1 + 0x1cc] = a0\n  9254: a0 = u64 [s1 + 0x50]\n  9257: u8 [s1 + 0x1cb] = a0\n  9261: a0 = u64 [s1 + 0x48]\n  9264: u8 [s1 + 0x1ca] = a0\n  9268: a0 = u64 [s1 + 0x40]\n  9271: u8 [s1 + 0x1c9] = a0\n  9275: a0 = u64 [s1 + 0x38]\n  9278: u8 [s1 + 0x1d7] = a0\n  9282: a0 = u64 [s1 + 0x30]\n  9285: u8 [s1 + 0x1d6] = a0\n  9289: a0 = u64 [s1 + 0x28]\n  9292: u8 [s1 + 0x1d5] = a0\n  9296: a0 = u64 [s1 + 0x20]\n  9299: u8 [s1 + 0x1d4] = a0\n  9303: a0 = u64 [s1 + 0x18]\n  9306: u8 [s1 + 0x1d3] = a0\n  9310: a0 = u64 [s1 + 0x10]\n  9313: u8 [s1 + 0x1d2] = a0\n  9317: u8 [s1 + 511] = 0\n  9321: u8 [s1 + 510] = 0\n  9325: u8 [s1 + 509] = 0\n  9329: u8 [s1 + 508] = 0\n  9333: u8 [s1 + 507] = 0\n  9337: u8 [s1 + 506] = 0\n  9341: u8 [s1 + 505] = 0\n  9345: u8 [s1 + 504] = 0\n  9349: u8 [s1 + 503] = 0\n  9353: u8 [s1 + 502] = 0\n  9357: u8 [s1 + 501] = 0\n  9361: u8 [s1 + 500] = 0\n  9365: u8 [s1 + 499] = 0\n  9369: u8 [s1 + 498] = 0\n  9373: u8 [s1 + 497] = 0\n  9377: u8 [s1 + 496] = 0\n  9381: u8 [s1 + 495] = 0\n  9385: u8 [s1 + 494] = 0\n  9389: u8 [s1 + 493] = 0\n  9393: u8 [s1 + 492] = 0\n  9397: u8 [s1 + 491] = 0\n  9401: u8 [s1 + 490] = 0\n  9405: u8 [s1 + 489] = 0\n  9409: u8 [s1 + 488] = 0\n  9413: u8 [s1 + 487] = 0\n  9417: u8 [s1 + 486] = 0\n  9421: u8 [s1 + 485] = 0\n  9425: u8 [s1 + 484] = 0\n  9429: u8 [s1 + 483] = 0\n  9433: u8 [s1 + 482] = 0\n  9437: u8 [s1 + 481] = 0\n  9441: u8 [s1 + 480] = 0\n  9445: a0 = u64 [s1 + 0xc8]\n  9449: u8 [s1 + 0x1c0] = a0\n  9453: a0 = u64 [s1 + 0xc0]\n  9457: u8 [s1 + 0x1c8] = a0\n  9461: a0 = u64 [s1 + 0xb8]\n  9465: u8 [s1 + 0x1d0] = a0\n  9469: u8 [s1 + 0x1d8] = ra\n  9473: a0 = u64 [s1 + 0xf0]\n  9477: u8 [s1 + 0x1d1] = a0\n  9481: a0 = u64 [s1 + 0xe8]\n  9485: u8 [s1 + 0x1df] = a0\n  9489: a0 = u64 [s1 + 0xe0]\n  9493: u8 [s1 + 0x1de] = a0\n  9497: a0 = u64 [s1 + 0xd8]\n  9501: u8 [s1 + 0x1dd] = a0\n  9505: a0 = u64 [s1 + 0xd0]\n  9509: u8 [s1 + 0x1dc] = a0\n  9513: a0 = u64 [s1 + 0xa8]\n  9517: u8 [s1 + 0x1db] = a0\n  9521: a0 = u64 [s1 + 0xa0]\n  9525: u8 [s1 + 0x1da] = a0\n  9529: a0 = u64 [s1 + 0x98]\n  9533: u8 [s1 + 0x1d9] = a0\n  9537: t1 = u64 [s1 + 0x178]\n  9541: a0 = t1 << 0x38\n  9544: a0 = a0 >> 0x3b\n  9547: a3 = s1 + 0x1c0\n  9551: a3 = a3 + a0\n  9554: a0 = u8 [a3 + 0x11]\n  9557: a1 = u8 [a3 + 0x10]\n  9560: a2 = u8 [a3 + 0x12]\n  9563: a4 = u8 [a3 + 0x13]\n  9566: a0 = a0 << 0x8\n  9569: a0 = a0 | a1\n  9572: a2 = a2 << 0x10\n  9575: a4 = a4 << 0x18\n  9578: a2 = a2 | a4\n  9581: a0 = a0 | a2\n  9584: a1 = u8 [a3 + 0x15]\n  9587: a2 = u8 [a3 + 0x14]\n  9590: a4 = u8 [a3 + 0x16]\n  9593: a5 = u8 [a3 + 0x17]\n  9596: a1 = a1 << 0x8\n  9599: a1 = a1 | a2\n  9602: a4 = a4 << 0x10\n  9605: a5 = a5 << 0x18\n  9608: a4 = a4 | a5\n  9611: a1 = a1 | a4\n  9614: a1 = a1 << 0x20\n  9617: t0 = a1 | a0\n  9620: a5 = t1 & 0x7\n  9623: a0 = u8 [a3 + 0x19]\n  9626: a1 = u8 [a3 + 0x18]\n  9629: a4 = u8 [a3 + 0x1a]\n  9632: a2 = u8 [a3 + 0x1b]\n  9635: a0 = a0 << 0x8\n  9638: a0 = a0 | a1\n  9641: a4 = a4 << 0x10\n  9644: a2 = a2 << 0x18\n  9647: a1 = u8 [a3 + 0x1d]\n  9650: a2 = a2 | a4\n  9653: t1 = a2 | a0\n  9656: a2 = u8 [a3 + 0x1c]\n  9659: a1 = a1 << 0x8\n  9662: a4 = u8 [a3 + 0x1e]\n  9665: a0 = u8 [a3 + 0x1f]\n  9668: a1 = a1 | a2\n  9671: a2 = t0 >> a5\n  9674: a4 = a4 << 0x10\n  9677: a0 = a0 << 0x18\n  9680: a0 = a0 | a4\n  9683: a0 = a0 | a1\n  9686: a0 = a0 << 0x20\n  9689: t1 = a0 | t1\n  9692: a0 = t1 << 0x1\n  9695: t2 = a5 ^ 0x3f\n  9698: a0 = a0 << t2\n  9701: a0 = a0 | a2\n  9704: u64 [s1 + 0x128] = a0\n  9708: a0 = u8 [a3 + 0x9]\n  9711: a1 = u8 [a3 + 0x8]\n  9714: a2 = u8 [a3 + 0xa]\n  9717: a4 = u8 [a3 + 0xb]\n  9720: a0 = a0 << 0x8\n  9723: a0 = a0 | a1\n  9726: a2 = a2 << 0x10\n  9729: a4 = a4 << 0x18\n  9732: a2 = a2 | a4\n  9735: ra = a2 | a0\n  9738: a1 = u8 [a3 + 0xd]\n  9741: a2 = u8 [a3 + 0xc]\n  9744: a4 = u8 [a3 + 0xe]\n  9747: a0 = u8 [a3 + 0xf]\n  9750: a1 = a1 << 0x8\n  9753: a1 = a1 | a2\n  9756: a4 = a4 << 0x10\n  9759: a0 = a0 << 0x18\n  9762: a0 = a0 | a4\n  9765: a0 = a0 | a1\n  9768: a0 = a0 << 0x20\n  9771: ra = a0 | ra\n  9774: t0 = t0 << 0x1\n  9777: a0 = a5 ^ 0xffffffffffffffff\n  9780: a0 = t0 << a0\n  9783: a2 = ra >> a5\n  9786: a2 = a2 | a0\n  9789: a0 = u8 [a3 + 0x1]\n  9792: a4 = u8 [a3]\n  9794: a1 = u8 [a3 + 0x2]\n  9797: t0 = u8 [a3 + 0x3]\n  9800: a0 = a0 << 0x8\n  9803: a0 = a0 | a4\n  9806: a1 = a1 << 0x10\n  9809: t0 = t0 << 0x18\n  9812: a1 = t0 | a1\n  9815: t0 = a1 | a0\n  9818: a1 = u8 [a3 + 0x5]\n  9821: a4 = u8 [a3 + 0x4]\n  9824: a0 = u8 [a3 + 0x6]\n  9827: a3 = u8 [a3 + 0x7]\n  9830: a1 = a1 << 0x8\n  9833: a1 = a1 | a4\n  9836: a0 = a0 << 0x10\n  9839: a3 = a3 << 0x18\n  9842: a0 = a0 | a3\n  9845: a0 = a0 | a1\n  9848: a0 = a0 << 0x20\n  9851: a0 = a0 | t0\n  9854: a0 = a0 >> a5\n  9857: ra = ra << 0x1\n  9860: a4 = ra << t2\n  9863: t2 = a2\n  9865: t0 = a0 | a4\n  9868: ra = t1 >> a5\n  9871: a5 = u64 [s1 + 0x138]\n  9875: a1 = u64 [s1 + 0x110]\n  9879: a0 = a1 <u 0x1\n  9882: a2 = u64 [s1 + 0xf8]\n  9886: a0 = a2 - a0\n  9889: u64 [s1 + 0xe8] = a0\n  9893: a0 = a1 | a2\n  9896: a0 = a0 <u 0x1\n  9899: a2 = u64 [s1 + 0x108]\n  9903: a3 = a2 - a0\n  9906: u64 [s1 + 0xe0] = a3\n  9910: a0 = a2 <u a0\n  9913: a2 = u64 [s1 + 0x100]\n  9917: a2 = a2 - a0\n  9920: u64 [s1 + 0xd8] = a2\n  9924: a1 = a1 + 0xffffffffffffffff\n  9927: u64 [s1 + 0xd0] = a1\n  9931: fallthrough\n      : @136 (gas: 106)\n  9932: u64 [s1 + 0x138] = a5\n  9936: u64 [s1 + 240] = 0\n  9940: a1 = t0 >> 0x3f\n  9943: a5 = t2 << 0x1\n  9946: t1 = t2\n  9948: t2 = a5 | a1\n  9951: a4 = t0 << 0x1\n  9954: a3 = u64 [s1 + 0x170]\n  9958: a5 = a3 >> 0x3f\n  9961: a4 = a4 | a5\n  9964: u64 [s1 + 0x120] = a4\n  9968: a1 = u64 [s1 + 0xe8]\n  9972: a0 = a1 ^ t2\n  9975: a1 = a1 <u t2\n  9978: a2 = u64 [s1 + 0xd0]\n  9982: a5 = a2 <u a4\n  9985: a5 = a1 if a0 != 0\n  9988: a1 = ra << 0x1\n  9991: t0 = u64 [s1 + 0x128]\n  9995: a0 = t0 >> 0x3f\n  9998: ra = a1 | a0\n 10001: u64 [s1 + 0x118] = ra\n 10005: a2 = t1 >> 0x3f\n 10008: t0 = t0 << 0x1\n 10011: a1 = t0 | a2\n 10014: a0 = a3 << 0x1\n 10017: a2 = u64 [s1 + 0x168]\n 10021: a3 = a2 >> 0x3f\n 10024: t0 = a0 | a3\n 10027: a3 = a2 << 0x1\n 10030: a0 = u64 [s1 + 0x158]\n 10034: a4 = a0 >> 0x3f\n 10037: a3 = a3 | a4\n 10040: a4 = a0 << 0x1\n 10043: a2 = u64 [s1 + 0x160]\n 10047: a0 = a2 >> 0x3f\n 10050: a0 = a0 | a4\n 10053: a4 = a2 << 0x1\n 10056: a2 = u64 [s1 + 0x138]\n 10060: a2 = a2 | a4\n 10063: u64 [s1 + 0x160] = a2\n 10067: a2 = u64 [s1 + 0x130]\n 10071: a0 = a0 | a2\n 10074: u64 [s1 + 0x158] = a0\n 10078: a3 = a3 | a2\n 10081: u64 [s1 + 0x168] = a3\n 10085: a0 = a2 | t0\n 10088: u64 [s1 + 0x170] = a0\n 10092: a2 = u64 [s1 + 0xe0]\n 10096: a0 = a2 - a1\n 10099: a0 = a0 <u a5\n 10102: a3 = a2 <u a1\n 10105: a2 = u64 [s1 + 0xd8]\n 10109: a4 = a2 - ra\n 10112: a4 = a4 - a3\n 10115: a4 = a4 - a0\n 10118: a5 = a4 >>a 0x3f\n 10121: a0 = u64 [s1 + 0x110]\n 10125: a2 = a5 & a0\n 10128: u64 [s1 + 0x138] = a2\n 10132: a4 = u64 [s1 + 0xf8]\n 10136: a4 = a4 & a5\n 10139: a3 = t2 ^ a4\n 10142: t0 = t2 <u a4\n 10145: a0 = u64 [s1 + 0x120]\n 10149: t1 = a0 <u a2\n 10152: t0 = t1 if a3 == 0\n 10155: a3 = u64 [s1 + 0x108]\n 10159: a3 = a3 & a5\n 10162: a2 = a1 - a3\n 10165: ra = a2 - t0\n 10168: u64 [s1 + 0x128] = ra\n 10172: t0 = a2 <u t0\n 10175: a1 = a1 <u a3\n 10178: a3 = u64 [s1 + 0x100]\n 10182: a3 = a3 & a5\n 10185: a2 = u64 [s1 + 0x118]\n 10189: a3 = a2 - a3\n 10192: a3 = a3 - a1\n 10195: ra = a3 - t0\n 10198: a1 = t2 - a4\n 10201: t2 = a1 - t1\n 10204: a1 = u64 [s1 + 0x138]\n 10208: t0 = a0 - a1\n 10211: a2 = u64 [s1 + 0x178]\n 10215: a4 = u64 [s1 + 0x150]\n 10219: a0 = a2 | a4\n 10222: a0 = a0 <u 0x1\n 10225: a3 = u64 [s1 + 0x148]\n 10229: a1 = a3 <u a0\n 10232: a0 = a3 - a0\n 10235: a3 = a2 <u 0x1\n 10238: a4 = a4 - a3\n 10241: a3 = u64 [s1 + 0x140]\n 10245: a3 = a3 - a1\n 10248: a2 = a2 + 0xffffffffffffffff\n 10251: u64 [s1 + 0x150] = a4\n 10255: u64 [s1 + 0x140] = a3\n 10259: a1 = a4 | a3\n 10262: u64 [s1 + 0x178] = a2\n 10266: a3 = a2 | a0\n 10269: a1 = a1 | a3\n 10272: a5 = a5 & 0x1\n 10275: u64 [s1 + 0x148] = a0\n 10279: u64 [s1 + 304] = 0\n 10283: jump @136 if a1 != 0\n      : @137 (gas: 1)\n 10287: jump @139\n      : @138 (gas: 3)\n 10289: a5 = 0\n 10291: u64 [s1 + 240] = 0\n 10295: fallthrough\n      : @139 (gas: 20)\n 10296: a2 = u64 [s1 + 0x168]\n 10300: a0 = a2 >> 0x3f\n 10303: a1 = u64 [s1 + 0x170]\n 10307: a1 = a1 << 0x1\n 10310: a0 = a0 | a1\n 10313: a3 = u64 [s1 + 0x158]\n 10317: a1 = a3 >> 0x3f\n 10320: a2 = a2 << 0x1\n 10323: a1 = a1 | a2\n 10326: a4 = u64 [s1 + 0x160]\n 10330: a2 = a4 >> 0x3f\n 10333: a3 = a3 << 0x1\n 10336: a4 = a4 << 0x1\n 10339: a4 = a4 | a5\n 10342: a5 = u64 [s1 + 0xf0]\n 10346: a2 = a2 | a5\n 10349: t0 = a2 | a3\n 10352: ra = a5 | a1\n 10355: t2 = a5 | a0\n 10358: fallthrough\n      : @140 (gas: 55)\n 10359: u64 [s1 + 0x120] = t2\n 10363: u64 [s1 + 0x128] = t0\n 10367: u64 [s1 + 0x130] = ra\n 10371: u64 [s1 + 0x138] = a4\n 10375: u64 [s1 + 888] = 0\n 10379: u64 [s1 + 880] = 0\n 10383: u64 [s1 + 872] = 0\n 10387: u64 [s1 + 864] = 0\n 10391: u64 [s1 + 952] = 0\n 10395: u64 [s1 + 944] = 0\n 10399: u64 [s1 + 936] = 0\n 10403: u64 [s1 + 928] = 0\n 10407: u32 [s1 + 896] = 0x20\n 10412: i32 a1 = s1 + 0x360\n 10416: i32 a3 = s1 + 0x3a0\n 10420: i32 a4 = s1 + 0x380\n 10424: a2 = 0xffffffffffffffff\n 10427: a0 = 0\n 10429: ecalli 7 // 'get_storage'\n 10431: a0 = u64 [s1 + 0x3a0]\n 10435: u64 [s1 + 0x178] = a0\n 10439: a0 = u64 [s1 + 0x3b0]\n 10443: u64 [s1 + 0x170] = a0\n 10447: a0 = u64 [s1 + 0x3a8]\n 10451: u64 [s1 + 0x168] = a0\n 10455: i32 a0 = s1 + 0x280\n 10459: ecalli 4 // 'caller'\n 10461: a0 = i32 [s1 + 0x290]\n 10465: u64 [s1 + 0x150] = a0\n 10469: a0 = u64 [s1 + 0x280]\n 10473: u64 [s1 + 0x148] = a0\n 10477: a0 = u64 [s1 + 0x288]\n 10481: u64 [s1 + 0x140] = a0\n 10485: a0 = u64 [s1 + 0x168]\n 10489: a0 = reverse a0\n 10491: a1 = a0 << 0x20\n 10494: a2 = u64 [s1 + 0x170]\n 10498: a2 = reverse a2\n 10500: a2 = a2 >> 0x20\n 10503: a3 = a2 | a1\n 10506: a0 = a0 >> 0x20\n 10509: a1 = u64 [s1 + 0x178]\n 10513: a1 = reverse a1\n 10515: a2 = a1 << 0x20\n 10518: a0 = a0 | a2\n 10521: a1 = a1 >> 0x20\n 10524: u64 [s1 + 0xe8] = a0\n 10528: u64 [s1 + 0x2a8] = a0\n 10532: u64 [s1 + 0x118] = a3\n 10536: u64 [s1 + 0x2a0] = a3\n 10540: u64 [s1 + 0xf0] = a1\n 10544: u32 [s1 + 0x2b0] = a1\n 10548: i32 a0 = s1 + 0x2a0\n 10552: ecalli 5 // 'code_size'\n 10554: fallthrough\n      : @141 (gas: 1)\n 10555: jump @167 if a0 == 0\n      : @142 (gas: 3)\n 10559: a0 = 0x40\n 10562: a1 = 0x20\n 10565: ra = 116, jump @0\n      : @143 [@dyn 58] (gas: 108)\n 10570: a1 = u8 [a0 + 0x11]\n 10573: a2 = u8 [a0 + 0x10]\n 10576: a3 = u8 [a0 + 0x12]\n 10579: a4 = u8 [a0 + 0x13]\n 10582: a1 = a1 << 0x8\n 10585: a1 = a1 | a2\n 10588: a3 = a3 << 0x10\n 10591: a4 = a4 << 0x18\n 10594: a3 = a3 | a4\n 10597: a1 = a1 | a3\n 10600: a2 = u8 [a0 + 0x15]\n 10603: a3 = u8 [a0 + 0x14]\n 10606: a4 = u8 [a0 + 0x16]\n 10609: a5 = u8 [a0 + 0x17]\n 10612: a2 = a2 << 0x8\n 10615: a2 = a2 | a3\n 10618: a4 = a4 << 0x10\n 10621: a5 = a5 << 0x18\n 10624: a4 = a4 | a5\n 10627: a2 = a2 | a4\n 10630: a2 = a2 << 0x20\n 10633: t1 = a2 | a1\n 10636: a1 = u8 [a0 + 0x1]\n 10639: a2 = u8 [a0]\n 10641: a3 = u8 [a0 + 0x2]\n 10644: a4 = u8 [a0 + 0x3]\n 10647: a1 = a1 << 0x8\n 10650: a1 = a1 | a2\n 10653: a3 = a3 << 0x10\n 10656: a4 = a4 << 0x18\n 10659: a3 = a3 | a4\n 10662: a1 = a1 | a3\n 10665: a2 = u8 [a0 + 0x5]\n 10668: a3 = u8 [a0 + 0x4]\n 10671: a4 = u8 [a0 + 0x6]\n 10674: a5 = u8 [a0 + 0x7]\n 10677: a2 = a2 << 0x8\n 10680: a2 = a2 | a3\n 10683: a4 = a4 << 0x10\n 10686: a5 = a5 << 0x18\n 10689: a4 = a4 | a5\n 10692: a2 = a2 | a4\n 10695: a2 = a2 << 0x20\n 10698: t0 = a2 | a1\n 10701: a1 = u8 [a0 + 0x19]\n 10704: a2 = u8 [a0 + 0x18]\n 10707: a3 = u8 [a0 + 0x1a]\n 10710: a4 = u8 [a0 + 0x1b]\n 10713: a1 = a1 << 0x8\n 10716: a1 = a1 | a2\n 10719: a3 = a3 << 0x10\n 10722: a4 = a4 << 0x18\n 10725: a3 = a3 | a4\n 10728: a1 = a1 | a3\n 10731: a2 = u8 [a0 + 0x1d]\n 10734: a3 = u8 [a0 + 0x1c]\n 10737: a4 = u8 [a0 + 0x1e]\n 10740: a5 = u8 [a0 + 0x1f]\n 10743: a2 = a2 << 0x8\n 10746: a2 = a2 | a3\n 10749: a4 = a4 << 0x10\n 10752: a5 = a5 << 0x18\n 10755: a4 = a4 | a5\n 10758: a2 = a2 | a4\n 10761: a2 = a2 << 0x20\n 10764: a5 = a2 | a1\n 10767: a1 = u8 [a0 + 0x9]\n 10770: a2 = u8 [a0 + 0x8]\n 10773: a3 = u8 [a0 + 0xa]\n 10776: a4 = u8 [a0 + 0xb]\n 10779: a1 = a1 << 0x8\n 10782: a1 = a1 | a2\n 10785: a3 = a3 << 0x10\n 10788: a4 = a4 << 0x18\n 10791: a3 = a3 | a4\n 10794: a1 = a1 | a3\n 10797: a2 = u8 [a0 + 0xd]\n 10800: a3 = u8 [a0 + 0xc]\n 10803: a4 = u8 [a0 + 0xe]\n 10806: a0 = u8 [a0 + 0xf]\n 10809: a2 = a2 << 0x8\n 10812: a2 = a2 | a3\n 10815: a4 = a4 << 0x10\n 10818: a0 = a0 << 0x18\n 10821: a0 = a0 | a4\n 10824: a0 = a0 | a2\n 10827: a0 = a0 << 0x20\n 10830: a0 = a0 | a1\n 10833: u64 [s1 + 0xa8] = a0\n 10837: a2 = reverse a0\n 10839: u64 [s1 + 0xd0] = a5\n 10843: a1 = reverse a5\n 10845: u64 [s1 + 0xe0] = t0\n 10849: a3 = reverse t0\n 10851: u64 [s1 + 0xd8] = t1\n 10855: a0 = reverse t1\n 10857: u64 [s1 + 0x168] = a0\n 10861: u64 [s1 + 0x158] = a3\n 10865: a0 = a0 | a3\n 10868: u64 [s1 + 0x170] = a1\n 10872: a1 = a1 | a2\n 10875: a1 = a1 | a0\n 10878: a1 = a1 >> 0x20\n 10881: u64 [s1 + 0x160] = a2\n 10885: a0 = a0 | a2\n 10888: a0 = a0 << 0x20\n 10891: a0 = a0 | a1\n 10894: jump @161 if a0 != 0\n      : @144 (gas: 4)\n 10898: a0 = i32 [s1 + 0x170]\n 10902: a1 = 0x20\n 10905: u64 [s1 + 0x178] = a0\n 10909: ra = 118, jump @0\n      : @145 [@dyn 59] (gas: 45)\n 10914: u8 [a0 + 31] = 0\n 10917: u8 [a0 + 30] = 0\n 10920: u8 [a0 + 29] = 0\n 10923: u8 [a0 + 28] = 0\n 10926: u8 [a0 + 27] = 0\n 10929: u8 [a0 + 26] = 0\n 10932: u8 [a0 + 25] = 0\n 10935: u8 [a0 + 24] = 0\n 10938: u8 [a0 + 23] = 0\n 10941: u8 [a0 + 22] = 0\n 10944: u8 [a0 + 21] = 0\n 10947: u8 [a0 + 20] = 0\n 10950: u8 [a0 + 19] = 0\n 10953: u8 [a0 + 18] = 0\n 10956: u8 [a0 + 17] = 0\n 10959: u8 [a0 + 16] = 0\n 10962: u8 [a0 + 15] = 0\n 10965: u8 [a0 + 14] = 0\n 10968: u8 [a0 + 13] = 0\n 10971: u8 [a0 + 12] = 0\n 10974: u8 [a0 + 11] = 0\n 10977: u8 [a0 + 10] = 0\n 10980: u8 [a0 + 9] = 0\n 10983: u8 [a0 + 8] = 0\n 10986: u8 [a0 + 7] = 0\n 10989: u8 [a0 + 6] = 0\n 10992: u8 [a0 + 5] = 0\n 10995: u8 [a0 + 3] = 0x26\n 10999: u8 [a0 + 2] = 0xd7\n 11004: u8 [a0 + 1] = 0x41\n 11008: u8 [a0 + 0] = 0x36\n 11011: a1 = u64 [s1 + 0x160]\n 11015: a3 = u64 [s1 + 0x158]\n 11019: a3 = a3 | a1\n 11022: a1 = 0x100000000\n 11032: u64 [s1 + 0x158] = a1\n 11036: a1 = 0xfffffffc\n 11046: a2 = u64 [s1 + 0x170]\n 11050: a1 = a2 <u a1\n 11053: a2 = u64 [s1 + 0x168]\n 11057: a1 = 0 if a2 != 0\n 11059: u64 [s1 + 0x160] = a3\n 11063: a1 = 0 if a3 != 0\n 11065: u8 [a0 + 4] = 0\n 11068: jump @161 if a1 == 0\n      : @146 (gas: 20)\n 11072: a0 = u64 [s1 + 0x140]\n 11076: a0 = reverse a0\n 11078: a1 = a0 >> 0x20\n 11081: a2 = u64 [s1 + 0x148]\n 11085: a2 = reverse a2\n 11087: a3 = a2 << 0x20\n 11090: a1 = a1 | a3\n 11093: u64 [s1 + 0x148] = a1\n 11097: a0 = a0 << 0x20\n 11100: a1 = u64 [s1 + 0x150]\n 11104: a1 = reverse a1\n 11106: a1 = a1 >> 0x20\n 11109: a0 = a0 | a1\n 11112: u64 [s1 + 0x150] = a0\n 11116: a2 = a2 >> 0x20\n 11119: u64 [s1 + 0x140] = a2\n 11123: a0 = u64 [s1 + 0x178]\n 11127: i32 a0 = a0 + 0x4\n 11130: a1 = 0x20\n 11133: ra = 120, jump @0\n      : @147 [@dyn 60] (gas: 65)\n 11138: a1 = u64 [s1 + 0x140]\n 11142: a1 = reverse a1\n 11144: a2 = u64 [s1 + 0x148]\n 11148: a2 = reverse a2\n 11150: a3 = u64 [s1 + 0x150]\n 11154: a3 = reverse a3\n 11156: a4 = a3 >> 0x38\n 11159: u8 [a0 + 0x1f] = a4\n 11162: a4 = a3 >> 0x30\n 11165: u8 [a0 + 0x1e] = a4\n 11168: a4 = a3 >> 0x28\n 11171: u8 [a0 + 0x1d] = a4\n 11174: a4 = a3 >> 0x20\n 11177: u8 [a0 + 0x1c] = a4\n 11180: a4 = a3 >> 0x18\n 11183: u8 [a0 + 0x1b] = a4\n 11186: a4 = a3 >> 0x10\n 11189: u8 [a0 + 0x1a] = a4\n 11192: a4 = a3 >> 0x8\n 11195: u8 [a0 + 0x19] = a4\n 11198: u8 [a0 + 0x18] = a3\n 11201: u8 [a0 + 0x10] = a2\n 11204: u8 [a0 + 11] = 0\n 11207: u8 [a0 + 10] = 0\n 11210: u8 [a0 + 9] = 0\n 11213: u8 [a0 + 7] = 0\n 11216: u8 [a0 + 6] = 0\n 11219: u8 [a0 + 5] = 0\n 11222: u8 [a0 + 4] = 0\n 11225: u8 [a0 + 3] = 0\n 11228: u8 [a0 + 2] = 0\n 11231: u8 [a0 + 1] = 0\n 11234: u8 [a0 + 0] = 0\n 11236: a3 = a2 >> 0x38\n 11239: u8 [a0 + 0x17] = a3\n 11242: a3 = a2 >> 0x30\n 11245: u8 [a0 + 0x16] = a3\n 11248: a3 = a2 >> 0x28\n 11251: u8 [a0 + 0x15] = a3\n 11254: a3 = a2 >> 0x20\n 11257: u8 [a0 + 0x14] = a3\n 11260: a3 = a2 >> 0x18\n 11263: u8 [a0 + 0x13] = a3\n 11266: a3 = a2 >> 0x10\n 11269: u8 [a0 + 0x12] = a3\n 11272: a2 = a2 >> 0x8\n 11275: u8 [a0 + 0x11] = a2\n 11278: u8 [a0 + 0x8] = a1\n 11281: a2 = a1 >> 0x38\n 11284: u8 [a0 + 0xf] = a2\n 11287: a2 = a1 >> 0x30\n 11290: u8 [a0 + 0xe] = a2\n 11293: a2 = a1 >> 0x28\n 11296: u8 [a0 + 0xd] = a2\n 11299: a1 = a1 >> 0x20\n 11302: a2 = u64 [s1 + 0x158]\n 11306: a2 = a2 + 0xffffffffffffffdc\n 11309: a3 = u64 [s1 + 0x170]\n 11313: a2 = a3 <u a2\n 11316: a3 = u64 [s1 + 0x168]\n 11320: a2 = 0 if a3 != 0\n 11322: a3 = u64 [s1 + 0x160]\n 11326: a2 = 0 if a3 != 0\n 11328: u8 [a0 + 0xc] = a1\n 11331: jump @161 if a2 == 0\n      : @148 (gas: 76)\n 11335: a0 = u64 [s1 + 0x110]\n 11339: a1 = u64 [s1 + 0x138]\n 11343: a2 = a0 mulhu a1\n 11346: a5 = u64 [s1 + 0xf8]\n 11350: a3 = a5 * a1\n 11353: t1 = a3 + a2\n 11356: a3 = t1 <u a3\n 11359: a2 = a5 mulhu a1\n 11362: a4 = a2 + a3\n 11365: t0 = u64 [s1 + 0x128]\n 11369: a2 = a0 * t0\n 11372: t1 = t1 + a2\n 11375: a2 = t1 <u a2\n 11378: a3 = a0 mulhu t0\n 11381: a2 = a2 + a3\n 11384: a2 = a2 + a4\n 11387: a4 = a2 <u a4\n 11390: a3 = a5 mulhu t0\n 11393: a3 = a3 + a4\n 11396: a4 = a5 * t0\n 11399: t2 = a4 + a2\n 11402: a2 = t2 <u a4\n 11405: a2 = a2 + a3\n 11408: u64 [s1 + 0x158] = a2\n 11412: a3 = u64 [s1 + 0x130]\n 11416: a2 = a3 * a5\n 11419: a4 = a3 mulhu a0\n 11422: a2 = a2 + a4\n 11425: a4 = u64 [s1 + 0x120]\n 11429: a4 = a4 * a0\n 11432: ra = a2 + a4\n 11435: a2 = u64 [s1 + 0x100]\n 11439: a4 = a1 * a2\n 11442: a2 = u64 [s1 + 0x108]\n 11446: a5 = a1 mulhu a2\n 11449: a4 = a4 + a5\n 11452: a5 = t0 * a2\n 11455: a4 = a4 + a5\n 11458: ra = ra + a4\n 11461: a4 = a1 * a2\n 11464: a5 = a3 * a0\n 11467: a4 = a4 + a5\n 11470: a5 = a4 <u a5\n 11473: a3 = ra + a5\n 11476: a2 = u64 [s1 + 0x158]\n 11480: a2 = a2 + a3\n 11483: a4 = a4 + t2\n 11486: a3 = a4 <u t2\n 11489: ra = a0 * a1\n 11492: a0 = u64 [s1 + 0xb0]\n 11496: a1 = a0 - a3\n 11499: t0 = a1 - a2\n 11502: a3 = u64 [s1 + 0xc0]\n 11506: a0 = a3 ^ t1\n 11509: a5 = a3 <u t1\n 11512: a2 = u64 [s1 + 0xc8]\n 11516: a1 = a2 <u ra\n 11519: a5 = a1 if a0 == 0\n 11522: a0 = u64 [s1 + 0xb8]\n 11526: t2 = a0 <u a4\n 11529: a4 = a0 - a4\n 11532: a0 = a4 <u a5\n 11535: a0 = a0 + t2\n 11538: a0 = t0 - a0\n 11541: u64 [s1 + 0x150] = a0\n 11545: a4 = a4 - a5\n 11548: u64 [s1 + 0x158] = a4\n 11552: a0 = a3 - a1\n 11555: a0 = a0 - t1\n 11558: u64 [s1 + 0x140] = a0\n 11562: a0 = a2 - ra\n 11565: u64 [s1 + 0x148] = a0\n 11569: a0 = u64 [s1 + 0x178]\n 11573: i32 a0 = a0 + 0x24\n 11576: a1 = 0x20\n 11579: ra = 122, jump @0\n      : @149 [@dyn 61] (gas: 108)\n 11584: a1 = u64 [s1 + 0x150]\n 11588: t0 = reverse a1\n 11590: a1 = u64 [s1 + 0x158]\n 11594: a4 = reverse a1\n 11596: a1 = u64 [s1 + 0x140]\n 11600: a5 = reverse a1\n 11602: a1 = u64 [s1 + 0x148]\n 11606: a2 = reverse a1\n 11608: a1 = 0xffffffbc\n 11618: a3 = u64 [s1 + 0x170]\n 11622: a1 = a3 <u a1\n 11625: a3 = a2 >> 0x38\n 11628: u64 [s1 + 0x148] = a3\n 11632: u8 [a0 + 0x1f] = a3\n 11635: a3 = u64 [s1 + 0x168]\n 11639: a1 = 0 if a3 != 0\n 11641: a3 = a2 >> 0x30\n 11644: u64 [s1 + 0x140] = a3\n 11648: u8 [a0 + 0x1e] = a3\n 11651: a3 = u64 [s1 + 0x160]\n 11655: a1 = 0 if a3 != 0\n 11657: a3 = a2 >> 0x28\n 11660: u64 [s1 + 0x138] = a3\n 11664: u8 [a0 + 0x1d] = a3\n 11667: a3 = a2 >> 0x20\n 11670: u64 [s1 + 0x130] = a3\n 11674: u8 [a0 + 0x1c] = a3\n 11677: a3 = a2 >> 0x18\n 11680: u64 [s1 + 0x128] = a3\n 11684: u8 [a0 + 0x1b] = a3\n 11687: a3 = a2 >> 0x10\n 11690: u64 [s1 + 0x120] = a3\n 11694: u8 [a0 + 0x1a] = a3\n 11697: a3 = a2 >> 0x8\n 11700: u64 [s1 + 0x110] = a3\n 11704: u8 [a0 + 0x19] = a3\n 11707: u64 [s1 + 0x160] = a2\n 11711: u8 [a0 + 0x18] = a2\n 11714: u8 [a0 + 0x10] = a5\n 11717: a2 = a5 >> 0x38\n 11720: u64 [s1 + 0x108] = a2\n 11724: u8 [a0 + 0x17] = a2\n 11727: a2 = a5 >> 0x30\n 11730: u64 [s1 + 0x100] = a2\n 11734: u8 [a0 + 0x16] = a2\n 11737: a2 = a5 >> 0x28\n 11740: u64 [s1 + 0xf8] = a2\n 11744: u8 [a0 + 0x15] = a2\n 11747: a2 = a5 >> 0x20\n 11750: u64 [s1 + 0xc8] = a2\n 11754: u8 [a0 + 0x14] = a2\n 11757: a2 = a5 >> 0x18\n 11760: u64 [s1 + 0xc0] = a2\n 11764: u8 [a0 + 0x13] = a2\n 11767: a2 = a5 >> 0x10\n 11770: u64 [s1 + 0xb8] = a2\n 11774: u8 [a0 + 0x12] = a2\n 11777: u64 [s1 + 0x150] = a5\n 11781: a5 = a5 >> 0x8\n 11784: u64 [s1 + 0xb0] = a5\n 11788: u8 [a0 + 0x11] = a5\n 11791: u8 [a0 + 0x8] = a4\n 11794: a2 = a4 >> 0x38\n 11797: u64 [s1 + 0xa0] = a2\n 11801: u8 [a0 + 0xf] = a2\n 11804: a2 = a4 >> 0x30\n 11807: u64 [s1 + 0x98] = a2\n 11811: u8 [a0 + 0xe] = a2\n 11814: a2 = a4 >> 0x28\n 11817: u64 [s1 + 0x90] = a2\n 11821: u8 [a0 + 0xd] = a2\n 11824: a2 = a4 >> 0x20\n 11827: u64 [s1 + 0x88] = a2\n 11831: u8 [a0 + 0xc] = a2\n 11834: a2 = a4 >> 0x18\n 11837: u64 [s1 + 0x80] = a2\n 11841: u8 [a0 + 0xb] = a2\n 11844: a2 = a4 >> 0x10\n 11847: u64 [s1 + 0x78] = a2\n 11850: u8 [a0 + 0xa] = a2\n 11853: u64 [s1 + 0x158] = a4\n 11857: a4 = a4 >> 0x8\n 11860: u64 [s1 + 0x70] = a4\n 11863: u8 [a0 + 0x9] = a4\n 11866: u8 [a0] = t0\n 11868: a2 = t0 >> 0x38\n 11871: u64 [s1 + 0x68] = a2\n 11874: u8 [a0 + 0x7] = a2\n 11877: a2 = t0 >> 0x30\n 11880: u64 [s1 + 0x60] = a2\n 11883: u8 [a0 + 0x6] = a2\n 11886: a2 = t0 >> 0x28\n 11889: u64 [s1 + 0x58] = a2\n 11892: u8 [a0 + 0x5] = a2\n 11895: a2 = t0 >> 0x20\n 11898: u64 [s1 + 0x50] = a2\n 11901: u8 [a0 + 0x4] = a2\n 11904: a2 = t0 >> 0x18\n 11907: u64 [s1 + 0x48] = a2\n 11910: u8 [a0 + 0x3] = a2\n 11913: a2 = t0 >> 0x10\n 11916: u64 [s1 + 0x40] = a2\n 11919: u8 [a0 + 0x2] = a2\n 11922: u64 [s1 + 0x168] = t0\n 11926: a2 = t0 >> 0x8\n 11929: u64 [s1 + 0x38] = a2\n 11932: u8 [a0 + 0x1] = a2\n 11935: jump @161 if a1 == 0\n      : @150 (gas: 4)\n 11939: a0 = u64 [s1 + 0x178]\n 11943: i32 a0 = a0 + 0x44\n 11946: a1 = 0x20\n 11949: ra = 124, jump @0\n      : @151 [@dyn 62] (gas: 46)\n 11954: u8 [a0 + 31] = 0x1\n 11958: u8 [a0 + 30] = 0\n 11961: u8 [a0 + 29] = 0\n 11964: u8 [a0 + 28] = 0\n 11967: u8 [a0 + 27] = 0\n 11970: u8 [a0 + 26] = 0\n 11973: u8 [a0 + 25] = 0\n 11976: u8 [a0 + 24] = 0\n 11979: u8 [a0 + 23] = 0\n 11982: u8 [a0 + 22] = 0\n 11985: u8 [a0 + 21] = 0\n 11988: u8 [a0 + 20] = 0\n 11991: u8 [a0 + 19] = 0\n 11994: u8 [a0 + 18] = 0\n 11997: u8 [a0 + 17] = 0\n 12000: u8 [a0 + 16] = 0\n 12003: u8 [a0 + 15] = 0\n 12006: u8 [a0 + 14] = 0\n 12009: u8 [a0 + 13] = 0\n 12012: u8 [a0 + 12] = 0\n 12015: u8 [a0 + 11] = 0\n 12018: u8 [a0 + 10] = 0\n 12021: u8 [a0 + 9] = 0\n 12024: u8 [a0 + 8] = 0\n 12027: u8 [a0 + 7] = 0\n 12030: u8 [a0 + 6] = 0\n 12033: u8 [a0 + 5] = 0\n 12036: u8 [a0 + 4] = 0\n 12039: u8 [a0 + 3] = 0\n 12042: u8 [a0 + 2] = 0\n 12045: u8 [a0 + 1] = 0\n 12048: u8 [a0 + 0] = 0\n 12050: ecalli 10 // 'ref_time_left'\n 12052: a0 = u64 [s1 + 0xe8]\n 12056: u64 [s1 + 0x2c8] = a0\n 12060: a0 = u64 [s1 + 0x118]\n 12064: u64 [s1 + 0x2c0] = a0\n 12068: a0 = u64 [s1 + 0xf0]\n 12072: u32 [s1 + 0x2d0] = a0\n 12076: u64 [s1 + 760] = 0\n 12080: u64 [s1 + 752] = 0\n 12084: u64 [s1 + 744] = 0\n 12088: u64 [s1 + 736] = 0\n 12092: a1 = 0x64\n 12095: a0 = u64 [s1 + 0x178]\n 12099: ra = 126, jump @0\n      : @152 [@dyn 63] (gas: 4)\n 12104: u64 [s1 + 0x170] = a0\n 12108: a0 = u64 [s1 + 0x178]\n 12112: a1 = 0\n 12114: ra = 128, jump @0\n      : @153 [@dyn 64] (gas: 31)\n 12120: u32 [s1 + 768] = 0\n 12124: u64 [s1 + 824] = 0xffffffffffffffff\n 12129: u64 [s1 + 816] = 0xffffffffffffffff\n 12134: u64 [s1 + 808] = 0xffffffffffffffff\n 12139: u64 [s1 + 800] = 0xffffffffffffffff\n 12144: a1 = s1 + 0x2c0\n 12148: a1 = a1 << 0x20\n 12151: a1 = a1 >> 0x20\n 12154: a2 = 0x800000000\n 12164: t0 = a1 | a2\n 12167: a1 = s1 + 0x2e0\n 12171: a1 = a1 << 0x20\n 12174: a1 = a1 >> 0x20\n 12177: a2 = s1 + 0x320\n 12181: a2 = a2 << 0x20\n 12184: a3 = a2 | a1\n 12187: a1 = u64 [s1 + 0x170]\n 12191: a1 = a1 << 0x20\n 12194: a1 = a1 >> 0x20\n 12197: a2 = 0x6400000000\n 12207: a4 = a1 | a2\n 12210: a0 = a0 << 0x20\n 12213: a0 = a0 >> 0x20\n 12216: a1 = s1 + 0x300\n 12220: a1 = a1 << 0x20\n 12223: a5 = a1 | a0\n 12226: a1 = 0xffffffffffffffff\n 12229: a2 = 0xffffffffffffffff\n 12232: a0 = t0\n 12234: ecalli 0 // 'call'\n 12235: fallthrough\n      : @154 (gas: 1)\n 12236: jump @162 if a0 != 0\n      : @155 (gas: 4)\n 12240: ecalli 12 // 'return_data_size'\n 12242: a0 = 0x40\n 12245: a1 = 0x20\n 12248: ra = 130, jump @0\n      : @156 [@dyn 65] (gas: 75)\n 12254: a3 = u64 [s1 + 0xd0]\n 12258: u8 [a0 + 0x18] = a3\n 12261: a2 = u64 [s1 + 0xd8]\n 12265: a1 = a2 >> 0x38\n 12268: u8 [a0 + 0x17] = a1\n 12271: a1 = a2 >> 0x30\n 12274: u8 [a0 + 0x16] = a1\n 12277: a1 = a2 >> 0x28\n 12280: u8 [a0 + 0x15] = a1\n 12283: a1 = a2 >> 0x20\n 12286: u8 [a0 + 0x14] = a1\n 12289: a1 = a2 >> 0x18\n 12292: u8 [a0 + 0x13] = a1\n 12295: a1 = a2 >> 0x10\n 12298: u8 [a0 + 0x12] = a1\n 12301: a1 = a2 >> 0x8\n 12304: u8 [a0 + 0x11] = a1\n 12307: u8 [a0 + 0x10] = a2\n 12310: a2 = u64 [s1 + 0xa8]\n 12314: a1 = a2 >> 0x38\n 12317: u8 [a0 + 0xf] = a1\n 12320: a1 = a2 >> 0x30\n 12323: u8 [a0 + 0xe] = a1\n 12326: a1 = a2 >> 0x28\n 12329: u8 [a0 + 0xd] = a1\n 12332: a1 = a2 >> 0x20\n 12335: u8 [a0 + 0xc] = a1\n 12338: a1 = a2 >> 0x18\n 12341: u8 [a0 + 0xb] = a1\n 12344: a1 = a2 >> 0x10\n 12347: u8 [a0 + 0xa] = a1\n 12350: a1 = a2 >> 0x8\n 12353: u8 [a0 + 0x9] = a1\n 12356: u8 [a0 + 0x8] = a2\n 12359: a2 = u64 [s1 + 0xe0]\n 12363: a1 = a2 >> 0x38\n 12366: u8 [a0 + 0x7] = a1\n 12369: a1 = a2 >> 0x30\n 12372: u8 [a0 + 0x6] = a1\n 12375: a1 = a2 >> 0x28\n 12378: u8 [a0 + 0x5] = a1\n 12381: a1 = a2 >> 0x20\n 12384: u8 [a0 + 0x4] = a1\n 12387: a1 = a2 >> 0x18\n 12390: u8 [a0 + 0x3] = a1\n 12393: a1 = a2 >> 0x10\n 12396: u8 [a0 + 0x2] = a1\n 12399: a1 = a2 >> 0x8\n 12402: u8 [a0 + 0x1] = a1\n 12405: u8 [a0] = a2\n 12407: a1 = a3 >> 0x38\n 12410: u8 [a0 + 0x1f] = a1\n 12413: a1 = a3 >> 0x30\n 12416: u8 [a0 + 0x1e] = a1\n 12419: a1 = a3 >> 0x28\n 12422: u8 [a0 + 0x1d] = a1\n 12425: a1 = a3 >> 0x20\n 12428: u8 [a0 + 0x1c] = a1\n 12431: a1 = a3 >> 0x18\n 12434: u8 [a0 + 0x1b] = a1\n 12437: a1 = a3 >> 0x10\n 12440: u8 [a0 + 0x1a] = a1\n 12443: a1 = a3 >> 0x8\n 12446: u8 [a0 + 0x19] = a1\n 12449: i32 a0 = s1 + 0x340\n 12453: ecalli 4 // 'caller'\n 12455: a0 = u32 [s1 + 0x350]\n 12459: u64 [s1 + 0x170] = a0\n 12463: a0 = u64 [s1 + 0x348]\n 12467: u64 [s1 + 0x118] = a0\n 12471: a0 = u64 [s1 + 0x340]\n 12475: u64 [s1 + 0x178] = a0\n 12479: a0 = 0x40\n 12482: a1 = 0x20\n 12485: ra = 132, jump @0\n      : @157 [@dyn 66] (gas: 100)\n 12491: a1 = u8 [a0 + 0x11]\n 12494: a2 = u8 [a0 + 0x10]\n 12497: a3 = u8 [a0 + 0x12]\n 12500: a4 = u8 [a0 + 0x13]\n 12503: a1 = a1 << 0x8\n 12506: a1 = a1 | a2\n 12509: a3 = a3 << 0x10\n 12512: a4 = a4 << 0x18\n 12515: a3 = a3 | a4\n 12518: a1 = a1 | a3\n 12521: a2 = u8 [a0 + 0x15]\n 12524: a3 = u8 [a0 + 0x14]\n 12527: a4 = u8 [a0 + 0x16]\n 12530: a5 = u8 [a0 + 0x17]\n 12533: a2 = a2 << 0x8\n 12536: a2 = a2 | a3\n 12539: a4 = a4 << 0x10\n 12542: a5 = a5 << 0x18\n 12545: a4 = a4 | a5\n 12548: a2 = a2 | a4\n 12551: a2 = a2 << 0x20\n 12554: t0 = a2 | a1\n 12557: a2 = u8 [a0 + 0x1]\n 12560: a3 = u8 [a0]\n 12562: a4 = u8 [a0 + 0x2]\n 12565: a5 = u8 [a0 + 0x3]\n 12568: a2 = a2 << 0x8\n 12571: a2 = a2 | a3\n 12574: a4 = a4 << 0x10\n 12577: a5 = a5 << 0x18\n 12580: a4 = a4 | a5\n 12583: a2 = a2 | a4\n 12586: a3 = u8 [a0 + 0x5]\n 12589: a4 = u8 [a0 + 0x4]\n 12592: a5 = u8 [a0 + 0x6]\n 12595: a1 = u8 [a0 + 0x7]\n 12598: a3 = a3 << 0x8\n 12601: a3 = a3 | a4\n 12604: a5 = a5 << 0x10\n 12607: a1 = a1 << 0x18\n 12610: a1 = a1 | a5\n 12613: a1 = a1 | a3\n 12616: a1 = a1 << 0x20\n 12619: t1 = a1 | a2\n 12622: a1 = u8 [a0 + 0x19]\n 12625: a3 = u8 [a0 + 0x18]\n 12628: a4 = u8 [a0 + 0x1a]\n 12631: a5 = u8 [a0 + 0x1b]\n 12634: a1 = a1 << 0x8\n 12637: a1 = a1 | a3\n 12640: a4 = a4 << 0x10\n 12643: a5 = a5 << 0x18\n 12646: a4 = a4 | a5\n 12649: a1 = a1 | a4\n 12652: a3 = u8 [a0 + 0x1d]\n 12655: a4 = u8 [a0 + 0x1c]\n 12658: a5 = u8 [a0 + 0x1e]\n 12661: a2 = u8 [a0 + 0x1f]\n 12664: a3 = a3 << 0x8\n 12667: a3 = a3 | a4\n 12670: a5 = a5 << 0x10\n 12673: a2 = a2 << 0x18\n 12676: a2 = a2 | a5\n 12679: a2 = a2 | a3\n 12682: a2 = a2 << 0x20\n 12685: a3 = a2 | a1\n 12688: a1 = u8 [a0 + 0x9]\n 12691: a2 = u8 [a0 + 0x8]\n 12694: a4 = u8 [a0 + 0xa]\n 12697: a5 = u8 [a0 + 0xb]\n 12700: a1 = a1 << 0x8\n 12703: a1 = a1 | a2\n 12706: a4 = a4 << 0x10\n 12709: a5 = a5 << 0x18\n 12712: a4 = a4 | a5\n 12715: a1 = a1 | a4\n 12718: a2 = u8 [a0 + 0xd]\n 12721: a4 = u8 [a0 + 0xc]\n 12724: a5 = u8 [a0 + 0xe]\n 12727: a0 = u8 [a0 + 0xf]\n 12730: a2 = a2 << 0x8\n 12733: a2 = a2 | a4\n 12736: a5 = a5 << 0x10\n 12739: a0 = a0 << 0x18\n 12742: a0 = a0 | a5\n 12745: a0 = a0 | a2\n 12748: a0 = a0 << 0x20\n 12751: a0 = a0 | a1\n 12754: a1 = reverse a0\n 12756: a0 = reverse a3\n 12758: a2 = reverse t1\n 12760: a3 = reverse t0\n 12762: a2 = a2 | a3\n 12765: a3 = a0 | a1\n 12768: a3 = a3 | a2\n 12771: a3 = a3 >> 0x20\n 12774: a1 = a1 | a2\n 12777: a1 = a1 << 0x20\n 12780: a1 = a1 | a3\n 12783: jump @161 if a1 != 0\n      : @158 (gas: 18)\n 12787: a1 = u64 [s1 + 0x118]\n 12791: a1 = reverse a1\n 12793: a2 = a1 << 0x20\n 12796: a3 = u64 [s1 + 0x170]\n 12800: a3 = reverse a3\n 12802: a3 = a3 >> 0x20\n 12805: a2 = a2 | a3\n 12808: u64 [s1 + 0x170] = a2\n 12812: a2 = u64 [s1 + 0x178]\n 12816: a2 = reverse a2\n 12818: a2 = a2 << 0x20\n 12821: a1 = a1 >> 0x20\n 12824: a1 = a1 | a2\n 12827: u64 [s1 + 0x118] = a1\n 12831: i32 a0 = a0 + 0\n 12833: u64 [s1 + 0xf0] = a0\n 12837: a1 = 0x20\n 12840: ra = 134, jump @0\n      : @159 [@dyn 67] (gas: 67)\n 12846: a1 = u64 [s1 + 0x150]\n 12850: u8 [a0 + 0x10] = a1\n 12853: a1 = u64 [s1 + 0xa0]\n 12857: u8 [a0 + 0xf] = a1\n 12860: a1 = u64 [s1 + 0x98]\n 12864: u8 [a0 + 0xe] = a1\n 12867: a1 = u64 [s1 + 0x90]\n 12871: u8 [a0 + 0xd] = a1\n 12874: a1 = u64 [s1 + 0x88]\n 12878: u8 [a0 + 0xc] = a1\n 12881: a1 = u64 [s1 + 0x80]\n 12885: u8 [a0 + 0xb] = a1\n 12888: a1 = u64 [s1 + 0x78]\n 12891: u8 [a0 + 0xa] = a1\n 12894: a1 = u64 [s1 + 0x70]\n 12897: u8 [a0 + 0x9] = a1\n 12900: a1 = u64 [s1 + 0x158]\n 12904: u8 [a0 + 0x8] = a1\n 12907: a1 = u64 [s1 + 0x68]\n 12910: u8 [a0 + 0x7] = a1\n 12913: a1 = u64 [s1 + 0x60]\n 12916: u8 [a0 + 0x6] = a1\n 12919: a1 = u64 [s1 + 0x58]\n 12922: u8 [a0 + 0x5] = a1\n 12925: a1 = u64 [s1 + 0x50]\n 12928: u8 [a0 + 0x4] = a1\n 12931: a1 = u64 [s1 + 0x48]\n 12934: u8 [a0 + 0x3] = a1\n 12937: a1 = u64 [s1 + 0x40]\n 12940: u8 [a0 + 0x2] = a1\n 12943: a1 = u64 [s1 + 0x38]\n 12946: u8 [a0 + 0x1] = a1\n 12949: a1 = u64 [s1 + 0x168]\n 12953: u8 [a0] = a1\n 12955: a1 = u64 [s1 + 0x160]\n 12959: u8 [a0 + 0x18] = a1\n 12962: a1 = u64 [s1 + 0x108]\n 12966: u8 [a0 + 0x17] = a1\n 12969: a1 = u64 [s1 + 0x100]\n 12973: u8 [a0 + 0x16] = a1\n 12976: a1 = u64 [s1 + 0xf8]\n 12980: u8 [a0 + 0x15] = a1\n 12983: a1 = u64 [s1 + 0xc8]\n 12987: u8 [a0 + 0x14] = a1\n 12990: a1 = u64 [s1 + 0xc0]\n 12994: u8 [a0 + 0x13] = a1\n 12997: a1 = u64 [s1 + 0xb8]\n 13001: u8 [a0 + 0x12] = a1\n 13004: a1 = u64 [s1 + 0xb0]\n 13008: u8 [a0 + 0x11] = a1\n 13011: a1 = u64 [s1 + 0x148]\n 13015: u8 [a0 + 0x1f] = a1\n 13018: a1 = u64 [s1 + 0x140]\n 13022: u8 [a0 + 0x1e] = a1\n 13025: a1 = u64 [s1 + 0x138]\n 13029: u8 [a0 + 0x1d] = a1\n 13032: a1 = u64 [s1 + 0x130]\n 13036: u8 [a0 + 0x1c] = a1\n 13039: a1 = u64 [s1 + 0x128]\n 13043: u8 [a0 + 0x1b] = a1\n 13046: a1 = u64 [s1 + 0x120]\n 13050: u8 [a0 + 0x1a] = a1\n 13053: a1 = u64 [s1 + 0x110]\n 13057: u8 [a0 + 0x19] = a1\n 13060: a1 = 0x20\n 13063: a0 = u64 [s1 + 0xf0]\n 13067: ra = 136, jump @0\n      : @160 [@dyn 68] (gas: 29)\n 13073: a1 = u64 [0x20000]\n 13078: a2 = u64 [0x20008]\n 13083: a3 = u64 [0x20010]\n 13088: a4 = u64 [0x20018]\n 13093: u64 [s1 + 0x3b8] = a1\n 13097: u64 [s1 + 0x3b0] = a2\n 13101: u64 [s1 + 0x3a8] = a3\n 13105: u64 [s1 + 0x3a0] = a4\n 13109: a1 = u64 [s1 + 0x118]\n 13113: a1 = reverse a1\n 13115: a2 = u64 [s1 + 0x170]\n 13119: a2 = reverse a2\n 13121: a3 = u64 [s1 + 0x178]\n 13125: a3 = a3 << 0x20\n 13128: u64 [s1 + 0x3d8] = a2\n 13132: u64 [s1 + 0x3d0] = a1\n 13136: u64 [s1 + 0x3c8] = a3\n 13140: u64 [s1 + 960] = 0\n 13144: i32 a2 = a0 + 0\n 13146: i32 a0 = s1 + 0x3a0\n 13150: a1 = 0x2\n 13153: a3 = 0x20\n 13156: ecalli 6 // 'deposit_event'\n 13158: sp = s0 + 0xfffffffffffffc00\n 13162: ra = u64 [sp + 0x3f8]\n 13166: s0 = u64 [sp + 0x3f0]\n 13170: s1 = u64 [sp + 0x3e8]\n 13174: sp = sp + 0x400\n 13178: ret\n      : @161 (gas: 1)\n 13180: trap\n      : @162 (gas: 11)\n 13181: ra = 0x8a\n 13185: sp = sp + 0xffffffffffffffc0\n 13188: u64 [sp + 0x38] = ra\n 13191: u64 [sp + 0x30] = s0\n 13194: u64 [sp + 0x28] = s1\n 13197: s0 = sp + 0x40\n 13200: sp = sp & 0xffffffffffffffe0\n 13203: a0 = 0x40\n 13206: a1 = 0x20\n 13209: ra = 0x5c\n 13212: jump @0\n      : @163 [@dyn 69] (gas: 8)\n 13215: u64 [s1 + 432] = 0\n 13219: u64 [s1 + 424] = 0\n 13223: u64 [s1 + 416] = 0\n 13227: a0 = 0x4e487b7100000000\n 13237: a1 = s1 + 0x1a0\n 13241: u64 [s1 + 0x1b8] = a0\n 13245: a0 = 0\n 13247: ra = 140, jump @8\n      : @164 [@dyn 70] (gas: 7)\n 13253: u64 [s1 + 408] = 0\n 13257: u64 [s1 + 400] = 0\n 13261: u64 [s1 + 384] = 0x12\n 13266: a0 = 0x4\n 13269: a1 = s1 + 0x180\n 13273: u64 [s1 + 392] = 0\n 13277: ra = 142, jump @8\n      : @165 [@dyn 71] (gas: 3)\n 13283: a1 = 0x24\n 13286: a0 = 0\n 13288: ra = 144, jump @0\n      : @166 [@dyn 72] (gas: 7)\n 13294: i32 a1 = a0 + 0\n 13296: a0 = 0x1\n 13299: a2 = 0x24\n 13302: ecalli 13 // 'seal_return'\n 13304: a1 = 0\n 13306: ra = 0x92\n 13310: jump @0\n      : @167 (gas: 2)\n 13313: a1 = 0\n 13315: ra = 146, jump @0\n      : @168 [@dyn 73] (gas: 7)\n 13321: i32 a1 = a0 + 0\n 13323: a0 = 0x1\n 13326: a2 = 0\n 13328: ecalli 13 // 'seal_return'\n 13330: a0 = 0\n 13332: ra = 0x94\n 13336: jump @10\n      : @169 [export #0: 'call'] (gas: 2)\n 13339: a0 = 0\n 13341: ra = 148, jump @10\n      : @170 [@dyn 74] [export #1: 'deploy'] (gas: 2)\n 13347: a0 = 0x1\n 13350: ra = 150, jump @10\n      : @171 [@dyn 75] (gas: 24)\n 13356: sp = sp + 0xffffffffffffffb0\n 13359: u64 [sp + 0x48] = ra\n 13362: u64 [sp + 0x40] = s0\n 13365: s0 = sp + 0x50\n 13368: sp = sp & 0xfffffffffffffff0\n 13371: t0 = u64 [a0]\n 13373: t1 = u64 [a0 + 0x8]\n 13376: a4 = u64 [a0 + 0x10]\n 13379: a0 = u64 [a0 + 0x18]\n 13382: a5 = u64 [a1]\n 13384: a2 = u64 [a1 + 0x8]\n 13387: a3 = u64 [a1 + 0x10]\n 13390: a1 = u64 [a1 + 0x18]\n 13393: u64 [sp + 0x18] = a1\n 13396: u64 [sp + 0x10] = a3\n 13399: u64 [sp + 0x8] = a2\n 13402: u64 [sp] = a5\n 13404: u64 [sp + 0x38] = a0\n 13407: u64 [sp + 0x30] = a4\n 13410: u64 [sp + 0x28] = t1\n 13413: a0 = sp + 0x20\n 13416: a1 = sp\n 13418: u64 [sp + 0x20] = t0\n 13421: ra = 152, jump @96\n      : @172 [@dyn 76] (gas: 5)\n 13427: sp = s0 + 0xffffffffffffffb0\n 13430: ra = u64 [sp + 0x48]\n 13433: s0 = u64 [sp + 0x40]\n 13436: sp = sp + 0x50\n 13439: ret\n",
						"bytecode": {
							"object": "50564d0000123d000000000000010700c13000c000400320a604e9615211807dc69fc65ecc9ef30bfd36a1fa27ed96c539658f7e10a1d9cf04811211000000000400000012000000200000002e000000340000003d0000004a0000005500000064000000670000007400000084000000940000009f000000b1000000bc00000063616c6c63616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a6563616c6c6572636f64655f73697a656465706f7369745f6576656e746765745f73746f72616765686173685f6b656363616b5f3235366e6f777265665f74696d655f6c65667472657475726e5f646174615f636f707972657475726e5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051102b41b0463616c6cb423066465706c6f7906bbae4c02b48165004d015201740178028003b104c604ea04f6041005bd05cf05fd052b06400664070f09220a3a0a440a520a670a970aaf0a050c120c9e0ccf0de50db50ec20e6a119b12bb1267137413b313be13ef14071513152b153815941540169317bf17cc173418a619bc1a891b2b1ccf1ca61ddf1e4a29a22a822b402db22e482f582fde2fcb302e3211339f33c533e333ee33093423342c3473348b791052093b3309010001ae9833c8780883881f8488e0553801000128390a200002ae8a123d082000023308300002c8870732003308300002c88707320000009511d87b10207b15187b161082897b19088289087b1982851082861883773308205010029f6f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a03013d0724000251050750100409501006a903951120ff7b10d8007b15d0007b16c8009515e0008411e033074033082050100891fe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146074911584911404911484911508317400a1001821750821858821948821a40d49808d4a707d487075207ac0295172033000a9511907b10687b15607b16589515708411f039062400027b17089767209877204911284911207b171095173095181049111833002e951160ff7b1098007b1590007b1688009515a0008411f08289187b19308289107b19288289087b192082887b18187b1738330740330820330022288bfd8217207b17188217287b17108017307b17084921980049219000492188003306017b1680004921b8004921b0004921a8004921a0004811602083188000831aa000831b603309ff33070a074921980049219000492188007b1680004921b8004921b0004921a8004921a0000583188000831aa0003309ff330b2033070a0f492198004921900049218800492180004921b8004921b0004921a8004921a0004811602083188000831aa000831b603309ff33070a078017b4009777208218b800821908d49707492198004921900049218800492180007b18b8007b17b0008217107b17a8008217187b17a00083188000831aa0003309ff330b2033070a0f33074033082050100c85fc7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100e54fb837833070133090a0d018366646733085010103ffb8377330833090a0101390828000251080d330730000383770a0e01646733085010121bfb8378330733093300140a0d019511c07b10387b15309515408411e0330740330820501016f5fa46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617034617024617014607390824000246170646170546170453180447831733080a020181171c51470935f60e7951475c2ad51544524792efec152b3300189511c07b10387b15309515408411e0491118491110491108490183170a1028d20d33001a9511f87b10330733083300562834fa33001c951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a1028020b33001e951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a102802069511f07b10087b156475330740330820501020c5f97c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032007c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c761797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a097c7b087c7c0a7c760b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b0d7c7c0c7c760e7c780f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78017c7b7c7c027c7603978808d4b80897cc10976618d46c0cd4c8087c7b057c7c047c76067c770797bb08d4cb0b976610977718d46707d4b707977720d487076f736fa46f966f2c82181895871fd88708821a20c88a09d8a90ada880a821828c88a0ad88a08821b30c8b8088477e0c8c7077b1c287b1710d8c70bc86909c8b90cd36c097b1630d86c07da9b07c84a0ac87a0bd8ab06d84a09c83808c89808c886068eb88e69da6809d46b087b1c088ecadb890a520a2301d84b08d33609d8360ada980ad34b08d49808db8a0752070a013307403308207b14207b13187b1b501024f6f66f6882196f99821a086faa821b106fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217388218287b788218187b78188218307b78088218207b7810955160ff8210980082159000821688009511a0003200491170491168491160140700000000717b484e9518607b1778330750102623f6491158491150491140413307049518404911485010280bf6330824330750102ac1f5837833070133092433002c0a0d01808910828a0882884917187b79107b7a087b783200821848821940821a38821730d4a808d4970ad48a0a98aa20d49808978820d4a8085208730183777b1764685010306ef58377646833090a010154161f5c01330820821750103256f57c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c7c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d489097c78017c7a7c7b027c7c03978808d4a80897bb1097cc18d4cb0bd4b8087c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a8086f826f99140a0000000001000000d39a0ad42a0a989b2088bb01942b93ab510bac007c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78117c7b107c7c127c7613978808d4b80897cc10976618d46c0cd4c8087c7b157c7c147c76167c771797bb08d4cb0b976610977718d46707d4b707977720d487076f776fa8821a087ba87ba7087ba9107ba2189551908210688215608216589511703200003307330850103400f4837833070133093300360a0d01828918828a10828b0882887b79187b7a107b7b087b783200821730821838821928821a20d49808d4a707d487075207870139072400025417037e01491158491150491148491140014911784911704911684911604821800020831840831a60831b80003309ff33070a078217787b178217707b17088217687b17108217607b171833074033082050103867f37c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850103a36f2837833070133090a0d018376330820646750103c20f282186f888219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330820646750103e50f1837833092033073300400a0d019511a07b10587b15507b16487b178283828008828b108288188292829a0882941882991098253d97a603d4650598aa3d979603d46a0a98993d974403d494069724038e698eacdb690c8e5788490001859401db5704d46a0adbac0446114746114646114546114446114346114246114146114046113f46113e46113d46113c46113b46113a46113946113846113746113646113546113446113346113246113146113046112f46112e46112d46112c46112b46112a461129461128781820781b1878101078130898873878172798873078172698872878172598872078172498871878172398871078172298880878182198b73878171f98b73078171e98b72878171d98b72078171c98b71878171b98b71078171a98bb08781b1998073878171798073078171698072878171598072078171498071878171398071078171298070878171198373878170f98373078170e98372878170d98372078170c98371878170b98371078170a98370878170984281f951708c878087c87097c89087c8a0a7c8b0b977708d4970797aa1097bb18d4ba0ad4a7077c890d7c8a0c7c8b0e7c8c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d4790a7c87017c897c8b027c8c03977708d4970797bb1097cc18d4cb0bd4b7077c89057c8b047c8c067c8607979908d4b90997cc10976618d46c0cd4c909979920d497077c89117c8b107c8c127c8813979908d4b90997cc10978818d4c808d498089447944a944882194919187b98107b9a087b978210588215508216489511603200821730821838821928821a20d49808d4a707d4870752078101390724000254170378014911584911504911484911404911784911704911684911604821800020831840831a60831b80003309ff33070a078217707b17088217687b17108217607b17183307403308205010429bee7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851081700330733085010446aed837833070133090a0d0182180897882098862083777b17083308205010464aed6f688219106f99821a186faa98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882078780c3308208217085010489eec8378330920330733004a0a0d01828918828a10828b0882887b79187b7a107b7b087b783200821710821818821908821ad49808d4a707d487075207460139072400025417033d0150104c1e0433074033082050104e47ec7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851081e003307330850105016eb837833070133090a0d83773300522803eb8377501052feea8378330733093300540a0d01828918828a10828b0882887b79187b7a107b7b087b783200837833070133093300580a0d0182889788207b781849171049170849073200828910828a18828b088288d4ba0ad4980bd4ab0b98bb20d4a909979920d4b9095209d5009511e07b10187b15107b1608827910827a087b1a8276979920989520838733082050105a71ea6f5882196f996f6a98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882078780c8210188215108216089511203200007c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa77b17086f977b17186f277b17100a0c01821a08821818821910d49808d46a09d48909989920d46808978820d49808520839647698772052073183a783687b18187b171050105e72e87a1620837783182033090a0b01811720821818ac870c0a0c01987820510804008376821710646850106046e8837833070164693300620a0d01951100fc7b10f8037b15f0037b16e803951500048411e06416836740020a09826758027b672801826750027b673001826748027b673801826740027b674001836760020a04806770027b671001826768027b670001826760027b670801330740330820501064d1e77c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c781797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78097c7a087c7b0a7c7c0b978808d4a80897bb1097cc18d4cb0bd4b8087c7a0d7c7b0c7c7c0e7c790f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78017c797c7b027c7c03978808d4980897bb1097cc18d4cb0bd4b8087c79057c7b047c7c067c7707979908d4b90997cc10977718d4c707d49707977720d487076f796faa6f386f27957b207b674801d87b07c8780c7b685001d88c08da7708c8a8087b6a5801d8a8077b696001c879097b6b7801d48b077b6c68017b691801d4c909d497079877207b682001d49808978820d4870751070628e919816778013308207b6770015010665fe6826828016f88826930016f99826a38016faa826b40016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880882692001826a1801d4a90b140900000000010000007b6938011409e0ffffff00000000826a7801d89a09826a680194a97b6b400194b978780152090628d2188267700183772033082050106849e546171f46171e46171d46171c46171b46171a46171946171846171746171646171546171482691001787910826a000198a83878780f98a83078780e98a82878780d98a82078780c98a81878780b98a81078780a98a808787809787a08826a080198a83878780798a83078780698a82878780598a82078780498a81878780398a81078780298a808787801787a989818787813989810787812989808826938019599cc826a7801d89a09826a680194a9826a400194a97878115209062805188267700183773433082050106a7ce446171e4046171df00046171c9b0046171bbc0046171ae10046171908826b5801826a4801d4ba0882696001826c5001d4c909d49808988820d4b909979920d4980846171f46171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460751080628621783a77b67780133082050106cdae346171f5446171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460782674801957880007b686801d8780782685001c878097b694801d88908da770882675801c878087b685001d8780782686001c887077b67600133074033082050106e36e3826860016f88826950016f99826a48016faa826b68016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b1898ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298ab08787b11787a10787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330820826778015010705fe27c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851080628af1483787b6878018267700150107226e19518e08488e07b686001648183778389826878010a08826860018287187b6768018287107b6770018287087b67580182877b67600149267803492670034926680349266003014926b8034926b0034926a8034926a003482680032083686003836aa003836b80033309ff33070a0701826bb803826cb003826aa8038269a003d4ba07d4c908d487077b677801520706283114826758016f70826768016f777b67c8006473826760016f74826770016f727b691001689895884068a97b6af800daa809959a8000d89a08d4bc0794787b6c080168c9959c4068b97b6b0001dabc09da7a09682a683b95bc40db2a0c684a680b95bb40db4a0b95ca8000d8ca07d4400cdaca0b94c7d8b90ad37803d8780cda3a0cc97808c9a80888ca0195aaffc9b90b9ac38e378ea9daa7097b6b700188b700018577018e8bdb8b07dbc907d44209826cc800d40c0bd4b909826b780188bb01889901d4b9097b64b0007b60b8007b62c000d4970794749470947264cb947b52072808826c700185c7ff00d43707d4a809d497075107130895c9017b697801889701c887077b675001d49707887701c837077b674801d83707c8a7077b6740018268c8007868200246261f0246261e0246261d0246261c0246261b0246261a024626190246261802462617024626160246261502462614024626130246261202462611024626100246260f0246260e0246260d0246260c0246260b0246260a0246260902462608024626070246260602462605024626040246260302462602024626010246260002826ac000786a28029887387b672801786727029887307b672001786726029887287b671801786725028dc2ff0097273898773b95692002c979099887207b679000786724029887187b678800786723029887107b678000786722029888087b6878786821028267b8007867300298a8387b687078682f0298a8307b686878682e0298a8287b686078682d0298a8207b685878682c0298a8187b685078682b0298a8107b684878682a0298aa087b6a40786a29028260b000786038029878387b6838786837029878307b6830786836029878287b6828786835029878207b6820786834029878187b6818786833029878107b6810786832029877087b67f000786731029807387b67e80078673f029807307b67e00078673e029807287b67d80078673d029807207b67d00078673c029807187b67a80078673b029807107b67a00078673a029807087b679800786739027c97197c98187c9b1a7c9c1b977708d4870797bb1097cc18d4cb0bd4b7077c981d7c9b1c7c9c1e7c9a1f978808d4b80897cc1097aa18d4ca0ad4a808978820d478037c97117c98107c9a127c9c13977708d4870797aa1097cc18d4ca0ad4a7077c98157c9a147c9c167c9b17978808d4a80897cc1097bb18d4cb0bd4b808978820d47804842a07cfa307984c0185a23fd02c0cd4c7077b6770017c97097c9c087c9b0a7c980b977708d4c70797bb10978818d4b808d478037c980d7c9b0c7c9c0e7c970f978808d4b80897cc10977718d4c707d48707977720d4370398370185a8ffd08707cfa408d487077b6768017c97017c987c9b027c9c03977708d4870797bb1097cc18d4cb0bd4b7077c98057c9b047c9c067c9907978808d4b808826b500197cc10979918d4c90982644001d49808978820d48707987801d02808cfa309826c4801d498087b685801d44b0882697801d4c909d49808cfa7077b67600151086a044926380149263001826728017867c701826720017867c601826718017867c501826790007867c401826788007867c301826780007867c2018267787867c1018267707867cf018267687867ce018267607867cd018267587867cc018267507867cb018267487867ca018267407867c9018267387867d7018267307867d6018267287867d5018267207867d4018267187867d3018267107867d2014626ff014626fe014626fd014626fc014626fb014626fa014626f9014626f8014626f7014626f6014626f5014626f4014626f3014626f2014626f1014626f0014626ef014626ee014626ed014626ec014626eb014626ea014626e9014626e8014626e7014626e6014626e5014626e4014626e3014626e2014626e1014626e0018267c8007867c0018267c0007867c8018267b8007867d0017860d8018267f0007867d1018267e8007867df018267e0007867de018267d8007867dd018267d0007867dc018267a8007867db018267a0007867da01826798007867d9018263780197373898773b956ac001c87a0a7ca7117ca8107ca9127cab13977708d4870797991097bb18d4b909d497077ca8157ca9147cab167cac17978808d4980897bb1097cc18d4cb0bd4b808978820d47802843c077ca7197ca8187cab1a7ca91b977708d4870797bb109799187ca81dd4b909d479037ca91c9788087cab1e7ca71fd49808d0c20997bb10977718d4b707d48707977720d4370397370185c43fcf4707d497077b6728017ca7097ca8087ca90a7cab0b977708d4870797991097bb18d4b909d479007ca80d7ca90c7cab0e7ca70f978808d4980897bb10977718d4b707d48707977720d4070097220185c7ffcf7207d0c009d479097ca7017cab7ca8027ca203977708d4b707978810972218d48208d478027ca8057cab047ca7067caa07978808d4b80897771097aa18d4a707d48707977720d42707d0c707970001cf400b6494d4b702d0c300826c3801826810018887018269f800c979077b67e800d4980788770182690801c9790a7b6ae000d8790782690001c979097b69d8009588ff7b68d000017b6c38014926f00098283f974c016443d48c04972b01826a700198ac3fd4cb0b7b6b20018268e800d34807d848088269d000d8b90cdb780c9708018262280198273fd478007b60180198393f972201d4920897a70182696801989a3fd4a702979a0182675801987b3fd4ba0a977b018269600198973fd4b707979b0182693801d4b9097b69600182693001d497077b675801d49a0a7b6a6801d429077b6770018269e000c98907d8c707d8890a8269d800c9090bc9ab0bc97b0b99bc3f82671001d27c097b693801826bf800d2cb0bd3b40ad8b40282672001d89703daa302826a0801d2ca0ac9a809c929007b602801d82902d8a808826a0001d2ca0a82691801c9a90ac98a0ac92a00c9b408c9380482683801c9870282697801826b5001d4b907887701826a4801d87a08c97a07889a01c9ab0b826a4001c98a0a9599ff7b6b50017b6a4001d4ab087b697801d4790ad4a80884cc017b674801492630015208a1fe2809330c4926f000018269680198973f82687001978801d48707826a580198a83f979901d49808826b600198b93f97aa0197bb01d4cb0b826cf000d4c909d4a902d48c00d47c04017b6420017b6228017b6030017b6b3801492678034926700349266803492660034926b8034926b0034926a8034926a003482680032083686003836aa003836b80033309ff33070a078267a0037b6778018267b0037b6770018267a8037b676801836780020a04816790027b675001826780027b674801826788027b674001826768016f77977820826970016f99989920d4890a987720826878016f88978920d497079888207b67e8007b67a8027b6a18017b6aa0027b68f0007a68b0028367a0020a05015107c60a330740330820501074bbd67c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489037c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d4890c7c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c770f979908d4a90997bb10977718d4b707d49707977720d487077b67a8006f797b6cd0006fc87b62e0006f2a7b63d8006f377b6768017b6a5801d4a7077b687001d49808d478089888207b696001d49707977720d487075207ee08816770013308207b67780150107663d546171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170326461702d7004617014146073682686001826a5801d48a0a140800000000010000007b6858011408fcffffff0000000082697001d889088269680194987b6a600194a846170451084008826740016f77987820826948016f99979a20d4a8087b684801977720826850016f88988820d487077b6750019899207b6940018267780183770433082050107883d4826840016f88826948016f99826a50016faa98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d988820826958019599dc826a7001d89a09826a680194a9826a600194a978780c510939078267100182683801d68709826cf800ca8c0ac89a03d8a30ad68c09c8a90b82622801ca2709c89303d89309d6270ac8a909c8b909d8b90bd62c0ac8ba0aca2c0bc89b04d8b409c8a9097b695801826a3001caca09d67a0bc8b909826b2001ca7b0bc8b90082690001ca980b82690801d6980cc8cb0bca920cc8cb0bc8b000ca980bca7a0cc8cb0bd8cb0cc8c00a82695801c8a909c84b0bd84b0aca87008267b000c9a708c99802826ac000d33a07d83a0c8269c800d80908da780c8267b800d8b704c9b70bd8cb07c84707c972077b675001c9cb0b7b6b5801c98a07c937077b674001c909077b6748018267780183772433082050107ac5d2826850016f82826858016f8b826840016f8c826848016f891408bcffffff00000000826a7001d88a08989a387b6a4801787a1f826a680194a8989a307b6a4001787a1e826a600194a8989a287b6a3801787a1d989a207b6a3001787a1c989a187b6a2801787a1b989a107b6a2001787a1a989a087b6a1001787a197b696001787918787c1098c9387b69080178791798c9307b69000178791698c9287b69f80078791598c9207b69c80078791498c9187b69c00078791398c9107b69b8007879127b6c500198cc087b6cb000787c11787b0898b9387b69a00078790f98b9307b69980078790e98b9287b69900078790d98b9207b69880078790c98b9187b69800078790b98b9107b697878790a7b6b580198bb087b6b70787b0978729829387b69687879079829307b69607879069829287b69587879059829207b69507879049829187b69487879039829107b69407879027b6268019829087b69387879015108dd048267780183774433082050107c53d146171f0146171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146070a0a8267e8007b67c802826718017b67c0028267f0007a67d0024926f8024926f0024926e8024926e0023308648267780150107ebdd07b67700182677801330850208000aed04826000349263803ff49263003ff49262803ff49262003ff9568c00297882098882014090000000008000000d498029568e00297882098882095692003979920d4890a8268700197882098882014090000000064000000d4980b97772098772095680003978820d4780c3308ff3309ff64270a015207b1030a0c3307403308205020820028d0826ad000787a188269d8009898387878179898307878169898287878159898207878149898187878139898107878129898087878117879108269a80098983878780f98983078780e98982878780d98982078780c98981878780b98981078780a9898087878097879088269e000989838787807989830787806989828787805989820787804989818787803989810787802989808787801787998a83878781f98a83078781e98a82878781d98a82078781c98a81878781b98a81078781a98a808787819836740030a04806750037b677001826748037b671801826740037b677801330740330820502084003bcf7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80852088d01826818016f88978920826a70016faa98aa20d4a9097b697001826978016f99979920988820d498087b68180183777b67f00033082050208600d8cd826850017878108268a00078780f8268980078780e8268900078780d8268880078780c8268800078780b82687878780a826870787809826858017878088268687878078268607878068268587878058268507878048268487878038268407878028268387878018268680178788268600178781882680801787817826800017878168268f8007878158268c8007878148268c0007878138268b8007878128268b0007878118268480178781f8268400178781e8268380178781d8268300178781c8268280178781b8268200178781a826810017878193308208267f00050208800f5cc3a080000023a090800023a0a1000023a0b1800027b68b8037b69b0037b6aa8037b6ba003826818016f88826970016f99826a780197aa207b69d8037b68d0037b6ac8034926c00383798367a003330802330a200a06955100fc8210f8038215f0038216e8039511000432000033008a009511c07b10387b15307b16289515408411e033074033082033005c2864cc4926b0014926a8014926a001140700000000717b484e9568a0017b67b801330750208c0081cc49269801492690014926800112330704956880014926880150208e0063cc33082433075020900018cc83783307013309240a0d3308330092002802cc330850209200fdcb837833070133090a0d330733009400281bcd33075020940016cd330701502096000dcd9511b07b10487b15409515508411f08272827308827b10827718828c828908828a108288187b18187b1a107b19087b1c7b17387b1b307b132895172064187b122050209800dde09551b0821048821540951150320049489220248414d249525252a22a2529499224499224499224499224499224499224499224494a4a4322444444921092244992244992244992242949d22449124992242149922489888824495292244992444422222222928a8888881091544444444444241589242222229188482a094992244992244992a4244992244992244992244992244992244992244992244992aa244992154aad42d590502b546992240921499224499224499224492149541308049224495225a9924444449224251111912449492a09294992244992244992244992244992244992244992244992244992244992244992aa24a594244992244992244992244992244992244992244992244992a424499224499224a94a92244992244992244992a492944892249124852aa52449922449922449922449922449922449499224499224254912111125092029249124a450922625a9244992245185aa218524499224499224495292244992244992540049529124499224499224499224499224499224959224495aa1942629492549920821492449482295922449429224499224499224294992244992244992244992244992244992244992244992a42a49926485524ba1524a4992244992244992244992244992244992922449922449a19426492529499224495229922449922449922449922449922449922449922449922449922449922449922449922449922449922449922449929224499224499224499224a94a5292942449228424499290442a499224244992244992244992922449922449922449922449922449922449922449922449aa922449562835494928a5244992244992244992a424499224499224499284529aa42495a424114248429224499224499224294992244992244992244992244992244992244992244992a42a499264855225852a4d52922aa52549252949924492249594509524499224499224499294244992244992244992a44992244992244992a42449922449922449922449922449922449922449922449924a294d92244952524948a9499a2c85521a1111298a888888882222229290244992244992244992244992244992244992244992244992a424499224499224a94a24912412894424892449244214455192244992244992244992244992244992a42449922449440288002251942492902449922491489224499224912449922449499248248a9244122284102222114992244992244992244992a4a4488824499224499224499224498a8844228944229184288aa22449922449922449922449922449922449499224499224429224499224499224294992244992244992244992244992244992244992244992a42a499224458424aa28128944111121222244446a44449248a2288aa2284522294a9154524924294992245522529248224944a4aa884812892492441211111111111111111111111111111111111189484422228924221189482222892492482289249288482289249248228944242211894844221291882449922449922449922449922449922449922492244992244992244992444a922449922492449224914824898888888888888848241289442291482412894422222222222222222222222222222222222222222222222222222222228924499224499224499224499224499224499224912449922449922449922425499224499224499292884422894422911891944412914492482249224924892491884422114922492211492289249144224912894822492289482489888a91482249244924c98888888888881011a9888888282222224a94244a121111118d24244992244992244992922449922449922449922449922449922449922449922449a2288a221249224944222449922449922449922489108948001140248a1251a224122591882444519424499224499224499294244992244992244924124589884492249224499224114922894492244912491249249144922412492422095114450144128912891249249144128924914412492491442291249248228924922492942449922449924492882444922449922449922449922415111111119108110511420891049048228924802491241d2541249224499224492449922449924892244992a42449922449a288888824489224499224499224254992244992244992244992244992244992244992244992542549928812251125892241241289442249124992244992248a442291482412894422914824920842082122228a221111455244443492244992880820a220222422484149450a4a15294890242949499294242548920000"
						},
						"deployedBytecode": {
							"object": "50564d0000123d000000000000010700c13000c000400320a604e9615211807dc69fc65ecc9ef30bfd36a1fa27ed96c539658f7e10a1d9cf04811211000000000400000012000000200000002e000000340000003d0000004a0000005500000064000000670000007400000084000000940000009f000000b1000000bc00000063616c6c63616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a6563616c6c6572636f64655f73697a656465706f7369745f6576656e746765745f73746f72616765686173685f6b656363616b5f3235366e6f777265665f74696d655f6c65667472657475726e5f646174615f636f707972657475726e5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051102b41b0463616c6cb423066465706c6f7906bbae4c02b48165004d015201740178028003b104c604ea04f6041005bd05cf05fd052b06400664070f09220a3a0a440a520a670a970aaf0a050c120c9e0ccf0de50db50ec20e6a119b12bb1267137413b313be13ef14071513152b153815941540169317bf17cc173418a619bc1a891b2b1ccf1ca61ddf1e4a29a22a822b402db22e482f582fde2fcb302e3211339f33c533e333ee33093423342c3473348b791052093b3309010001ae9833c8780883881f8488e0553801000128390a200002ae8a123d082000023308300002c8870732003308300002c88707320000009511d87b10207b15187b161082897b19088289087b1982851082861883773308205010029f6f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a03013d0724000251050750100409501006a903951120ff7b10d8007b15d0007b16c8009515e0008411e033074033082050100891fe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146074911584911404911484911508317400a1001821750821858821948821a40d49808d4a707d487075207ac0295172033000a9511907b10687b15607b16589515708411f039062400027b17089767209877204911284911207b171095173095181049111833002e951160ff7b1098007b1590007b1688009515a0008411f08289187b19308289107b19288289087b192082887b18187b1738330740330820330022288bfd8217207b17188217287b17108017307b17084921980049219000492188003306017b1680004921b8004921b0004921a8004921a0004811602083188000831aa000831b603309ff33070a074921980049219000492188007b1680004921b8004921b0004921a8004921a0000583188000831aa0003309ff330b2033070a0f492198004921900049218800492180004921b8004921b0004921a8004921a0004811602083188000831aa000831b603309ff33070a078017b4009777208218b800821908d49707492198004921900049218800492180007b18b8007b17b0008217107b17a8008217187b17a00083188000831aa0003309ff330b2033070a0f33074033082050100c85fc7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100e54fb837833070133090a0d018366646733085010103ffb8377330833090a0101390828000251080d330730000383770a0e01646733085010121bfb8378330733093300140a0d019511c07b10387b15309515408411e0330740330820501016f5fa46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617034617024617014607390824000246170646170546170453180447831733080a020181171c51470935f60e7951475c2ad51544524792efec152b3300189511c07b10387b15309515408411e0491118491110491108490183170a1028d20d33001a9511f87b10330733083300562834fa33001c951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a1028020b33001e951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a102802069511f07b10087b156475330740330820501020c5f97c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032007c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c761797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a097c7b087c7c0a7c760b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b0d7c7c0c7c760e7c780f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78017c7b7c7c027c7603978808d4b80897cc10976618d46c0cd4c8087c7b057c7c047c76067c770797bb08d4cb0b976610977718d46707d4b707977720d487076f736fa46f966f2c82181895871fd88708821a20c88a09d8a90ada880a821828c88a0ad88a08821b30c8b8088477e0c8c7077b1c287b1710d8c70bc86909c8b90cd36c097b1630d86c07da9b07c84a0ac87a0bd8ab06d84a09c83808c89808c886068eb88e69da6809d46b087b1c088ecadb890a520a2301d84b08d33609d8360ada980ad34b08d49808db8a0752070a013307403308207b14207b13187b1b501024f6f66f6882196f99821a086faa821b106fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217388218287b788218187b78188218307b78088218207b7810955160ff8210980082159000821688009511a0003200491170491168491160140700000000717b484e9518607b1778330750102623f6491158491150491140413307049518404911485010280bf6330824330750102ac1f5837833070133092433002c0a0d01808910828a0882884917187b79107b7a087b783200821848821940821a38821730d4a808d4970ad48a0a98aa20d49808978820d4a8085208730183777b1764685010306ef58377646833090a010154161f5c01330820821750103256f57c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c7c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d489097c78017c7a7c7b027c7c03978808d4a80897bb1097cc18d4cb0bd4b8087c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a8086f826f99140a0000000001000000d39a0ad42a0a989b2088bb01942b93ab510bac007c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78117c7b107c7c127c7613978808d4b80897cc10976618d46c0cd4c8087c7b157c7c147c76167c771797bb08d4cb0b976610977718d46707d4b707977720d487076f776fa8821a087ba87ba7087ba9107ba2189551908210688215608216589511703200003307330850103400f4837833070133093300360a0d01828918828a10828b0882887b79187b7a107b7b087b783200821730821838821928821a20d49808d4a707d487075207870139072400025417037e01491158491150491148491140014911784911704911684911604821800020831840831a60831b80003309ff33070a078217787b178217707b17088217687b17108217607b171833074033082050103867f37c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850103a36f2837833070133090a0d018376330820646750103c20f282186f888219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330820646750103e50f1837833092033073300400a0d019511a07b10587b15507b16487b178283828008828b108288188292829a0882941882991098253d97a603d4650598aa3d979603d46a0a98993d974403d494069724038e698eacdb690c8e5788490001859401db5704d46a0adbac0446114746114646114546114446114346114246114146114046113f46113e46113d46113c46113b46113a46113946113846113746113646113546113446113346113246113146113046112f46112e46112d46112c46112b46112a461129461128781820781b1878101078130898873878172798873078172698872878172598872078172498871878172398871078172298880878182198b73878171f98b73078171e98b72878171d98b72078171c98b71878171b98b71078171a98bb08781b1998073878171798073078171698072878171598072078171498071878171398071078171298070878171198373878170f98373078170e98372878170d98372078170c98371878170b98371078170a98370878170984281f951708c878087c87097c89087c8a0a7c8b0b977708d4970797aa1097bb18d4ba0ad4a7077c890d7c8a0c7c8b0e7c8c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d4790a7c87017c897c8b027c8c03977708d4970797bb1097cc18d4cb0bd4b7077c89057c8b047c8c067c8607979908d4b90997cc10976618d46c0cd4c909979920d497077c89117c8b107c8c127c8813979908d4b90997cc10978818d4c808d498089447944a944882194919187b98107b9a087b978210588215508216489511603200821730821838821928821a20d49808d4a707d4870752078101390724000254170378014911584911504911484911404911784911704911684911604821800020831840831a60831b80003309ff33070a078217707b17088217687b17108217607b17183307403308205010429bee7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851081700330733085010446aed837833070133090a0d0182180897882098862083777b17083308205010464aed6f688219106f99821a186faa98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882078780c3308208217085010489eec8378330920330733004a0a0d01828918828a10828b0882887b79187b7a107b7b087b783200821710821818821908821ad49808d4a707d487075207460139072400025417033d0150104c1e0433074033082050104e47ec7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851081e003307330850105016eb837833070133090a0d83773300522803eb8377501052feea8378330733093300540a0d01828918828a10828b0882887b79187b7a107b7b087b783200837833070133093300580a0d0182889788207b781849171049170849073200828910828a18828b088288d4ba0ad4980bd4ab0b98bb20d4a909979920d4b9095209d5009511e07b10187b15107b1608827910827a087b1a8276979920989520838733082050105a71ea6f5882196f996f6a98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882078780c8210188215108216089511203200007c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa77b17086f977b17186f277b17100a0c01821a08821818821910d49808d46a09d48909989920d46808978820d49808520839647698772052073183a783687b18187b171050105e72e87a1620837783182033090a0b01811720821818ac870c0a0c01987820510804008376821710646850106046e8837833070164693300620a0d01951100fc7b10f8037b15f0037b16e803951500048411e06416836740020a09826758027b672801826750027b673001826748027b673801826740027b674001836760020a04806770027b671001826768027b670001826760027b670801330740330820501064d1e77c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c781797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78097c7a087c7b0a7c7c0b978808d4a80897bb1097cc18d4cb0bd4b8087c7a0d7c7b0c7c7c0e7c790f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78017c797c7b027c7c03978808d4980897bb1097cc18d4cb0bd4b8087c79057c7b047c7c067c7707979908d4b90997cc10977718d4c707d49707977720d487076f796faa6f386f27957b207b674801d87b07c8780c7b685001d88c08da7708c8a8087b6a5801d8a8077b696001c879097b6b7801d48b077b6c68017b691801d4c909d497079877207b682001d49808978820d4870751070628e919816778013308207b6770015010665fe6826828016f88826930016f99826a38016faa826b40016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880882692001826a1801d4a90b140900000000010000007b6938011409e0ffffff00000000826a7801d89a09826a680194a97b6b400194b978780152090628d2188267700183772033082050106849e546171f46171e46171d46171c46171b46171a46171946171846171746171646171546171482691001787910826a000198a83878780f98a83078780e98a82878780d98a82078780c98a81878780b98a81078780a98a808787809787a08826a080198a83878780798a83078780698a82878780598a82078780498a81878780398a81078780298a808787801787a989818787813989810787812989808826938019599cc826a7801d89a09826a680194a9826a400194a97878115209062805188267700183773433082050106a7ce446171e4046171df00046171c9b0046171bbc0046171ae10046171908826b5801826a4801d4ba0882696001826c5001d4c909d49808988820d4b909979920d4980846171f46171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460751080628621783a77b67780133082050106cdae346171f5446171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460782674801957880007b686801d8780782685001c878097b694801d88908da770882675801c878087b685001d8780782686001c887077b67600133074033082050106e36e3826860016f88826950016f99826a48016faa826b68016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b1898ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298ab08787b11787a10787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330820826778015010705fe27c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851080628af1483787b6878018267700150107226e19518e08488e07b686001648183778389826878010a08826860018287187b6768018287107b6770018287087b67580182877b67600149267803492670034926680349266003014926b8034926b0034926a8034926a003482680032083686003836aa003836b80033309ff33070a0701826bb803826cb003826aa8038269a003d4ba07d4c908d487077b677801520706283114826758016f70826768016f777b67c8006473826760016f74826770016f727b691001689895884068a97b6af800daa809959a8000d89a08d4bc0794787b6c080168c9959c4068b97b6b0001dabc09da7a09682a683b95bc40db2a0c684a680b95bb40db4a0b95ca8000d8ca07d4400cdaca0b94c7d8b90ad37803d8780cda3a0cc97808c9a80888ca0195aaffc9b90b9ac38e378ea9daa7097b6b700188b700018577018e8bdb8b07dbc907d44209826cc800d40c0bd4b909826b780188bb01889901d4b9097b64b0007b60b8007b62c000d4970794749470947264cb947b52072808826c700185c7ff00d43707d4a809d497075107130895c9017b697801889701c887077b675001d49707887701c837077b674801d83707c8a7077b6740018268c8007868200246261f0246261e0246261d0246261c0246261b0246261a024626190246261802462617024626160246261502462614024626130246261202462611024626100246260f0246260e0246260d0246260c0246260b0246260a0246260902462608024626070246260602462605024626040246260302462602024626010246260002826ac000786a28029887387b672801786727029887307b672001786726029887287b671801786725028dc2ff0097273898773b95692002c979099887207b679000786724029887187b678800786723029887107b678000786722029888087b6878786821028267b8007867300298a8387b687078682f0298a8307b686878682e0298a8287b686078682d0298a8207b685878682c0298a8187b685078682b0298a8107b684878682a0298aa087b6a40786a29028260b000786038029878387b6838786837029878307b6830786836029878287b6828786835029878207b6820786834029878187b6818786833029878107b6810786832029877087b67f000786731029807387b67e80078673f029807307b67e00078673e029807287b67d80078673d029807207b67d00078673c029807187b67a80078673b029807107b67a00078673a029807087b679800786739027c97197c98187c9b1a7c9c1b977708d4870797bb1097cc18d4cb0bd4b7077c981d7c9b1c7c9c1e7c9a1f978808d4b80897cc1097aa18d4ca0ad4a808978820d478037c97117c98107c9a127c9c13977708d4870797aa1097cc18d4ca0ad4a7077c98157c9a147c9c167c9b17978808d4a80897cc1097bb18d4cb0bd4b808978820d47804842a07cfa307984c0185a23fd02c0cd4c7077b6770017c97097c9c087c9b0a7c980b977708d4c70797bb10978818d4b808d478037c980d7c9b0c7c9c0e7c970f978808d4b80897cc10977718d4c707d48707977720d4370398370185a8ffd08707cfa408d487077b6768017c97017c987c9b027c9c03977708d4870797bb1097cc18d4cb0bd4b7077c98057c9b047c9c067c9907978808d4b808826b500197cc10979918d4c90982644001d49808978820d48707987801d02808cfa309826c4801d498087b685801d44b0882697801d4c909d49808cfa7077b67600151086a044926380149263001826728017867c701826720017867c601826718017867c501826790007867c401826788007867c301826780007867c2018267787867c1018267707867cf018267687867ce018267607867cd018267587867cc018267507867cb018267487867ca018267407867c9018267387867d7018267307867d6018267287867d5018267207867d4018267187867d3018267107867d2014626ff014626fe014626fd014626fc014626fb014626fa014626f9014626f8014626f7014626f6014626f5014626f4014626f3014626f2014626f1014626f0014626ef014626ee014626ed014626ec014626eb014626ea014626e9014626e8014626e7014626e6014626e5014626e4014626e3014626e2014626e1014626e0018267c8007867c0018267c0007867c8018267b8007867d0017860d8018267f0007867d1018267e8007867df018267e0007867de018267d8007867dd018267d0007867dc018267a8007867db018267a0007867da01826798007867d9018263780197373898773b956ac001c87a0a7ca7117ca8107ca9127cab13977708d4870797991097bb18d4b909d497077ca8157ca9147cab167cac17978808d4980897bb1097cc18d4cb0bd4b808978820d47802843c077ca7197ca8187cab1a7ca91b977708d4870797bb109799187ca81dd4b909d479037ca91c9788087cab1e7ca71fd49808d0c20997bb10977718d4b707d48707977720d4370397370185c43fcf4707d497077b6728017ca7097ca8087ca90a7cab0b977708d4870797991097bb18d4b909d479007ca80d7ca90c7cab0e7ca70f978808d4980897bb10977718d4b707d48707977720d4070097220185c7ffcf7207d0c009d479097ca7017cab7ca8027ca203977708d4b707978810972218d48208d478027ca8057cab047ca7067caa07978808d4b80897771097aa18d4a707d48707977720d42707d0c707970001cf400b6494d4b702d0c300826c3801826810018887018269f800c979077b67e800d4980788770182690801c9790a7b6ae000d8790782690001c979097b69d8009588ff7b68d000017b6c38014926f00098283f974c016443d48c04972b01826a700198ac3fd4cb0b7b6b20018268e800d34807d848088269d000d8b90cdb780c9708018262280198273fd478007b60180198393f972201d4920897a70182696801989a3fd4a702979a0182675801987b3fd4ba0a977b018269600198973fd4b707979b0182693801d4b9097b69600182693001d497077b675801d49a0a7b6a6801d429077b6770018269e000c98907d8c707d8890a8269d800c9090bc9ab0bc97b0b99bc3f82671001d27c097b693801826bf800d2cb0bd3b40ad8b40282672001d89703daa302826a0801d2ca0ac9a809c929007b602801d82902d8a808826a0001d2ca0a82691801c9a90ac98a0ac92a00c9b408c9380482683801c9870282697801826b5001d4b907887701826a4801d87a08c97a07889a01c9ab0b826a4001c98a0a9599ff7b6b50017b6a4001d4ab087b697801d4790ad4a80884cc017b674801492630015208a1fe2809330c4926f000018269680198973f82687001978801d48707826a580198a83f979901d49808826b600198b93f97aa0197bb01d4cb0b826cf000d4c909d4a902d48c00d47c04017b6420017b6228017b6030017b6b3801492678034926700349266803492660034926b8034926b0034926a8034926a003482680032083686003836aa003836b80033309ff33070a078267a0037b6778018267b0037b6770018267a8037b676801836780020a04816790027b675001826780027b674801826788027b674001826768016f77977820826970016f99989920d4890a987720826878016f88978920d497079888207b67e8007b67a8027b6a18017b6aa0027b68f0007a68b0028367a0020a05015107c60a330740330820501074bbd67c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489037c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d4890c7c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c770f979908d4a90997bb10977718d4b707d49707977720d487077b67a8006f797b6cd0006fc87b62e0006f2a7b63d8006f377b6768017b6a5801d4a7077b687001d49808d478089888207b696001d49707977720d487075207ee08816770013308207b67780150107663d546171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170326461702d7004617014146073682686001826a5801d48a0a140800000000010000007b6858011408fcffffff0000000082697001d889088269680194987b6a600194a846170451084008826740016f77987820826948016f99979a20d4a8087b684801977720826850016f88988820d487077b6750019899207b6940018267780183770433082050107883d4826840016f88826948016f99826a50016faa98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d988820826958019599dc826a7001d89a09826a680194a9826a600194a978780c510939078267100182683801d68709826cf800ca8c0ac89a03d8a30ad68c09c8a90b82622801ca2709c89303d89309d6270ac8a909c8b909d8b90bd62c0ac8ba0aca2c0bc89b04d8b409c8a9097b695801826a3001caca09d67a0bc8b909826b2001ca7b0bc8b90082690001ca980b82690801d6980cc8cb0bca920cc8cb0bc8b000ca980bca7a0cc8cb0bd8cb0cc8c00a82695801c8a909c84b0bd84b0aca87008267b000c9a708c99802826ac000d33a07d83a0c8269c800d80908da780c8267b800d8b704c9b70bd8cb07c84707c972077b675001c9cb0b7b6b5801c98a07c937077b674001c909077b6748018267780183772433082050107ac5d2826850016f82826858016f8b826840016f8c826848016f891408bcffffff00000000826a7001d88a08989a387b6a4801787a1f826a680194a8989a307b6a4001787a1e826a600194a8989a287b6a3801787a1d989a207b6a3001787a1c989a187b6a2801787a1b989a107b6a2001787a1a989a087b6a1001787a197b696001787918787c1098c9387b69080178791798c9307b69000178791698c9287b69f80078791598c9207b69c80078791498c9187b69c00078791398c9107b69b8007879127b6c500198cc087b6cb000787c11787b0898b9387b69a00078790f98b9307b69980078790e98b9287b69900078790d98b9207b69880078790c98b9187b69800078790b98b9107b697878790a7b6b580198bb087b6b70787b0978729829387b69687879079829307b69607879069829287b69587879059829207b69507879049829187b69487879039829107b69407879027b6268019829087b69387879015108dd048267780183774433082050107c53d146171f0146171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146070a0a8267e8007b67c802826718017b67c0028267f0007a67d0024926f8024926f0024926e8024926e0023308648267780150107ebdd07b67700182677801330850208000aed04826000349263803ff49263003ff49262803ff49262003ff9568c00297882098882014090000000008000000d498029568e00297882098882095692003979920d4890a8268700197882098882014090000000064000000d4980b97772098772095680003978820d4780c3308ff3309ff64270a015207b1030a0c3307403308205020820028d0826ad000787a188269d8009898387878179898307878169898287878159898207878149898187878139898107878129898087878117879108269a80098983878780f98983078780e98982878780d98982078780c98981878780b98981078780a9898087878097879088269e000989838787807989830787806989828787805989820787804989818787803989810787802989808787801787998a83878781f98a83078781e98a82878781d98a82078781c98a81878781b98a81078781a98a808787819836740030a04806750037b677001826748037b671801826740037b677801330740330820502084003bcf7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80852088d01826818016f88978920826a70016faa98aa20d4a9097b697001826978016f99979920988820d498087b68180183777b67f00033082050208600d8cd826850017878108268a00078780f8268980078780e8268900078780d8268880078780c8268800078780b82687878780a826870787809826858017878088268687878078268607878068268587878058268507878048268487878038268407878028268387878018268680178788268600178781882680801787817826800017878168268f8007878158268c8007878148268c0007878138268b8007878128268b0007878118268480178781f8268400178781e8268380178781d8268300178781c8268280178781b8268200178781a826810017878193308208267f00050208800f5cc3a080000023a090800023a0a1000023a0b1800027b68b8037b69b0037b6aa8037b6ba003826818016f88826970016f99826a780197aa207b69d8037b68d0037b6ac8034926c00383798367a003330802330a200a06955100fc8210f8038215f0038216e8039511000432000033008a009511c07b10387b15307b16289515408411e033074033082033005c2864cc4926b0014926a8014926a001140700000000717b484e9568a0017b67b801330750208c0081cc49269801492690014926800112330704956880014926880150208e0063cc33082433075020900018cc83783307013309240a0d3308330092002802cc330850209200fdcb837833070133090a0d330733009400281bcd33075020940016cd330701502096000dcd9511b07b10487b15409515508411f08272827308827b10827718828c828908828a108288187b18187b1a107b19087b1c7b17387b1b307b132895172064187b122050209800dde09551b0821048821540951150320049489220248414d249525252a22a2529499224499224499224499224499224499224499224494a4a4322444444921092244992244992244992242949d22449124992242149922489888824495292244992444422222222928a8888881091544444444444241589242222229188482a094992244992244992a4244992244992244992244992244992244992244992244992aa244992154aad42d590502b546992240921499224499224499224492149541308049224495225a9924444449224251111912449492a09294992244992244992244992244992244992244992244992244992244992244992aa24a594244992244992244992244992244992244992244992244992a424499224499224a94a92244992244992244992a492944892249124852aa52449922449922449922449922449922449499224499224254912111125092029249124a450922625a9244992245185aa218524499224499224495292244992244992540049529124499224499224499224499224499224959224495aa1942629492549920821492449482295922449429224499224499224294992244992244992244992244992244992244992244992a42a49926485524ba1524a4992244992244992244992244992244992922449922449a19426492529499224495229922449922449922449922449922449922449922449922449922449922449922449922449922449922449922449929224499224499224499224a94a5292942449228424499290442a499224244992244992244992922449922449922449922449922449922449922449922449aa922449562835494928a5244992244992244992a424499224499224499284529aa42495a424114248429224499224499224294992244992244992244992244992244992244992244992a42a499264855225852a4d52922aa52549252949924492249594509524499224499224499294244992244992244992a44992244992244992a42449922449922449922449922449922449922449922449924a294d92244952524948a9499a2c85521a1111298a888888882222229290244992244992244992244992244992244992244992244992a424499224499224a94a24912412894424892449244214455192244992244992244992244992244992a42449922449440288002251942492902449922491489224499224912449922449499248248a9244122284102222114992244992244992244992a4a4488824499224499224499224498a8844228944229184288aa22449922449922449922449922449922449499224499224429224499224499224294992244992244992244992244992244992244992244992a42a499224458424aa28128944111121222244446a44449248a2288aa2284522294a9154524924294992245522529248224944a4aa884812892492441211111111111111111111111111111111111189484422228924221189482222892492482289249288482289249248228944242211894844221291882449922449922449922449922449922449922492244992244992244992444a922449922492449224914824898888888888888848241289442291482412894422222222222222222222222222222222222222222222222222222222228924499224499224499224499224499224499224912449922449922449922425499224499224499292884422894422911891944412914492482249224924892491884422114922492211492289249144224912894822492289482489888a91482249244924c98888888888881011a9888888282222224a94244a121111118d24244992244992244992922449922449922449922449922449922449922449922449a2288a221249224944222449922449922449922489108948001140248a1251a224122591882444519424499224499224499294244992244992244924124589884492249224499224114922894492244912491249249144922412492422095114450144128912891249249144128924914412492491442291249248228924922492942449922449924492882444922449922449922449922415111111119108110511420891049048228924802491241d2541249224499224492449922449924892244992a42449922449a288888824489224499224499224254992244992244992244992244992244992244992244992542549928812251125892241241289442249124992244992248a442291482412894422914824920842082122228a221111455244443492244992880820a220222422484149450a4a15294890242949499294242548920000"
						},
						"methodIdentifiers": {
							"inventory()": "15d52a5c",
							"spinWheel()": "15ecef92",
							"totalCardTypes()": "0ef63509"
						}
					},
					"irOptimized": "/// @use-src 0:\"CardGame.sol\"\nobject \"CardGame_65\" {\n    code {\n        {\n            /// @src 0:117:662  \"contract CardGame {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := copy_arguments_for_constructor_object_CardGame()\n            constructor_CardGame(_1)\n            let _2 := allocate_unbounded()\n            codecopy(_2, dataoffset(\"CardGame_65_deployed\"), datasize(\"CardGame_65_deployed\"))\n            return(_2, datasize(\"CardGame_65_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function cleanup_address(value) -> cleaned\n        {\n            cleaned := cleanup_uint160(value)\n        }\n        function validator_revert_address(value)\n        {\n            if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n        }\n        function abi_decode_address_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_address(value)\n        }\n        function abi_decode_tuple_address_fromMemory(headStart, dataEnd) -> value0\n        {\n            if slt(sub(dataEnd, headStart), 32)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := 0\n            value0 := abi_decode_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_CardGame() -> ret_param\n        {\n            let programSize := datasize(\"CardGame_65\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param := abi_decode_tuple_address_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := not(0)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_rational_by(value) -> cleaned\n        { cleaned := value }\n        function cleanup_uint256(value) -> cleaned\n        { cleaned := value }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_rational_by_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n        }\n        function prepare_store_uint256(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_rational_by_to_uint256(slot, value)\n        {\n            let convertedValue := convert_rational_by_to_uint256(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n        }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_contract_CardInventory(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_contract_CardInventory(value) -> converted\n        {\n            converted := convert_uint160_to_contract_CardInventory(value)\n        }\n        function update_byte_slice_shift_0(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_contract_CardInventory_to_contract_CardInventory(value) -> converted\n        {\n            converted := convert_uint160_to_contract_CardInventory(value)\n        }\n        function prepare_store_contract_CardInventory(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_contract_CardInventory_to_contract_CardInventory(slot, value)\n        {\n            let convertedValue := convert_contract_CardInventory_to_contract_CardInventory(value)\n            sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_contract_CardInventory(convertedValue)))\n        }\n        /// @ast-id 26 @src 0:279:367  \"constructor(address _inventory) {...\"\n        function constructor_CardGame(var_inventory)\n        {\n            /// @src 0:208:209  \"5\"\n            let expr := 0x05\n            update_storage_value_offset_rational_by_to_uint256(0x01, expr)\n            /// @src 0:348:358  \"_inventory\"\n            let _1 := var_inventory\n            let expr_1 := _1\n            /// @src 0:334:359  \"CardInventory(_inventory)\"\n            let expr_address := convert_address_to_contract_CardInventory(expr_1)\n            /// @src 0:322:359  \"inventory = CardInventory(_inventory)\"\n            update_storage_value_offset_contract_CardInventory_to_contract_CardInventory(0x00, expr_address)\n        }\n    }\n    /// @use-src 0:\"CardGame.sol\"\n    object \"CardGame_65_deployed\" {\n        code {\n            {\n                /// @src 0:117:662  \"contract CardGame {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x0ef63509 { external_fun_totalCardTypes() }\n                    case 0x15d52a5c { external_fun_inventory() }\n                    case 0x15ecef92 { external_fun_spinWheel() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 8 @src 0:179:209  \"uint public totalCardTypes = 5\"\n            function getter_fun_totalCardTypes() -> ret\n            {\n                let slot := 1\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:117:662  \"contract CardGame {...\"\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_totalCardTypes()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_totalCardTypes()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_contract_CardInventory(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_contract_CardInventory(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_contract_CardInventory(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_contract_CardInventory(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_contract_CardInventory(sload(slot), offset)\n            }\n            /// @ast-id 5 @src 0:142:172  \"CardInventory public inventory\"\n            function getter_fun_inventory() -> ret_address\n            {\n                let slot := 0\n                let offset := 0\n                ret_address := read_from_storage_split_dynamic_contract_CardInventory(slot, offset)\n            }\n            /// @src 0:117:662  \"contract CardGame {...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_contract_CardInventory_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function abi_encode_contract_CardInventory_to_address(value, pos)\n            {\n                mstore(pos, convert_contract_CardInventory_to_address(value))\n            }\n            function abi_encode_contract_CardInventory(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_contract_CardInventory_to_address(value0, add(headStart, 0))\n            }\n            function external_fun_inventory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_inventory()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_contract_CardInventory(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_spinWheel()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                fun_spinWheel()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function leftAlign_uint256(value) -> aligned\n            { aligned := value }\n            function abi_encode_uint256_to_uint256_nonPadded_inplace(value, pos)\n            {\n                mstore(pos, leftAlign_uint256(cleanup_uint256(value)))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(96, value) }\n            function leftAlign_uint160(value) -> aligned\n            { aligned := shift_left(value) }\n            function leftAlign_address(value) -> aligned\n            {\n                aligned := leftAlign_uint160(value)\n            }\n            function abi_encode_address_to_address_nonPadded_inplace(value, pos)\n            {\n                mstore(pos, leftAlign_address(cleanup_address(value)))\n            }\n            function abi_encode_packed_uint256_address_uint256(pos, value0, value1, value2) -> end\n            {\n                abi_encode_uint256_to_uint256_nonPadded_inplace(value0, pos)\n                pos := add(pos, 32)\n                abi_encode_address_to_address_nonPadded_inplace(value1, pos)\n                pos := add(pos, 20)\n                abi_encode_uint256_to_uint256_nonPadded_inplace(value2, pos)\n                pos := add(pos, 32)\n                end := pos\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function array_dataslot_bytes(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function array_length_bytes(value) -> length\n            { length := mload(value) }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function convert_bytes32_to_uint256(value) -> converted\n            {\n                converted := convert_uint256_to_uint256(shift_right_0_unsigned(value))\n            }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function panic_error_0x12()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x12)\n                revert(0, 0x24)\n            }\n            function mod_uint256(x, y) -> r\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                if iszero(y) { panic_error_0x12() }\n                r := mod(x, y)\n            }\n            function extract_from_storage_value_offset_contract_CardInventory(slot_value) -> value\n            {\n                value := cleanup_from_storage_contract_CardInventory(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_contract_CardInventory(slot) -> value\n            {\n                value := extract_from_storage_value_offset_contract_CardInventory(sload(slot))\n            }\n            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            { revert(0, 0) }\n            function shift_left_224(value) -> newValue\n            { newValue := shl(224, value) }\n            function abi_decode_fromMemory(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function abi_encode_rational_by(value, pos)\n            {\n                mstore(pos, convert_rational_by_to_uint256(value))\n            }\n            function abi_encode_address_uint256_rational_by(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 96)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                abi_encode_rational_by(value2, add(headStart, 64))\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            /// @ast-id 64 @src 0:377:659  \"function spinWheel() external {...\"\n            function fun_spinWheel()\n            {\n                /// @src 0:478:493  \"block.timestamp\"\n                let expr := timestamp()\n                /// @src 0:495:505  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:507:523  \"block.prevrandao\"\n                let expr_2 := prevrandao()\n                /// @src 0:461:524  \"abi.encodePacked(block.timestamp, msg.sender, block.prevrandao)\"\n                let expr_mpos := allocate_unbounded()\n                let _1 := add(expr_mpos, 0x20)\n                let _2 := abi_encode_packed_uint256_address_uint256(_1, expr, expr_1, expr_2)\n                mstore(expr_mpos, sub(_2, add(expr_mpos, 0x20)))\n                finalize_allocation(expr_mpos, sub(_2, expr_mpos))\n                /// @src 0:451:525  \"keccak256(abi.encodePacked(block.timestamp, msg.sender, block.prevrandao))\"\n                let expr_3 := keccak256(array_dataslot_bytes(expr_mpos), array_length_bytes(expr_mpos))\n                /// @src 0:432:536  \"uint(...\"\n                let expr_4 := convert_bytes32_to_uint256(expr_3)\n                /// @src 0:539:553  \"totalCardTypes\"\n                let _3 := read_from_storage_split_offset_uint256(0x01)\n                let expr_5 := _3\n                /// @src 0:432:553  \"uint(...\"\n                let expr_6 := mod_uint256(expr_4, expr_5)\n                /// @src 0:418:553  \"uint random = uint(...\"\n                let var_random := expr_6\n                /// @src 0:568:577  \"inventory\"\n                let _address := read_from_storage_split_offset_contract_CardInventory(0x00)\n                let expr_address := _address\n                /// @src 0:568:585  \"inventory.addCard\"\n                let expr_50_address := convert_contract_CardInventory_to_address(expr_address)\n                let expr_functionSelector := 0x3641d726\n                /// @src 0:586:596  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 0:598:604  \"random\"\n                let _4 := var_random\n                let expr_8 := _4\n                /// @src 0:606:607  \"1\"\n                let expr_9 := 0x01\n                /// @src 0:568:608  \"inventory.addCard(msg.sender, random, 1)\"\n                if iszero(extcodesize(expr_50_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _5 := allocate_unbounded()\n                mstore(_5, shift_left_224(expr_functionSelector))\n                let _6 := abi_encode_address_uint256_rational_by(add(_5, 4), expr_7, expr_8, expr_9)\n                let _7 := call(gas(), expr_50_address, 0, _5, sub(_6, _5), _5, 0)\n                if iszero(_7) { revert_forward() }\n                if _7\n                {\n                    let _8 := 0\n                    if gt(_8, returndatasize()) { _8 := returndatasize() }\n                    finalize_allocation(_5, _8)\n                    abi_decode_fromMemory(_5, add(_5, _8))\n                }\n                /// @src 0:632:642  \"msg.sender\"\n                let expr_10 := caller()\n                /// @src 0:644:650  \"random\"\n                let _9 := var_random\n                let expr_11 := _9\n                /// @src 0:624:651  \"CardWon(msg.sender, random)\"\n                let _10 := 0x39658f7e10a1d9cffd36a1fa27ed96c5c69fc65ecc9ef30ba604e9615211807d\n                let _11 := convert_address_to_address(expr_10)\n                let _12 := allocate_unbounded()\n                let _13 := abi_encode_uint256(_12, expr_11)\n                log2(_12, sub(_13, _12), _10, _11)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220a38f34a6a9c1602c4b3c0c23a57d88493decffa165d4e5d15943b799c355686264736f6c634300081c0033\"\n    }\n}\n",
					"hash": "08dc6c4139bca68a51f25aa7e0c32c1b684c832a97ed7b23136ec81ee67ab86c",
					"factoryDependencies": {}
				}
			},
			"CardInventory.sol": {
				"CardInventory": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "addCard",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								}
							],
							"name": "getBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cardId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "removeCard",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CardInventory.sol\":\"CardInventory\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"CardInventory.sol\":{\"keccak256\":\"0x01c80db43ea035f45b0e8d628ac6d96624b438283db1a028cbf7c03dbbb0d845\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a74736717bbb9ec6fae143864c29666906616529cedb93b5015991b1528c531c\",\"dweb:/ipfs/QmSu563K6Z5CE6EG7ujgiP9WTpDGwikXMEW3Vs6nT5sgp1\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 73,
								"contract": "CardInventory.sol:CardInventory",
								"label": "cardBalances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_uint256)"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 3477\n// Code size = 10781 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 2 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 8 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @20 if a0 != 0\n      : @17 (gas: 3)\n   504: a0 = 0x40\n   507: a1 = 0x20\n   510: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   515: a1 = u8 [a0 + 0x11]\n   518: a2 = u8 [a0 + 0x10]\n   521: a3 = u8 [a0 + 0x12]\n   524: a4 = u8 [a0 + 0x13]\n   527: a1 = a1 << 0x8\n   530: a1 = a1 | a2\n   533: a3 = a3 << 0x10\n   536: a4 = a4 << 0x18\n   539: a3 = a3 | a4\n   542: a1 = a1 | a3\n   545: a2 = u8 [a0 + 0x15]\n   548: a3 = u8 [a0 + 0x14]\n   551: a4 = u8 [a0 + 0x16]\n   554: a5 = u8 [a0 + 0x17]\n   557: a2 = a2 << 0x8\n   560: a2 = a2 | a3\n   563: a4 = a4 << 0x10\n   566: a5 = a5 << 0x18\n   569: a4 = a4 | a5\n   572: a2 = a2 | a4\n   575: a2 = a2 << 0x20\n   578: t0 = a2 | a1\n   581: a2 = u8 [a0 + 0x1]\n   584: a3 = u8 [a0]\n   586: a4 = u8 [a0 + 0x2]\n   589: a5 = u8 [a0 + 0x3]\n   592: a2 = a2 << 0x8\n   595: a2 = a2 | a3\n   598: a4 = a4 << 0x10\n   601: a5 = a5 << 0x18\n   604: a4 = a4 | a5\n   607: a2 = a2 | a4\n   610: a3 = u8 [a0 + 0x5]\n   613: a4 = u8 [a0 + 0x4]\n   616: a5 = u8 [a0 + 0x6]\n   619: s1 = u8 [a0 + 0x7]\n   622: a3 = a3 << 0x8\n   625: a3 = a3 | a4\n   628: a5 = a5 << 0x10\n   631: s1 = s1 << 0x18\n   634: a5 = a5 | s1\n   637: a3 = a3 | a5\n   640: a3 = a3 << 0x20\n   643: a2 = a2 | a3\n   646: a3 = u8 [a0 + 0x19]\n   649: a4 = u8 [a0 + 0x18]\n   652: a5 = u8 [a0 + 0x1a]\n   655: s1 = u8 [a0 + 0x1b]\n   658: a3 = a3 << 0x8\n   661: a3 = a3 | a4\n   664: a5 = a5 << 0x10\n   667: s1 = s1 << 0x18\n   670: a5 = a5 | s1\n   673: a3 = a3 | a5\n   676: a4 = u8 [a0 + 0x1d]\n   679: a5 = u8 [a0 + 0x1c]\n   682: s1 = u8 [a0 + 0x1e]\n   685: a1 = u8 [a0 + 0x1f]\n   688: a4 = a4 << 0x8\n   691: a4 = a4 | a5\n   694: s1 = s1 << 0x10\n   697: a1 = a1 << 0x18\n   700: a1 = a1 | s1\n   703: a1 = a1 | a4\n   706: a1 = a1 << 0x20\n   709: a3 = a3 | a1\n   712: a1 = u8 [a0 + 0x9]\n   715: a4 = u8 [a0 + 0x8]\n   718: a5 = u8 [a0 + 0xa]\n   721: s1 = u8 [a0 + 0xb]\n   724: a1 = a1 << 0x8\n   727: a1 = a1 | a4\n   730: a5 = a5 << 0x10\n   733: s1 = s1 << 0x18\n   736: a5 = a5 | s1\n   739: a1 = a1 | a5\n   742: a4 = u8 [a0 + 0xd]\n   745: a5 = u8 [a0 + 0xc]\n   748: s1 = u8 [a0 + 0xe]\n   751: a0 = u8 [a0 + 0xf]\n   754: a4 = a4 << 0x8\n   757: a4 = a4 | a5\n   760: s1 = s1 << 0x10\n   763: a0 = a0 << 0x18\n   766: a0 = a0 | s1\n   769: a0 = a0 | a4\n   772: a0 = a0 << 0x20\n   775: a0 = a0 | a1\n   778: a0 = reverse a0\n   780: s1 = reverse a3\n   782: a1 = reverse a2\n   784: a2 = reverse t0\n   786: a1 = a1 | a2\n   789: a2 = s1 | a0\n   792: a2 = a2 | a1\n   795: a2 = a2 >> 0x20\n   798: a0 = a0 | a1\n   801: a0 = a0 << 0x20\n   804: a0 = a0 | a2\n   807: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   810: trap\n      : @20 (gas: 3)\n   811: a0 = 0\n   813: a1 = 0\n   815: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   820: i32 a1 = a0 + 0\n   822: a0 = 0x1\n   825: a2 = 0\n   827: ecalli 5 // 'seal_return'\n   829: fallthrough\n      : @22 (gas: 4)\n   830: i32 s1 = s1 + 0\n   832: a0 = s1\n   834: a1 = 0\n   836: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   841: i32 a0 = a0 + 0\n   843: a1 = 0\n   845: a2 = 0\n   847: ecalli 0 // 'call_data_copy'\n   848: fallthrough\n      : @24 (gas: 2)\n   849: a1 = i32 [0x20008]\n   854: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   857: a0 = 0x30010\n   862: i32 a0 = a0 + 0\n   864: ecalli 6 // 'set_immutable_data'\n   866: fallthrough\n      : @26 (gas: 3)\n   867: a0 = s1\n   869: a1 = 0\n   871: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   876: i32 a1 = a0 + 0\n   878: a0 = 0\n   880: a2 = 0\n   882: ra = 0x12\n   885: ecalli 5 // 'seal_return'\n   887: fallthrough\n      : @28 [@dyn 9] (gas: 8)\n   888: sp = sp + 0xffffffffffffffc0\n   891: u64 [sp + 0x38] = ra\n   894: u64 [sp + 0x30] = s0\n   897: s0 = sp + 0x40\n   900: sp = sp & 0xffffffffffffffe0\n   903: a0 = 0x40\n   906: a1 = 0x20\n   909: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 34)\n   914: u8 [a0 + 31] = 0x80\n   919: u8 [a0 + 30] = 0\n   922: u8 [a0 + 29] = 0\n   925: u8 [a0 + 28] = 0\n   928: u8 [a0 + 27] = 0\n   931: u8 [a0 + 26] = 0\n   934: u8 [a0 + 25] = 0\n   937: u8 [a0 + 24] = 0\n   940: u8 [a0 + 23] = 0\n   943: u8 [a0 + 22] = 0\n   946: u8 [a0 + 21] = 0\n   949: u8 [a0 + 20] = 0\n   952: u8 [a0 + 19] = 0\n   955: u8 [a0 + 18] = 0\n   958: u8 [a0 + 17] = 0\n   961: u8 [a0 + 16] = 0\n   964: u8 [a0 + 15] = 0\n   967: u8 [a0 + 14] = 0\n   970: u8 [a0 + 13] = 0\n   973: u8 [a0 + 12] = 0\n   976: u8 [a0 + 11] = 0\n   979: u8 [a0 + 10] = 0\n   982: u8 [a0 + 9] = 0\n   985: u8 [a0 + 8] = 0\n   988: u8 [a0 + 7] = 0\n   991: u8 [a0 + 3] = 0\n   994: u8 [a0 + 2] = 0\n   997: u8 [a0 + 1] = 0\n  1000: u8 [a0 + 0] = 0\n  1002: a1 = i32 [0x20004]\n  1007: u8 [a0 + 6] = 0\n  1010: u8 [a0 + 5] = 0\n  1013: u8 [a0 + 4] = 0\n  1016: jump @35 if a1 <u 4\n      : @30 (gas: 4)\n  1020: i32 a0 = sp + 0\n  1022: a1 = 0\n  1024: ecalli 1 // 'call_data_load'\n  1026: fallthrough\n      : @31 (gas: 2)\n  1027: a0 = i32 [sp + 0x1c]\n  1030: jump @37 if a0 == 721741888\n      : @32 (gas: 1)\n  1037: jump @36 if a0 == 760790400\n      : @33 (gas: 1)\n  1044: jump @35 if a0 != 910284582\n      : @34 (gas: 1)\n  1051: ra = 22, jump @86\n      : @35 [@dyn 11] (gas: 1)\n  1056: ra = 24, jump @97\n      : @36 [@dyn 12] (gas: 14)\n  1061: ra = 0x1a\n  1064: sp = sp + 0xfffffffffffffea0\n  1068: u64 [sp + 0x158] = ra\n  1072: u64 [sp + 0x150] = s0\n  1076: u64 [sp + 0x148] = s1\n  1080: s0 = sp + 0x160\n  1084: sp = sp & 0xffffffffffffffe0\n  1087: u64 [sp + 312] = 0\n  1091: u64 [sp + 304] = 0\n  1095: u64 [sp + 296] = 0\n  1099: u64 [sp + 288] = 0\n  1103: i32 a0 = sp + 0x120\n  1107: ecalli 8 // 'value_transferred'\n  1109: jump @76\n      : @37 [@dyn 13] (gas: 14)\n  1112: ra = 0x1c\n  1115: sp = sp + 0xfffffffffffffec0\n  1119: u64 [sp + 0x138] = ra\n  1123: u64 [sp + 0x130] = s0\n  1127: u64 [sp + 0x128] = s1\n  1131: s0 = sp + 0x140\n  1135: sp = sp & 0xffffffffffffffe0\n  1138: u64 [sp + 280] = 0\n  1142: u64 [sp + 272] = 0\n  1146: u64 [sp + 264] = 0\n  1150: u64 [sp + 256] = 0\n  1154: i32 a0 = sp + 0x100\n  1158: ecalli 8 // 'value_transferred'\n  1160: jump @53\n      : @38 [@dyn 14] (gas: 7)\n  1163: sp = sp + 0xfffffffffffffff0\n  1166: u64 [sp + 0x8] = ra\n  1169: u64 [sp] = s0\n  1171: s0 = a0\n  1173: a0 = 0x40\n  1176: a1 = 0x20\n  1179: ra = 30, jump @0\n      : @39 [@dyn 15] (gas: 100)\n  1184: a1 = u8 [a0 + 0x1]\n  1187: a2 = u8 [a0]\n  1189: a3 = u8 [a0 + 0x2]\n  1192: a4 = u8 [a0 + 0x3]\n  1195: a1 = a1 << 0x8\n  1198: a1 = a1 | a2\n  1201: a3 = a3 << 0x10\n  1204: a4 = a4 << 0x18\n  1207: a3 = a3 | a4\n  1210: a1 = a1 | a3\n  1213: a2 = u8 [a0 + 0x5]\n  1216: a3 = u8 [a0 + 0x4]\n  1219: a4 = u8 [a0 + 0x6]\n  1222: a5 = u8 [a0 + 0x7]\n  1225: a2 = a2 << 0x8\n  1228: a2 = a2 | a3\n  1231: a4 = a4 << 0x10\n  1234: a5 = a5 << 0x18\n  1237: a4 = a4 | a5\n  1240: a2 = a2 | a4\n  1243: a2 = a2 << 0x20\n  1246: t0 = a2 | a1\n  1249: a2 = u8 [a0 + 0x9]\n  1252: a3 = u8 [a0 + 0x8]\n  1255: a4 = u8 [a0 + 0xa]\n  1258: a5 = u8 [a0 + 0xb]\n  1261: a2 = a2 << 0x8\n  1264: a2 = a2 | a3\n  1267: a4 = a4 << 0x10\n  1270: a5 = a5 << 0x18\n  1273: a4 = a4 | a5\n  1276: a2 = a2 | a4\n  1279: a3 = u8 [a0 + 0xd]\n  1282: a4 = u8 [a0 + 0xc]\n  1285: a5 = u8 [a0 + 0xe]\n  1288: a1 = u8 [a0 + 0xf]\n  1291: a3 = a3 << 0x8\n  1294: a3 = a3 | a4\n  1297: a5 = a5 << 0x10\n  1300: a1 = a1 << 0x18\n  1303: a1 = a1 | a5\n  1306: a1 = a1 | a3\n  1309: a1 = a1 << 0x20\n  1312: t1 = a1 | a2\n  1315: a1 = u8 [a0 + 0x11]\n  1318: a3 = u8 [a0 + 0x10]\n  1321: a4 = u8 [a0 + 0x12]\n  1324: a5 = u8 [a0 + 0x13]\n  1327: a1 = a1 << 0x8\n  1330: a1 = a1 | a3\n  1333: a4 = a4 << 0x10\n  1336: a5 = a5 << 0x18\n  1339: a4 = a4 | a5\n  1342: a1 = a1 | a4\n  1345: a3 = u8 [a0 + 0x15]\n  1348: a4 = u8 [a0 + 0x14]\n  1351: a5 = u8 [a0 + 0x16]\n  1354: a2 = u8 [a0 + 0x17]\n  1357: a3 = a3 << 0x8\n  1360: a3 = a3 | a4\n  1363: a5 = a5 << 0x10\n  1366: a2 = a2 << 0x18\n  1369: a2 = a2 | a5\n  1372: a2 = a2 | a3\n  1375: a2 = a2 << 0x20\n  1378: a3 = a2 | a1\n  1381: a1 = u8 [a0 + 0x19]\n  1384: a2 = u8 [a0 + 0x18]\n  1387: a4 = u8 [a0 + 0x1a]\n  1390: a5 = u8 [a0 + 0x1b]\n  1393: a1 = a1 << 0x8\n  1396: a1 = a1 | a2\n  1399: a4 = a4 << 0x10\n  1402: a5 = a5 << 0x18\n  1405: a4 = a4 | a5\n  1408: a1 = a1 | a4\n  1411: a2 = u8 [a0 + 0x1d]\n  1414: a4 = u8 [a0 + 0x1c]\n  1417: a5 = u8 [a0 + 0x1e]\n  1420: a0 = u8 [a0 + 0x1f]\n  1423: a2 = a2 << 0x8\n  1426: a2 = a2 | a4\n  1429: a5 = a5 << 0x10\n  1432: a0 = a0 << 0x18\n  1435: a0 = a0 | a5\n  1438: a0 = a0 | a2\n  1441: a0 = a0 << 0x20\n  1444: a0 = a0 | a1\n  1447: a0 = reverse a0\n  1449: a1 = reverse a3\n  1451: a2 = reverse t1\n  1453: a3 = reverse t0\n  1455: u64 [s0 + 0x18] = a3\n  1458: u64 [s0 + 0x10] = a2\n  1461: u64 [s0 + 0x8] = a1\n  1464: u64 [s0] = a0\n  1466: ra = u64 [sp + 0x8]\n  1469: s0 = u64 [sp]\n  1471: sp = sp + 0x10\n  1474: ret\n      : @40 (gas: 47)\n  1476: sp = sp + 0xffffffffffffff80\n  1479: u64 [sp + 0x78] = ra\n  1482: u64 [sp + 0x70] = s0\n  1485: u64 [sp + 0x68] = s1\n  1488: s0 = sp + 0x80\n  1492: sp = sp & 0xffffffffffffffe0\n  1495: ra = u64 [a1 + 0x10]\n  1498: a5 = u64 [a1 + 0x8]\n  1501: a3 = u64 [a2 + 0x8]\n  1504: t1 = u64 [a1]\n  1506: a4 = u64 [a2]\n  1508: u64 [sp + 0x28] = a4\n  1511: t2 = u64 [a2 + 0x10]\n  1514: t0 = a3 ^ a5\n  1517: s1 = a3 <u a5\n  1520: a4 = a4 <u t1\n  1523: u64 [sp + 0x20] = a4\n  1526: s1 = a4 if t0 == 0\n  1529: t0 = u64 [a1 + 0x18]\n  1532: a1 = u64 [a2 + 0x18]\n  1535: u64 [sp + 0x18] = a1\n  1538: a2 = t2 - ra\n  1541: a1 = a2 - s1\n  1544: u64 [sp + 0x30] = a1\n  1547: a1 = a2 <u s1\n  1550: a4 = t2 <u ra\n  1553: u64 [sp + 0x38] = t0\n  1556: a2 = u64 [sp + 0x18]\n  1559: a2 = a2 - t0\n  1562: a2 = a2 - a4\n  1565: a2 = a2 - a1\n  1568: a1 = a3 - a5\n  1571: a3 = u64 [sp + 0x20]\n  1574: a1 = a1 - a3\n  1577: a3 = u64 [sp + 0x28]\n  1580: a3 = a3 - t1\n  1583: a4 = a1 >u 0\n  1585: a3 = a3 <u 0x40\n  1588: a3 = a3 ^ 0x1\n  1591: a3 = a4 if a1 != 0\n  1594: s1 = a2 >s 0\n  1596: a1 = u64 [sp + 0x30]\n  1599: a4 = a1 >u 0\n  1601: a4 = s1 if a2 != 0\n  1604: a1 = a1 | a2\n  1607: a3 = a4 if a1 != 0\n  1610: jump @47 if a3 == 0\n      : @41 (gas: 12)\n  1614: s1 = a0\n  1616: a0 = t1 | ra\n  1619: u64 [sp + 0x30] = a5\n  1622: a1 = u64 [sp + 0x38]\n  1625: a1 = a1 | a5\n  1628: a0 = a0 | a1\n  1631: a0 = a0 >> 0x20\n  1634: u64 [sp + 0x28] = ra\n  1637: a1 = a1 | ra\n  1640: a1 = a1 << 0x20\n  1643: a0 = a0 | a1\n  1646: jump @46 if a0 != 0\n      : @42 (gas: 6)\n  1650: u64 [sp + 0x20] = t1\n  1653: i32 a1 = t1 + 0\n  1655: i32 a0 = sp + 0x40\n  1658: u64 [sp + 0x8] = a1\n  1661: ecalli 1 // 'call_data_load'\n  1663: fallthrough\n      : @43 (gas: 10)\n  1664: a3 = u64 [sp + 0x50]\n  1667: a4 = u64 [sp + 0x58]\n  1670: a0 = 0x100000000\n  1680: a1 = a3 ^ a0\n  1683: a1 = a1 | a4\n  1686: a2 = a3 >> 0x20\n  1689: a2 = a2 <u 0x1\n  1692: a2 = 0 if a4 != 0\n  1694: a2 = 0 if a1 == 0\n  1696: jump @47 if a2 == 0\n      : @44 (gas: 12)\n  1700: u64 [sp + 0x10] = a4\n  1703: u64 [sp + 0x18] = a3\n  1706: a1 = u64 [sp + 0x28]\n  1709: a2 = u64 [sp + 0x38]\n  1712: a1 = a1 | a2\n  1715: a0 = 0xffffffe0\n  1725: a2 = u64 [sp + 0x20]\n  1728: a0 = a2 <u a0\n  1731: a2 = u64 [sp + 0x30]\n  1734: a0 = 0 if a2 != 0\n  1736: a0 = 0 if a1 != 0\n  1738: jump @46 if a0 == 0\n      : @45 (gas: 30)\n  1741: a0 = u64 [sp + 0x48]\n  1744: u64 [sp + 0x30] = a0\n  1747: a0 = u64 [sp + 0x40]\n  1750: u64 [sp + 0x38] = a0\n  1753: a0 = u64 [sp + 0x8]\n  1756: i32 a1 = a0 + 0x20\n  1759: i32 a0 = sp + 0x40\n  1762: ecalli 1 // 'call_data_load'\n  1764: a0 = u64 [sp + 0x58]\n  1767: a1 = u64 [sp + 0x50]\n  1770: a2 = u64 [sp + 0x48]\n  1773: a3 = u64 [sp + 0x40]\n  1776: u64 [s1 + 0x38] = a0\n  1779: u64 [s1 + 0x30] = a1\n  1782: u64 [s1 + 0x28] = a2\n  1785: u64 [s1 + 0x20] = a3\n  1788: a0 = u64 [sp + 0x10]\n  1791: u64 [s1 + 0x18] = a0\n  1794: a0 = u64 [sp + 0x18]\n  1797: u64 [s1 + 0x10] = a0\n  1800: a0 = u64 [sp + 0x30]\n  1803: u64 [s1 + 0x8] = a0\n  1806: a0 = u64 [sp + 0x38]\n  1809: u64 [s1] = a0\n  1811: sp = s0 + 0xffffffffffffff80\n  1814: ra = u64 [sp + 0x78]\n  1817: s0 = u64 [sp + 0x70]\n  1820: s1 = u64 [sp + 0x68]\n  1823: sp = sp + 0x80\n  1827: ret\n      : @46 (gas: 1)\n  1829: trap\n      : @47 (gas: 3)\n  1830: a0 = 0\n  1832: a1 = 0\n  1834: ra = 32, jump @0\n      : @48 [@dyn 16] (gas: 6)\n  1839: i32 a1 = a0 + 0\n  1841: a0 = 0x1\n  1844: a2 = 0\n  1846: ra = 0x22\n  1849: ecalli 5 // 'seal_return'\n  1851: fallthrough\n      : @49 [@dyn 17] (gas: 12)\n  1852: a2 = u64 [a1 + 0x10]\n  1855: a3 = u64 [a1 + 0x18]\n  1858: a4 = u64 [a1 + 0x8]\n  1861: a1 = u64 [a1]\n  1863: a3 = a3 | a4\n  1866: a4 = a1 | a2\n  1869: a4 = a4 | a3\n  1872: a4 = a4 >> 0x20\n  1875: a2 = a2 | a3\n  1878: a2 = a2 << 0x20\n  1881: a2 = a2 | a4\n  1884: jump @52 if a2 != 0\n      : @50 (gas: 13)\n  1888: sp = sp + 0xffffffffffffffd8\n  1891: u64 [sp + 0x20] = ra\n  1894: u64 [sp + 0x18] = s0\n  1897: u64 [sp + 0x10] = s1\n  1900: s0 = u64 [a0 + 0x18]\n  1903: s1 = u64 [a0 + 0x10]\n  1906: a2 = u64 [a0 + 0x8]\n  1909: u64 [sp] = a2\n  1911: a0 = u64 [a0]\n  1913: u64 [sp + 0x8] = a0\n  1916: i32 a0 = a1 + 0\n  1918: a1 = 0x20\n  1921: ra = 36, jump @0\n      : @51 [@dyn 18] (gas: 71)\n  1926: a1 = reverse s0\n  1928: a2 = reverse s1\n  1930: a3 = u64 [sp]\n  1932: a3 = reverse a3\n  1934: a4 = u64 [sp + 0x8]\n  1937: a4 = reverse a4\n  1939: a5 = a4 >> 0x38\n  1942: u8 [a0 + 0x1f] = a5\n  1945: a5 = a4 >> 0x30\n  1948: u8 [a0 + 0x1e] = a5\n  1951: a5 = a4 >> 0x28\n  1954: u8 [a0 + 0x1d] = a5\n  1957: a5 = a4 >> 0x20\n  1960: u8 [a0 + 0x1c] = a5\n  1963: a5 = a4 >> 0x18\n  1966: u8 [a0 + 0x1b] = a5\n  1969: a5 = a4 >> 0x10\n  1972: u8 [a0 + 0x1a] = a5\n  1975: a5 = a4 >> 0x8\n  1978: u8 [a0 + 0x19] = a5\n  1981: u8 [a0 + 0x18] = a4\n  1984: u8 [a0 + 0x10] = a3\n  1987: a4 = a3 >> 0x38\n  1990: u8 [a0 + 0x17] = a4\n  1993: a4 = a3 >> 0x30\n  1996: u8 [a0 + 0x16] = a4\n  1999: a4 = a3 >> 0x28\n  2002: u8 [a0 + 0x15] = a4\n  2005: a4 = a3 >> 0x20\n  2008: u8 [a0 + 0x14] = a4\n  2011: a4 = a3 >> 0x18\n  2014: u8 [a0 + 0x13] = a4\n  2017: a4 = a3 >> 0x10\n  2020: u8 [a0 + 0x12] = a4\n  2023: a3 = a3 >> 0x8\n  2026: u8 [a0 + 0x11] = a3\n  2029: u8 [a0 + 0x8] = a2\n  2032: a3 = a2 >> 0x38\n  2035: u8 [a0 + 0xf] = a3\n  2038: a3 = a2 >> 0x30\n  2041: u8 [a0 + 0xe] = a3\n  2044: a3 = a2 >> 0x28\n  2047: u8 [a0 + 0xd] = a3\n  2050: a3 = a2 >> 0x20\n  2053: u8 [a0 + 0xc] = a3\n  2056: a3 = a2 >> 0x18\n  2059: u8 [a0 + 0xb] = a3\n  2062: a3 = a2 >> 0x10\n  2065: u8 [a0 + 0xa] = a3\n  2068: a2 = a2 >> 0x8\n  2071: u8 [a0 + 0x9] = a2\n  2074: u8 [a0] = a1\n  2076: a2 = a1 >> 0x38\n  2079: u8 [a0 + 0x7] = a2\n  2082: a2 = a1 >> 0x30\n  2085: u8 [a0 + 0x6] = a2\n  2088: a2 = a1 >> 0x28\n  2091: u8 [a0 + 0x5] = a2\n  2094: a2 = a1 >> 0x20\n  2097: u8 [a0 + 0x4] = a2\n  2100: a2 = a1 >> 0x18\n  2103: u8 [a0 + 0x3] = a2\n  2106: a2 = a1 >> 0x10\n  2109: u8 [a0 + 0x2] = a2\n  2112: a1 = a1 >> 0x8\n  2115: u8 [a0 + 0x1] = a1\n  2118: ra = u64 [sp + 0x20]\n  2121: s0 = u64 [sp + 0x18]\n  2124: s1 = u64 [sp + 0x10]\n  2127: sp = sp + 0x28\n  2130: ret\n      : @52 (gas: 1)\n  2132: trap\n      : @53 (gas: 8)\n  2133: a0 = u64 [sp + 0x110]\n  2137: a1 = u64 [sp + 0x118]\n  2141: a2 = u64 [sp + 0x108]\n  2145: a3 = u64 [sp + 0x100]\n  2149: a1 = a1 | a2\n  2152: a0 = a0 | a3\n  2155: a0 = a0 | a1\n  2158: jump @59 if a0 != 0\n      : @54 (gas: 13)\n  2162: a0 = u32 [0x20004]\n  2167: u64 [sp + 152] = 0\n  2171: u64 [sp + 144] = 0\n  2175: u64 [sp + 136] = 0\n  2179: u64 [sp + 0x80] = a0\n  2183: u64 [sp + 184] = 0\n  2187: u64 [sp + 176] = 0\n  2191: u64 [sp + 160] = 0x4\n  2196: a0 = sp + 0xc0\n  2200: a1 = sp + 0xa0\n  2204: a2 = sp + 0x80\n  2208: u64 [sp + 168] = 0\n  2212: ra = 38, jump @40\n      : @55 [@dyn 19] (gas: 44)\n  2217: t0 = u64 [sp + 0xc0]\n  2221: a0 = u64 [sp + 0xc8]\n  2225: a1 = u64 [sp + 0xd0]\n  2229: a2 = u64 [sp + 0xd8]\n  2233: a4 = u64 [sp + 0xe0]\n  2237: a5 = u64 [sp + 0xe8]\n  2241: s1 = u64 [sp + 0xf0]\n  2245: a3 = u64 [sp + 0xf8]\n  2249: u64 [sp + 0x38] = a3\n  2252: u64 [sp + 0x30] = s1\n  2255: u64 [sp + 0x28] = a5\n  2258: u64 [sp + 0x20] = a4\n  2261: u64 [sp + 0x58] = a2\n  2264: u64 [sp + 0x50] = a1\n  2267: u64 [sp + 0x48] = a0\n  2270: a0 = sp + 0x60\n  2273: a1 = sp + 0x40\n  2276: a2 = sp + 0x20\n  2279: u64 [sp + 0x40] = t0\n  2282: ra = 0x28\n  2285: sp = sp + 0xffffffffffffff60\n  2289: u64 [sp + 0x98] = ra\n  2293: u64 [sp + 0x90] = s0\n  2297: u64 [sp + 0x88] = s1\n  2301: s0 = sp + 0xa0\n  2305: sp = sp & 0xffffffffffffffe0\n  2308: a3 = u64 [a2]\n  2310: u64 [sp + 0x30] = a3\n  2313: a3 = u64 [a2 + 0x8]\n  2316: u64 [sp + 0x28] = a3\n  2319: a3 = u64 [a2 + 0x10]\n  2322: u64 [sp + 0x20] = a3\n  2325: a2 = u64 [a2 + 0x18]\n  2328: u64 [sp + 0x18] = a2\n  2331: a2 = u64 [a1]\n  2333: u64 [sp + 0x10] = a2\n  2336: a2 = u64 [a1 + 0x8]\n  2339: u64 [sp + 0x8] = a2\n  2342: s1 = u32 [a1 + 0x10]\n  2345: u64 [sp + 0x38] = a0\n  2348: a1 = 0x20\n  2351: a0 = 0\n  2353: ra = 0x54\n  2356: jump @0\n      : @56 [@dyn 20] (gas: 11)\n  2359: a0 = u64 [sp + 0x78]\n  2362: u64 [sp] = a0\n  2364: a0 = u64 [sp + 0x70]\n  2367: u64 [sp + 0x8] = a0\n  2370: a0 = u64 [sp + 0x68]\n  2373: u64 [sp + 0x10] = a0\n  2376: a0 = u64 [sp + 0x60]\n  2379: u64 [sp + 0x18] = a0\n  2382: a0 = 0x40\n  2385: a1 = 0x20\n  2388: ra = 42, jump @0\n      : @57 [@dyn 21] (gas: 100)\n  2393: a1 = u8 [a0 + 0x11]\n  2396: a2 = u8 [a0 + 0x10]\n  2399: a3 = u8 [a0 + 0x12]\n  2402: a4 = u8 [a0 + 0x13]\n  2405: a1 = a1 << 0x8\n  2408: a1 = a1 | a2\n  2411: a3 = a3 << 0x10\n  2414: a4 = a4 << 0x18\n  2417: a3 = a3 | a4\n  2420: a1 = a1 | a3\n  2423: a2 = u8 [a0 + 0x15]\n  2426: a3 = u8 [a0 + 0x14]\n  2429: a4 = u8 [a0 + 0x16]\n  2432: a5 = u8 [a0 + 0x17]\n  2435: a2 = a2 << 0x8\n  2438: a2 = a2 | a3\n  2441: a4 = a4 << 0x10\n  2444: a5 = a5 << 0x18\n  2447: a4 = a4 | a5\n  2450: a2 = a2 | a4\n  2453: a2 = a2 << 0x20\n  2456: t0 = a2 | a1\n  2459: a2 = u8 [a0 + 0x1]\n  2462: a3 = u8 [a0]\n  2464: a4 = u8 [a0 + 0x2]\n  2467: a5 = u8 [a0 + 0x3]\n  2470: a2 = a2 << 0x8\n  2473: a2 = a2 | a3\n  2476: a4 = a4 << 0x10\n  2479: a5 = a5 << 0x18\n  2482: a4 = a4 | a5\n  2485: a2 = a2 | a4\n  2488: a3 = u8 [a0 + 0x5]\n  2491: a4 = u8 [a0 + 0x4]\n  2494: a5 = u8 [a0 + 0x6]\n  2497: s1 = u8 [a0 + 0x7]\n  2500: a3 = a3 << 0x8\n  2503: a3 = a3 | a4\n  2506: a5 = a5 << 0x10\n  2509: s1 = s1 << 0x18\n  2512: a5 = a5 | s1\n  2515: a3 = a3 | a5\n  2518: a3 = a3 << 0x20\n  2521: a2 = a2 | a3\n  2524: a3 = u8 [a0 + 0x19]\n  2527: a4 = u8 [a0 + 0x18]\n  2530: a5 = u8 [a0 + 0x1a]\n  2533: s1 = u8 [a0 + 0x1b]\n  2536: a3 = a3 << 0x8\n  2539: a3 = a3 | a4\n  2542: a5 = a5 << 0x10\n  2545: s1 = s1 << 0x18\n  2548: a5 = a5 | s1\n  2551: a3 = a3 | a5\n  2554: a4 = u8 [a0 + 0x1d]\n  2557: a5 = u8 [a0 + 0x1c]\n  2560: s1 = u8 [a0 + 0x1e]\n  2563: a1 = u8 [a0 + 0x1f]\n  2566: a4 = a4 << 0x8\n  2569: a4 = a4 | a5\n  2572: s1 = s1 << 0x10\n  2575: a1 = a1 << 0x18\n  2578: a1 = a1 | s1\n  2581: a1 = a1 | a4\n  2584: a1 = a1 << 0x20\n  2587: a3 = a3 | a1\n  2590: a1 = u8 [a0 + 0x9]\n  2593: a4 = u8 [a0 + 0x8]\n  2596: a5 = u8 [a0 + 0xa]\n  2599: s1 = u8 [a0 + 0xb]\n  2602: a1 = a1 << 0x8\n  2605: a1 = a1 | a4\n  2608: a5 = a5 << 0x10\n  2611: s1 = s1 << 0x18\n  2614: a5 = a5 | s1\n  2617: a1 = a1 | a5\n  2620: a4 = u8 [a0 + 0xd]\n  2623: a5 = u8 [a0 + 0xc]\n  2626: s1 = u8 [a0 + 0xe]\n  2629: a0 = u8 [a0 + 0xf]\n  2632: a4 = a4 << 0x8\n  2635: a4 = a4 | a5\n  2638: s1 = s1 << 0x10\n  2641: a0 = a0 << 0x18\n  2644: a0 = a0 | s1\n  2647: a0 = a0 | a4\n  2650: a0 = a0 << 0x20\n  2653: a0 = a0 | a1\n  2656: a1 = reverse a0\n  2658: a0 = reverse a3\n  2660: a2 = reverse a2\n  2662: a3 = reverse t0\n  2664: a2 = a2 | a3\n  2667: a3 = a0 | a1\n  2670: a3 = a3 | a2\n  2673: a3 = a3 >> 0x20\n  2676: a1 = a1 | a2\n  2679: a1 = a1 << 0x20\n  2682: a1 = a1 | a3\n  2685: jump @61 if a1 == 0\n      : @58 (gas: 1)\n  2688: trap\n      : @59 (gas: 3)\n  2689: a0 = 0\n  2691: a1 = 0\n  2693: ra = 44, jump @0\n      : @60 [@dyn 22] (gas: 5)\n  2698: i32 a1 = a0 + 0\n  2700: a0 = 0x1\n  2703: a2 = 0\n  2705: ecalli 5 // 'seal_return'\n  2707: fallthrough\n      : @61 (gas: 4)\n  2708: i32 s1 = a0 + 0\n  2710: a1 = 0x20\n  2713: a0 = s1\n  2715: ra = 46, jump @0\n      : @62 [@dyn 23] (gas: 71)\n  2720: a1 = u64 [sp]\n  2722: a1 = reverse a1\n  2724: a2 = u64 [sp + 0x8]\n  2727: a2 = reverse a2\n  2729: a3 = u64 [sp + 0x10]\n  2732: a3 = reverse a3\n  2734: a4 = u64 [sp + 0x18]\n  2737: a4 = reverse a4\n  2739: a5 = a4 >> 0x38\n  2742: u8 [a0 + 0x1f] = a5\n  2745: a5 = a4 >> 0x30\n  2748: u8 [a0 + 0x1e] = a5\n  2751: a5 = a4 >> 0x28\n  2754: u8 [a0 + 0x1d] = a5\n  2757: a5 = a4 >> 0x20\n  2760: u8 [a0 + 0x1c] = a5\n  2763: a5 = a4 >> 0x18\n  2766: u8 [a0 + 0x1b] = a5\n  2769: a5 = a4 >> 0x10\n  2772: u8 [a0 + 0x1a] = a5\n  2775: a5 = a4 >> 0x8\n  2778: u8 [a0 + 0x19] = a5\n  2781: u8 [a0 + 0x18] = a4\n  2784: u8 [a0 + 0x10] = a3\n  2787: a4 = a3 >> 0x38\n  2790: u8 [a0 + 0x17] = a4\n  2793: a4 = a3 >> 0x30\n  2796: u8 [a0 + 0x16] = a4\n  2799: a4 = a3 >> 0x28\n  2802: u8 [a0 + 0x15] = a4\n  2805: a4 = a3 >> 0x20\n  2808: u8 [a0 + 0x14] = a4\n  2811: a4 = a3 >> 0x18\n  2814: u8 [a0 + 0x13] = a4\n  2817: a4 = a3 >> 0x10\n  2820: u8 [a0 + 0x12] = a4\n  2823: a3 = a3 >> 0x8\n  2826: u8 [a0 + 0x11] = a3\n  2829: u8 [a0 + 0x8] = a2\n  2832: a3 = a2 >> 0x38\n  2835: u8 [a0 + 0xf] = a3\n  2838: a3 = a2 >> 0x30\n  2841: u8 [a0 + 0xe] = a3\n  2844: a3 = a2 >> 0x28\n  2847: u8 [a0 + 0xd] = a3\n  2850: a3 = a2 >> 0x20\n  2853: u8 [a0 + 0xc] = a3\n  2856: a3 = a2 >> 0x18\n  2859: u8 [a0 + 0xb] = a3\n  2862: a3 = a2 >> 0x10\n  2865: u8 [a0 + 0xa] = a3\n  2868: a2 = a2 >> 0x8\n  2871: u8 [a0 + 0x9] = a2\n  2874: u8 [a0] = a1\n  2876: a2 = a1 >> 0x38\n  2879: u8 [a0 + 0x7] = a2\n  2882: a2 = a1 >> 0x30\n  2885: u8 [a0 + 0x6] = a2\n  2888: a2 = a1 >> 0x28\n  2891: u8 [a0 + 0x5] = a2\n  2894: a2 = a1 >> 0x20\n  2897: u8 [a0 + 0x4] = a2\n  2900: a2 = a1 >> 0x18\n  2903: u8 [a0 + 0x3] = a2\n  2906: a2 = a1 >> 0x10\n  2909: u8 [a0 + 0x2] = a2\n  2912: a1 = a1 >> 0x8\n  2915: u8 [a0 + 0x1] = a1\n  2918: a1 = 0x20\n  2921: a0 = s1\n  2923: ra = 48, jump @0\n      : @63 [@dyn 24] (gas: 6)\n  2928: i32 a1 = a0 + 0\n  2930: a2 = 0x20\n  2933: a0 = 0\n  2935: ra = 0x32\n  2938: ecalli 5 // 'seal_return'\n  2940: fallthrough\n      : @64 [@dyn 25] (gas: 47)\n  2941: sp = sp + 0xffffffffffffff60\n  2945: u64 [sp + 0x98] = ra\n  2949: u64 [sp + 0x90] = s0\n  2953: u64 [sp + 0x88] = s1\n  2957: s0 = sp + 0xa0\n  2961: sp = sp & 0xffffffffffffffe0\n  2964: t0 = u64 [a1 + 0x10]\n  2967: a5 = u64 [a1 + 0x8]\n  2970: a3 = u64 [a2 + 0x8]\n  2973: ra = u64 [a1]\n  2975: a4 = u64 [a2]\n  2977: u64 [sp + 0x48] = a4\n  2980: t2 = u64 [a2 + 0x10]\n  2983: t1 = a3 ^ a5\n  2986: s1 = a3 <u a5\n  2989: a4 = a4 <u ra\n  2992: u64 [sp + 0x40] = a4\n  2995: s1 = a4 if t1 == 0\n  2998: t1 = u64 [a1 + 0x18]\n  3001: a1 = u64 [a2 + 0x18]\n  3004: u64 [sp + 0x38] = a1\n  3007: a2 = t2 - t0\n  3010: a1 = a2 - s1\n  3013: u64 [sp + 0x50] = a1\n  3016: a1 = a2 <u s1\n  3019: a4 = t2 <u t0\n  3022: u64 [sp + 0x58] = t1\n  3025: a2 = u64 [sp + 0x38]\n  3028: a2 = a2 - t1\n  3031: a2 = a2 - a4\n  3034: a2 = a2 - a1\n  3037: a1 = a3 - a5\n  3040: a3 = u64 [sp + 0x40]\n  3043: a1 = a1 - a3\n  3046: a3 = u64 [sp + 0x48]\n  3049: a3 = a3 - ra\n  3052: a4 = a1 >u 0\n  3054: a3 = a3 <u 0x60\n  3057: a3 = a3 ^ 0x1\n  3060: a3 = a4 if a1 != 0\n  3063: s1 = a2 >s 0\n  3065: a1 = u64 [sp + 0x50]\n  3068: a4 = a1 >u 0\n  3070: a4 = s1 if a2 != 0\n  3073: a1 = a1 | a2\n  3076: a3 = a4 if a1 != 0\n  3079: jump @73 if a3 == 0\n      : @65 (gas: 12)\n  3083: s1 = a0\n  3085: a0 = ra | t0\n  3088: u64 [sp + 0x50] = a5\n  3091: a1 = u64 [sp + 0x58]\n  3094: a1 = a1 | a5\n  3097: a0 = a0 | a1\n  3100: a0 = a0 >> 0x20\n  3103: u64 [sp + 0x38] = t0\n  3106: a1 = a1 | t0\n  3109: a1 = a1 << 0x20\n  3112: a0 = a0 | a1\n  3115: jump @72 if a0 != 0\n      : @66 (gas: 6)\n  3119: u64 [sp + 0x48] = ra\n  3122: i32 a1 = ra + 0\n  3124: i32 a0 = sp + 0x60\n  3127: u64 [sp + 0x40] = a1\n  3130: ecalli 1 // 'call_data_load'\n  3132: fallthrough\n      : @67 (gas: 10)\n  3133: a3 = u64 [sp + 0x70]\n  3136: a4 = u64 [sp + 0x78]\n  3139: a0 = 0x100000000\n  3149: a1 = a3 ^ a0\n  3152: a1 = a1 | a4\n  3155: a2 = a3 >> 0x20\n  3158: a2 = a2 <u 0x1\n  3161: a2 = 0 if a4 != 0\n  3163: a2 = 0 if a1 == 0\n  3165: jump @73 if a2 == 0\n      : @68 (gas: 13)\n  3169: u64 [sp + 0x28] = a4\n  3172: u64 [sp + 0x30] = a3\n  3175: a1 = u64 [sp + 0x38]\n  3178: a2 = u64 [sp + 0x58]\n  3181: a2 = a2 | a1\n  3184: a0 = 0xffffffe0\n  3194: a1 = u64 [sp + 0x48]\n  3197: a0 = a1 <u a0\n  3200: a1 = u64 [sp + 0x50]\n  3203: a0 = 0 if a1 != 0\n  3205: u64 [sp + 0x58] = a2\n  3208: a0 = 0 if a2 != 0\n  3210: jump @72 if a0 == 0\n      : @69 (gas: 9)\n  3214: a0 = u64 [sp + 0x68]\n  3217: u64 [sp + 0x20] = a0\n  3220: a0 = u64 [sp + 0x60]\n  3223: u64 [sp + 0x38] = a0\n  3226: a0 = u64 [sp + 0x40]\n  3229: i32 a1 = a0 + 0x20\n  3232: i32 a0 = sp + 0x60\n  3235: ecalli 1 // 'call_data_load'\n  3237: fallthrough\n      : @70 (gas: 8)\n  3238: a0 = 0xffffffc0\n  3248: a1 = u64 [sp + 0x48]\n  3251: a0 = a1 <u a0\n  3254: a1 = u64 [sp + 0x50]\n  3257: a0 = 0 if a1 != 0\n  3259: a1 = u64 [sp + 0x58]\n  3262: a0 = 0 if a1 != 0\n  3264: jump @72 if a0 == 0\n      : @71 (gas: 42)\n  3268: a0 = u64 [sp + 0x78]\n  3271: u64 [sp + 0x18] = a0\n  3274: a0 = u64 [sp + 0x70]\n  3277: u64 [sp + 0x48] = a0\n  3280: a0 = u64 [sp + 0x68]\n  3283: u64 [sp + 0x50] = a0\n  3286: a0 = u64 [sp + 0x60]\n  3289: u64 [sp + 0x58] = a0\n  3292: a0 = u64 [sp + 0x40]\n  3295: i32 a1 = a0 + 0x40\n  3298: i32 a0 = sp + 0x60\n  3301: ecalli 1 // 'call_data_load'\n  3303: a0 = u64 [sp + 0x78]\n  3306: a1 = u64 [sp + 0x70]\n  3309: a2 = u64 [sp + 0x68]\n  3312: a3 = u64 [sp + 0x60]\n  3315: u64 [s1 + 0x58] = a0\n  3318: u64 [s1 + 0x50] = a1\n  3321: u64 [s1 + 0x48] = a2\n  3324: u64 [s1 + 0x40] = a3\n  3327: a0 = u64 [sp + 0x18]\n  3330: u64 [s1 + 0x38] = a0\n  3333: a0 = u64 [sp + 0x48]\n  3336: u64 [s1 + 0x30] = a0\n  3339: a0 = u64 [sp + 0x50]\n  3342: u64 [s1 + 0x28] = a0\n  3345: a0 = u64 [sp + 0x58]\n  3348: u64 [s1 + 0x20] = a0\n  3351: a0 = u64 [sp + 0x28]\n  3354: u64 [s1 + 0x18] = a0\n  3357: a0 = u64 [sp + 0x30]\n  3360: u64 [s1 + 0x10] = a0\n  3363: a0 = u64 [sp + 0x20]\n  3366: u64 [s1 + 0x8] = a0\n  3369: a0 = u64 [sp + 0x38]\n  3372: u64 [s1] = a0\n  3374: sp = s0 + 0xffffffffffffff60\n  3378: ra = u64 [sp + 0x98]\n  3382: s0 = u64 [sp + 0x90]\n  3386: s1 = u64 [sp + 0x88]\n  3390: sp = sp + 0xa0\n  3394: ret\n      : @72 (gas: 1)\n  3396: trap\n      : @73 (gas: 3)\n  3397: a0 = 0\n  3399: a1 = 0\n  3401: ra = 52, jump @0\n      : @74 [@dyn 26] (gas: 6)\n  3406: i32 a1 = a0 + 0\n  3408: a0 = 0x1\n  3411: a2 = 0\n  3413: ra = 0x36\n  3416: ecalli 5 // 'seal_return'\n  3418: fallthrough\n      : @75 [@dyn 27] (gas: 9)\n  3419: a2 = u64 [a1 + 0x18]\n  3422: a3 = u64 [a1 + 0x10]\n  3425: a4 = u64 [a1 + 0x8]\n  3428: a1 = u64 [a1]\n  3430: u64 [a0 + 0x18] = a2\n  3433: u64 [a0 + 0x10] = a3\n  3436: u64 [a0 + 0x8] = a4\n  3439: u64 [a0] = a1\n  3441: ret\n      : @76 (gas: 8)\n  3443: a0 = u64 [sp + 0x130]\n  3447: a1 = u64 [sp + 0x138]\n  3451: a2 = u64 [sp + 0x128]\n  3455: a3 = u64 [sp + 0x120]\n  3459: a1 = a1 | a2\n  3462: a0 = a0 | a3\n  3465: a0 = a0 | a1\n  3468: jump @82 if a0 != 0\n      : @77 (gas: 13)\n  3472: a0 = u32 [0x20004]\n  3477: u64 [sp + 152] = 0\n  3481: u64 [sp + 144] = 0\n  3485: u64 [sp + 136] = 0\n  3489: u64 [sp + 0x80] = a0\n  3493: u64 [sp + 184] = 0\n  3497: u64 [sp + 176] = 0\n  3501: u64 [sp + 160] = 0x4\n  3506: a0 = sp + 0xc0\n  3510: a1 = sp + 0xa0\n  3514: a2 = sp + 0x80\n  3518: u64 [sp + 168] = 0\n  3522: ra = 56, jump @64\n      : @78 [@dyn 28] (gas: 61)\n  3527: a0 = u64 [sp + 0xc0]\n  3531: u64 [sp + 0x18] = a0\n  3534: t1 = u64 [sp + 0xc8]\n  3538: t2 = u64 [sp + 0xd0]\n  3542: ra = u64 [sp + 0xd8]\n  3546: t0 = u64 [sp + 0xe0]\n  3550: a5 = u64 [sp + 0xe8]\n  3554: a4 = u64 [sp + 0xf0]\n  3558: a3 = u64 [sp + 0xf8]\n  3562: a1 = u64 [sp + 0x100]\n  3566: s1 = u64 [sp + 0x108]\n  3570: a2 = u64 [sp + 0x110]\n  3574: a0 = u64 [sp + 0x118]\n  3578: u64 [sp + 0x38] = a0\n  3581: u64 [sp + 0x30] = a2\n  3584: u64 [sp + 0x28] = s1\n  3587: u64 [sp + 0x20] = a1\n  3590: u64 [sp + 0x58] = a3\n  3593: u64 [sp + 0x50] = a4\n  3596: u64 [sp + 0x48] = a5\n  3599: u64 [sp + 0x40] = t0\n  3602: u64 [sp + 0x78] = ra\n  3605: u64 [sp + 0x70] = t2\n  3608: u64 [sp + 0x68] = t1\n  3611: a0 = sp + 0x60\n  3614: a1 = sp + 0x40\n  3617: a2 = sp + 0x20\n  3620: a3 = u64 [sp + 0x18]\n  3623: u64 [sp + 0x60] = a3\n  3626: ra = 0x3a\n  3629: sp = sp + 0xfffffffffffffd20\n  3633: u64 [sp + 0x2d8] = ra\n  3637: u64 [sp + 0x2d0] = s0\n  3641: u64 [sp + 0x2c8] = s1\n  3645: s0 = sp + 0x2e0\n  3649: sp = sp & 0xffffffffffffffe0\n  3652: a3 = u64 [a2]\n  3654: u64 [sp + 0x1d8] = a3\n  3658: a3 = u64 [a2 + 0x8]\n  3661: u64 [sp + 0x1d0] = a3\n  3665: a3 = u64 [a2 + 0x10]\n  3668: u64 [sp + 0x1c0] = a3\n  3672: a2 = u64 [a2 + 0x18]\n  3675: u64 [sp + 0x1c8] = a2\n  3679: a2 = u64 [a1]\n  3681: u64 [sp + 0x1b8] = a2\n  3685: a2 = u64 [a1 + 0x8]\n  3688: u64 [sp + 0x1b0] = a2\n  3692: a2 = u64 [a1 + 0x10]\n  3695: u64 [sp + 0x1a8] = a2\n  3699: a1 = u64 [a1 + 0x18]\n  3702: u64 [sp + 0x1a0] = a1\n  3706: a1 = u64 [a0]\n  3708: u64 [sp + 0x198] = a1\n  3712: a1 = u64 [a0 + 0x8]\n  3715: u64 [sp + 0x190] = a1\n  3719: s1 = u32 [a0 + 0x10]\n  3722: a1 = 0x20\n  3725: a0 = 0\n  3727: ra = 0x66\n  3730: jump @0\n      : @79 [@dyn 29] (gas: 3)\n  3733: a0 = 0x40\n  3736: a1 = 0x20\n  3739: ra = 60, jump @0\n      : @80 [@dyn 30] (gas: 100)\n  3744: a1 = u8 [a0 + 0x11]\n  3747: a2 = u8 [a0 + 0x10]\n  3750: a3 = u8 [a0 + 0x12]\n  3753: a4 = u8 [a0 + 0x13]\n  3756: a1 = a1 << 0x8\n  3759: a1 = a1 | a2\n  3762: a3 = a3 << 0x10\n  3765: a4 = a4 << 0x18\n  3768: a3 = a3 | a4\n  3771: a1 = a1 | a3\n  3774: a2 = u8 [a0 + 0x15]\n  3777: a3 = u8 [a0 + 0x14]\n  3780: a4 = u8 [a0 + 0x16]\n  3783: a5 = u8 [a0 + 0x17]\n  3786: a2 = a2 << 0x8\n  3789: a2 = a2 | a3\n  3792: a4 = a4 << 0x10\n  3795: a5 = a5 << 0x18\n  3798: a4 = a4 | a5\n  3801: a2 = a2 | a4\n  3804: a2 = a2 << 0x20\n  3807: t0 = a2 | a1\n  3810: a2 = u8 [a0 + 0x1]\n  3813: a3 = u8 [a0]\n  3815: a4 = u8 [a0 + 0x2]\n  3818: a5 = u8 [a0 + 0x3]\n  3821: a2 = a2 << 0x8\n  3824: a2 = a2 | a3\n  3827: a4 = a4 << 0x10\n  3830: a5 = a5 << 0x18\n  3833: a4 = a4 | a5\n  3836: a2 = a2 | a4\n  3839: a3 = u8 [a0 + 0x5]\n  3842: a4 = u8 [a0 + 0x4]\n  3845: a5 = u8 [a0 + 0x6]\n  3848: s1 = u8 [a0 + 0x7]\n  3851: a3 = a3 << 0x8\n  3854: a3 = a3 | a4\n  3857: a5 = a5 << 0x10\n  3860: s1 = s1 << 0x18\n  3863: a5 = a5 | s1\n  3866: a3 = a3 | a5\n  3869: a3 = a3 << 0x20\n  3872: a2 = a2 | a3\n  3875: a3 = u8 [a0 + 0x19]\n  3878: a4 = u8 [a0 + 0x18]\n  3881: a5 = u8 [a0 + 0x1a]\n  3884: s1 = u8 [a0 + 0x1b]\n  3887: a3 = a3 << 0x8\n  3890: a3 = a3 | a4\n  3893: a5 = a5 << 0x10\n  3896: s1 = s1 << 0x18\n  3899: a5 = a5 | s1\n  3902: a3 = a3 | a5\n  3905: a4 = u8 [a0 + 0x1d]\n  3908: a5 = u8 [a0 + 0x1c]\n  3911: s1 = u8 [a0 + 0x1e]\n  3914: a1 = u8 [a0 + 0x1f]\n  3917: a4 = a4 << 0x8\n  3920: a4 = a4 | a5\n  3923: s1 = s1 << 0x10\n  3926: a1 = a1 << 0x18\n  3929: a1 = a1 | s1\n  3932: a1 = a1 | a4\n  3935: a1 = a1 << 0x20\n  3938: a3 = a3 | a1\n  3941: a1 = u8 [a0 + 0x9]\n  3944: a4 = u8 [a0 + 0x8]\n  3947: a5 = u8 [a0 + 0xa]\n  3950: s1 = u8 [a0 + 0xb]\n  3953: a1 = a1 << 0x8\n  3956: a1 = a1 | a4\n  3959: a5 = a5 << 0x10\n  3962: s1 = s1 << 0x18\n  3965: a5 = a5 | s1\n  3968: a1 = a1 | a5\n  3971: a4 = u8 [a0 + 0xd]\n  3974: a5 = u8 [a0 + 0xc]\n  3977: s1 = u8 [a0 + 0xe]\n  3980: a0 = u8 [a0 + 0xf]\n  3983: a4 = a4 << 0x8\n  3986: a4 = a4 | a5\n  3989: s1 = s1 << 0x10\n  3992: a0 = a0 << 0x18\n  3995: a0 = a0 | s1\n  3998: a0 = a0 | a4\n  4001: a0 = a0 << 0x20\n  4004: a0 = a0 | a1\n  4007: a1 = reverse a0\n  4009: a0 = reverse a3\n  4011: a2 = reverse a2\n  4013: a3 = reverse t0\n  4015: a2 = a2 | a3\n  4018: a3 = a0 | a1\n  4021: a3 = a3 | a2\n  4024: a3 = a3 >> 0x20\n  4027: a1 = a1 | a2\n  4030: a1 = a1 << 0x20\n  4033: a1 = a1 | a3\n  4036: jump @84 if a1 == 0\n      : @81 (gas: 1)\n  4039: trap\n      : @82 (gas: 3)\n  4040: a0 = 0\n  4042: a1 = 0\n  4044: ra = 62, jump @0\n      : @83 [@dyn 31] (gas: 7)\n  4049: i32 a1 = a0 + 0\n  4051: a0 = 0x1\n  4054: a2 = 0\n  4056: ecalli 5 // 'seal_return'\n  4058: i32 a0 = a0 + 0\n  4060: ra = 0x40\n  4063: jump @0\n      : @84 (gas: 2)\n  4066: i32 a0 = a0 + 0\n  4068: ra = 64, jump @0\n      : @85 [@dyn 32] (gas: 6)\n  4073: i32 a1 = a0 + 0\n  4075: a0 = 0\n  4077: a2 = 0\n  4079: ra = 0x42\n  4082: ecalli 5 // 'seal_return'\n  4084: fallthrough\n      : @86 [@dyn 33] (gas: 13)\n  4085: sp = sp + 0xfffffffffffffea0\n  4089: u64 [sp + 0x158] = ra\n  4093: u64 [sp + 0x150] = s0\n  4097: u64 [sp + 0x148] = s1\n  4101: s0 = sp + 0x160\n  4105: sp = sp & 0xffffffffffffffe0\n  4108: u64 [sp + 312] = 0\n  4112: u64 [sp + 304] = 0\n  4116: u64 [sp + 296] = 0\n  4120: u64 [sp + 288] = 0\n  4124: i32 a0 = sp + 0x120\n  4128: ecalli 8 // 'value_transferred'\n  4130: fallthrough\n      : @87 (gas: 8)\n  4131: a0 = u64 [sp + 0x130]\n  4135: a1 = u64 [sp + 0x138]\n  4139: a2 = u64 [sp + 0x128]\n  4143: a3 = u64 [sp + 0x120]\n  4147: a1 = a1 | a2\n  4150: a0 = a0 | a3\n  4153: a0 = a0 | a1\n  4156: jump @93 if a0 != 0\n      : @88 (gas: 13)\n  4160: a0 = u32 [0x20004]\n  4165: u64 [sp + 152] = 0\n  4169: u64 [sp + 144] = 0\n  4173: u64 [sp + 136] = 0\n  4177: u64 [sp + 0x80] = a0\n  4181: u64 [sp + 184] = 0\n  4185: u64 [sp + 176] = 0\n  4189: u64 [sp + 160] = 0x4\n  4194: a0 = sp + 0xc0\n  4198: a1 = sp + 0xa0\n  4202: a2 = sp + 0x80\n  4206: u64 [sp + 168] = 0\n  4210: ra = 68, jump @64\n      : @89 [@dyn 34] (gas: 30)\n  4215: a0 = u64 [sp + 0xc0]\n  4219: u64 [sp + 0x18] = a0\n  4222: t1 = u64 [sp + 0xc8]\n  4226: t2 = u64 [sp + 0xd0]\n  4230: ra = u64 [sp + 0xd8]\n  4234: t0 = u64 [sp + 0xe0]\n  4238: a5 = u64 [sp + 0xe8]\n  4242: a4 = u64 [sp + 0xf0]\n  4246: a3 = u64 [sp + 0xf8]\n  4250: a1 = u64 [sp + 0x100]\n  4254: s1 = u64 [sp + 0x108]\n  4258: a2 = u64 [sp + 0x110]\n  4262: a0 = u64 [sp + 0x118]\n  4266: u64 [sp + 0x38] = a0\n  4269: u64 [sp + 0x30] = a2\n  4272: u64 [sp + 0x28] = s1\n  4275: u64 [sp + 0x20] = a1\n  4278: u64 [sp + 0x58] = a3\n  4281: u64 [sp + 0x50] = a4\n  4284: u64 [sp + 0x48] = a5\n  4287: u64 [sp + 0x40] = t0\n  4290: u64 [sp + 0x78] = ra\n  4293: u64 [sp + 0x70] = t2\n  4296: u64 [sp + 0x68] = t1\n  4299: a0 = sp + 0x60\n  4302: a1 = sp + 0x40\n  4305: a2 = sp + 0x20\n  4308: a3 = u64 [sp + 0x18]\n  4311: u64 [sp + 0x60] = a3\n  4314: ra = 70, jump @148\n      : @90 [@dyn 35] (gas: 3)\n  4319: a0 = 0x40\n  4322: a1 = 0x20\n  4325: ra = 72, jump @0\n      : @91 [@dyn 36] (gas: 100)\n  4330: a1 = u8 [a0 + 0x11]\n  4333: a2 = u8 [a0 + 0x10]\n  4336: a3 = u8 [a0 + 0x12]\n  4339: a4 = u8 [a0 + 0x13]\n  4342: a1 = a1 << 0x8\n  4345: a1 = a1 | a2\n  4348: a3 = a3 << 0x10\n  4351: a4 = a4 << 0x18\n  4354: a3 = a3 | a4\n  4357: a1 = a1 | a3\n  4360: a2 = u8 [a0 + 0x15]\n  4363: a3 = u8 [a0 + 0x14]\n  4366: a4 = u8 [a0 + 0x16]\n  4369: a5 = u8 [a0 + 0x17]\n  4372: a2 = a2 << 0x8\n  4375: a2 = a2 | a3\n  4378: a4 = a4 << 0x10\n  4381: a5 = a5 << 0x18\n  4384: a4 = a4 | a5\n  4387: a2 = a2 | a4\n  4390: a2 = a2 << 0x20\n  4393: t0 = a2 | a1\n  4396: a2 = u8 [a0 + 0x1]\n  4399: a3 = u8 [a0]\n  4401: a4 = u8 [a0 + 0x2]\n  4404: a5 = u8 [a0 + 0x3]\n  4407: a2 = a2 << 0x8\n  4410: a2 = a2 | a3\n  4413: a4 = a4 << 0x10\n  4416: a5 = a5 << 0x18\n  4419: a4 = a4 | a5\n  4422: a2 = a2 | a4\n  4425: a3 = u8 [a0 + 0x5]\n  4428: a4 = u8 [a0 + 0x4]\n  4431: a5 = u8 [a0 + 0x6]\n  4434: s1 = u8 [a0 + 0x7]\n  4437: a3 = a3 << 0x8\n  4440: a3 = a3 | a4\n  4443: a5 = a5 << 0x10\n  4446: s1 = s1 << 0x18\n  4449: a5 = a5 | s1\n  4452: a3 = a3 | a5\n  4455: a3 = a3 << 0x20\n  4458: a2 = a2 | a3\n  4461: a3 = u8 [a0 + 0x19]\n  4464: a4 = u8 [a0 + 0x18]\n  4467: a5 = u8 [a0 + 0x1a]\n  4470: s1 = u8 [a0 + 0x1b]\n  4473: a3 = a3 << 0x8\n  4476: a3 = a3 | a4\n  4479: a5 = a5 << 0x10\n  4482: s1 = s1 << 0x18\n  4485: a5 = a5 | s1\n  4488: a3 = a3 | a5\n  4491: a4 = u8 [a0 + 0x1d]\n  4494: a5 = u8 [a0 + 0x1c]\n  4497: s1 = u8 [a0 + 0x1e]\n  4500: a1 = u8 [a0 + 0x1f]\n  4503: a4 = a4 << 0x8\n  4506: a4 = a4 | a5\n  4509: s1 = s1 << 0x10\n  4512: a1 = a1 << 0x18\n  4515: a1 = a1 | s1\n  4518: a1 = a1 | a4\n  4521: a1 = a1 << 0x20\n  4524: a3 = a3 | a1\n  4527: a1 = u8 [a0 + 0x9]\n  4530: a4 = u8 [a0 + 0x8]\n  4533: a5 = u8 [a0 + 0xa]\n  4536: s1 = u8 [a0 + 0xb]\n  4539: a1 = a1 << 0x8\n  4542: a1 = a1 | a4\n  4545: a5 = a5 << 0x10\n  4548: s1 = s1 << 0x18\n  4551: a5 = a5 | s1\n  4554: a1 = a1 | a5\n  4557: a4 = u8 [a0 + 0xd]\n  4560: a5 = u8 [a0 + 0xc]\n  4563: s1 = u8 [a0 + 0xe]\n  4566: a0 = u8 [a0 + 0xf]\n  4569: a4 = a4 << 0x8\n  4572: a4 = a4 | a5\n  4575: s1 = s1 << 0x10\n  4578: a0 = a0 << 0x18\n  4581: a0 = a0 | s1\n  4584: a0 = a0 | a4\n  4587: a0 = a0 << 0x20\n  4590: a0 = a0 | a1\n  4593: a1 = reverse a0\n  4595: a0 = reverse a3\n  4597: a2 = reverse a2\n  4599: a3 = reverse t0\n  4601: a2 = a2 | a3\n  4604: a3 = a0 | a1\n  4607: a3 = a3 | a2\n  4610: a3 = a3 >> 0x20\n  4613: a1 = a1 | a2\n  4616: a1 = a1 << 0x20\n  4619: a1 = a1 | a3\n  4622: jump @95 if a1 == 0\n      : @92 (gas: 1)\n  4625: trap\n      : @93 (gas: 3)\n  4626: a0 = 0\n  4628: a1 = 0\n  4630: ra = 74, jump @0\n      : @94 [@dyn 37] (gas: 7)\n  4635: i32 a1 = a0 + 0\n  4637: a0 = 0x1\n  4640: a2 = 0\n  4642: ecalli 5 // 'seal_return'\n  4644: i32 a0 = a0 + 0\n  4646: ra = 0x4c\n  4649: jump @0\n      : @95 (gas: 2)\n  4652: i32 a0 = a0 + 0\n  4654: ra = 76, jump @0\n      : @96 [@dyn 38] (gas: 6)\n  4659: i32 a1 = a0 + 0\n  4661: a0 = 0\n  4663: a2 = 0\n  4665: ra = 0x4e\n  4668: ecalli 5 // 'seal_return'\n  4670: fallthrough\n      : @97 [@dyn 39] (gas: 5)\n  4671: sp = sp + 0xfffffffffffffff8\n  4674: u64 [sp] = ra\n  4676: a0 = 0\n  4678: a1 = 0\n  4680: ra = 80, jump @0\n      : @98 [@dyn 40] (gas: 6)\n  4685: i32 a1 = a0 + 0\n  4687: a0 = 0x1\n  4690: a2 = 0\n  4692: ra = 0x52\n  4695: ecalli 5 // 'seal_return'\n  4697: fallthrough\n      : @99 [@dyn 41] (gas: 5)\n  4698: u64 [a0 + 24] = 0\n  4701: u64 [a0 + 16] = 0\n  4704: u64 [a0 + 8] = 0\n  4707: u64 [a0 + 0] = 0\n  4709: ret\n      : @100 [@dyn 42] (gas: 58)\n  4711: a1 = reverse s1\n  4713: a2 = u64 [sp + 0x8]\n  4716: a2 = reverse a2\n  4718: a3 = u64 [sp + 0x10]\n  4721: a3 = reverse a3\n  4723: a4 = a3 >> 0x38\n  4726: u8 [a0 + 0x1f] = a4\n  4729: a4 = a3 >> 0x30\n  4732: u8 [a0 + 0x1e] = a4\n  4735: a4 = a3 >> 0x28\n  4738: u8 [a0 + 0x1d] = a4\n  4741: a4 = a3 >> 0x20\n  4744: u8 [a0 + 0x1c] = a4\n  4747: a4 = a3 >> 0x18\n  4750: u8 [a0 + 0x1b] = a4\n  4753: a4 = a3 >> 0x10\n  4756: u8 [a0 + 0x1a] = a4\n  4759: a4 = a3 >> 0x8\n  4762: u8 [a0 + 0x19] = a4\n  4765: u8 [a0 + 0x18] = a3\n  4768: a3 = a2 >> 0x38\n  4771: u8 [a0 + 0x17] = a3\n  4774: a3 = a2 >> 0x30\n  4777: u8 [a0 + 0x16] = a3\n  4780: a3 = a2 >> 0x28\n  4783: u8 [a0 + 0x15] = a3\n  4786: a3 = a2 >> 0x20\n  4789: u8 [a0 + 0x14] = a3\n  4792: a3 = a2 >> 0x18\n  4795: u8 [a0 + 0x13] = a3\n  4798: a3 = a2 >> 0x10\n  4801: u8 [a0 + 0x12] = a3\n  4804: a3 = a2 >> 0x8\n  4807: u8 [a0 + 0x11] = a3\n  4810: u8 [a0 + 0x10] = a2\n  4813: a2 = a1 >> 0x38\n  4816: u8 [a0 + 0xf] = a2\n  4819: a2 = a1 >> 0x30\n  4822: u8 [a0 + 0xe] = a2\n  4825: a2 = a1 >> 0x28\n  4828: u8 [a0 + 0xd] = a2\n  4831: a2 = a1 >> 0x20\n  4834: u8 [a0 + 0xc] = a2\n  4837: u8 [a0 + 11] = 0\n  4840: u8 [a0 + 10] = 0\n  4843: u8 [a0 + 9] = 0\n  4846: u8 [a0 + 0x8] = a1\n  4849: u8 [a0 + 7] = 0\n  4852: u8 [a0 + 6] = 0\n  4855: u8 [a0 + 5] = 0\n  4858: u8 [a0 + 4] = 0\n  4861: u8 [a0 + 3] = 0\n  4864: u8 [a0 + 2] = 0\n  4867: u8 [a0 + 1] = 0\n  4870: u8 [a0 + 0] = 0\n  4872: a0 = 0x20\n  4875: a1 = 0x20\n  4878: ra = 86, jump @0\n      : @101 [@dyn 43] (gas: 35)\n  4883: u8 [a0 + 31] = 0\n  4886: u8 [a0 + 30] = 0\n  4889: u8 [a0 + 29] = 0\n  4892: u8 [a0 + 28] = 0\n  4895: u8 [a0 + 27] = 0\n  4898: u8 [a0 + 26] = 0\n  4901: u8 [a0 + 25] = 0\n  4904: u8 [a0 + 24] = 0\n  4907: u8 [a0 + 23] = 0\n  4910: u8 [a0 + 22] = 0\n  4913: u8 [a0 + 21] = 0\n  4916: u8 [a0 + 20] = 0\n  4919: u8 [a0 + 19] = 0\n  4922: u8 [a0 + 18] = 0\n  4925: u8 [a0 + 17] = 0\n  4928: u8 [a0 + 16] = 0\n  4931: u8 [a0 + 15] = 0\n  4934: u8 [a0 + 14] = 0\n  4937: u8 [a0 + 13] = 0\n  4940: u8 [a0 + 12] = 0\n  4943: u8 [a0 + 11] = 0\n  4946: u8 [a0 + 10] = 0\n  4949: u8 [a0 + 9] = 0\n  4952: u8 [a0 + 8] = 0\n  4955: u8 [a0 + 7] = 0\n  4958: u8 [a0 + 6] = 0\n  4961: u8 [a0 + 5] = 0\n  4964: u8 [a0 + 4] = 0\n  4967: u8 [a0 + 3] = 0\n  4970: u8 [a0 + 2] = 0\n  4973: u8 [a0 + 1] = 0\n  4976: u8 [a0 + 0] = 0\n  4978: a1 = 0x40\n  4981: a0 = 0\n  4983: ra = 88, jump @0\n      : @102 [@dyn 44] (gas: 14)\n  4988: i32 a0 = a0 + 0\n  4990: i32 a2 = sp + 0x60\n  4993: a1 = 0x40\n  4996: ecalli 4 // 'hash_keccak_256'\n  4998: a0 = u64 [sp + 0x60]\n  5001: u64 [sp + 0x10] = a0\n  5004: a0 = u64 [sp + 0x68]\n  5007: u64 [sp + 0x8] = a0\n  5010: a0 = u64 [sp + 0x70]\n  5013: u64 [sp] = a0\n  5015: s1 = u64 [sp + 0x78]\n  5018: a1 = 0x20\n  5021: a0 = 0\n  5023: ra = 90, jump @0\n      : @103 [@dyn 45] (gas: 71)\n  5028: a1 = u64 [sp + 0x18]\n  5031: a1 = reverse a1\n  5033: a2 = u64 [sp + 0x20]\n  5036: a2 = reverse a2\n  5038: a3 = u64 [sp + 0x28]\n  5041: a3 = reverse a3\n  5043: a4 = u64 [sp + 0x30]\n  5046: a4 = reverse a4\n  5048: a5 = a4 >> 0x38\n  5051: u8 [a0 + 0x1f] = a5\n  5054: a5 = a4 >> 0x30\n  5057: u8 [a0 + 0x1e] = a5\n  5060: a5 = a4 >> 0x28\n  5063: u8 [a0 + 0x1d] = a5\n  5066: a5 = a4 >> 0x20\n  5069: u8 [a0 + 0x1c] = a5\n  5072: a5 = a4 >> 0x18\n  5075: u8 [a0 + 0x1b] = a5\n  5078: a5 = a4 >> 0x10\n  5081: u8 [a0 + 0x1a] = a5\n  5084: a5 = a4 >> 0x8\n  5087: u8 [a0 + 0x19] = a5\n  5090: u8 [a0 + 0x18] = a4\n  5093: a4 = a3 >> 0x38\n  5096: u8 [a0 + 0x17] = a4\n  5099: a4 = a3 >> 0x30\n  5102: u8 [a0 + 0x16] = a4\n  5105: a4 = a3 >> 0x28\n  5108: u8 [a0 + 0x15] = a4\n  5111: a4 = a3 >> 0x20\n  5114: u8 [a0 + 0x14] = a4\n  5117: a4 = a3 >> 0x18\n  5120: u8 [a0 + 0x13] = a4\n  5123: a4 = a3 >> 0x10\n  5126: u8 [a0 + 0x12] = a4\n  5129: a4 = a3 >> 0x8\n  5132: u8 [a0 + 0x11] = a4\n  5135: u8 [a0 + 0x10] = a3\n  5138: a3 = a2 >> 0x38\n  5141: u8 [a0 + 0xf] = a3\n  5144: a3 = a2 >> 0x30\n  5147: u8 [a0 + 0xe] = a3\n  5150: a3 = a2 >> 0x28\n  5153: u8 [a0 + 0xd] = a3\n  5156: a3 = a2 >> 0x20\n  5159: u8 [a0 + 0xc] = a3\n  5162: a3 = a2 >> 0x18\n  5165: u8 [a0 + 0xb] = a3\n  5168: a3 = a2 >> 0x10\n  5171: u8 [a0 + 0xa] = a3\n  5174: a3 = a2 >> 0x8\n  5177: u8 [a0 + 0x9] = a3\n  5180: u8 [a0 + 0x8] = a2\n  5183: a2 = a1 >> 0x38\n  5186: u8 [a0 + 0x7] = a2\n  5189: a2 = a1 >> 0x30\n  5192: u8 [a0 + 0x6] = a2\n  5195: a2 = a1 >> 0x28\n  5198: u8 [a0 + 0x5] = a2\n  5201: a2 = a1 >> 0x20\n  5204: u8 [a0 + 0x4] = a2\n  5207: a2 = a1 >> 0x18\n  5210: u8 [a0 + 0x3] = a2\n  5213: a2 = a1 >> 0x10\n  5216: u8 [a0 + 0x2] = a2\n  5219: a2 = a1 >> 0x8\n  5222: u8 [a0 + 0x1] = a2\n  5225: u8 [a0] = a1\n  5227: a0 = 0x20\n  5230: a1 = 0x20\n  5233: ra = 92, jump @0\n      : @104 [@dyn 46] (gas: 66)\n  5238: a1 = s1 >> 0x38\n  5241: u8 [a0 + 0x1f] = a1\n  5244: a1 = s1 >> 0x30\n  5247: u8 [a0 + 0x1e] = a1\n  5250: a1 = s1 >> 0x28\n  5253: u8 [a0 + 0x1d] = a1\n  5256: a1 = s1 >> 0x20\n  5259: u8 [a0 + 0x1c] = a1\n  5262: a1 = s1 >> 0x18\n  5265: u8 [a0 + 0x1b] = a1\n  5268: a1 = s1 >> 0x10\n  5271: u8 [a0 + 0x1a] = a1\n  5274: a1 = s1 >> 0x8\n  5277: u8 [a0 + 0x19] = a1\n  5280: u8 [a0 + 0x18] = s1\n  5283: a2 = u64 [sp]\n  5285: a1 = a2 >> 0x38\n  5288: u8 [a0 + 0x17] = a1\n  5291: a1 = a2 >> 0x30\n  5294: u8 [a0 + 0x16] = a1\n  5297: a1 = a2 >> 0x28\n  5300: u8 [a0 + 0x15] = a1\n  5303: a1 = a2 >> 0x20\n  5306: u8 [a0 + 0x14] = a1\n  5309: a1 = a2 >> 0x18\n  5312: u8 [a0 + 0x13] = a1\n  5315: a1 = a2 >> 0x10\n  5318: u8 [a0 + 0x12] = a1\n  5321: a1 = a2 >> 0x8\n  5324: u8 [a0 + 0x11] = a1\n  5327: u8 [a0 + 0x10] = a2\n  5330: a2 = u64 [sp + 0x8]\n  5333: a1 = a2 >> 0x38\n  5336: u8 [a0 + 0xf] = a1\n  5339: a1 = a2 >> 0x30\n  5342: u8 [a0 + 0xe] = a1\n  5345: a1 = a2 >> 0x28\n  5348: u8 [a0 + 0xd] = a1\n  5351: a1 = a2 >> 0x20\n  5354: u8 [a0 + 0xc] = a1\n  5357: a1 = a2 >> 0x18\n  5360: u8 [a0 + 0xb] = a1\n  5363: a1 = a2 >> 0x10\n  5366: u8 [a0 + 0xa] = a1\n  5369: a1 = a2 >> 0x8\n  5372: u8 [a0 + 0x9] = a1\n  5375: u8 [a0 + 0x8] = a2\n  5378: a2 = u64 [sp + 0x10]\n  5381: a1 = a2 >> 0x38\n  5384: u8 [a0 + 0x7] = a1\n  5387: a1 = a2 >> 0x30\n  5390: u8 [a0 + 0x6] = a1\n  5393: a1 = a2 >> 0x28\n  5396: u8 [a0 + 0x5] = a1\n  5399: a1 = a2 >> 0x20\n  5402: u8 [a0 + 0x4] = a1\n  5405: a1 = a2 >> 0x18\n  5408: u8 [a0 + 0x3] = a1\n  5411: a1 = a2 >> 0x10\n  5414: u8 [a0 + 0x2] = a1\n  5417: a1 = a2 >> 0x8\n  5420: u8 [a0 + 0x1] = a1\n  5423: u8 [a0] = a2\n  5425: a1 = 0x40\n  5428: a0 = 0\n  5430: ra = 94, jump @0\n      : @105 [@dyn 47] (gas: 42)\n  5435: i32 a0 = a0 + 0\n  5437: i32 a2 = sp + 0x60\n  5440: a1 = 0x40\n  5443: ecalli 4 // 'hash_keccak_256'\n  5445: a0 = u64 [sp + 0x78]\n  5448: a1 = u64 [sp + 0x70]\n  5451: a2 = u64 [sp + 0x68]\n  5454: a3 = u64 [sp + 0x60]\n  5457: a0 = reverse a0\n  5459: a1 = reverse a1\n  5461: a2 = reverse a2\n  5463: a3 = reverse a3\n  5465: u64 [sp + 0x58] = a3\n  5468: u64 [sp + 0x50] = a2\n  5471: u64 [sp + 0x48] = a1\n  5474: u64 [sp + 0x40] = a0\n  5477: u64 [sp + 120] = 0\n  5480: u64 [sp + 112] = 0\n  5483: u64 [sp + 104] = 0\n  5486: u64 [sp + 96] = 0\n  5489: u32 [sp + 128] = 0x20\n  5494: i32 a1 = sp + 0x40\n  5497: i32 a3 = sp + 0x60\n  5500: i32 a4 = sp + 0x80\n  5504: a2 = 0xffffffffffffffff\n  5507: a0 = 0\n  5509: ecalli 3 // 'get_storage'\n  5511: a0 = u64 [sp + 0x78]\n  5514: a1 = u64 [sp + 0x70]\n  5517: a2 = u64 [sp + 0x68]\n  5520: a3 = u64 [sp + 0x60]\n  5523: a4 = u64 [sp + 0x38]\n  5526: u64 [a4 + 0x18] = a0\n  5529: u64 [a4 + 0x10] = a1\n  5532: u64 [a4 + 0x8] = a2\n  5535: u64 [a4] = a3\n  5537: sp = s0 + 0xffffffffffffff60\n  5541: ra = u64 [sp + 0x98]\n  5545: s0 = u64 [sp + 0x90]\n  5549: s1 = u64 [sp + 0x88]\n  5553: sp = sp + 0xa0\n  5557: ret\n      : @106 (gas: 17)\n  5559: sp = sp + 0xffffffffffffffa0\n  5562: u64 [sp + 0x58] = ra\n  5565: u64 [sp + 0x50] = s0\n  5568: u64 [sp + 0x48] = s1\n  5571: a3 = u64 [a1 + 0x18]\n  5574: a4 = u64 [a1 + 0x10]\n  5577: a5 = u64 [a1 + 0x8]\n  5580: s1 = u64 [a1]\n  5582: a1 = a5 | a3\n  5585: a2 = s1 | a4\n  5588: a2 = a2 | a1\n  5591: a2 = a2 >> 0x20\n  5594: a1 = a1 | a4\n  5597: a1 = a1 << 0x20\n  5600: a1 = a1 | a2\n  5603: u64 [sp + 0x28] = a0\n  5606: jump @113 if a1 != 0\n      : @107 (gas: 19)\n  5610: a0 = s1 + 0x20\n  5613: u64 [sp + 0x30] = a0\n  5616: a0 = a0 <u s1\n  5619: a1 = a5 + a0\n  5622: u64 [sp + 0x40] = a1\n  5625: u64 [sp + 0x8] = a5\n  5628: s0 = a1 <u a5\n  5631: s0 = a0 if a0 == 0\n  5634: s0 = s0 + a4\n  5637: u64 [sp + 0x10] = a4\n  5640: a0 = s0 <u a4\n  5643: u64 [sp + 0x18] = a3\n  5646: a0 = a0 + a3\n  5649: u64 [sp + 0x38] = a0\n  5652: u64 [sp] = s1\n  5654: i32 a0 = s1 + 0\n  5656: a1 = 0x20\n  5659: s1 = 0x20\n  5662: ra = 96, jump @0\n      : @108 [@dyn 48] (gas: 45)\n  5667: u8 [a0 + 0x1f] = s1\n  5670: a1 = u64 [sp + 0x30]\n  5673: s1 = a1\n  5675: a1 = a1 | s0\n  5678: a2 = u64 [sp + 0x40]\n  5681: a4 = u64 [sp + 0x38]\n  5684: a2 = a2 | a4\n  5687: a1 = a1 | a2\n  5690: a1 = a1 >> 0x20\n  5693: u64 [sp + 0x20] = s0\n  5696: a2 = a2 | s0\n  5699: a2 = a2 << 0x20\n  5702: a1 = a1 | a2\n  5705: u8 [a0 + 30] = 0\n  5708: u8 [a0 + 29] = 0\n  5711: u8 [a0 + 28] = 0\n  5714: u8 [a0 + 27] = 0\n  5717: u8 [a0 + 26] = 0\n  5720: u8 [a0 + 25] = 0\n  5723: u8 [a0 + 24] = 0\n  5726: u8 [a0 + 23] = 0\n  5729: u8 [a0 + 22] = 0\n  5732: u8 [a0 + 21] = 0\n  5735: u8 [a0 + 20] = 0\n  5738: u8 [a0 + 19] = 0\n  5741: u8 [a0 + 18] = 0\n  5744: u8 [a0 + 17] = 0\n  5747: u8 [a0 + 16] = 0\n  5750: u8 [a0 + 15] = 0\n  5753: u8 [a0 + 14] = 0\n  5756: u8 [a0 + 13] = 0\n  5759: u8 [a0 + 12] = 0\n  5762: u8 [a0 + 11] = 0\n  5765: u8 [a0 + 10] = 0\n  5768: u8 [a0 + 9] = 0\n  5771: u8 [a0 + 8] = 0\n  5774: u8 [a0 + 7] = 0\n  5777: u8 [a0 + 6] = 0\n  5780: u8 [a0 + 5] = 0\n  5783: u8 [a0 + 4] = 0\n  5786: u8 [a0 + 3] = 0\n  5789: u8 [a0 + 2] = 0\n  5792: u8 [a0 + 1] = 0\n  5795: u8 [a0 + 0] = 0\n  5797: jump @113 if a1 != 0\n      : @109 (gas: 4)\n  5801: i32 s0 = s1 + 0\n  5803: a1 = 0x20\n  5806: a0 = s0\n  5808: ra = 98, jump @0\n      : @110 [@dyn 49] (gas: 41)\n  5813: u8 [a0 + 31] = 0x10\n  5817: u8 [a0 + 30] = 0\n  5820: u8 [a0 + 29] = 0\n  5823: u8 [a0 + 28] = 0\n  5826: u8 [a0 + 27] = 0\n  5829: u8 [a0 + 26] = 0\n  5832: u8 [a0 + 25] = 0\n  5835: u8 [a0 + 24] = 0\n  5838: u8 [a0 + 23] = 0\n  5841: u8 [a0 + 22] = 0\n  5844: u8 [a0 + 21] = 0\n  5847: u8 [a0 + 20] = 0\n  5850: u8 [a0 + 19] = 0\n  5853: u8 [a0 + 18] = 0\n  5856: u8 [a0 + 17] = 0\n  5859: u8 [a0 + 16] = 0\n  5862: u8 [a0 + 15] = 0\n  5865: u8 [a0 + 14] = 0\n  5868: u8 [a0 + 13] = 0\n  5871: u8 [a0 + 12] = 0\n  5874: u8 [a0 + 11] = 0\n  5877: u8 [a0 + 10] = 0\n  5880: u8 [a0 + 9] = 0\n  5883: u8 [a0 + 8] = 0\n  5886: u8 [a0 + 7] = 0\n  5889: u8 [a0 + 6] = 0\n  5892: u8 [a0 + 5] = 0\n  5895: u8 [a0 + 4] = 0\n  5898: u8 [a0 + 3] = 0\n  5901: u8 [a0 + 2] = 0\n  5904: u8 [a0 + 1] = 0\n  5907: a1 = u64 [sp + 0x20]\n  5910: a2 = u64 [sp + 0x38]\n  5913: a1 = a1 | a2\n  5916: a2 = 0xffffffe0\n  5926: a2 = s1 <u a2\n  5929: a3 = u64 [sp + 0x40]\n  5932: a2 = 0 if a3 != 0\n  5934: a2 = 0 if a1 != 0\n  5936: u8 [a0 + 0] = 0\n  5938: jump @113 if a2 == 0\n      : @111 (gas: 3)\n  5942: i32 a0 = s0 + 0x20\n  5945: a1 = 0x20\n  5948: ra = 100, jump @0\n      : @112 [@dyn 50] (gas: 54)\n  5953: u8 [a0 + 31] = 0\n  5956: u8 [a0 + 30] = 0\n  5959: u8 [a0 + 29] = 0\n  5962: u8 [a0 + 28] = 0\n  5965: u8 [a0 + 27] = 0\n  5968: u8 [a0 + 26] = 0\n  5971: u8 [a0 + 25] = 0\n  5974: u8 [a0 + 24] = 0\n  5977: u8 [a0 + 23] = 0\n  5980: u8 [a0 + 22] = 0\n  5983: u8 [a0 + 21] = 0\n  5986: u8 [a0 + 20] = 0\n  5989: u8 [a0 + 19] = 0\n  5992: u8 [a0 + 18] = 0\n  5995: u8 [a0 + 17] = 0\n  5998: u8 [a0 + 16] = 0\n  6001: u8 [a0 + 15] = 0x73\n  6005: u8 [a0 + 14] = 0x64\n  6009: u8 [a0 + 13] = 0x72\n  6013: u8 [a0 + 12] = 0x61\n  6017: u8 [a0 + 11] = 0x63\n  6021: u8 [a0 + 10] = 0x20\n  6025: u8 [a0 + 9] = 0x68\n  6029: u8 [a0 + 8] = 0x67\n  6033: u8 [a0 + 7] = 0x75\n  6037: u8 [a0 + 6] = 0x6f\n  6041: u8 [a0 + 5] = 0x6e\n  6045: u8 [a0 + 4] = 0x65\n  6049: u8 [a0 + 3] = 0x20\n  6053: u8 [a0 + 2] = 0x74\n  6057: u8 [a0 + 1] = 0x6f\n  6061: u8 [a0 + 0] = 0x4e\n  6064: a1 = u64 [sp]\n  6066: a0 = a1 + 0x60\n  6069: a1 = a0 <u a1\n  6072: a3 = u64 [sp + 0x8]\n  6075: a2 = a3 + a1\n  6078: a3 = a2 <u a3\n  6081: a3 = a1 if a1 == 0\n  6084: a1 = u64 [sp + 0x10]\n  6087: a3 = a3 + a1\n  6090: a1 = a3 <u a1\n  6093: a4 = u64 [sp + 0x18]\n  6096: a1 = a1 + a4\n  6099: a4 = u64 [sp + 0x28]\n  6102: u64 [a4] = a0\n  6104: u64 [a4 + 0x8] = a2\n  6107: u64 [a4 + 0x10] = a3\n  6110: u64 [a4 + 0x18] = a1\n  6113: ra = u64 [sp + 0x58]\n  6116: s0 = u64 [sp + 0x50]\n  6119: s1 = u64 [sp + 0x48]\n  6122: sp = sp + 0x60\n  6125: ret\n      : @113 (gas: 1)\n  6127: trap\n      : @114 [@dyn 51] (gas: 79)\n  6128: a2 = reverse s1\n  6130: a1 = u64 [sp + 0x190]\n  6134: a4 = reverse a1\n  6136: a1 = u64 [sp + 0x198]\n  6140: a1 = reverse a1\n  6142: u8 [a0 + 0x18] = a1\n  6145: u8 [a0 + 0x10] = a4\n  6148: u8 [a0 + 11] = 0\n  6151: u8 [a0 + 10] = 0\n  6154: u8 [a0 + 9] = 0\n  6157: u8 [a0 + 0x8] = a2\n  6160: u8 [a0 + 7] = 0\n  6163: u8 [a0 + 6] = 0\n  6166: u8 [a0 + 5] = 0\n  6169: u8 [a0 + 4] = 0\n  6172: u8 [a0 + 3] = 0\n  6175: u8 [a0 + 2] = 0\n  6178: u8 [a0 + 1] = 0\n  6181: u8 [a0 + 0] = 0\n  6183: a3 = a1 >> 0x38\n  6186: u64 [sp + 0x170] = a3\n  6190: u8 [a0 + 0x1f] = a3\n  6193: a3 = a1 >> 0x30\n  6196: u64 [sp + 0x168] = a3\n  6200: u8 [a0 + 0x1e] = a3\n  6203: a3 = a1 >> 0x28\n  6206: u64 [sp + 0x160] = a3\n  6210: u8 [a0 + 0x1d] = a3\n  6213: a3 = a1 >> 0x20\n  6216: u64 [sp + 0x158] = a3\n  6220: u8 [a0 + 0x1c] = a3\n  6223: a3 = a1 >> 0x18\n  6226: u64 [sp + 0x150] = a3\n  6230: u8 [a0 + 0x1b] = a3\n  6233: a3 = a1 >> 0x10\n  6236: u64 [sp + 0x148] = a3\n  6240: u8 [a0 + 0x1a] = a3\n  6243: u64 [sp + 0x180] = a1\n  6247: a1 = a1 >> 0x8\n  6250: u64 [sp + 0x140] = a1\n  6254: u8 [a0 + 0x19] = a1\n  6257: a1 = a4 >> 0x38\n  6260: u64 [sp + 0x130] = a1\n  6264: u8 [a0 + 0x17] = a1\n  6267: a1 = a4 >> 0x30\n  6270: u64 [sp + 0x128] = a1\n  6274: u8 [a0 + 0x16] = a1\n  6277: a1 = a4 >> 0x28\n  6280: u64 [sp + 0x120] = a1\n  6284: u8 [a0 + 0x15] = a1\n  6287: a1 = a4 >> 0x20\n  6290: u64 [sp + 0x118] = a1\n  6294: u8 [a0 + 0x14] = a1\n  6297: a1 = a4 >> 0x18\n  6300: u64 [sp + 0x110] = a1\n  6304: u8 [a0 + 0x13] = a1\n  6307: a1 = a4 >> 0x10\n  6310: u64 [sp + 0x100] = a1\n  6314: u8 [a0 + 0x12] = a1\n  6317: u64 [sp + 0x138] = a4\n  6321: a4 = a4 >> 0x8\n  6324: u64 [sp + 0xf0] = a4\n  6328: u8 [a0 + 0x11] = a4\n  6331: a1 = a2 >> 0x38\n  6334: u64 [sp + 0x18] = a1\n  6337: u8 [a0 + 0xf] = a1\n  6340: a1 = a2 >> 0x30\n  6343: u64 [sp + 0x10] = a1\n  6346: u8 [a0 + 0xe] = a1\n  6349: a1 = a2 >> 0x28\n  6352: u64 [sp + 0x8] = a1\n  6355: u8 [a0 + 0xd] = a1\n  6358: u64 [sp + 0x178] = a2\n  6362: a2 = a2 >> 0x20\n  6365: u64 [sp] = a2\n  6367: u8 [a0 + 0xc] = a2\n  6370: a0 = 0x20\n  6373: a1 = 0x20\n  6376: ra = 104, jump @0\n      : @115 [@dyn 52] (gas: 35)\n  6381: u8 [a0 + 31] = 0\n  6384: u8 [a0 + 30] = 0\n  6387: u8 [a0 + 29] = 0\n  6390: u8 [a0 + 28] = 0\n  6393: u8 [a0 + 27] = 0\n  6396: u8 [a0 + 26] = 0\n  6399: u8 [a0 + 25] = 0\n  6402: u8 [a0 + 24] = 0\n  6405: u8 [a0 + 23] = 0\n  6408: u8 [a0 + 22] = 0\n  6411: u8 [a0 + 21] = 0\n  6414: u8 [a0 + 20] = 0\n  6417: u8 [a0 + 19] = 0\n  6420: u8 [a0 + 18] = 0\n  6423: u8 [a0 + 17] = 0\n  6426: u8 [a0 + 16] = 0\n  6429: u8 [a0 + 15] = 0\n  6432: u8 [a0 + 14] = 0\n  6435: u8 [a0 + 13] = 0\n  6438: u8 [a0 + 12] = 0\n  6441: u8 [a0 + 11] = 0\n  6444: u8 [a0 + 10] = 0\n  6447: u8 [a0 + 9] = 0\n  6450: u8 [a0 + 8] = 0\n  6453: u8 [a0 + 7] = 0\n  6456: u8 [a0 + 6] = 0\n  6459: u8 [a0 + 5] = 0\n  6462: u8 [a0 + 4] = 0\n  6465: u8 [a0 + 3] = 0\n  6468: u8 [a0 + 2] = 0\n  6471: u8 [a0 + 1] = 0\n  6474: u8 [a0 + 0] = 0\n  6476: a1 = 0x40\n  6479: a0 = 0\n  6481: ra = 106, jump @0\n      : @116 [@dyn 53] (gas: 14)\n  6486: i32 a0 = a0 + 0\n  6488: i32 a2 = sp + 0x2a0\n  6492: a1 = 0x40\n  6495: ecalli 4 // 'hash_keccak_256'\n  6497: a0 = u64 [sp + 0x2a0]\n  6501: u64 [sp + 0x198] = a0\n  6505: a0 = u64 [sp + 0x2a8]\n  6509: u64 [sp + 0x190] = a0\n  6513: a0 = u64 [sp + 0x2b0]\n  6517: u64 [sp + 0x188] = a0\n  6521: s1 = u64 [sp + 0x2b8]\n  6525: a1 = 0x20\n  6528: a0 = 0\n  6530: ra = 108, jump @0\n      : @117 [@dyn 54] (gas: 103)\n  6535: a1 = u64 [sp + 0x1a0]\n  6539: a1 = reverse a1\n  6541: a2 = u64 [sp + 0x1a8]\n  6545: a2 = reverse a2\n  6547: a3 = u64 [sp + 0x1b0]\n  6551: a3 = reverse a3\n  6553: a4 = u64 [sp + 0x1b8]\n  6557: a4 = reverse a4\n  6559: a5 = a4 >> 0x38\n  6562: u64 [sp + 0x108] = a5\n  6566: u8 [a0 + 0x1f] = a5\n  6569: a5 = a4 >> 0x30\n  6572: u64 [sp + 0xf8] = a5\n  6576: u8 [a0 + 0x1e] = a5\n  6579: a5 = a4 >> 0x28\n  6582: u64 [sp + 0xe8] = a5\n  6586: u8 [a0 + 0x1d] = a5\n  6589: a5 = a4 >> 0x20\n  6592: u64 [sp + 0xe0] = a5\n  6596: u8 [a0 + 0x1c] = a5\n  6599: a5 = a4 >> 0x18\n  6602: u64 [sp + 0xd8] = a5\n  6606: u8 [a0 + 0x1b] = a5\n  6609: a5 = a4 >> 0x10\n  6612: u64 [sp + 0xd0] = a5\n  6616: u8 [a0 + 0x1a] = a5\n  6619: a5 = a4 >> 0x8\n  6622: u64 [sp + 0xc8] = a5\n  6626: u8 [a0 + 0x19] = a5\n  6629: u64 [sp + 0x1a0] = a4\n  6633: u8 [a0 + 0x18] = a4\n  6636: a4 = a3 >> 0x38\n  6639: u64 [sp + 0xc0] = a4\n  6643: u8 [a0 + 0x17] = a4\n  6646: a4 = a3 >> 0x30\n  6649: u64 [sp + 0xb8] = a4\n  6653: u8 [a0 + 0x16] = a4\n  6656: a4 = a3 >> 0x28\n  6659: u64 [sp + 0xb0] = a4\n  6663: u8 [a0 + 0x15] = a4\n  6666: a4 = a3 >> 0x20\n  6669: u64 [sp + 0xa8] = a4\n  6673: u8 [a0 + 0x14] = a4\n  6676: a4 = a3 >> 0x18\n  6679: u64 [sp + 0xa0] = a4\n  6683: u8 [a0 + 0x13] = a4\n  6686: a4 = a3 >> 0x10\n  6689: u64 [sp + 0x98] = a4\n  6693: u8 [a0 + 0x12] = a4\n  6696: a4 = a3 >> 0x8\n  6699: u64 [sp + 0x90] = a4\n  6703: u8 [a0 + 0x11] = a4\n  6706: u64 [sp + 0x1a8] = a3\n  6710: u8 [a0 + 0x10] = a3\n  6713: a3 = a2 >> 0x38\n  6716: u64 [sp + 0x88] = a3\n  6720: u8 [a0 + 0xf] = a3\n  6723: a3 = a2 >> 0x30\n  6726: u64 [sp + 0x80] = a3\n  6730: u8 [a0 + 0xe] = a3\n  6733: a3 = a2 >> 0x28\n  6736: u64 [sp + 0x78] = a3\n  6739: u8 [a0 + 0xd] = a3\n  6742: a3 = a2 >> 0x20\n  6745: u64 [sp + 0x70] = a3\n  6748: u8 [a0 + 0xc] = a3\n  6751: a3 = a2 >> 0x18\n  6754: u64 [sp + 0x68] = a3\n  6757: u8 [a0 + 0xb] = a3\n  6760: a3 = a2 >> 0x10\n  6763: u64 [sp + 0x60] = a3\n  6766: u8 [a0 + 0xa] = a3\n  6769: a3 = a2 >> 0x8\n  6772: u64 [sp + 0x58] = a3\n  6775: u8 [a0 + 0x9] = a3\n  6778: u64 [sp + 0x1b0] = a2\n  6782: u8 [a0 + 0x8] = a2\n  6785: a2 = a1 >> 0x38\n  6788: u64 [sp + 0x50] = a2\n  6791: u8 [a0 + 0x7] = a2\n  6794: a2 = a1 >> 0x30\n  6797: u64 [sp + 0x48] = a2\n  6800: u8 [a0 + 0x6] = a2\n  6803: a2 = a1 >> 0x28\n  6806: u64 [sp + 0x40] = a2\n  6809: u8 [a0 + 0x5] = a2\n  6812: a2 = a1 >> 0x20\n  6815: u64 [sp + 0x38] = a2\n  6818: u8 [a0 + 0x4] = a2\n  6821: a2 = a1 >> 0x18\n  6824: u64 [sp + 0x30] = a2\n  6827: u8 [a0 + 0x3] = a2\n  6830: a2 = a1 >> 0x10\n  6833: u64 [sp + 0x28] = a2\n  6836: u8 [a0 + 0x2] = a2\n  6839: a2 = a1 >> 0x8\n  6842: u64 [sp + 0x20] = a2\n  6845: u8 [a0 + 0x1] = a2\n  6848: u64 [sp + 0x1b8] = a1\n  6852: u8 [a0] = a1\n  6854: a0 = 0x20\n  6857: a1 = 0x20\n  6860: ra = 110, jump @0\n      : @118 [@dyn 55] (gas: 66)\n  6865: a1 = s1 >> 0x38\n  6868: u8 [a0 + 0x1f] = a1\n  6871: a1 = s1 >> 0x30\n  6874: u8 [a0 + 0x1e] = a1\n  6877: a1 = s1 >> 0x28\n  6880: u8 [a0 + 0x1d] = a1\n  6883: a1 = s1 >> 0x20\n  6886: u8 [a0 + 0x1c] = a1\n  6889: a1 = s1 >> 0x18\n  6892: u8 [a0 + 0x1b] = a1\n  6895: a1 = s1 >> 0x10\n  6898: u8 [a0 + 0x1a] = a1\n  6901: a1 = s1 >> 0x8\n  6904: u8 [a0 + 0x19] = a1\n  6907: u8 [a0 + 0x18] = s1\n  6910: a2 = u64 [sp + 0x188]\n  6914: a1 = a2 >> 0x38\n  6917: u8 [a0 + 0x17] = a1\n  6920: a1 = a2 >> 0x30\n  6923: u8 [a0 + 0x16] = a1\n  6926: a1 = a2 >> 0x28\n  6929: u8 [a0 + 0x15] = a1\n  6932: a1 = a2 >> 0x20\n  6935: u8 [a0 + 0x14] = a1\n  6938: a1 = a2 >> 0x18\n  6941: u8 [a0 + 0x13] = a1\n  6944: a1 = a2 >> 0x10\n  6947: u8 [a0 + 0x12] = a1\n  6950: a1 = a2 >> 0x8\n  6953: u8 [a0 + 0x11] = a1\n  6956: u8 [a0 + 0x10] = a2\n  6959: a2 = u64 [sp + 0x190]\n  6963: a1 = a2 >> 0x38\n  6966: u8 [a0 + 0xf] = a1\n  6969: a1 = a2 >> 0x30\n  6972: u8 [a0 + 0xe] = a1\n  6975: a1 = a2 >> 0x28\n  6978: u8 [a0 + 0xd] = a1\n  6981: a1 = a2 >> 0x20\n  6984: u8 [a0 + 0xc] = a1\n  6987: a1 = a2 >> 0x18\n  6990: u8 [a0 + 0xb] = a1\n  6993: a1 = a2 >> 0x10\n  6996: u8 [a0 + 0xa] = a1\n  6999: a1 = a2 >> 0x8\n  7002: u8 [a0 + 0x9] = a1\n  7005: u8 [a0 + 0x8] = a2\n  7008: a2 = u64 [sp + 0x198]\n  7012: a1 = a2 >> 0x38\n  7015: u8 [a0 + 0x7] = a1\n  7018: a1 = a2 >> 0x30\n  7021: u8 [a0 + 0x6] = a1\n  7024: a1 = a2 >> 0x28\n  7027: u8 [a0 + 0x5] = a1\n  7030: a1 = a2 >> 0x20\n  7033: u8 [a0 + 0x4] = a1\n  7036: a1 = a2 >> 0x18\n  7039: u8 [a0 + 0x3] = a1\n  7042: a1 = a2 >> 0x10\n  7045: u8 [a0 + 0x2] = a1\n  7048: a1 = a2 >> 0x8\n  7051: u8 [a0 + 0x1] = a1\n  7054: u8 [a0] = a2\n  7056: a1 = 0x40\n  7059: a0 = 0\n  7061: ra = 112, jump @0\n      : @119 [@dyn 56] (gas: 28)\n  7066: i32 a0 = a0 + 0\n  7068: i32 a2 = sp + 0x2a0\n  7072: a1 = 0x40\n  7075: ecalli 4 // 'hash_keccak_256'\n  7077: a0 = u64 [sp + 0x2b8]\n  7081: a1 = u64 [sp + 0x2b0]\n  7085: a2 = u64 [sp + 0x2a8]\n  7089: a3 = u64 [sp + 0x2a0]\n  7093: a0 = reverse a0\n  7095: a1 = reverse a1\n  7097: a2 = reverse a2\n  7099: a3 = reverse a3\n  7101: u64 [sp + 0x298] = a3\n  7105: u64 [sp + 0x290] = a2\n  7109: u64 [sp + 0x288] = a1\n  7113: u64 [sp + 0x280] = a0\n  7117: u64 [sp + 696] = 0\n  7121: u64 [sp + 688] = 0\n  7125: u64 [sp + 680] = 0\n  7129: u64 [sp + 672] = 0\n  7133: u32 [sp + 608] = 0x20\n  7138: i32 a1 = sp + 0x280\n  7142: i32 a3 = sp + 0x2a0\n  7146: i32 a4 = sp + 0x260\n  7150: a2 = 0xffffffffffffffff\n  7153: a0 = 0\n  7155: ecalli 3 // 'get_storage'\n  7157: fallthrough\n      : @120 (gas: 20)\n  7158: a0 = u64 [sp + 0x2b8]\n  7162: t0 = u64 [sp + 0x2a0]\n  7166: a2 = u64 [sp + 0x2b0]\n  7170: a3 = u64 [sp + 0x2a8]\n  7174: a1 = u64 [sp + 0x1c8]\n  7178: a4 = a0 ^ a1\n  7181: s1 = a0 <u a1\n  7184: a0 = u64 [sp + 0x1c0]\n  7188: a5 = a2 <u a0\n  7191: a5 = s1 if a4 != 0\n  7194: a1 = u64 [sp + 0x1d0]\n  7198: s1 = a3 ^ a1\n  7201: a3 = a3 <u a1\n  7204: a1 = u64 [sp + 0x1d8]\n  7208: a1 = t0 <u a1\n  7211: a1 = a3 if s1 != 0\n  7214: a0 = a0 ^ a2\n  7217: a0 = a0 | a4\n  7220: a1 = a5 if a0 != 0\n  7223: jump @130 if a1 != 0\n      : @121 (gas: 3)\n  7227: a1 = 0x20\n  7230: a0 = 0\n  7232: ra = 114, jump @0\n      : @122 [@dyn 57] (gas: 59)\n  7237: a1 = u64 [sp + 0x138]\n  7241: u8 [a0 + 0x10] = a1\n  7244: a1 = u64 [sp + 0x18]\n  7247: u8 [a0 + 0xf] = a1\n  7250: a1 = u64 [sp + 0x10]\n  7253: u8 [a0 + 0xe] = a1\n  7256: a1 = u64 [sp + 0x8]\n  7259: u8 [a0 + 0xd] = a1\n  7262: a1 = u64 [sp]\n  7264: u8 [a0 + 0xc] = a1\n  7267: a2 = u64 [sp + 0x178]\n  7271: a1 = a2 >> 0x18\n  7274: u8 [a0 + 0xb] = a1\n  7277: a1 = a2 >> 0x10\n  7280: u8 [a0 + 0xa] = a1\n  7283: a1 = a2 >> 0x8\n  7286: u8 [a0 + 0x9] = a1\n  7289: u8 [a0 + 0x8] = a2\n  7292: a1 = u64 [sp + 0x180]\n  7296: u8 [a0 + 0x18] = a1\n  7299: a1 = u64 [sp + 0x130]\n  7303: u8 [a0 + 0x17] = a1\n  7306: a1 = u64 [sp + 0x128]\n  7310: u8 [a0 + 0x16] = a1\n  7313: a1 = u64 [sp + 0x120]\n  7317: u8 [a0 + 0x15] = a1\n  7320: a1 = u64 [sp + 0x118]\n  7324: u8 [a0 + 0x14] = a1\n  7327: a1 = u64 [sp + 0x110]\n  7331: u8 [a0 + 0x13] = a1\n  7334: a1 = u64 [sp + 0x100]\n  7338: u8 [a0 + 0x12] = a1\n  7341: a1 = u64 [sp + 0xf0]\n  7345: u8 [a0 + 0x11] = a1\n  7348: a1 = u64 [sp + 0x170]\n  7352: u8 [a0 + 0x1f] = a1\n  7355: a1 = u64 [sp + 0x168]\n  7359: u8 [a0 + 0x1e] = a1\n  7362: a1 = u64 [sp + 0x160]\n  7366: u8 [a0 + 0x1d] = a1\n  7369: a1 = u64 [sp + 0x158]\n  7373: u8 [a0 + 0x1c] = a1\n  7376: a1 = u64 [sp + 0x150]\n  7380: u8 [a0 + 0x1b] = a1\n  7383: a1 = u64 [sp + 0x148]\n  7387: u8 [a0 + 0x1a] = a1\n  7390: a1 = u64 [sp + 0x140]\n  7394: u8 [a0 + 0x19] = a1\n  7397: u8 [a0 + 7] = 0\n  7400: u8 [a0 + 6] = 0\n  7403: u8 [a0 + 5] = 0\n  7406: u8 [a0 + 4] = 0\n  7409: u8 [a0 + 3] = 0\n  7412: u8 [a0 + 2] = 0\n  7415: u8 [a0 + 1] = 0\n  7418: u8 [a0 + 0] = 0\n  7420: a0 = 0x20\n  7423: a1 = 0x20\n  7426: ra = 116, jump @0\n      : @123 [@dyn 58] (gas: 35)\n  7431: u8 [a0 + 31] = 0\n  7434: u8 [a0 + 30] = 0\n  7437: u8 [a0 + 29] = 0\n  7440: u8 [a0 + 28] = 0\n  7443: u8 [a0 + 27] = 0\n  7446: u8 [a0 + 26] = 0\n  7449: u8 [a0 + 25] = 0\n  7452: u8 [a0 + 24] = 0\n  7455: u8 [a0 + 23] = 0\n  7458: u8 [a0 + 22] = 0\n  7461: u8 [a0 + 21] = 0\n  7464: u8 [a0 + 20] = 0\n  7467: u8 [a0 + 19] = 0\n  7470: u8 [a0 + 18] = 0\n  7473: u8 [a0 + 17] = 0\n  7476: u8 [a0 + 16] = 0\n  7479: u8 [a0 + 15] = 0\n  7482: u8 [a0 + 14] = 0\n  7485: u8 [a0 + 13] = 0\n  7488: u8 [a0 + 12] = 0\n  7491: u8 [a0 + 11] = 0\n  7494: u8 [a0 + 10] = 0\n  7497: u8 [a0 + 9] = 0\n  7500: u8 [a0 + 8] = 0\n  7503: u8 [a0 + 7] = 0\n  7506: u8 [a0 + 6] = 0\n  7509: u8 [a0 + 5] = 0\n  7512: u8 [a0 + 4] = 0\n  7515: u8 [a0 + 3] = 0\n  7518: u8 [a0 + 2] = 0\n  7521: u8 [a0 + 1] = 0\n  7524: u8 [a0 + 0] = 0\n  7526: a1 = 0x40\n  7529: a0 = 0\n  7531: ra = 118, jump @0\n      : @124 [@dyn 59] (gas: 14)\n  7536: i32 a0 = a0 + 0\n  7538: i32 a2 = sp + 0x2a0\n  7542: a1 = 0x40\n  7545: ecalli 4 // 'hash_keccak_256'\n  7547: a0 = u64 [sp + 0x2a0]\n  7551: u64 [sp + 0x198] = a0\n  7555: a0 = u64 [sp + 0x2a8]\n  7559: u64 [sp + 0x190] = a0\n  7563: a0 = u64 [sp + 0x2b0]\n  7567: u64 [sp + 0x188] = a0\n  7571: s1 = u64 [sp + 0x2b8]\n  7575: a1 = 0x20\n  7578: a0 = 0\n  7580: ra = 120, jump @0\n      : @125 [@dyn 60] (gas: 67)\n  7585: a1 = u64 [sp + 0x108]\n  7589: u8 [a0 + 0x1f] = a1\n  7592: a1 = u64 [sp + 0xf8]\n  7596: u8 [a0 + 0x1e] = a1\n  7599: a1 = u64 [sp + 0xe8]\n  7603: u8 [a0 + 0x1d] = a1\n  7606: a1 = u64 [sp + 0xe0]\n  7610: u8 [a0 + 0x1c] = a1\n  7613: a1 = u64 [sp + 0xd8]\n  7617: u8 [a0 + 0x1b] = a1\n  7620: a1 = u64 [sp + 0xd0]\n  7624: u8 [a0 + 0x1a] = a1\n  7627: a1 = u64 [sp + 0xc8]\n  7631: u8 [a0 + 0x19] = a1\n  7634: a1 = u64 [sp + 0x1a0]\n  7638: u8 [a0 + 0x18] = a1\n  7641: a1 = u64 [sp + 0xc0]\n  7645: u8 [a0 + 0x17] = a1\n  7648: a1 = u64 [sp + 0xb8]\n  7652: u8 [a0 + 0x16] = a1\n  7655: a1 = u64 [sp + 0xb0]\n  7659: u8 [a0 + 0x15] = a1\n  7662: a1 = u64 [sp + 0xa8]\n  7666: u8 [a0 + 0x14] = a1\n  7669: a1 = u64 [sp + 0xa0]\n  7673: u8 [a0 + 0x13] = a1\n  7676: a1 = u64 [sp + 0x98]\n  7680: u8 [a0 + 0x12] = a1\n  7683: a1 = u64 [sp + 0x90]\n  7687: u8 [a0 + 0x11] = a1\n  7690: a1 = u64 [sp + 0x1a8]\n  7694: u8 [a0 + 0x10] = a1\n  7697: a1 = u64 [sp + 0x88]\n  7701: u8 [a0 + 0xf] = a1\n  7704: a1 = u64 [sp + 0x80]\n  7708: u8 [a0 + 0xe] = a1\n  7711: a1 = u64 [sp + 0x78]\n  7714: u8 [a0 + 0xd] = a1\n  7717: a1 = u64 [sp + 0x70]\n  7720: u8 [a0 + 0xc] = a1\n  7723: a1 = u64 [sp + 0x68]\n  7726: u8 [a0 + 0xb] = a1\n  7729: a1 = u64 [sp + 0x60]\n  7732: u8 [a0 + 0xa] = a1\n  7735: a1 = u64 [sp + 0x58]\n  7738: u8 [a0 + 0x9] = a1\n  7741: a1 = u64 [sp + 0x1b0]\n  7745: u8 [a0 + 0x8] = a1\n  7748: a1 = u64 [sp + 0x50]\n  7751: u8 [a0 + 0x7] = a1\n  7754: a1 = u64 [sp + 0x48]\n  7757: u8 [a0 + 0x6] = a1\n  7760: a1 = u64 [sp + 0x40]\n  7763: u8 [a0 + 0x5] = a1\n  7766: a1 = u64 [sp + 0x38]\n  7769: u8 [a0 + 0x4] = a1\n  7772: a1 = u64 [sp + 0x30]\n  7775: u8 [a0 + 0x3] = a1\n  7778: a1 = u64 [sp + 0x28]\n  7781: u8 [a0 + 0x2] = a1\n  7784: a1 = u64 [sp + 0x20]\n  7787: u8 [a0 + 0x1] = a1\n  7790: a1 = u64 [sp + 0x1b8]\n  7794: u8 [a0] = a1\n  7796: a0 = 0x20\n  7799: a1 = 0x20\n  7802: ra = 122, jump @0\n      : @126 [@dyn 61] (gas: 66)\n  7807: a1 = s1 >> 0x38\n  7810: u8 [a0 + 0x1f] = a1\n  7813: a1 = s1 >> 0x30\n  7816: u8 [a0 + 0x1e] = a1\n  7819: a1 = s1 >> 0x28\n  7822: u8 [a0 + 0x1d] = a1\n  7825: a1 = s1 >> 0x20\n  7828: u8 [a0 + 0x1c] = a1\n  7831: a1 = s1 >> 0x18\n  7834: u8 [a0 + 0x1b] = a1\n  7837: a1 = s1 >> 0x10\n  7840: u8 [a0 + 0x1a] = a1\n  7843: a1 = s1 >> 0x8\n  7846: u8 [a0 + 0x19] = a1\n  7849: u8 [a0 + 0x18] = s1\n  7852: a2 = u64 [sp + 0x188]\n  7856: a1 = a2 >> 0x38\n  7859: u8 [a0 + 0x17] = a1\n  7862: a1 = a2 >> 0x30\n  7865: u8 [a0 + 0x16] = a1\n  7868: a1 = a2 >> 0x28\n  7871: u8 [a0 + 0x15] = a1\n  7874: a1 = a2 >> 0x20\n  7877: u8 [a0 + 0x14] = a1\n  7880: a1 = a2 >> 0x18\n  7883: u8 [a0 + 0x13] = a1\n  7886: a1 = a2 >> 0x10\n  7889: u8 [a0 + 0x12] = a1\n  7892: a1 = a2 >> 0x8\n  7895: u8 [a0 + 0x11] = a1\n  7898: u8 [a0 + 0x10] = a2\n  7901: a2 = u64 [sp + 0x190]\n  7905: a1 = a2 >> 0x38\n  7908: u8 [a0 + 0xf] = a1\n  7911: a1 = a2 >> 0x30\n  7914: u8 [a0 + 0xe] = a1\n  7917: a1 = a2 >> 0x28\n  7920: u8 [a0 + 0xd] = a1\n  7923: a1 = a2 >> 0x20\n  7926: u8 [a0 + 0xc] = a1\n  7929: a1 = a2 >> 0x18\n  7932: u8 [a0 + 0xb] = a1\n  7935: a1 = a2 >> 0x10\n  7938: u8 [a0 + 0xa] = a1\n  7941: a1 = a2 >> 0x8\n  7944: u8 [a0 + 0x9] = a1\n  7947: u8 [a0 + 0x8] = a2\n  7950: a2 = u64 [sp + 0x198]\n  7954: a1 = a2 >> 0x38\n  7957: u8 [a0 + 0x7] = a1\n  7960: a1 = a2 >> 0x30\n  7963: u8 [a0 + 0x6] = a1\n  7966: a1 = a2 >> 0x28\n  7969: u8 [a0 + 0x5] = a1\n  7972: a1 = a2 >> 0x20\n  7975: u8 [a0 + 0x4] = a1\n  7978: a1 = a2 >> 0x18\n  7981: u8 [a0 + 0x3] = a1\n  7984: a1 = a2 >> 0x10\n  7987: u8 [a0 + 0x2] = a1\n  7990: a1 = a2 >> 0x8\n  7993: u8 [a0 + 0x1] = a1\n  7996: u8 [a0] = a2\n  7998: a1 = 0x40\n  8001: a0 = 0\n  8003: ra = 124, jump @0\n      : @127 [@dyn 62] (gas: 32)\n  8008: i32 a0 = a0 + 0\n  8010: i32 a2 = sp + 0x2a0\n  8014: a1 = 0x40\n  8017: ecalli 4 // 'hash_keccak_256'\n  8019: a0 = u64 [sp + 0x2b8]\n  8023: a1 = u64 [sp + 0x2b0]\n  8027: a2 = u64 [sp + 0x2a8]\n  8031: a3 = u64 [sp + 0x2a0]\n  8035: a0 = reverse a0\n  8037: a1 = reverse a1\n  8039: a2 = reverse a2\n  8041: a3 = reverse a3\n  8043: u64 [sp + 0x1a0] = a3\n  8047: u64 [sp + 0x298] = a3\n  8051: u64 [sp + 0x1a8] = a2\n  8055: u64 [sp + 0x290] = a2\n  8059: u64 [sp + 0x1b0] = a1\n  8063: u64 [sp + 0x288] = a1\n  8067: u64 [sp + 0x1b8] = a0\n  8071: u64 [sp + 0x280] = a0\n  8075: u64 [sp + 696] = 0\n  8079: u64 [sp + 688] = 0\n  8083: u64 [sp + 680] = 0\n  8087: u64 [sp + 672] = 0\n  8091: u32 [sp + 608] = 0x20\n  8096: i32 a1 = sp + 0x280\n  8100: i32 a3 = sp + 0x2a0\n  8104: i32 a4 = sp + 0x260\n  8108: a2 = 0xffffffffffffffff\n  8111: a0 = 0\n  8113: ecalli 3 // 'get_storage'\n  8115: fallthrough\n      : @128 (gas: 22)\n  8116: a2 = u64 [sp + 0x2b8]\n  8120: a3 = u64 [sp + 0x2b0]\n  8124: t1 = u64 [sp + 0x2a8]\n  8128: a1 = u64 [sp + 0x2a0]\n  8132: a4 = u64 [sp + 0x1c8]\n  8136: a0 = a2 ^ a4\n  8139: a4 = a2 <u a4\n  8142: t0 = u64 [sp + 0x1c0]\n  8146: a5 = a3 <u t0\n  8149: u64 [sp + 0x190] = a5\n  8153: a4 = a5 if a0 == 0\n  8156: a5 = u64 [sp + 0x1d0]\n  8160: t2 = t1 ^ a5\n  8163: s1 = t1 <u a5\n  8166: a5 = u64 [sp + 0x1d8]\n  8170: u64 [sp + 0x198] = a1\n  8174: ra = a1 <u a5\n  8177: s1 = ra if t2 == 0\n  8180: a5 = a3 ^ t0\n  8183: a0 = a0 | a5\n  8186: a4 = s1 if a0 == 0\n  8189: jump @136 if a4 != 0\n      : @129 (gas: 65)\n  8193: a0 = u64 [sp + 0x1c0]\n  8197: a0 = a3 - a0\n  8200: a3 = a0 - s1\n  8203: u64 [sp + 0x1c0] = a3\n  8207: a0 = a0 <u s1\n  8210: a3 = u64 [sp + 0x1c8]\n  8214: a2 = a2 - a3\n  8217: a1 = u64 [sp + 0x190]\n  8221: a2 = a2 - a1\n  8224: a2 = a2 - a0\n  8227: u64 [sp + 0x1c8] = a2\n  8231: a0 = u64 [sp + 0x1d0]\n  8235: a0 = t1 - a0\n  8238: a0 = a0 - ra\n  8241: u64 [sp + 0x1d0] = a0\n  8245: a0 = u64 [sp + 0x1d8]\n  8249: a1 = u64 [sp + 0x198]\n  8253: a0 = a1 - a0\n  8256: u64 [sp + 0x1d8] = a0\n  8260: u32 [sp + 608] = 0x20\n  8265: a0 = u64 [sp + 0x1a8]\n  8269: u64 [sp + 0x290] = a0\n  8273: a0 = u64 [sp + 0x1b0]\n  8277: u64 [sp + 0x288] = a0\n  8281: a0 = u64 [sp + 0x1b8]\n  8285: u64 [sp + 0x280] = a0\n  8289: s1 = u64 [sp + 0x1a0]\n  8293: u64 [sp + 0x298] = s1\n  8297: u64 [sp + 696] = 0\n  8301: u64 [sp + 688] = 0\n  8305: u64 [sp + 680] = 0\n  8309: u64 [sp + 672] = 0\n  8313: i32 a1 = sp + 0x280\n  8317: i32 a3 = sp + 0x2a0\n  8321: i32 a4 = sp + 0x260\n  8325: a2 = 0xffffffffffffffff\n  8328: a0 = 0\n  8330: ecalli 3 // 'get_storage'\n  8332: u64 [sp + 0x298] = s1\n  8336: a0 = u64 [sp + 0x1a8]\n  8340: u64 [sp + 0x290] = a0\n  8344: a0 = u64 [sp + 0x1b0]\n  8348: u64 [sp + 0x288] = a0\n  8352: a0 = u64 [sp + 0x1b8]\n  8356: u64 [sp + 0x280] = a0\n  8360: a0 = u64 [sp + 0x1c8]\n  8364: u64 [sp + 0x2b8] = a0\n  8368: a0 = u64 [sp + 0x1c0]\n  8372: u64 [sp + 0x2b0] = a0\n  8376: a0 = u64 [sp + 0x1d0]\n  8380: u64 [sp + 0x2a8] = a0\n  8384: a0 = u64 [sp + 0x1d8]\n  8388: u64 [sp + 0x2a0] = a0\n  8392: i32 a1 = sp + 0x280\n  8396: i32 a3 = sp + 0x2a0\n  8400: a2 = 0xffffffffffffffff\n  8403: a4 = 0x20\n  8406: a0 = 0\n  8408: ecalli 7 // 'set_storage'\n  8410: sp = s0 + 0xfffffffffffffd20\n  8414: ra = u64 [sp + 0x2d8]\n  8418: s0 = u64 [sp + 0x2d0]\n  8422: s1 = u64 [sp + 0x2c8]\n  8426: sp = sp + 0x2e0\n  8430: ret\n      : @130 (gas: 3)\n  8432: a0 = 0x40\n  8435: a1 = 0x20\n  8438: ra = 126, jump @0\n      : @131 [@dyn 63] (gas: 103)\n  8443: a1 = u8 [a0 + 0x11]\n  8446: a2 = u8 [a0 + 0x10]\n  8449: a3 = u8 [a0 + 0x12]\n  8452: a4 = u8 [a0 + 0x13]\n  8455: a1 = a1 << 0x8\n  8458: a1 = a1 | a2\n  8461: a3 = a3 << 0x10\n  8464: a4 = a4 << 0x18\n  8467: a3 = a3 | a4\n  8470: a1 = a1 | a3\n  8473: a2 = u8 [a0 + 0x15]\n  8476: a3 = u8 [a0 + 0x14]\n  8479: a4 = u8 [a0 + 0x16]\n  8482: a5 = u8 [a0 + 0x17]\n  8485: a2 = a2 << 0x8\n  8488: a2 = a2 | a3\n  8491: a4 = a4 << 0x10\n  8494: a5 = a5 << 0x18\n  8497: a4 = a4 | a5\n  8500: a2 = a2 | a4\n  8503: a2 = a2 << 0x20\n  8506: t0 = a2 | a1\n  8509: a2 = u8 [a0 + 0x1]\n  8512: a3 = u8 [a0]\n  8514: a4 = u8 [a0 + 0x2]\n  8517: a5 = u8 [a0 + 0x3]\n  8520: a2 = a2 << 0x8\n  8523: a2 = a2 | a3\n  8526: a4 = a4 << 0x10\n  8529: a5 = a5 << 0x18\n  8532: a4 = a4 | a5\n  8535: a2 = a2 | a4\n  8538: a3 = u8 [a0 + 0x5]\n  8541: a4 = u8 [a0 + 0x4]\n  8544: a5 = u8 [a0 + 0x6]\n  8547: s1 = u8 [a0 + 0x7]\n  8550: a3 = a3 << 0x8\n  8553: a3 = a3 | a4\n  8556: a5 = a5 << 0x10\n  8559: s1 = s1 << 0x18\n  8562: a5 = a5 | s1\n  8565: a3 = a3 | a5\n  8568: a3 = a3 << 0x20\n  8571: a2 = a2 | a3\n  8574: a3 = u8 [a0 + 0x19]\n  8577: a4 = u8 [a0 + 0x18]\n  8580: a5 = u8 [a0 + 0x1a]\n  8583: s1 = u8 [a0 + 0x1b]\n  8586: a3 = a3 << 0x8\n  8589: a3 = a3 | a4\n  8592: a5 = a5 << 0x10\n  8595: s1 = s1 << 0x18\n  8598: a5 = a5 | s1\n  8601: a3 = a3 | a5\n  8604: a4 = u8 [a0 + 0x1d]\n  8607: a5 = u8 [a0 + 0x1c]\n  8610: s1 = u8 [a0 + 0x1e]\n  8613: a1 = u8 [a0 + 0x1f]\n  8616: a4 = a4 << 0x8\n  8619: a4 = a4 | a5\n  8622: s1 = s1 << 0x10\n  8625: a1 = a1 << 0x18\n  8628: a1 = a1 | s1\n  8631: a1 = a1 | a4\n  8634: a1 = a1 << 0x20\n  8637: a3 = a3 | a1\n  8640: a1 = u8 [a0 + 0x9]\n  8643: a4 = u8 [a0 + 0x8]\n  8646: a5 = u8 [a0 + 0xa]\n  8649: s1 = u8 [a0 + 0xb]\n  8652: a1 = a1 << 0x8\n  8655: a1 = a1 | a4\n  8658: a5 = a5 << 0x10\n  8661: s1 = s1 << 0x18\n  8664: a5 = a5 | s1\n  8667: a1 = a1 | a5\n  8670: a4 = u8 [a0 + 0xd]\n  8673: a5 = u8 [a0 + 0xc]\n  8676: s1 = u8 [a0 + 0xe]\n  8679: a0 = u8 [a0 + 0xf]\n  8682: a4 = a4 << 0x8\n  8685: a4 = a4 | a5\n  8688: s1 = s1 << 0x10\n  8691: a0 = a0 << 0x18\n  8694: a0 = a0 | s1\n  8697: a0 = a0 | a4\n  8700: a0 = a0 << 0x20\n  8703: a0 = a0 | a1\n  8706: s1 = reverse a0\n  8708: a1 = reverse a3\n  8710: a2 = reverse a2\n  8712: a0 = reverse t0\n  8714: u64 [sp + 0x1d8] = a0\n  8718: u64 [sp + 0x1d0] = a2\n  8722: a0 = a0 | a2\n  8725: a2 = a1\n  8727: a1 = a1 | s1\n  8730: a1 = a1 | a0\n  8733: a1 = a1 >> 0x20\n  8736: a0 = a0 | s1\n  8739: a0 = a0 << 0x20\n  8742: a0 = a0 | a1\n  8745: jump @135 if a0 != 0\n      : @132 (gas: 5)\n  8749: u64 [sp + 0x1c8] = a2\n  8753: i32 a0 = a2 + 0\n  8755: a1 = 0x20\n  8758: u64 [sp + 0x1c0] = a0\n  8762: ra = 128, jump @0\n      : @133 [@dyn 64] (gas: 50)\n  8768: u8 [a0 + 31] = 0\n  8771: u8 [a0 + 30] = 0\n  8774: u8 [a0 + 29] = 0\n  8777: u8 [a0 + 28] = 0\n  8780: u8 [a0 + 27] = 0\n  8783: u8 [a0 + 26] = 0\n  8786: u8 [a0 + 25] = 0\n  8789: u8 [a0 + 24] = 0\n  8792: u8 [a0 + 23] = 0\n  8795: u8 [a0 + 22] = 0\n  8798: u8 [a0 + 21] = 0\n  8801: u8 [a0 + 20] = 0\n  8804: u8 [a0 + 19] = 0\n  8807: u8 [a0 + 18] = 0\n  8810: u8 [a0 + 17] = 0\n  8813: u8 [a0 + 16] = 0\n  8816: u8 [a0 + 15] = 0\n  8819: u8 [a0 + 14] = 0\n  8822: u8 [a0 + 13] = 0\n  8825: u8 [a0 + 12] = 0\n  8828: u8 [a0 + 11] = 0\n  8831: u8 [a0 + 10] = 0\n  8834: u8 [a0 + 9] = 0\n  8837: u8 [a0 + 8] = 0\n  8840: u8 [a0 + 7] = 0\n  8843: u8 [a0 + 6] = 0\n  8846: u8 [a0 + 5] = 0\n  8849: u8 [a0 + 4] = 0\n  8852: u8 [a0 + 3] = 0xa0\n  8857: u8 [a0 + 2] = 0x79\n  8861: u8 [a0 + 1] = 0xc3\n  8866: u8 [a0 + 0] = 0x8\n  8869: a1 = u64 [sp + 0x1c8]\n  8873: a0 = a1 + 0x4\n  8876: a1 = a0 <u a1\n  8879: a3 = u64 [sp + 0x1d8]\n  8883: a2 = a3 + a1\n  8886: a3 = a2 <u a3\n  8889: a3 = a1 if a1 == 0\n  8892: a3 = a3 + s1\n  8895: a1 = a3 <u s1\n  8898: a4 = u64 [sp + 0x1d0]\n  8902: a4 = a4 + a1\n  8905: u64 [sp + 0x1e8] = a2\n  8909: u64 [sp + 0x1e0] = a0\n  8913: u64 [sp + 0x1f0] = a3\n  8917: a0 = sp + 0x200\n  8921: a1 = sp + 0x1e0\n  8925: u64 [sp + 0x1f8] = a4\n  8929: ra = 130, jump @106\n      : @134 [@dyn 65] (gas: 30)\n  8935: a0 = u64 [sp + 0x208]\n  8939: t0 = u64 [sp + 0x218]\n  8943: t1 = u64 [sp + 0x200]\n  8947: a3 = u64 [sp + 0x210]\n  8951: a1 = u64 [sp + 0x1d8]\n  8955: a4 = a0 ^ a1\n  8958: a5 = a0 <u a1\n  8961: t2 = a1\n  8963: a2 = u64 [sp + 0x1c8]\n  8967: a1 = t1 <u a2\n  8970: a5 = a1 if a4 == 0\n  8973: a4 = a3 - s1\n  8976: a3 = a3 <u s1\n  8979: s1 = u64 [sp + 0x1d0]\n  8983: s1 = t0 - s1\n  8986: s1 = s1 - a3\n  8989: a3 = a4 <u a5\n  8992: s1 = s1 - a3\n  8995: a4 = a4 - a5\n  8998: a0 = a0 - t2\n  9001: a1 = a0 - a1\n  9004: a0 = t1 - a2\n  9007: a1 = a1 | s1\n  9010: a2 = a0 | a4\n  9013: a2 = a2 | a1\n  9016: a1 = a1 | a4\n  9019: a2 = a2 >> 0x20\n  9022: a1 = a1 << 0x20\n  9025: a1 = a1 | a2\n  9028: jump @140 if a1 == 0\n      : @135 (gas: 1)\n  9031: trap\n      : @136 (gas: 8)\n  9032: u64 [sp + 592] = 0\n  9036: u64 [sp + 584] = 0\n  9040: u64 [sp + 576] = 0\n  9044: a0 = 0x4e487b7100000000\n  9054: a1 = sp + 0x240\n  9058: u64 [sp + 0x258] = a0\n  9062: a0 = 0\n  9064: ra = 132, jump @8\n      : @137 [@dyn 66] (gas: 7)\n  9070: u64 [sp + 568] = 0\n  9074: u64 [sp + 560] = 0\n  9078: u64 [sp + 544] = 0x11\n  9083: a0 = 0x4\n  9086: a1 = sp + 0x220\n  9090: u64 [sp + 552] = 0\n  9094: ra = 134, jump @8\n      : @138 [@dyn 67] (gas: 3)\n  9100: a1 = 0x24\n  9103: a0 = 0\n  9105: ra = 136, jump @0\n      : @139 [@dyn 68] (gas: 5)\n  9111: i32 a1 = a0 + 0\n  9113: a0 = 0x1\n  9116: a2 = 0x24\n  9119: ecalli 5 // 'seal_return'\n  9121: fallthrough\n      : @140 (gas: 4)\n  9122: i32 s1 = a0 + 0\n  9124: a0 = u64 [sp + 0x1c0]\n  9128: a1 = s1\n  9130: ra = 138, jump @0\n      : @141 [@dyn 69] (gas: 6)\n  9136: i32 a1 = a0 + 0\n  9138: a0 = 0x1\n  9141: a2 = s1\n  9143: ra = 0x8c\n  9147: ecalli 5 // 'seal_return'\n  9149: fallthrough\n      : @142 [@dyn 70] (gas: 45)\n  9150: sp = sp + 0xffffffffffffff90\n  9153: u64 [sp + 0x68] = ra\n  9156: u64 [sp + 0x60] = s0\n  9159: u64 [sp + 0x58] = s1\n  9162: s0 = sp + 0x70\n  9165: sp = sp & 0xfffffffffffffff0\n  9168: a3 = u64 [a1 + 0x18]\n  9171: u64 [sp + 0x8] = a3\n  9174: a4 = u64 [a2 + 0x18]\n  9177: t2 = u64 [a1]\n  9179: u64 [sp] = t2\n  9181: a3 = u64 [a1 + 0x8]\n  9184: s1 = u64 [a2 + 0x8]\n  9187: a5 = u64 [a2]\n  9189: t1 = u64 [a1 + 0x10]\n  9192: t0 = u64 [a2 + 0x10]\n  9195: a2 = s1 + a3\n  9198: t2 = t2 + a5\n  9201: a5 = t2 <u a5\n  9204: a2 = a2 + a5\n  9207: ra = a2 ^ s1\n  9210: s1 = a2 <u s1\n  9213: s1 = a5 if ra == 0\n  9216: a1 = t0 + t1\n  9219: a5 = u64 [sp + 0x8]\n  9222: a5 = a5 + a4\n  9225: a4 = a1 <u t0\n  9228: a4 = a4 + a5\n  9231: a5 = a1 + s1\n  9234: a1 = a5 <u a1\n  9237: ra = a4 + a1\n  9240: a4 = a2 ^ a3\n  9243: a3 = a2 <u a3\n  9246: a1 = u64 [sp]\n  9248: s1 = t2 <u a1\n  9251: s1 = a3 if a4 != 0\n  9254: t0 = a5 <u t1\n  9257: a1 = u64 [sp + 0x8]\n  9260: a4 = ra ^ a1\n  9263: a3 = ra <u a1\n  9266: a3 = t0 if a4 == 0\n  9269: a1 = a5 ^ t1\n  9272: a1 = a1 | a4\n  9275: s1 = a3 if a1 != 0\n  9278: jump @144 if s1 != 0\n      : @143 (gas: 10)\n  9281: u64 [a0] = t2\n  9283: u64 [a0 + 0x8] = a2\n  9286: u64 [a0 + 0x10] = a5\n  9289: u64 [a0 + 0x18] = ra\n  9292: sp = s0 + 0xffffffffffffff90\n  9295: ra = u64 [sp + 0x68]\n  9298: s0 = u64 [sp + 0x60]\n  9301: s1 = u64 [sp + 0x58]\n  9304: sp = sp + 0x70\n  9307: ret\n      : @144 (gas: 8)\n  9309: u64 [sp + 64] = 0\n  9312: u64 [sp + 56] = 0\n  9315: u64 [sp + 48] = 0\n  9318: a0 = 0x4e487b7100000000\n  9328: a1 = sp + 0x30\n  9331: u64 [sp + 0x48] = a0\n  9334: a0 = 0\n  9336: ra = 142, jump @8\n      : @145 [@dyn 71] (gas: 7)\n  9342: u64 [sp + 40] = 0\n  9345: u64 [sp + 32] = 0\n  9348: u64 [sp + 16] = 0x11\n  9352: a0 = 0x4\n  9355: a1 = sp + 0x10\n  9358: u64 [sp + 24] = 0\n  9361: ra = 144, jump @8\n      : @146 [@dyn 72] (gas: 3)\n  9367: a1 = 0x24\n  9370: a0 = 0\n  9372: ra = 146, jump @0\n      : @147 [@dyn 73] (gas: 6)\n  9378: i32 a1 = a0 + 0\n  9380: a0 = 0x1\n  9383: a2 = 0x24\n  9386: ra = 0x94\n  9390: ecalli 5 // 'seal_return'\n  9392: fallthrough\n      : @148 [@dyn 74] (gas: 30)\n  9393: sp = sp + 0xfffffffffffffee0\n  9397: u64 [sp + 0x118] = ra\n  9401: u64 [sp + 0x110] = s0\n  9405: u64 [sp + 0x108] = s1\n  9409: s0 = sp + 0x120\n  9413: sp = sp & 0xffffffffffffffe0\n  9416: a3 = u64 [a2 + 0x18]\n  9419: u64 [sp + 0x38] = a3\n  9422: a3 = u64 [a2 + 0x10]\n  9425: u64 [sp + 0x30] = a3\n  9428: a3 = u64 [a2]\n  9430: u64 [sp + 0x28] = a3\n  9433: a2 = u64 [a2 + 0x8]\n  9436: u64 [sp + 0x20] = a2\n  9439: a2 = u64 [a1]\n  9441: u64 [sp + 0x58] = a2\n  9444: a2 = u64 [a1 + 0x8]\n  9447: u64 [sp + 0x50] = a2\n  9450: a2 = u64 [a1 + 0x10]\n  9453: u64 [sp + 0x48] = a2\n  9456: a1 = u64 [a1 + 0x18]\n  9459: u64 [sp + 0x40] = a1\n  9462: a1 = u64 [a0]\n  9464: u64 [sp + 0x18] = a1\n  9467: a1 = u64 [a0 + 0x8]\n  9470: u64 [sp + 0x10] = a1\n  9473: s1 = u32 [a0 + 0x10]\n  9476: a1 = 0x20\n  9479: a0 = 0\n  9481: ra = 150, jump @0\n      : @149 [@dyn 75] (gas: 58)\n  9487: a1 = reverse s1\n  9489: a2 = u64 [sp + 0x10]\n  9492: a2 = reverse a2\n  9494: a3 = u64 [sp + 0x18]\n  9497: a3 = reverse a3\n  9499: u8 [a0 + 0x18] = a3\n  9502: u8 [a0 + 0x10] = a2\n  9505: u8 [a0 + 11] = 0\n  9508: u8 [a0 + 10] = 0\n  9511: u8 [a0 + 9] = 0\n  9514: u8 [a0 + 0x8] = a1\n  9517: u8 [a0 + 7] = 0\n  9520: u8 [a0 + 6] = 0\n  9523: u8 [a0 + 5] = 0\n  9526: u8 [a0 + 4] = 0\n  9529: u8 [a0 + 3] = 0\n  9532: u8 [a0 + 2] = 0\n  9535: u8 [a0 + 1] = 0\n  9538: u8 [a0 + 0] = 0\n  9540: a4 = a3 >> 0x38\n  9543: u8 [a0 + 0x1f] = a4\n  9546: a4 = a3 >> 0x30\n  9549: u8 [a0 + 0x1e] = a4\n  9552: a4 = a3 >> 0x28\n  9555: u8 [a0 + 0x1d] = a4\n  9558: a4 = a3 >> 0x20\n  9561: u8 [a0 + 0x1c] = a4\n  9564: a4 = a3 >> 0x18\n  9567: u8 [a0 + 0x1b] = a4\n  9570: a4 = a3 >> 0x10\n  9573: u8 [a0 + 0x1a] = a4\n  9576: a3 = a3 >> 0x8\n  9579: u8 [a0 + 0x19] = a3\n  9582: a3 = a2 >> 0x38\n  9585: u8 [a0 + 0x17] = a3\n  9588: a3 = a2 >> 0x30\n  9591: u8 [a0 + 0x16] = a3\n  9594: a3 = a2 >> 0x28\n  9597: u8 [a0 + 0x15] = a3\n  9600: a3 = a2 >> 0x20\n  9603: u8 [a0 + 0x14] = a3\n  9606: a3 = a2 >> 0x18\n  9609: u8 [a0 + 0x13] = a3\n  9612: a3 = a2 >> 0x10\n  9615: u8 [a0 + 0x12] = a3\n  9618: a2 = a2 >> 0x8\n  9621: u8 [a0 + 0x11] = a2\n  9624: a2 = a1 >> 0x38\n  9627: u8 [a0 + 0xf] = a2\n  9630: a2 = a1 >> 0x30\n  9633: u8 [a0 + 0xe] = a2\n  9636: a2 = a1 >> 0x28\n  9639: u8 [a0 + 0xd] = a2\n  9642: a1 = a1 >> 0x20\n  9645: u8 [a0 + 0xc] = a1\n  9648: a0 = 0x20\n  9651: a1 = 0x20\n  9654: ra = 152, jump @0\n      : @150 [@dyn 76] (gas: 35)\n  9660: u8 [a0 + 31] = 0\n  9663: u8 [a0 + 30] = 0\n  9666: u8 [a0 + 29] = 0\n  9669: u8 [a0 + 28] = 0\n  9672: u8 [a0 + 27] = 0\n  9675: u8 [a0 + 26] = 0\n  9678: u8 [a0 + 25] = 0\n  9681: u8 [a0 + 24] = 0\n  9684: u8 [a0 + 23] = 0\n  9687: u8 [a0 + 22] = 0\n  9690: u8 [a0 + 21] = 0\n  9693: u8 [a0 + 20] = 0\n  9696: u8 [a0 + 19] = 0\n  9699: u8 [a0 + 18] = 0\n  9702: u8 [a0 + 17] = 0\n  9705: u8 [a0 + 16] = 0\n  9708: u8 [a0 + 15] = 0\n  9711: u8 [a0 + 14] = 0\n  9714: u8 [a0 + 13] = 0\n  9717: u8 [a0 + 12] = 0\n  9720: u8 [a0 + 11] = 0\n  9723: u8 [a0 + 10] = 0\n  9726: u8 [a0 + 9] = 0\n  9729: u8 [a0 + 8] = 0\n  9732: u8 [a0 + 7] = 0\n  9735: u8 [a0 + 6] = 0\n  9738: u8 [a0 + 5] = 0\n  9741: u8 [a0 + 4] = 0\n  9744: u8 [a0 + 3] = 0\n  9747: u8 [a0 + 2] = 0\n  9750: u8 [a0 + 1] = 0\n  9753: u8 [a0 + 0] = 0\n  9755: a1 = 0x40\n  9758: a0 = 0\n  9760: ra = 154, jump @0\n      : @151 [@dyn 77] (gas: 14)\n  9766: i32 a0 = a0 + 0\n  9768: i32 a2 = sp + 0xe0\n  9772: a1 = 0x40\n  9775: ecalli 4 // 'hash_keccak_256'\n  9777: a0 = u64 [sp + 0xe0]\n  9781: u64 [sp + 0x18] = a0\n  9784: a0 = u64 [sp + 0xe8]\n  9788: u64 [sp + 0x10] = a0\n  9791: a0 = u64 [sp + 0xf0]\n  9795: u64 [sp + 0x8] = a0\n  9798: s1 = u64 [sp + 0xf8]\n  9802: a1 = 0x20\n  9805: a0 = 0\n  9807: ra = 156, jump @0\n      : @152 [@dyn 78] (gas: 71)\n  9813: a1 = u64 [sp + 0x40]\n  9816: a1 = reverse a1\n  9818: a2 = u64 [sp + 0x48]\n  9821: a2 = reverse a2\n  9823: a3 = u64 [sp + 0x50]\n  9826: a3 = reverse a3\n  9828: a4 = u64 [sp + 0x58]\n  9831: a4 = reverse a4\n  9833: a5 = a4 >> 0x38\n  9836: u8 [a0 + 0x1f] = a5\n  9839: a5 = a4 >> 0x30\n  9842: u8 [a0 + 0x1e] = a5\n  9845: a5 = a4 >> 0x28\n  9848: u8 [a0 + 0x1d] = a5\n  9851: a5 = a4 >> 0x20\n  9854: u8 [a0 + 0x1c] = a5\n  9857: a5 = a4 >> 0x18\n  9860: u8 [a0 + 0x1b] = a5\n  9863: a5 = a4 >> 0x10\n  9866: u8 [a0 + 0x1a] = a5\n  9869: a5 = a4 >> 0x8\n  9872: u8 [a0 + 0x19] = a5\n  9875: u8 [a0 + 0x18] = a4\n  9878: a4 = a3 >> 0x38\n  9881: u8 [a0 + 0x17] = a4\n  9884: a4 = a3 >> 0x30\n  9887: u8 [a0 + 0x16] = a4\n  9890: a4 = a3 >> 0x28\n  9893: u8 [a0 + 0x15] = a4\n  9896: a4 = a3 >> 0x20\n  9899: u8 [a0 + 0x14] = a4\n  9902: a4 = a3 >> 0x18\n  9905: u8 [a0 + 0x13] = a4\n  9908: a4 = a3 >> 0x10\n  9911: u8 [a0 + 0x12] = a4\n  9914: a4 = a3 >> 0x8\n  9917: u8 [a0 + 0x11] = a4\n  9920: u8 [a0 + 0x10] = a3\n  9923: a3 = a2 >> 0x38\n  9926: u8 [a0 + 0xf] = a3\n  9929: a3 = a2 >> 0x30\n  9932: u8 [a0 + 0xe] = a3\n  9935: a3 = a2 >> 0x28\n  9938: u8 [a0 + 0xd] = a3\n  9941: a3 = a2 >> 0x20\n  9944: u8 [a0 + 0xc] = a3\n  9947: a3 = a2 >> 0x18\n  9950: u8 [a0 + 0xb] = a3\n  9953: a3 = a2 >> 0x10\n  9956: u8 [a0 + 0xa] = a3\n  9959: a3 = a2 >> 0x8\n  9962: u8 [a0 + 0x9] = a3\n  9965: u8 [a0 + 0x8] = a2\n  9968: a2 = a1 >> 0x38\n  9971: u8 [a0 + 0x7] = a2\n  9974: a2 = a1 >> 0x30\n  9977: u8 [a0 + 0x6] = a2\n  9980: a2 = a1 >> 0x28\n  9983: u8 [a0 + 0x5] = a2\n  9986: a2 = a1 >> 0x20\n  9989: u8 [a0 + 0x4] = a2\n  9992: a2 = a1 >> 0x18\n  9995: u8 [a0 + 0x3] = a2\n  9998: a2 = a1 >> 0x10\n 10001: u8 [a0 + 0x2] = a2\n 10004: a2 = a1 >> 0x8\n 10007: u8 [a0 + 0x1] = a2\n 10010: u8 [a0] = a1\n 10012: a0 = 0x20\n 10015: a1 = 0x20\n 10018: ra = 158, jump @0\n      : @153 [@dyn 79] (gas: 66)\n 10024: a1 = s1 >> 0x38\n 10027: u8 [a0 + 0x1f] = a1\n 10030: a1 = s1 >> 0x30\n 10033: u8 [a0 + 0x1e] = a1\n 10036: a1 = s1 >> 0x28\n 10039: u8 [a0 + 0x1d] = a1\n 10042: a1 = s1 >> 0x20\n 10045: u8 [a0 + 0x1c] = a1\n 10048: a1 = s1 >> 0x18\n 10051: u8 [a0 + 0x1b] = a1\n 10054: a1 = s1 >> 0x10\n 10057: u8 [a0 + 0x1a] = a1\n 10060: a1 = s1 >> 0x8\n 10063: u8 [a0 + 0x19] = a1\n 10066: u8 [a0 + 0x18] = s1\n 10069: a2 = u64 [sp + 0x8]\n 10072: a1 = a2 >> 0x38\n 10075: u8 [a0 + 0x17] = a1\n 10078: a1 = a2 >> 0x30\n 10081: u8 [a0 + 0x16] = a1\n 10084: a1 = a2 >> 0x28\n 10087: u8 [a0 + 0x15] = a1\n 10090: a1 = a2 >> 0x20\n 10093: u8 [a0 + 0x14] = a1\n 10096: a1 = a2 >> 0x18\n 10099: u8 [a0 + 0x13] = a1\n 10102: a1 = a2 >> 0x10\n 10105: u8 [a0 + 0x12] = a1\n 10108: a1 = a2 >> 0x8\n 10111: u8 [a0 + 0x11] = a1\n 10114: u8 [a0 + 0x10] = a2\n 10117: a2 = u64 [sp + 0x10]\n 10120: a1 = a2 >> 0x38\n 10123: u8 [a0 + 0xf] = a1\n 10126: a1 = a2 >> 0x30\n 10129: u8 [a0 + 0xe] = a1\n 10132: a1 = a2 >> 0x28\n 10135: u8 [a0 + 0xd] = a1\n 10138: a1 = a2 >> 0x20\n 10141: u8 [a0 + 0xc] = a1\n 10144: a1 = a2 >> 0x18\n 10147: u8 [a0 + 0xb] = a1\n 10150: a1 = a2 >> 0x10\n 10153: u8 [a0 + 0xa] = a1\n 10156: a1 = a2 >> 0x8\n 10159: u8 [a0 + 0x9] = a1\n 10162: u8 [a0 + 0x8] = a2\n 10165: a2 = u64 [sp + 0x18]\n 10168: a1 = a2 >> 0x38\n 10171: u8 [a0 + 0x7] = a1\n 10174: a1 = a2 >> 0x30\n 10177: u8 [a0 + 0x6] = a1\n 10180: a1 = a2 >> 0x28\n 10183: u8 [a0 + 0x5] = a1\n 10186: a1 = a2 >> 0x20\n 10189: u8 [a0 + 0x4] = a1\n 10192: a1 = a2 >> 0x18\n 10195: u8 [a0 + 0x3] = a1\n 10198: a1 = a2 >> 0x10\n 10201: u8 [a0 + 0x2] = a1\n 10204: a1 = a2 >> 0x8\n 10207: u8 [a0 + 0x1] = a1\n 10210: u8 [a0] = a2\n 10212: a1 = 0x40\n 10215: a0 = 0\n 10217: ra = 160, jump @0\n      : @154 [@dyn 80] (gas: 32)\n 10223: i32 a0 = a0 + 0\n 10225: i32 a2 = sp + 0xe0\n 10229: a1 = 0x40\n 10232: ecalli 4 // 'hash_keccak_256'\n 10234: a0 = u64 [sp + 0xf8]\n 10238: a1 = u64 [sp + 0xf0]\n 10242: a2 = u64 [sp + 0xe8]\n 10246: a3 = u64 [sp + 0xe0]\n 10250: a0 = reverse a0\n 10252: a1 = reverse a1\n 10254: a2 = reverse a2\n 10256: a3 = reverse a3\n 10258: u64 [sp + 0x40] = a3\n 10261: u64 [sp + 0xd8] = a3\n 10265: u64 [sp + 0x48] = a2\n 10268: u64 [sp + 0xd0] = a2\n 10272: u64 [sp + 0x50] = a1\n 10275: u64 [sp + 0xc8] = a1\n 10279: u64 [sp + 0x58] = a0\n 10282: u64 [sp + 0xc0] = a0\n 10286: u64 [sp + 248] = 0\n 10290: u64 [sp + 240] = 0\n 10294: u64 [sp + 232] = 0\n 10298: u64 [sp + 224] = 0\n 10302: u32 [sp + 160] = 0x20\n 10307: i32 a1 = sp + 0xc0\n 10311: i32 a3 = sp + 0xe0\n 10315: i32 a4 = sp + 0xa0\n 10319: a2 = 0xffffffffffffffff\n 10322: a0 = 0\n 10324: ecalli 3 // 'get_storage'\n 10326: fallthrough\n      : @155 (gas: 37)\n 10327: a3 = u64 [sp + 0xe8]\n 10331: a1 = u64 [sp + 0xe0]\n 10335: t0 = u64 [sp + 0xf8]\n 10339: a2 = u64 [sp + 0xf0]\n 10343: a5 = u64 [sp + 0x20]\n 10346: a5 = a5 + a3\n 10349: a0 = u64 [sp + 0x28]\n 10352: a0 = a0 + a1\n 10355: u64 [sp + 0x28] = a0\n 10358: a4 = a0 <u a1\n 10361: a5 = a5 + a4\n 10364: t1 = a5 ^ a3\n 10367: u64 [sp + 0x20] = a5\n 10370: a3 = a5 <u a3\n 10373: a5 = a4 ^ 0x1\n 10376: a4 = a3 if t1 != 0\n 10379: a0 = u64 [sp + 0x30]\n 10382: a0 = a0 + a2\n 10385: s1 = a0 + a4\n 10388: a4 = s1 <u a0\n 10391: a1 = u64 [sp + 0x38]\n 10394: a1 = a1 + t0\n 10397: a0 = a0 <u a2\n 10400: a0 = a0 + a1\n 10403: a4 = a4 + a0\n 10406: a0 = s1 <u a2\n 10409: a1 = a4 ^ t0\n 10412: u64 [sp + 0x38] = a4\n 10415: a4 = a4 <u t0\n 10418: a4 = a0 if a1 == 0\n 10421: a0 = a4 ^ 0x1\n 10424: a2 = a2 ^ s1\n 10427: a1 = a1 | a2\n 10430: a2 = a3 ^ 0x1\n 10433: a5 = a2 if t1 != 0\n 10436: a5 = a0 if a1 != 0\n 10439: jump @157 if a5 == 0\n      : @156 (gas: 46)\n 10443: a0 = u64 [sp + 0x48]\n 10446: u64 [sp + 0xd0] = a0\n 10450: a0 = u64 [sp + 0x50]\n 10453: u64 [sp + 0xc8] = a0\n 10457: a0 = u64 [sp + 0x58]\n 10460: u64 [sp + 0xc0] = a0\n 10464: a0 = u64 [sp + 0x40]\n 10467: u64 [sp + 0xd8] = a0\n 10471: u64 [sp + 248] = 0\n 10475: u64 [sp + 240] = 0\n 10479: u64 [sp + 232] = 0\n 10483: u64 [sp + 224] = 0\n 10487: u32 [sp + 160] = 0x20\n 10492: i32 a1 = sp + 0xc0\n 10496: i32 a3 = sp + 0xe0\n 10500: i32 a4 = sp + 0xa0\n 10504: a2 = 0xffffffffffffffff\n 10507: a0 = 0\n 10509: ecalli 3 // 'get_storage'\n 10511: a0 = u64 [sp + 0x40]\n 10514: u64 [sp + 0xd8] = a0\n 10518: a0 = u64 [sp + 0x48]\n 10521: u64 [sp + 0xd0] = a0\n 10525: a0 = u64 [sp + 0x50]\n 10528: u64 [sp + 0xc8] = a0\n 10532: a0 = u64 [sp + 0x58]\n 10535: u64 [sp + 0xc0] = a0\n 10539: a0 = u64 [sp + 0x38]\n 10542: u64 [sp + 0xf8] = a0\n 10546: u64 [sp + 0xf0] = s1\n 10550: a0 = u64 [sp + 0x20]\n 10553: u64 [sp + 0xe8] = a0\n 10557: a0 = u64 [sp + 0x28]\n 10560: u64 [sp + 0xe0] = a0\n 10564: i32 a1 = sp + 0xc0\n 10568: i32 a3 = sp + 0xe0\n 10572: a2 = 0xffffffffffffffff\n 10575: a4 = 0x20\n 10578: a0 = 0\n 10580: ecalli 7 // 'set_storage'\n 10582: sp = s0 + 0xfffffffffffffee0\n 10586: ra = u64 [sp + 0x118]\n 10590: s0 = u64 [sp + 0x110]\n 10594: s1 = u64 [sp + 0x108]\n 10598: sp = sp + 0x120\n 10602: ret\n      : @157 (gas: 8)\n 10604: u64 [sp + 144] = 0\n 10608: u64 [sp + 136] = 0\n 10612: u64 [sp + 128] = 0\n 10616: a0 = 0x4e487b7100000000\n 10626: a1 = sp + 0x80\n 10630: u64 [sp + 0x98] = a0\n 10634: a0 = 0\n 10636: ra = 162, jump @8\n      : @158 [@dyn 81] (gas: 7)\n 10642: u64 [sp + 120] = 0\n 10645: u64 [sp + 112] = 0\n 10648: u64 [sp + 96] = 0x11\n 10652: a0 = 0x4\n 10655: a1 = sp + 0x60\n 10658: u64 [sp + 104] = 0\n 10661: ra = 164, jump @8\n      : @159 [@dyn 82] (gas: 3)\n 10667: a1 = 0x24\n 10670: a0 = 0\n 10672: ra = 166, jump @0\n      : @160 [@dyn 83] (gas: 7)\n 10678: i32 a1 = a0 + 0\n 10680: a0 = 0x1\n 10683: a2 = 0x24\n 10686: ecalli 5 // 'seal_return'\n 10688: a0 = 0\n 10690: ra = 0xa8\n 10694: jump @10\n      : @161 [export #0: 'call'] (gas: 2)\n 10697: a0 = 0\n 10699: ra = 168, jump @10\n      : @162 [@dyn 84] [export #1: 'deploy'] (gas: 2)\n 10705: a0 = 0x1\n 10708: ra = 170, jump @10\n      : @163 [@dyn 85] (gas: 9)\n 10714: sp = sp + 0xffffffffffffffc0\n 10717: u64 [sp + 0x38] = ra\n 10720: u64 [sp + 0x30] = s0\n 10723: u64 [sp + 0x28] = s1\n 10726: s0 = sp + 0x40\n 10729: sp = sp & 0xfffffffffffffff0\n 10732: s1 = a0\n 10734: a0 = sp\n 10736: ra = 172, jump @38\n      : @164 [@dyn 86] (gas: 14)\n 10742: a0 = u64 [sp + 0x10]\n 10745: a1 = u64 [sp + 0x18]\n 10748: a2 = u64 [sp]\n 10750: a3 = u64 [sp + 0x8]\n 10753: u64 [s1 + 0x10] = a0\n 10756: u64 [s1 + 0x18] = a1\n 10759: u64 [s1] = a2\n 10761: u64 [s1 + 0x8] = a3\n 10764: sp = s0 + 0xffffffffffffffc0\n 10767: ra = u64 [sp + 0x38]\n 10770: s0 = u64 [sp + 0x30]\n 10773: s1 = u64 [sp + 0x28]\n 10776: sp = sp + 0x40\n 10779: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"addCard(address,uint256,uint256)": "3641d726",
							"getBalance(address,uint256)": "2b04e840",
							"removeCard(address,uint256,uint256)": "2d58bd80"
						}
					},
					"irOptimized": "/// @use-src 1:\"CardInventory.sol\"\nobject \"CardInventory_137\" {\n    code {\n        {\n            /// @src 1:78:653  \"contract CardInventory {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"CardInventory_137_deployed\"), datasize(\"CardInventory_137_deployed\"))\n            return(_1, datasize(\"CardInventory_137_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 1:\"CardInventory.sol\"\n    object \"CardInventory_137_deployed\" {\n        code {\n            {\n                /// @src 1:78:653  \"contract CardInventory {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x2b04e840 { external_fun_getBalance() }\n                    case 0x2d58bd80 { external_fun_removeCard() }\n                    case 0x3641d726 { external_fun_addCard() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_addresst_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_getBalance()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                let ret := fun_getBalance(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_uint256(add(headStart, offset_2), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_removeCard()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_addresst_uint256t_uint256(4, calldatasize())\n                fun_removeCard(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_addCard()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_addresst_uint256t_uint256(4, calldatasize())\n                fun_addCard(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function zero_value_for_split_uint256() -> ret\n            { ret := 0 }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_mapping_uint256_uint256_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function mapping_index_access_mapping_uint256_uint256_of_uint256(slot, key) -> dataSlot\n            {\n                mstore(0, convert_uint256_to_uint256(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            /// @ast-id 136 @src 1:522:650  \"function getBalance(address user, uint cardId) external view returns (uint) {...\"\n            function fun_getBalance(var_user, var_cardId) -> var\n            {\n                /// @src 1:592:596  \"uint\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var := zero_uint256\n                /// @src 1:616:628  \"cardBalances\"\n                let _2_slot := 0x00\n                let expr_129_slot := _2_slot\n                /// @src 1:629:633  \"user\"\n                let _1 := var_user\n                let expr := _1\n                /// @src 1:616:634  \"cardBalances[user]\"\n                let _2 := mapping_index_access_mapping_address_mapping_uint256_uint256_of_address(expr_129_slot, expr)\n                let _5_slot := _2\n                let expr_131_slot := _5_slot\n                /// @src 1:635:641  \"cardId\"\n                let _3 := var_cardId\n                let expr_1 := _3\n                /// @src 1:616:642  \"cardBalances[user][cardId]\"\n                let _4 := mapping_index_access_mapping_uint256_uint256_of_uint256(expr_131_slot, expr_1)\n                let _5 := read_from_storage_split_offset_uint256(_4)\n                let expr_2 := _5\n                /// @src 1:609:642  \"return cardBalances[user][cardId]\"\n                var := expr_2\n                leave\n            }\n            /// @src 1:78:653  \"contract CardInventory {...\"\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not enough cards\")\n            }\n            function abi_encode_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 16)\n                store_literal_in_memory_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_83e8(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c(tail)\n            }\n            function require_helper_stringliteral_83e8(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_83e8(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            /// @ast-id 120 @src 1:312:512  \"function removeCard(address user, uint cardId, uint amount) external {...\"\n            function fun_removeCard(var_user, var_cardId, var_amount)\n            {\n                /// @src 1:400:412  \"cardBalances\"\n                let _9_slot := 0x00\n                let expr_101_slot := _9_slot\n                /// @src 1:413:417  \"user\"\n                let _1 := var_user\n                let expr := _1\n                /// @src 1:400:418  \"cardBalances[user]\"\n                let _2 := mapping_index_access_mapping_address_mapping_uint256_uint256_of_address(expr_101_slot, expr)\n                let _slot := _2\n                let expr_103_slot := _slot\n                /// @src 1:419:425  \"cardId\"\n                let _3 := var_cardId\n                let expr_1 := _3\n                /// @src 1:400:426  \"cardBalances[user][cardId]\"\n                let _4 := mapping_index_access_mapping_uint256_uint256_of_uint256(expr_103_slot, expr_1)\n                let _5 := read_from_storage_split_offset_uint256(_4)\n                let expr_2 := _5\n                /// @src 1:430:436  \"amount\"\n                let _6 := var_amount\n                let expr_3 := _6\n                /// @src 1:400:436  \"cardBalances[user][cardId] >= amount\"\n                let expr_4 := iszero(lt(cleanup_uint256(expr_2), cleanup_uint256(expr_3)))\n                /// @src 1:392:457  \"require(cardBalances[user][cardId] >= amount, \\\"Not enough cards\\\")\"\n                require_helper_stringliteral_83e8(expr_4)\n                /// @src 1:498:504  \"amount\"\n                let _7 := var_amount\n                let expr_5 := _7\n                /// @src 1:468:480  \"cardBalances\"\n                let _18_slot := 0x00\n                let expr_111_slot := _18_slot\n                /// @src 1:481:485  \"user\"\n                let _8 := var_user\n                let expr_6 := _8\n                /// @src 1:468:486  \"cardBalances[user]\"\n                let _9 := mapping_index_access_mapping_address_mapping_uint256_uint256_of_address(expr_111_slot, expr_6)\n                let _21_slot := _9\n                let expr_114_slot := _21_slot\n                /// @src 1:487:493  \"cardId\"\n                let _10 := var_cardId\n                let expr_7 := _10\n                /// @src 1:468:494  \"cardBalances[user][cardId]\"\n                let _11 := mapping_index_access_mapping_uint256_uint256_of_uint256(expr_114_slot, expr_7)\n                /// @src 1:468:504  \"cardBalances[user][cardId] -= amount\"\n                let _12 := read_from_storage_split_offset_uint256(_11)\n                let expr_8 := checked_sub_uint256(_12, expr_5)\n                update_storage_value_offset_uint256_to_uint256(_11, expr_8)\n            }\n            /// @src 1:78:653  \"contract CardInventory {...\"\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @ast-id 91 @src 1:181:302  \"function addCard(address user, uint cardId, uint amount) external {...\"\n            function fun_addCard(var_user, var_cardId, var_amount)\n            {\n                /// @src 1:288:294  \"amount\"\n                let _1 := var_amount\n                let expr := _1\n                /// @src 1:258:270  \"cardBalances\"\n                let _26_slot := 0x00\n                let expr_slot := _26_slot\n                /// @src 1:271:275  \"user\"\n                let _2 := var_user\n                let expr_1 := _2\n                /// @src 1:258:276  \"cardBalances[user]\"\n                let _3 := mapping_index_access_mapping_address_mapping_uint256_uint256_of_address(expr_slot, expr_1)\n                let _29_slot := _3\n                let expr_85_slot := _29_slot\n                /// @src 1:277:283  \"cardId\"\n                let _4 := var_cardId\n                let expr_2 := _4\n                /// @src 1:258:284  \"cardBalances[user][cardId]\"\n                let _5 := mapping_index_access_mapping_uint256_uint256_of_uint256(expr_85_slot, expr_2)\n                /// @src 1:258:294  \"cardBalances[user][cardId] += amount\"\n                let _6 := read_from_storage_split_offset_uint256(_5)\n                let expr_3 := checked_add_uint256(_6, expr)\n                update_storage_value_offset_uint256_to_uint256(_5, expr_3)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220ef8d745eac46b0004151b1c6bd978687c3fdf8c22126c171c69702613e33079264736f6c634300081c0033\"\n    }\n}\n",
					"hash": "b306a183637002afaa59752b6820808e4ceff84b372cafc45455bea1b12b27bf",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"CardGame.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "CardGame.sol",
					"exportedSymbols": {
						"CardGame": [
							65
						],
						"CardInventory": [
							137
						]
					},
					"id": 66,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".2",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "41:31:0"
						},
						{
							"absolutePath": "CardInventory.sol",
							"file": "./CardInventory.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 66,
							"sourceUnit": 138,
							"src": "82:29:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CardGame",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 65,
							"linearizedBaseContracts": [
								65
							],
							"name": "CardGame",
							"nameLocation": "126:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "15d52a5c",
									"id": 5,
									"mutability": "mutable",
									"name": "inventory",
									"nameLocation": "163:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 65,
									"src": "142:30:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_CardInventory_$137",
										"typeString": "contract CardInventory"
									},
									"typeName": {
										"id": 4,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3,
											"name": "CardInventory",
											"nameLocations": [
												"142:13:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 137,
											"src": "142:13:0"
										},
										"referencedDeclaration": 137,
										"src": "142:13:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_CardInventory_$137",
											"typeString": "contract CardInventory"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0ef63509",
									"id": 8,
									"mutability": "mutable",
									"name": "totalCardTypes",
									"nameLocation": "191:14:0",
									"nodeType": "VariableDeclaration",
									"scope": 65,
									"src": "179:30:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 6,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "179:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "35",
										"id": 7,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "208:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_5_by_1",
											"typeString": "int_const 5"
										},
										"value": "5"
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "39658f7e10a1d9cffd36a1fa27ed96c5c69fc65ecc9ef30ba604e9615211807d",
									"id": 14,
									"name": "CardWon",
									"nameLocation": "226:7:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "250:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "234:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "234:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"indexed": false,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "261:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "256:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "256:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "233:35:0"
									},
									"src": "220:49:0"
								},
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "311:56:0",
										"statements": [
											{
												"expression": {
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 19,
														"name": "inventory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "322:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_CardInventory_$137",
															"typeString": "contract CardInventory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 21,
																"name": "_inventory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 16,
																"src": "348:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 20,
															"name": "CardInventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 137,
															"src": "334:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_CardInventory_$137_$",
																"typeString": "type(contract CardInventory)"
															}
														},
														"id": 22,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "334:25:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_CardInventory_$137",
															"typeString": "contract CardInventory"
														}
													},
													"src": "322:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_CardInventory_$137",
														"typeString": "contract CardInventory"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "322:37:0"
											}
										]
									},
									"id": 26,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "_inventory",
												"nameLocation": "299:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "291:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "290:20:0"
									},
									"returnParameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "311:0:0"
									},
									"scope": 65,
									"src": "279:88:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 63,
										"nodeType": "Block",
										"src": "407:252:0",
										"statements": [
											{
												"assignments": [
													30
												],
												"declarations": [
													{
														"constant": false,
														"id": 30,
														"mutability": "mutable",
														"name": "random",
														"nameLocation": "423:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 63,
														"src": "418:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 29,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "418:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 47,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 36,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "478:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 37,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "484:9:0",
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "478:15:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"expression": {
																					"id": 38,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "495:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "499:6:0",
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "495:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"expression": {
																					"id": 40,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "507:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 41,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "513:10:0",
																				"memberName": "prevrandao",
																				"nodeType": "MemberAccess",
																				"src": "507:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 34,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "461:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 35,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "465:12:0",
																			"memberName": "encodePacked",
																			"nodeType": "MemberAccess",
																			"src": "461:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 42,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "461:63:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 33,
																	"name": "keccak256",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967288,
																	"src": "451:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																		"typeString": "function (bytes memory) pure returns (bytes32)"
																	}
																},
																"id": 43,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "451:74:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "432:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 31,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "432:4:0",
																"typeDescriptions": {}
															}
														},
														"id": 44,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "432:104:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 45,
														"name": "totalCardTypes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "539:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "432:121:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "418:135:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 51,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "586:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 52,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "590:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "586:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 53,
															"name": "random",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 30,
															"src": "598:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "606:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"expression": {
															"id": 48,
															"name": "inventory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5,
															"src": "568:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_CardInventory_$137",
																"typeString": "contract CardInventory"
															}
														},
														"id": 50,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "578:7:0",
														"memberName": "addCard",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 91,
														"src": "568:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256) external"
														}
													},
													"id": 55,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "568:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 56,
												"nodeType": "ExpressionStatement",
												"src": "568:40:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 58,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "632:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 59,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "636:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "632:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 60,
															"name": "random",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 30,
															"src": "644:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 57,
														"name": "CardWon",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "624:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 61,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "624:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 62,
												"nodeType": "EmitStatement",
												"src": "619:32:0"
											}
										]
									},
									"functionSelector": "15ecef92",
									"id": 64,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "spinWheel",
									"nameLocation": "386:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "395:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "407:0:0"
									},
									"scope": 65,
									"src": "377:282:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 66,
							"src": "117:545:0",
							"usedErrors": [],
							"usedEvents": [
								14
							]
						}
					],
					"src": "41:623:0"
				}
			},
			"CardInventory.sol": {
				"id": 1,
				"ast": {
					"absolutePath": "CardInventory.sol",
					"exportedSymbols": {
						"CardInventory": [
							137
						]
					},
					"id": 138,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 67,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".2",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "37:31:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CardInventory",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 137,
							"linearizedBaseContracts": [
								137
							],
							"name": "CardInventory",
							"nameLocation": "87:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 73,
									"mutability": "mutable",
									"name": "cardBalances",
									"nameLocation": "158:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 137,
									"src": "108:62:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(uint256 => uint256))"
									},
									"typeName": {
										"id": 72,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 68,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "116:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "108:41:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(uint256 => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 71,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 69,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "135:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "127:21:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
												"typeString": "mapping(uint256 => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 70,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "143:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "247:55:1",
										"statements": [
											{
												"expression": {
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 82,
																"name": "cardBalances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 73,
																"src": "258:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 85,
															"indexExpression": {
																"id": 83,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 75,
																"src": "271:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "258:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 86,
														"indexExpression": {
															"id": 84,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "277:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "258:26:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 87,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 79,
														"src": "288:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "258:36:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "258:36:1"
											}
										]
									},
									"functionSelector": "3641d726",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addCard",
									"nameLocation": "190:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "206:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "198:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "198:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "217:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "212:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "212:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "230:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "225:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "225:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "197:40:1"
									},
									"returnParameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "247:0:1"
									},
									"scope": 137,
									"src": "181:121:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 119,
										"nodeType": "Block",
										"src": "381:131:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 101,
																		"name": "cardBalances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 73,
																		"src": "400:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(uint256 => uint256))"
																		}
																	},
																	"id": 103,
																	"indexExpression": {
																		"id": 102,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 93,
																		"src": "413:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "400:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 105,
																"indexExpression": {
																	"id": 104,
																	"name": "cardId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 95,
																	"src": "419:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "400:26:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 106,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 97,
																"src": "430:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "400:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420656e6f756768206361726473",
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "438:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c",
																"typeString": "literal_string \"Not enough cards\""
															},
															"value": "Not enough cards"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_83e82ded978867a6fc75b7ab2db0f04e1b4f3469cbe518ad9a3ebf4eb337675c",
																"typeString": "literal_string \"Not enough cards\""
															}
														],
														"id": 100,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "392:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "392:65:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 110,
												"nodeType": "ExpressionStatement",
												"src": "392:65:1"
											},
											{
												"expression": {
													"id": 117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 111,
																"name": "cardBalances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 73,
																"src": "468:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 114,
															"indexExpression": {
																"id": 112,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 93,
																"src": "481:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "468:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 115,
														"indexExpression": {
															"id": 113,
															"name": "cardId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 95,
															"src": "487:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "468:26:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 116,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 97,
														"src": "498:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "468:36:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 118,
												"nodeType": "ExpressionStatement",
												"src": "468:36:1"
											}
										]
									},
									"functionSelector": "2d58bd80",
									"id": 120,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "removeCard",
									"nameLocation": "321:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "340:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "332:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "332:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "351:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "346:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 94,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "346:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "364:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "359:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "359:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "331:40:1"
									},
									"returnParameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "381:0:1"
									},
									"scope": 137,
									"src": "312:200:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 135,
										"nodeType": "Block",
										"src": "598:52:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 129,
															"name": "cardBalances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 73,
															"src": "616:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(uint256 => uint256))"
															}
														},
														"id": 131,
														"indexExpression": {
															"id": 130,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 122,
															"src": "629:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "616:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
															"typeString": "mapping(uint256 => uint256)"
														}
													},
													"id": 133,
													"indexExpression": {
														"id": 132,
														"name": "cardId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 124,
														"src": "635:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "616:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 128,
												"id": 134,
												"nodeType": "Return",
												"src": "609:33:1"
											}
										]
									},
									"functionSelector": "2b04e840",
									"id": 136,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBalance",
									"nameLocation": "531:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "550:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "542:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 121,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "542:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "cardId",
												"nameLocation": "561:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "556:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 123,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "556:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "541:27:1"
									},
									"returnParameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "592:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "592:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "591:6:1"
									},
									"scope": 137,
									"src": "522:128:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 138,
							"src": "78:575:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "37:618:1"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}